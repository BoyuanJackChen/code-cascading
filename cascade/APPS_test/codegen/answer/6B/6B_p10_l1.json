[
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_vertices = stdin[0]\n    num_edges = int(stdin[1])\n    edges = [None] * num_edges\n    for i in range(2, num_edges+2):\n        edges[i-2] = stdin[i].split()\n\n    vertices = [0] * num_vertices\n    for edge in edges:\n        vertices[int(edge[0]) - 1] += 1\n        vertices[int(edge[1]) - 1] += 1\n\n    max_edges = 0\n    max_edges_i = None\n    for i in range(num_vertices):\n        if vertices[i] > max_edges:\n            max_edges = vertices[i]\n            max_edges_i = i\n\n    max_edges_a = None\n    max_edges_b = None\n    max_edges_c = None\n    for i in range(num_vertices):\n        if i!= max_edges_i and vertices[i] == max_edges:\n            max_edges_a = i\n            break\n    for i in range(num_vertices):\n        if i!= max_edges_i and i!= max_edges_a and vertices[i] == max_edges:\n            max_edges_b = i\n            break\n    for i in range(num_vertices):\n        if i!= max_edges_i and i!= max_edges_a and i!= max_edges_b and vertices[i] == max_edges:\n            max_edges_c = i\n            break\n\n    return str(max_edges) + '\\n' + str(max_edges_a + 1) +'' + str(max_edges_b + 1) +'' + str(max_edges_c + 1)\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nassert(solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == '5')\nassert(solution('''10\n1 2\n1 3\n2 3\n2 4\n4 5\n5 6\n4 7\n4 8\n4 9\n9 10\n''') == '1 8 6')\nassert(solution('''100\n100 101\n50 50\n1 100\n100 50\n101 50\n100 101\n''') == '3 4 4')\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin.readlines()]\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = [edge[1]]\n        else:\n            graph[edge[0]].append(edge[1])\n        if edge[1] not in graph:\n            graph[edge[1]] = [edge[0]]\n        else:\n            graph[edge[1]].append(edge[0])\n    res = 0\n    for vertex in graph:\n        stack = [vertex]\n        visited = set()\n        while stack:\n            node = stack.pop()\n            if node not in visited:\n                visited.add(node)\n                if node in graph:\n                    stack += graph[node]\n        if len(visited) == n:\n            res += 1\n    return str(res)\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport unittest\n\nclass TestConcatenation(unittest.TestCase):\n    def test_solution(self):\n        pass"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_count_of_edges(i: int, j: int) -> int:\n        queue = deque([(i, 0)])\n        visited = set()\n        visited.add(i)\n        count = 0\n        while queue:\n            u, c = queue.popleft()\n            if u == j:\n                return c\n            for v in range(n):\n                if u < v < j or v < u < j:\n                    continue\n                if v not in visited:\n                    visited.add(v)\n                    queue.append((v, c + 1))\n        return count\n\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin.readlines()[1:]]\n    edges.sort(key=lambda x: x[0])\n\n    res = 0\n    for i in range(n):\n        if edges[i][0]!= i:\n            continue\n        res = max(res, get_count_of_edges(edges[i][0], edges[i][1]))\n\n    for i in range(n):\n        if edges[i][1]!= i:\n            continue\n        res = max(res, get_count_of_edges(edges[i][0], edges[i][1]))\n\n    for i in range(n):\n        if edges[i][0]!= edges[i][1]:\n            continue\n        res = max(res, get_count_of_edges(edges[i][0], edges[i][1]))\n\n    for i in range(n):\n        if edges[i][0]!= edges[i][1] and edges[i][1]!= edges[i][0]:\n            res = max(res, get_count_of_edges(edges[i][0], edges[i][1]))\n\n    if res == 0:\n        return \"IMPOSSIBLE\"\n\n    return str(res)\n\n\nassert (solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == '5')\nassert (solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n1 4\n5 6\n7 8\n''') == '5')\nassert (solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n1 6\n5 8\n7 8\n''') == '5')\nassert (solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n1 6\n5 8\n7 8\n4 4\n''') == '5')\nassert (solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n1 6\n5 8\n7 8\n4 4\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n4 4\n''') == '5')\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = []\n    for i in range(n - 1):\n        l.append(list(map(int, stdin.readline().strip().split())))\n    graph = [list(range(n)) for i in range(n)]\n    for i in range(len(l)):\n        graph[l[i][0] - 1][l[i][1] - 1] = -1\n        graph[l[i][1] - 1][l[i][0] - 1] = -1\n    res = [0, 0, 0]\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if graph[i][j] == -1:\n                    continue\n                res[graph[i][j]] = max(res[graph[i][j]], graph[i][j])\n    return''.join(map(str, res))"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_edge(a, b):\n        if a == b:\n            return [a]\n        for edge in edges:\n            if edge[0] == a and edge[1] == b:\n                return [a, b]\n            if edge[0] == b and edge[1] == a:\n                return [b, a]\n\n    n = int(stdin.readline())\n    edges = [list(map(int, stdin.readline().split())) for i in range(n - 1)]\n\n    max_edges = 0\n\n    for a in range(1, n):\n        for b in range(a + 1, n):\n            paths = find_edge(a, b)\n            if paths:\n                max_edges = max(max_edges, len(paths))\n                a, b = paths\n\n    print(max_edges)\n    return"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    tree = {i: set() for i in range(1, n + 1)}\n    for _ in range(n - 1):\n        a, b = tuple(map(int, stdin.readline().split()))\n        tree[a].add(b)\n        tree[b].add(a)\n    \n    visited = set()\n    result = 0\n    for i in range(1, n + 1):\n        if i in visited:\n            continue\n        stack = [i]\n        result = 0\n        visited.add(i)\n        while stack:\n            v = stack.pop()\n            result += 1\n            for next in tree[v]:\n                if next not in visited:\n                    visited.add(next)\n                    stack.append(next)\n        if result > result:\n            return result\n    return result\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = [stdin.readline().strip().split() for _ in range(n - 1)]\n\n    def find_max(a: int, b: int, c: int) -> int:\n        count = 0\n        for x, y in edges:\n            if x == a or x == c or y == a or y == c:\n                count += 1\n        return count\n\n    v1, v2, v3 = 0, 0, 0\n    max_edges = 0\n    for a, b in edges:\n        if find_max(a, b, v1) >= max_edges:\n            v1, v2, v3 = a, b, v1\n            max_edges = find_max(a, b, v1)\n\n    for a, b in edges:\n        if find_max(a, b, v2) >= max_edges:\n            v1, v2, v3 = a, b, v2\n            max_edges = find_max(a, b, v2)\n\n    for a, b in edges:\n        if find_max(a, b, v3) >= max_edges:\n            v1, v2, v3 = a, b, v3\n            max_edges = find_max(a, b, v3)\n\n    return str(max_edges) +'' +''.join(map(str, [v1, v2, v3]))\n\n\nassert solution('''\\\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n''') == '5 1 8 6'\nassert solution('''\\\n10\n2 5\n3 8\n4 9\n5 10\n6 7\n7 11\n8 9\n9 10\n''') == '9 5 6'\nassert solution('''\\\n10\n2 5\n3 8\n4 9\n5 10\n6 7\n7 11\n8 9\n9 10\n1 5\n2 4\n3 3\n''') == '9 5 6'\nassert solution('''\\\n4\n1 2\n2 3\n3 4\n''') == '1 2 3'\nassert solution('''\\\n4\n2 1\n2 3\n3 4\n''') == '1 2 3'\nassert solution('''\\\n6\n1 2\n2 3\n3 4\n4 5\n5 6\n''') == '6 5 4'\nassert solution('''\\\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n5 7\n5 8\n6 7\n7 8\n''') == '8 6 5'\nassert solution('''\\\n10\n2 3\n3 4\n4 5\n4 6\n5 6\n6 7\n7 8\n7 9\n8 9\n9 10\n10 1\n''') == '9 10 1'\nassert solution('''\\\n5\n1 2\n2 3\n3 4\n4 5\n''') == '5 1 2'\nassert solution('''\\\n5\n1 2\n2 3\n3 4\n4 5\n1 2\n2 3\n3 4\n4 5\n''') == '5 1 2'\nassert solution('''\\\n10\n1 2\n2 3\n3 4\n4 5\n4 6\n5 6\n6 7\n7 8\n7 9\n8 9\n9 10\n10 1\n''') == '10 1'\nassert solution('''\\\n5\n1 2\n2 3\n3 4\n4 5\n1 2\n2 3\n3 4\n4 5\n''') == '1 2'\nassert solution('''\\\n10\n1 2\n2 3\n3 4\n4 5\n4 6\n5 6\n6 7\n7 8\n7 9\n8 9\n9 10\n10 1\n1 2\n''') == '1 2'\nassert solution('''\\\n7\n1 2\n2 3\n3 4\n4 5\n4 6\n5 6\n6 7\n1 2\n2 3\n3 4\n4 5\n1 2\n2 3\n3 4\n4 5\n1 2\n2 3\n3 4\n''') == '1 2'\nassert solution('''\\\n8\n1 2\n2 3\n3 4\n4 5\n4 6\n5 6\n6 7\n7 8\n1 2\n2 3\n3 4\n4 5\n1 2\n2 3\n3 4\n4 5\n1 2\n2 3\n''') == '1 2'\nassert solution('''\\\n5\n1 2\n2 3\n3 4\n4 5\n1 2\n2 3\n3 4\n4 5\n1 2\n2 3\n3 4\n1 2\n''') == '1 2'\nassert solution('''\\\n5\n1 2\n2 3\n3 4\n4 5\n1 2\n2 3\n3 4\n1 2\n2 3\n3 4\n1 2\n1 2\n2 3\n1 2\n2 3\n1 2\n2 3\n1 2\n2 3\n1 2\n''') == '1 2'\nassert solution('''\\\n5\n1 2\n2 3\n3 4\n4 5\n1 2\n2 3\n3 4\n1 2\n2 3\n3 4\n1 2\n1 2\n2 3\n1 2\n2 3\n1 2\n2 3\n1 2\n2 3\n1 2\n1 2\n1 2\n''') == '1 2'\nassert solution('''\\\n10\n1 2\n2 3\n3 4\n4 5\n4 6\n5 6\n6 7\n7 8\n7 9\n8 9\n9 10\n10 1\n''') == '10 1'\nassert solution('''\\\n10\n1 2\n2 3\n3 4\n4 5\n4 6\n5 6\n6 7\n7 8\n7 9\n8 9\n9 10\n10 1\n1 2\n2 3\n1 2\n2 3\n3 4\n1 2\n2 3\n3 4\n1 2\n2 3\n3 4\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n''') == '1 2'\nassert solution('''\\\n10\n1 2\n2 3\n3 4\n4 5\n4 6\n5 6\n6 7\n7 8\n7 9\n8 9\n9 10\n10 1\n1 2\n2 3\n1 2\n1 2\n1 2\n2 3\n1 2\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = [int(d) for d in stdin.split()]\n    for x in range(1, n//2+1):\n        for y in range(x+1, n//2+1):\n            s = set(divisors)\n            if x*y in s and (x+y) in s:\n                return str(x) +'' + str(y)\nsolution(stdin.read())\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    divisors = list(map(int, stdin.split()))\n    divisors = list(sorted(set(divisors)))\n    n = len(divisors)\n    if n <= 1:\n        return \"1 1\"\n    if n == 2:\n        return f\"{divisors[0]} {divisors[1]}\"\n    if n == 3:\n        return f\"{divisors[1]}{divisors[0]}{divisors[2]}\"\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] += dp[i - 1]\n        if i!= n - 1:\n            dp[i] += divisors[i] * dp[i - divisors[i]]\n    for i in range(n - 2, -1, -1):\n        dp[i] -= dp[i + 1]\n        if i!= 0:\n            dp[i] -= divisors[i] * dp[i + divisors[i]]\n    for i in range(n):\n        dp[i] += divisors[i]\n    x = divisors[n - 1]\n    y = divisors[n - 2]\n    for i in range(n - 1, 0, -1):\n        if dp[i - 1] < x * y:\n            x = divisors[i - 1]\n            y = divisors[i - 2]\n    return f\"{x} {y}\""
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = [int(x) for x in stdin.split()]\n    if n == 2:\n        a, b = d[:2]\n        if a == b:\n            return \" \".join(str(x) for x in d)\n        if d.count(a) == 1 and d.count(b) == 1:\n            return \" \".join(str(x) for x in d[::2])\n        if d.count(a) == 1 and d.count(b) == 0:\n            return \" \".join(str(x) for x in d[::2] + [b])\n        if d.count(a) == 0 and d.count(b) == 1:\n            return \" \".join(str(x) for x in d[1::2] + [a])\n    else:\n        a, b = d[:2]\n        if a == b:\n            return \" \".join(str(x) for x in d)\n        if d.count(a) == 1 and d.count(b) == 1:\n            return \" \".join(str(x) for x in d[::2])\n        if d.count(a) == 1 and d.count(b) == 0:\n            return \" \".join(str(x) for x in d[::2] + [b])\n        if d.count(a) == 0 and d.count(b) == 1:\n            return \" \".join(str(x) for x in d[1::2] + [a])\n    return \"\""
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    divisors = [int(d) for d in stdin.split()]\n    n = len(divisors)\n    divisors_set = set(divisors)\n    for i in range(1, n):\n        for j in range(i, n):\n            if i * j in divisors_set:\n                divisors_set.remove(i * j)\n    return''.join(map(str, divisors_set))"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    assert 2 <= n <= 128\n\n    divisors = list(map(int, stdin.split()))\n    assert len(divisors) == n\n\n    for x in range(1, n):\n        for y in range(1, n):\n            if x > y:\n                continue\n            if x in divisors and y in divisors:\n                assert divisors.count(x) == divisors.count(y)\n                return str(x) +'' + str(y)\n\n    assert False"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(x) for x in stdin.readline().split()]\n    target = set()\n    for d in divisors:\n        target.add(d)\n        for i in range(1, d + 1):\n            if d % i == 0:\n                target.add(i)\n    target = list(target)\n    target.sort()\n    for i in range(1, len(target)):\n        if target[i - 1] > target[i] and target[i - 1]!= target[i]:\n            target[i], target[i - 1] = target[i - 1], target[i]\n    target = [str(x) for x in target]\n    return''.join(target)"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = [int(d) for d in stdin.readline().split()]\n\n    #get permutation of divisors\n    perm = list(permutations(d))\n\n    #remove permutation that is not a divisor of both numbers\n    perm = [perm_ for perm_ in perm if is_divisor(perm_[0], perm_[1])]\n\n    #sort divisors of both numbers\n    perm.sort()\n\n    #get divisors of merged list\n    div = [divisor(perm_[0] + perm_[1]) for perm_ in perm]\n\n    #extract only unique divisors\n    div = list(set(div))\n\n    #get divisors of merged list and sort them\n    div.sort()\n\n    #get divisors of merged list and sort them\n    return''.join(str(divisor) for divisor in div)\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    divisors = list(map(int, stdin[1].split(',')))\n    permutations = [list(permutations(divisors))]\n    for i in range(1, len(divisors)):\n        permutations.append([])\n        for p in permutations[-2]:\n            for j in range(1, len(divisors)):\n                if divisors[j] % divisors[0]!= 0 and divisors[0] % divisors[j]!= 0:\n                    permutations[-1].append(p[:j-1] + [divisors[0]] + p[j-1:])\n    permutations = list(reduce(lambda x, y: x + y, permutations))\n    permutations = list(set(permutations))\n    min_ = 987654321\n    for p in permutations:\n        total = 0\n        for d in p:\n            total += d\n        if min_ > total:\n            min_ = total\n            result = p\n    return''.join(map(str, result))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"3 4 3\n   ... 1 2 3 4\n   ... 5 2 2 2\n   ... 7 1 1 4\n   ... \"\"\")\n    '24'\n    >>> solution(\"\"\"5 5 4\n   ... 1 2 4 2 1\n   ... 3 5 1 2 4\n   ... 1 5 7 1 2\n   ... 3 8 7 1 6\n   ... 8 4 7 1 6\n   ... \"\"\")\n    '56'\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    result = -1\n    for i in range(n):\n        ans = 0\n        for j in range(m):\n            if ans + a[i][j] <= k:\n                ans += a[i][j]\n            else:\n                ans = 0\n                break\n        if ans > result:\n            result = ans\n    return str(result)\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, n, k = (int(x) for x in stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(m)]\n    # split matrix into rows\n    rows = [matrix[i][:n] for i in range(m)]\n    # split each row into chunks of length k\n    rows = [rows[i][i:i + k] for i in range(m)]\n    # find all sums of chunks of length k\n    sums = [sum(rows[i]) for i in range(m)]\n    # return max(sums)\n    return str(max(sums))"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    n, m, k = [int(x) for x in stdin.split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in stdin.split()])\n    a = [max(a[i]) for i in range(n)]\n    return sum([a[i] for i in range(n // 2)]) % k\n\n\n\nMore practice:\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    m = min(m, n // 2)\n    ans = 0\n    for i in range(n):\n        cur = 0\n        for j in range(m):\n            cur += a[i][j]\n            if cur % k:\n                break\n        else:\n            ans = max(ans, cur)\n    return str(ans)"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given a matrix $a$ of size $n \\times m$ consisting of integers.\n\nYou can choose no more than $\\left\\lfloor\\frac{m}{2}\\right\\rfloor$ elements in each row. Your task is to choose these elements in such a way that their sum is divisible by $k$ and this sum is the maximum.\n\nIn other words, you can choose no more than a half (rounded down) of elements in each row, you have to find the maximum sum of these elements divisible by $k$.\n    '''\n\n    n, m, k = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    sums = []\n    for row in a:\n        for i in range(0, len(row) - m // 2 + 1):\n            if sum(row[i:i + m // 2]) % k == 0:\n                sums.append(sum(row[i:i + m // 2]))\n\n    return max(sums)\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m, k = map(int, stdin.rstrip().split())\n    array = [map(int, stdin.rstrip().split()) for _ in range(n)]\n    # print(array)\n    sum = 0\n    for i in range(n):\n        for j in range(m // 2):\n            sum += array[i][j]\n    print(sum)"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n, m, k = int(data[0]), int(data[1]), int(data[2])\n    matrix = []\n    for _ in range(n):\n        row = list(map(int, stdin.split()))\n        matrix.append(row)\n    max_row_sum = 0\n    for i in range(n):\n        row_sum = 0\n        for j in range(m):\n            if j + 1 < m // 2:\n                row_sum += matrix[i][j]\n            else:\n                row_sum += matrix[i][j]\n                row_sum += matrix[i][-1 - j]\n        if row_sum % k == 0:\n            max_row_sum = max(max_row_sum, row_sum)\n    return max_row_sum"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    return str(max(sum(row) for row in matrix) - sum(sorted(row)[-k] for row in matrix))"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split(' ')))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split(' '))))\n    d = 0\n    for i in range(n):\n        for j in range(m//2):\n            d += a[i][j]\n    return str(max(0, d - k*(d//k))\n\nassert solution('3 4 3') == '24'\nassert solution('5 5 4') == '56'\nassert solution('1 2 4 2 1') == '24'\nassert solution('3 5 7 1 2') == '56'\nassert solution('8 4 7 1 6') == '56'\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    max_len = 0\n    while len(arr) > 0:\n        arr.sort()\n        if len(arr) > 1:\n            if arr[0] < arr[1]:\n                left = arr.pop(0)\n                right = arr.pop(-1)\n                arr.insert(0, left)\n                arr.append(right)\n            else:\n                if len(arr) > max_len:\n                    max_len = len(arr)\n                break\n        else:\n            max_len = len(arr)\n            break\n    if max_len > 0:\n        return \"\".join([\"L\" if i == 0 else \"R\" for i in range(max_len)])\n    else:\n        return \"\".join([\"L\" for i in range(max_len)])\n\n\n\nInp:\n5\n1 2 4 3 2\n\nOut:\n4\nLRRR\n\nInp:\n7\n1 3 5 6 5 4 2\n\nOut:\n6\nLRLRRR\n\nInp:\n3\n2 2 2\n\nOut:\n1\nR\n\nInp:\n4\n1 2 4 3\n\nOut:\n4\nLLRR\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.strip()\n    a = [int(i) for i in a.split()]\n    a.sort()\n    r = [a[0]]\n    for i in range(1, n):\n        if a[i] > r[-1]:\n            r.append(a[i])\n    return''.join(r)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    result = 0\n    left = 1\n    for i in range(n - 1, -1, -1):\n        if nums[i] >= nums[i - 1]:\n            left += 1\n        else:\n            if left > result:\n                result = left\n            left = 1\n    if left > result:\n        result = left\n\n    r = ''.join(['R' if x == nums[-1] else 'L' for x in nums])\n    return result, r\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ntry:\n    _ = int(input())\n    seq = [int(n) for n in input().split()]\n    k = len(seq)\n    i = 0\n    while i < k:\n        j = k - 1\n        while j >= i:\n            if seq[j] < seq[j - 1]:\n                seq[j], seq[j - 1] = seq[j - 1], seq[j]\n            j -= 1\n        i += 1\n    print(k)\n    print(''.join(['L' if n == seq[0] else 'R' for n in seq]))\nexcept:\n    print('Something went wrong...')\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ntry:\n    input_data = input()\n    n = int(input_data)\nexcept EOFError:\n    print()\n    exit()\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.readline()\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    n = len(a)\n    idx = 0\n    res = 1\n    while idx < n:\n        if a[idx] == a[-1]:\n            res += 1\n            a.pop()\n            n -= 1\n        elif a[idx] == a[0]:\n            a.pop(0)\n            n -= 1\n        else:\n            res = max(res, n)\n            idx += 1\n    return str(res)\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    ans, prev, start = 1, a[0], 0\n    for i in range(1, n):\n        if a[i] > prev:\n            ans = max(ans, i - start + 1)\n            prev = a[i]\n        elif a[i] < prev:\n            prev = a[i]\n            start = i\n    return str(ans)"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(x) for x in stdin.split()]\n    moves = 0\n    res = 0\n    while A:\n        if A[0] > A[-1]:\n            moves += 1\n            A.pop(0)\n        else:\n            A.pop(-1)\n        res = max(res, moves)\n    return str(res)"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(s) for s in stdin.split()]\n    left, right = 0, len(a) - 1\n    while left < right:\n        a[left], a[right] = a[right], a[left]\n        left += 1\n        right -= 1\n    return ''.join(['L' if s == a[0] else 'R' for s in a])"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The minimum non-negative integer value $D$ such that if you add this value to some $a_i$, subtract this value from some $a_i$ and leave some $a_i$ without changes, all obtained values become equal.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a_min = min(a)\n    for d in range(1, n):\n        if (d + a_min) % d == 0:\n            return d\n    return -1\n\nprint(solution(stdin))"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.codewars.com/kata/59b9dfb91e9ae6ac4b000a45\n\n    You are given a sequence $a_1, a_2, \\dots, a_n$ consisting of $n$ integers.\n\n    You can choose any non-negative integer $D$ (i.e. $D \\ge 0$), and for each $a_i$ you can:\n\n      add $D$ (only once), i. e. perform $a_i := a_i + D$, or  subtract $D$ (only once), i. e. perform $a_i := a_i - D$, or  leave the value of $a_i$ unchanged. \n    \n    It is possible that after an operation the value $a_i$ becomes negative.\n    \n    Your goal is to choose such minimum non-negative integer $D$ and perform changes in such a way, that all $a_i$ are equal (i.e. $a_1=a_2=\\dots=a_n$).\n    \n    Print the required $D$ or, if it is impossible to choose such value $D$, print -1.\n    \n    For example, for array $[2, 8]$ the value $D=3$ is minimum possible because you can obtain the array $[5, 5]$ if you will add $D$ to $2$ and subtract $D$ from $8$. And for array $[1, 4, 7, 7]$ the value $D=3$ is also minimum possible. You can add it to $1$ and subtract it from $7$ and obtain the array $[4, 4, 4, 4]$.\n    \"\"\"\n\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    d = 0\n    for i in range(n):\n        while arr[i] < 0:\n            d += 1\n            arr[i] += 1\n    print(d if d!= 0 else -1)\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(i) for i in stdin.readline().strip().split(' ')]\n    \n    # check for negative numbers\n    for ai in a:\n        if ai < 0:\n            return -1\n    \n    # create the dictionary\n    d = {a[0]: 1}\n    for i in range(1, n):\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n    \n    # iterate through dictionary and see if values are equal\n    min_d = -1\n    for k, v in d.items():\n        if v == n:\n            min_d = k\n            break\n    \n    return str(min_d)\n\n\nprint(solution(None))\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n\n    if n == 1:\n        return str(max(arr))\n\n    for i in range(1, n):\n        if arr[i] < 0:\n            continue\n        max_sum = max(arr[i], max(arr[:i]) + arr[i])\n        for j in range(i + 1, n):\n            if arr[j] < 0:\n                continue\n            max_sum = max(max_sum, max(arr[j], max_sum + arr[j]) - arr[j])\n\n        if max_sum < 0:\n            return str(-1)\n        arr[i] = max_sum\n\n    return str(max(arr))\n\nprint(solution(None))\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    res = 0\n    for x in arr:\n        if x < 0:\n            break\n        if x > res:\n            res = x\n    return res if res < 0 else -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    result = float('inf')\n    for d in range(1, len(a)):\n        count = 0\n        for i in range(d):\n            count += a[i]\n        for i in range(d, len(a)):\n            if a[i] < count:\n                count -= a[i]\n            else:\n                count = count - a[i]\n                if count < result:\n                    result = count\n    if result == float('inf'):\n        return -1\n    else:\n        return result"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    D = 1\n    A_plus = [x + D for x in A]\n    A_minus = [x - D for x in A]\n    while len(set(A_plus))!= 1 or len(set(A_minus))!= 1:\n        if len(set(A_plus))!= 1:\n            D += 1\n            A_plus = [x + D for x in A]\n        if len(set(A_minus))!= 1:\n            D -= 1\n            A_minus = [x - D for x in A]\n    if len(set(A)) == 1:\n        return D\n    return -1"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = [int(x) for x in stdin[1:]]\n    d = 1\n    while True:\n        flag = True\n        d += 1\n        for i in range(1, n):\n            if a[i]!= a[i-1] + d or a[i]!= a[i-1] - d:\n                flag = False\n                break\n        if flag:\n            break\n    return str(d) if d <= 100 else '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    max = max(arr)\n    min = min(arr)\n    if n == 0:\n        return \"0\"\n    elif max == 0 and min == 0:\n        return \"0\"\n    elif n == 1:\n        return \"0\"\n    elif min == 0:\n        return str(max)\n    elif max == 0:\n        return \"-1\"\n    for i in range(1, max + 1):\n        if i not in arr:\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # n = stdin.readline().strip()\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    if n < 3:\n        print(\"-1\")\n        return\n\n    # a = [2, 8]\n    # n = 2\n\n    # a = [1, 4, 7, 7]\n    # n = 4\n\n    a = [x for x in a if x > 0]\n    a.sort()\n    if len(a) < 3:\n        print(\"-1\")\n        return\n\n    l = len(a)\n    l_n = l - 3\n    l_m = l - 1\n    sum = a[0] + a[1]\n    for i in range(2, l_n):\n        sum += a[i]\n    for i in range(0, l_m):\n        if sum + a[i] == sum + a[i+1]:\n            print(a[i+1] - a[i])\n            return\n    print(\"-1\")\n    return\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nfrom sys import stdin,stdout\nnums = stdin.readline().strip().split(' ')\nx1, y1, x2, y2 = int(nums[0]), int(nums[1]), int(nums[2]), int(nums[3])\n\nnums = stdin.readline().strip().split(' ')\nx3, y3, x4, y4 = int(nums[0]), int(nums[1]), int(nums[2]), int(nums[3])\n\nnums = stdin.readline().strip().split(' ')\nx5, y5, x6, y6 = int(nums[0]), int(nums[1]), int(nums[2]), int(nums[3])"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nxs = []\nys = []\n\nfor line in sys.stdin.readlines():\n    x, y = map(int, line.split())\n    xs.append(x)\n    ys.append(y)\n\nxs.sort()\nys.sort()\n\nx1, y1 = xs[0], ys[0]\nx2, y2 = xs[1], ys[1]\nx3, y3 = xs[2], ys[2]\nx4, y4 = xs[3], ys[3]"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split(\" \")]\n    x3, y3, x4, y4 = [int(x) for x in stdin.split(\" \")]\n    x5, y5, x6, y6 = [int(x) for x in stdin.split(\" \")]\n    a = [x1, y1, x2, y2]\n    b = [x3, y3, x4, y4]\n    c = [x5, y5, x6, y6]\n    return \"YES\" if min(a[0], a[2]) <= max(b[0], b[2]) and min(b[0], b[2]) <= max(a[0], a[2]) and min(a[1], a[3]) <= max(b[1], b[3]) and min(b[1], b[3]) <= max(a[1], a[3]) else \"NO\"\n\nassert(solution(\"0 2 4 4\") == \"NO\")\nassert(solution(\"1 1 3 5\") == \"YES\")\nassert(solution(\"3 1 5 5\") == \"NO\")\nassert(solution(\"5 2 10 5\") == \"YES\")\nassert(solution(\"0 0 4 6\") == \"NO\")\nassert(solution(\"0 0 7 4\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 499999 1000000\") == \"YES\")\nassert(solution(\"500000 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") == \"YES\")\nassert(solution(\"0 0 1000000 1000000\") =="
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    return \"YES\" if x1 <= x3 and x2 >= x4 and y1 <= y3 and y2 >= y4 else \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.strip().split(\" \"))\n    x3, y3, x4, y4 = map(int, stdin.strip().split(\" \"))\n    x5, y5, x6, y6 = map(int, stdin.strip().split(\" \"))\n\n    white_sheet = ((x1, y1), (x2, y2), (x3, y3), (x4, y4))\n    black_sheet1 = ((x5, y5), (x6, y6))\n\n    if (x3, y3) in white_sheet and (x5, y5) in white_sheet and (x7, y7) in white_sheet:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nimport sys"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n\n    if not (y1 < y2 or y3 < y4 or y5 < y6):\n        return \"NO\"\n    elif not (y1 > y2 and y3 > y4 and y5 > y6):\n        return \"NO\"\n    elif not (x1 > x2 and x3 > x4 and x5 > x6):\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'\n\nimport sys\nfrom math import *\n\nstdin = open('../../stdin.txt')\n\n\nx1, y1, x2, y2 = map(int, stdin.readline().split())\nx3, y3, x4, y4 = map(int, stdin.readline().split())\nx5, y5, x6, y6 = map(int, stdin.readline().split())"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x_3, y_3, x_4, y_4 = [int(x) for x in stdin.split()]\n    x_5, y_5, x_6, y_6 = [int(x) for x in stdin.split()]\n\n    if x_1 > x_2:\n        x_1, x_2 = x_2, x_1\n\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n\n    if x_3 > x_4:\n        x_3, x_4 = x_4, x_3\n\n    if y_3 > y_4:\n        y_3, y_4 = y_4, y_3\n\n    if x_5 > x_6:\n        x_5, x_6 = x_6, x_5\n\n    if y_5 > y_6:\n        y_5, y_6 = y_6, y_5\n\n    if (x_5 - x_1) * (y_6 - y_1) == (x_6 - x_1) * (y_5 - y_1):\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return \"YES\" if the white sheet can be seen from the above after two black sheets are placed. Otherwise return \"NO\".\n\n    >>> solution('''2 2 4 4\n   ... 1 1 3 5\n   ... 3 1 5 5\n   ... ''')\n    'YES'\n    >>> solution('''5 2 10 5\n   ... 3 1 7 6\n   ... 8 1 11 7\n   ... ''')\n    'YES'\n    >>> solution('''0 0 1000000 1000000\n   ... 0 0 499999 1000000\n   ... 500000 0 1000000 1000000\n   ... ''')\n    'YES'\n    \"\"\"\n    white_sheet_bottom_left, white_sheet_top_right = [int(x) for x in stdin.split(' ')]\n    black_sheet_bottom_left, black_sheet_top_right = [int(x) for x in stdin.split(' ')]\n    return 'YES' if (white_sheet_bottom_left <= black_sheet_bottom_left <= white_sheet_top_right) or (white_sheet_bottom_left <= black_sheet_top_right <= white_sheet_top_right) else 'NO'\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    count = 0\n    for i in range(1, 1000000):\n        number = i\n        while number % 10 == 0:\n            number = number / 10\n        if number == 1:\n            count += 1\n    return count"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n   ...\n\n\n\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(10**i for i in range(1, 10) if n%10**i!= 0) + (n%10**9 > 0))\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    memo = {n: 0}\n    return rec(n, 0, memo)\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return len(set(str(i) for i in range(10 ** 9, n, 10)))\n\nassert(solution(input()) == 19)"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        # check if i is a power of 2\n        if n % i == 0:\n            # remove trailing 0\n            while n % i == 0:\n                n //= i\n            # print(f'i={i} n={n}')\n            count += 1\n    return str(count)\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    array = [n]\n    while n > 1:\n        n = n - 1 if n % 2 == 0 else n + 1\n        array.append(n)\n    return len(array)"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ones = '1'\n    while n > len(ones):\n        ones = ones + '0' + ones\n    return len(ones)\n    \n    \n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12,"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099]\n    count = 0\n    for i in range(len(nums)):\n        if i < len(nums) - 1:\n            if nums[i] + 1 == nums[i + 1]:\n                count += 1\n            else:\n                continue\n        else:\n            count += 1\n    return count\n\nassert solution('1098') == 20\nassert solution('10') == 19\nassert solution('10099') == 1010\nassert solution('100') == 101\nassert solution('9') == 8\nassert solution('8') == 7\nassert solution('7') == 6\nassert solution('6') == 5\nassert solution('5') == 4\nassert solution('4') == 3\nassert solution('3') == 2\nassert solution('2') == 1\nassert solution('1') == 0\nassert solution('0') == 0\nassert solution('-1') == 0\nassert solution('-2') == 0\nassert solution('-3') == 0\nassert solution('-4') == 0\nassert solution('-5') == 0\nassert solution('-6') == 0\nassert solution('-7') == 0\nassert solution('-8') == 0\nassert solution('-9') == 0\nassert solution('-10') == 0\nassert solution('-100') == 0\nassert solution('-1000') == 0\nassert solution('-10000') == 0\nassert solution('-100000') == 0\nassert solution('-1000000') == 0\nassert solution('-10000000') == 0\nassert solution('-100000000') == 0\nassert solution('-1000000000') == 0\nassert solution('-10000000000') == 0\nassert solution('-100000000000') == 0\nassert solution('-1000000000000') == 0\nassert solution('-10000000000000') == 0\nassert solution('-10000000000000000') == 0\nassert solution('-1000000000000000000') == 0\nassert solution('-10000000000000000000') == 0\nassert solution('-100000000000000000000') == 0\nassert solution('-1000000000000000000000') == 0\nassert solution('-10000000000000000000000') == 0\nassert solution('-100000000000000000000000') == 0\nassert solution('-1000000000000000000000000') == 0\nassert solution('-10000000000000000000000000') == 0\nassert solution('-100000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000') == 0\nassert solution('-"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = list(map(int, stdin.readline().split()))\n    non_friends = set(range(n)) - set(friends)\n\n    # To increase the efficiency we could look for each friend's friend\n    # (if it's known) and mark all those friends as non_friends\n    # (if it's not known)\n    # But this solution is still linear, so let's not waste time\n    for friend in friends:\n        non_friends.discard(friend)\n\n    # Now I can iterate over the non_friends set and select one\n    # element at a time from friends to see if it's compatible\n    for friend in non_friends:\n        # Assume that the \"friend\" knows the value\n        value = 1\n\n        # If it's not known, let's go through all the friends of the\n        # friend and check if the value matches\n        for friend_of_friend in friends:\n            if friend_of_friend!= friend:\n                # If it doesn't match, we know that the friend doesn't know\n                # the value, so we can use the value for the friend and break\n                if friend_of_friend == value:\n                    break\n                # If it does match, then the friend wants to give the value\n                # to the friend, so we know that the value is not compatible\n                # with the value of the friend, so we can break\n                else:\n                    break\n\n        # If all the friends of the friend know the value, we can assign\n        # the value to the friend and break\n        else:\n            friends[friend] = value\n            break\n\n    # Sort the result and print it\n    return''.join(map(str, sorted(friends)))"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = [int(x) for x in stdin.split()]\n\n    result = [0] * n\n    for i in range(n):\n        if friends[i]!= i:\n            result[i] = friends[i]\n    return \" \".join(str(x) for x in result)\n\nassert(solution('''5''') == '5')\nassert(solution('''7''') == '7')\nassert(solution('''7''') == '7')\nassert(solution('''5''') == '5')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    friends = stdin.split(\"\\n\")[0].split(\" \")\n    friends = [int(x) for x in friends if x!= \"\"]\n    friends = sorted(friends)\n    gifts = [0] * len(friends)\n    for i in range(len(friends) - 1):\n        gifts[friends[i]] = friends[i + 1]\n    for i in range(len(friends)):\n        if gifts[i] == i:\n            gifts[i] = 0\n    return \" \".join([str(x) for x in gifts])\n\nassert(solution(\"7 0 0 0 1 4 0 6\") == \"7 3 1 2 4 5 6\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"5\") == \"5 3 1 2 4\")\nassert(solution(\"7\") == \"7 3 2 1 4\")\nassert(solution(\"5\") == \"5 3 1 2 4\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"3 1 0 0 0\") == \"3 1 4 2 5\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7 4 0 3 0 5 1\") == \"7 4 2 3 6 5"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    gifts = [int(x) for x in stdin.readline().strip().split()]\n    print(' '.join(str(gifts[i]) if gifts[i]!= 0 else str(i + 1) for i in range(n)))\n    return \"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    friends = list(map(int, stdin[1].split()))\n    initial = 0\n    if friends[0] == 0:\n        initial = friends.pop(0)\n    gift_list = []\n    gift_list.append(initial)\n    for i in range(len(friends)):\n        if friends[i] == 0:\n            pass\n        else:\n            gift_list.append(friends[i])\n    return''.join(str(gift) for gift in gift_list)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f = list(map(int, stdin.readline().split()))\n    b = []\n    for i in range(n):\n        if f[i]!= 0:\n            b.append(f[i])\n    b.sort()\n    r = []\n    for i in range(n):\n        if f[i]!= 0:\n            r.append(b.index(f[i]))\n    return''.join(map(str, r))\n\nassert(solution('''5''') == '5')\nassert(solution('''7''') == '7')\nassert(solution('''7 0 0 1 4 0 6''') == '7 3 1 2 4 5 6')\nassert(solution('''7 0 0 1 4 0 6''') == '7 3 2 1 4 5 6')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1')\nprint(solution('''7 4 0 3 0 5 1'''))\nassert(solution('''7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1')\nassert(solution('''5''') == '5')\nassert(solution('''7''') == '7')\nassert(solution('''7 0 0 1 4 0 6''') == '7 3 1 2 4 5 6')\nassert(solution('''7 0 0 1 4 0 6''') == '7 3 1 2 4 5 6')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1')\nprint(solution('''7 4 0 3 0 5 1'''))\nassert(solution('''7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1')\nassert(solution('''5''') == '5')\nassert(solution('''7''') == '7')\nassert(solution('''7 0 0 1 4 0 6''') == '7 3 1 2 4 5 6')\nassert(solution('''7 0 0 1 4 0 6''') == '7 3 1 2 4 5 6')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1')\nprint(solution('''7 4 0 3 0 5 1'''))\nassert(solution('''7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1')\nassert(solution('''5''') == '5')\nassert(solution('''7''') == '7')\nassert(solution('''7 0 0 1 4 0 6''') == '7 3 1 2 4 5 6')\nassert(solution('''7 0 0 1 4 0 6''') == '7 3 1 2 4 5 6')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1')\nprint(solution('''7 4 0 3 0 5 1'''))\nassert(solution('''7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1')\nassert(solution('''5''') == '5')\nassert(solution('''7''') == '7')\nassert(solution('''7 0 0 1 4 0 6''') == '7 3 1 2 4 5 6')\nassert(solution('''7 0 0 1 4 0 6''') == '7 3 1 2 4 5 6')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1')\nprint(solution('''7 4 0 3 0 5 1'''))\nassert(solution('''7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1')\nassert(solution('''6''') == '6')\nassert(solution('''7''') == '7')\nassert(solution('''7 0 0 1 4 0 6''') == '7 3 1 2 4 5 6')\nassert(solution('''7 0 0 1 4 0 6''') == '7 3 1 2 4 5 6')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''2 1 0 0 0''') == '2 1 4 5 3')\nassert(solution('''7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1')\nprint(solution('''7 4 0 3 0 5 1'''))\nassert(solution('''7 4 0 3 0 5 1''') == '7 4 2 3 6 5 1')\nassert(solution('''6''') == '6')\nassert(solution('''7''') == '7')\nassert(solution('''7 0 0 1 4 0 6''') == '7 3 1 2 4 5 6')\nassert(solution('''7 0 0 1 4 0 6''') == '7 3 1 2 4 5 6')\nassert(solution(''"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    friends = [int(x) for x in stdin.readline().strip().split()]\n    answers = [0] * n\n    for i in range(n):\n        if friends[i]!= 0:\n            answers[friends[i]-1] += 1\n    for i in range(n):\n        if answers[i] == 0:\n            answers[i] = i + 1\n    return \" \".join(map(str, answers))\n\nimport sys\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    n = int(stdin.readline())\n    friends = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    ans = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if friends[i][j] == 0:\n                continue\n            if i == j or friends[j][i] == 0:\n                continue\n            g = gcd(friends[i][j], friends[j][i])\n            ans[j] += g\n            ans[i] += g\n    ans.sort()\n    return''.join(map(str, ans))\n\nassert(solution('''5\n5 0 0 2 4\n''') == '5 3 1 2 4')\nassert(solution('''7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6')\nassert(solution('''5\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''1\n2\n2\n2\n1\n0\n''') == '2 1 4 5 3')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''2\n2\n2\n2\n1\n1\n''') == '2 1 4 5 3')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''7\n2 1 0 0 0\n''') == '2 1 4 5 3')\nassert"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    if k > n:\n        return \"NO\"\n    return \"YES\" if is_colorable(n, k, stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n == 1:\n        return \"NO\"\n    if k == 1:\n        return \"NO\"\n    if k == n:\n        return \"YES\"\n    a = [int(x) for x in stdin.split()]\n    table = [0] * k\n    for x in a:\n        if table[x - 1]!= 0:\n            return \"NO\"\n        else:\n            table[x - 1] += 1\n    return \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    array = [int(x) for x in stdin.split()]\n    colors = list(range(1, k + 1))\n    for i in range(n):\n        if array[i] in colors:\n            colors.remove(array[i])\n        else:\n            if len(colors) == 0:\n                return \"NO\"\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\n1 2 2 3\")\n    'YES\\n1 1 2 2'\n    >>> solution(\"5 2\\n3 2 1 2 3\")\n    'YES\\n2 1 1 2 1'\n    >>> solution(\"5 2\\n2 1 1 2 1\")\n    'NO'\n    >>> solution(\"5 2\\n2 1 1 2 1\")\n    'YES\\n2 1 1 2 1'\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    n1 = len(set(arr))\n    n2 = len(arr) // n\n    if n1 <= k and n2 * k == n:\n        return \"YES\\n\" +''.join(str(i) for i in range(1, k + 1))\n    return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split(' ')]\n\n    array = [int(n) for n in stdin.split(' ')]\n\n    array.sort()\n    color = 1\n    for i in range(len(array) - 1):\n        if array[i] == array[i + 1]:\n            color += 1\n        else:\n            color = 1\n\n    if color > k:\n        return 'NO'\n    else:\n        return 'YES'\n\n\nprint(solution('4 2'))\nprint(solution('5 2'))\nprint(solution('1 2 2 3'))\nprint(solution('2 1 1 2 1'))\nprint(solution('5 2'))\nprint(solution('3 2 1 2 3'))\nprint(solution('2 1 1 2 1'))\nprint(solution('1 1 1 1 1'))\nprint(solution('5 2'))\nprint(solution('3 2 1 2 3'))\nprint(solution('2 1 1 2 1'))\nprint(solution('1 1 1 1 1'))\n"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    from collections import Counter\n    c = Counter(a)\n    for ci in range(1,k+1):\n        for kc in c:\n            if c[kc] < ci:\n                break\n        else:\n            return \"YES\"\n    else:\n        return \"NO\"\n\nassert(solution('''4 2''') == \"NO\")\nassert(solution('''5 2''') == \"YES\")\nassert(solution('''5 2''') == \"YES\")\nassert(solution('''5 2''') == \"YES\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\nassert(solution('''5 2''') == \"NO\")\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, x, y = [int(x) for x in stdin[0].split()]\n    n = int(stdin[1])\n    d = []\n    for i in range(n):\n        d.append(int(stdin[2 + i]))\n    count = 0\n    while True:\n        d, count = adder(d, x, y)\n        if d[x] == 0:\n            break\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.strip().split(' ')]\n    if n == 1: return 0\n\n    arr = [int(x) for x in stdin.strip()]\n    numbers = [1] * n\n    for i in range(n):\n        numbers[i] = int(str(arr[i]) + str(numbers[i - x]) + str(numbers[i - y]) + str(numbers[i - n])[1:], 2)\n        while len(str(numbers[i])) > 1:\n            numbers[i] = int(str(numbers[i])[1:] + str(numbers[i])[:1])\n    return len(str(numbers[-1])) - 1\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split(\" \")]\n    s = stdin\n    i = 0\n    while True:\n        if s[i] == \"0\":\n            s = s[:i] + \"1\" + s[i + 1:]\n            i += 1\n        else:\n            s = s[:i] + \"0\" + s[i + 1:]\n            i += 1\n        if len(s) == n:\n            return s\n        if s[i] == \"0\":\n            i += 1\n        if s[i] == \"1\":\n            i += 1\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.strip().split()]\n    number = stdin.strip()\n    result = 0\n    while number[-1] == '1':\n        if result > x:\n            return str(result - x)\n        number = number[:-1]\n        result += 1\n    return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the minimum number of operations to obtain the number with remainder 10^y modulo 10^x.\n    \"\"\"\n    n, x, y = (int(x) for x in stdin.split())\n\n    curr_num = n - (n // 10 ** y) * 10 ** y\n    ops = 1\n    while curr_num % 10 ** x!= 10 ** y:\n        curr_num = curr_num // 10\n        ops += 1\n\n    return ops"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    digits = list(map(int, stdin.split()))\n    remainder = 10 ** y\n    ones = 0\n    zeros = 0\n    for digit in digits:\n        if digit == 0:\n            zeros += 1\n        else:\n            ones += 1\n    if ones < remainder / 10:\n        return zeros\n    elif ones == remainder / 10:\n        return zeros + 1\n    else:\n        return zeros + 2"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    nums = list(map(int, stdin.split()[1]))\n    print(f'n: {n}')\n    print(f'nums: {nums}')\n    print(f'x: {x}')\n    print(f'y: {y}')\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    s = stdin[0]\n    remainder = int(s, 2) % (10 ** x)\n    ans = 0\n    if remainder == 0:\n        return ans\n    while remainder >= (10 ** y):\n        ans += 1\n        remainder = int(s, 2) % (10 ** x)\n    return ans"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin]\n    c = 1\n    while a[0]!= 1:\n        a = a[1:]\n        c += 1\n    while y > 0:\n        a = a[1:]\n        y -= 1\n    a = a[::-1]\n    c += y\n    return str(c)\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().strip().split()))\n    if n < 3:\n        return 'NO'\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            if numbers[i] == numbers[j] and numbers[j + 1] == numbers[i + 1]:\n                return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print('NO' if stdin.strip() == '' else 'YES')"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline())\n    for _ in range(count):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        subsequences = set()\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                subsequences.add(tuple(a[i:j]))\n        if len(subsequences) > 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split()]\n        a_3 = a[:]\n        a_3.sort()\n        a_3.reverse()\n        a.sort()\n        a.reverse()\n        if a_3 == a or a_3[1:-1] == a:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(stdin.readline().strip()) for _ in range(n)]\n        if is_palindrome_3(a):\n            print('YES')\n        else:\n            print('NO')\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        arr = list(map(int, stdin.readline().strip().split(' ')))\n\n        if has_palindrome(arr, n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        l = list(map(int, stdin.readline().strip().split(' ')))\n        l.reverse()\n        if l[0] == l[-1] and l[1] == l[-2]:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin[:n]\n    f = [int(x) for x in stdin[n + 1: n + 1 + 9]]\n    c = a\n    for i in range(9):\n        c = c.replace(str(i + 1), str(f[i]))\n    return c\n\nassert(solution(input()) == \"3523456781\")\nassert(solution(input()) == \"78965321\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"99999999\")\nassert(solution(input()) == \"99999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"99999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"99999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999\")\nassert(solution(input()) == \"999999999"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"4\n   ... 1337\n   ... 1 2 5 4 6 6 3 1 9\n   ... 1 2 5 4 6 6 3 1 9\n   ... \"\"\")\n    '1557'\n    >>> solution(\"\"\"5\n   ... 11111\n   ... 9 8 7 6 5 4 3 2 1\n   ... 1 2 5 4 6 6 3 1 9\n   ... 1 2 5 4 6 6 3 1 9\n   ... \"\"\")\n    '99999'\n    \"\"\"\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = [int(s) for s in stdin.readline().strip().split()]\n\n    if n == 1:\n        return str(f[0])\n\n    nums = set([int(s) for s in a])\n    max_num = 0\n    for i in range(1, 10):\n        if i in nums:\n            continue\n        for j in range(n):\n            idx = j + 1\n            while idx < n and a[j] == a[idx]:\n                idx += 1\n            if idx - j > max_num:\n                max_num = idx - j\n\n    for i in range(len(a)):\n        idx = i + 1\n        while idx < len(a) and a[i] == a[idx]:\n            idx += 1\n        if idx - i > max_num:\n            max_num = idx - i\n\n    for i in range(1, 10):\n        if i in nums:\n            continue\n        for j in range(n):\n            idx = j + 1\n            while idx < n and f[i - 1] == f[idx]:\n                idx += 1\n            if idx - j > max_num:\n                max_num = idx - j\n\n    for i in range(len(a)):\n        idx = i + 1\n        while idx < len(a) and f[i - 1] == f[idx]:\n            idx += 1\n        if idx - i > max_num:\n            max_num = idx - i\n\n    return str(max_num)\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_digits = stdin.readline().strip()\n    digits = stdin.readline().strip()\n    frequencies = stdin.readline().strip()\n    frequencies = [int(i) for i in frequencies.split()]\n    max_num = 0\n    for i in range(1, 10):\n        num_valid = 0\n        for j in range(len(digits)):\n            if digits[j] == str(i):\n                num_valid += frequencies[j]\n                if num_valid > max_num:\n                    max_num = num_valid\n    return str(max_num)"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_int(stdin: str) -> int:\n        return int(stdin.strip())\n\n    def get_input(n: int) -> str:\n        return stdin.strip()[:n]\n\n    def get_list(stdin: str) -> list:\n        return [int(d) for d in stdin.strip()[:n]]\n\n    def get_f(stdin: str) -> int:\n        return int(stdin.strip()[n])\n\n    n = get_int(get_input(1))\n    a = get_list(get_input(n))\n    f = get_list(get_input(9))\n    result = 0\n\n    for i in range(0, len(a)):\n        result += f[a[i]-1] * 10**(len(a)-i-1)\n\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # the maximum number is 9 * n in base 10,\n    # so we have to divide it by 9,\n    # and use the remainder as the maximum number\n    max_value = sum(int(stdin[i]) * 9 ** i for i in range(len(stdin) - 1, -1, -1)) // 9\n    return str(max_value)\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip()]\n    f = [int(x) for x in stdin.readline().strip().split()]\n\n    current_max = 0\n\n    for i in range(0, n):\n        # get the value for replacement\n        x = a[i]\n        # if replacement is valid, replace with f\n        if f[x - 1] > 0:\n            f[x - 1] -= 1\n            current_max = current_max * 10 + x\n        # if not valid, get value of next digit\n        else:\n            current_max = current_max * 10 + f[x - 1]\n\n    return str(current_max)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = [int(stdin.readline()) for _ in range(9)]\n    maximum = 0\n    for i in range(1, n):\n        b = a[:i] + str((f[int(a[i]) - 1])) + a[i + 1:]\n        maximum = max(maximum, int(b))\n    return str(maximum)"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(s) for s in stdin.readline().strip()]\n\n    f = [int(s) for s in stdin.readline().strip()]\n    assert len(f) == 9\n\n    def map_digit(digit: int) -> int:\n        return f[digit - 1]\n\n    result = 0\n    for i in range(1, n + 1):\n        mask = (1 << (n - i)) - 1\n        next_num = 0\n        for j in range(i, n + 1):\n            next_num = (next_num << 8) + a[j - 1]\n            next_num &= mask\n\n        next_num = [map_digit(d) for d in (next_num >> i, next_num & ((1 << i) - 1))]\n        result = max(result, int(''.join(next_num)))\n\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    f = [int(stdin.readline()) for _ in range(10)]\n    s = list(str(a))\n    l = len(s)\n    for i in range(1, l):\n        for j in range(i, l):\n            r = s[:i] + [f[int(s[i - 1])]] + s[i:]\n            if int(''.join(r[j:j + i])) > a:\n                print(''.join(r[j:j + i]))\n                return\nsolution(stdin)\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b, c = [int(stdin.readline().split()[0]) for _ in range(3)]\n        x = min(b, c)\n        if b % a == 0 and c % b == 0:\n            print(0)\n        else:\n            if b % a == 0:\n                print(x)\n            else:\n                print(x + c // b - b // a)"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b, c = map(int, stdin.split())\n        a, b, c = sorted([a, b, c])\n        res = 0\n        while b % a!= 0:\n            b += 1\n            res += 1\n        while c % b!= 0:\n            c += 1\n            res += 1\n        print(res)\n    return ''"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        a, b, c = list(map(int, stdin.readline().split()))\n        r = int(b % a)\n        r = int(c % r)\n        print(r)\n        "
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        a,b,c = [int(i) for i in stdin.readline().strip().split(\" \")]\n        res = min(a+b,a+c,b+c)\n        if res == a+b:\n            res = max(a,b)\n        elif res == a+c:\n            res = max(a,c)\n        elif res == b+c:\n            res = max(b,c)\n        print(res)\n    return \"\""
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100:\n        return \"Enter a valid integer\"\n    else:\n        res = 0\n        for _ in range(n):\n            x, y, z = list(map(int, stdin.split()))\n            if y % x == 0 and z % y == 0:\n                res += 1\n                print(\"1 1 3\")\n                print(res)\n                print(x, y, z)\n            elif x % z == 0 and z % y == 0:\n                res += 1\n                print(\"102\")\n                print(res)\n                print(x, y, z)\n            elif y % x == 0 and x % z == 0:\n                res += 1\n                print(\"114 228 456\")\n                print(res)\n                print(x, y, z)\n            elif x % y == 0 and y % z == 0:\n                res += 1\n                print(\"4\")\n                print(res)\n                print(x, y, z)\n            elif x % z == 0 and z % y == 0:\n                res += 1\n                print(\"4 8 16\")\n                print(res)\n                print(x, y, z)\n            elif y % x == 0 and z % x == 0:\n                res += 1\n                print(\"6\")\n                print(res)\n                print(x, y, z)\n            elif x % y == 0 and x % z == 0:\n                res += 1\n                print(\"18 18 18\")\n                print(res)\n                print(x, y, z)\n            elif x % z == 0 and y % z == 0:\n                res += 1\n                print(\"1\")\n                print(res)\n                print(x, y, z)\n            elif y % x == 0 and y % z == 0:\n                res += 1\n                print(\"1 22 22\")\n                print(res)\n                print(x, y, z)\n            elif x % y == 0 and x % z == 0:\n                res += 1\n                print(\"2\")\n                print(res)\n                print(x, y, z)\n            elif y % x == 0 and z % x == 0:\n                res += 1\n                print(\"1 19 38\")\n                print(res)\n                print(x, y, z)\n            elif x % y == 0 and x % z == 0:\n                res += 1\n                print(\"8\")\n                print(res)\n                print(x, y, z)\n            elif y % x == 0 and z % y == 0:\n                res += 1\n                print(\"6 24 48\")\n                print(res)\n                print(x, y, z)\n            else:\n                pass"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for _ in range(int(stdin.readline())):\n        a, b, c = map(int, stdin.readline().split())\n        if b % a == 0 and c % b == 0:\n            res += b * c * 2 - (b + c)\n    return str(res)\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c = [int(stdin.readline().strip()) for _ in range(3)]\n        k = (b // a) * (c // b)\n        if (b % a == 0) and (c % b == 0):\n            print(k)\n        else:\n            print(-1)\n    return \"\""
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    a.sort()\n    b = max(a) - min(a)\n    return str(b)\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(num) for num in stdin.readline().split()]\n    return str(min(a))\n\nassert(solution('''\n3\n1 3 3\n''') == '2')\nassert(solution('''\n2\n1 100000\n''') == '0')\nassert(solution('''\n5\n4 9 2 9 5\n''') == '0')\nassert(solution('''\n2\n1 3\n''') == '2')\nassert(solution('''\n3\n1 1 2\n''') == '0')\nassert(solution('''\n2\n1 100000\n''') == '0')\nassert(solution('''\n3\n1 3 3\n''') == '2')\nassert(solution('''\n4\n1 3 3 7\n''') == '2')\nassert(solution('''\n5\n1 100000\n''') == '0')\nassert(solution('''\n6\n1 100000 1 5 1 100000\n''') == '0')\nassert(solution('''\n7\n1 100000 1 5 1 100000 1 100000\n''') == '0')\nassert(solution('''\n8\n1 100000 1 5 1 100000 1 100000 1 100000\n''') == '0')\nassert(solution('''\n9\n1 100000 1 5 1 100000 1 100000 1 100000 1 100000\n''') == '0')\nassert(solution('''\n10\n1 100000 1 5 1 100000 1 100000 1 100000 1 100000 1 100000\n''') == '0')\nassert(solution('''\n11\n1 100000 1 5 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000\n''') == '0')\nassert(solution('''\n12\n1 100000 1 5 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000\n''') == '0')\nassert(solution('''\n13\n1 100000 1 5 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000\n''') == '0')\nassert(solution('''\n14\n1 100000 1 5 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000\n''') == '0')\nassert(solution('''\n15\n1 100000 1 5 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000\n''') == '0')\nassert(solution('''\n16\n1 100000 1 5 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000\n''') == '0')\nassert(solution('''\n17\n1 100000 1 5 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000\n''') == '0')\nassert(solution('''\n18\n1 100000 1 5 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000\n''') == '0')\nassert(solution('''\n19\n1 100000 1 5 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000 1 100000\n''') == '0')\nassert(solution('''\n20\n
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    result = 0\n\n    for i in range(1, n):\n        result += a[i] - a[i-1]\n\n    return str(result)"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    return str(min([max(a) - min(a), max(a) - max(a)]))\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    a = stdin.readline()\n    a = list(map(int, a.split()))\n    max_val = max(a)\n    min_val = min(a)\n    return str(max_val - min_val)\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    return str(min(a))\n\nprint(solution('input.txt'))\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nimport sys\nimport os"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(x) - int(y) for x, y in (stdin.split(' ') for _ in range(int(stdin.split()[0]))))\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\nfrom itertools import accumulate\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    nums = []\n    for _ in range(m):\n        s, d, c = [int(x) for x in stdin.split()]\n        nums.append([s, d, c])\n    ans = n * [0]\n    num = 1\n    for s, d, c in sorted(nums):\n        while num <= s:\n            ans[num] = num\n            num += 1\n        if num > d:\n            ans[num] = 0\n        else:\n            ans[num] = num - s\n        num += c\n    return''.join(map(str, ans))\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s, d, c = [], [], []\n    for i in range(m):\n        s.append(int(stdin.split()[i]))\n        d.append(int(stdin.split()[i+m]))\n        c.append(int(stdin.split()[i+2*m]))\n    \n    result = [-1]\n    \n    for i in range(n):\n        ready = 0\n        for j in range(m):\n            if i >= s[j] and i <= d[j]:\n                ready += c[j]\n                \n        if ready == m:\n            result.append(0)\n        else:\n            result.append(ready)\n            \n    return''.join(map(str, result))\n\nassert(solution('1 2 1') == '1 2 1 0 1')\nassert(solution('1 3 1') == '1 2 1 0 3')\nassert(solution('1 5 1') == '1 2 1 0 3')\nassert(solution('1 4 2') == '1 2 1 0 2')\nassert(solution('2 3 1') == '2 0 2 1 0')\nassert(solution('3 2 1') == '2 2 2 1 0')\nassert(solution('3 2 1') == '2 2 2 1 0')\nassert(solution('3 2 1') == '2 2 2 1 0')\nassert(solution('3 2 1') == '2 2 2 1 0')\nassert(solution('5 2') == '2 2 2 1 0 3')\nassert(solution('5 2') == '2 2 2 1 0 3')\nassert(solution('5 2') == '2 2 2 1 0 3')\nassert(solution('5 2') == '2 2 2 1 0 3')\nassert(solution('5 2') == '2 2 2 1 0 3')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4 0 4 4 4 4')\nassert(solution('10 3') == '2 2 2 1 0 3 4 4 4 0 4 4 4 4"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    special_days = [0] * n\n    exams = []\n    for i in range(m):\n        s, d, c = map(int, stdin.split())\n        exams.append((s, d, c))\n        special_days[d - 1] += c\n    \n    for e in sorted(exams, key = lambda e: e[1]):\n        s, d, c = e\n        if special_days[d - 1] < c:\n            continue\n        if s > 0 and s > d - 1:\n            continue\n        else:\n            break\n    else:\n        return '-1'\n    \n    result = [0] * (m + 1)\n    result[m] = 1\n    for i in range(m - 1, -1, -1):\n        for j in range(i, m):\n            s, d, c = exams[j]\n            if d > 0:\n                for k in range(d):\n                    if s > 0 and s > k + 1:\n                        continue\n                    else:\n                        break\n                else:\n                    result[i] += 1\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return...\n...\n\n\"\"\"\nfrom typing import List\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nIn this problem Petya studies at university. The current academic year finishes with $n$ special days. Petya needs to pass $m$ exams in those special days. The special days in this problem are numbered from $1$ to $n$.\n\nThere are three values about each exam:  $s_i$ \u2014 the day, when questions for the $i$-th exam will be published,  $d_i$ \u2014 the day of the $i$-th exam ($s_i < d_i$),  $c_i$ \u2014 number of days Petya needs to prepare for the $i$-th exam. For the $i$-th exam Petya should prepare in days between $s_i$ and $d_i-1$, inclusive. \n\nThere are three types of activities for Petya in each day: to spend a day doing nothing (taking a rest), to spend a day passing exactly one exam or to spend a day preparing for exactly one exam. So he can't pass/prepare for multiple exams in a day. He can't mix his activities in a day. If he is preparing for the $i$-th exam in day $j$, then $s_i \\le j < d_i$.\n\nIt is allowed to have breaks in a preparation to an exam and to alternate preparations for different exams in consecutive days. So preparation for an exam is not required to be done in consecutive days.\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ $(2 \\le n \\le 100, 1 \\le m \\le n)$ \u2014 the number of days and the number of exams.\n\nEach of the following $m$ lines contains three integers $s_i$, $d_i$, $c_i$ $(1 \\le s_i < d_i \\le n, 1 \\le c_i \\le n)$ \u2014 the day, when questions for the $i$-th exam will be given, the day of the $i$-th exam, number of days Petya needs to prepare for the $i$-th exam. \n\nGuaranteed, that all the exams will be in different days. Questions for different exams can be given in the same day. It is possible that, in the day of some exam, the questions for other exams are given.\n\n\n-----Output-----\n\nIf Petya can not prepare and pass all the exams, print -1. In case of positive answer, print $n$ integers, where the $j$-th number is:  $(m + 1)$, if the $j$-th day is a day of some exam (recall that in each day no more than one exam is conducted),  zero, if in the $j$-th day Petya will have a rest,  $i$ ($1 \\le i \\le m$), if Petya will prepare for the $i$-th exam in the day $j$ (the total number of days Petya prepares for each exam should be strictly equal to the number of days needed to prepare for it).\n\nAssume that the exams are numbered in order of appearing in the input, starting from $1$.\n\nIf there are multiple schedules, print any of them.\n\n\n-----Examples-----\nInput\n5 2\n1 3 1\n1 5 1\n\nOutput\n1 2 3 0 3 \n\nInput\n10 3\n4 7 2\n1 10 3\n8 9 1\n\nOutput\n2 2 2 1 1 0 4 3 4 4 \n\n\n\n-----Note-----\n\nIn the first example Petya can, for example, prepare for exam $1$ in the first day, prepare for exam $2$ in the second day, pass exam $1$ in the third day, relax in the fourth day, and pass exam $2$ in the fifth day. So, he can prepare and pass all exams.\n\nIn the second example, there are three days and two exams. So, Petya can prepare in only one day (because in two other days he should pass exams). Then Petya can not prepare and pass all exams.\n\nIn the third example, there are three days and two exams. So, Petya can prepare in only one day (because in two other days he should pass exams). Then Petya can not prepare and pass all exams.\n\nIn the fourth example, there are three days and two exams. So, Petya can prepare in only one day (because in two other days he should pass exams). Then Petya can not prepare and pass all exams.\n\nIn the fifth example, there are three days and two exams. So, Petya can prepare in only one day (because in two other days he should pass exams). Then Petya can not prepare and pass all exams.\n\nIn the sixth example, there are three days and two exams. So, Petya can prepare in only one day (because in two other days he should pass exams). Then Petya can"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    exams = []\n    for _ in range(m):\n        s, d, c = map(int, stdin.split())\n        exams.append((s, d, c))\n\n    print(simulation(n, m, exams))\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    return str(result)"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n'''\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return str(n) + \" \" + str(m)"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\nIn the third example, there are three days and two exams. Petya can prepare in two days (because he is prepared in the first day and he needs to pass exam) and cannot pass exams.\n\n\"\"\"\n\nn, m = list(map(int, input().split()))\nl = []\nfor _ in range(m):\n    l.append(list(map(int, input().split())))\n\nl.sort(key=lambda x: x[0])\n\nans = [0] * (n + 1)\nans[0] = 1\nfor s, d, c in l:\n    for i in range(s, d):\n        ans[i] += c\n    if ans[i] > n:\n        break\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    ans = 0\n    while a!= b:\n        ans += 1\n        if a % 2 == 0: a //= 2\n        if a % 3 == 0: a //= 3\n        if a % 5 == 0: a //= 5\n    return ans if a == b else -1"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(abs(m - n) - 1) if m > n else '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    if n == m: return str(0)\n    if n < m:\n        return str(-1)\n    \n    min_value = int(str(n) * 2)\n    diff = m - min_value\n    \n    if diff % 3 == 0:\n        return str(min_value + diff // 3)\n    elif diff % 3 == 1:\n        return str(-1)\n    else:\n        return str(m - min_value)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == m:\n        print(\"0\")\n        return\n    if n % 3 == 0 or m % 3 == 0:\n        print(-1)\n        return\n    if n < m:\n        n, m = m, n\n    if m == 1:\n        print(0)\n        return\n    while m % 3 == 0:\n        m //= 3\n    if m % 5 == 0:\n        print(m // 5 - (n // 3) + 1)\n        return\n    if m % 5 == 1:\n        print(m // 5 + (n // 3) - 1)\n        return\n    if m % 5 == 2:\n        print(m // 5 + (n // 3) + 1)\n        return\n    if m % 5 == 3:\n        print(m // 5 + (n // 3) - 1)\n        return\n    print(-1)\n    return\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return str(-1)\n    return str(min(n, m) - n + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    n = n % 50\n    if m == 0:\n        return 0\n    if m > n:\n        return -1\n    if m % n == 0:\n        return int((m / n) - 1)\n    if m % n > n / 2:\n        return int((m / n) - 1)\n    return int((m / n) - 1) + 1\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        n, m = m, n\n    if m == n * 2 or m == n * 3:\n        return str(0)\n    if m == 1:\n        return str(-1)\n    result = 0\n    while n!= m:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3 * n + 1\n        result += 1\n    return str(result)"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m % n == 0:\n        return str(-1)\n    elif n > m:\n        return str(n // m - 1)\n    else:\n        return str(n // m)\n\nimport sys"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num, goal = [int(x) for x in stdin.split()]\n    moves = 0\n    while num!= goal:\n        if num % 2 == 0:\n            num //= 2\n            moves += 1\n        elif num % 3 == 0:\n            num //= 3\n            moves += 1\n        else:\n            return -1\n    return moves\n\nprint(solution(input()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_alternative(int(stdin.split()[0]), int(stdin.split()[1])))\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    t = stdin.readline().strip()\n    res = [t[i:i+n] for i in range(len(t) - n + 1)]\n    return min(res, key=len)"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n    candidates = [str(i) for i in range(1, n + 1)]\n    for _ in range(k - 1):\n        curr = ''\n        for _ in range(n):\n            curr += candidates.pop(0)\n        candidates.append(curr)\n    return candidates[0]"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, k = [int(x) for x in stdin.split(\" \")]\n    s = stdin.replace(\"\\n\", \"\")\n    return \"\".join([\"\".join(s[i:i+n]) for i in range(len(s) - n + 1)])"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_substring(t):\n        memo = dict()\n        start = 0\n        while start < len(t):\n            for i in range(start, len(t)):\n                s = t[start:i+1]\n                if s in memo:\n                    memo[s] += 1\n                else:\n                    memo[s] = 1\n            start += 1\n        return len(memo)\n    return find_substring(stdin)\n    \nassert solution(stdin) == stdin\nassert solution(\"ab\") == \"ab\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"aba\") == \"ababababa\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"aba\") == \"ababababa\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"abc\") == \"ac\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"ac\") == \"ac\"\nassert solution(\"abc\") == \"ac\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abca\") == \"abca\"\nassert solution(\"abab\") == \"abab\"\nassert solution(\"ababab\") == \"ababab\"\nassert solution(\"abcab\") == \"abca\"\nassert solution(\"abababc\") == \"abababab\"\nassert solution(\"abcababab\") == \"abababab\"\nassert solution(\"aabbccddeeffgghhhiijj\") == \"fghhhiijj\"\nassert solution(\"abbbccddeeffgghhhiijj\") == \"fghhhiijj\"\nassert solution(\"abcdefg\") == \"abcdefg\"\nassert solution(\"abcdefgh\") == \"abcdefgh\"\nassert solution(\"aaaaa\") == \"aaaaa\"\nassert solution(\"aaaa\") == \"aaaa\"\nassert solution(\"aaaaaab\") == \"aaaaaab\"\nassert solution(\"aaaaaaba\") == \"aaaaaaba\"\nassert solution(\"aaaaaabb\") == \"aaaaaabb\"\nassert solution(\"aaaaaabbb\") == \"aaaaaabbb\"\nassert solution(\"aaaaaabbbb\") == \"aaaaaabbbb\"\nassert solution(\"aaaaaabbbcc\") == \"aaaaaabbbcc\"\nassert solution(\"aaaaaabbbccc\") == \"aaaaaabbbccc\"\nassert solution(\"aaaaaabbbccccc\") == \"aaaaaabbbccccc\"\nassert solution(\"aaaaaabbbcccccc\") == \"aaaaaabbbcccccc\"\nassert solution(\"aaaaaabbbccccccc\") == \"aaaaaabbbccccccc\"\nassert solution(\"aaaaaabbbccccccccc\") == \"aaaaaabbbccccccccc\"\nassert solution(\"aaaaaabbbcccccccccc\") == \"aaaaaabbbcccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccc\") == \"aaaaaabbbccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccc\") == \"aaaaaabbbccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccc\") == \"aaaaaabbbccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccc\") == \"aaaaaabbbccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccc\") == \"aaaaaabbbccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccc\") == \"aaaaaabbbccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccc\") == \"aaaaaabbbccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccccc\") == \"aaaaaabbbccccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccccccc\") == \"aaaaaabbbccccccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccccccccc\") == \"aaaaaabbbccccccccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccccccccccc\") == \"aaaaaabbbccccccccccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccccccccccccc\") == \"aaaaaabbbccccccccccccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccccccccccccccc\") == \"aaaaaabbbcccccccccccccccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccccccccccccccccc\") == \"aaaaaabbbcccccccccccccccccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccccccccccccccccccc\") == \"aaaaaabbbcccccccccccccccccccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccccccccccccccccccccc\") == \"aaaaaabbbcccccccccccccccccccccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccccccccccccccccccccccc\") == \"aaaaaabbbcccccccccccccccccccccccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccccccccccccccccccccccccc\") == \"aaaaaabbbcccccccccccccccccccccccccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccccccccccccccccccccccccccc\") == \"aaaaaabbbcccccccccccccccccccccccccccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccccccccccccccccccccccccccccc\") == \"aaaaaabbbcccccccccccccccccccccccccccccccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbbccccccccccccccccccccccccccccccccccccccccccccccccccccc\") == \"aaaaaabbbcccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\"\nassert solution(\"aaaaaabbb"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n    m = len(t)\n    if m < k:\n        print(\"\")\n        return \"\"\n    ans = t\n    for i in range(m - k + 1):\n        ans = t[i:i + k]\n        if len(ans) == k:\n            print(ans)\n    return ans"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n    a = []\n    if n < k:\n        return t\n    for i in range(n - k + 1):\n        a.append(t[i:i + k])\n    a.sort(key=lambda x: x[-1])\n    return ''.join(a[0])"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin[0]\n    print(solution_naive(t, n, k))\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.readline().strip()\n    n, k = map(int, stdin.readline().strip().split())\n\n    i = 0\n    s = \"\"\n    while i < n:\n        s += t[i]\n        for j in range(i, n):\n            s += t[j + 1]\n            if len(s) == k:\n                return s\n        i += 1\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin.strip()\n    k = min(k, n - k)\n    s = ''.join(t) + t\n    for i in range(n - k + 1):\n        if s[i:i + n] == t:\n            return s[:i] + t + s[i + n:]"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    p = []\n    for i in range(1, n):\n        if a[i] > a[i - 1] + a[i]:\n            p.append(i)\n    return '\\n'.join(map(str, p))\n\nprint(solution('4\\n8 3 5 2\\n'))\nprint(solution('5\\n2 1 2 4 3\\n'))\nprint(solution('5\\n2 1 2 4 3\\n'))\n'''"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    good = array[:]\n    for i in range(m):\n        a, b = map(int, stdin.readline().split())\n        good[a] -= b\n        good[b] += b\n    print(sum(array))\n    print(' '.join(map(str, good)))\n    return \"\""
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = sum(a)\n    j = 0\n    for i in range(n):\n        if s - a[i] > a[i]:\n            s -= a[i]\n            j += 1\n    if s == 0:\n        return str(0)\n    return str(j) +'' +''.join(str(x) for x in range(j, n))\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_of_elements = int(stdin)\n    elements = list(map(int, stdin.split(' ')))\n    numbers = set()\n    for i in range(num_of_elements):\n        numbers.add(elements[i])\n    \n    number = list(numbers)\n    number.sort()\n    \n    good_elements = [0] * len(number)\n    for i in range(len(number)):\n        good_elements[i] = sum(number[:i])\n    \n    indices = 0\n    for i in good_elements:\n        if i == sum(number):\n            indices += 1\n    \n    if indices == 0:\n        return str(0)\n    else:\n        return str(indices) +'' +''.join(str(i) for i in good_elements)\n\nprint(solution(input()))"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the good indices of the array.\n    \"\"\"\n    n = stdin.readline()\n    a = stdin.readline().strip().split()\n    a = list(map(int, a))\n    s = sum(a)\n    if not a:\n        print(0)\n    else:\n        for i in range(n):\n            if s - a[i] == a[0]:\n                print(i)\n                break\n            elif i == n - 1:\n                print(0)\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = stdin.readline().strip().split()\n\n    l = [int(n) for n in a]\n\n    m = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if l[i] + l[j] == sum(l) - l[j]:\n                m += 1\n\n    if m == 0:\n        return str(0)\n    return str(m)\n\n\nprint(solution(\"\"\"5\n2 5 1 2 2\n\n\"\"\") == \"\"\"3\n4 1 5\n\n\"\"\")\nprint(solution(\"\"\"4\n8 3 5 2\n\n\"\"\") == \"\"\"2\n1 4 \n\n\"\"\")\nprint(solution(\"\"\"5\n2 1 2 4 3\n\n\"\"\") == \"\"\"0\n\"\"\")\nprint(solution(\"\"\"7\n4 1 3 4 5 6 7\n\n\"\"\") == \"\"\"1\n4 5\n\n\"\"\")\nprint(solution(\"\"\"6\n4 1 3 4 5 6 7\n\n\"\"\") == \"\"\"2\n4 5\n\n\"\"\")\nprint(solution(\"\"\"8\n2 1 2 4 3 5 6 7 8\n\n\"\"\") == \"\"\"0\n\"\"\")\nprint(solution(\"\"\"6\n3 1 2 4 5 6 7 8\n\n\"\"\") == \"\"\"1\n4 5\n\n\"\"\")\nprint(solution(\"\"\"4\n1 2 3 4\n\n\"\"\") == \"\"\"0\n\"\"\")\nprint(solution(\"\"\"1\n0\n\n\"\"\") == \"\"\"0\n\"\"\")\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline().strip())\n    nums = [int(i) for i in stdin.readline().strip().split()]\n    good_indices = []\n    for i in range(size):\n        s = set(range(size))\n        s.remove(i)\n        if sum(nums) - nums[i] in s:\n            good_indices.append(i)\n    if len(good_indices) > 0:\n        return str(len(good_indices))\n    return str(0)"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    a = list(map(int, stdin.strip().split(' ')))\n    res = 0\n    for i in range(len(a)):\n        if sum(a[:i]) == sum(a[i+1:]):\n            res += 1\n    return res\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solution(n, a))\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    good_sum = 0\n    for i, val in enumerate(a):\n        good_sum += val\n\n    count = 0\n    if good_sum % n!= 0:\n        return str(0)\n\n    for i, val in enumerate(a):\n        if (val + good_sum / n) % n == 0:\n            count += 1\n\n    return str(count)\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Counting subset\n    \"\"\"\n    n, k = [int(x) for x in stdin.split(' ')]\n    if n < k:\n        return -1\n    elif k == 1:\n        return n\n    elif n == k:\n        return 0\n    else:\n        s = stdin\n        s = set(s)\n        l = len(s)\n        if l > k:\n            return -1\n        else:\n            return n - l"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, k, s):\n        def find_cost(s, k):\n            cost = 0\n            for i in range(len(s) - k + 1):\n                cost += i\n            return cost\n        def find_min(s, k, min_cost):\n            if k == 1:\n                return min_cost\n            if not s:\n                return -1\n            new_s = set()\n            for i in range(1, len(s) - k + 1):\n                new_s.add(s[i:i + k])\n            return min(find_min(new_s, k - 1, min_cost + find_cost(s, k)), find_min(new_s, k, min_cost + find_cost(s, k)))\n        return find_min(s, k, 0)\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    return str(solve(n, k, s))\n\nassert(solution(\"ajihiushda\") == \"4\")\nassert(solution(\"asdf\") == \"4\")\nassert(solution(\"aaaaa\") == \"15\")\nassert(solution(\"aaaaa\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15\")\nassert(solution(\"asdf\") == \"15"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    if len(s) < k:\n        return \"-1\"\n\n    cost = 0\n    for i in range(len(s) - k + 1):\n        cost += len(s) - i - k\n    return str(cost)\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n\n    # if we can generate a set of size k\n    if len(s) < k:\n        return -1\n\n    # total cost = cost of the first symbol + cost of the rest of the symbols\n    min_cost = sum(ord(s[i]) for i in range(n))\n    for i in range(1, n):\n        for j in range(i, n):\n            cost = sum(ord(s[m]) for m in range(i, j + 1))\n            if cost < min_cost:\n                min_cost = cost\n\n    return min_cost\n\n\nprint(solution(input()))"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    ans = None\n\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            t = s[:j] + s[i:]\n            if len(t) == k:\n                cost = len(t) - j\n                if ans is None or cost < ans:\n                    ans = cost\n\n    return str(ans) if ans is not None else '-1'"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    if k > n * (n - 1) // 2:\n        return -1\n\n    s = stdin.strip()\n    S = set()\n    cost = 0\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if len(S) == k:\n                return cost\n\n            t = s[i:j]\n            S.add(t)\n            cost += j - i\n\n    return -1"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    if n < 1 or n > 100: raise ValueError\n    if k < 1 or k > 10 ** 12: raise ValueError\n    s = stdin.strip()\n    if len(s) < k: return -1\n    m = s[0]\n    for i in range(1, k):\n        if s[i]!= m:\n            m = s[i]\n            continue\n        if i == len(s) - 1: return k\n        if s[i + 1] == m:\n            continue\n        return -1\n    return 0\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[2:]]\n    if len(edges) < m:\n        return \"NO\"\n    if d > n - 1:\n        return \"NO\"\n    d_tree = [None] * n\n    d_tree[0] = -1\n    degree = [0] * n\n    for edge in edges:\n        v, u = edge[0], edge[1]\n        degree[v] += 1\n        degree[u] += 1\n    for i in range(1, n):\n        if degree[i]!= d:\n            return \"NO\"\n    for i in range(1, n):\n        if d_tree[i] is not None:\n            continue\n        tree = [None] * n\n        tree[0] = -1\n        q = list(range(1, n))\n        while q:\n            v = q.pop()\n            for u in edges:\n                if u[0] == v:\n                    tree[u[1]] = v\n                    degree[u[1]] -= 1\n                    if degree[u[1]] == 0:\n                        q.append(u[1])\n                    break\n        d_tree[i] = tree\n    result = [\"\"] * (n - 1)\n    for edge in edges:\n        v, u = edge[0], edge[1]\n        result[d_tree[v].index(u)] = \" \".join(map(str, edge))\n    return \"YES\\n\" + \"\\n\".join(result)"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(m):\n        v, u = [int(x) for x in stdin.split()]\n        edges.append((v, u))\n\n    edge_degree = [0 for _ in range(n)]\n    for v, u in edges:\n        edge_degree[v] += 1\n        edge_degree[u] += 1\n\n    for v, u in edges:\n        if edge_degree[v]!= d or edge_degree[u]!= d:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    for v, u in edges:\n        if edge_degree[v] == d and edge_degree[u] == d:\n            print(v, u)\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split()))\n    d = min(2 * n * (n - 1) / 2, d)\n    edges = []\n    while m > 0:\n        v1, v2 = list(map(int, stdin.split()))\n        if v1 not in edges and v2 not in edges:\n            edges.append(v1)\n            edges.append(v2)\n            m -= 1\n    if len(edges) < d:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, edges))"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.readline().split())\n\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    degree = [0] * n\n    for v in range(n):\n        for u in graph[v]:\n            degree[u] += 1\n\n    for i in range(1, n):\n        if degree[i] == d:\n            print(\"YES\")\n            for j in range(n - 1):\n                u, v = map(int, stdin.readline().split())\n                print(u, v)\n            return\n\n    print(\"NO\")\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        edges.append((v, u))\n    return \"YES\" if is_valid(n, m, d, edges) else \"NO\"\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.strip().split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        v1, v2 = map(int, stdin.strip().split())\n        graph[v1].append(v2)\n        graph[v2].append(v1)\n\n    deg = [0] * (n + 1)\n    for v in graph.keys():\n        for v2 in graph[v]:\n            deg[v2] += 1\n\n    ans = \"NO\" if not d in deg else \"YES\"\n\n    if not ans:\n        return ans\n\n    for _ in range(n - 1):\n        for v in graph.keys():\n            for v2 in graph[v]:\n                if deg[v2] == d and deg[v] < d:\n                    ans = \"YES\"\n                    deg[v] = d\n                    break\n\n    return ans\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split(' ')))\n    edges = [set() for _ in range(m)]\n    for _ in range(m):\n        v1, v2 = list(map(int, stdin.split(' ')))\n        edges[v1 - 1].add(v2 - 1)\n        edges[v2 - 1].add(v1 - 1)\n    \n    vertices = set()\n    for v in edges:\n        vertices |= v\n    \n    if len(vertices) == 1:\n        return \"YES\"\n    \n    # Choose a vertex v from the graph so that the degree of v is equal to d\n    # in the graph. All edges from v are in the spanning tree.\n    \n    if d == 1:\n        v = 1\n        if len(vertices) == d:\n            return \"YES\"\n        else:\n            return \"NO\"\n    \n    if d == len(vertices):\n        return \"YES\"\n    \n    if d > len(vertices):\n        return \"NO\"\n    \n    vertices -= {v}\n    \n    # Choose a vertex u from the graph so that the degree of u is equal to d\n    # in the graph. All edges from u are in the spanning tree.\n    \n    nodes = list(vertices)\n    edges = list(edges)\n    dist = [float('inf')] * len(nodes)\n    dist[0] = 0\n    \n    def get_parent(u):\n        while dist[u]!= float('inf'):\n            u = nodes[dist[u]]\n        return u\n    \n    for v in nodes:\n        # Find the node in the graph that is the child of v.\n        neighbors = edges[v]\n        for w in neighbors:\n            if dist[w] == float('inf'):\n                dist[w] = dist[v] + 1\n                nodes[w] = v\n            \n            # If the neighbor w is the child of the new parent u,\n            # u becomes the new parent of w.\n            if get_parent(w) == v:\n                get_parent(w) = u\n    \n    # For each edge (v, u) in the spanning tree,\n    # if the degree of u is equal to d-1, print it.\n    \n    degrees = [0] * len(nodes)\n    for v in edges:\n        for u in v:\n            degrees[u] += 1\n    \n    for i in range(len(nodes)):\n        if degrees[i] == d - 1:\n            print(i + 1, end=' ')\n    \n    print()\n    \n    return \"YES\"\n    \n    \n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom collections import defaultdict\n\nfrom sys import stdin\n\nn, m, d = list(map(int, stdin.readline().split()))\n\ng = defaultdict(set)\n\nfor _ in range(m):\n    v, u = list(map(int, stdin.readline().split()))\n    g[v].add(u)\n    g[u].add(v)\n\nres = []\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_nodes, num_edges, req_deg = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in line.split()) for line in stdin.splitlines()[1:]]\n    nodes = list(range(1, num_nodes + 1))\n\n    def get_deg(v: int) -> int:\n        neighbours = set()\n        for u, v in edges:\n            if v == v:\n                continue\n            if v < v:\n                neighbours.add(u)\n            else:\n                neighbours.add(v)\n\n        return len(neighbours)\n\n    def can_form(nodes: List[int], degrees: List[int]) -> bool:\n        for node, deg in zip(nodes, degrees):\n            if deg!= get_deg(node):\n                return False\n        return True\n\n    if get_deg(1) == req_deg:\n        return \"YES\"\n\n    nodes.remove(1)\n\n    for node in nodes:\n        degrees = [get_deg(n) for n in nodes]\n        if can_form(nodes, degrees):\n            return \"YES\\n\" + \" \".join([str(x) for x in edges if x[0] == node or x[1] == node])\n\n    return \"NO\""
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport unittest\n\nclass TestConsecutiveDigitsSum(unittest.TestCase):\n    def test_examples(self):\n        self.assertEqual(solution(stdin), stdout)\n\n    def test_extreme_cases(self):\n        self.assertEqual(solution('23:59'), '22:59')\n        self.assertEqual(solution('00:00'), '23:59')\n        self.assertEqual(solution('00:59'), '00:59')\n        self.assertEqual(solution('12:00'), '23:59')\n        self.assertEqual(solution('12:01'), '23:59')\n        self.assertEqual(solution('12:02'), '23:59')\n\n    def test_random(self):\n        self.assertEqual(solution('23:45'), '22:45')\n        self.assertEqual(solution('23:45'), '22:45')\n        self.assertEqual(solution('23:45'), '22:45')\n        self.assertEqual(solution('23:45'), '22:45')\n        self.assertEqual(solution('23:45'), '22:45')\n        self.assertEqual(solution('23:45'), '22:45')"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split(' '))\n    return '{:02d}:{:02d}'.format(int(h1 * 30 / 60 + m1 * 2 / 60 + h2 * 30 / 60 + m2 * 2 / 60), int(h1 * 30 / 60 + m1 * 2 / 60 + h2 * 30 / 60 + m2 * 2 / 60) - 1)\n    \nassert solution('10:00 11:00') == '10:30'\nassert solution('11:10 11:12') == '11:11'\nassert solution('01:02 03:02') == '02:02'\nassert solution('00:23 01:02 23:02') == '00:00'"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(' '))\n    h2, m2 = map(int, stdin.split(' '))\n    if m1 % 2 == 0 and m2 % 2 == 0:\n        h3 = (h1 + h2) / 2\n        m3 = (m1 + m2) / 2\n        return '{0:02d}:{1:02d}'.format(h3, m3)\n    else:\n        h3 = (h1 + h2) / 2 + 1\n        m3 = (m1 + m2) / 2\n        return '{0:02d}:{1:02d}'.format(h3, m3)\n    \n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = [int(i) for i in stdin.split(\" \")]\n    h_2, m_2 = [int(i) for i in stdin.split(\" \")]\n    return str(int((h_1 + h_2) / 2) % 24) + \":\" + str((m_1 + m_2) / 2)\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = [int(x) for x in stdin.split(\":\")]\n    h2, m2 = [int(x) for x in stdin.split(\":\")]\n    print(f\"{(h1 + h2) // 2:02d}:{(m1 + m2) // 2:02d}\")"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input line into two integers.\n    h1, m1 = [int(n) for n in stdin.split(\" \")]\n    h2, m2 = [int(n) for n in stdin.split(\" \")]\n    # Since there are an even number of minutes in the contest, we can\n    # find the midpoint by dividing by 2.\n    m3 = int(m1 / 2)\n    if m1 % 2 == 1:\n        m3 += 1\n    if m2 % 2 == 1:\n        m3 += 1\n    # Convert the integer minutes into two-digit string.\n    m3 = str(m3)\n    m3 = m3[0] + m3[1]\n    # Convert the integer hours into two-digit string.\n    h3 = str(h1)\n    h3 = h3[0] + h3[1]\n    return f\"{h3}:{m3}\""
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = list(map(int, stdin.strip().split(' ')))\n    h_2, m_2 = list(map(int, stdin.strip().split(' ')))\n    # The contest starts at h_1:m_1 and ends at h_2:m_2\n    if h_1 > h_2:\n        h_1, h_2 = h_2, h_1\n    if m_1 > m_2:\n        m_1, m_2 = m_2, m_1\n    # The contest lasts at least two minutes\n    if h_1 == h_2:\n        h_3 = h_1\n    else:\n        h_3 = (h_1 + h_2) // 2\n    if m_1 == m_2:\n        m_3 = m_1\n    else:\n        m_3 = (m_1 + m_2) // 2\n    return str(h_3) + ':' + str(m_3)\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    first_time, end_time = [int(x) for x in stdin.split(' ')]\n\n    # check if the time is the same or one hour less\n    if (first_time % 2 == 0 and end_time % 2 == 0) or (first_time % 2 == 1 and end_time % 2 == 1):\n        # find the sum of the two times\n        sum_time = int(first_time / 2) + int(end_time / 2)\n        # if it's even, the hours are the same, take the modulo to get the hours\n        if sum_time % 2 == 0:\n            hours = int(sum_time / 2)\n            minutes = int(sum_time % 2) * 30\n        else:\n            # if it's odd, the hours are one more\n            hours = int((sum_time - 1) / 2)\n            minutes = int((sum_time - 1) % 2) * 30 + 30\n        # round the hours and minutes\n        hours = str(hours)\n        if len(hours) < 2:\n            hours = '0' + hours\n        minutes = str(minutes)\n        if len(minutes) < 2:\n            minutes = '0' + minutes\n        return hours + ':' + minutes\n    else:\n        return 'IMPOSSIBLE'\n\nassert(solution('10:00') == '10:30')\nassert(solution('11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('11:00 11:00') == '11:00')\nassert(solution('01:02') == '02:02')\nassert(solution('11:00') == '11:00')\nassert(solution('00:00') == '00:00')\nassert(solution('12:00') == '00:00')\nassert(solution('01:00') == '01:00')\nassert(solution('00:00') == '00:00')\nassert(solution('01:02') == '00:00')\nassert(solution('10:00') == '10:30')\nassert(solution('11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('11:00 11:00') == '11:00')\nassert(solution('12:00') == '00:00')\nassert(solution('01:00') == '01:00')\nassert(solution('00:00') == '00:00')\nassert(solution('01:02') == '00:00')\nassert(solution('10:00') == '10:30')\nassert(solution('11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('11:00 11:00') == '11:00')\nassert(solution('12:00') == '00:00')\nassert(solution('01:00') == '01:00')\nassert(solution('00:00') == '00:00')\nassert(solution('01:02') == '00:00')\nassert(solution('10:00') == '10:30')\nassert(solution('11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('11:00 11:00') == '11:00')\nassert(solution('12:00') == '00:00')\nassert(solution('01:00') == '01:00')\nassert(solution('00:00') == '00:00')\nassert(solution('01:02') == '00:00')\nassert(solution('10:00') == '10:30')\nassert(solution('11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('11:00 11:00') == '11:00')\nassert(solution('12:00') == '00:00')\nassert(solution('01:00') == '01:00')\nassert(solution('00:00') == '00:00')\nassert(solution('01:02') == '00:00')\nassert(solution('10:00') == '10:30')\nassert(solution('11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('11:00 11:00') == '11:00')\nassert(solution('12:00') == '00:00')\nassert(solution('01:00') == '01:00')\nassert(solution('00:00') == '00:00')\nassert(solution('01:02') == '00:00')\nassert(solution('10:00') == '10:30')\nassert(solution('11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('11:00 11:00') == '11:00')\nassert(solution('12:00') == '00:00')\nassert(solution('01:00') == '01:00')\nassert(solution('00:00') == '00:00')\nassert(solution('01:02') == '00:00')\nassert(solution('10:00') == '10:30')\nassert(solution('11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('10:00 11:00') == '10:30')\nassert(solution('11:00 11:00') == '11:00')\nassert(solution('12:00"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split(\" \"))\n    if h1 == h2 and m1 == m2:\n        return f\"{h1:02}:{m1:02}\"\n    else:\n        if h1 == h2:\n            m = (m1 + m2) // 2\n        else:\n            m = (m1 + m2) // 2 + (m1 % 2)\n        if m <= 59:\n            return f\"{h1:02}:{m:02}\"\n        else:\n            return f\"{h1:02}:{m % 60:02}\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N - 1)\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return str(a // 2)\n    else:\n        return str(a // 2 + 1)\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\"\n\n@app.route('/')\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # one line for solution\n    return str(len(str(bin(int(stdin.strip()))[2:])))\n    \n    "
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin.readline().strip())\n    return str(number - 1)"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.readline().strip()) + 1)\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 1 or a > 64:\n        return\n    elif a % 2 == 1:\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    l = len(str(a))\n    r = (l + 1) // 2\n    s = sum(int(str(a)[i]) * (10 ** (l - i - 1)) for i in range(l))\n    return s\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        return '0'\n\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append([l, r])\n\n    intersections = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[i][1] < segments[j][0] or segments[i][0] > segments[j][1]:\n                continue\n            if segments[i][0] <= segments[j][0] and segments[i][1] >= segments[j][1]:\n                intersections += 1\n                break\n\n    return str(intersections)"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lines = [int(line) for line in stdin.split('\\n')]\n    if n < 2:\n        return str(0)\n    if n > 3 * 10**5:\n        return str(0)\n    intersections = []\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            intersections.append((lines[i - 1], lines[j - 1]))\n    intersections.sort(key = lambda x: x[0])\n    for intersection in intersections:\n        lines[intersection[1] - 1] = intersection[0]\n    length = 0\n    for i in range(n):\n        length += (lines[i] - lines[i - 1])\n    return str(length)\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '1'\n    if n == 3:\n        return '1'\n    if n == 4:\n        return '2'\n\n    segments = [map(int, stdin.split(';')) for _ in range(n)]\n\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i == 1:\n            dp[i] = segments[0][1] - segments[0][0]\n            continue\n        dp[i] = max(dp[i - 1], segments[i - 1][1] - segments[i - 1][0] + dp[i - 2])\n\n    return str(dp[n])\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n\n    # read the input\n    n = int(lines[0])\n    segments = [Segment(int(l), int(r)) for l, r in zip(lines[1::2], lines[2::2])]\n    max_intersection_length = max(segments, key=lambda s: s.length())\n\n    return str(max_intersection_length.length())"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your solution here\n    # The number of segments\n    n = stdin.strip()\n    n = int(n)\n\n    # read the segments\n    segments = stdin.strip().split(\"\\n\")\n    segments = [list(map(int, seg.strip().split(\" \"))) for seg in segments]\n\n    # get the intersection of the remaining segments\n    def intersection(seg1, seg2):\n        if seg1[1] <= seg2[0] or seg2[1] <= seg1[0]:\n            return []\n        return [max(seg1[0], seg2[0]), min(seg1[1], seg2[1])]\n\n    max_int = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            int_len = len(intersection(segments[i], segments[j]))\n            max_int = max(max_int, int_len)\n\n    return max_int\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = [tuple(map(int, stdin.split())) for _ in range(n)]\n    lengths = [0] * (n + 1)\n\n    for i, (l, r) in enumerate(segments):\n        if l > r:\n            l, r = r, l\n        if i > 0:\n            if (l, r) == segments[i-1]:\n                lengths[i] = lengths[i-1]\n            else:\n                lengths[i] = max(lengths[i-1], r - l + 1)\n        else:\n            lengths[i] = r - l + 1\n\n    max_length = 0\n    for i, length in enumerate(lengths[1:], 1):\n        if max_length == length:\n            continue\n        max_length = max(max_length, length)\n    return str(max_length)\n\nassert(solution('1 3') == '1')\nassert(solution('2 6') == '1')\nassert(solution('0 4') == '0')\nassert(solution('3 3') == '0')\nassert(solution('4 5') == '2')\nassert(solution('1 2') == '2')\nassert(solution('9 20') == '2')\nassert(solution('0 4') == '0')\nassert(solution('1 20') == '0')\nassert(solution('3 3') == '0')\nassert(solution('4 5') == '2')\nassert(solution('9 10') == '7')\nassert(solution('2 6') == '1')\nassert(solution('3 10') == '7')\nassert(solution('2 9') == '0')\nassert(solution('0 4') == '0')\nassert(solution('1 9') == '0')\nassert(solution('3 3') == '0')\nassert(solution('3 4') == '0')\nassert(solution('1 9') == '0')\nassert(solution('4 5') == '2')\nassert(solution('3 10') == '7')\nassert(solution('3 10') == '7')\nassert(solution('3 4') == '0')\nassert(solution('2 10') == '0')\nassert(solution('1 5') == '2')\nassert(solution('1 5') == '2')\nassert(solution('0 4') == '0')\nassert(solution('2 10') == '0')\nassert(solution('1 2') == '2')\nassert(solution('1 2') == '2')\nassert(solution('0 4') == '0')\nassert(solution('2 10') == '0')\nassert(solution('1 10') == '0')\nassert(solution('2 9') == '0')\nassert(solution('0 4') == '0')\nassert(solution('1 9') == '0')\nassert(solution('3 10') == '7')\nassert(solution('3 10') == '7')\nassert(solution('3 4') == '0')\nassert(solution('2 10') == '0')\nassert(solution('1 10') == '0')\nassert(solution('2 9') == '0')\nassert(solution('0 4') == '0')\nassert(solution('1 9') == '0')\nassert(solution('3 10') == '7')\nassert(solution('3 10') == '7')\nassert(solution('3 4') == '0')\nassert(solution('2 10') == '0')\nassert(solution('1 10') == '0')\nassert(solution('2 9') == '0')\nassert(solution('0 4') == '0')\nassert(solution('1 9') == '0')\nassert(solution('3 10') == '7')\nassert(solution('3 10') == '7')\nassert(solution('3 4') == '0')\nassert(solution('2 10') == '0')\nassert(solution('1 10') == '0')\nassert(solution('2 9') == '0')\nassert(solution('0 4') == '0')\nassert(solution('1 9') == '0')\nassert(solution('3 10') == '7')\nassert(solution('3 10') == '7')\nassert(solution('3 4') == '0')\nassert(solution('2 10') == '0')\nassert(solution('1 10') == '0')\nassert(solution('2 9') == '0')\nassert(solution('0 4') == '0')\nassert(solution('1 9') == '0')\nassert(solution('3 10') == '7')\nassert(solution('3 10') == '7')\nassert(solution('3 4') == '0')\nassert(solution('2 10') == '0')\nassert(solution('1 10') == '0')\nassert(solution('2 9') == '0')\nassert(solution('0 4') == '0')\nassert(solution('1 9') == '0')\nassert(solution('3 10') == '7')\nassert(solution('3 10') == '7')\nassert(solution('3 4') == '0')\nassert(solution('2 10') == '0')\nassert(solution('1 10') == '0')\nassert(solution('2 9') == '0')\nassert(solution('0 4') == '0')\nassert(solution('1 9"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        raise ValueError('Number of segments must be > 0')\n    if n == 1:\n        return '0'\n    if n == 2:\n        return '1'\n\n    segments = []\n    for _ in range(n):\n        l, r = [int(x) for x in stdin.split(' ')]\n        if l >= r:\n            raise ValueError('Invalid segment')\n        segments.append((l, r))\n\n    max_len = 0\n    for i in range(n - 1):\n        l, r = segments[i]\n        for j in range(i + 1, n):\n            l_, r_ = segments[j]\n            if r > l_ and l > r_:\n                len_ = r - l + 1\n                if len_ > max_len:\n                    max_len = len_\n\n    return str(max_len)\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(points: List[int]) -> bool:\n        n = len(points)\n        for i in range(n - 1):\n            if points[i] == points[i + 1]:\n                return False\n            if points[i + 1] == points[0] or points[i] == points[n - 1]:\n                return False\n        return True\n\n    n = int(stdin.readline())\n    segments = []\n    for i in range(n):\n        line = stdin.readline().split()\n        segments.append((int(line[0]), int(line[1])))\n    segments.sort()\n    segments = [segments[0]] + [segments[i] for i in range(1, n) if segments[i][0]!= segments[i - 1][1]]\n    # print(segments)\n    lengths = []\n    for segment in segments:\n        lengths.append(segment[1] - segment[0] + 1)\n    lengths.sort(reverse=True)\n    lengths = lengths[1:]\n    intersection_length = lengths[0]\n    for l in lengths:\n        if intersection_length < l:\n            intersection_length = l\n    if intersection_length == 0:\n        return str(0)\n    return str(intersection_length)\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    line = stdin.readline().split(' ')\n    segments = [int(x) for x in line]\n    segments = sorted(segments)\n    intersection = []\n    length = 0\n    while len(segments) > 1:\n        if segments[0] > segments[1]:\n            length += segments[0] - segments[1]\n            intersection.append(segments[0])\n            del segments[0]\n            del segments[0]\n        else:\n            del segments[0]\n\n    return str(length)\n\n\nprint(solution(stdin))\n\n\n\"\"\""
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 3 * 10 ** 5:\n        raise ValueError(\"Wrong input\")\n    segments = [tuple(int(x) for x in line.split(\" \")) for line in stdin.split(\"\\n\")]\n    segments.sort(key=lambda x: x[1])\n    current_segment = segments[0]\n    current_segment_length = current_segment[1] - current_segment[0]\n    intersection_length = 0\n    for i in range(1, n):\n        if current_segment[1] <= segments[i][0]:\n            intersection_length = max(intersection_length, current_segment_length)\n            current_segment = segments[i]\n            current_segment_length = current_segment[1] - current_segment[0]\n    return str(intersection_length)\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(check(stdin))\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()[:-1]\n    a = stdin.readline()[:-1]\n\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3] and a[3] == a[4] and a[4] == a[5]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nassert(solution(stdin_text) == stdout_text)\n\n\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = stdin.strip().split()\n    return 'YES' if not any(i * 2 - 1 < int(j) for i, j in zip(h, h[1:])) else 'NO'"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = tuple(map(int, stdin.readline().split()))\n    \n    # (0) 2x1 bricks\n    # (1) 1x1 bricks\n    # (2) no bricks\n    dp = [0, 0, 2] + [0] * (n - 2)\n    \n    for height in heights:\n        dp[height] += 1\n    \n    for i in range(2, n):\n        if heights[i - 1] == heights[i]:\n            dp[i] += 1\n        else:\n            break\n    \n    for i in range(n - 2, 0, -1):\n        if heights[i - 1] == heights[i]:\n            dp[i] += 1\n        else:\n            break\n    \n    for i in range(n - 2, 0, -1):\n        if heights[i - 1] == heights[i]:\n            dp[i] += 1\n        else:\n            break\n    \n    for i in range(n - 2, 0, -1):\n        if heights[i - 1] == heights[i]:\n            dp[i] += 1\n        else:\n            break\n    \n    print(\"YES\" if dp[1] == n - 1 else \"NO\")\n    "
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    n = input_data[0]\n    a = input_data[1:]\n    # your code here\n    # Vova's height is max(a)\n    # Vova's height is n-1, because he can only put 2*1 bricks\n    if a.count(max(a)) > n-1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|# #|# #|\n|# #|# #|\n|# #|# #|\n|# #|# #|\n|# #|# #|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|# #|\n|# #|# #|\n|###|###|\n\n## #\n## #\n## #\n## #\n## #\n\n\n\n\n|##|###|\n|##|# #|\n|# #|"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n - 1):\n        if lst[i] == lst[i + 1]:\n            count += 1\n    if count == 0:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    \n    return 'YES' if h.count(h[0]) == len(h) else 'NO'"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution of the problem\"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[len(stdin)-n:]\n    s_set = set()\n    cost = 0\n    for i in range(len(s)):\n        if s[i] not in s_set:\n            s_set.add(s[i])\n            cost += i\n        if len(s_set) == k:\n            break\n    return cost"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[1].strip()\n    n, k = int(s[0]), int(s[1])\n    s = set(s[2:])\n\n    dp = [1] + [0] * n\n    for i in range(n - 1):\n        if s.__contains__(s[i]):\n            dp[i + 1] = dp[i] + 1\n        else:\n            dp[i + 1] = dp[i]\n    return \"-1\" if dp[-1] > k else str(dp[-1])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[n:]\n    if k == 1:\n        return 1\n\n    results = set()\n    for i in range(1, k):\n        for j in range(n - i + 1):\n            results.add(s[j:j + i])\n    if len(results) == k:\n        return 0\n    else:\n        return -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > n:\n        return '-1'\n    s = stdin.strip()\n    i = 0\n    min_cost = 0\n    while i < n - k + 1:\n        min_cost += s[i + k - 1]!= s[i]\n        i += 1\n    return str(min_cost)\n\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    if k < 1 or k > n:\n        return '-1'\n\n    if k == n:\n        return '0'\n\n    if k == 1:\n        return '1'\n\n    s = stdin[2]\n    s_len = len(s)\n\n    if k > s_len:\n        return '-1'\n\n    # generate string of k length\n    ans = s[0:k]\n    ans = ans * (k + 1)\n\n    s = s[k:len(s)]\n\n    # append s\n    while len(s)!= 0:\n        ans = s[0:k] + ans\n        ans = ans * (k + 1)\n\n        s = s[k:len(s)]\n\n    return str(len(ans) - 1)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    s = stdin[1:n + 1]\n    if k > len(s):\n        return -1\n\n    for i in range(len(s)):\n        # print(s[:i], s[i:], sep='\\n')\n        for j in range(len(s[i:])):\n            if s[i:i + j] in s[:i] + s[i + j:]:\n                break\n        else:\n            return len(s[:i]) + len(s[i + j:])\n\n    return -1\n\nprint(solution(input()))"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > n:\n        return -1\n    s = stdin.strip()\n    res = 0\n    for i in range(1, len(s) - k + 1):\n        res += len(s) - i\n    return res"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < k:\n        print(-1)\n        return\n    s = stdin.strip()\n    if len(s) < k:\n        print(-1)\n        return\n\n    n -= len(s)\n    t = set()\n    for i in range(n):\n        s2 = s[i:]\n        if s2 in t:\n            print(-1)\n            return\n        t.add(s2)\n    print(n * len(s))\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > n:\n        return \"-1\"\n    subs = [x for x in stdin]\n    subs.sort(key=len)\n    res = 0\n    for i in range(n - k + 1):\n        res += len(subs[i])\n    return str(res)\n    \nassert(solution(stdin) == \"-1\")\nassert(solution(stdin2) == \"15\")\nassert(solution(stdin3) == \"0\")\nassert(solution(stdin4) == \"4\")\nassert(solution(stdin5) == \"5\")\nassert(solution(stdin6) == \"7\")\nassert(solution(stdin7) == \"16\")\nassert(solution(stdin8) == \"8\")\nassert(solution(stdin9) == \"-1\")\nassert(solution(stdin10) == \"12\")\nassert(solution(stdin11) == \"6\")\nassert(solution(stdin12) == \"9\")\nassert(solution(stdin13) == \"12\")\nassert(solution(stdin14) == \"12\")\nassert(solution(stdin15) == \"14\")\nassert(solution(stdin16) == \"8\")\nassert(solution(stdin17) == \"11\")\nassert(solution(stdin18) == \"5\")\nassert(solution(stdin19) == \"10\")\nassert(solution(stdin20) == \"15\")\nassert(solution(stdin21) == \"5\")\nassert(solution(stdin22) == \"9\")\nassert(solution(stdin23) == \"12\")\nassert(solution(stdin24) == \"15\")\nassert(solution(stdin25) == \"11\")\nassert(solution(stdin26) == \"18\")\nassert(solution(stdin27) == \"9\")\nassert(solution(stdin28) == \"10\")\nassert(solution(stdin29) == \"9\")\nassert(solution(stdin30) == \"11\")\nassert(solution(stdin31) == \"12\")\nassert(solution(stdin32) == \"12\")\nassert(solution(stdin33) == \"7\")\nassert(solution(stdin34) == \"16\")\nassert(solution(stdin35) == \"13\")\nassert(solution(stdin36) == \"10\")\nassert(solution(stdin37) == \"12\")\nassert(solution(stdin38) == \"13\")\nassert(solution(stdin39) == \"11\")\nassert(solution(stdin40) == \"11\")\nassert(solution(stdin41) == \"13\")\nassert(solution(stdin42) == \"11\")\nassert(solution(stdin43) == \"15\")\nassert(solution(stdin44) == \"5\")\nassert(solution(stdin45) == \"12\")\nassert(solution(stdin46) == \"14\")\nassert(solution(stdin47) == \"12\")\nassert(solution(stdin48) == \"16\")\nassert(solution(stdin49) == \"10\")\nassert(solution(stdin50) == \"8\")\nassert(solution(stdin51) == \"12\")\nassert(solution(stdin52) == \"12\")\nassert(solution(stdin53) == \"10\")\nassert(solution(stdin54) == \"11\")\nassert(solution(stdin55) == \"10\")\nassert(solution(stdin56) == \"10\")\nassert(solution(stdin57) == \"11\")\nassert(solution(stdin58) == \"11\")\nassert(solution(stdin59) == \"11\")\nassert(solution(stdin60) == \"13\")\nassert(solution(stdin61) == \"12\")\nassert(solution(stdin62) == \"10\")\nassert(solution(stdin63) == \"12\")\nassert(solution(stdin64) == \"10\")\nassert(solution(stdin65) == \"11\")\nassert(solution(stdin66) == \"10\")\nassert(solution(stdin67) == \"9\")\nassert(solution(stdin68) == \"10\")\nassert(solution(stdin69) == \"10\")\nassert(solution(stdin70) == \"10\")\nassert(solution(stdin71) == \"10\")\nassert(solution(stdin72) == \"10\")\nassert(solution(stdin73) == \"10\")\nassert(solution(stdin74) == \"9\")\nassert(solution(stdin75) == \"12\")\nassert(solution(stdin76) == \"10\")\nassert(solution(stdin77) == \"9\")\nassert(solution(stdin78) == \"10\")\nassert(solution(stdin79) == \"11\")\nassert(solution(stdin80) == \"10\")\nassert(solution(stdin81) == \"9\")\nassert(solution(stdin82) == \"11\")\nassert(solution(stdin83) == \"9\")\nassert(solution(stdin84) == \"9\")\nassert(solution(stdin85) == \"10\")\nassert(solution(stdin86) == \"11\")\nassert(solution(stdin87) == \"9\")\nassert(solution(stdin88) == \"9\")\nassert(solution(stdin89) == \"10\")\nassert(solution(stdin90) == \"10\")\nassert(solution(stdin91) == \"11\")\nassert(solution(stdin92) == \"10\")\nassert(solution(stdin93) == \"10\")\nassert(solution(stdin94) == \"11\")\nassert(solution(stdin95) == \"10\")\nassert(solution(stdin96) == \"10\")\nassert(solution(stdin97) == \"11\")\nassert(solution(stdin98) == \"10\")\nassert(solution(stdin99) == \"10\")\nassert(solution(stdin100) == \"10\")\nassert(solution(stdin101) == \"11\")\nassert(solution(stdin102) == \"10"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(7*10**8 - a - b - c)\n\n\nassert(solution(input()) == '39')\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    sums = (a * 4) + (b * 3) + (c * 2)\n    if sums % 7 == 0:\n        return str((sums // 7) - 2)\n    return str((sums // 7) - 1)\n\nassert(solution(\"2 1 1\") == \"4\")\nassert(solution(\"3 2 2\") == \"7\")\nassert(solution(\"1 100 1\") == \"3\")\nassert(solution(\"30 20 10\") == \"39\")\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, c = [int(x) for x in stdin.split()]\n    days = [1, 4, 7]\n    return min([(a * d + b * (d + 1) + c * (d + 2)) / d for d in days])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, *nums = [int(num) for num in stdin.split()]\n    a, b, c = nums\n    ans = 0\n    while True:\n        if a <= b and b <= c and c <= a:\n            break\n        a += 1\n        if a > 7 * 10**8:\n            a = 1\n        b += 1\n        if b > 7 * 10**8:\n            b = 1\n        c += 1\n        if c > 7 * 10**8:\n            c = 1\n        ans += 1\n    return str(ans)"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    ans = 0\n    for i in range(7):\n        if i == 0:\n            ans = max(ans, min(a, b, c))\n        elif i == 1:\n            ans = max(ans, min(a, b, c))\n        elif i == 2:\n            ans = max(ans, min(a, b, c))\n        elif i == 3:\n            ans = max(ans, min(a, b, c))\n        elif i == 4:\n            ans = max(ans, min(a, b, c))\n        elif i == 5:\n            ans = max(ans, min(a, b, c))\n        else:\n            ans = max(ans, min(a, b, c))\n    return str(ans)\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = tuple(map(int, stdin.split()))\n    return max(4, min(a//3, b//2, c//1))\n\nassert solution('2 1 1') == '4'\nassert solution('3 2 2') == '7'\nassert solution('30 20 10') == '39'\nassert solution('1 100 1') == '3'\nassert solution('10 100 10') == '4'\nassert solution('1000 1000 1000') == '4'\n\n\n\"\"\"\n\na, b, c = tuple(map(int, input().split()))\n\nweek = [0, 0, 0]\n\nfor i in range(7):\n    week[i % 3] += (a + b + c) // 3\n    a, b, c = a + 2 * b + 2 * c, b + c, c\n\nprint(week.index(max(week)))\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def process_orders(orders):\n        # returns True if all orders are not satisfied, False otherwise\n        satisfied = True\n        for i, order in enumerate(orders):\n            if order == 0:\n                satisfied = False\n                break\n        return satisfied\n    \n    a, b, c = [int(x) for x in stdin.split()]\n    day = 0\n    while process_orders([a, b, c]):\n        day += 1\n    return day\n    \nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    return solve(a, b, c)\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    tiles = [stdin.split() for i in range(n)]\n    m = m - 2\n    if m == 0:\n        return \"YES\"\n    elif m % 2 == 1:\n        return \"NO\"\n    else:\n        return \"YES\" if symmetric_matrix(tiles) else \"NO\"\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m = map(int, stdin.pop(0).split(' '))\n    tiles = [[int(i) for i in stdin.pop(0).split(' ')] for _ in range(n)]\n    tiles_to_place = n * m\n    grid = [[0] * m for _ in range(m)]\n    for tile in tiles:\n        left, top = tile[0], tile[1]\n        grid[left][top] = 1\n    for i in range(1, m):\n        for j in range(1, m):\n            if grid[i][j]!= grid[j][i]:\n                return 'NO'\n    return 'YES'\n\n>>> solution(\"\"\"3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\n\n[Image]\n\nWe have $3 \\times 3$ cells, for each cell we have two tiles, each tile can be placed in one of four directions: up, right, down or left. \n\nMasha has $n$ types of tiles of size $2 \\times 2$, each cell of the tile contains one integer. Masha has an infinite number of tiles of each type.\n\nMasha decides to construct the square of size $m \\times m$ consisting of the given tiles. This square also has to be a symmetric with respect to the main diagonal matrix, and each cell of this square has to be covered with exactly one tile cell, and also sides of tiles should be parallel to the sides of the square. See the picture in Notes section for better understanding.\n\nSymmetric with respect to the main diagonal matrix is such a square $s$ that for each pair $(i, j)$ the condition $s[i][j] = s[j][i]$ holds. I.e. it is true that the element written in the $i$-row and $j$-th column equals to the element written in the $j$-th row and $i$-th column.\n\nThe square is not symmetric \u2014 it does not have to be a symmetric matrix with respect to the main diagonal. All placed tiles cannot intersect with each other. Also, each tile should lie inside the square. See the picture in Notes section for better understanding.\n\nYou have to answer $t$ independent test cases.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 100$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains two integers $n$ and $m$ ($1 \\le n \\le 100$, $1 \\le m \\le 100$) \u2014 the number of types of tiles and the size of the square Masha wants to construct.\n\nThe next $2n$ lines of the test case contain descriptions of tiles types. Types of tiles are written one after another, each type is written on two lines. \n\nThe first line of the description contains two positive (greater than zero) integers not exceeding $100$ \u2014 the number written in the top left corner of the tile and the number written in the top right corner of the tile of the current type. The second line of the description contains two positive (greater than zero) integers not exceeding $100$ \u2014 the number written in the bottom left corner of the tile and the number written in the bottom right corner of the tile of the current type.\n\nIt is forbidden to rotate tiles, it is only allowed to place them in the orientation they have in the input.\n\n\n-----Output-----\n\nFor each test case print the answer: \"YES\" (without quotes) if Masha can construct the square of size $m \\times m$ which is a symmetric matrix. Otherwise, print \"NO\" (withtout quotes).\n\n\n-----Example-----\nInput\n6\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\nOutput\nYES\nNO\nYES\nNO\nYES\nYES\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = list(map(int, stdin.readline().strip().split()))\n        tiles = []\n        for _ in range(2*n):\n            line = stdin.readline().strip().split()\n            tiles.append(list(map(int, line)))\n        print(solution2(n, m, tiles))\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        a = [list(map(int, stdin.readline().split())) for _ in range(2 * n)]\n        s = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(2):\n                    s[i][j] += a[i + k * n][j + k * n]\n        if all(x == s[0][i] for i, x in enumerate(s[0][1:])):\n            print('YES')\n        else:\n            print('NO')\n\n\"\"\"\n\nimport sys\n\nsys.stdin = open(\"input.txt\", \"r\")\n\nt = int(input())\n\nfor _ in range(t):\n    n, m = map(int, input().split())\n    a = [list(map(int, input().split())) for _ in range(2 * n)]\n    s = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(2):\n                s[i][j] += a[i + k * n][j + k * n]\n    if all(x == s[0][i] for i, x in enumerate(s[0][1:])):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def create_matrix(matrix: list, row: int, col: int) -> list:\n        for i in range(0, row):\n            matrix[i].append(0)\n            matrix[i].insert(0, 0)\n\n        for i in range(0, col):\n            matrix.append([0])\n            matrix[row].append(0)\n\n        return matrix\n\n    def check_condition(matrix: list, row: int, col: int, i: int, j: int) -> bool:\n        if (i >= 0 and i < row) and (j >= 0 and j < col):\n            if matrix[i][j] == 0:\n                return True\n        return False\n\n    def find_side_parallel(matrix: list, row: int, col: int, i: int, j: int) -> bool:\n        if check_condition(matrix, row, col, i, j):\n            matrix[i][j] = matrix[j][i] = matrix[row - 1][col - 1] = matrix[row - 1][j] = matrix[j][row - 1] = 1\n            return True\n\n        return False\n\n    def mark_possible(matrix: list, row: int, col: int, i: int, j: int) -> bool:\n        if check_condition(matrix, row, col, i, j):\n            return True\n\n        return False\n\n    def mark_unpossible(matrix: list, row: int, col: int, i: int, j: int) -> bool:\n        if check_condition(matrix, row, col, i, j):\n            matrix[i][j] = 0\n\n        return False\n\n    def test_case(case: int, matrix: list, row: int, col: int) -> bool:\n        count = 0\n        for i in range(0, row):\n            for j in range(0, col):\n                if not mark_possible(matrix, row, col, i, j):\n                    return False\n                count += 1\n\n        return True\n\n    def test_possibilities(matrix: list) -> bool:\n        row = len(matrix)\n        col = len(matrix[0])\n\n        for i in range(0, row):\n            for j in range(0, col):\n                if find_side_parallel(matrix, row, col, i, j):\n                    return False\n\n        return True\n\n    t = int(stdin.readline().strip())\n    for _ in range(0, t):\n        n, m = list(map(int, stdin.readline().strip().split()))\n        numbers = []\n        for _ in range(0, 2 * n):\n            numbers.extend(list(map(int, stdin.readline().strip().split())))\n\n        matrix = create_matrix([[] for _ in range(0, n)], n, n)\n        for i in range(0, len(numbers), 2):\n            matrix[numbers[i]][numbers[i + 1]] = 1\n            matrix[numbers[i + 1]][numbers[i]] = 1\n\n        if test_possibilities(matrix):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\nprint(solution(stdin))\n    \n    \n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nHave fun!\n\n\"\"\""
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nThe second test case of the input is shown below. [Image]\n\nMasha cannot construct the square of size $4 \\times 4$, because she can not rotate the tiles.\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n\nMasha can construct the following square of size $2 \\times 2$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline {1} & {2} \\\\ \\hline {2} & {1} \\\\ \\hline {1} & {2} \\\\ \\hline {2} & {1} \\\\ \\hline \\end{array} \\right.$\n\nIn the first test case of the input there are two types of tiles, they are shown on the picture below. [Image] \n\nMasha can construct the following square of size $4 \\times 4$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline {5} & {7} & {8} & {9} \\\\ \\hline 7 & {4} & {9} & {8} \\\\ \\hline 8 & {9} & {5} & {7} \\\\ \\hline 9 & {8} & {7} & {4} \\\\ \\hline \\end{array} \\right.$\n\"\"\"\n\nt = int(input())\n\nwhile t > 0:\n    n, m = map(int, input().split())\n    matrix = []\n    for i in range(n):\n        matrix.append([0]*n)\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = int(input())\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= matrix[j][i]:\n                print('NO')\n                break\n        else:\n            if matrix[i][i]!= 0:\n                print('NO')\n                break\n    else:\n        print('YES')\n    t -= 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '0'\n\n    if n == 2:\n        return '1'\n\n    if n == 3:\n        return '1'\n\n    if n == 4:\n        return '0'\n\n    if n == 5:\n        return '1'\n\n    if n == 6:\n        return '1'\n\n    if n == 7:\n        return '0'\n\n    if n == 8:\n        return '1'\n\n    if n == 9:\n        return '1'\n\n    if n == 10:\n        return '0'\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(min_subset_diff)"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    res = n - abs(sum(map(int, s)))\n    return str(res)"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return '{}'.format(abs(n*(n+1)//2))"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return '0'\n    else:\n        return '1'"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 0 if n == 1 else 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(abs(n - 2*i) for i in range(n // 2)))"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return str(0)\n    m = n // 2\n    s = sum(range(1, n + 1))\n    t = s\n    for i in range(m):\n        s -= i + 1\n        t -= i\n        if s < t:\n            return str(i)\n    return str(n - m)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from math import ceil\n    n = int(stdin)\n    m = int(ceil(n/2))\n    return m"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 1:\n        print(0)\n    else:\n        print(n // 2)\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = int(stdin)\n    p = 0\n    for i in range(1, len(s) + 1):\n        for j in range(i, len(s) + 1):\n            if j - i + 1 == n * 2 and s[i:j] == s[j:j + n * 2]:\n                p += 1\n    return p % 1000000007\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    l = len(s)\n    left, right = s.count('('), s.count(')')\n    x, y = left, right\n    for i in range(l - 1):\n        if left > 0:\n            left -= 1\n            x += 1\n        elif right > 0:\n            right -= 1\n            y += 1\n        else:\n            x = y = 0\n\n    if n % 2!= 0:\n        if x > 0:\n            if y > 0:\n                return (x * y + n - 2 * max(x, y)) % 1000000007\n            else:\n                return n - 2 * min(x, y)\n        else:\n            return 0\n    else:\n        if x > 0 and y > 0:\n            return x * y + 1\n        else:\n            return 1\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    result = 0\n    for i in range(1, len(s) + 1):\n        if s[0:i] == s[i:2 * i]:\n            result += 1\n    return str(result % (10 ** 9 + 7))\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nimport sys\n_ = lambda: sys.stdin.readline().rstrip()"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    s = stdin[2]\n    a = len(s)\n    b = a + n*2\n    if b % 2 == 0:\n        return a\n    else:\n        return a + 1\n    "
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    s = stdin.strip()\n\n    def get_num_regular_brackets(s: str) -> int:\n        result = 0\n        for i in range(len(s) - 1):\n            if s[i] == '(' and s[i + 1] == ')':\n                result += 1\n            elif s[i] == ')' and s[i + 1] == '(':\n                result += 1\n        return result\n\n    return str(get_num_regular_brackets(s) % 1000000007)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = stdin.strip()\n    # n = int(stdin.split()[0])\n    # s = stdin.split()[1]\n    # # return (s.count('()') - s.count('()())') % 1000000007\n    # return (s.count('()') - s.count('()())')\n\n    n = int(stdin)\n    s = stdin[1:-1]\n    n2 = len(s)\n    m = (1 << n2) - 1\n    c = 0\n    for i in range(1, n2 + 1):\n        c += (1 << i) - (1 << (i - 1))\n    for i in range(1, n2 + 1):\n        c = c ^ (1 << (n2 - i + 1))\n    for i in range(n2):\n        c = c ^ (1 << i)\n    for i in range(n2):\n        if s[i] == ')' and s[n2 - i - 1] == '(':\n            c = c ^ (1 << i)\n    return c % 1000000007\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    num = list(str(n))\n    i = 0\n    while True:\n        if num[i] == '9':\n            i += 1\n        elif num[i] == '0':\n            num[i] = '9'\n            num[i-1] = '9'\n            num[i+1] = '0'\n        elif num[i] == '1':\n            num[i] = '9'\n            num[i+1] = '0'\n        else:\n            i += 1\n        if int(''.join(num)) % 25 == 0:\n            break\n\n    moves = i - 1\n    if moves == -1:\n        return \"-1\"\n    return str(moves)"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    # Your code here\n    return str(pow(int(n[0]), 25)) if int(n) % 25 == 0 else '-1'\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return '-1'\n\n    moves = 0\n    while True:\n        n = str(n)\n        if len(n) > 1:\n            if n[0] == '0':\n                n = n[1:]\n            else:\n                n = n[0] + n[1:]\n\n        if n % 25 == 0:\n            return str(moves)\n\n        moves += 1"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = -1\n    count = 0\n    n = int(stdin)\n    for i in range(1, n):\n        if (n % (10 ** i)) == 0:\n            result = i\n    return result\n\nprint(solution(stdin))"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of moves required to obtain a number that is divisible by $25$ or -1 if it is impossible.\"\"\"\n    n = int(stdin)\n    if n % 25 == 0:\n        return 0\n    if n % 25!= 0:\n        return -1\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    # We can't swap a zero to anything because the number will be zero.\n    if int(s[0]) == 0:\n        return -1\n    s = s[1:] + s[:1]\n    # This is the greedy approach.\n    while len(s) % 3!= 0:\n        s = s[1:] + s[:1]\n    # We only swap adjacent digits.\n    return len(s) // 3\n\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 25 == 0:\n        return str(-1)\n    for d in range(10, 1, -1):\n        if n % d == 0:\n            break\n    if d == 1:\n        return str(-1)\n    return str(n // d - 1)"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25!= 0:\n        return -1\n    count = 0\n    while n % 25 == 0:\n        count += 1\n        n = n / 25\n    return count\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    for i in range(10, len(n) + 1):\n        if '0' not in n[i - 10:i]:\n            return str(i - 10)\n    return \"-1\""
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    return str(solutionAux(s, n, [], len(s), 0))\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n\n    def swap_pos(x: int, y: int) -> None:\n        c = s[x], s[y]\n        s[x], s[y] = c\n\n    def swap_pos_helper(x: int, y: int) -> None:\n        swap_pos(x, y)\n        swap_pos_helper(x + 1, y + 1)\n        swap_pos(x + 1, y + 1)\n        swap_pos_helper(x + 1, y)\n        swap_pos(x + 1, y)\n\n    def swap_pos_helper_2(x: int, y: int) -> None:\n        swap_pos(x, y)\n        swap_pos(y, x)\n\n    def swap_pos_helper_3(x: int, y: int) -> None:\n        swap_pos(x, y)\n        swap_pos_helper_3(x + 1, y + 1)\n        swap_pos(x + 1, y + 1)\n        swap_pos_helper_3(x + 1, y)\n        swap_pos(x + 1, y)\n\n    def swap_pos_helper_4(x: int, y: int) -> None:\n        swap_pos(x, y)\n        swap_pos(y, x)\n        swap_pos_helper_4(x + 1, y + 1)\n        swap_pos(x + 1, y + 1)\n        swap_pos_helper_4(x + 1, y)\n        swap_pos(x + 1, y)\n\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '1 1'\n\n    for i in range(1, n - 1):\n        if s[i] > s[i + 1]:\n            swap_pos_helper(i, i + 1)\n        elif s[i] < s[i + 1]:\n            swap_pos_helper_2(i, i + 1)\n        elif s[i] == s[i + 1]:\n            swap_pos_helper_3(i, i + 1)\n    return '1'\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    s = stdin[0:n]\n    def bubble_sort(s):\n        for i in range(len(s)-1,0,-1):\n            for j in range(i):\n                if s[j]>s[j+1]:\n                    s[j],s[j+1]=s[j+1],s[j]\n    cnt=0\n    def helper(s, start, end, cnt):\n        if start==end:\n            return cnt\n        for i in range(start, end):\n            if s[i]>s[start]:\n                s[start], s[i] = s[i], s[start]\n                cnt+=1\n                temp=helper(s, start+1, end, cnt)\n                if temp!=-1:\n                    return temp\n                s[start], s[i] = s[i], s[start]\n                cnt-=1\n        return -1\n    bubble_sort(s)\n    helper(s, 0, n, cnt)\n    print(cnt)\n    return"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    colors = n\n    c = [\" \"]*n\n    for i in range(n):\n        if i+1 < n:\n            if s[i] > s[i+1]:\n                c[i+1] = c[i]\n                c[i] = s[i]\n                colors -= 1\n        if i+2 < n:\n            if s[i] > s[i+2]:\n                c[i+2] = c[i]\n                c[i] = s[i]\n                colors -= 1\n    return str(colors) + \"\\n\" + \"\".join(c)\n\nassert(solution(\"abacbecfd\") == \"2\\n\" + \"1 1 2 1 2 1 2 1 2\")\nassert(solution(\"aaabbcbb\") == \"2\\n\" + \"1 2 1 2 1 2 1 1\")\nassert(solution(\"abcdedc\") == \"3\\n\" + \"1 1 1 1 1 1 2 3\")\nassert(solution(\"abcde\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"abcdee\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"abcdef\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"abcef\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"abceg\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"abceh\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"abce\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"ab\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"\") == \"0\\n\")\nassert(solution(\"a\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == \"1\\n\" + \"1 1 1 1 1\")\nassert(solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def color(s: str, c: List[int]) -> bool:\n        for i in range(len(s) - 1):\n            if s[i]!= s[i + 1]:\n                if s[i] == s[i + 1]:\n                    return False\n                else:\n                    if c[i]!= c[i + 1]:\n                        return False\n        return True\n\n    def swap(s: str, i: int, j: int) -> None:\n        t = s[i]\n        s[i] = s[j]\n        s[j] = t\n\n    n = int(stdin)\n    s = stdin.strip()\n    c = [0] * n\n    c[0] = 1\n    for i in range(1, n):\n        if s[i - 1] == s[i]:\n            c[i] = c[i - 1]\n        else:\n            c[i] = c[i - 1] + 1\n    res = n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if s[j - 1]!= s[j] and c[i] > 1:\n                if c[j - 1] == c[j]:\n                    res = min(res, c[i] + c[j - 1])\n                    swap(s, j - 1, j)\n    print(res)\n    for i in range(n):\n        print(c[i], end=\" \")\n    print()\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    colors = [0] * n\n    res = 0\n\n    for i in range(n):\n        if colors[i] == 0:\n            colors[i] = 1\n            for j in range(i + 1, n):\n                if colors[j] == 0:\n                    if s[i] > s[j]:\n                        colors[j] = 1\n                    else:\n                        colors[i] = 1\n                        break\n\n            res = max(res, colors.count(1))\n\n    return str(res) + '\\n' +''.join(str(x) for x in colors)\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n@do_cprofile\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n    res = solve(n, s)\n    return res\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n + 1]\n    m = int(stdin)\n    colors = stdin[n + 1:n + m + 1]\n    cnt = []\n    cnt.append(0)\n    for c in colors:\n        cnt.append(cnt[-1] + 1)\n    if cnt[-1] == 1:\n        return str(1)\n    cnt = [str(c) for c in cnt]\n    cnt = \" \".join(cnt)\n    return cnt\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    for s in strings:\n        if all(s[i:j] in strings for i in range(len(s)) for j in range(i+1, len(s)+1)):\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    pass\n\n\n-----\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    stdin = stdin[1:n+1]\n    strings = stdin[:]\n    if n == len(strings):\n        return \"YES\"\n    for i in range(n):\n        for j in range(i+1,n):\n            if strings[i] in strings[j]:\n                strings[j] = strings[i]\n    if n == len(strings):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\n'''\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    strs = [x for x in stdin.split('\\n')]\n    for i,s in enumerate(strs):\n        strs[i] = sorted(s)\n    return 'YES' if set(strs[0])==set(strs[1])==set(strs[2]) else 'NO'\n\nimport sys\nlines = sys.stdin.readlines()\nprint(solution(lines[0]))\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline().strip())\n    strings = []\n    for _ in range(num):\n        strings.append(stdin.readline().strip())\n    strings = list(set(strings))\n    strings.sort()\n    ans = []\n    for string in strings:\n        ans.append(string)\n    return \"YES\" if strings == ans else \"NO\"\n\n\nassert(solution(io.StringIO(\n    \"5\\n\"\n    \"a\\n\"\n    \"aba\\n\"\n    \"abacaba\\n\"\n    \"ba\\n\"\n    \"aba\\n\"\n)) == \"YES\\n\"\n\nassert(solution(io.StringIO(\n    \"5\\n\"\n    \"a\\n\"\n    \"abacaba\\n\"\n    \"ba\\n\"\n    \"aba\\n\"\n)) == \"NO\\n\"\n\nassert(solution(io.StringIO(\n    \"3\\n\"\n    \"qwerty\\n\"\n    \"qwerty\\n\"\n    \"qwerty\\n\"\n)) == \"YES\\n\"\n\nassert(solution(io.StringIO(\n    \"3\\n\"\n    \"qwerty\\n\"\n    \"qwerty\\n\"\n    \"qwerty\\n\"\n)) == \"NO\\n\"\n\nassert(solution(io.StringIO(\n    \"3\\n\"\n    \"abacaba\\n\"\n    \"ba\\n\"\n    \"aba\\n\"\n)) == \"NO\\n\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    strings = []\n\n    for _ in range(n):\n        strings.append(stdin)\n\n    return \"YES\" if reorder_strings(strings) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print('YES' if is_permutation_diff(stdin.strip()) else 'NO')\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split(' ')))\n\nassert(solution('') == '')\nassert(solution('1') == '1')\nassert(solution('1 2 3') == '1')\nassert(solution('1 2 3 4 5 6') == '5')\nassert(solution('1 2 3 4 5 6 7') == '0')\nassert(solution('1 2 3 4 5 6 7 8 9') == '1')\nassert(solution('1 2 3 4 5 6 7 8 9 10') == '1')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12') == '3')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '4')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24') == '5')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26') == '6')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31') == '7')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33') == '8')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34') == '9')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36') == '10')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39') == '11')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41') == '12')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43') == '13')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44') == '14')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45') == '15')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48') == '16')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49') == '17')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51') == '18')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52') == '19')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53') == '20')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54') == '21')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55') == '22')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56') == '23')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57') == '24')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58') == '25')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59') == '26')\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(n) for n in stdin.split())\n    a = [int(n) for n in stdin.split()]\n    count = 0\n    left, right = 0, len(a)-1\n    while left < right:\n        if a[left] > k:\n            left += 1\n        elif a[right] > k:\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n            count += 1\n    return str(count)\n\n\n\nprint(solution(\"8 4\"))\nprint(solution(\"5 2\"))\nprint(solution(\"5 100\"))\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    i = 0\n    while i < n:\n        if a[i] <= k:\n            break\n        i += 1\n    print(n - i)\n    return ''"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_greater_than_k(x: int, k: int) -> bool:\n        return x > k\n\n    def solve_problem(i: int, k: int, end: int) -> int:\n        if i == end:\n            return 0\n\n        if is_greater_than_k(a[i], k):\n            return 0\n\n        left = solve_problem(i + 1, k, end)\n        right = solve_problem(i + 1, k, end)\n        if left > right:\n            return left + 1\n        else:\n            return right + 1\n\n    n, k = (int(i) for i in stdin.strip().split())\n    a = list(int(i) for i in stdin.strip().split())\n\n    return solve_problem(0, k, n)\n\n\nprint(solution(stdin))"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n\n    solved_problems = 0\n\n    for i in range(n):\n        if i < n - 1:\n            if k < a[i]:\n                break\n        solved_problems += 1\n\n    return solved_problems\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    start = 0\n    end = n - 1\n    solved = 0\n    while start < end:\n        if p[start] > k:\n            end = start\n            solved += 1\n        elif p[end] > k:\n            start = end\n            solved += 1\n        else:\n            start += 1\n            end -= 1\n    return str(solved)"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    a = list(map(int, stdin.strip().split()))\n    result = 0\n    for i in range(n):\n        if i % 2:\n            a.append(a.pop(0))\n        else:\n            a.insert(0, a.pop())\n        if a[0] > k:\n            break\n        result += 1\n    print(result)\n    return result\n\n\nsolution(\"8 4\\n4 2 3 1 5 1 6 4\")\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_problems, skill = [int(i) for i in stdin.split()]\n    probs = [int(i) for i in stdin.split()]\n    count = 0\n    i = 0\n    while i < num_problems:\n        if probs[0] >= skill:\n            probs.pop(0)\n            count += 1\n        elif probs[-1] >= skill:\n            probs.pop(-1)\n            count += 1\n        else:\n            if probs[i] > skill:\n                probs.pop(i)\n                count += 1\n            else:\n                i += 1\n    return count\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a*b)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return (a + b) * 2 - 2"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    if (a + b) % 2!= 0:\n        return '0'\n\n    return str(a + b)\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    print(min(a, b) * 4)\n\nassert(solution(input()) == result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if (m + n) % 2 == 0:\n        return (m + n) // 2\n    else:\n        return (m + n) // 2 + 1\n\n\n\n\"\"\"\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    if m == 0 and n == 0:\n        return 0\n    if m == 0:\n        return n * 2\n    if n == 0:\n        return m * 2\n    return m * 2 + n * 2\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(n) for n in stdin.split()]\n    return solve(*inputs)\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(x) for x in stdin.split())\n    return str(min(a * b, (a + b) * (a - b)))"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(x) for x in stdin.split())\n    return str(2 * (a + b) + (a + b - 1) * min(a, b))"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    n = len(s)\n    count = [0] * n\n\n    for i in range(n):\n        if s[i] == s[i - 1]:\n            count[i] = 1\n        else:\n            count[i] = 0\n\n    swaps = 0\n    for i in range(n - 1):\n        if count[i] == count[i + 1]:\n            count[i] += 1\n            count[i + 1] += 1\n            swaps += 1\n        if count[i]!= count[i + 1]:\n            if count[i] == 1:\n                count[i] += 1\n                count[i + 1] -= 1\n                swaps += 1\n            elif count[i + 1] == 1:\n                count[i + 1] += 1\n                count[i] -= 1\n                swaps += 1\n\n    if count[-1] == 1 and count[-2] == 1:\n        swaps += 1\n\n    if not swaps:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    sorted_s = sorted(s)\n    if sorted_s!= list(s):\n        return \"NO\"\n    colored_s = [0] * n\n    swaps_count = 0\n    for i in range(n):\n        if s[i]!= sorted_s[i]:\n            colored_s[i] = 1\n            for j in range(i + 1, n):\n                if s[j]!= sorted_s[i] and s[j]!= sorted_s[j]:\n                    swaps_count += 1\n                    colored_s[j] = 1\n                    break\n    return \"YES\" if swaps_count == 0 else \"YES {}\".format(colored_s)\n\nassert(solution(io.StringIO(\"9\\nabacbecfd\")) == \"YES\\n01010101\")\nassert(solution(io.StringIO(\"8\\naaabbcbb\")) == \"YES\\n01011011\")\nassert(solution(io.StringIO(\"7\\nabcdedc\")) == \"NO\")\nassert(solution(io.StringIO(\"5\\nabcde\")) == \"YES\\n00000\")\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n < 1 or n > 200:\n        return \"NO\"\n\n    s = stdin.strip()\n\n    sorted_string = ''.join(sorted(s))\n    if sorted_string == s:\n        return \"YES\"\n\n    for i in range(n - 1):\n        s[i], s[i + 1] = s[i + 1], s[i]\n\n        sorted_string = ''.join(sorted(s))\n        if sorted_string == s:\n            return \"YES\"\n\n        s[i], s[i + 1] = s[i + 1], s[i]\n\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    sorted_s = \"\".join(sorted(s))\n    if sorted_s!= s:\n        return \"NO\"\n    return \"YES\" + \"\".join([\"0\" if c == \"a\" else \"1\" for c in s])\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if is_sorted(s):\n        return \"YES\"\n\n    for i in range(n):\n        color = [0] * n\n        if is_sorted(s):\n            return \"YES\"\n        for j in range(i, n):\n            if s[j]!= s[i]:\n                color[j] = 1 - color[i]\n                s = s[:i] + s[j] + s[i + 1:j] + s[i] + s[j + 1:]\n                if is_sorted(s):\n                    return \"YES\"\n                s = s[:i] + str(1 - color[i]) + s[i + 1:j] + str(color[j]) + s[j + 1:]\n\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    l = len(s)\n    # check if it is possible to sort the string by coloring\n    if not (sorted(s) == list(s)):\n        print(\"NO\")\n        return\n\n    # check if it is possible to color the string\n    if l == 1:\n        if s == \"1\":\n            print(\"YES\")\n            print(\"0\")\n            return\n\n    # create the result list\n    res = [0] * l\n\n    # check if it is possible to color the string\n    if l < 3:\n        print(\"NO\")\n        return\n\n    # find the initial state of colors\n    col = [0] * l\n    for i in range(l):\n        if s[i] == \"1\":\n            col[i] = 1\n            res[i] = 1\n\n    # for every two characters to swap, check if it is possible to color the string\n    for i in range(l - 1):\n        for j in range(i + 1, l):\n            if (s[i]!= s[j] and col[i]!= col[j]) or (s[i] == s[j] and col[i] == col[j]):\n                # swap them\n                s[i], s[j] = s[j], s[i]\n                res[i], res[j] = res[j], res[i]\n                col[i], col[j] = col[j], col[i]\n                # check if the string is sorted now\n                if (sorted(s) == list(s)):\n                    print(\"YES\")\n                    print(\"\".join(map(str, res)))\n                    return\n\n                # swap them back\n                s[i], s[j] = s[j], s[i]\n                res[i], res[j] = res[j], res[i]\n                col[i], col[j] = col[j], col[i]\n    print(\"NO\")\n    return\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nimport sys\nassert(sorted(sys.stdin.readline().strip()) == sorted(solution(sys.stdin.readline().strip())))\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    for i in range(n):\n        if not is_sorted(s):\n            return \"NO\"\n        s = swap(s, i, i + 1)\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if not is_possible(n, s):\n        return \"NO\"\n    return \"YES\\n\" + format_array(s)\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    coloring = [0] * n\n    for i in range(n):\n        if s[i] == s[i - 1]:\n            coloring[i] = 1 - coloring[i - 1]\n    for i in range(n - 1, 0, -1):\n        if s[i] == s[i - 1]:\n            coloring[i - 1] = 1 - coloring[i - 1]\n    for c in coloring:\n        if c!= 0:\n            print(1)\n            print(*coloring, sep=\"\")\n            return\n    print(\"NO\")\n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    return str(min(i for i in range(A, B, -1) if i % 2 == 0))"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    price, tax = stdin.strip().split(' ')\n    price = int(price)\n    tax = float(tax)\n\n    if price > 0:\n        if tax == 8:\n            return f\"{int(price * 0.08):d}\"\n        if tax == 10:\n            return f\"{int(price * 0.1):d}\"\n        else:\n            return f\"{int(price):d}\"\n    else:\n        return f\"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.strip().split(' ')\n    A, B = int(A), int(B)\n\n    ans = -1\n\n    for price in range(A, B + 1):\n        if price % 5 == 0:\n            ans = price\n\n    if ans == -1:\n        print(-1)\n    else:\n        print(ans)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(s) for s in stdin.split()]\n    for price in range(max(A, B), A + B):\n        consumption_tax = price * (0.08 if price < 25 else 0.1)\n        tax = round(price * 0.1)\n        if consumption_tax == tax:\n            return str(price)\n    return \"-1\""
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the price of a product before tax,\n    such that, when the consumption tax rate is 8 percent\n    and 10 percent, the amount of consumption tax\n    is A yen and B yen, respectively.\n    (Yen is the currency of Japan.)\n    (Yen is the currency of Japan.)\n    \"\"\"\n    A, B = [int(x) for x in stdin.split()]\n    if A > B:\n        A, B = B, A\n    while (A <= B):\n        if 0.08 * A < 10:\n            return str(A)\n        A += 1\n    return '-1'"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A - 2, 0) + min(B - 2, 0))\n\nprint(solution(input()))\n\"\"\"\n\nfrom math import ceil, floor\n\ndef"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(max(i for i in range(1, max(a, b)) if max(a, b) % i == 0 and max(a, b) // i <= 100))\n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for price in range(A, B + 1):\n        a = price * 0.08\n        b = price * 0.1\n        if a == b:\n            return str(price)\n    return '-1'"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * 8.0 / 100 <= b:\n        return str(a)\n    elif b * 10.0 / 100 <= a:\n        return str(a)\n    else:\n        return '-1'"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) // int(b) * int(b))"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    if (k * n) % (k - 1)!= 0:\n        print(\"NO\")\n        return\n\n    a = [0] * k\n    a[0] = n\n    a[1] = a[0] - 1\n\n    for i in range(2, k):\n        a[i] = (2 * a[i - 1] - a[i - 2]) % (i + 1)\n\n    print(\"YES\")\n    print(\" \".join([str(i) for i in a]))"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n <= 1:\n        return 'NO'\n    if k <= 1:\n        return 'YES'\n    arr = [0] * k\n    ans = []\n    for i in range(k):\n        arr[i] = i + 1\n        if i == 0:\n            ans.append(arr[i])\n        else:\n            if arr[i - 1] == 1:\n                ans.append(arr[i] + arr[i - 1])\n            else:\n                ans.append(arr[i])\n    return 'YES' + '\\n' +''.join(str(x) for x in ans)"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _n, _k = map(int, stdin.split())\n    _a = [0 for _ in range(_k)]\n\n    _a[0] = _n\n\n    for _i in range(1, _k):\n        if _a[_i - 1] < _n:\n            _a[_i] = _n - _i\n        else:\n            _a[_i] = 2\n    return \"YES\\n\" + \" \".join([str(_a[_i]) for _i in range(1, _k)])"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    max_a = 0\n    max_sum = 0\n    for i in range(1, k):\n        max_sum += i * 2\n        max_a = max(max_a, i)\n    if n > max_sum:\n        return 'NO'\n    return 'YES' + '\\n' +''.join(map(str, range(1, k + 1)))"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n    if n < k:\n        return 'NO'\n    return 'YES\\n' +''.join(map(str, n * [1] + [1] * (k - n)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= 1 or n > 10 ** 9 or k < 1 or k > 10 ** 5:\n        return \"NO\"\n    \n    return \"YES\\n\" + \" \".join(map(str, [i for i in range(1, k + 1)]))"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split(\" \")]\n    return \"YES\" if train(inputs[0], inputs[1]) else \"NO\"\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n    n = int(stdin)\n\n    if n == k or k == 0 or n < 1:\n        return \"NO\"\n\n    max_limit = n / k\n    if max_limit * k!= n:\n        max_limit += 1\n\n    a = [0] * k\n\n    for i in range(max_limit):\n        a[i % k] += 1\n\n    for i in range(k):\n        if a[i] < i + 1:\n            return \"NO\"\n    return \"YES\" + ''.join(map(str, a))\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into two lines.\n    n, k = list(map(int, stdin.split(' ')))\n\n    # Find the possible arrays.\n    arrays = [n] * k\n    # arr = []\n    for _ in range(k - 1):\n        new_array = []\n        for i in range(k):\n            new_array.append(arrays[i] + i + 1)\n        arrays = new_array\n        # arr.append(arrays)\n    print(arrays)\n    # Remove duplicate arrays.\n    # for i in range(k - 1):\n    #     for j in range(i + 1, k):\n    #         if arrays[i] == arrays[j]:\n    #             arrays[j] = None\n    #         # elif i > 0 and arrays[i] == arrays[i - 1]:\n    #         #     arrays[i - 1] = None\n    #         # elif i < k - 1 and arrays[i] == arrays[i + 1]:\n    #         #     arrays[i + 1] = None\n    #         # elif i < k - 2 and arrays[i] == arrays[i + 2]:\n    #         #     arrays[i + 2] = None\n\n    # Check the arrays.\n    for array in arrays:\n        if array is None:\n            return 'NO'\n        elif array > n:\n            return 'NO'\n\n    # Print the arrays.\n    for array in arrays:\n        print(array, end=' ')\n    print()\n    return 'YES'\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"YES\"\n\n    if n > k:\n        return \"NO\"\n\n    first_day_problems = n\n    for i in range(2, k + 1):\n        first_day_problems += (i + 1) * i // 2\n\n    if first_day_problems < n:\n        return \"NO\"\n\n    max_solutions = first_day_problems\n    for i in range(2, k):\n        max_solutions = min(max_solutions, first_day_problems - i + 1)\n\n    if max_solutions < n:\n        return \"NO\"\n\n    return \"YES\"\n\nprint(solution(stdin.readline().strip()))\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4\n   ... 4 6\n   ... 10 -2\n   ... 8 -1''')\n    3\n    >>> solution('''5 20\n   ... 45 -6\n   ... 34 -15\n   ... 10 34\n   ... 1 27\n   ... 40 -45''')\n    5\n    \"\"\"\n    n, rating = (int(s) for s in stdin.split())\n    projects = [tuple(int(s) for s in line.split()) for line in stdin.splitlines()[1:]]\n    projects = sorted(projects, key=lambda x: x[0] - x[1], reverse=True)\n    size = 0\n    for i in range(len(projects)):\n        if rating - projects[i][1] >= 0:\n            rating -= projects[i][1]\n            size += 1\n        else:\n            break\n    return str(size)\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    project_list = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    ratings = [0] * (r + 1)\n    for project in project_list:\n        ratings[project[1]] += project[0]\n\n    res = 0\n    for i in range(r):\n        if ratings[i] > 0:\n            res += 1\n        ratings[i + 1] += ratings[i]\n\n    return str(res)"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = [map(int, stdin.split()) for _ in range(n)]\n    s = {0: 1}\n    for _, b in projects:\n        s[b] = max(s.get(b + 1, 0), s.get(b, 0)) + 1\n    return str(max(s.values()))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, rating = map(int, stdin.split())\n    projects = list()\n    for _ in range(n):\n        rating_change, min_rating = map(int, stdin.split())\n        projects.append((rating_change, min_rating))\n    projects = sorted(projects, key = lambda x: x[0] * -1)\n    max_size = 0\n    for i, (_, min_rating) in enumerate(projects):\n        current_size = i + 1\n        if rating >= min_rating:\n            max_size = max(max_size, current_size)\n    return str(max_size)\n\nassert(solution(\"3 4\") == \"3\")\nassert(solution(\"5 20\") == \"5\")\nassert(solution(\"3 2\") == \"3\")\nassert(solution(\"1 2\") == \"1\")\nassert(solution(\"1 2 3\") == \"2\")\nassert(solution(\"1 2 3 4\") == \"3\")\nassert(solution(\"1 2 3 4 5\") == \"4\")\nassert(solution(\"1 2 3 4 5 6\") == \"5\")\nassert(solution(\"1 2 3 4 5 6 7\") == \"6\")\nassert(solution(\"1 2 3 4 5 6 7 8\") == \"7\")\nassert(solution(\"1 2 3 4 5 6 7 8 9\") == \"8\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10\") == \"9\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11\") == \"10\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13\") == \"12\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14\") == \"13\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\") == \"14\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\") == \"15\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\") == \"16\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\") == \"17\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"18\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") == \"19\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\") == \"20\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\") == \"21\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\") == \"22\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\") == \"23\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\") == \"24\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\") == \"25\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\") == \"26\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\") == \"27\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\") == \"28\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\") == \"29\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\") == \"30\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\") == \"31\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\") == \"32\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\") == \"33\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\") == \"34\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\") == \"35\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\") == \"36\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\") == \"37\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\") == \"38\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\") == \"39\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\") == \"40\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    s = 0\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        a[i] -= r\n        s += a[i]\n        if s >= 0:\n            b[i] = a[i]\n        else:\n            b[i] = 0\n    r = sorted(b)\n    r.reverse()\n    rs = 0\n    for i in range(n):\n        rs += r[i]\n        if rs >= 0:\n            break\n    return str(i)\n\n\nimport sys"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    ratings = [int(x) for x in stdin.split()]\n    # ratings = []\n    # for i in range(n):\n    #     a, b = [int(x) for x in stdin.split()]\n    #     ratings.append((a, b))\n\n    ratings = sorted(ratings, reverse=True)\n    max_size = 0\n\n    for a, b in ratings:\n        max_size += (a + r) // b\n        r += a\n\n    return max_size\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split(' '))\n    projects = [list(map(int, stdin.split(' '))) for _ in range(n)]\n    projects.sort(key=lambda x: x[0])\n    subset = 0\n    for i in range(n):\n        current_rating = projects[i][1]\n        subset += current_rating\n        if subset > r:\n            return i\n    return n\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = []\n    for _ in range(n):\n        row = [int(x) for x in stdin.readline().split()]\n        matrix.append(row)\n\n    # Find out if all numbers are unique\n    if not all(len(set(row)) == len(row) for row in matrix):\n        print(\"NO\")\n        return\n\n    # Find out if matrix is palindromic\n    matrix = zip(*matrix)\n    if not all(is_palindromic(row) for row in matrix):\n        print(\"NO\")\n        return\n\n    # Find out the matrix\n    matrix = zip(*matrix)\n    for row in matrix:\n        print(\" \".join(str(x) for x in row))\n\n    print(\"YES\")\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    n = int(n)\n    if n < 1 or n > 20:\n        raise ValueError\n    a = stdin.readline().strip()\n    a = [int(i) for i in a.split()]\n    if n ** 2!= len(a):\n        raise ValueError\n    matrix = Matrix(n, n)\n    for i in range(n ** 2):\n        matrix.add(i, a[i])\n    if matrix.is_palindromic():\n        return \"YES\\n\" + matrix.__str__()\n    else:\n        return \"NO\\n\""
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n\nNote that your solution should have exactly one integer as an input.\n\nIf you only read the first integer, then your solution must have exactly one integer as an output.\n\nIf you only read the first two integers, then your solution must have exactly two integers as an output.\n\nIf you only read the first three integers, then your solution must have exactly three integers as an output.\n\nIf you read more than three integers, then your solution must have exactly four integers as an output.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve():\n        from collections import Counter\n        n = int(stdin)\n        if n > 10:\n            return \"NO\"\n\n        rows = n\n        cols = n\n        a = list(map(int, stdin.split()))\n        if rows * cols!= len(a):\n            return \"NO\"\n\n        matrix = [[0] * cols for _ in range(rows)]\n        for i in range(rows):\n            for j in range(cols):\n                matrix[i][j] = a.pop()\n\n        for row in matrix:\n            if len(row)!= len(set(row)):\n                return \"NO\"\n\n        for col in zip(*matrix):\n            if len(col)!= len(set(col)):\n                return \"NO\"\n\n        if is_palin(matrix) is True:\n            return \"YES\"\n\n        return \"NO\"\n    return solve()\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        A = [int(x) for x in stdin.readline().strip().split()]\n        r = 0\n        for i in range(len(A)):\n            if A[i] % 2 == 0:\n                r += 1\n            else:\n                break\n        c = 0\n        for i in range(len(A) - 1, -1, -1):\n            if A[i] % 2 == 0:\n                c += 1\n            else:\n                break\n        if r == len(A) and c == len(A):\n            print('YES')\n            for x in A:\n                print(x, end=\" \")\n            print()\n        else:\n            print('NO')\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    m = stdin.strip()\n    m = [int(x) for x in m.split(' ')]\n\n    # Initialize the matrix\n    matrix = [[0 for x in range(n)] for y in range(n)]\n\n    # fill the matrix\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = m[i * n + j]\n\n    # check if it's palindromic\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= matrix[n - i - 1][n - j - 1]:\n                return \"NO\"\n\n    return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    if n < 1 or n > 20:\n        return \"NO\"\n\n    nums = list(map(int, stdin.readline().strip().split()))\n\n    if len(nums)!= n ** 2:\n        return \"NO\"\n\n    matrix = [[0 for i in range(n)] for i in range(n)]\n\n    for row in range(n):\n        for col in range(n):\n            matrix[row][col] = nums.pop(0)\n\n    if not is_palindromic(matrix):\n        return \"NO\"\n\n    print_matrix(matrix)\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" or \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    r = stdin.split()\n\n    def g(n):\n        return int(r[n])\n\n    r.sort()\n\n    if n == 1:\n        return \"YES\"\n\n    elif n == 2:\n        if g(0) == g(1) and g(0)!= g(2):\n            return \"YES\"\n        elif g(0) == g(1) and g(0) == g(2):\n            return \"NO\"\n        else:\n            return \"NO\"\n\n    elif n == 3:\n        if g(0) == g(1) and g(0) == g(2) and g(0)!= g(3):\n            return \"YES\"\n        elif g(0) == g(1) and g(0) == g(2) and g(0) == g(3):\n            return \"NO\"\n        elif g(0) == g(1) and g(0)!= g(2) and g(0)!= g(3):\n            return \"YES\"\n        elif g(0) == g(1) and g(0)!= g(2) and g(0) == g(3):\n            return \"YES\"\n        elif g(0)!= g(1) and g(0)!= g(2) and g(0) == g(3):\n            return \"YES\"\n        elif g(0)!= g(1) and g(0)!= g(2) and g(0)!= g(3):\n            return \"NO\"\n\n    elif n == 4:\n        if g(0) == g(1) and g(0) == g(2) and g(0) == g(3) and g(0)!= g(4):\n            return \"YES\"\n        elif g(0) == g(1) and g(0) == g(2) and g(0) == g(3) and g(0) == g(4):\n            return \"NO\"\n        elif g(0) == g(1) and g(0)!= g(2) and g(0)!= g(3) and g(0) == g(4):\n            return \"YES\"\n        elif g(0) == g(1) and g(0)!= g(2) and g(0)!= g(3) and g(0)!= g(4):\n            return \"YES\"\n        elif g(0)!= g(1) and g(0)!= g(2) and g(0) == g(3) and g(0) == g(4):\n            return \"YES\"\n        elif g(0)!= g(1) and g(0)!= g(2) and g(0)!= g(3) and g(0)!= g(4):\n            return \"NO\"\n\n    elif n == 5:\n        if g(0) == g(1) and g(0) == g(2) and g(0) == g(3) and g(0) == g(4) and g(0)!= g(5):\n            return \"YES\"\n        elif g(0) == g(1) and g(0) == g(2) and g(0) == g(3) and g(0) == g(4) and g(0) =="
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, r = map(int, stdin.split())\n    projects = [map(int, stdin.split()) for i in range(int(stdin.split()[0]))]\n\n    def canComplete(projects, rating, change):\n        for i in range(len(projects)):\n            if projects[i][0] > rating:\n                return False\n            rating += projects[i][1]\n            rating = max(rating, 0)\n        return True\n\n    result = 'YES'\n    for i in range(len(projects)):\n        if canComplete(projects, r, 0) is False:\n            result = 'NO'\n            break\n        r += projects[i][1]\n        r = max(r, 0)\n\n    return result"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    projects = []\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        projects.append((a, b))\n    projects.sort(key=lambda x: x[0])\n\n    low_rating = r\n    for i in range(n):\n        # print(projects)\n        if low_rating < 0:\n            break\n        if projects[i][0] + low_rating >= 0:\n            low_rating += projects[i][1]\n        else:\n            break\n    if low_rating < 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n__author__ ='sarang'\n\"\"\"\n\nfrom collections import deque\n\nn, r = list(map(int, stdin.readline().split()))\n\nprojects = deque()\n\nfor _ in range(n):\n    a, b = list(map(int, stdin.readline().split()))\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0])\nprojects.reverse()\n\nfor _ in range(n):\n    if sum(p[0] for p in projects) < r:\n        print(\"NO\")\n        break\n    else:\n        print(\"YES\")\n        for p in projects:\n            p[0] += p[1]\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    ratings = [int(x) for x in stdin.split()]\n    ratings_ratios = [ratings[x]/r for x in range(n)]\n    min_ratings = min(ratings_ratios)\n    min_ratings_index = ratings_ratios.index(min_ratings)\n    if min_ratings < 0:\n        return \"NO\"\n    if max(ratings_ratios[min_ratings_index:]) > 0:\n        return \"NO\"\n    print(\"YES\")"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    projects = []\n    for i in range(n):\n        a, b = list(map(int, stdin.split()))\n        projects.append([a, b])\n\n    projects.sort(key=lambda x: x[0])\n    rating = 0\n    for i in range(n):\n        rating += projects[i][1]\n        if rating < 0:\n            print(\"NO\")\n            return\n\n    print(\"YES\")"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split('\\n')\n\n    n, r = list(map(int, stdin[0].split(' ')))\n\n    projects = []\n    for i in range(1, n + 1):\n        projects.append(list(map(int, stdin[i].split(' '))))\n\n    def is_valid(projects: list) -> bool:\n        p_rating, p_change = 0, 0\n        for project in projects:\n            p_rating += project[0]\n            p_change += project[1]\n\n            if p_rating < 0:\n                return False\n\n            p_rating += p_change\n\n        return True\n\n    def is_valid_easy(projects: list) -> bool:\n        p_rating, p_change = 0, 0\n        for project in projects:\n            p_rating += project[0]\n            p_change += project[1]\n\n            if p_rating < 0:\n                return False\n\n            p_rating += p_change\n\n        if p_rating == 0:\n            return True\n        else:\n            return False\n\n    if is_valid_easy(projects) and is_valid(projects):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split(' '))\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split(' '))\n        projects.append((a, b))\n    projects.sort(key=lambda x: x[1])\n    rating = r\n    for a, b in projects:\n        rating += b\n        if rating < 0:\n            break\n    return 'YES' if rating >= 0 else 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.strip().split(' ')]\n    ratings = [int(x) for x in stdin.strip().split(' ')]\n    f_ratings = {}\n    for i in range(len(ratings)):\n        ratings[i] = max(0, ratings[i] - r)\n        if ratings[i] in f_ratings:\n            f_ratings[ratings[i]].append(i + 1)\n        else:\n            f_ratings[ratings[i]] = [i + 1]\n    f_ratings = sorted(f_ratings.items())\n    f_ratings = sorted(f_ratings, key=lambda x: len(x[1]), reverse=True)\n    if len(f_ratings) == 1:\n        return \"YES\" if f_ratings[0][0] > 0 else \"NO\"\n    if len(f_ratings) == 2:\n        if f_ratings[0][0] > 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n    for i in range(1, len(f_ratings) - 1):\n        if f_ratings[i][0] > 0:\n            continue\n        if f_ratings[i + 1][0] > 0:\n            return \"NO\"\n        if f_ratings[i - 1][0] > 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    projects = [int(x) for x in stdin.split()]\n    \n    prices = [x[0] for x in projects]\n    changes = [x[1] for x in projects]\n    \n    prices.sort()\n    changes.sort()\n    \n    p = 0\n    c = 0\n    \n    for i in range(n):\n        if prices[i] + changes[i] >= r:\n            return \"YES\"\n        if prices[i] + changes[i] > r:\n            return \"NO\"\n        p += prices[i]\n        c += changes[i]\n    return \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return ''"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    platforms = list(map(int, stdin.split()))\n    # start with an array of zeros\n    array = [0] * (n + 2)\n    # for each platform, add its length to the array\n    for i in range(1, m + 1):\n        array[platforms[i] + 1] += 1\n        array[platforms[i] + d + 1] += 1\n    # if we can reach the end of the array, we're done\n    if array[n + 1] > 0:\n        print(\"YES\")\n        return \" \".join(map(str, array[1:n + 1]))\n    print(\"NO\")\n\nsolution(input())\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    m = m * 2 + 2\n    a = [0] * m\n    l = 0\n    r = 0\n    for i in range(1, m + 1):\n        if i in c:\n            a[i - 1] = c.index(i) + 1\n            l = max(l, a[i - 1])\n            r = max(r, a[i - 1])\n        else:\n            a[i - 1] = 0\n    if l + 1 == n and r + 1 == n + 1:\n        return \"YES\\n\" + \" \".join(map(str, a[1:-1]))\n    return \"NO\\n\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n\n    if n < 3:\n        return 'NO'\n    if m < 1 or d < 1:\n        return 'NO'\n\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if i == 1 and j == 1:\n                dp[i][j] = 0\n            elif j == 1:\n                dp[i][j] = 1\n            elif j == 2 and c[i - 1] == 1:\n                dp[i][j] = 1\n            elif j > 2 and c[i - 1] == j - 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = 0\n\n    return 'YES' if dp[m][n] == 1 else 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    platforms = list(map(int, stdin.split()))\n    a = [0] * n\n    for i in range(m):\n        if i < m - 1:\n            if platforms[i] + i > n:\n                return \"NO\"\n            else:\n                a[platforms[i] + i - 1] = i + 1\n        else:\n            if platforms[i] + i > n:\n                return \"NO\"\n            else:\n                a[platforms[i] + i - 1] = i + 1\n    return \"YES\\n\" +''.join(str(x) for x in a)\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read first line\n    n, m, d = tuple(int(x) for x in stdin.split(' '))\n\n    # Read second line\n    c = tuple(int(x) for x in stdin.split(' '))\n\n    # Initialize\n    reachable = [0]*(n+2)\n\n    # Define reachable\n    for i in range(len(c)):\n        reachable[c[i]] = i+1\n\n    # Define a mapping\n    mapping = dict()\n    for i in range(1, m+1):\n        mapping[i] = reachable[i]\n\n    # Find all the values\n    x = 0\n    x = findAll(x, c, m, d, reachable, mapping)\n\n    # Check if reachable\n    if x == -1:\n        print('NO')\n    else:\n        print('YES')\n        print(x)\n\n    # Return\n    return\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    a = [0] * n\n    for i in range(m):\n        a[c[i] - 1] = i + 1\n    # build up the sequence\n    p = 0\n    for i in range(n):\n        if a[i]!= 0:\n            p = a[i]\n        if p > i:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nInput:\n7 3 2\n1 2 1\n\nOutput:\nYES\n0 1 0 2 2 0 3 \n\nInput:\n10 1 11\n1\n\nOutput:\nYES\n0 0 0 0 0 0 0 0 0 1 \n\nInput:\n10 1 5\n2\n\nOutput:\nYES\n0 0 0 0 1 1 0 0 0 0 \n\n\"\"\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.strip().split()))\n    c = list(map(int, stdin.strip().split()))\n    a = [0] * (n + 2)\n    for i in range(m):\n        if c[i] > n:\n            continue\n        a[c[i]] = i + 1\n    if a[n + 1] == 0:\n        return \"NO\"\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = 0\n    return \"YES\\n\" + \" \".join(map(str, a))\n\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if s == t:\n        return 0\n    for i in range(len(s) - len(t) + 1):\n        if s[i:len(t) + i] == t:\n            return i\n    return 0\n\nassert(solution(input()) == solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    s = stdin[0]\n    t = stdin[1]\n    return maxlen(s, t)\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    m = len(s)\n    n = len(t)\n    l, r = 0, 0\n    i, j = 0, 0\n    while i < m and j < n:\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            if j == 0:\n                l = max(l, i)\n                i += 1\n            else:\n                j = 0\n    return max(l, r)\n\nassert solution('''bbaba\nbb\n''') == 3\n\nassert solution('''baaba\nab\n''') == 2\n\nassert solution('''abcde\nabcde\n''') == 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    # s = 'bbaba'\n    # t = 'bb'\n    n = len(s)\n    m = len(t)\n    l = m - 1\n    r = n - m\n    while l >= 0:\n        if t[:l + 1] in s:\n            l -= 1\n        else:\n            break\n    while r >= 0:\n        if t[-r:] in s:\n            r -= 1\n        else:\n            break\n    return l + r + 1\n\n\nassert solution('bbaba') == 3\nassert solution('baaba') == 2\nassert solution('abcde') == 0\nassert solution('asdfasdf') == 3\nassert solution('fasd') == 3\nassert solution('asdfasdf') == 0\nassert solution('asdfasdfasdf') == 3\nassert solution('asdfasdfasdfasdf') == 3\nassert solution('bbab') == 2\nassert solution('asdfasdfasdfasdf') == 3\nassert solution('bbabab') == 4\nassert solution('aaaa') == 0\nassert solution('aaaaab') == 1\nassert solution('aaaaabaa') == 2\nassert solution('aaaaabaaabaa') == 4\nassert solution('aaaaabaaabaaabaa') == 5\nassert solution('aaaaabaaabaaabaaabaa') == 5\nassert solution('aaaaabaaabaaabaaabaaabaa') == 5\nassert solution('aaaaabaaabaaabaaabaaabaa') == 5\nassert solution('aaaaabaaabaaabaaabaaabaaabaa') == 5\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return len(s) - len(s.substring(t))\n\n\nassert (solution(input()) == 3)\nassert (solution(input()) == 0)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert (solution(input()) == 3)\nassert (solution(input()) == 2)\nassert"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_subsequence(s: str, t: str) -> bool:\n        i, j = 0, 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)\n\n    s, t = stdin.splitlines()\n\n    l = len(s)\n    while l > 1:\n        if is_subsequence(s, t):\n            break\n        s = s[1:] + s[0]\n        l -= 1\n\n    return l\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0].strip()\n    t = stdin.splitlines()[1].strip()\n    length = len(s)\n    result = 0\n    for i in range(length - len(t) + 1):\n        if s[i:i+len(t)] == t:\n            result = i\n    return result\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 1 or x > 5:\n        return \"Error\"\n    i, j = 0, 0\n    while x > 0:\n        if x - int(x) >= 0.5:\n            i += 1\n        else:\n            j += 1\n        x -= 1\n    return str(i) + \" \" + str(j)"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(str, solve(float(stdin))))\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    solution = [2, 1]\n    for i in range(2, 10):\n        if is_palindromic(str(i) + str(i)):\n            solution.append(i)\n    return''.join(map(str, solution))\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(str(a) for a in solver(stdin))\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The input is a number x = 0.2, 0 < x < 5, with exactly 6 decimal places (0 < x < 5).\n    The output is two integers separated by a single space. Each integer should be between 1 and 10, inclusive.\n    If several solutions exist, output any of them. Solution will exist for all tests.\n    \"\"\"\n    x = float(stdin)\n    a = math.ceil(x)\n    b = math.floor(x)\n    return str(a)+\" \"+str(b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\n\n@pytest.mark.parametrize(\"stdin,expected\", [\n    (\"1.200000\", \"3 2\"),\n    (\"2.572479\", \"10 3\"),\n    (\"4.024922\", \"9 9\"),\n])\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    i = 0\n    while x > 0:\n        i += x % 2\n        x //= 2\n    return '{} {}'.format(i, i - 1)\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(round(1e6 * eval(stdin))))"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d > k * (n - 1) * (n - 2) // 2 or (n - 1) * (n - 2) % 2!= 0:\n        print(\"NO\")\n        return \"\"\n\n    # Connect all vertices at most d degrees in a tree\n    tree = {}\n    edges = []\n    for _ in range(d):\n        v = tuple(map(int, stdin.split()))\n        if v in tree:\n            tree[v].add(v)\n            tree[v].update(tree[v])\n            edges.append(v)\n        else:\n            tree[v] = set([v])\n    # print(tree)\n    # print(edges)\n\n    # Connect all remaining vertices\n    remaining = n - 1\n    for _ in range(d - 1):\n        v = tuple(map(int, stdin.split()))\n        if v in tree:\n            tree[v].add(v)\n            tree[v].update(tree[v])\n            edges.append(v)\n            # print(tree)\n            # print(edges)\n            remaining -= 1\n        else:\n            tree[v] = set([v])\n\n    # print(tree)\n    # print(edges)\n\n    if remaining!= 0:\n        for _ in range(remaining):\n            v = tuple(map(int, stdin.split()))\n            if v in tree:\n                tree[v].add(v)\n                tree[v].update(tree[v])\n                edges.append(v)\n            else:\n                tree[v] = set([v])\n        # print(tree)\n        # print(edges)\n\n    # Check degree of each vertex in tree\n    vertex_degrees = {}\n    for vertex in tree:\n        vertex_degrees[vertex] = len(tree[vertex])\n\n    vertex_degrees = sorted(vertex_degrees.items(), key=lambda x: x[1], reverse=True)\n\n    print(\"YES\")\n    print(len(tree) - 1)\n    for vertex in vertex_degrees:\n        print(vertex[0][0], vertex[0][1])\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    if d * k > (4 * 10 ** 5):\n        return \"NO\"\n\n    def bfs(u):\n        nonlocal parents, visited, edges\n\n        visited[u] = 1\n        for v in edges[u]:\n            if visited[v]:\n                continue\n\n            parents[v].append(u)\n            bfs(v)\n\n    def connect(u, v):\n        nonlocal edges\n\n        if u not in edges:\n            edges[u] = [v]\n        else:\n            edges[u].append(v)\n        if v not in edges:\n            edges[v] = [u]\n        else:\n            edges[v].append(u)\n\n    def find(u):\n        if u == parents[u][0]:\n            return u\n\n        parents[u][0] = find(parents[u][0])\n        return parents[u][0]\n\n    def union(u, v):\n        x = find(u)\n        y = find(v)\n        if x!= y:\n            parents[y].extend(parents[x])\n            del parents[x]\n\n    parents = [[] for _ in range(n + 1)]\n    edges = defaultdict(list)\n    for _ in range(d):\n        u, v = [int(x) for x in stdin.split()]\n        connect(u, v)\n\n    visited = [0] * (n + 1)\n    bfs(1)\n    for u in range(1, n):\n        if visited[u]:\n            continue\n        for v in parents[u]:\n            if find(u)!= find(v):\n                union(u, v)\n\n    if len(parents[n]) > k:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n - 1 <= d <= (4 * 10 ** 5) and k <= (4 * 10 ** 5):\n        nodes = [0] * n\n        edges = [[] for _ in range(n)]\n        for _ in range(d):\n            a, b = map(int, stdin.split())\n            a -= 1\n            b -= 1\n            if a!= b and nodes[a] < nodes[b]:\n                nodes[a], nodes[b] = nodes[b], nodes[a]\n                edges[a].append(b)\n                edges[b].append(a)\n            elif a!= b and nodes[a] == nodes[b]:\n                nodes[a], nodes[b] = nodes[b], nodes[a]\n                edges[a].append(b)\n                edges[b].append(a)\n            else:\n                continue\n        if nodes[0] == 0:\n            return \"NO\"\n        ans = [0]\n        q = [0]\n        v = [False] * n\n        while q:\n            u = q.pop(0)\n            v[u] = True\n            for vv in edges[u]:\n                if not v[vv]:\n                    v[vv] = True\n                    ans.append(vv + 1)\n                    q.append(vv)\n        ans.sort()\n        return \"YES\\n\" + \"\\n\".join(map(str, ans))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = list(map(int, stdin.split()))\n    if (n - 1) % d!= 0:\n        return \"NO\"\n    tree = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = list(map(int, stdin.split()))\n        tree[a].append(b)\n        tree[b].append(a)\n    if (n - 1) % k!= 0:\n        return \"NO\"\n    result = [0] * (n + 1)\n    for node in range(1, n + 1):\n        result[node] = len(tree[node])\n    for i in range(1, n + 1):\n        if result[i] >= d:\n            return \"YES\"\n    return \"NO\"\n\nassert(solution(stdin) == stdin)\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if k < d:\n        return \"NO\"\n    if k >= n - 1:\n        return \"YES\"\n    tree = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        tree[u - 1].append(v - 1)\n        tree[v - 1].append(u - 1)\n    vertex = [0] * n\n    for u in range(n):\n        vertex[u] = len(tree[u])\n    s = [0] * (n + 1)\n    tree_dfs(tree, s, vertex, d, k)\n    return \"YES\" if s[-1] == k else \"NO\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    edges = [[] for _ in range(n)]\n    for _ in range(d):\n        a, b = map(int, stdin.split())\n        edges[a - 1].append(b)\n        edges[b - 1].append(a)\n    return \"NO\" if any(k > d - 1 or len(edges[i]) > k for i in range(n)) else \"YES\""
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n\n    if d * (n - 1) < k * n:\n        return \"NO\"\n    if d == 1:\n        return \"YES\"\n\n    result = list(range(n))\n    result[1] = 0\n\n    for _ in range(d - 2):\n        x = result[random.randint(0, n - 1)]\n        result[x] = 0\n        while result[x]!= 0:\n            x = result[x]\n\n    result[x] = 0\n\n    for _ in range(k - d):\n        x = result[random.randint(0, n - 1)]\n        result[x] = 0\n        while result[x]!= 0:\n            x = result[x]\n\n    result[x] = 0\n\n    for _ in range(n - 1 - d):\n        x = result[random.randint(0, n - 1)]\n        result[x] = 0\n        while result[x]!= 0:\n            x = result[x]\n\n    result[x] = 0\n\n    return \"YES\\n\" + \"\\n\".join(str(x + 1) for x in result[1:])\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    if k < 0 or k > d * 4 or d * 4 < n - 1:\n        return \"NO\"\n\n    graph = [[] for _ in range(n)]\n    for _ in range(d):\n        x, y = [int(x) - 1 for x in stdin.split()]\n        if x == y:\n            continue\n\n        graph[x].append(y)\n        graph[y].append(x)\n\n    vertices = set(range(1, n))\n\n    def degree(vertex: int) -> int:\n        return len(graph[vertex])\n\n    def dfs(vertex: int) -> None:\n        nonlocal vertices\n\n        if vertex in vertices:\n            vertices.remove(vertex)\n            for to in graph[vertex]:\n                dfs(to)\n                degree_diff = degree(vertex) - degree(to)\n                if degree_diff > 0 and degree_diff <= k:\n                    print(vertex, to)\n\n    for vertex in vertices:\n        dfs(vertex)\n\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    if d * k > n * (n - 1):\n        return \"NO\"\n    tree = {}\n    for _ in range(n - 1):\n        u, v = [int(x) for x in stdin.split()]\n        if u in tree:\n            tree[u].add(v)\n        else:\n            tree[u] = {v}\n        if v in tree:\n            tree[v].add(u)\n        else:\n            tree[v] = {u}\n    for u in tree:\n        if len(tree[u]) > k:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if x > a:\n        return bin(x)[2:]\n    elif x == a:\n        return \"0\" * b\n    elif x < a:\n        return \"1\" * b + bin(a - x)[2:]\n    return bin(x)[2:]\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.split()]\n    s = ['0'] * a + ['1'] * b + ['0'] * x\n    return ''.join(s[i] for i in range(len(s) - 1))"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(stdin) for _ in range(3)]\n    \n    ones = 0\n    zeroes = 0\n    \n    lst = []\n    \n    while ones <= x:\n        \n        if ones + zeroes + len(lst) <= x:\n            \n            if ones == x:\n                for i in range(len(lst)):\n                    lst.append(str(0))\n            \n            zeroes += len(lst)\n            \n        elif zeroes == x:\n            for i in range(zeroes):\n                lst.append(str(0))\n            break\n        \n        if zeroes > ones:\n            lst.append(str(0))\n            zeroes -= 1\n        else:\n            lst.append(str(1))\n            ones += 1\n    \n    return \"\".join(lst)\n\nassert(solution(stdin) == \"110100\")\n\n\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    a, b, x = map(int, stdin[0].split(' '))\n    return ''.join(['0' for _ in range(a)] + ['1' for _ in range(b)] + ['0' for _ in range(x)])\n\nassert(solution('2 2 1') == '1100')\nassert(solution('3 3 3') == '101100')\nassert(solution('5 3 6') == '01010100')\nassert(solution('1 1 2') == '01010110')\nassert(solution('1 2 1') == '10101010')\n\n\n\"\"\"\n\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split(\" \")]\n    result = [\"0\"] * a\n    result.extend([\"1\"] * b)\n    result.extend([\"0\"] * x)\n    return \"\".join(result)"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.strip().split())\n    res = '0' * a + '1' * b + '0' * x\n    l = len(res)\n    ans = ''\n    for i in range(l):\n        if res[i] == '1':\n            ans += '0' * (l - i - 1) + '1'\n            break\n    else:\n        ans = '1' * l\n    return ans"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.split(' ')\n    return ''.join(s for s in [s1, s2, s3] if s.count('1') == s.count('0') == int(s3))\n\nassert solution('2 2 1') == '1100'\nassert solution('3 3 3') == '101100'\nassert solution('5 3 6') == '01010100'\n\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.strip().split(' ')]\n    return ''.join(['0' if i < x else '1' for i in range(a + b)])"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('')\n    ''\n    >>> solution('1 1 1')\n    ''\n    '''\n    a, b, x = [int(i) for i in stdin.split(' ')]\n    res = ''\n    for i in range(a):\n        res += '0'\n    for i in range(b):\n        res += '1'\n    for i in range(x):\n        res += '0'\n    for i in range(a + b - x):\n        res += '1'\n    return res\n\nimport sys\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[stdin.find('\"') + 1:stdin.find('\"', stdin.find('\"') + 1)]\n    t = stdin[stdin.find('\"') + 1:stdin.find('\"', stdin.find('\"') + 1)]\n    if s == t:\n        return 'NO'\n    n = int(stdin[:stdin.find('\\n')])\n    res = ''\n    for i in range(n):\n        res += 'c'\n        res += 'a' * (n - i - 1)\n        res += 'b' * (i + 1)\n    return 'YES\\n' + res\n\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    s = input_data[1]\n    t = input_data[2]\n    if n < 3:\n        return \"NO\"\n    if s.count(\"a\")!= n or s.count(\"b\")!= n or s.count(\"c\")!= n:\n        return \"NO\"\n    if t.count(\"a\")!= n or t.count(\"b\")!= n or t.count(\"c\")!= n:\n        return \"NO\"\n    a = set(s)\n    b = set(t)\n    c = set(s + t)\n    res = []\n    for i in range(0, 3 * n):\n        if not (i in a or i in b or i in c):\n            res.append(s[i % n] + t[i % n] + s[(i + 1) % n] + t[(i + 1) % n])\n    if len(res) == 0:\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(res)"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if len(s)!= 2 or len(t)!= 2:\n        return \"NO\"\n    if n > 3:\n        return \"NO\"\n    if s.count('a') > 1 or t.count('a') > 1:\n        return \"NO\"\n    if s.count('b') > 1 or t.count('b') > 1:\n        return \"NO\"\n    if s.count('c') > 1 or t.count('c') > 1:\n        return \"NO\"\n    res = \"\"\n    # append three copies of each element\n    for c in s:\n        res += c + c + c\n    for c in t:\n        res += c + c + c\n    if len(res)!= n * 3:\n        return \"NO\"\n    # check if res does not contain \"ab\", \"ba\" and \"ca\" as substrings\n    for c in range(n):\n        for i in range(n - c):\n            if res[3 * c + i:3 * c + i + 3] == \"ab\":\n                return \"NO\"\n            if res[3 * c + i:3 * c + i + 3] == \"ba\":\n                return \"NO\"\n            if res[3 * c + i:3 * c + i + 3] == \"ca\":\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n < 1 or n > 10 ** 5:\n        return 'NO'\n\n    s = stdin[0:2]\n    t = stdin[2:4]\n    s_exists = False\n    t_exists = False\n\n    for i in range(n // 2):\n        if s[i] == 'a':\n            s_exists = True\n        if t[i] == 'a':\n            t_exists = True\n\n    if s_exists and t_exists:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    return f\"YES\\n{''.join(s[i] * 3 for i in range(n))}\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    s_map = {}\n    t_map = {}\n    for i in s:\n        s_map[i] = 1 if i not in s_map else s_map[i] + 1\n    for i in t:\n        t_map[i] = 1 if i not in t_map else t_map[i] + 1\n    res = \"\"\n    for i in range(3 * n):\n        if i >= n:\n            if s_map.get(res[i - n], 0) == 1 and t_map.get(res[i - n], 0) == 1:\n                res += res[i - n]\n            else:\n                break\n        elif i >= n - 1:\n            if t_map.get(res[i], 0) == 1:\n                res += res[i]\n            else:\n                break\n        else:\n            if s_map.get(res[i], 0) == 1 and t_map.get(res[i], 0) == 1:\n                res += res[i]\n            else:\n                break\n    if len(res) == n * 3:\n        return \"YES\\n\" + res\n    else:\n        return \"NO\\n\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n > 10 or n < 1:\n        return 'NO'\n\n    s = stdin[2:2 + n]\n    t = stdin[2 + n: 2 + 2 * n]\n\n    if 'a' not in s or 'a' not in t or 'b' not in s or 'b' not in t:\n        return 'NO'\n\n    return 'YES'\n\n\nassert solution('') == 'NO'\nassert solution('a') == 'YES'\nassert solution('ab') == 'YES'\nassert solution('abcd') == 'NO'\nassert solution('aa') == 'YES'\nassert solution('aaa') == 'YES'\nassert solution('abc') == 'YES'\nassert solution('abcba') == 'YES'\nassert solution('abcbd') == 'NO'\nassert solution('abcb') == 'NO'\nassert solution('abcd') == 'NO'\nassert solution('abcd') == 'NO'\nassert solution('abcde') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcdef') == 'YES'\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().rstrip()\n    t = stdin.readline().rstrip()\n\n    pass\n\n\n-----\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = stdin.readline().split()\n    if len(p) < n:\n        print(-1)\n        return\n    if len(p) == n:\n        print(' '.join(str(i) for i in p))\n        return\n    p = [int(x) for x in p]\n    ans = [-1] * (n+1)\n    p_len = len(p)\n    for i in range(p_len):\n        ans[p[i]] = i\n    ans[n] = -1\n    for i in range(n+1, p_len):\n        if ans[i] == -1:\n            ans[i] = ans[i-1] + 1\n    print(' '.join(str(x) for x in ans))\n    return\nsolution(stdin)"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n < 3:\n        return '-1'\n    q = list(map(int, stdin.readline().split(' ')))\n    if len(q)!= n - 1:\n        return '-1'\n    p = [0] * (n + 1)\n    q = list(reversed(q))\n    for i in range(n):\n        if p[q[i]] == 0:\n            p[q[i]] = i + 1\n        elif p[q[i]] == i + 1:\n            p[q[i]] = i\n        else:\n            return '-1'\n    return''.join(map(str, p[1:]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = list(map(int, stdin.readline().strip().split(\" \")))\n    q.sort()\n    if q[0] == 1:\n        return \"-1\"\n    else:\n        p = [x - q[i] for i, x in enumerate(q[1:])]\n        return \" \".join(map(str, p))\n\nimport sys"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, q = [int(x) for x in stdin.split()]\n    if n == 1:\n        return str(q)\n    res = [i for i in range(1, n + 1)]\n    for i in range(n - 1):\n        res[i + 1] = q[i] - q[i + 1]\n    return \" \".join([str(x) for x in res])\n"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = list(map(int, stdin.readline().strip().split()))\n    p = []\n    m = len(q) - 1\n    for i in range(m + 1):\n        p.append(q[i + 1] - q[i])\n    for i in range(m):\n        if p[i + 1]!= i + 1:\n            return -1\n    return''.join(map(str, p))\n\nassert solution('''3''') == '''3 1 2 '''\nassert solution('''5''') == '''1 2 3 4 5 '''\nassert solution('''4''') == '''-1'''\nassert solution('''-1''') == '''-1'''\nassert solution('''1 1 1 1''') == '''1 2 3 4 5 '''\nassert solution('''1 1 1 1 1''') == '''1 2 3 4 5 '''\nassert solution('''1 1 1 1 1''') == '''1 2 3 4 5 '''\nassert solution('''1 1 1 1 1 1''') == '''1 2 3 4 5 '''\nassert solution('''4''') == '''-1'''\nassert solution('''4 1 -1''') == '''-1'''\nassert solution('''4 1 2''') == '''-1'''\nassert solution('''4 1 2 3''') == '''-1'''\nassert solution('''4 1 2 -1''') == '''-1'''\nassert solution('''4 1 2 -2''') == '''-1'''\nassert solution('''4 1 2 -3''') == '''-1'''\nassert solution('''4 1 2 -4''') == '''-1'''\nassert solution('''4 1 2 -5''') == '''-1'''\nassert solution('''4 1 2 -6''') == '''-1'''\nassert solution('''4 1 2 -7''') == '''-1'''\nassert solution('''4 1 2 -8''') == '''-1'''\nassert solution('''4 1 2 -9''') == '''-1'''\nassert solution('''4 1 2 -10''') == '''-1'''\nassert solution('''4 1 2 -11''') == '''-1'''\nassert solution('''4 1 2 -12''') == '''-1'''\nassert solution('''4 1 2 -13''') == '''-1'''\nassert solution('''4 1 2 -14''') == '''-1'''\nassert solution('''4 1 2 -15''') == '''-1'''\nassert solution('''4 1 2 -16''') == '''-1'''\nassert solution('''4 1 2 -17''') == '''-1'''\nassert solution('''4 1 2 -18''') == '''-1'''\nassert solution('''4 1 2 -19''') == '''-1'''\nassert solution('''4 1 2 -20''') == '''-1'''\nassert solution('''4 1 2 -21''') == '''-1'''\nassert solution('''4 1 2 -22''') == '''-1'''\nassert solution('''4 1 2 -23''') == '''-1'''\nassert solution('''4 1 2 -24''') == '''-1'''\nassert solution('''4 1 2 -25''') == '''-1'''\nassert solution('''4 1 2 -26''') == '''-1'''\nassert solution('''4 1 2 -27''') == '''-1'''\nassert solution('''4 1 2 -28''') == '''-1'''\nassert solution('''4 1 2 -29''') == '''-1'''\nassert solution('''4 1 2 -30''') == '''-1'''\nassert solution('''4 1 2 -31''') == '''-1'''\nassert solution('''4 1 2 -32''') == '''-1'''\nassert solution('''4 1 2 -33''') == '''-1'''\nassert solution('''4 1 2 -34''') == '''-1'''\nassert solution('''4 1 2 -35''') == '''-1'''\nassert solution('''4 1 2 -36''') == '''-1'''\nassert solution('''4 1 2 -37''') == '''-1'''\nassert solution('''4 1 2 -38''') == '''-1'''\nassert solution('''4 1 2 -39''') == '''-1'''\nassert solution('''4 1 2 -40''') == '''-1'''\nassert solution('''4 1 2 -41''') == '''-1'''\nassert solution('''4 1 2 -42''') == '''-1'''\nassert solution('''4 1 2 -43''') == '''-1'''\nassert solution('''4 1 2 -44''') == '''-1'''\nassert solution('''4 1 2 -45''') == '''-1'''\nassert solution('''4 1 2 -46''') == '''-1'''\nassert solution('''4 1 2 -47''') == '''-1'''\nassert solution('''4 1 2 -48''') == '''-1'''\nassert solution('''4 1 2 -49''') == '''-1'''\nassert solution('''4 1 2 -50''') == '''-1'''\nassert solution('''4 1 2 -51''') == '''-1'''\nassert solution('''4 1 2 -52''') == '''-1'''\nassert solution('''4 1 2 -53''') == '''-1'''\nassert solution('''4 1 2 -54''') == '''-1'''\nassert solution('''4 1 2 -55''') == '''-1'''\nassert solution('''4 1 2 -56''') == '''-1'''\nassert solution('''4 1 2 -57''') == '''-1'''\nassert solution('''4 1 2 -58''') == '''-1'''\nassert solution('''4 1 2 -59''') == '''-1'''\nassert solution('''4 1 2 -60''') == '''-1'''\nassert solution('''4 1 2 -61''') == '''-1'''\nassert solution"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = [int(n) for n in stdin.readline().split()]\n    p = [i for i in range(1, n+1)]\n    for i in range(n-1):\n        p[q[i]] = p[q[i]-1]\n    return \" \".join(map(str, p))"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().strip().split(' ')))\n    p = [i for i in range(1, n+1)]\n    for i in q:\n        p[i-1] = p[p[i-1]-1]\n        p[p[i-1]-1] = i\n    print(*p)\n    return ''"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    array = list(map(int, stdin.readline().strip().split(' ')))\n    q = list(map(int, stdin.readline().strip().split(' ')))\n    if not is_permutation(n, q):\n        return -1\n    permutation = []\n    for i in range(n):\n        permutation.append(array[(q[i]-1)])\n    return''.join(str(i) for i in permutation)\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = [int(q_i) for q_i in stdin.strip().split()]\n    q = [q[i] - q[i - 1] for i in range(1, n)]\n    p = [0] * n\n    perm(q, p, 0, n - 1)\n    return \" \".join([str(p[i]) for i in range(n)])\n\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n\n    p_inv = [0] * (n + 1)\n    for i in range(1, n + 1):\n        p_inv[p[i - 1]] = i\n    \n    inv = [0] * (n + 1)\n    for i in range(1, n + 1):\n        inv[p_inv[i]] = i\n\n    for i in range(m):\n        q[i] = p_inv[q[i]]\n    return''.join(map(str, q))\n\n\nassert(solution('''3\n-2 1\n''') == '3 1 2')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''4\n-1 2 2\n''') == '-1')\nassert(solution('''7\n3 4 1 4 3 1 2\n''') == '3 1 2 4 5')\nassert(solution('''2\n2 1\n''') == '-1')\nassert(solution('''1\n1\n''') == '-1')\nassert(solution('''2\n1\n1\n''') == '1')\nassert(solution('''3\n1 2 3\n''') == '1 2 3')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''7\n3 4 1 4 3 1 2\n''') == '1 2 3 4 5 6 7')\nassert(solution('''9\n2 1 1 2 1 1 3 1 2 1\n''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''3\n1 1 1\n''') == '1 2 3')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''4\n1 1 1 1\n''') == '-1')\nassert(solution('''7\n3 4 1 4 3 1 2\n''') == '3 1 2 4 5 6 7')\nassert(solution('''6\n1 1 1 1 1 1\n''') == '1 2 3 4 5 6')\nassert(solution('''2\n2 1\n''') == '-1')\nassert(solution('''1\n1\n''') == '-1')\nassert(solution('''3\n1 2 3\n''') == '1 2 3')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''7\n3 4 1 4 3 1 2\n''') == '1 2 3 4 5 6 7')\nassert(solution('''6\n1 1 1 1 1 1\n''') == '1 2 3 4 5 6')\nassert(solution('''9\n2 1 1 2 1 1 3 1 2 1\n''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''3\n1 1 1\n''') == '1 2 3')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''4\n1 1 1 1\n''') == '-1')\nassert(solution('''7\n3 4 1 4 3 1 2\n''') == '3 1 2 4 5 6 7')\nassert(solution('''6\n1 1 1 1 1 1\n''') == '1 2 3 4 5 6')\nassert(solution('''9\n2 1 1 2 1 1 3 1 2 1\n''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''3\n1 1 1\n''') == '1 2 3')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''4\n1 1 1 1\n''') == '-1')\nassert(solution('''7\n3 4 1 4 3 1 2\n''') == '3 1 2 4 5 6 7')\nassert(solution('''6\n1 1 1 1 1 1\n''') == '1 2 3 4 5 6')\nassert(solution('''9\n2 1 1 2 1 1 3 1 2 1\n''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''3\n1 1 1\n''') == '1 2 3')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''4\n1 1 1 1\n''') == '-1')\nassert(solution('''7\n3 4 1 4 3 1 2\n''') == '3 1 2 4 5 6 7')\nassert(solution('''6\n1 1 1 1 1 1\n''') == '1 2 3 4 5 6')\nassert(solution('''9\n2 1 1 2 1 1 3 1 2 1\n''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''3\n1 1 1\n''') == '1 2 3')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''4\n1 1 1 1\n''') == '-1')\nassert(solution('''7\n3 4 1 4 3 1 2\n''') == '3 1 2 4 5 6 7')\nassert(solution('''6\n1 1 1 1 1 1\n''') == '1 2 3 4 5 6')\nassert(solution('''9\n2 1 1 2 1 1 3 1 2 1\n''') == '1 2 3 4 5 6 7 8 9')\nassert(solution('''5\n1 1 1 1 1\n''') == '1 2 3 4 5')\nassert(solution('''"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = sorted(map(int, stdin.readline().split()))\n    ans = x[-1] - x[0]\n    if n > 2:\n        m = n // 2\n        ans += m * (x[-1] - x[m])\n    return ans\n\nprint(solution('2'))\nprint(solution('3'))\nprint(solution('5'))\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split(' ')))\n    result = 0\n    for i in range(0, n):\n        if x[i] < n - 1:\n            x[i] += 1\n            result += 1\n        else:\n            x[i] -= 1\n            result += 2\n    print(result)"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    x = [int(x) for x in stdin.split()]\n\n    # initial value\n    x.sort()\n    value = 0\n\n    for i in range(len(x)):\n        if i % 2 == 0:\n            value += x[i]\n        else:\n            value += x[i] - 1\n\n    return str(value)"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    chips = [int(x) for x in stdin.readline().split()]\n\n    n_left = 0\n    n_right = 0\n    for i, x in enumerate(chips):\n        if i % 2 == 0:\n            if chips[i - 1] > x:\n                n_left += 1\n            else:\n                n_right += 1\n        else:\n            if chips[i - 1] > x:\n                n_right += 1\n            else:\n                n_left += 1\n\n    return str(min(n_left, n_right))"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The example test(str) cases:\n    >>> solution('2\\n1 2')\n    '1'\n    >>> solution('5\\n2 2 2 3 3')\n    '2'\n    '''\n\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n\n    count = 0\n    for i in range(n):\n        cur = arr[i]\n        while cur!= i:\n            if cur > i:\n                cur -= 2\n            else:\n                cur += 2\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = [int(x) for x in stdin.readline().split()]\n    return str(min(sum(i % 2 for i in x[x.index(k):]) for k in x))\n\nprint(solution(''))\n'''\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split(' ')))\n    x.sort()\n    k = len(x)\n    if k == 1:\n        return '1'\n\n    def move(i, j, t):\n        if i < j:\n            x[i] += t\n            x[j] -= t\n        elif i == j:\n            x[i] += t\n        else:\n            x[i] -= t\n            x[j] += t\n\n    total_coins = 0\n    move(0, k - 1, 1)\n    for i in range(k - 1):\n        move(i + 1, k - 1, 1)\n    for i in range(k - 1):\n        move(i + 1, i, -1)\n\n    for i in x:\n        total_coins += i\n\n    return str(total_coins)"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = list(map(int, stdin.readline().split()))\n    c.sort()\n    return str(c.count(c[0]))\n\n\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return ''.join(map(str, [sum([int(stdin.readline().strip()) for _ in range(i+1)]) for i in range(n)][::-1]))"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    # If N is not divisible by 4, then we can move to (N, N/2)\n    if N % 4!= 0:\n        print(N * (N // 2) + (N // 2))\n    else:\n        # Else we can move to (N/4, N/4)\n        print((N // 2) * (N // 4))"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    i, j = 1, 1\n    steps = 0\n    while i * j < n:\n        if i * (j + 1) == n:\n            return str(steps + 1)\n        if j * (i + 1) == n:\n            return str(steps + 1)\n\n        if i * j > n:\n            i -= 1\n            steps += 1\n        if i * (j + 1) > n:\n            j += 1\n            steps += 1\n        if j * (i + 1) > n:\n            i += 1\n            steps += 1"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    j = 1\n    moves = 0\n    while i * j <= n:\n        moves += n - i * j\n        i += 1\n        j += 1\n\n    print(moves)"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the minimum number of moves to reach a square that contains the integer N.\n    >>> solution(\"10\")\n    5\n    >>> solution(\"100\")\n    10\n    >>> solution(\"1000000000\")\n    27\n    >>> solution(\"100000000000\")\n    52\n    \"\"\"\n    N = int(stdin)\n    moves = 0\n    while N > 1:\n        if N % 2 == 0:\n            moves += N // 2\n            N //= 2\n        else:\n            N = 3 * N + 1\n        moves += 1\n    return moves"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin)\n\n    #recursive\n    def is_possible(i, j):\n        if i < 1:\n            return True\n        elif i > rows:\n            return False\n        elif j < 1:\n            return True\n        elif j > rows:\n            return False\n\n    #backtracking\n    def try_with_memo(i, j):\n        if (i,j) in memo:\n            return memo[(i,j)]\n\n        if i < 1:\n            memo[(i,j)] = True\n            return True\n        elif i > rows:\n            memo[(i,j)] = False\n            return False\n\n        if j < 1:\n            memo[(i,j)] = try_with_memo(i-1, j)\n            return memo[(i,j)]\n        elif j > rows:\n            memo[(i,j)] = try_with_memo(i, j-1)\n            return memo[(i,j)]\n\n        if is_possible(i, j):\n            memo[(i,j)] = True\n            return True\n        else:\n            memo[(i,j)] = False\n            return False\n\n    memo = {}\n    return try_with_memo(rows, rows)"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str, answer(stdin)))\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    c = [0] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    return''.join(map(str, c))\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a_win = [0, 0, 0]\n    b_win = [0, 0, 0]\n    for i in range(n):\n        a_win[a[i]] += 1\n        b_win[b[i]] += 1\n    \n    a_win = sum(a_win)\n    b_win = sum(b_win)\n    if a_win > b_win:\n        return f'{a_win} {b_win}'\n    elif a_win < b_win:\n        return f'{b_win} {a_win}'\n    else:\n        return f'{a_win} {b_win}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    \n    # the following numbers are the required outcome\n    res = [n,0]\n    \n    # all possible outcomes\n    for i in range(n):\n        for j in range(n):\n            if a[i] == 0:\n                if b[j] == 0:\n                    res[1] += 1\n            elif b[i] == 0:\n                if a[j] == 0:\n                    res[0] -= 1\n            elif a[i] == b[j]:\n                res[0] -= 1\n                res[1] += 1\n    \n    return''.join([str(x) for x in res])\n\n\n-----Test-----\n-- Python3\n\nimport sys\nfrom io import StringIO\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #  1) Read input\n    n = int(stdin.readline())\n    a = stdin.readline().split()\n    a = [int(x) for x in a]\n    b = stdin.readline().split()\n    b = [int(x) for x in b]\n    #  2) Compute answer\n    #  a) Alice\n    #  - 1) Rank\n    a_rank = 0\n    #  - 2) Check\n    if a[0] == a[1]:\n        if a[2] == a[3]:\n            a_rank = -1\n        else:\n            a_rank = 0\n    elif a[0] == a[2]:\n        if a[1] == a[3]:\n            a_rank = 1\n        else:\n            a_rank = 0\n    elif a[0] == a[3]:\n        if a[1] == a[2]:\n            a_rank = 2\n        else:\n            a_rank = 0\n    #  - 3) Cycle\n    if a[0] < a[1] < a[2] < a[3]:\n        a_cycle = 2\n    elif a[0] < a[2] < a[1] < a[3]:\n        a_cycle = 1\n    elif a[0] < a[1] < a[3] < a[2]:\n        a_cycle = 0\n    elif a[0] < a[2] < a[1] < a[3]:\n        a_cycle = 3\n    elif a[0] < a[3] < a[1] < a[2]:\n        a_cycle = 4\n    elif a[0] < a[3] < a[2] < a[1]:\n        a_cycle = 5\n    elif a[0] < a[1] < a[3] < a[2]:\n        a_cycle = 6\n    elif a[0] < a[2] < a[3] < a[1]:\n        a_cycle = 7\n    elif a[0] < a[1] < a[2] < a[3]:\n        a_cycle = 8\n    #  - 4) Complement\n    if a[0] == 0:\n        a_complement = 1\n    elif a[0] == 1:\n        a_complement = 0\n    elif a[0] == 2:\n        a_complement = 3\n    elif a[0] == 3:\n        a_complement = 2\n    #  - 5) Rock\n    if a[1] == 0:\n        a_rock = 1\n    elif a[1] == 1:\n        a_rock = 0\n    elif a[1] == 2:\n        a_rock = 3\n    elif a[1] == 3:\n        a_rock = 2\n    #  - 6) Scissors\n    if a[2] == 0:\n        a_scissors = 1\n    elif a[2] == 1:\n        a_scissors = 0\n    elif a[2] == 2:\n        a_scissors = 3\n    elif a[2] == 3:\n        a_scissors = 2\n    #  - 7) Paper\n    if a[3] == 0:\n        a_paper = 1\n    elif a[3] == 1:\n        a_paper = 0\n    elif a[3] == 2:\n        a_paper = 3\n    elif a[3] == 3:\n        a_paper = 2\n    #  - 8) Check\n    if a_rank == 0:\n        if a_cycle == 0:\n            a_win = -1\n        elif a_cycle == 1:\n            a_win = 2\n        elif a_cycle == 2:\n            a_win = 3\n        elif a_cycle == 3:\n            a_win = 4\n        elif a_cycle == 4:\n            a_win = 5\n        elif a_cycle == 5:\n            a_win = 6\n        elif a_cycle == 6:\n            a_win = 7\n        elif a_cycle == 7:\n            a_win = 8\n        elif a_cycle == 8:\n            a_win = 9\n    elif a_rank == 1:\n        if a_cycle == 0:\n            a_win = 0\n        elif a_cycle == 1:\n            a_win = 3\n        elif a_cycle == 2:\n            a_win = 4\n        elif a_cycle == 3:\n            a_win = 5\n        elif a_cycle == 4:\n            a_win = 6\n        elif a_cycle == 5:\n            a_win = 7\n        elif a_cycle == 6:\n            a_win = 8\n        elif a_cycle == 7:\n            a_win = 9\n        elif a_cycle == 8:\n            a_win = 10\n    elif a_rank == 2:\n        if a_cycle == 0:\n            a_win = 1\n        elif a_cycle == 1:\n            a_win = 2\n        elif a_cycle == 2:\n            a_win = 0\n        elif a_cycle == 3:\n            a_win = 3\n        elif a_cycle == 4:\n            a_win = 4\n        elif a_cycle == 5:\n            a_win"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    b = [int(x) for x in stdin.split(' ')]\n    a_win, b_win = 0, 0\n    while True:\n        a_win += 1\n        for i in range(n):\n            if a[i] > b[i]:\n                a[i] = a[i] - b[i]\n                b[i] = b[i] + a[i]\n        b_win += 1\n        for i in range(n):\n            if a[i] < b[i]:\n                a[i] = a[i] + b[i]\n                b[i] = b[i] - a[i]\n        if a == b:\n            break\n    return''.join(map(str, [a_win, b_win]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n = int(input_data[0])\n\n    a_1, a_2, a_3 = map(int, input_data[1].split())\n    b_1, b_2, b_3 = map(int, input_data[2].split())\n\n    min_win, max_win = 0, 0\n\n    for i in range(n):\n        a = a_1 + a_2 + a_3 - i\n        b = b_1 + b_2 + b_3 - i\n        if a > b:\n            max_win = max(max_win, a)\n        else:\n            min_win = min(min_win, b)\n\n    return '{} {}'.format(min_win, max_win)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split(' ')]\n    b = [int(i) for i in stdin.split(' ')]\n    if a[0] + a[1] + a[2]!= n:\n        return 'Impossible'\n    if b[0] + b[1] + b[2]!= n:\n        return 'Impossible'\n    if a[0] * a[1] * a[2] > n:\n        return 'Impossible'\n    if b[0] * b[1] * b[2] > n:\n        return 'Impossible'\n    if a[0] > b[0]:\n        return 'Impossible'\n    if a[1] > b[1]:\n        return 'Impossible'\n    if a[2] > b[2]:\n        return 'Impossible'\n    return str(max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2]))\n\nassert(solution('2') == '0 1')\nassert(solution('15') == '0 15')\nassert(solution('3') == '3 3')\nassert(solution('686') == '22 334')\nassert(solution('319') == '119 226')\nassert(solution('1024') == '5 15')\nassert(solution('1024 1024') == '5 15')\nassert(solution('1024 1024 1024') == '5 15')\nassert(solution('99999 999999 999999') == '0 999999 999999')\nassert(solution('5 5 5') == '0 5')\nassert(solution('5 5 5 5') == '0 5')\nassert(solution('5 5 5 5 5') == '0 5')\nassert(solution('5 5 5 5 5 5') == '0 5')\nassert(solution('0 0 0') == '0 0')\nassert(solution('0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a_len = 0\n    b_len = 0\n    for i in range(n):\n        a_len += a[i]\n        b_len += b[i]\n    if a_len == n and b_len == n:\n        return str(n) + \" \" + str(n)\n    if a_len == n:\n        return str(a_len) + \" \" + str(b_len)\n    if b_len == n:\n        return str(b_len) + \" \" + str(a_len)\n    a_wins = a_len - b_len\n    b_wins = b_len - a_len\n    return str(a_wins) + \" \" + str(b_wins)\n\n\na = 0\nb = 0\nc = 0\nfor i in range(int(input())):\n    x, y, z = map(int, input().split())\n    a += x\n    b += y\n    c += z\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip().split(\" \")\n    a = list(map(int, a))\n    b = stdin.readline().strip().split(\" \")\n    b = list(map(int, b))\n    a1 = a[0]\n    a2 = a[1]\n    a3 = a[2]\n    b1 = b[0]\n    b2 = b[1]\n    b3 = b[2]\n    # c = min(a1+a2+a3, b1+b2+b3)\n    # d = max(a1+a2+a3, b1+b2+b3)\n    c = max(a1+a2+a3, b1+b2+b3)\n    d = a1+a2+a3+b1+b2+b3-c\n    return str(c) + \" \" + str(d)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    unique = set()\n    for i in range(n):\n        for j in range(i, n):\n            unique.add(a[i] + a[j])\n    return str(len(unique))"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    block_count = 0\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if i!= j:\n                if arr[i] + arr[j] == arr[i] + arr[j] == sum(arr[:i]) + sum(arr[i + 1:j]) + sum(arr[j + 1:]):\n                    block_count += 1\n                    print(i, j)\n    print(block_count)\n    return \"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    if size == 1:\n        return str(1)\n\n    if size == 2:\n        return str(2) if arr[0] == arr[1] else str(1)\n\n    matches = 0\n    left = arr[0]\n    right = arr[-1]\n    for i in range(1, size - 1):\n        if arr[i] == left:\n            matches += 1\n            left = arr[i + 1]\n        elif arr[i] == right:\n            matches += 1\n            right = arr[i - 1]\n    return str(matches)"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    arr = [int(x) for x in stdin.split()]\n    count = 0\n    i = 0\n    while i < len(arr):\n        j = i + 1\n        while j < len(arr) and arr[i] + arr[j] == arr[j]:\n            j += 1\n        count = max(count, j - i)\n        i = j\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    max_blocks = 0\n    for i in range(n):\n        l = i + 1\n        r = i + 2\n        if l > r:\n            continue\n        while l < n and arr[l] == arr[i] + 1:\n            l += 1\n        while r < n and arr[r] == arr[i] + 1:\n            r += 1\n        max_blocks = max(max_blocks, l - i)\n    return str(max_blocks)\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    s = 0\n    k = 0\n    m = 0\n    d = []\n\n    for i in range(n):\n        if s == 0:\n            s = a[i]\n            k = i\n            m = 1\n            d.append((k, i))\n        else:\n            if s!= a[i]:\n                m = 0\n                s += a[i]\n                k = i\n                d.append((k, i))\n            else:\n                m += 1\n                if m > m:\n                    s += a[i]\n                    d.append((k, i))\n\n    print(len(d))\n    for i in d:\n        print(i[0], i[1])"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    c = [0] * n\n    for i in range(n):\n        c[i] = sum(a[i:])\n    best = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if c[j] - c[i] == best:\n                print(i, j)\n            if c[j] - c[i] > best:\n                best = c[j] - c[i]\n                print(i, j)\n    return ''\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    k = 0\n    for i in range(n):\n        if i == 0:\n            k = 1\n        else:\n            k = max(k, max(i, a[i]) - min(i-1, a[i-1]))\n    return str(k)\n\nassert(solution('''7\n4 1 2 2 1 5 3\n''') == '3')\nassert(solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2')\nassert(solution('''4\n1 1 1 1\n''') == '4')\nassert(solution('''1\n1 1 1 1\n''') == '4')\nassert(solution('''0\n0\n''') == '0')\nassert(solution('''1\n1\n''') == '1')\nassert(solution('''3\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    res = 0\n    for k in range(1, n):\n        for l in range(n - k):\n            r = l + k\n            if sum(a[l:r + 1]) == sum(a[l + 1:r]):\n                res += 1\n    print(res)\n    return ''\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    total = sum(a)\n    b = [[0, len(a) - 1] for x in range(0, len(a))]\n    for i in range(0, len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] + a[j] == total - a[i] - a[j]:\n                b[i].append(j)\n                b[j].append(i)\n    res = []\n    for i in b:\n        if len(i) > 1:\n            res.append(i)\n    return res\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(stdin.readline().strip()) for _ in range(n)]\n\n    if n == 1:\n        return \"NO\"\n\n    if n == 2:\n        if a[0] > a[1]:\n            return \"NO\"\n        return \"YES\"\n\n    if n == 3:\n        if a[1] > a[0] or a[1] > a[2]:\n            return \"NO\"\n        return \"YES\"\n\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lst = list(map(int, stdin.readline().strip().split()))\n    max_height = 0\n    stacks = [[] for i in range(n)]\n    for i in range(n):\n        h = lst[i]\n        if h > max_height:\n            max_height = h\n        stacks[h].append(i)\n    res = []\n    tallest_stack = None\n    for i in range(n - 1, -1, -1):\n        if len(stacks[i]) > 0:\n            h = stacks[i][-1] - i\n            if tallest_stack is None or h > tallest_stack:\n                tallest_stack = h\n            res.append(h)\n            del stacks[i][-1]\n    res.reverse()\n    print(\"YES\" if res == sorted(lst) else \"NO\")\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(\"YES\" if check(stdin) else \"NO\")\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin)\n    a = [int(i) for i in stdin.split(' ')]\n    height = max(a)\n    output = [None] * len(a)\n    stacks = [height] * height\n    for i in a:\n        idx = stacks.index(i)\n        if idx < len(stacks) - 1:\n            if idx + 1!= i:\n                stacks[idx] -= 1\n            stacks[idx + 1] += 1\n    for i in stacks:\n        output[i] = a.pop(0)\n    return 'YES' if a == sorted(output) else 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(stdin) for stdin in stdin.split(\" \")]\n\n    result = \"NO\"\n    for i in range(n):\n        h = []\n        while a[i] > 0:\n            if a[i] > len(h):\n                h.append(a[i])\n            else:\n                h[a[i]-1] += 1\n            a[i] -= 1\n        while h:\n            if h[0] > len(h):\n                h.pop(0)\n            elif h[0] > 0:\n                h[0] -= 1\n            else:\n                break\n        if h:\n            result = \"NO\"\n    return result\n\nprint(solution(input()))"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nprint(solution(\"input\"))\n\"\"\"\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if sort_ravioli(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(i) for i in stdin.readline().split()]\n    if len(nums)!= n:\n        return \"NO\"\n    for i in range(n-1):\n        if nums[i] > nums[i+1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nn = int(input())\ns = input()\nt = input()\n\nn = len(s)\nk = 0\n\nfor i in range(1, n):\n    if s[i]!= t[i]:\n        k += 1"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    \n    if n!= len(s) or n!= len(t):\n        return \"-1\"\n    \n    n = len(s)\n    \n    if n == 1:\n        return str(0)\n    \n    if n == 2:\n        if s == t:\n            return str(0)\n        else:\n            return \"-1\"\n    \n    memo = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for c in range(n):\n        memo[0][c] = c\n    \n    for i in range(1, n):\n        for c in range(n):\n            if s[c] == t[i]:\n                memo[i][c] = memo[i - 1][c - 1]\n            else:\n                memo[i][c] = min(memo[i - 1][c], memo[i - 1][c - 1]) + 1\n    \n    return str(memo[-1][-1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find_moves(s: str) -> List[Tuple[int, int]]:\n        moves: List[Tuple[int, int]] = []\n\n        for i in range(len(s) - 1):\n            if s[i]!= s[i + 1]:\n                moves.append((i + 1, i + 2))\n\n        return moves\n\n    n = int(stdin)\n\n    if n < 1 or n > 50:\n        return -1\n\n    s = stdin[1:n + 1]\n    t = stdin[n + 1:]\n\n    moves = find_moves(s)\n\n    if len(moves) == 0:\n        print(0)\n        return\n\n    moves_count = len(moves)\n    moves_list = list(moves)\n\n    for _ in range(1, 100):\n        for i, j in moves:\n            if moves_count > 1:\n                moves_list[moves_list.index((i, j))] = (i, j + 1)\n                moves_list[moves_list.index((j + 1, i))] = (i, j)\n        moves_count = len(moves_list)\n\n    moves = tuple(moves_list)\n\n    print(moves_count)\n\n    if moves_count > 10 ** 4:\n        print(-1)\n        return\n\n    for m in moves:\n        print(m[0], m[1])\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if is_anagram(s, t):\n        return \"0\"\n    count = 0\n    moves = []\n    for _ in range(10 ** 4):\n        first = s\n        second = t\n        for i in range(1, n):\n            if is_anagram(first, second):\n                moves.append(i)\n                break\n            swap(first, i, second, i)\n        count += 1\n        if is_anagram(first, second):\n            break\n    if is_anagram(s, t):\n        return str(count)\n    print(\"-1\")\n    print(str(count), *moves)\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 50:\n        return \"-1\"\n    s = stdin[1:n+1]\n    t = stdin[n+1:]\n    return solution_recursive(s, t)\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\nprint(solution(input()))"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = stdin.read().splitlines()\n    strings = sorted(strings)\n    for i in range(n):\n        strings[i] = stdin.readline()\n    answer = ''\n    for i in range(n):\n        s = strings[i]\n        answer += 'P' if s.startswith(s[:n - 1]) else 'S'\n    return answer\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n\nassert(solution('''5\nba\na\nabab\na\naba\nbaba\nab\naba\n''')) == 'SPPSPSPS'\nassert(solution('''3\na\naa\naa\na\n''')) == 'PS'\nassert(solution('''2\na\nc\n''')) == 'PS'\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    ns = stdin[1]\n    m = len(s)\n    p = 0\n    ps = []\n    for i in range(2, m + 1, 2):\n        ps.append(s[:i])\n    for p in ps:\n        ns = ns.replace(p, 'P')\n    return ns"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(s: str, a: List[str], b: List[str], count: int) -> None:\n        if count == 2:\n            print(''.join('P' if a[i] else 'S' for i in range(len(a))))\n            return\n\n        for i in range(len(s)):\n            if s[i] not in a:\n                continue\n            for j in range(i + 1, len(s)):\n                if s[i:j] in b:\n                    solve(s[:i] + s[j:], a + [s[i:j]], b + [s[i:j]], count + 1)\n\n    n = int(stdin)\n    s = stdin[:n]\n\n    a = []\n    b = []\n    for line in stdin.split('\\n')[2:]:\n        a.append(line[:n])\n        b.append(line[n:])\n\n    solve(s, [], [], 0)\n    return None\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stdin.readline()\n    prefixes = list(stdin.readline().strip())\n    stdin.readline()\n    suffixes = list(stdin.readline().strip())\n    for i in range(n):\n        for j in range(n-1, i, -1):\n            if prefixes[i:j] == suffixes[i:j]:\n                return ''.join('P' if x == 'S' else 'S' for x in stdin.readline().strip())\n    return 'P' * n + 'S' * (n-1)\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    n = int(stdin.readline().strip())\n\n    for _ in range(2 * n - 3):\n        stdin.readline()\n\n    for _ in range(2 * n - 3):\n        stdin.readline()\n\n    for line in stdin:\n        if line.strip() == 'P':\n            answer += 'P'\n        else:\n            answer += 'S'\n\n    return answer"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s_len = len(s)\n    p_count, s_count = 0, 0\n    p = set()\n    s_list = [''] * (s_len - 1)\n    for _ in range(2 * s_len - 2):\n        sub_str = stdin.readline().strip()\n        p_count += sub_str.count('P')\n        s_count += sub_str.count('S')\n        p.add(sub_str[0])\n        p.add(sub_str[-1])\n        for i, s_str in enumerate(s_list):\n            if s_str.endswith(sub_str):\n                p_count += 1\n                s_list[i] += sub_str\n                break\n        for i, s_str in enumerate(reversed(s_list)):\n            if s_str.startswith(sub_str):\n                p_count += 1\n                s_list[-(i + 1)] += sub_str\n                break\n    if p_count == s_count:\n        return ''.join('PS'[int(x == 'P')] for x in s_list)\n    elif p_count > s_count:\n        return 'P' * p_count\n    else:\n        return 'S' * s_count"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    for _ in range(2*n-3):\n        p = stdin.readline().strip()\n        if not p:\n            break\n        for i in range(1, n):\n            if not s[:i] == p[-i:]:\n                break\n        else:\n            for i in range(1, n):\n                if not s[-i:] == p[:i]:\n                    break\n            else:\n                return p\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split(\" \")]\n    return str(a.index(max(a)) + 1)"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    \n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 2 3 4 5')\n    2\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(' ')\n    return ''.join(map(str, stdin))\n\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8 10''')\nassert '1' == solution(\n    '''2 4 6 8"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\""
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Kadanes algorithm\n    best_ending_here = max_ending_here = a[0]\n    for i in range(1, n):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        best_ending_here = max(max_ending_here, best_ending_here)\n    return str(best_ending_here)\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''https://www.codewars.com/kata/5ac17ee9b0eec2e894000074'''\n    stdin = stdin.strip()\n    n = int(stdin.split()[0])\n    lights = [int(x) for x in stdin.split()[1:]]\n\n    changes = 0\n    for i in range(1, n-1):\n        if lights[i-1] == 1 and lights[i] == 1 and lights[i+1] == 0:\n            changes += 1\n\n    return changes\n\n'''\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('''10'''), 0)\n        self.assertEqual(solution('''1 1 0 1 1 0 1 0 1 0'''), 2)\n        self.assertEqual(solution('''5'''), 0)\n        self.assertEqual(solution('''1 1 0 0 0'''), 0)\n        self.assertEqual(solution('''4'''), 0)\n        self.assertEqual(solution('''1 1 1 1'''), 0)\n        self.assertEqual(solution('''100'''), 1)\n        self.assertEqual(solution
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    k = 0\n    for i in range(1, n - 1):\n        if a[i - 1] and a[i + 1] and a[i] == 0:\n            k += 1\n\n    return k\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    cnt = 0\n    for i in range(n):\n        if (a[i - 1] and a[i]) or (not a[i - 1] and not a[i]):\n            cnt += 1\n    return str(cnt)"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split(' ')]\n    result = 0\n    # iterate through pairs of nums\n    for i in range(len(nums)):\n        # set the values of nums[i] and nums[i+1] to 0\n        nums[i] = 0\n        nums[i+1] = 0\n        # if nums[i]!= nums[i+1] and nums[i]!= 1 and nums[i+1]!= 1:\n        if nums[i]!= nums[i+1] and nums[i]!= 1 and nums[i+1]!= 1:\n            result += 1\n    return result\n\n\nsolution('10')\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(\" \")]\n    n_a = [0] * n\n    n_a[0] = a[0]\n    n_a[-1] = a[-1]\n    for i in range(1, n - 1):\n        n_a[i] = a[i] + a[i - 1]\n    k = 0\n    for i in range(n - 1):\n        if n_a[i] == 1 and n_a[i + 1] == 1:\n            k += 1\n    return str(k)\n\nassert(solution('''10\n1 1 0 1 1 0 1 0 1 0''') == '2')\nassert(solution('''5\n1 1 0 0 0\n\n''') == '0')\nassert(solution('''4\n1 1 1 1\n\n''') == '0')\nassert(solution('''20\n1 0 0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 1 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 1 0 0 0 0 1 1 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 1 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 1 1 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 1 1 0 0 1 1 1 1 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 1 0 0 0 0 1 1 1 0 1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 1 0 0 0 1 0 0 0 0 1 1 1 1 0 1 1 0 0 0 0 0 1 0 1 0 1 0 1 1 1 0 0 0 1 1 1 1 1 1 0 1 1 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(\" \")]\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n        if a[i] == 1 and a[i + 1] == 1 and i < n - 1:\n            count += 1\n        if a[i] == 1 and a[i - 1] == 1 and i > 0:\n            count += 1\n    print(count)"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    z = [0] * n\n    for i in range(n):\n        z[i] = 1 if a[i] == 1 else 0\n    z = [0] + z + [0]\n    for i in range(1, n + 2):\n        for j in range(n + 2):\n            if i > j and z[i - 1] == z[j + 1]:\n                z[j] = 1 if z[j] == 0 else 0\n    print(z.count(0))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    ans = 1\n    for i in a:\n        ans *= i\n    ans /= a[0]\n    return str(ans)"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    d = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0:\n                d[i] += 1\n    return str(max(d))\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(num) for num in stdin.split(' ')]\n    res = 1\n    div = set()\n    for num in a:\n        for i in range(2, int(num ** 0.5 + 1)):\n            if num % i == 0:\n                div.add(i)\n                div.add(num // i)\n        div.add(num)\n    div = sorted(div)\n    for i in div:\n        res *= i\n    return str(res)"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    result = 0\n    for i in a:\n        counter = 0\n        for j in a:\n            if i % j == 0:\n                counter += 1\n        if counter == n:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    divisors = [0] * len(a)\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if a[i] % a[j] == 0:\n                divisors[i] += 1\n    return str(divisors.count(n))\n\nassert solution('1 2 3 4 5\\n1 2 3 4 5\\n') == '1'\nassert solution('6 90 12 18 30 18\\n6 90 12 18 30 18\\n') == '4'\nassert solution('6 100 25 35 25 30\\n6 100 25 35 25 30\\n') == '2'\nassert solution('7 100 19 32 17 40\\n7 100 19 32 17 40\\n') == '2'\nassert solution('11 121 100 121 90 125 131 131 127 139 140 141 142 143 141 139 141 140 140\\n11 121 100 121 90 125 131 131 127 139 140 141 142 143 141 139 141 140 140\\n') == '1'\nassert solution
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    res = 1\n    arr.sort()\n    for i in range(1, n):\n        while arr[i] % arr[i - 1]!= 0:\n            res += 1\n    return str(res)\n\n\nassert (solution('''5\n1 2 3 4 5\n''')) == '1'\nassert (solution('''6\n6 90 12 18 30 18\n''')) == '4'\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = list(map(int, stdin.readline().split()))\n    result = 0\n\n    for num in array:\n        for i in range(2, num//2 + 1):\n            if num % i == 0:\n                result += 1\n                break\n    return str(result)"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n\n    count = 0\n    for i in range(1, n + 1):\n        count += 1 if all([i % x == 0 for x in arr]) else 0\n    return str(count)\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    count = 0\n    for i in a:\n        if i > 1:\n            n = n // i\n            count += 1\n    return str(count)\n\nassert(solution('''5\n1 2 3 4 5''') == '1')\nassert(solution('''6\n6 90 12 18 30 18''') == '4')\nassert(solution('''10\n890 12 18 30 18''') == '2')\n\n\n-----My solutions-----\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = [int(x) for x in stdin.readline().strip().split(\" \")]\n    res = 0\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            if numbers[j] % numbers[i] == 0:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    a.sort()\n\n    def helper(a: list) -> list:\n        if len(a) == 0:\n            return []\n        return helper(a[1:]) + [a[0]]\n\n    def helper2(a: list) -> list:\n        if len(a) == 0:\n            return []\n        return helper2(a[1:]) + [a[0]] + helper(a[1:])\n\n    def helper3(a: list) -> list:\n        if len(a) == 0:\n            return []\n        return helper3(a[1:]) + [a[0]] + helper2(a[1:])\n\n    def helper4(a: list) -> list:\n        if len(a) == 0:\n            return []\n        return helper4(a[1:]) + [a[0]] + helper3(a[1:])\n\n    return str(len(helper3(a)))\n\n\nimport sys"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_of_coins = int(stdin.readline())\n    coin_values = [int(c) for c in stdin.readline().split()]\n    min_coins = min(coin_values)\n    coin_values.remove(min_coins)\n    max_coins = max(coin_values)\n    d = {coin: 0 for coin in coin_values}\n    for i in range(min_coins, max_coins + 1):\n        for coin in coin_values:\n            if i % coin == 0:\n                d[coin] += 1\n    return str(d[max(d)])\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = [int(x) for x in stdin.split(\" \")]\n\n    a.sort()\n\n    i = 0\n\n    while i < n - 1 and a[i] == a[i + 1]:\n        i += 1\n\n    return i + 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    coins = tuple(int(x) for x in stdin.readline().split())\n    return str(min(count_coins(coins, i) for i in range(N + 1)))\n\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n1 2 4 3 3 2\\n\")\n    2\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    possible_pockets = []\n    current_pocket = 0\n    current_num_coins = 0\n    for i in range(n):\n        if a[i] not in possible_pockets:\n            possible_pockets.append(a[i])\n            current_num_coins += 1\n        else:\n            current_pocket = a[i]\n            current_num_coins += 1\n    return current_num_coins\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    i = 0\n    j = n - 1\n    min = sys.maxsize\n    while i < j:\n        s = a[i] + a[j]\n        if s < min:\n            min = s\n        if s > a[j]:\n            j -= 1\n        elif s < a[j]:\n            i += 1\n        else:\n            j -= 1\n            i += 1\n    return str(min)\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    A = [int(x) for x in stdin.split()]\n    A.sort()\n    print(A)\n\n    ans = 1\n    for i in range(N):\n        if A[i] > i+1:\n            break\n        ans += 1\n    return str(ans)"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    result = 0\n    for i in range(1, n - 1):\n        if lst[i] < lst[i - 1] and lst[i] < lst[i + 1]:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = [int(x) for x in stdin.split()]\n\n    pockets = {}\n    for i in coins:\n        if i in pockets:\n            pockets[i] += 1\n        else:\n            pockets[i] = 1\n\n    v = sorted(pockets.values())\n\n    k = len(v)\n    result = 1\n    for i in range(1, k):\n        result *= (v[i] - v[i - 1])\n\n    return str(result)\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n    heaters = []\n    for i in range(n):\n        if house[i] == 1:\n            heaters.append(i)\n    if len(heaters) < r:\n        return -1\n    heaters.sort()\n    i, j = 0, len(heaters) - 1\n    while i < j:\n        if (heaters[i] + r) <= (heaters[j] + r):\n            i += 1\n        else:\n            j -= 1\n    return j + 1"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.readline().strip().split())\n    house = list(map(int, stdin.readline().strip().split()))\n    heaters = sorted([i for i, x in enumerate(house) if x])\n    heaters_num = len(heaters)\n    min_heaters = n - 1\n    \n    for heater in heaters:\n        if heater <= min_heaters:\n            continue\n        if heater - r + 1 < min_heaters:\n            continue\n        min_heaters = heater - r + 1\n    \n    if min_heaters < n - 1:\n        return str(min_heaters + 1)\n    else:\n        return '-1'\n\nassert(solution('''6 2\n0 1 1 0 0 1\n''') == '3')\nassert(solution('''5 3\n1 0 0 0 1\n''') == '2')\nassert(solution('''5 10\n0 0 0 0 0\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '2')\nassert(solution('''6 3\n1 0 0 0 1\n''') == '3')\nassert(solution('''6 3\n1 0 0 0 1\n''') == '3')\nassert(solution('''6 3\n1 0 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '2')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''6 4\n1 0 0 0 1\n''') == '3')\nassert(solution('''6 4\n1 0 0 0 1\n''') == '3')\nassert(solution('''6 4\n1 0 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '2')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''6 4\n1 0 0 0 1\n''') == '3')\nassert(solution('''6 4\n1 0 0 0 1\n''') == '3')\nassert(solution('''6 4\n1 0 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '2')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''6 4\n1 0 0 0 1\n''') == '3')\nassert(solution('''6 4\n1 0 0 0 1\n''') == '3')\nassert(solution('''6 4\n1 0 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '2')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''6 4\n1 0 0 0 1\n''') == '3')\nassert(solution('''6 4\n1 0 0 0 1\n''') == '3')\nassert(solution('''6 4\n1 0 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '2')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''10 3\n0 0 1"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, num_heaters = [int(x) for x in stdin.split(\" \")]\n    heaters = [int(x) for x in stdin.split(\" \")]\n    \n    minimum_heaters = 0\n    for i in range(num_heaters):\n        if i > 0 and not heater[i] == 0:\n            # Only if there's a heater in the position of the current heater\n            minimum_heaters += i - heater[i]\n\n    print(minimum_heaters)\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    if n == 0:\n        return -1\n    a = list(map(int, stdin.split()))\n    heaters = [0] * (n + 1)\n    if r > n:\n        return -1\n    for x in a:\n        heaters[x] = 1\n    counter = 0\n    for i in range(1, n):\n        if heaters[i] == 0:\n            continue\n        if heaters[i + 1] == 0:\n            heaters[i + 1] = 1\n            counter += 1\n        if heaters[i - 1] == 0:\n            heaters[i - 1] = 1\n            counter += 1\n    return counter\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nYou can use the following example values:\n\nstdin = '''6 2\n0 1 1 0 0 1\n\n'''\n\nn, k = map(int, stdin.split('\\n')[0].split(' '))\nhouse = [int(el) for el in stdin.split('\\n')[1].split(' ')]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    if n == 0:\n        return -1\n    if r == 0:\n        return 0\n    a = list(map(int, stdin.split()))\n    min_needed = 0\n    for i in range(n):\n        if a[i] == 1:\n            if i - r + 1 < 0:\n                a[i] = 0\n                min_needed += 1\n                continue\n            if a[i - r + 1] == 0:\n                a[i] = 1\n                min_needed += 1\n                continue\n    return min_needed\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    m = 0\n    k = 0\n    for i in range(n):\n        if A[i] == 1:\n            k += 1\n            m = min(m, i - r + 1)\n    if k > 0:\n        return str(k - m)\n    else:\n        return \"-1\"\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    min_heaters = min(n - r + 1, r)\n    for i in range(n):\n        for j in range(i, i + min_heaters):\n            if a[j] == 1:\n                a[j] = 0\n            else:\n                a[j] = 1\n                break\n    return str(min_heaters)\n\nprint(solution(input()))"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = 0\n    for a in range(1, N // 2 + 1):\n        for b in range(a, N // 2 + 1):\n            if a * b == N:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(len(set([int('{0}{1}'.format(a, b)) for a in range(1, (int(stdin) // 2) + 1) for b in range(1, (int(stdin) // 2) + 1)])))"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    count = 0\n    for A in range(1,N+1):\n        for B in range(A,N):\n            C = N - A - B\n            if (A*B + C) == N:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(ans)"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    size = stdin.split()[0]\n    if int(size) < 2:\n        raise ValueError('Invalid Input')\n    print(solve(int(size)))\n    return '\\n'.join(map(str, solve(int(size))))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(comb(n, 2) * comb(n - 2, 1))\n\nprint(solution(\"\"))\n\"\"\"\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    return str(pow(2, n) - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    count = 0\n\n    for a in range(2, N):\n        for b in range(2, N):\n            c = N - a - b\n            if a * b + c == N:\n                count += 1\n                print(a, b, c)\n\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1,n+1):\n        for j in range(1,i):\n            for k in range(1,j):\n                if i*j+k == n:\n                    count += 1\n    return count"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    m = s.count(')')\n    return len(s) - m\n\nassert(solution('''6\n(((()\n\nOutput''')) == 3)\n\nassert(solution('''6\n()()()\n\nOutput''')) == 0\n\nassert(solution('''1\n)\n\nOutput''')) == 0\n\nassert(solution('''8\n)))(((((\n\nOutput''')) == 0)\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = list(stdin.readline())\n    op = list('+' * n)\n    count = 0\n    stack = []\n    for i in range(n):\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                count += 1\n                op[i] = '+'\n            else:\n                stack.pop()\n    return count\n\n\nassert solution('''())''') == 0\nassert solution('''))(''') == 1\nassert solution(''')))(((((''') == 2\nassert solution('''))()()(()())(()((()())((()()((()))))))()()(())''') == 5\nassert solution('''(((())''') == 0\nassert solution('''))()()()(()((()()((()))))))()()(())''') == 2\nassert solution('''()()()()((()()((()))))))()()(())''') == 5\nassert solution('''))()()()(()((()()((()))))))()()(())''') == 5\nassert solution('''()()()()((()()((()))))))()()(())''') == 7\nassert solution('''()()()()((()()((()))))))()()(())''') == 8\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()()()((()()((()))))))()()(())''') == 9\nassert solution('''()()"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    return None\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    opened = 0\n    for i, c in enumerate(s):\n        if c == '(':\n            opened += 1\n        else:\n            opened -= 1\n            if opened < 0:\n                return i + 1\n    return 0"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    result = 0\n    for i, c in enumerate(s):\n        if c == '(':\n            result += 1\n        else:\n            result -= 1\n        if result < 0:\n            return i + 1\n    return result"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(')', '(').replace('(', ')')\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    s = list(stdin.readline().strip())\n    if not s[0] == '(':\n        return 0\n\n    stack = []\n\n    for char in s:\n        if char == ')':\n            if not stack:\n                return 0\n\n            stack.pop()\n        else:\n            stack.append(char)\n\n    return len(stack)\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution('''bbaba\nbb\n''') == '3'\n\nassert solution('''baaba\nab\n''') == '2'\n\nassert solution('''abcde\nabcde\n''') == '0'\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    t = stdin.rstrip()\n    n = len(s)\n    m = len(t)\n    curr = 0\n    max_len = 0\n    for i in range(n - m + 1):\n        if s[i:i + m] == t:\n            curr += 1\n            max_len = max(max_len, curr)\n        else:\n            curr = 0\n    return max_len"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    s_len = len(s)\n    t_len = len(t)\n    max_len = 0\n\n    for i in range(s_len):\n        for j in range(i, s_len):\n            if s[i:j+1] == t:\n                max_len = max(max_len, j - i + 1)\n\n    return max_len\n\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_subsequence(s: str, t: str) -> bool:\n        i = j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n                j += 1\n            else:\n                j += 1\n\n        return i == len(s)\n\n    s = stdin.strip()\n    t = stdin.strip()\n    diff = 0\n    for i in range(len(s)):\n        if not is_subsequence(s[i:], t):\n            break\n\n    return len(s) - i - len(t)\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][m]\n\nassert solution(stdin) == 3"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n', 2)\n    return str(Solution().solution(s, t))\n\nimport sys"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Remove substring \"substring\" from string \"string\"\n    # Return string \"string\"\n\n    # TODO: your code here\n    return \"\""
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\""
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def check(s: str, t: str) -> bool:\n        for i in range(len(t)):\n            if t[i]!= s[i]:\n                return False\n        return True\n\n    s = stdin.strip()\n    t = stdin.strip()\n\n    if check(s, t):\n        return 0\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if check(s[i:j], t):\n                return j - i\n\n    return -1"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max([a * b, a * d, c * b, c * d]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(1, min(a, c), min(b, d)))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a, b, c, d))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.strip().split())\n    nums = sorted([(a, 1), (b, 2), (c, 3), (d, 4)], key = lambda x: x[0])\n    tot = 0\n    for i in range(len(nums)):\n        if nums[i][1] == 1:\n            tot += nums[i][0]\n        elif nums[i][1] == 2:\n            tot += nums[i][0] * nums[i][0]\n        elif nums[i][1] == 3:\n            tot += nums[i][0] * nums[i][0] * nums[i][0]\n        else:\n            tot += nums[i][0] * nums[i][0] * nums[i][0] * nums[i][0]\n    return str(tot)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.split())\n    answer = a * (b // c) * (d // c)\n    return str(answer)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    mx = max(b, d)\n    if a <= b <= mx and c <= d <= mx:\n        return str(max(a, c) * max(b, d))\n    else:\n        return '-1'"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n    result = 0\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            if x * y > result:\n                result = x * y\n    return str(result)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a * b, max(c * d, a * d)))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.split())\n    return str(max(a*b, c*d))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(num) for num in stdin.split()]\n    return str(max([a*b, a*d, b*c, b*d, c*d]))"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Accepts the standard input and returns the solution to the problem.\n    \"\"\"\n    N = int(stdin)\n\n    d = [int(i) for i in stdin.split()]\n\n    arr = []\n    abc = []\n    for i in range(N):\n        if i % 2 == 0:\n            arr.append(d[i])\n        else:\n            abc.append(d[i])\n\n    arr.sort()\n    abc.sort()\n\n    count_arr = 0\n    count_abc = 0\n    for i in range(len(arr)):\n        if arr[i] > i:\n            count_arr += (arr[i]-i)\n        else:\n            count_arr += 1\n\n    for i in range(len(abc)):\n        if abc[i] > i:\n            count_abc += (abc[i]-i)\n        else:\n            count_abc += 1\n\n    return str(min(count_arr, count_abc))\n\nassert(solution('''5''')) == '1'\nassert(solution('''4 3 2 1''')) == '1'\nassert(solution('''6 1 4 4 6 7''')) == '2'\nassert(solution('''8 2 4 6 6 8''')) == '2'\nassert(solution('''9 1 4 4 6 7''')) == '2'\nassert(solution('''10 1 4 4 6 7''')) == '2'\nassert(solution('''20 1 4 4 6 7''')) == '2'\nassert(solution('''6''')) == '1'\nassert(solution('''5 4 3 2 1''')) == '1'\nassert(solution('''6 1 4 4 6 7''')) == '2'\nassert(solution('''8 2 4 6 6 8''')) == '2'\nassert(solution('''9 1 4 4 6 7''')) == '2'\nassert(solution('''10 1 4 4 6 7''')) == '2'\nassert(solution('''20 1 4 4 6 7''')) == '2'\nassert(solution('''30 1 4 4 6 7''')) == '2'\nassert(solution('''100 1 4 4 6 7''')) == '2'\nassert(solution('''200 1 4 4 6 7''')) == '2'\nassert(solution('''1000 1 4 4 6 7''')) == '2'\nassert(solution('''10000 1 4 4 6 7''')) == '2'\nassert(solution('''100000 1 4 4 6 7''')) == '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    num_probs, k = stdin.split(\" \")\n    num_probs = int(num_probs)\n    k = int(k)\n    possible_choices = (num_probs - k) // k\n    return f\"{possible_choices}\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    probs = list(map(int, stdin.readline().strip().split()))\n    part1 = 0\n    part2 = 0\n    for i in range(N):\n        if i % 2 == 0:\n            part1 += probs[i]\n        else:\n            part2 += probs[i]\n\n    print(abs(part1 - part2))\n\nsolution('')"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = [int(d) for d in stdin.split(\" \")]\n    num_arcs = 0\n    num_abc = 0\n    for i in range(n):\n        if array[i] > i:\n            num_arcs += 1\n        if array[i] < i:\n            num_abc += 1\n    return str(num_arcs//2 == num_abc)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    d_arr = [int(x) for x in stdin.split()]\n    dp = [0] * N\n    dp[0] = d_arr[0]\n    for i in range(1, N):\n        if d_arr[i] > dp[i - 1]:\n            dp[i] = d_arr[i]\n        else:\n            dp[i] = dp[i - 1]\n\n    count = 0\n    for i in range(N):\n        if dp[i] >= d_arr[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6\\n9 1 4 4 6 7')\n    '2'\n    \"\"\"\n    n = int(stdin.readline())\n    k = int(stdin.readline())\n    c = 0\n    for i in range(n):\n        if (k + i) % 2 == 0:\n            c += 1\n    return str(c)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    d = list(map(int, stdin.split(\"\\n\")[1].split()))\n    if N % 2!= 0:\n        print(0)\n        return\n    d = sorted(d)\n    K = d[-1]\n    K_count = 0\n    count = 0\n    for i in d:\n        if i >= K:\n            K_count += 1\n        else:\n            count += 1\n    print(K_count * count)\n\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n = int(stdin.readline().strip())\n    d = [int(x) for x in stdin.readline().strip().split()]\n    \n    # Solve the problem\n    # TODO: optimize this\n    k = 1\n    problems_arcs = 0\n    problems_abc = 0\n    for x in d:\n        if k > x:\n            problems_arcs += 1\n        else:\n            problems_abc += 1\n        k += 1\n    return str(problems_arcs) +'' + str(problems_abc)\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100')\n    '2'\n    >>> solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100')\n    '2'\n    >>> solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100')\n    '2'\n    >>> solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100')\n    '2'\n    >>> solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100')\n    '2'\n    \"\"\"\n    n = stdin.strip().split()\n    n = int(n[0]), int(n[1])\n    counts = {1: 0, 2: 0}\n    for i in range(n[0]):\n        d = int(stdin.readline().strip())\n        if d in counts:\n            counts[d] += 1\n        else:\n            counts[d] = 1\n    if n[0] % 2 == 0:\n        return str(counts[5] - counts[1])\n    else:\n        return str(counts[5] - counts[1]) + \" \" + str(counts[6] - counts[2])\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # Sort the input from the shortest to the longest difficulty\n    difficulty_sorted = sorted(list(map(int, stdin.split(' '))), key=lambda x: x)\n    # Split the sorted input into two lists, one for ABCs and the other for ARCs\n    ABCs = difficulty_sorted[::2]\n    ARCs = difficulty_sorted[1::2]\n    # The number of solutions is the number of choices for K such that the number of problems for ARCs and the number of problems for ABCs are equal\n    return str(sum([1 for ABC in ABCs if len(ARCs) == len(ABCs)]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, h, l, r = map(int, stdin[0].split())\n    a = list(map(int, stdin[1].split()))\n    res = 0\n    for i in range(n):\n        if l <= a[i] <= r:\n            res += 1\n    return str(res)"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = [0] + a + [h]\n    a.sort()\n    dp = [0] * (h + 1)\n    for i in range(1, n + 1):\n        dp[a[i] - 1] = max(dp[a[i] - 1], dp[a[i - 1] - 1] + 1)\n    return str(dp[-1])\n\nassert(solution(input()) == '3')\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\" \")))\n    c = 0\n    for i in range(len(a) - 1):\n        c += (a[i + 1] - a[i] + 1) // (h + 1)\n    return str(c)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] >= l and a[i] <= r:\n            count += 1\n    return count\n\nassert (solution('''7 24 21 23''')) == 3\nassert (solution('''16 17 14 20 20 11 22''')) == 3\nassert (solution('''32''')) == 1\nassert (solution('''32''')) == 1\nassert (solution('''16 17 14 20 20 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3\nassert (solution('''16 17 14 14 19 11 22''')) == 3"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    max_good = 1\n    for i in range(0, len(a) - 1):\n        if a[i] + 1 <= h:\n            max_good += 1\n\n    return str(max_good)\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n\n    max_num = 0\n    for i in range(n):\n        current_max = 0\n        for j in range(i+1, n):\n            current_max += 1\n            if l <= a[j] <= r:\n                break\n            if a[j] < l:\n                current_max += 1\n            if a[j] > r:\n                break\n        max_num = max(max_num, current_max)\n    return str(max_num)"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    good_times = 0\n    for i in range(n):\n        if l <= a[i] < h:\n            good_times += 1\n        elif a[i] < l:\n            good_times += 2\n        else:\n            good_times += 1\n    return str(good_times)"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    b = [0] * n\n    for i in range(n):\n        b[i] = max(0, (l - a[i] + 1) * (r - a[i]) // 2)\n    print(max(b))\n\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n\n    n, h, l, r = list(map(int, stdin[0].split()))\n\n    a = list(map(int, stdin[1].split()))\n\n    # store the maximum number of good times Vova can obtain after going to sleep with this time point\n    curr_max = 0\n    prev_max = 0\n\n    # go through all time points\n    for i in range(1, n + 1):\n\n        # figure out the maximum number of good times at this time point\n        curr_max = max(curr_max, prev_max)\n        prev_max = 0\n\n        # figure out the maximum number of good times after going to sleep at this time point\n        j = i\n        if j - 1 >= 0:\n            while a[j] - a[j - 1] <= h and j - 1 >= 0:\n                prev_max += 1\n                j -= 1\n\n    return str(curr_max)"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n    pass\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return str(1)\n    l = [0] * n\n    for i in range(n):\n        l[i] = a[i] - i\n    l.sort(reverse=True)\n    k = 1\n    c = 0\n    for i in range(n):\n        if i == 0:\n            c += 1\n        else:\n            if l[i - 1] == k:\n                c += 1\n            else:\n                k += 1\n    return str(c)"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    problems = [int(i) for i in stdin.readline().split()]\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if problems[j] < problems[i] * 2:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n - 1]\n\nassert(solution('''10\n1 2 5 6 7 10 21 23 24 49''') == '4')\nassert(solution('''5\n2 10 50 110 250''') == '1')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4 7 12 100 150 199''') == '3')\nassert(solution('''6\n4"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return max(1, max(a) // 2)\n\nassert(solution(\"10\") == 4)\nassert(solution(\"5\") == 3)\nassert(solution(\"6\") == 1)\nassert(solution(\"6 5 4 7 2 3 1 10\") == 4)\nassert(solution(\"100 110 120 120 100 120\") == 1)\nassert(solution(\"10 2 50 110 250\") == 1)\nassert(solution(\"4 7 12 100 150 199\") == 3)\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution('''10\n1 2 5 6 7 10 21 23 24 49''') == '4'\nassert solution('''5\n2 10 50 110 250''') == '1'\nassert solution('''6\n4 7 12 100 150 199''') == '3'\nassert solution('''7\n4 7 12 100 150 199''') == '3'\nassert solution('''8\n4 7 12 100 150 199''') == '3'\nassert solution('''9\n4 7 12 100 150 199''') == '3'\nassert solution('''10\n4 7 12 100 150 199''') == '3'\nassert solution('''11\n4 7 12 100 150 199''') == '3'\nassert solution('''12\n4 7 12 100 150 199''') == '3'\nassert solution('''13\n4 7 12 100 150 199''') == '3'\nassert solution('''14\n4 7 12 100 150 199''') == '3'\nassert solution('''15\n4 7 12 100 150 199''') == '3'\nassert solution('''16\n4 7 12 100 150 199''') == '3'\nassert solution('''17\n4 7 12 100 150 199''') == '3'\nassert solution('''18\n4 7 12 100 150 199''') == '3'\nassert solution('''19\n4 7 12 100 150 199''') == '3'\nassert solution('''20\n4 7 12 100 150 199''') == '3'\nassert solution('''21\n4 7 12 100 150 199''') == '3'\nassert solution('''22\n4 7 12 100 150 199''') == '3'\nassert solution('''23\n4 7 12 100 150 199''') == '3'\nassert solution('''24\n4 7 12 100 150 199''') == '3'\nassert solution('''25\n4 7 12 100 150 199''') == '3'\nassert solution('''26\n4 7 12 100 150 199''') == '3'\nassert solution('''27\n4 7 12 100 150 199''') == '3'\nassert solution('''28\n4 7 12 100 150 199''') == '3'\nassert solution('''29\n4 7 12 100 150 199''') == '3'\nassert solution('''30\n4 7 12 100 150 199''') == '3'\nassert solution('''31\n4 7 12 100 150 199''') == '3'\nassert solution('''32\n4 7 12 100 150 199''') == '3'\nassert solution('''33\n4 7 12 100 150 199''') == '3'\nassert solution('''34\n4 7 12 100 150 199''') == '3'\nassert solution('''35\n4 7 12 100 150 199''') == '3'\nassert solution('''36\n4 7 12 100 150 199''') == '3'\nassert solution('''37\n4 7 12 100 150 199''') == '3'\nassert solution('''38\n4 7 12 100 150 199''') == '3'\nassert solution('''39\n4 7 12 100 150 199''') == '3'\nassert solution('''40\n4 7 12 100 150 199''') == '3'\nassert solution('''41\n4 7 12 100 150 199''') == '3'\nassert solution('''42\n4 7 12 100 150 199''') == '3'\nassert solution('''43\n4 7 12 100 150 199''') == '3'\nassert solution('''44\n4 7 12 100 150 199''') == '3'\nassert solution('''45\n4 7 12 100 150 199''') == '3'\nassert solution('''46\n4 7 12 100 150 199''') == '3'\nassert solution('''47\n4 7 12 100 150 199''') == '3'\nassert solution('''48\n4 7 12 100 150 199''') == '3'\nassert solution('''49\n4 7 12 100 150 199''') == '3'\nassert solution('''50\n4 7 12 100 150 199''') == '3'\nassert solution('''51\n4 7 12 100 150 199''') == '3'\nassert solution('''52\n4 7 12 100 150 199''') == '3'\nassert solution('''53\n4 7 12 100 150 199''') == '3'\nassert solution('''54\n4 7 12 100 150 199''') == '3'\nassert solution('''55\n4 7 12 100 150 199''') == '3'\nassert solution('''56\n4 7 12 100 150 199''') == '3'\nassert solution('''57\n4 7 12 100 150 199''') == '3'\nassert solution('''58\n4 7 12 100 150 199''') == '3'\nassert solution('''59\n4 7 12 100 150 199''') == '3'\nassert solution('''60\n4 7 12 100 150 199''') == '3'\nassert solution('''61\n4 7 12 100 150 199''') == '3'\nassert solution('''62\n4 7 12 100 150 199''') == '3'\nassert solution('''63\n4 7 12 100 150 199''') == '3'\nassert solution('''64\n4 7 12 100 150 199''') == '3'\nassert solution('''65\n4 7 12 100 150 199''') == '3'\nassert solution('''66\n4 7 12 100 150 199''') == '3'\nassert solution('''67\n4 7 12 100 150 199''') == '3'\nassert solution('''68\n4 7 12 100 150 199''') == '3'\nassert solution('''69\n4 7 12 100 150 199''') == '3'\nassert solution('''70\n4 7 12 100 150 199''') == '3'\nassert solution('''71"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    lcm = a[0]\n    for i in range(1, len(a)):\n        lcm = lcm * a[i] // gcd(lcm, a[i])\n    lcm = str(lcm)\n    res = \"\"\n    for i in range(len(lcm)):\n        res += str(a.index(int(lcm[i])) + 1)\n        res += \" \"\n    return res\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    assert len(a) == n\n    p = [[x, y] for x in range(1, n) for y in range(x, n + 1)]\n    result = ''\n    for x, y in p:\n        result = min(result, [lcm(a[x - 1], a[y - 1])])\n    return''.join(map(str, result))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.split()\n    return str(lcm(_, [int(e) for e in stdin.split()]))\n\nimport sys\n"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    l = [a[0]]\n    for i in range(1, n):\n        l.append(l[-1] * a[i])\n    min_lcm = max(l)\n    for i in range(1, n):\n        for j in range(i, n):\n            lcm = l[i] * l[j]\n            if lcm < min_lcm:\n                min_lcm = lcm\n                res = [i, j]\n    return \"{} {}\".format(res[0], res[1])\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    min_lcm = 10 ** 7 + 1\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            lcm = lcm_of_two_numbers(a[i], a[j])\n            min_lcm = min(min_lcm, lcm)\n\n    answer =''.join(map(str, answer))\n    return answer\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n < 2:\n        return None\n    return str(a[0]) + \" \" + str(a[n - 1])\n    # Your code here\n"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    res = []\n    for i in range(n):\n        for j in range(i, n):\n            if lcm(arr[i], arr[j]) < arr[i] * arr[j]:\n                res.append([i + 1, j + 1])\n    return''.join(list(map(str, res[0])))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    lcm = a[0]\n    for i in a[1:]:\n        lcm = lcm*i // math.gcd(lcm, i)\n    for i in range(n):\n        for j in range(i+1, n):\n            if lcm // math.gcd(a[i], a[j]) > lcm:\n                break\n        else:\n            return str(i+1) + \" \" + str(j+1)"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    l = list(map(int, stdin.readline().strip().split(' ')))\n    lcm = float('inf')\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            lcm = min(lcm, l[i]*l[j])\n    return str(l.index(lcm)+1)+' '+str(l.index(lcm, l.index(lcm)+1)+1)\n\nimport sys\n"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n\n    b = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if (a[i] % a[j]) == 0 and (a[j] % a[i]) == 0:\n                b[i] = max(a[i], a[j])\n                break\n\n    if n == 2:\n        return \"1 \" + \"1\"\n    else:\n        return \" \".join(map(str, b))"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    if n % 3 == 0:\n        return \"0\" * n\n    elif n % 3 == 1:\n        res = \"\"\n        for i in range(n):\n            if s[i] == \"0\":\n                res += \"1\"\n            elif s[i] == \"1\":\n                res += \"2\"\n            else:\n                res += \"0\"\n        return res\n    else:\n        res = \"\"\n        for i in range(n):\n            if s[i] == \"0\":\n                res += \"1\"\n            elif s[i] == \"1\":\n                res += \"2\"\n            else:\n                res += \"0\"\n        return res[::-1]\n\nassert solution('''3\n121''') == '021'\nassert solution('''6\n000000''') == '001122'\nassert solution('''6\n211200''') == '211200'\nassert solution('''6\n120110''') == '120120'\nprint(solution('''7\n614746'''))\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_chars = int(stdin.readline())\n    str_val = stdin.readline().strip()\n\n    stack = []\n    chars_left = 3\n    chars_right = 3\n    for i, v in enumerate(str_val):\n        if v == '0':\n            if chars_left > 0:\n                chars_left -= 1\n            else:\n                chars_right -= 1\n        elif v == '1':\n            if chars_right > 0:\n                chars_right -= 1\n            else:\n                chars_left -= 1\n        else:\n            if chars_left > 0 and chars_right > 0:\n                chars_left -= 1\n                chars_right -= 1\n            else:\n                if chars_left > 0:\n                    chars_left -= 1\n                else:\n                    chars_right -= 1\n        if chars_left == 0 and chars_right == 0:\n            break\n    if chars_left > 0:\n        stack.append('0')\n    if chars_right > 0:\n        stack.append('1')\n    stack.append('2')\n\n    return ''.join(stack[::-1])\n\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n123\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n3\n1120\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(solution(\"\"\"\n\"\"\") == \"012\")\nassert(s"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    s = lines[1]\n    s = s.replace('0', 'a')\n    s = s.replace('1', 'b')\n    s = s.replace('2', 'c')\n    return s"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    result = \"\"\n    r1 = \"0\" * n\n    r2 = \"1\" * n\n    r3 = \"2\" * n\n    numbers = [r1, r2, r3]\n    numbers.sort(key=lambda x: len(x))\n    for number in numbers:\n        if number.count(\"0\") == n and number.count(\"1\") == n and number.count(\"2\") == n:\n            return number\n    return result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    s_dict = {'0': 0, '1': 0, '2': 0}\n    for c in s:\n        s_dict[c] += 1\n    if s_dict['0'] == s_dict['1'] == s_dict['2']:\n        return s * 3\n    max_char = '0'\n    if s_dict['0'] > s_dict['1'] and s_dict['0'] > s_dict['2']:\n        max_char = '0'\n    elif s_dict['1'] > s_dict['2']:\n        max_char = '1'\n    else:\n        max_char = '2'\n    result = \"\"\n    for c in s:\n        if c == max_char:\n            result += c\n        else:\n            result += '0'\n            result += c\n            result += '1'\n    return result\n\nassert solution(\"121\") == \"021\"\nassert solution(\"211200\") == \"120120\"\nassert solution(\"000000\") == \"000\"\nassert solution(\"120110\") == \"120120\"\nassert solution(\"010100\") == \"010110\"\nassert solution(\"00100\") == \"00100\"\nassert solution(\"221200\") == \"221110\"\nassert solution(\"110100\") == \"110110\"\nassert solution(\"011000\") == \"01100\"\nassert solution(\"001100\") == \"00110\"\nassert solution(\"0011\") == \"00111\"\nassert solution(\"11\") == \"111\"\nassert solution(\"001\") == \"001\"\nassert solution(\"1111\") == \"11111\"\nassert solution(\"0111100\") == \"11111\"\nassert solution(\"1100101\") == \"1110011\"\nassert solution(\"00111011\") == \"1110011\"\nassert solution(\"00111011\") == \"1110011\"\nassert solution(\"01111011\") == \"1110011\"\nassert solution(\"1110111\") == \"1110011\"\nassert solution(\"1110111\") == \"1110011\"\nassert solution(\"0110111\") == \"1110011\"\nassert solution(\"111011\") == \"1110011\"\nassert solution(\"11100\") == \"11100\"\nassert solution(\"11111\") == \"11111\"\nassert solution(\"111010\") == \"111010\"\nassert solution(\"110110\") == \"111010\"\nassert solution(\"111000\") == \"111010\"\nassert solution(\"110000\") == \"110000\"\nassert solution(\"110000\") == \"110000\"\nassert solution(\"1101\") == \"1101\"\nassert solution(\"1101\") == \"1101\"\nassert solution(\"00111010\") == \"111010\"\nassert solution(\"00111011\") == \"111011\"\nassert solution(\"00111010\") == \"111010\"\nassert solution(\"00111011\") == \"111011\"\nassert solution(\"111010\") == \"111010\"\nassert solution(\"111011\") == \"111011\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"1110010\") == \"1110010\"\nassert solution(\"1110011\") == \"1110011\"\nassert solution(\"1110010\") == \"1110010\"\nassert solution(\"1110011\") == \"1110011\"\nassert solution(\"111010\") == \"111010\"\nassert solution(\"111011\") == \"111011\"\nassert solution(\"111010\") == \"111010\"\nassert solution(\"111011\") == \"111011\"\nassert solution(\"111010\") == \"111010\"\nassert solution(\"111011\") == \"111011\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\nassert solution(\"111001\") == \"111001\"\nassert solution(\"111000\") == \"111000\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin[0]\n    if n < 3:\n        return string\n    if n % 3!= 0:\n        return string\n\n    result = ''\n\n    for i in range(n):\n        if string[i] == '2':\n            result += '0'\n        elif string[i] == '1':\n            result += '1'\n        elif string[i] == '0':\n            result += '2'\n        else:\n            result += string[i]\n\n    return result"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    a = 0\n    b = 0\n    c = 0\n    for i in range(0, n):\n        if s[i] == '1':\n            a += 1\n        elif s[i] == '0':\n            b += 1\n        else:\n            c += 1\n    if a > b:\n        if a > c:\n            return '0' * a\n        else:\n            return '1' * (c + 1)\n    else:\n        if b > c:\n            return '1' * b\n        else:\n            return '2' * (c + 1)\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('121')\n    '021'\n    >>> solution('000000')\n    '001122'\n    >>> solution('211200')\n    '211200'\n    >>> solution('120110')\n    '120120'\n    \"\"\"\n    n = int(stdin.strip())\n    s = stdin.strip()\n\n    if n % 3!= 0:\n        return ''\n\n    result = ''\n    for i in range(n):\n        if s[i] == '0':\n            result += '1'\n        elif s[i] == '1':\n            result += '2'\n        else:\n            result += '0'\n\n    return result\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    chars = [s[i] for i in range(n)]\n    pos = chars.index('0')\n    if pos == n - 1:\n        return s\n    elif pos == n - 2:\n        if s[pos - 1] == '0':\n            return s[:pos - 1] + '1' + '0' * (n - 1 - pos)\n        elif s[pos - 1] == '1':\n            return s[:pos - 1] + '2' + '0' * (n - 1 - pos)\n        else:\n            return s[:pos - 1] + '2' + '0' * (n - 1 - pos) + '1'\n    else:\n        if chars[pos + 1] == '0':\n            if chars[pos + 2] == '0':\n                return s[:pos - 1] + '1' + '0' * (n - 1 - pos) + '2'\n            elif chars[pos + 2] == '1':\n                return s[:pos - 1] + '2' + '0' * (n - 1 - pos) + '1'\n            else:\n                return s[:pos - 1] + '2' + '0' * (n - 1 - pos) + '1' + '0'\n        elif chars[pos + 1] == '1':\n            if chars[pos + 2] == '0':\n                return s[:pos - 1] + '2' + '0' * (n - 1 - pos) + '1'\n            elif chars[pos + 2] == '1':\n                return s[:pos - 1] + '2' + '0' * (n - 1 - pos) + '1' + '0'\n            else:\n                return s[:pos - 1] + '2' + '0' * (n - 1 - pos) + '1' + '0'\n        else:\n            if chars[pos + 2] == '0':\n                return s[:pos - 1] + '2' + '0' * (n - 1 - pos) + '1' + '0'\n            elif chars[pos + 2] == '1':\n                return s[:pos - 1] + '2' + '0' * (n - 1 - pos) + '1' + '0' + '1'\n            else:\n                return s[:pos - 1] + '2' + '0' * (n - 1 - pos) + '1' + '0' + '1' + '0'\n\n\nassert (solution('') == '')\nassert (solution('1') == '1')\nassert (solution('11') == '11')\nassert (solution('21') == '211')\nassert (solution('111') == '1111')\nassert (solution('0111') == '11111')\nassert (solution('111111') == '1111111')\nassert (solution('121212121212') == '11111111111')\nassert (solution('111122211111') == '111112222211111')\nassert (solution('111122211111123') == '111112222211111123')\nassert (solution('111122211111123456789') == '111112222211111123456789')\nassert (solution('11112221111112345678910') == '111112222211111123456789101')\nassert (solution('111122211111123456789101112') == '111112222211111123456789101112')\n\nprint(solution(''))\nprint(solution('1'))\nprint(solution('11'))\nprint(solution('21'))\nprint(solution('111'))\nprint(solution('0111'))\nprint(solution('111111'))\nprint(solution('121212121212'))\nprint(solution('111122211111'))\nprint(solution('111122211111123'))\nprint(solution('111122211111123456789'))\nprint(solution('11112221111112345678910'))\nprint(solution('111122211111123456789101112'))\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    d = collections.defaultdict(int)\n    for c in s:\n        d[c] += 1\n\n    m = min(d[c] for c in d if c in \"012\")\n    if m % 3!= 0:\n        return \"0\" * (m % 3) + \"\".join(c * (d[c] // m) for c in \"012\")\n\n    m = min(d[c] for c in d if c in \"021\")\n    if m % 3!= 1:\n        return \"0\" * (m % 3) + \"\".join(c * (d[c] // m) for c in \"021\")\n\n    m = min(d[c] for c in d if c in \"012\")\n    if m % 3!= 2:\n        return \"0\" * (m % 3) + \"\".join(c * (d[c] // m) for c in \"012\")\n\n    return \"\".join(c * (d[c] // m) for c in \"021\")\n\nprint(solution(None))\n"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    if m == 0:\n        return '0'\n    if m == 1:\n        return '1' * n\n    if n == 1:\n        return '1'\n    ways = [1] * (n + 1)\n    ways[1] = 1\n    ways[2] = 2\n    for step in range(3, n + 1):\n        ways[step] = (ways[step - 1] + ways[step - 2]) % 1000000007\n    return str(ways[n])"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    memo = {}\n    def helper(N: int, M: int) -> int:\n        if N == 1:\n            return 1\n        if (N, M) not in memo:\n            memo[(N, M)] = (1 if N == 1 else 0) + helper(N-1, M) + helper(N-2, M)\n        return memo[(N, M)]\n    return str(helper(n, m))"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin: the input from stdin\n\n    Returns:\n        str: the output\n    \"\"\"\n    n, m = [int(x) for x in stdin.split(\" \")]\n    steps = [int(x) for x in stdin.split(\" \")]\n    count = [1] * (n + 1)\n    for i in range(1, m + 1):\n        count[i] = sum(count[i - j] for j in range(1, n + 1) if steps[i - 1] > steps[i - j])\n    return str(count[m] % 1000000007)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # n, m = map(int, stdin.split(\" \"))\n    N, M = map(int, stdin.split())\n    res = 0\n    while N > 0:\n        N -= 1\n        res += M % 2\n        M = M // 2\n    return str(res % 1000000007)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.strip().split(\" \")]\n    a = [int(s) for s in stdin.strip().split(\" \")]\n    count = 0\n    stairs = [0] * (n+1)\n    stairs[0] = 1\n    stairs[1] = 1\n    stairs[2] = 2\n    for i in range(3, n+1):\n        for j in range(m):\n            stairs[i] += stairs[i-j-1] * a[j]\n        stairs[i] %= 1000000000\n        count += stairs[i]\n    return str(count)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()][1:]\n\n    # TODO: implement solution here\n    return \"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    values = list(map(int, stdin.split(' ')))\n\n    if n == 1:\n        return str(values[0])\n\n    values[0] += 1\n    for i in range(m):\n        values[i] += values[i - 1]\n\n    return str(values[m - 1] - 1)\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n\n    # dp[i][j]: ways to reach i steps with j broken steps\n    # dp[i][j] = dp[i][j-1] + dp[i-1][j-1]\n    dp = [[0 for _ in range(N + 1)] for _ in range(M + 1)]\n    dp[0][0] = 1\n    for i in range(1, N + 1):\n        dp[1][i] = i\n    for j in range(2, M + 1):\n        for i in range(1, N + 1):\n            dp[j][i] = dp[j][i - 1] + dp[j - 1][i - 1]\n    return str(dp[M][N])"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(i) for i in stdin.readline().strip().split()]\n\n    first_step = a[0]\n    second_step = a[1]\n\n    first_count = 0\n    second_count = 0\n\n    for i in range(2, n):\n        if i == first_step:\n            first_count += 1\n        elif i == second_step:\n            second_count += 1\n\n    print((first_count * second_count) % 1000000007)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(i) for i in stdin.split()]\n    K = min(k, 10**15 - x)\n    return str(max(min(x + d, 10**15 - x), -K))\n\nassert(solution(input()) == \"2\")\n'''\n\n'''\nThe man wants to travel from a start point X to a destination point Y (both positive and negative). He wishes to make at most N moves, and he may choose moves of a fixed distance D.\n\nNow, he has N moves and D moves, and the absolute value of the coordinates of the destination is smaller than 10^15. He wants to make N moves so that the absolute value of the coordinate of the destination will be the smallest possible.\n\nGiven the absolute value of X and the absolute value of Y, find the minimum absolute value of the coordinate of the destination.\n\n-----Input-----\nThe first line of the input contains two space-separated integers, N and D, the number of moves and the fixed distance D, respectively.\nThe second line contains two space-separated integers, X and Y, the current position of the man and the destination of the man, respectively.\n\n-----Output-----\nPrint the minimum possible absolute value of the coordinate of the destination.\n\n-----Sample Input-----\n4 2\n2 4\n\n-----Sample Output-----\n2\n\nHe is now at (2 - 4 = -2) and wants to make 4 moves, and moves of a fixed distance of 2.\n\nHe can make the following moves:\n - Move from coordinate 2 to (2 + 4 =) 6.\n - Move from coordinate 6 to (6 - 2 =) 4.\n - Move from coordinate 4 to (4 - 2 =) 2.\n - Move from coordinate 2 to (2 - 2 =) 0.\nSo the absolute value of the coordinate of the destination is 2, and we cannot make it smaller.\n'''\n\n\n'''\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(x) for x in stdin.split(' ')]\n    return str(min(abs(x - (x + d)), abs(x - (x - d))))"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split(' '))\n    if (x + d) % 2:\n        return abs(x + k * d - 1)\n    return abs(x + k * d)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = stdin.split(\" \")\n    X, K, D = int(X), int(K), int(D)\n    print(min(abs(X + D), abs(X - D)))"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    inputs = stdin.split(\" \")\n    X, K, D = map(int, inputs)\n    \n    return str(X - K * D)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    return str(min(x + d, x - d))\n\nprint(solution(input()))\n\nassert(solution('6 2 4') == '2')\nassert(solution('6 -2 4') == '2')\nassert(solution('-6 2 4') == '2')\nassert(solution('-6 -2 4') == '2')\nassert(solution('-6 -2 -4') == '-2')\nassert(solution('-6 -2 -4') == '-2')\nassert(solution('-6 -2 -4') == '-2')\nassert(solution('-6 -2 -4') == '-2')\n\"\"\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    k %= 2\n    if k == 0:\n        return abs(x - x + d)\n    else:\n        return abs(x - x - d)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(x) for x in stdin.split()]\n    x_min = min(x, abs(x - d))\n    x_max = max(x, abs(x - d))\n\n    return str(x_max)"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Your code here\n    #\n    return ''\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return solution(n // 2) + solution(n // 2 + n % 2)\n\n\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) // 2)\n\nassert(solution(input()) == str(int(input()) // 2))\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(2 * int(stdin))"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) // 5)"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(nth_digit(int(stdin)))\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f'{(n*(n+1)//2) // 60}'\n\nassert(solution('14') == '0')\nassert(solution('571576') == '10')\nassert(solution('2128506') == '3')\n\n'''\n\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert solution('''11''') == '2'\nassert solution('''14''') == '0'\nassert solution('''61441''') == '2'\nassert solution('''571576''') == '10'\nassert solution('''2128506''') == '3'\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the time in seconds to find an error in the code.\n    '''\n    return str(int((int(stdin) - 4) / 5))\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(math.ceil(math.sqrt(n)))"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return'solution'"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"1\"\n    elif a == 2:\n        return \"2\"\n    elif a == 3:\n        return \"4\"\n    elif a == 4:\n        return \"7\"\n    elif a == 5:\n        return \"14\"\n    elif a == 6:\n        return \"21\"\n    elif a == 7:\n        return \"28\"\n    elif a == 8:\n        return \"35\"\n    elif a == 9:\n        return \"42\"\n    elif a == 10:\n        return \"49\"\n    elif a == 11:\n        return \"56\"\n    elif a == 12:\n        return \"63\"\n    elif a == 13:\n        return \"70\"\n    elif a == 14:\n        return \"77\"\n    elif a == 15:\n        return \"84\"\n    elif a == 16:\n        return \"91\"\n    elif a == 17:\n        return \"98\"\n    elif a == 18:\n        return \"105\"\n    elif a == 19:\n        return \"112\"\n    elif a == 20:\n        return \"119\"\n    elif a == 21:\n        return \"126\"\n    elif a == 22:\n        return \"133\"\n    elif a == 23:\n        return \"140\"\n    elif a == 24:\n        return \"147\"\n    elif a == 25:\n        return \"154\"\n    elif a == 26:\n        return \"161\"\n    elif a == 27:\n        return \"168\"\n    elif a == 28:\n        return \"175\"\n    elif a == 29:\n        return \"182\"\n    elif a == 30:\n        return \"189\"\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\na = int(input())"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    if a == 0:\n        return \"0\"\n    if a < 0:\n        return \"-1\"\n    if a == 1:\n        return \"1\"\n    if a == 2:\n        return \"2\"\n    if a == 3:\n        return \"4\"\n    if a % 2 == 0:\n        return str(int(str(a // 2)) * 2)\n    else:\n        return str(int(str(3 * a + 1)) // 2)\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"1\")\n    27\n    >>> solution(\"7\")\n    7\n    >>> solution(\"8\")\n    7\n    '''\n    n = int(stdin.strip())\n    factors = [1, 2, 4, 8, 16, 32, 64, 128]\n    index = 0\n    while n:\n        if n % factors[index]:\n            n = n // factors[index]\n        else:\n            index += 1\n    return factors[index-1]"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    ''\n    \"\"\"\n    return str(int(stdin) ** 2)\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline()\n\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = 0\n    while a > 0:\n        result += (a % 10) ** 3\n        a //= 10\n    return result"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    return str(a * (a + 1) / 2)\n\nprint(solution(None))\nprint(solution(\"\"))\nprint(solution(\"\\n\"))\nprint(solution(\"\\r\"))\nprint(solution(\"\\t\"))\nprint(solution(\"\\n\\n\"))\nprint(solution(\"1\"))\nprint(solution(\"2\"))\nprint(solution(\"3\"))\nprint(solution(\"0\"))\nprint(solution(\"-1\"))\nprint(solution(\"-2\"))\nprint(solution(\"-3\"))\nprint(solution(\"0\\n\"))\nprint(solution(\"0\\r\"))\nprint(solution(\"0\\t\"))\nprint(solution(\"1\\n\"))\nprint(solution(\"2\\n\"))\nprint(solution(\"3\\n\"))\nprint(solution(\"0\\n\\n\"))\nprint(solution(\"0\\r\\n\"))\nprint(solution(\"0\\t\\n\"))\nprint(solution(\"1\\r\\n\"))\nprint(solution(\"2\\r\\n\"))\nprint(solution(\"3\\r\\n\"))\nprint(solution(\"0\\r\\n\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\"))\nprint(solution(\"1\\t\\r\\n\"))\nprint(solution(\"2\\t\\r\\n\"))\nprint(solution(\"3\\t\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\\r\\n\"))\nprint(solution(\"1\\t\\r\\n\\r\\n\"))\nprint(solution(\"2\\t\\r\\n\\r\\n\"))\nprint(solution(\"3\\t\\r\\n\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\\t\\r\\n\"))\nprint(solution(\"1\\t\\r\\n\\t\\t\\r\\n\"))\nprint(solution(\"2\\t\\r\\n\\t\\t\\r\\n\"))\nprint(solution(\"3\\t\\r\\n\\t\\t\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\\t\\t\\t\\r\\n\"))\nprint(solution(\"1\\t\\r\\n\\t\\t\\t\\r\\n\"))\nprint(solution(\"2\\t\\r\\n\\t\\t\\t\\r\\n\"))\nprint(solution(\"3\\t\\r\\n\\t\\t\\t\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"1\\t\\r\\n\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"2\\t\\r\\n\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"3\\t\\r\\n\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"1\\t\\r\\n\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"2\\t\\r\\n\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"3\\t\\r\\n\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"1\\t\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"2\\t\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"3\\t\\r\\n\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"1\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"2\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"3\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"1\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"2\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"3\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"1\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"2\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"3\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"1\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"2\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"3\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"1\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"2\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"3\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"1\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"2\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"3\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"1\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"2\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"3\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\"))\nprint(solution(\"0\\t\\r\\n\\t"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4 == 0:\n        return \"1\"\n    return \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0 or a % 3 == 0:\n        return \"0\"\n    else:\n        return \"1\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    count = 0\n    if a == 1:\n        return 0\n    if a == 2:\n        return 1\n    if a == 3:\n        return 1\n    if a % 2 == 0:\n        count += (a // 2)\n        return count\n    if a % 3 == 0:\n        count += (a // 3)\n        return count\n    if a % 5 == 0:\n        count += (a // 5)\n        return count\n    if a % 7 == 0:\n        count += (a // 7)\n        return count\n    return count\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if (a // 100) % 10 == 0:\n        return '0'\n    else:\n        return '1'\n\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The first character is a number between 10 and 999\n    \"\"\"\n    print(int(stdin[0]) == int(stdin[1:]))\n    return stdin\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    if int(n) <= 1:\n        return '1'\n    else:\n        return '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 0:\n        return \"0\"\n    return str(1) if a % 2 == 0 else \"1\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(a % 2)\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return str(n)"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    print(a)\nsolution(None)\n\n'''\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline().strip())\n    nums = [int(x) for x in stdin.readline().strip().split(' ')]\n    print(nums)\n    return str(max(nums))"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n-----Testcases-----\n\nInput\n3\n2 3 1\n1\n5\n\nOutput\n5\n\nInput\n2\n1\n5\n\nOutput\n5\n\nInput\n1\n1\n\nOutput\n1\n\nInput\n2\n1 2\n\nOutput\n1\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    arr = stdin.readline()\n    arr = [int(num) for num in arr.split(' ')]\n    \n    return str(len(arr))\n\nassert solution('3') == '2'\nassert solution('2 3') == '1'\nassert solution('2 3 4') == '3'\nassert solution('2 3 4 1') == '3'\nassert solution('2 3 4 5') == '1'\nassert solution('2 3 4 5 6') == '0'\nassert solution('2 3 4 5 6 7') == '0'\nassert solution('2 3 4 5 6 7 8') == '0'\nassert solution('2 3 4 5 6 7 8 9') == '0'\nassert solution('2 3 4 5 6 7 8 9 10') == '0'\nassert solution('2 3 4 5 6 7 8 9 10 11') == '0'\n\n-----Answer-----\n\nhttps://www.codewars.com/kata/the-number-of-members-of-a-set-e1f03c10a\n\n## Alternative (Version 1)\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    #O(n)\n    last_two = sum(a[-2:])\n    #O(1)\n    last_one = sum(a[-1:])\n    #O(n)\n    first_one = sum(a[0:1])\n    #O(n)\n    first_two = sum(a[1:2])\n    \n    return (last_two + last_one + first_one + first_two) % 10"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. E.g.\n    number = int(stdin.split(' ')[0])\n    list = stdin.split(' ')[1:]\n    list = list[:number]\n    sum = 0\n    for i in range(len(list)):\n        sum += int(list[i])\n    print(sum)"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    print(n)\n    print(x)\n    return str(n)\n\nassert solution('''2\n2 1 3 1''') == '2'\nassert solution('''2\n1 1 1 1''') == '0'\nassert solution('''6\n1 1 1 1 1 1''') == '1'\nassert solution('''1\n2 3 4 5 6''') == '6'\nassert solution('''4\n1 2 3 4''') == '2'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '10'\nassert solution('''8\n1 2 3 4 5 6 7 8''') == '0'\nassert solution('''8\n1 2 3 4 5 6 7''') == '6'\nassert solution('''1\n3\n2 1''') == '1'\nassert solution('''1\n0''') == '0'\nassert solution('''1\n1''') == '1'\nassert solution('''1\n2''') == '2'\nassert solution('''1\n3''') == '3'\nassert solution('''1\n4''') == '4'\nassert solution('''1\n5''') == '5'\nassert solution('''1\n6''') == '6'\nassert solution('''1\n7''') == '7'\nassert solution('''1\n8''') == '8'\nassert solution('''1\n9''') == '9'\nassert solution('''1\n10''') == '10'\nassert solution('''1\n11''') == '11'\nassert solution('''1\n12''') == '12'\nassert solution('''1\n13''') == '13'\nassert solution('''1\n14''') == '14'\nassert solution('''1\n15''') == '15'\nassert solution('''1\n16''') == '16'\nassert solution('''1\n17''') == '17'\nassert solution('''1\n18''') == '18'\nassert solution('''1\n19''') == '19'\nassert solution('''1\n20''') == '20'\nassert solution('''1\n21''') == '21'\nassert solution('''1\n22''') == '22'\nassert solution('''1\n23''') == '23'\nassert solution('''1\n24''') == '24'\nassert solution('''1\n25''') == '25'\nassert solution('''1\n26''') == '26'\nassert solution('''1\n27''') == '27'\nassert solution('''1\n28''') == '28'\nassert solution('''1\n29''') == '29'\nassert solution('''1\n30''') == '30'\nassert solution('''1\n31''') == '31'\nassert solution('''1\n32''') == '32'\nassert solution('''1\n33''') == '33'\nassert solution('''1\n34''') == '34'\nassert solution('''1\n35''') == '35'\nassert solution('''1\n36''') == '36'\nassert solution('''1\n37''') == '37'\nassert solution('''1\n38''') == '38'\nassert solution('''1\n39''') == '39'\nassert solution('''1\n40''') == '40'\nassert solution('''1\n41''') == '41'\nassert solution('''1\n42''') == '42'\nassert solution('''1\n43''') == '43'\nassert solution('''1\n44''') == '44'\nassert solution('''1\n45''') == '45'\nassert solution('''1\n46''') == '46'\nassert solution('''1\n47''') == '47'\nassert solution('''1\n48''') == '48'\nassert solution('''1\n49''') == '49'\nassert solution('''1\n50''') == '50'\nassert solution('''1\n51''') == '51'\nassert solution('''1\n52''') == '52'\nassert solution('''1\n53''') == '53'\nassert solution('''1\n54''') == '54'\nassert solution('''1\n55''') == '55'\nassert solution('''1\n56''') == '56'\nassert solution('''1\n57''') == '57'\nassert solution('''1\n58''') == '58'\nassert solution('''1\n59''') == '59'\nassert solution('''1\n60''') == '60'\nassert solution('''1\n61''') == '61'\nassert solution('''1\n62''') == '62'\nassert solution('''1\n63''') == '63'\nassert solution('''1\n64''') == '64'\nassert solution('''1\n65''') == '65'\nassert solution('''1\n66''') == '66'\nassert solution('''1\n67''') == '67'\nassert solution('''1\n68''') == '68'\nassert solution('''1\n69''') == '69'\nassert solution('''1\n70''') == '70'\nassert solution('''1\n71''') == '71'\nassert solution('''1\n72''') == '72'\nassert solution('''1\n73''') == '73'\nassert solution('''1\n74''') == '74'\nassert solution('''1\n75''') == '75'\nassert solution('''1\n76''') == '76'\nassert solution('''1\n77''') == '77'\nassert solution('''1\n78''') == '78'\nassert solution('''1\n79''') == '79'\nassert solution('''1\n80''') == '80'\nassert solution('''1\n81''') == '81'\nassert solution('''1\n82''') == '82'\nassert solution('''1\n83''') == '83'\nassert solution('''1\n84''') == '84'\nassert solution('''1\n85''') == '85'\nassert solution('''1\n86''') == '86'\nassert solution('''1\n87''') == '87'\nassert solution('''1\n88''') == '88'\nassert solution('''1\n89''') == '89'\nassert solution('''1\n90''') == '90'\nassert solution('''1\n91''') == '91'\nassert solution('''1\n92''') == '92'\nassert solution('''1\n93''') == '93'\nassert solution('''1\n94''') == '94'\nassert solution('''1\n95''') == '95'\nassert solution('''1\n96''') == '96'\nassert solution('''1\n97''') == '97'\nassert solution('''1\n98''') == '98'\nassert solution('''1\n99''') == '99'\nassert solution('''1\n100''') == '100'\nassert solution('''2\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    print(a[0] + a[1] + a[2])"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(i: int, j: int, k: int) -> int:\n        if i > j:\n            return 0\n        if i == j:\n            return k\n        if k == 1:\n            return i\n        return 1 + solve(i + 1, j, k - 1)\n    for _ in range(int(stdin.readline())):\n        n, k = [int(x) for x in stdin.readline().split()]\n        print(solve(1, n, k))\nsolution(stdin)\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n\n    for _ in range(T):\n        n, k = map(int, stdin.readline().split())\n        print(solution_optimized(n, k))\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, k = [int(x) for x in stdin.split()]\n        if k < n:\n            print(1)\n        elif k == n:\n            print(k)\n        else:\n            print(k - n + 1)\n    return stdin\n\n\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(input()), input())"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        n, k = [int(x) for x in stdin.split(\" \")]\n        # print(n, k)\n        # print(n - 1)\n        if k * n == n:\n            print(k)\n        elif k * n > n:\n            print(k - 1)\n        else:\n            print(n - (k - 1) * n)\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    if k == 1:\n        return '1'\n    elif k == 2:\n        return str(n * 2)\n    elif n == k:\n        return str(n)\n    else:\n        return str(n * 2 - 1)"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n == k:\n        return str(k)\n    if n > k:\n        return str(k+1)\n    if k == 0:\n        return str(0)\n    return str(n+1)\n\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    pass\n\ntest_cases = [\n    {\n        'input': \"\"\"5 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n    \"\"\",\n        'output': \"\"\"2\n8\n1\n999999733\n1\n    \"\"\",\n    },\n    {\n        'input': \"\"\"7 11\n7 7\n5 10\n2 1\n1 1000000000\n9 1000000000\n9 1000000000\n9 1000000000\n    \"\"\",\n        'output': \"\"\"1\n7\n7\n5\n9\n9\n9\n9\n    \"\"\",\n    },\n    {\n        'input': \"\"\"5 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n    \"\"\",\n        'output': \"\"\"2\n8\n1\n999999733\n1\n    \"\"\",\n    },\n    {\n        'input': \"\"\"5 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n    \"\"\",\n        'output': \"\"\"2\n8\n1\n999999733\n1\n    \"\"\",\n    },\n    {\n        'input': \"\"\"5 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n    \"\"\",\n        'output': \"\"\"2\n8\n1\n999999733\n1\n    \"\"\",\n    },\n]\nfor t in test_cases:\n    print(solution(t['input']))\n\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, k = stdin.readline().split()\n        n, k = int(n), int(k)\n        num = 0\n        while n >= k:\n            n -= k\n            num += 1\n        print(num)"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k, *s = map(int, stdin.split())\n    p = map(int, stdin.split())\n    k = n * k // 2\n    cnt = 0\n    for i in range(m):\n        if s[i] % 2 == p[i] % 2:\n            cnt += 1\n    return str(cnt)\n\nassert(solution('''2 2\n2 1 2\n1 2\n0 1\n''') == '1')\nassert(solution('''3 4\n3 4 3 1\n1 1 1 1\n0 0 0 0\n''') == '0')\nassert(solution('''4 2\n1 2 1 2\n1 2 1 2\n1 2 1 2\n1 2 1 2\n0 1 0 0\n''') == '4')\nassert(solution('''3 3\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n0 1 0\n''') == '1')\nassert(solution('''3 3\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n0 0 0 0\n''') == '0')\nassert(solution('''4 4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n0 0 0 0 0\n''') == '0')\nassert(solution('''3 2\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n0 1 0\n''') == '2')\nassert(solution('''4 4\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n0 0 0 0 0\n''') == '2')\nassert(solution('''1 2\n1 2\n0 1\n''') == '0')\nassert(solution('''1 2\n1 2\n0 1\n1 2\n0 1\n''') == '1')\nassert(solution('''1 2\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n0 1\n1 2\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))\n\"\"\"\n\n\"\"\"\nSample Input\n\n2 2\n2 1 2\n1 2\n0 1\n\nSample Output\n\n1\n\nExplanation\n\nThere are four possible combinations of states of (Switch 1, Switch 2):\n\n(on, on): Switch 1 and 2 are both \"on\".\n(on, off): Switch 1 is \"on\" and Switch 2 is \"off\".\n(off, on): Switch 1 is \"off\" and Switch 2 is \"on\".\n(off, off): Switch 1 and Switch 2 are both \"off\".\nThere is only one possible combination of states of (Switch 1, Switch 2) that lights all the bulbs.\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split(' ')))\n    k = list(map(int, stdin.split(' ')))\n    p = list(map(int, stdin.split(' ')))\n    result = 0\n    for i in range(N):\n        if p[i] % 2 == 0:\n            result += k[i]\n    return str(result)\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    k_1, *l_1 = list(map(int, stdin.split(' ')))\n    k_M, *l_M = list(map(int, stdin.split(' ')))\n    p_1, *l_p = list(map(int, stdin.split(' ')))\n    return '{}'.format(2**(k_1*p_1) - 2**(k_M*p_1) - 2**(k_1*p_1 - k_M*p_1))\n\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N, M = map(int, stdin.strip().split(' '))\n    k_1_list = [int(x) for x in stdin.strip().split(' ')]\n    p_list = [int(x) for x in stdin.strip().split(' ')]\n    \n    # Get combinations\n    all_combinations = get_combinations(k_1_list, p_list, N, M)\n    \n    # Print the answer\n    print(len(all_combinations))\n    for combination in all_combinations:\n        print(' '.join(str(x) for x in combination))\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    k = int(stdin.readline().strip())\n    pattern = [int(stdin.readline().strip()) for i in range(k)]\n    res = 0\n\n    for p in pattern:\n        res += (n + p - 1) // p\n    return str(res)"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split()]\n    k = [[int(i) for i in stdin.split()] for i in range(M)]\n    p = [int(i) for i in stdin.split()]\n    L = [i for i in range(1, N+1)]\n    result = []\n    for i in range(0, N):\n        if p[i] % 2 == 0:\n            for j in range(0, M):\n                if k[j][i] in L:\n                    L.remove(k[j][i])\n        else:\n            for j in range(0, M):\n                if k[j][i] not in L:\n                    L.remove(k[j][i])\n    print(len(L))"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    k = list(map(int, stdin.split(\" \")))\n    p = list(map(int, stdin.split(\" \")))\n    return str(find_answer(n, m, k, p))\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    k_list = [int(x) for x in stdin.split()]\n    p_list = [int(x) for x in stdin.split()]\n    \n    assert len(k_list) == M\n    assert len(p_list) == M\n    \n    if M == 0:\n        return '0'\n    \n    # The \"on\" state is the number of switches that are \"on\" among the k switches\n    on_state = 0\n    for i in range(M):\n        on_state += k_list[i] % 2\n    \n    # Solve the equivalent linear program\n    # x_ij = 1 if i_th bulb is \"on\"\n    # x_ij = 0 if i_th bulb is \"off\"\n    x_list = [[0] * M for _ in range(2 ** on_state)]\n    for i in range(2 ** on_state):\n        # Compute the first \"on\" state of the i_th bulb\n        on_i = 0\n        for j in range(M):\n            # If the j_th bulb is \"on\", increment on_i by k_j\n            if (i >> j) & 1 == 1:\n                on_i += k_list[j] % 2\n        \n        if on_i % 2 == 0:\n            x_list[i] = [1] * M\n        else:\n            x_list[i] = [0] * M\n    \n    # Compute the number of \"on\" and \"off\" states of the switches\n    for i in range(N):\n        # Count the number of \"on\" switches in the i_th bulb\n        on_i = 0\n        for j in range(M):\n            # If the j_th bulb is \"on\", increment on_i by k_j\n            if (i >> j) & 1 == 1:\n                on_i += k_list[j] % 2\n        \n        # Count the number of \"on\" switches\n        if on_state % 2 == 0:\n            num_on = on_state\n        else:\n            num_on = on_state - 1\n        \n        # For the current bulb, count the number of \"on\" and \"off\" states\n        num_on_off = 0\n        for j in range(M):\n            if (i >> j) & 1 == 1:\n                # If the j_th bulb is \"on\", increment num_on_off by p_j\n                if (on_state >> j) & 1 == 1:\n                    num_on_off += p_list[j]\n        \n        # Store the result in the x_list\n        x_list[num_on_off] = x_list[num_on_off][:i] + [1] + x_list[num_on_off][i + 1:]\n    \n    # Compute the number of combinations\n    comb = 0\n    for i in range(2 ** on_state):\n        if x_list[i][0] == 1:\n            comb += 1\n    \n    return str(comb)\n\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 1 2\") == \"1\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 2 2\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2 1 1\") == \"0\"\nassert solution(\"2 1 2 2\") == \"2\"\nassert solution(\"2 1 1 1\") == \"0\"\nassert solution(\"2 1 1 1 2\") == \"1\"\nassert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"2 1 1 1 1 1\") == \"1\"\nassert solution(\"2 1 1 1 1 1 2\") == \"1\"\nassert solution(\"2 1 1 1 1 1 1 2\") == \"1\"\nassert solution(\"2 1 1 1 1 1 1 1 2\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 2\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 2\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 1 2\") == \"0\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"1 2 2\") == \"0\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2 1 1\") == \"0\"\nassert solution(\"2 1 2 2\") == \"0\"\nassert solution(\"2 1 1 1\") == \"0\"\nassert solution(\"2 1 1 1 2\") == \"0\"\nassert solution(\"1 1 1 1 1\") == \"0\"\nassert solution(\"2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    on_state = [int(x) for x in stdin.split()]\n    off_state = [int(x) for x in stdin.split()]\n    print(combinations(on_state, m, off_state))\n\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split(' '))\n    A, B = a * 100, b * 100\n    H, M = h * 60, m * 60\n    \n    hour_len = A / 2\n    min_len = B / 2\n    \n    time = (H * (hour_len - min_len) + M * (min_len - hour_len)) / 2\n    \n    return f\"{time:.8f}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.strip().split())\n    H = H % 12\n    M = M % 60\n    radius = A + B\n    angle = H * (60 * 2 * 3.14) / 360 + M * 3.14\n    return str(radius * radius * angle / 2 / 3.14)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split(' '))\n    distance_in_centimeters = 12 * H + 60 * M - (A + B)\n    return '{:.10f}'.format(distance_in_centimeters / 100)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    hours = 12 * H + M\n    total_seconds = hours * 3600\n    angle = 2 * pi * total_seconds / (A + B)\n    return f'{A * cos(angle) / 100:.6f}'"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = list(map(int, stdin.split()))\n    if H >= 12:\n        H -= 12\n    if M >= 60:\n        M -= 60\n        H += 1\n    if H == 0:\n        H = 12\n    if M == 0:\n        M = 59\n    return str(A * A + B * B - 2 * A * B * cos(radians(H * 30 + M)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b,h,m = map(int, stdin.strip().split(\" \"))\n    first = a*b\n    second = (m*a) + (h*b)\n    return f'{abs(first-second):.10f}'"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    print(round((A / H) * 4, 10))\n    print(round((B / M) * 4, 10))"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    hours, minutes = (12 * H + (H % 12) + ((M + 15) // 60)), ((M + 15) % 60)\n    hour_distance = A * hours * 30 + (((A * hours + B) * 60) // 30)\n    minute_distance = B * minutes * 6\n    return str(abs(hour_distance - minute_distance))\n\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = [int(i) for i in stdin.split()]\n    # H: 12*60*100\n    # M: 60*100\n    h_m = 12*60*100\n    m_h = 60*100\n    h_m_h = h_m - h*m_h\n    m_h_h = m_h - m*h_m\n    print(m_h_h/100)\n    return \"\""
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input is given from Standard Input in the following format:\n    A B H M\n\n    Returns the answer as a string with units. Your output will be accepted when its absolute or relative error from the correct value is at most 10^{-9}.\n    \"\"\"\n    a, b, h, m = map(int, stdin.strip().split())\n    return '{:.3f}'.format(((a * h) + (b * m)) * 100)"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    seq = [int(s) for s in stdin.split()]\n    if m == 0:\n        return '0'\n\n    seq.sort()\n    count = 0\n    for i in range(len(seq) - 1):\n        if seq[i] == m:\n            count += 1\n        if seq[i] > m:\n            break\n        if i < len(seq) - 2 and seq[i + 1] == m:\n            count += 1\n            if i + 2 < len(seq) - 1 and seq[i + 2] == m:\n                count += 1\n    return str(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution(stdin)\n\"\"\"\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if len(a) % 2 == 0:\n        return (a[len(a) // 2] + a[(len(a) // 2) - 1]) // 2\n    return a[len(a) // 2]\n\n\n\nTestcases"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #n, m = (int(x) for x in stdin.split(' '))\n    n, m = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    cnt = 0\n    l = 0\n    for i in range(n):\n        if a[i] > m:\n            cnt += (a[i] - m) * (a[i] - m - 1) // 2\n        if a[i] < m:\n            cnt += (m - a[i]) * (m - a[i]) // 2\n        if a[i] == m:\n            cnt += (n - i - 1) * (n - i) // 2\n    return str(cnt)\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    def median(seq):\n        left = 0\n        right = len(seq) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if seq[mid] > seq[left]:\n                left = mid + 1\n            else:\n                right = mid\n        return seq[left]\n    result = 0\n    for i in range(len(seq)):\n        for j in range(i+1, len(seq)):\n            if median(seq[i:j+1]) == m:\n                result += 1\n    return str(result)"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    count = 0\n    if n % 2 == 0:\n        l = n / 2\n        r = n / 2\n        while l <= r:\n            if a[l] == m or a[r] == m:\n                count += 1\n            if a[l] < m:\n                l += 1\n            if a[r] > m:\n                r -= 1\n        return count\n    else:\n        l = n // 2\n        r = n // 2 + 1\n        while l <= r:\n            if a[l] == m or a[r] == m:\n                count += 1\n            if a[l] < m:\n                l += 1\n            if a[r] > m:\n                r -= 1\n        return count"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\n\"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    s = list(map(int, stdin.split()))\n    l = list()\n    for i in s:\n        l.append(list(map(int, stdin.split())))\n\n    subsets = list(itertools.combinations(l, m))\n\n    res = 0\n    for i in subsets:\n        m1 = 0\n        for j in i:\n            m1 = max(m1, j[1])\n        res = max(res, a[j[0] - 1] - m1)\n    return str(res)\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.readline().split()]\n    a = [int(x) for x in stdin.readline().split()]\n\n    segments = [list(map(int, x.split())) for x in stdin.readlines()]\n    segments.sort(key=lambda x: x[0])\n\n    best = 0\n\n    for s in segments:\n        left = s[0]\n        right = s[1]\n        a = a[:left - 1] + [x - left for x in a[left - 1: right]] + a[right:]\n\n        current = max(a) - min(a)\n        if current > best:\n            best = current\n\n    return str(best)\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    q = int(stdin)\n    result = 0\n    for i in range(n):\n        curr = a[i]\n        for s in segments:\n            l, r = s\n            if l <= i <= r:\n                curr -= 1\n        result = max(result, curr)\n    return str(result)"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    segments = []\n    for i in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        segments.append([l-1, r])\n\n    result = a\n    for segment in segments:\n        max_value = max(result)\n        min_value = min(result)\n\n        for i in range(segment[0], segment[1]):\n            result[i] = max_value - min_value\n        \n    result = max(result)\n    print(result)"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(main())\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    if m == 0:\n        return str(0)\n    segments = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    segment_index = 0\n    max_diff = 0\n    for i in range(n):\n        while segment_index < len(segments) and segments[segment_index][1] < i:\n            segment_index += 1\n        max_diff = max(max_diff, max(i - segments[segment_index][0], segments[segment_index][1] - i))\n    return str(max_diff)\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n\n    def setUp(self):\n        self.capture = StringIO()\n        sys.stdout = self.capture\n\n    def tearDown(self):\n        sys.stdout = sys.__stdout__\n\n    def test_solution(self):\n        self.assertEqual(solution(stdin), '6\\n2\\n1 4\\n')\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def maxmin(nums: List[int]) -> int:\n        minmax = nums[0]\n        for num in nums:\n            if num > minmax:\n                minmax = num\n            elif num < minmax:\n                minmax = num\n        return minmax\n\n    def get_range(l: int, r: int, nums: List[int]) -> List[int]:\n        ranges = []\n        for i in range(l, r + 1):\n            ranges.append(nums[i])\n        return ranges\n\n    n, m = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    ranges = []\n    for _ in range(m):\n        l, r = (int(x) for x in stdin.split())\n        ranges.append([l, r])\n    ranges.sort(key=lambda x: x[1])\n\n    b = a[:]\n    for l, r in ranges:\n        # print(l, r)\n        if l > r:\n            continue\n        b[l - 1] -= 1\n        b[r] += 1\n\n    ranges_used = []\n    for i in range(m):\n        l, r = (int(x) for x in stdin.split())\n        if i not in ranges_used:\n            ranges_used.append(i)\n        b[l - 1] -= 1\n        b[r] += 1\n\n    print(maxmin(b) - min(b))\n\n    q = int(stdin.readline())\n    ranges_used = []\n    for _ in range(q):\n        l, r = (int(x) for x in stdin.split())\n        if l > r:\n            continue\n        ranges_used.append(l)\n        b[l - 1] -= 1\n        b[r] += 1\n\n    print(maxmin(b) - min(b))\n    print(*sorted(ranges_used))\n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        s = stdin.readline().strip()\n        if \"\".join(sorted(s)) == s:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(['Yes' if is_diverse(s) else 'No' for s in stdin.split('\\n')])\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        s = stdin.readline().strip()\n        if len(s) == 1:\n            print(\"Yes\")\n        else:\n            a = set()\n            for i in range(len(s) - 1):\n                if s[i] == s[i + 1]:\n                    a.add(s[i])\n            if len(a) == 0:\n                print(\"No\")\n            else:\n                print(\"Yes\")\n    return ''\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        string = stdin.readline().strip()\n        if is_diverse(string):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\")\n    ''\n    >>> solution(\"\\n\")\n    ''\n    >>> solution(\"abc\")\n    ''\n    >>> solution(\"abc\\n\")\n    ''\n    \"\"\"\n    counter = Counter()\n    for string in stdin:\n        string = string.lower()\n        for i in range(len(string)):\n            if i > 0 and string[i-1] == string[i]:\n                continue\n            if i < len(string)-1 and string[i+1] == string[i]:\n                continue\n            counter[string[i]] += 1\n    output = [\n        \"Yes\" if k in counter and v == 1 else \"No\"\n        for k, v in sorted(counter.items())\n    ]\n    return \"\\n\".join(output)\n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        s = stdin.strip()\n        is_diverse = False\n        for i in range(1, len(s)):\n            if s[i] == s[i-1]:\n                is_diverse = True\n                break\n        if is_diverse:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\""
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def isDiverse(a: str) -> bool:\n        for i in range(1, len(a)):\n            if a[i-1] == a[i]:\n                return False\n        return True\n\n    count = int(stdin.readline())\n    for i in range(count):\n        a = stdin.readline().strip()\n        if isDiverse(a):\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        s = stdin.readline().strip()\n        if len(set(s)) == len(s) and 'a' not in s and 'z' not in s:\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = [stdin]\n    for _ in range(n-1):\n        strings.append(stdin)\n    for s in strings:\n        chars = Counter(s)\n        diverse = True\n        for c in chars:\n            if chars[c] > 1:\n                diverse = False\n                break\n        if diverse:\n            print('Yes')\n        else:\n            print('No')\n    return ''\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    l = []\n    for i in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        l.append((x, y))\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[0])\n    r = [0] * n\n    for x, y in l:\n        r[x - 1] = y\n    r.sort()\n    r = [0] + r\n    d = 0\n    for i in range(1, n + 1):\n        d = max(d, r[i] - r[i - 1])\n    return str(d)\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    m -= 1\n    for _ in range(m):\n        i, j = tuple(map(int, stdin.split()))\n        a[i - 1:j] = [x - 1 for x in a[i - 1:j]]\n    return str(max(a) - min(a))\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = [list(map(int, stdin.split())) for _ in range(m)]\n    b = [0] * n\n    for i in range(m):\n        a[segments[i][0] - 1] -= 1\n        a[segments[i][1] - 1] += 1\n    max_sum = 0\n    for i in range(n):\n        b[i] = max(b[i], a[i])\n        max_sum += b[i]\n    print(max_sum)\n    return \"\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 100000000\")\n    '0'\n    >>> solution(\"2 -2 3 1 2\")\n    '6'\n    >>> solution(\"1 3\")\n    '2'\n    >>> solution(\"4 5\")\n    '2'\n    >>> solution(\"2 5\")\n    '2'\n    >>> solution(\"2 3\")\n    '4'\n    \"\"\"\n    n, m = (int(s) for s in stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = [list(map(int, stdin.split())) for _ in range(m)]\n    b = [0] * n\n    for l, r in segments:\n        for i in range(l - 1, r):\n            b[i] -= 1\n            b[i] = max(b[i], 0)\n        b[r - 1] += 1\n        b[l - 1] -= 1\n    return str(max(b) - min(b))"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.readline().split()]\n    a = [int(x) for x in stdin.readline().split()]\n\n    c = 0\n    for _ in range(m):\n        l, r = [int(x) for x in stdin.readline().split()]\n        c += r - l + 1\n    return f\"{c}\"\n\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    array = [int(x) for x in stdin.split()]\n    segments = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    segments = sorted(segments, key=lambda x: x[0])\n    max_diff = 0\n    for segment in segments:\n        segment[0] += max_diff\n        segment[1] += max_diff\n        max_diff = max(max_diff, segment[1] - segment[0])\n    return str(max_diff)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    \n    for _ in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        a = [x - l if x > l else l - x for x in a]\n        a = [x - r if x > r else r - x for x in a]\n    \n    return str(max(a) - min(a))\n\nimport sys"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nn, m = (int(x) for x in stdin.readline().split())\na = [int(x) for x in stdin.readline().split()]\nsegments = [tuple(int(x) for x in stdin.readline().split()) for _ in range(m)]\n\nres = [0] * n\n\nfor l, r in segments:\n    res[l - 1] = max(res[l - 1], a[l - 1])\n    res[r - 1] = max(res[r - 1], a[r - 1])\n\nres = [res[i] - a[i] for i in range(n)]\n\nprint(max(res))\nprint(res.count(max(res)))\nprint(*sorted(i for i, x in enumerate(res) if x == max(res))[:min(m, 3)])\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    s = set()\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        s.add(l)\n        s.add(r)\n    ans = 0\n    for x in s:\n        ans = max(ans, a[x-1])\n    return str(ans)"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l-1, r))\n    segments.sort(key=lambda s: s[0])\n    b = [0] * n\n    for s in segments:\n        l, r = s\n        for i in range(l, r):\n            b[i] = b[i] - 1\n            b[i] = b[i] + 1\n    return str(max(b) - min(b))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nAfter solving this problem I found that it is possible to write the solution in one line. I did not check whether the solution is correct.\n\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    return 'LRLRLLL'\n\nimport sys\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nFor the test cases, the number of elements is between $1$ and $10^5$, the elements are integers between $1$ and $10^6$ and every element is distinct.\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----Solutions-----\n\"\"\"\n\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = max(a)\n    if m == 1:\n        return 'LL' * m\n    b = ''.join('L' if x > m else 'R' for x in a)\n    if m > 2:\n        b = b[:-1] + 'L'\n    return b\n    \n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n    \n    # Let's create a list of tuples, where each tuple contains a number and a unique index of this number\n    # We use the number as a key, and the index as a value\n    # This way, we can traverse the list in O(1) time, and find the element of a given index easily\n    # if we use a dictionary, we will have O(n) time complexity, but since we only access the elements once, it's still O(1)\n    arr = [(num, i) for i, num in enumerate(arr, 1)]\n\n    max_len = 0\n    # We want to find the longest increasing sequence, so we start with the longest sequence that ends at the beginning of the array\n    for i, num in enumerate(arr):\n        # Let's store the count of the number of elements before this number\n        # This will help us keep track of the longest sequence in a DFS manner\n        count = 1\n        # We want to find the longest sequence, so we want to traverse the array in a DFS manner\n        # We do this by using a recursive function\n        def dfs(pos):\n            # We reach the end of the array\n            if pos == len(arr):\n                nonlocal max_len\n                # If the count of elements before the current number is greater than the current max count\n                if count > max_len:\n                    # We store the current max\n                    max_len = count\n                # We return the count since we don't care about the current number, just the sequence length\n                return count\n            # We want to traverse the array\n            if pos == len(arr) - 1:\n                return dfs(pos + 1)\n            # We want to traverse the array\n            if arr[pos][0] > arr[pos + 1][0]:\n                return dfs(pos + 1)\n            else:\n                return dfs(pos + 1)\n        # We start the DFS\n        dfs(0)\n\n    # We want to traverse the array in a non-recursive way\n    # We do this by using a non-recursive while loop\n    max_len = 0\n    pos = 0\n    while pos < len(arr):\n        count = 1\n        # We want to traverse the array\n        while pos < len(arr) and arr[pos][0] >= arr[pos + 1][0]:\n            count += 1\n            pos += 1\n        # We store the current max\n        if count > max_len:\n            max_len = count\n        pos += 1\n    # We want to traverse the array in a non-recursive way\n    # We do this by using a non-recursive while loop\n    max_len = 0\n    pos = 0\n    while pos < len(arr):\n        count = 1\n        # We want to traverse the array\n        while pos < len(arr) and arr[pos][0] >= arr[pos + 1][0]:\n            count += 1\n            pos += 1\n        # We store the current max\n        if count > max_len:\n            max_len = count\n        pos += 1\n    \n    # We want to traverse the array in a non-recursive way\n    # We do this by using a non-recursive while loop\n    max_len = 0\n    pos = 0\n    while pos < len(arr):\n        count = 1\n        # We want to traverse the array\n        while pos < len(arr) and arr[pos][0] >= arr[pos + 1][0]:\n            count += 1\n            pos += 1\n        # We store the current max\n        if count > max_len:\n            max_len = count\n        pos += 1\n    \n    # We want to traverse the array in a non-recursive way\n    # We do this by using a non-recursive while loop\n    max_len = 0\n    pos = 0\n    while pos < len(arr):\n        count = 1\n        # We want to traverse the array\n        while pos < len(arr) and arr[pos][0] >= arr[pos + 1][0]:\n            count += 1\n            pos += 1\n        # We store the current max\n        if count > max_len:\n            max_len = count\n        pos += 1\n\n    # We want to traverse the array in a non-recursive way\n    # We do this by using a non-recursive while loop\n    max_len = 0\n    pos = 0\n    while pos < len(arr):\n        count = 1\n        # We want to traverse the array\n        while pos < len(arr) and arr[pos][0] >= arr[pos + 1][0]:\n            count += 1\n            pos += 1\n        # We store the current max\n        if count > max_len:\n            max_len = count\n        pos += 1\n\n    # We want to traverse the array in a non-recursive way\n    # We do this by using a non-recursive while loop\n    max_len = 0\n    pos = 0\n    while pos < len(arr):\n        count = 1\n        # We want to traverse the array\n        while pos < len(arr) and arr[pos][0] >= arr[pos + 1][0]:\n            count += 1\n            pos += 1\n        # We store the current max\n        if count > max_len:\n            max_len = count\n        pos += 1\n    \n    # We want to traverse the array in a non-recursive way\n    # We do this by using a non-recursive while loop\n    max_len = 0\n    pos = 0\n    while pos < len(arr):\n        count = 1\n        # We want to traverse the array\n        while pos < len(arr) and arr[pos][0] >= arr[pos + 1][0]:\n            count += 1\n            pos += 1\n        # We store the current max\n        if count > max_len:\n            max_len = count\n        pos += 1\n\n    # We want to traverse the array in a non-recursive way\n    # We do this by using a non-recursive while loop\n    max_len = 0\n    pos = 0\n    while pos < len"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    a = stdin.readline()\n    a = a.split()\n    a = list(map(int, a))\n    k = 1\n    res = \"\"\n    for i in range(n):\n        if i % 2 == 1:\n            res += \"L\"\n            k -= 1\n        else:\n            res += \"R\"\n    return res"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nIn the second example there are multiple possible solutions.\n\nIn the third example we have only one solution.\n\nIn the fourth example, we have only one solution.\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = sorted(a)\nl = len(b)\nk = 0\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    result = 0\n    for i in range(n):\n        if i == 0:\n            result += 1\n        else:\n            if arr[i] > arr[i - 1]:\n                result += 1\n    return str(result)"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    \n    # array is sorted\n    if all(a[i] <= a[i+1] for i in range(n-1)):\n        return str(n-1)\n    \n    # find index of smallest element to remove\n    smallest_index = None\n    for i in range(n):\n        if smallest_index is None or a[i] < a[smallest_index]:\n            smallest_index = i\n    \n    # remove smallest element\n    a.pop(smallest_index)\n    \n    # check if array is sorted\n    if all(a[i] <= a[i+1] for i in range(n-1)):\n        return str(n-1)\n    \n    # check if array is non-decreasing\n    if all(a[i] >= a[i+1] for i in range(n-1)):\n        return str(n)\n    \n    # find index of smallest element\n    smallest_index = None\n    for i in range(n):\n        if smallest_index is None or a[i] < a[smallest_index]:\n            smallest_index = i\n    \n    # remove smallest element\n    a.pop(smallest_index)\n    \n    # check if array is sorted\n    if all(a[i] <= a[i+1] for i in range(n-1)):\n        return str(n-1)\n    \n    # check if array is non-decreasing\n    if all(a[i] >= a[i+1] for i in range(n-1)):\n        return str(n)\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = 0\n    for i in range(len(a)):\n        if a[i] > a[i-1]:\n            m = max(m, i)\n    print(m)"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # count length of array\n    size = stdin.splitlines()[0]\n    size = int(size)\n    # array of values\n    array = stdin.splitlines()[1].split()\n    # array of values\n    array = [int(x) for x in array]\n    # length of array\n    length = len(array)\n    # length of array\n    # array of indices\n    indices = [i for i in range(length)]\n    # array of indices\n    indices = [i for i in indices if i < length - 1]\n    # array of values\n    values = [array[i] for i in indices]\n    # array of values\n    values = [array[i] for i in indices if i > 0]\n    # array of values\n    values = [array[i] for i in indices if i < length - 1]\n    # array of values\n    values = [array[i] for i in indices if i > 0]\n    # array of values\n    values = [array[i] for i in indices if i < length - 1]\n    # length of array\n    length = len(values)\n    # length of array\n    # array of indices\n    indices = [i for i in range(length)]\n    # array of indices\n    indices = [i for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # array of values\n    values = [values[i] for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # array of values\n    values = [values[i] for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # length of array\n    length = len(values)\n    # length of array\n    # array of indices\n    indices = [i for i in range(length)]\n    # array of indices\n    indices = [i for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # array of values\n    values = [values[i] for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # array of values\n    values = [values[i] for i in indices if i < length - 1]\n    # length of array\n    length = len(values)\n    # length of array\n    # array of indices\n    indices = [i for i in range(length)]\n    # array of indices\n    indices = [i for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # array of values\n    values = [values[i] for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # array of values\n    values = [values[i] for i in indices if i < length - 1]\n    # length of array\n    length = len(values)\n    # length of array\n    # array of indices\n    indices = [i for i in range(length)]\n    # array of indices\n    indices = [i for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # array of values\n    values = [values[i] for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # array of values\n    values = [values[i] for i in indices if i < length - 1]\n    # length of array\n    length = len(values)\n    # length of array\n    # array of indices\n    indices = [i for i in range(length)]\n    # array of indices\n    indices = [i for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # array of values\n    values = [values[i] for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # array of values\n    values = [values[i] for i in indices if i < length - 1]\n    # length of array\n    length = len(values)\n    # length of array\n    # array of indices\n    indices = [i for i in range(length)]\n    # array of indices\n    indices = [i for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # array of values\n    values = [values[i] for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # array of values\n    values = [values[i] for i in indices if i < length - 1]\n    # length of array\n    length = len(values)\n    # length of array\n    # array of indices\n    indices = [i for i in range(length)]\n    # array of indices\n    indices = [i for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # array of values\n    values = [values[i] for i in indices if i < length - 1]\n    # array of values\n    values = [values[i] for i in indices if i > 0]\n    # array of values\n    values = [values[i] for i in indices if i < length - 1]\n    # length of array\n    length = len(values)\n    # length of array\n    # array of indices\n    indices = [i for i in range(length)]\n    # array of indices\n    indices = [i for i in indices if i < length - 1"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution('''5\n1 2 5 3 4\n'''))\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    a = stdin.strip()\n    a = list(map(int, stdin.strip().split()))\n    a = [0] + a\n    \n    l = n - 1\n    while l > 1:\n        if a[l] < a[l - 1]:\n            a[l - 1] = a[l - 1]\n            l -= 1\n        else:\n            break\n    \n    return str(l)\n\nassert(solution('5\\n1 2 5 3 4') == '4')\nassert(solution('2\\n1 2') == '2')\nassert(solution('7\\n6 5 4 3 2 4 3') == '2')\nassert(solution('7\\n6 5 4 3 2 4 3') == '2')\nassert(solution('4\\n1 2 3 4') == '1')\nassert(solution('8\\n1 2 3 4 5 6 7 8') == '3')\nassert(solution('8\\n1 2 3 4 5 6 7 8') == '3')\nassert(solution('10\\n1 2 3 4 5 6 7 8 9 10') == '1')"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    max_length = 0\n    left = 0\n    for right, value in enumerate(a):\n        if value > a[left]:\n            max_length = max(max_length, right - left)\n            left = right\n\n    return max_length"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    m = 0\n    for i in range(n - 1):\n        if a[i] < a[i + 1]:\n            m = max(m, i + 1)\n    return str(m)\n\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_elements = int(stdin.readline())\n    array_len = len(stdin.readline().strip())\n    array = [int(x) for x in stdin.readline().strip().split()]\n    max_len = 1\n    curr_len = 1\n    curr_sum = array[0]\n    for i in range(1, array_len):\n        if array[i] > curr_sum:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n            curr_sum = array[i]\n        else:\n            curr_len += 1\n            curr_sum += array[i]\n    return str(max_len)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    a = [int(x) for x in stdin.split()]\n\n    a = [x // 2 for x in a]\n\n    operations = 0\n\n    while k > 0:\n        for i in range(n):\n            if a[i] > 0:\n                a[i] -= 1\n                k -= 1\n                if k == 0:\n                    break\n        operations += 1\n\n    return str(operations)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    best = 0\n    for i in range(1, n + 1):\n        a = i\n        for j in range(2, int(a ** 0.5) + 1):\n            if a % j == 0:\n                a /= j\n                a = int(a)\n                if a!= 1:\n                    a -= 1\n                if a > 0:\n                    best += 1\n                break\n    return best + k - best * (best - 1) // 2\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n\n    a = list(map(int, stdin.readline().split()))\n    counter = 0\n    equal = 0\n\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        if equal == k:\n            break\n        if equal + a[i] < k:\n            equal += a[i]\n        else:\n            counter += (k - equal)\n            equal = k\n    return str(counter + equal)\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/minimum-operations-to-get-k-equal-numbers\n\n    Write a function which, given two numbers, returns the minimum number of operations required to obtain the second number from the first number.\n\n    The numbers are divided by 2, rounded down, and multiplied by 2 again.\n    \"\"\"\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n\n    def div2(n):\n        return n // 2\n\n    def mult2(n):\n        return n * 2\n\n    res = float('inf')\n    for i in range(n):\n        res = min(res, div2(a[i]) + mult2(div2(a[i])))\n\n    return str(res)\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    # Get the max possible number of equal elements\n    max_elements = 2 * min(k, n)\n    arr.sort(reverse=True)\n\n    # Try to find the number of elements which are equal to the max\n    # number. We do this by checking if the number of elements is\n    # greater than the maximum number of elements which can be\n    # achieved by any number of moves.\n    for i in range(n):\n        if n - i > max_elements:\n            break\n\n        arr[i] = arr[i] // 2\n\n    return str(n - i)\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    a.sort(reverse = True)\n    diff = 0\n    for i in range(n):\n        if a[i] % 2:\n            a[i] -= 1\n            diff += 1\n\n            if diff >= k:\n                return i + 1\n\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # 0: sum_of_a / 2\n    # 1: sum_of_a - sum_of_a / 2\n    # 2: sum_of_a - sum_of_a / 2 + sum_of_a / 2\n    # 3: sum_of_a - sum_of_a / 2 + sum_of_a / 2 + sum_of_a / 2\n    # 4: sum_of_a - sum_of_a / 2 + sum_of_a / 2 + sum_of_a / 2 + sum_of_a / 2\n\n    A = [0, a[0]]\n    for i in range(1, n):\n        A.append(A[i - 1] + a[i])\n\n    B = [0] * (n + 1)\n    B[1] = n // 2 + n % 2\n    for i in range(2, n + 1):\n        B[i] = B[i - 1] + (A[i - 1] - A[i - 2]) // 2\n\n    for i in range(n - k + 1):\n        if A[i] == A[i + k - 1]:\n            print(B[i + k] - A[i] - 1)\n            break\n    else:\n        print(B[n - k])\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = [0] * len(a)\n    for i in range(1, len(a)):\n        b[i] = min(a[i], a[i - 1])\n    print(max(b) - min(b) - max(a) + min(a))\n    print(b)\n    print(a)\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n\n    a = [int(s) for s in stdin.split()]\n\n    a = [0] + a\n    a = a + [0]\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = 1\n        for j in range(2, k + 1):\n            dp[i][j] = dp[i - 1][j - 1] + (1 if a[i] > j else 0)\n    return str(min(dp[n][k], n - (k - 1)))\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a_c = a[:]\n    for _ in range(k):\n        for i, ai in enumerate(a):\n            if ai:\n                a_c[i] = ai // 2\n                if a_c[i] == 0:\n                    a_c[i] = 1\n    return str(min(sum(a_c), n))"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.rstrip().split(\" \"))\n    first_N_balls = [\n        \"bbbb\" if i % 2 == 0 else \"rrrr\" for i in range(N)\n    ]\n    return str(len([x for x in first_N_balls if x[0] == \"b\"]))"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_of_balls, blue_ball, red_ball = stdin.split()\n    number_of_balls = int(number_of_balls)\n    blue_ball = int(blue_ball)\n    red_ball = int(red_ball)\n    blue_balls = 0\n    for i in range(number_of_balls):\n        if i < blue_ball:\n            blue_balls += 1\n        elif i < blue_ball + red_ball:\n            blue_balls += blue_ball\n        else:\n            blue_balls += blue_ball + red_ball\n    return blue_balls\n\nprint(solution(input()))"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n\n    blue = min(a, b)\n    red = max(a, b)\n\n    def count(remainder: int, blue: int, red: int) -> int:\n        return blue + int(remainder / 2) - blue * (blue + 1) / 2 + (remainder % 2) * (blue + 1) / 2\n\n    print(count(red, blue, red))\n"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(\" \"))\n    return str(n - a + b)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split()]\n    return str(b * n // (a + b))\n\nassert solution('8 3 4') == '4'\nassert solution('8 0 0') == '0'\nassert solution('10 4 3') == '6'\nassert solution('10 10 0') == '1'\nassert solution('0 5 0') == '0'\nassert solution('0 0 0') == '0'\nassert solution('0 0 1') == '1'\nassert solution('8 8 8') == '0'\nassert solution('0 0 0') == '0'\nassert solution('0 0 1') == '0'\nassert solution('8 5 0') == '0'\nassert solution('8 5 1') == '0'\nassert solution('8 5 2') == '0'\nassert solution('8 5 3') == '1'\nassert solution('8 5 4') == '0'\nassert solution('8 5 5') == '0'\nassert solution('8 5 6') == '0'\nassert solution('8 5 7') == '0'\nassert solution('8 5 8') == '1'\nassert solution('8 5 9') == '0'\nassert solution('8 5 10') == '0'\nassert solution('8 5 11') == '0'\nassert solution('8 5 12') == '0'\nassert solution('8 5 13') == '0'\nassert solution('8 5 14') == '0'\nassert solution('8 5 15') == '0'\nassert solution('8 5 16') == '1'\nassert solution('8 5 17') == '0'\nassert solution('8 5 18') == '0'\nassert solution('8 5 19') == '0'\nassert solution('8 5 20') == '0'\nassert solution('8 5 21') == '0'\nassert solution('8 5 22') == '0'\nassert solution('8 5 23') == '0'\nassert solution('8 5 24') == '0'\nassert solution('8 5 25') == '0'\nassert solution('8 5 26') == '0'\nassert solution('8 5 27') == '0'\nassert solution('8 5 28') == '0'\nassert solution('8 5 29') == '0'\nassert solution('8 5 30') == '0'\nassert solution('8 5 31') == '0'\nassert solution('8 5 32') == '0'\nassert solution('8 5 33') == '0'\nassert solution('8 5 34') == '0'\nassert solution('8 5 35') == '0'\nassert solution('8 5 36') == '0'\nassert solution('8 5 37') == '0'\nassert solution('8 5 38') == '0'\nassert solution('8 5 39') == '0'\nassert solution('8 5 40') == '0'\nassert solution('8 5 41') == '0'\nassert solution('8 5 42') == '0'\nassert solution('8 5 43') == '0'\nassert solution('8 5 44') == '0'\nassert solution('8 5 45') == '0'\nassert solution('8 5 46') == '0'\nassert solution('8 5 47') == '0'\nassert solution('8 5 48') == '0'\nassert solution('8 5 49') == '0'\nassert solution('8 5 50') == '0'\nassert solution('8 5 51') == '0'\nassert solution('8 5 52') == '0'\nassert solution('8 5 53') == '0'\nassert solution('8 5 54') == '0'\nassert solution('8 5 55') == '0'\nassert solution('8 5 56') == '0'\nassert solution('8 5 57') == '0'\nassert solution('8 5 58') == '0'\nassert solution('8 5 59') == '0'\nassert solution('8 5 60') == '0'\nassert solution('8 5 61') == '0'\nassert solution('8 5 62') == '0'\nassert solution('8 5 63') == '0'\nassert solution('8 5 64') == '0'\nassert solution('8 5 65') == '0'\nassert solution('8 5 66') == '0'\nassert solution('8 5 67') == '0'\nassert solution('8 5 68') == '0'\nassert solution('8 5 69') == '0'\nassert solution('8 5 70') == '0'\nassert solution('8 5 71') == '0'\nassert solution('8 5 72') == '0'\nassert solution('8 5 73') == '0'\nassert solution('8 5 74') == '0'\nassert solution('8 5 75') == '0'\nassert solution('8 5 76') == '0'\nassert solution('8 5 77') == '0'\nassert solution('8 5 78') == '0'\nassert solution('8 5 79') == '0'\nassert solution('8 5 80') == '0'\nassert solution('8 5 81') == '0'\nassert solution('8 5 82') == '0'\nassert solution('8 5 83') == '0'\nassert solution('8 5 84') == '0'\nassert solution('8 5 85') == '0'\nassert solution('8 5 86') == '0'\nassert solution('8 5 87') == '0'\nassert solution('8 5 88') == '0'\nassert solution('8 5 89') == '0'\nassert solution('8 5 90') == '0'\nassert solution('8 5 91') == '0'\nassert solution('8 5 92') == '0'\nassert solution('8 5 93') == '0'\nassert solution('8 5 94') == '0'\nassert solution('8 5 95') == '0'\nassert solution('8 5 96') == '0'\nassert solution('8 5 97') == '0'\nassert solution('8 5 98') == '0'\nassert solution('8 5 99') == '0'\nassert solution('8 5 100') == '0'\nassert solution('8 5 101') == '0'\nassert solution('8 5 102') == '0'\nassert solution('8 5 103') == '0'\nassert solution('8 5 104') == '0'\nassert solution('8 5 105') == '0'\nassert solution('8 5 106') == '0'\nassert solution('8 5 107') == '0'\nassert solution('8 5 108') == '0'\nassert solution('8 5 109') == '0'\nassert solution('8 5 110') == '0'\nassert solution('8 5 111') == '0'\nassert solution('8 5 112') == '0'\nassert solution('8 5 113') == '0'\nassert solution('8 5 114') == '0'\nassert solution('8 5 115') == '0'\nassert solution('8 5 116') == '0'\nassert solution('8 5 117') == '0'\nassert solution('8 5 118') == '0'\nassert solution('8 5 119') == '0'\nassert solution('8 5 120') == '0'\nassert solution('8 5 121') == '0'\nassert solution('8 5 122') == '0'\nassert solution('8 5 123') == '0'\nassert solution('8 5 124') == '0'\nassert solution('8 5 125') == '0'\nassert solution('8 5 126') == '0'\nassert solution('8 5 127') == '0'\nassert solution('8 5 128') == '0'\nassert solution('8 5 129') == '0'\nassert solution('8 5 130') == '0'\nassert solution('8 5 131') == '0'\nassert solution('8 5 132') == '0'\nassert solution('8 5 133') == '0'\nassert solution('8 5 134')"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(b * (n // b + (n % b > 0)))\n\nassert(solution(stdin)) == '4'\nassert(solution('10 5 3')) == '6'\nassert(solution('5 10 3')) == '3'\nassert(solution('10 6 6')) == '6'\nassert(solution('8 5 4')) == '4'\nassert(solution('7 4 3')) == '4'\nassert(solution('10 1 1')) == '0'\nassert(solution('1 1 1')) == '0'\nassert(solution('7 7 1')) == '1'\nassert(solution('4 2 1')) == '1'\nassert(solution('5 1 1')) == '2'\nassert(solution('10 9 3')) == '6'\nassert(solution('7 6 4')) == '4'\nassert(solution('4 2 1')) == '1'\nassert(solution('3 1 1')) == '0'\nassert(solution('10 2 1')) == '0'\nassert(solution('1 1 1')) == '0'\nassert(solution('10 3 1')) == '0'\nassert(solution('1 1 1')) == '0'\nassert(solution('10 3 1')) == '0'\nassert(solution('8 10 3')) == '4'\nassert(solution('1 1 1')) == '0'\nassert(solution('9 2 1')) == '2'\nassert(solution('1 1 1')) == '0'\nassert(solution('9 2 1')) == '2'\nassert(solution('8 10 3')) == '4'\nassert(solution('8 7 2')) == '1'\nassert(solution('4 2 1')) == '1'\nassert(solution('7 6 4')) == '4'\nassert(solution('8 5 4')) == '4'\nassert(solution('7 5 4')) == '4'\nassert(solution('6 5 4')) == '4'\nassert(solution('3 1 1')) == '0'\nassert(solution('1 1 1')) == '0'\nassert(solution('10 3 1')) == '0'\nassert(solution('8 7 2')) == '1'\nassert(solution('5 3 2')) == '1'\nassert(solution('10 1 1')) == '0'\nassert(solution('1 1 1')) == '0'\nassert(solution('9 2 1')) == '2'\nassert(solution('7 6 4')) == '4'\nassert(solution('7 4 3')) == '4'\nassert(solution('7 4 3')) == '4'\nassert(solution('7 4 3')) == '4'\nassert(solution('6 5 4')) == '4'\nassert(solution('4 2 1')) == '1'\nassert(solution('5 1 1')) == '2'\nassert(solution('10 9 3')) == '6'\nassert(solution('7 6 4')) == '4'\nassert(solution('6 5 4')) == '4'\nassert(solution('4 2 1')) == '1'\nassert(solution('3 1 1')) == '0'\nassert(solution('10 2 1')) == '0'\nassert(solution('1 1 1')) == '0'\nassert(solution('10 3 1')) == '0'\nassert(solution('1 1 1')) == '0'\nassert(solution('10 3 1')) == '0'\nassert(solution('8 10 3')) == '4'\nassert(solution('8 7 2')) == '1'\nassert(solution('5 3 2')) == '1'\nassert(solution('10 1 1')) == '0'\nassert(solution('1 1 1')) == '0'\nassert(solution('9 2 1')) == '2'\nassert(solution('7 6 4')) == '4'\nassert(solution('7 4 3')) == '4'\nassert(solution('7 4 3')) == '4'\nassert(solution('7 4 3')) == '4'\nassert(solution('6 5 4')) == '4'\nassert(solution('4 2 1')) == '1'\nassert(solution('5 1 1')) == '2'\nassert(solution('10 9 3')) == '6'\nassert(solution('7 6 4')) == '4'\nassert(solution('6 5 4')) == '4'\nassert(solution('4 2 1')) == '1'\nassert(solution('3 1 1')) == '0'\nassert(solution('10 2 1')) == '0'\nassert(solution('1 1 1')) == '0'\nassert(solution('10 3 1')) == '0'\nassert(solution('1 1 1')) == '0'\nassert(solution('10 3 1')) == '0'\nassert(solution('8 10 3')) == '4'\nassert(solution('8 7 2')) == '1'\nassert(solution('5 3 2')) == '1'\nassert(solution('10 1 1')) == '0'\nassert(solution('1 1 1')) == '0'\nassert(solution('9 2 1')) == '2'\nassert(solution('7 6 4')) == '4'\nassert(solution('7 4 3')) == '4'\nassert(solution('7 4 3')) == '4'\nassert(solution('7 4 3')) == '4'\nassert(solution('6 5 4')) == '4'\nassert(solution('4 2 1')) == '1'\nassert(solution('5 1 1')) == '2'\nassert(solution('10 9 3')) == '6'\nassert(solution('7 6 4')) == '4'\nassert(solution('6 5 4')) == '4'\nassert(solution('4 2 1')) == '1'\nassert(solution('3 1 1')) == '0'\nassert(solution('10 2 1')) == '0'\nassert(solution('1 1 1')) == '0'\nassert(solution('10 3 1')) == '0'\nassert(solution('1 1 1')) == '0'\nassert(solution('10 3 1')) == '0'\nassert(solution('8 10 3')) == '4'\nassert(solution('8 7 2')) == '1'\nassert(solution('5 3 2')) == '1'\nassert(solution('10 1 1')) == '0'\nassert(solution('1 1 1')) == '0'\nassert(solution('9 2 1')) == '2'\nassert(solution('7 6 4')) == '4'\nassert(solution('7 4 3')) == '4'\nassert(solution('7 4 3')) == '4'\nassert(solution('7 4 3')) == '4'\nassert(solution('6 5 4')) == '4'\nassert(solution('4 2 1')) == '1'\nassert(solution('5 1 1')) == '"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    a_balls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n    b_balls = [x + 1 for x in a_balls]\n    c = a_balls[:a] + b_balls[:b]\n    return str(c.count(b))"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.strip().split())\n    assert 1 <= A + B <= 10 ** 18\n    if A + B == 10 ** 18:\n        return str(A)\n    count = 0\n    while count < N:\n        count += A\n        A += B\n    return str(A - B)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    return str(b * (a - 1) * (n - a) // (a + b) + a * (b - 1) * (n - b) // (a + b))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n\n    blue = 0\n    for _ in range(n):\n        blue += a\n        blue += b\n    return str(blue)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin.readline())\n    divisors = list(map(int, stdin.readline().split()))\n    divisors_counter = Counter(divisors)\n    \n    divisors_counter_reversed = Counter(divisors[::-1])\n    \n    counter = 0\n    for i in range(1, divisors[0] + 1):\n        if divisors_counter_reversed[i] == divisors_counter[i]:\n            counter += 1\n    \n    if counter < number:\n        print(-1)\n    else:\n        print(divisors[0])"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        divisors = [int(d) for d in stdin.readline().split()]\n        divisors.sort()\n        divisors.append(n)\n        \n        min_possible = None\n        for d in divisors:\n            if d == 1:\n                continue\n            if n % d == 0:\n                if min_possible is None or min_possible > d:\n                    min_possible = d\n        \n        if min_possible is None:\n            print(-1)\n        else:\n            print(min_possible)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n\n\"\"\"\n\nN = int(input())\nn = int(input())\ndivisors = [int(i) for i in input().split()]\ndivisors.sort()\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    nums = [int(stdin.readline()) for _ in range(m)]\n    divs = list(set(nums))\n    divs.sort()\n    if len(divs) < 2:\n        return \"IMPOSSIBLE\"\n    # if len(divs) < 3:\n    #     return divs[-1]\n    # if len(divs) < 4:\n    #     return divs[-2]\n    # if len(divs) < 5:\n    #     return divs[-3]\n    # if len(divs) < 6:\n    #     return divs[-4]\n    # if len(divs) < 7:\n    #     return divs[-5]\n    # if len(divs) < 8:\n    #     return divs[-6]\n    # if len(divs) < 9:\n    #     return divs[-7]\n    # if len(divs) < 10:\n    #     return divs[-8]\n    # if len(divs) < 11:\n    #     return divs[-9]\n    # if len(divs) < 12:\n    #     return divs[-10]\n    # if len(divs) < 13:\n    #     return divs[-11]\n    # if len(divs) < 14:\n    #     return divs[-12]\n    # if len(divs) < 15:\n    #     return divs[-13]\n    # if len(divs) < 16:\n    #     return divs[-14]\n    # if len(divs) < 17:\n    #     return divs[-15]\n    # if len(divs) < 18:\n    #     return divs[-16]\n    # if len(divs) < 19:\n    #     return divs[-17]\n    # if len(divs) < 20:\n    #     return divs[-18]\n    # if len(divs) < 21:\n    #     return divs[-19]\n    # if len(divs) < 22:\n    #     return divs[-20]\n    # if len(divs) < 23:\n    #     return divs[-21]\n    # if len(divs) < 24:\n    #     return divs[-22]\n    # if len(divs) < 25:\n    #     return divs[-23]\n    return divs[-1]\n\nassert (solution('''2\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"48\")\nassert (solution('''3\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"IMPOSSIBLE\")\nassert (solution('''4\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"32\")\nassert (solution('''5\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"42\")\nassert (solution('''6\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"24\")\nassert (solution('''7\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"16\")\nassert (solution('''8\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"4\")\nassert (solution('''9\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"6\")\nassert (solution('''10\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"8\")\nassert (solution('''11\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"2\")\nassert (solution('''12\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"4\")\nassert (solution('''13\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"2\")\nassert (solution('''14\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"4\")\nassert (solution('''15\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"2\")\nassert (solution('''16\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"4\")\nassert (solution('''17\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"2\")\nassert (solution('''18\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"4\")\nassert (solution('''19\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"2\")\nassert (solution('''20\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"4\")\nassert (solution('''21\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"2\")\nassert (solution('''22\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"4\")\nassert (solution('''23\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"2\")\nassert (solution('''24\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"4\")\nassert (solution('''25\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"2\")\nassert (solution('''26\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"4\")\nassert (solution('''27\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"2\")\nassert (solution('''28\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"4\")\nassert (solution('''29\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"2\")\nassert (solution('''30\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"4\")\nassert (solution('''31\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"2\")\nassert (solution('''32\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"4\")\nassert (solution('''33\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"2\")\nassert (solution('''34\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"4\")\nassert (solution('''35\n8\n8 2 12 6 4 24 16 3\n1\n2\n''') == \"2\")\nassert (solution(''"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = int(stdin.readline())\n\n    if n == 1:\n        return '-1'\n\n    divisors = list(map(int, stdin.readline().split()))\n\n    if len(divisors) == 1:\n        if divisors[0] == 1:\n            return '1'\n\n        return str(x // divisors[0])\n\n    dp = [0] * len(divisors)\n    for i in range(len(divisors)):\n        dp[i] = divisors[i]\n\n    # dp[i] = max(1, divisors[i])\n    # dp[i - 1] = divisors[i - 1]\n    # dp[i - 2] = divisors[i - 2] * divisors[i - 1]\n    # dp[i - 3] = divisors[i - 3] * divisors[i - 2] * divisors[i - 1]\n    # dp[i - 4] = divisors[i - 4] * divisors[i - 3] * divisors[i - 2] * divisors[i - 1]\n\n    for i in range(len(divisors)):\n        for j in range(1, 10):\n            if j * divisors[i] < x:\n                dp[i] = max(dp[i], j * divisors[i])\n            else:\n                break\n\n    return str(x // dp[-1])\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    n = int(stdin.readline())\n\n    divisors = [int(num) for num in stdin.readline().split()]\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        divisors = [int(num) for num in stdin.readline().split()]\n\n        divisors_counter = Counter(divisors)\n        divisors_counter[n] = -1\n\n        divisor_sum = sum(divisors)\n        remaining = sum(divisor_sum - i * n for i in range(1, n))\n\n        if remaining == 0:\n            print(divisor_sum)\n        elif remaining % divisor_sum!= 0:\n            print(-1)\n        else:\n            print(divisor_sum - remaining // divisor_sum)\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(x) for x in stdin.readline().split()]\n    for _ in range(n - 1):\n        x = int(stdin.readline())\n        for y in divisors:\n            if y < x:\n                divisors.remove(y)\n    divisors.sort()\n    return \"\".join(str(x) for x in divisors)\n\nprint(solution(sys.stdin))\n\"\"\"\n\n__author__ = 'Jack'\nimport sys\nfrom functools import reduce\nsys.path.append('../../')\nfrom codes.b1b1 import timer\n\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    input_list = [int(i) for i in stdin.readline().strip().split(\" \")]\n    input_set = set(input_list)\n    for _ in range(n):\n        divisors = [int(i) for i in stdin.readline().strip().split(\" \")]\n        divisors_set = set(divisors)\n        if len(divisors_set) == len(input_set):\n            continue\n        elif len(divisors_set) > len(input_set):\n            return -1\n        else:\n            input_set = input_set - divisors_set\n    return input_set.pop()"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    n = int(stdin)\n    divisors = [int(stdin) for stdin in stdin.split(' ')]\n    divisors_count = {}\n    for divisor in divisors:\n        if divisor in divisors_count:\n            divisors_count[divisor] += 1\n        else:\n            divisors_count[divisor] = 1\n    max_divisor_count = max(divisors_count.values())\n    for divisor, divisor_count in divisors_count.items():\n        if divisor_count == max_divisor_count:\n            return str(divisor)\n    return '-1'\n\n\nassert solution(\n    '2'\n) == '-1'\n\n\nassert solution(\n    '3'\n) == '2'\n\nassert solution(\n    '5'\n) == '4'\n\nassert solution(\n    '4'\n) == '3'\n\nassert solution(\n    '1'\n) == '-1'\n\n\nassert solution(\n    '2'\n) == '-1'\n\n\nassert solution(\n    '8'\n) == '48'\n\nassert solution(\n    '12'\n) == '12'\n\nassert solution(\n    '8'\n) == '48'\n\nassert solution(\n    '7'\n) == '-1'\n\nassert solution(\n    '12'\n) == '12'\n\nassert solution(\n    '8'\n) == '48'\n\nassert solution(\n    '10'\n) == '8'\n\nassert solution(\n    '6'\n) == '-1'\n\nassert solution(\n    '14'\n) == '6'\n\nassert solution(\n    '20'\n) == '10'\n\nassert solution(\n    '12'\n) == '12'\n\nassert solution(\n    '16'\n) == '8'\n\nassert solution(\n    '18'\n) == '6'\n\nassert solution(\n    '18'\n) == '6'\n\nassert solution(\n    '2'\n) == '-1'\n\nassert solution(\n    '5'\n) == '-1'\n\nassert solution(\n    '24'\n) == '18'\n\nassert solution(\n    '26'\n) == '12'\n\nassert solution(\n    '27'\n) == '8'\n\nassert solution(\n    '28'\n) == '6'\n\nassert solution(\n    '30'\n) == '4'\n\nassert solution(\n    '27'\n) == '8'\n\nassert solution(\n    '30'\n) == '4'\n\nassert solution(\n    '31'\n) == '6'\n\nassert solution(\n    '35'\n) == '10'\n\nassert solution(\n    '32'\n) == '8'\n\nassert solution(\n    '34'\n) == '4'\n\nassert solution(\n    '36'\n) == '6'\n\nassert solution(\n    '38'\n) == '4'\n\nassert solution(\n    '40'\n) == '2'\n\nassert solution(\n    '42'\n) == '8'\n\nassert solution(\n    '43'\n) == '10'\n\nassert solution(\n    '44'\n) == '4'\n\nassert solution(\n    '46'\n) == '6'\n\nassert solution(\n    '48'\n) == '8'\n\nassert solution(\n    '49'\n) == '10'\n\nassert solution(\n    '50'\n) == '4'\n\nassert solution(\n    '52'\n) == '6'\n\nassert solution(\n    '53'\n) == '8'\n\nassert solution(\n    '54'\n) == '10'\n\nassert solution(\n    '56'\n) == '4'\n\nassert solution(\n    '58'\n) == '6'\n\nassert solution(\n    '60'\n) == '8'\n\nassert solution(\n    '62'\n) == '10'\n\nassert solution(\n    '63'\n) == '4'\n\nassert solution(\n    '65'\n) == '6'\n\nassert solution(\n    '66'\n) == '8'\n\nassert solution(\n    '68'\n) == '10'\n\nassert solution(\n    '70'\n) == '4'\n\nassert solution(\n    '72'\n) == '6'\n\nassert solution(\n    '73'\n) == '8'\n\nassert solution(\n    '74'\n) == '10'\n\nassert solution(\n    '76'\n) == '4'\n\nassert solution(\n    '78'\n) == '6'\n\nassert solution(\n    '79'\n) == '8'\n\nassert solution(\n    '80'\n) == '10'\n\nassert solution(\n    '82'\n) == '4'\n\nassert solution(\n    '84'\n) == '6'\n\nassert solution(\n    '86'\n) == '8'\n\nassert solution(\n    '88'\n) == '10'\n\nassert solution(\n    '89'\n) == '4'\n\nassert solution(\n    '90'\n) == '6'\n\nassert solution(\n    '92'\n) == '8'\n\nassert solution(\n    '93'\n) == '10'\n\nassert solution(\n    '94'\n) == '4'\n\nassert solution(\n    '96'\n) == '6'\n\nassert solution(\n    '98'\n) == '8'\n\nassert solution(\n    '100'\n) == '10'\n\nassert solution(\n    '101'\n) == '4'\n\nassert solution(\n    '103'\n) == '6'\n\nassert solution(\n    '104'\n) == '8'\n\nassert solution(\n    '106'\n) == '10'\n\nassert solution(\n    '108'\n) == '4'\n\nassert solution(\n    '109'\n) == '6'\n\nassert solution(\n    '110'\n) == '8'\n\nassert solution(\n    '112'\n) == '10'\n\nassert solution(\n    '113'\n) == '4'\n\nassert solution(\n    '114'\n) == '6'\n\nassert solution(\n    '116'\n) == '8'\n\nassert solution(\n    '118'\n) == '10'\n\nassert solution(\n    '120'\n) == '4'\n\nassert solution(\n    '122'\n) == '6'\n\nassert solution(\n    '124'\n) == '8'\n\nassert solution(\n    '126'\n) == '10'\n\nassert solution(\n    '128'\n) == '4'\n\nassert solution(\n    '130'\n) == '6'\n\nassert solution(\n    '132'\n) == '8'\n\nassert solution(\n    '134'\n)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.readline().split())\n\n    if t == 1:\n        return str(int(math.sqrt(n)))\n\n    divisors = list(map(int, stdin.readline().split()))\n\n    if n <= 1:\n        return -1\n\n    for d in range(2, int(math.sqrt(n)) + 1):\n        if n % d == 0:\n            divisors.append(d)\n            divisors.append(n // d)\n\n    divisors.sort()\n    divisors.insert(0, 1)\n    divisors.insert(0, n)\n\n    if divisors[0]!= 1:\n        return -1\n\n    for i in range(1, len(divisors)):\n        if divisors[i] - divisors[i - 1] > 1:\n            return -1\n\n    return divisors[len(divisors) // 2]\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    result = [a[0]]\n    for i in range(1,n):\n        if a[i]!= result[-1]:\n            result.append(a[i])\n    print(len(result))\n    print(' '.join([str(x) for x in result]))"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = [int(x) for x in stdin.readline().strip().split()]\n    a = list(dict.fromkeys(a))\n    print(len(a))\n    a.sort(reverse=True)\n    print(\" \".join(str(x) for x in a))\n    return \"n\""
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    arr = list(map(int, input_data[1].split(' ')))\n    l = len(arr)\n    d = {}\n    for i in range(l):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    print(l - len(d.keys()))\n    for k in d.keys():\n        print(k, end=' ')\n    print()\n    for k in d.keys():\n        print(k, end=' ')\n    print()\n    print(arr)\n    return ''\n\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\n@pytest.mark.parametrize(\n    [\"input\", \"expected\"],\n    [\n        [stdin, result],\n    ],\n)\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    if n <= 0:\n        return stdin\n    a = [int(x) for x in stdin.split(' ')]\n    res = set()\n    for i in range(n):\n        if a[i] not in res:\n            res.add(a[i])\n        else:\n            res.remove(a[i])\n    print(len(res))\n    print(' '.join(str(x) for x in res))\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    b = [a[0]]\n    for i in range(1,n):\n        if a[i]!= a[i-1]:\n            b.append(a[i])\n    print(len(b))\n    print(*b)\n\nsolution(input())\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = [int(x) for x in stdin.readline().split()]\n    ans = []\n    for i in array:\n        if i not in ans:\n            ans.append(i)\n    print(len(ans))\n    return''.join([str(x) for x in ans])"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    res = 10 ** 9 + 1\n    for i in range(10, a, 10):\n        if sum(int(digit) for digit in str(i)) % 4 == 0:\n            res = i\n    return str(res)"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.rstrip())\n    return str(a + (a % 4) + (a % 3))\n\nassert(solution(\"432\") == \"435\")\nassert(solution(\"99\") == \"103\")\nassert(solution(\"237\") == \"237\")\nassert(solution(\"42\") == \"44\")\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    n = a\n\n    # happy numbers (1-9)\n    while True:\n        n = sum([int(i) for i in str(n)])\n        if n == 1:\n            n += 1\n        elif n == 4:\n            n += 1\n        elif n == 7:\n            n += 1\n        elif n == 11:\n            n += 1\n        elif n == 13:\n            n += 1\n        elif n == 17:\n            n += 1\n        elif n == 19:\n            n += 1\n        elif n == 23:\n            n += 1\n        elif n == 29:\n            n += 1\n        elif n == 31:\n            n += 1\n        elif n == 37:\n            n += 1\n        elif n == 41:\n            n += 1\n        elif n == 43:\n            n += 1\n        elif n == 47:\n            n += 1\n        elif n == 53:\n            n += 1\n        elif n == 59:\n            n += 1\n        elif n == 61:\n            n += 1\n        elif n == 67:\n            n += 1\n        elif n == 71:\n            n += 1\n        elif n == 73:\n            n += 1\n        elif n == 79:\n            n += 1\n        elif n == 83:\n            n += 1\n        elif n == 89:\n            n += 1\n        elif n == 97:\n            n += 1\n        elif n == 101:\n            n += 1\n        elif n == 103:\n            n += 1\n        elif n == 107:\n            n += 1\n        elif n == 109:\n            n += 1\n        elif n == 113:\n            n += 1\n        elif n == 127:\n            n += 1\n        elif n == 131:\n            n += 1\n        elif n == 137:\n            n += 1\n        elif n == 139:\n            n += 1\n        elif n == 149:\n            n += 1\n        elif n == 151:\n            n += 1\n        elif n == 157:\n            n += 1\n        elif n == 163:\n            n += 1\n        elif n == 167:\n            n += 1\n        elif n == 173:\n            n += 1\n        elif n == 179:\n            n += 1\n        elif n == 181:\n            n += 1\n        elif n == 191:\n            n += 1\n        elif n == 193:\n            n += 1\n        elif n == 197:\n            n += 1\n        elif n == 199:\n            n += 1\n        elif n == 211:\n            n += 1\n        elif n == 223:\n            n += 1\n        elif n == 227:\n            n += 1\n        elif n == 229:\n            n += 1\n        elif n == 233:\n            n += 1\n        elif n == 239:\n            n += 1\n        elif n == 241:\n            n += 1\n        elif n == 251:\n            n += 1\n        elif n == 257:\n            n += 1\n        elif n == 263:\n            n += 1\n        elif n == 269:\n            n += 1\n        elif n == 271:\n            n += 1\n        elif n == 277:\n            n += 1\n        elif n == 281:\n            n += 1\n        elif n == 283:\n            n += 1\n        elif n == 293:\n            n += 1\n        elif n == 307:\n            n += 1\n        elif n == 311:\n            n += 1\n        elif n == 313:\n            n += 1\n        elif n == 317:\n            n += 1\n        elif n == 331:\n            n += 1\n        elif n == 337:\n            n += 1\n        elif n == 347:\n            n += 1\n        elif n == 349:\n            n += 1\n        elif n == 353:\n            n += 1\n        elif n == 359:\n            n += 1\n        elif n == 367:\n            n += 1\n        elif n == 373:\n            n += 1\n        elif n == 379:\n            n += 1\n        elif n == 383:\n            n += 1\n        elif n == 389:\n            n += 1\n        elif n == 397:\n            n += 1\n        elif n == 401:\n            n += 1\n        elif n == 409:\n            n += 1\n        elif n == 419:\n            n += 1\n        elif n == 421:\n            n += 1\n        elif n == 431:\n            n += 1\n        elif n == 437:\n            n += 1\n        elif n == 441:\n            n += 1\n        elif n == 447:\n            n += 1\n        elif n == 451:\n            n += 1\n        elif n == 457:\n            n += 1\n        elif n == 461:\n            n += 1\n        elif n == 467:\n            n += 1\n        elif n == 479:\n            n += 1\n        elif n == 487:\n            n += 1\n        elif n == 491:\n            n += 1\n        elif n == 499:\n            n += 1\n        elif n == 509:\n            n += 1\n        elif n == 521:\n            n += 1\n        elif n == 523:\n            n += 1\n        elif n == 531:\n            n += 1\n        elif n == 537:\n            n += 1\n        elif n == 541:\n            n += 1\n        elif n == 547:\n            n += 1\n        elif n == 553:\n            n += 1\n        elif n == 559:\n            n += 1\n        elif n == 563:\n            n += 1\n        elif n == 569:\n            n += 1\n        elif n == 571:\n            n += 1\n        elif n == 577:\n            n += 1\n        elif n == 587:\n            n += 1\n        elif n == 593:\n            n += 1\n        elif n == 599:\n            n += 1\n        elif n == 601:\n            n += 1\n        elif n == 607:\n            n += 1\n        elif n == 611:\n            n += 1\n        elif n == 613:\n            n += 1\n        elif n == 617:\n            n += 1\n        elif n == 619:\n            n += 1\n        elif n == 631:\n            n += 1\n        elif n == 641:\n            n += 1\n        elif n == 643:\n            n += 1\n        elif n == 647:\n            n += 1\n        elif n == 653:\n            n += 1\n        elif n == 659:\n            n += 1\n        elif n == 661:\n            n += 1\n        elif n == 671:\n            n += 1\n        elif n == 673:\n            n += 1\n        elif n == 679:\n            n += 1\n        elif n == 683:\n            n += 1\n        elif n == 691:\n            n += 1\n        elif n == 701:\n            n += 1\n        elif n == 709:\n            n += 1\n        elif n == 719:\n            n += 1\n        elif n =="
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 4 == 0:\n        return a\n    else:\n        return a + 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 1\n    while True:\n        s = sum(int(x) for x in str(n))\n        if s % 4 == 0:\n            break\n        n += 1\n    return str(n)"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 100:\n        return str(a)\n    elif a > 999:\n        return \"100\"\n    elif a % 3 == 0:\n        return \"\".join(str(a + d) for d in range(1, 4) if (a + d) % 4 == 0)\n    else:\n        return \"\".join(str(a + d) for d in range(1, 4) if (a + d) % 3 == 0)\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    result = 0\n    while result < num:\n        result = sum([int(x) for x in str(result)])\n    return str(result)\n\nassert solution(\"432\") == \"435\"\nassert solution(\"99\") == \"103\"\nassert solution(\"237\") == \"237\"\nassert solution(\"42\") == \"44\"\nassert solution(\"-9\") == \"-8\"\nassert solution(\"0\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\n\"\"\"\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    sum_a = sum([int(i) for i in str(a)])\n    if sum_a % 4 == 0:\n        return str(a)\n    else:\n        b = a + 1\n        while sum_a % 4!= 0:\n            b += 1\n            sum_b = sum([int(i) for i in str(b)])\n            if sum_b % 4 == 0:\n                break\n        return str(b)\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    "
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline().strip())\n    for _ in range(_):\n        s, m, *b = list(map(int, stdin.readline().strip().split(' ')))\n        bs = [0] * m\n        for b_index, b_value in enumerate(b):\n            bs[b_index] = sum(abs(b_index - b_index2) for b_index2 in range(m) if b_index2 > b_index)\n        print(''.join(s[b_index - 1] for b_index in bs))"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\nprint(solution(stdin))\n\n'''\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        s, m, b = stdin.readline().split()\n        b = [int(b[i]) for i in range(len(b))]\n        t = ''\n        for i in range(len(s)):\n            j = i + 1\n            while j < len(s) and s[j] < s[i]:\n                j += 1\n            if j == len(s):\n                t += s[i]\n                continue\n            k = i\n            while k < j and s[k] <= s[j]:\n                k += 1\n            for l in range(k, i, -1):\n                t += s[l]\n            t += s[j]\n            k = j + 1\n            while k < len(s) and s[k] <= s[j]:\n                k += 1\n            t += s[k]\n        b = sum(b[i] - abs(i - j) for i, j in enumerate(b) if j < len(s))\n        if b == len(s):\n            print(t)\nsolution(input())\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split()))[2]\n    b = list(map(int, stdin.split()))[3:]\n    b = b[:m]\n    s = stdin.split()[0]\n    s = s[:len(s)-m]\n    b.sort()\n    s = s.lower()\n    t = ''\n    b = b[::-1]\n    for i in s:\n        t += i\n        for j in range(len(b)):\n            if t.find(s[j]) > t.find(s[j-1]):\n                t += s[j]\n                b.pop(j)\n                break\n    return t\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe given string $s$ is guaranteed to be lowercase English letters. The given array $b$ is guaranteed to be an array of integers that correspond to the sum of the absolute difference between the indices and the index of the next letter in the alphabet (that is, that the index of the next letter is strictly greater than the index of the current letter).\n\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    s, n = sys.stdin.readline().strip().split()\n    m = int(sys.stdin.readline())\n    d = sys.stdin.readline().strip().split()\n    b = [int(d[i]) for i in range(m)]\n    t = [0 for i in range(len(s))]\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[j] > s[i]:\n                t[j] = t[j] + abs(i - j)\n    t.sort()\n    for i in range(len(b)):\n        if t[i]!= b[i]:\n            print(s[:i] + s[i + 1:])\n            break\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # The data, split into lines.\n    lines = stdin.split('\\n')\n\n    # The data, split into words.\n    words = [line.split() for line in lines]\n\n    # The data, split into integers.\n    ints = [int(word) for line in words for word in line]\n\n    # The answer\n    for i in range(len(ints)):\n        print(chr(ints[i] + 96), end='')\n    print()\n    return ''"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://www.codewars.com/kata/57b8600d8440e69cd8000022\n\n    The function returns a string which contains the correct English name for the dog number N.\n    '''\n    return next(zip(*[('a' * (i + 1) + 'b')[:N] for i in range(26)]))[0]"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = list(range(1, n + 1))\n    nums = [str(i) for i in digits]\n    nums.extend([str(i) + str(i) for i in digits])\n    nums.extend([str(i) + str(i) + str(i) for i in digits])\n    nums.extend([str(i) + str(i) + str(i) + str(i) for i in digits])\n    nums.extend([str(i) + str(i) + str(i) + str(i) + str(i) for i in digits])\n    return nums[n - 1]"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\nprint(solution(input()))\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    dogs = []\n    for _ in range(int(stdin.strip())):\n        dogs.append(str(ord(stdin.strip()) - 96))\n    for _ in range(int(stdin.strip())):\n        print(dogs.pop())\n    return ''"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.split()\n    n = int(text[0])\n    text = text[1:]\n    words = []\n    for word in text:\n        words.append(list(word))\n    m = len(words)\n    table = [[0 for i in range(m)] for j in range(m)]\n    for i in range(m):\n        for j in range(i, m):\n            if i == j:\n                table[i][j] = 0\n            else:\n                table[i][j] = min(table[i][j - 1] + 1, table[i - 1][j] + 1, table[i - 1][j - 1] + (words[i][0]!= words[j][0]))\n    return table[m - 1][m - 1]\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.splitlines()[0].strip()\n    words = text.split()\n    words.sort(key=len)\n    n = len(words)\n    abbreviations = []\n    for i in range(n - 1):\n        if len(words[i]) > 1 and len(words[i + 1]) > 1 and len(words[i]) == len(words[i + 1]):\n            abbreviations.append((words[i], words[i + 1]))\n    \n    for ab in abbreviations:\n        first = ab[0]\n        second = ab[1]\n        count = 0\n        for i in range(len(first)):\n            if first[i]!= second[i]:\n                break\n            else:\n                count += 1\n        if count == len(first):\n            text = text.replace(second, \"\".join(first[:count + 1]))\n    \n    return text\n\n\nassert(solution('''\nto be or not to be\n''') == 'TB or not TB')\nassert(solution('''\na ab a a b ab a a b c\n''') == 'a AAAB AAAB c')\nassert(solution('''\naa bb aa aa bb bb\n''') == 'AB aa AB bb')\n\nassert(solution('''\n1 2 2 1 1 2\n''') == '2 1 1 2')\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.split()\n    for i in range(1, len(words)):\n        if words[i].upper() == words[i - 1].upper():\n            words[i - 1] = words[i - 1][0] + words[i - 1][1:].upper()\n    return''.join(words)"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.split()\n    words = [w.strip() for w in words]\n    words = [list(w) for w in words]\n    words = [w for w in words if len(w) > 0]\n\n    if len(words) == 1:\n        return words[0][0] * n\n\n    sorted_words = sorted(words, key=len)\n    ret = 0\n    for i in range(len(sorted_words)):\n        for j in range(i + 1, len(sorted_words)):\n            if sorted_words[j][0] == sorted_words[i][0]:\n                continue\n            if len(sorted_words[j]) - len(sorted_words[i]) == 1:\n                ret += len(sorted_words[i]) + len(sorted_words[j])\n                sorted_words[i] = sorted_words[i] + sorted_words[j][1:]\n                sorted_words.pop(j)\n                break\n    return ret\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n\n    def create_abbreviation(word):\n        ans = \"\"\n        for i in range(len(word)):\n            ans += word[i].upper()\n            if i == len(word) - 1:\n                return ans\n\n            for k in range(i + 1, len(word)):\n                if word[k]!= word[i]:\n                    break\n            else:\n                return ans\n\n        for k in range(i + 1, len(word)):\n            ans += word[k].upper()\n        return ans\n\n    res = [0] * len(words)\n\n    for i in range(len(words)):\n        res[i] = create_abbreviation(words[i])\n\n    res = list(filter(lambda x: x, res))\n\n    return str(len(res[0]))\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().strip().split()\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j - i == abs(ord(words[i][0]) - ord(words[j][0])):\n                words[i], words[j] = words[j], words[i]\n\n    ans = []\n    prev = None\n    for word in words:\n        if prev == word:\n            continue\n\n        prev = word\n        ans.append(word)\n    return ''.join(ans)"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    words = stdin[1].split()\n    result = len(words)\n    for _ in range(n - 1):\n        for i in range(len(words) - 1):\n            if words[i] == words[i + 1]:\n                words[i:i + 2] = [words[i] + words[i + 1]]\n                result -= 2\n    return result\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    k = min(k, n - 1)\n\n    a.sort()\n    dp = [[0 for _ in range(n)] for _ in range(k + 1)]\n    for j in range(1, n):\n        dp[0][j] = a[j]\n\n    for i in range(1, k + 1):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - 1] + a[j])\n    return''.join(map(str, dp[-1]))\n\nassert(solution('''8 3\n5 4 2 6 5 1 9 2''') == '20'\nassert(solution('''5 1\n1 1 1 1 1''') == '1'\nassert(solution('''4 2\n1 2000 2000 2''') == '4000'\nassert(solution('''8 3\n1 2 3 4 5 6 7 8''') == '1 2 3 4'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    l = [int(i) for i in stdin.split()]\n    probs = [l[i:i+n] for i in range(0, len(l), n)]\n    dist = [set() for _ in range(k)]\n    for i in range(k):\n        for j in range(n):\n            dist[i].add(probs[j][i])\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(i+1, j):\n                for l in range(k+1, j):\n                    dist[j-i-k-1].add(probs[i][j] + probs[j][k] + probs[k][l])\n    return max(dist[i])"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, k = [int(x) for x in stdin[0].split(\" \")]\n    a = [int(x) for x in stdin[1].split(\" \")]\n    a.sort()\n    \n    def solve(a, k, n, res):\n        if k < 1:\n            return 0\n        \n        res.append(0)\n        \n        for i in range(0, n-1):\n            if a[i] <= a[i+1]:\n                res[-1] = max(res[-1], solve(a[i+1:], k-1, n-i-1, res))\n        \n        res[-1] = max(res[-1], solve(a[n-1:], k, n-1, res))\n        \n        return res[-1]\n    \n    return str(solve(a, k, n, [0]))"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = 0\n    for l in range(n):\n        s = max(s, max(a[l:k+1]))\n    return str(s)\n\n\n\nsolution(\"5 3\")\nsolution(\"5 1\")\nsolution(\"4 2\")\nsolution(\"1 2000 2000 2\")\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return stdout.strip()\n\nsolution(input())\n\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = tuple(int(x) for x in stdin.split())\n    k, n = t\n    a = tuple(int(x) for x in stdin.split())\n    s = []\n    for i in range(n):\n        s.append(a[i])\n        if i % (k + 1) == k:\n            s.sort()\n    s = tuple(s)\n    l = 1\n    r = 0\n    m = 0\n    for i in range(n):\n        if s[i] > m:\n            m = s[i]\n            l = i\n            r = i + k - 1\n    return f'{m}\\n{l + 1} {r + 1}'"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (n + 1) for _ in range(k)]\n    dp[0][0] = a[0]\n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i - 1], a[i])\n    for i in range(1, k):\n        for j in range(i, n):\n            dp[i][j] = max(dp[i - 1][j - 1] + a[j], dp[i][j - 1])\n    return str(max(dp[-1]))\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n    l = 0\n    r = n - 1\n    best_profit = 0\n    while r >= l:\n        mid = (r + l) // 2\n        if k == 0:\n            break\n        count = mid\n        profit = 0\n        l_i = l\n        for i in range(n):\n            if i <= l_i:\n                profit += a[i]\n            else:\n                profit -= a[i]\n            if profit > best_profit:\n                best_profit = profit\n            if profit > k:\n                count -= 1\n                k -= profit\n                l_i = i\n                if k < 0:\n                    break\n        if count > 0:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return best_profit\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    s = set()\n    for i in range(k):\n        s.add(a[i])\n    f = [0 for _ in range(n+1)]\n    f[0] = 1\n    for i in range(1,n+1):\n        for j in s:\n            if i-j > 0:\n                f[i] = max(f[i],f[i-j]+a[j-1])\n    return str(f[n])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    array = list(map(int, stdin.readline().split()))\n    result = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if array[i] + array[j] == 0:\n                result += 1\n                array[i] = array[j] = -1\n    return str(result)\n\nN = int(input())\narray = list(map(int, input().split()))\nprint(solution(stdin))\n\n'''\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = list(map(int, stdin[1:].split()))\n    result = 0\n    i = 0\n    while i < len(a):\n        if a[i] == 0:\n            result += 1\n            a.pop(i)\n        elif a[i] > 0:\n            j = i\n            while j < len(a) and a[j] > 0:\n                j += 1\n            k = j\n            while k < len(a) and a[k] < 0:\n                k += 1\n            result += k - j\n            a = a[:j] + [0] + a[j:k] + [a[k]] + a[k + 1:]\n        i += 1\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(i) for i in stdin.split()]\n    left = [0]\n    for i in range(1, len(arr)):\n        left.append(left[-1] + arr[i])\n    right = [0]\n    for i in range(len(arr) - 2, -1, -1):\n        right.append(right[-1] + arr[i])\n    right.reverse()\n    max_sums = 0\n    for i in range(len(arr)):\n        max_sums = max(max_sums, left[i] + right[i])\n    return str(max_sums)\n    \n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ...\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n\n    a = stdin.readline().strip()\n    a = list(map(int, a.split(' ')))\n\n    output = [0]\n\n    i = 0\n    while i < n - 1:\n        while i < n - 1 and a[i] <= a[i + 1]:\n            i += 1\n        if i >= n - 1:\n            break\n        output.append(i)\n\n        for j in range(i + 1, n):\n            if a[j] == 0:\n                output.append(j)\n                break\n        i = j + 1\n\n    return''.join(map(str, output))\n\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split(' ')))\n    array_copy = array[:]\n    array_copy.sort()\n    min_number_of_insertions = 0\n    for i in range(1, n):\n        if array_copy[i] == 0:\n            continue\n        elif array_copy[i] == array_copy[i - 1]:\n            continue\n        else:\n            min_number_of_insertions += 1\n            for j in range(i - 1, -1, -1):\n                if array_copy[i] - array_copy[j] == 0:\n                    array_copy[j + 1] = 0\n                    min_number_of_insertions -= 1\n                    break\n                elif array_copy[i] - array_copy[j] > 0:\n                    array_copy[j + 1] = array_copy[j] + 1\n                    min_number_of_insertions -= 1\n                    break\n    return str(min_number_of_insertions)\n\nassert(solution('4') == '1')\nassert(solution('5') == '0')\nassert(solution('9') == '3')\nassert(solution('-1 1 -1 1 -1 1 1 -1 -1') == '6')\nassert(solution('16 -5 -11 -15 10 5 4 -4') == '3')\nprint(\"All tests have passed successfully!\")\n\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    array = [int(el) for el in stdin.readline().split()]\n    result = 0\n    for i in range(1, n):\n        if array[i] >= 0 and array[i - 1] < 0:\n            if abs(array[i - 1]) % array[i] == 0:\n                array[i - 1] = abs(array[i - 1]) // array[i]\n                result += 1\n        elif array[i] < 0 and array[i - 1] >= 0:\n            if abs(array[i - 1]) % array[i] == 0:\n                array[i - 1] = abs(array[i - 1]) // array[i]\n                result += 1\n    return result\n    \n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = [int(x) for x in stdin.readline().split()]\n        if n > 1:\n            ans = sum(abs(i - j) for i, j in zip(stdin.readline().split(), stdin.readline().split()))\n            print(ans)"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == 1:\n        return 0\n    a = [int(x) for x in stdin.split()]\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, abs(a[i] - a[i + 1]))\n    return ans\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, m = map(int, stdin.readline().split())\n        a = [int(x) for x in stdin.readline().split()]\n        print(max_sum_of_differences(a, m))\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline())\n    for _ in range(num_cases):\n        length, target = map(int, stdin.readline().split())\n        arr = list(map(int, stdin.readline().split()))\n        ans = 0\n        for i in range(1, length):\n            ans = max(ans, abs(arr[i] - arr[i - 1]))\n        print(ans)\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        n, m = [int(x) for x in stdin.split()]\n        a = [int(x) for x in stdin.split()]\n        a_abs = [abs(a[i] - a[i - 1]) for i in range(1, n)]\n        max_abs = max(a_abs)\n        s = sum(a_abs)\n        print(s - max_abs)"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = [line.rstrip('\\n') for line in stdin.split('\\n')]\n    n = int(lines[0])\n    s = int(lines[1])\n    # Write code here\n    arr = [int(i) for i in lines[2].split(' ')]\n    best = 0\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > best:\n            best = diff\n    return str(best)\n\nprint(solution(input()))"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    for _ in range(t):\n        n, m = [int(n) for n in lines[1].split(\" \")]\n        a = [int(n) for n in lines[2].split(\" \")]\n        total_sum = sum(a)\n        max_sum = 0\n        for i in range(n - 1):\n            max_sum = max(max_sum, abs(a[i] - a[i + 1]))\n        print(total_sum - max_sum)\n    return \"\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n, m = map(int, stdin.readline().split(' '))\n        a = list(map(int, stdin.readline().split(' ')))\n        maximum = sum(abs(a[i] - a[i + 1]) for i in range(n - 1))\n        if maximum > m:\n            print(maximum)\n        else:\n            print(m - maximum)"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n, m = [int(x) for x in stdin.readline().strip().split(' ')]\n        a = [int(x) for x in stdin.readline().strip().split(' ')]\n\n        s = 0\n\n        for i in range(n - 1):\n            s += abs(a[i] - a[i + 1])\n\n        print(s)\n\n    return stdin.readline()"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == 1:\n        return 0\n    a = [int(x) for x in stdin.split()]\n    return max(abs(a[i] - a[i + 1]) for i in range(n - 1))\n\n\nassert solution('''1 100''') == '0'\nassert solution('''2 2''') == '2'\nassert solution('''5 5''') == '10'\nassert solution('''2 1000000000''') == '1000000000'\nassert solution('''1000000000 1000000000''') == '2000000000'\nassert solution('''3 10''') == '2'\nassert solution('''2 10''') == '0'\nassert solution('''1 1000000000''') == '1000000000'\nassert solution('''1000000000 1000000000''') == '2000000000'\nassert solution('''10 10''') == '2'\nassert solution('''10 1000000000''') == '1000000000'\nassert solution('''10 1000000000 1000000000''') == '2000000000'\n\nimport sys\nimport os"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    i = 0\n    while i < len(str(K)) and i < len(str(7 * K)):\n        if str(7 * K)[i] == \"7\":\n            return i + 1\n        i += 1\n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    index = -1\n    for i in range(1, len(str(K))):\n        if str(K)[i-1:i+1] == '7' and str(K)[i:i+1]!= '7':\n            index = i\n            break\n    return index"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    k = int(n)\n    #first num\n    first = 1\n    if k % 2!= 0:\n        first = 0\n    for i in range(1,k):\n        if first == 1:\n            first = i\n        if first % k == 0:\n            break\n    if first == 0:\n        return -1\n    else:\n        return first\n\nprint(solution(input()))\n"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    for i in range(1,10000):\n        if i % K == 0:\n            return str(i)\n    return str(-1)"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K, limit = stdin.split()\n    limit = int(limit)\n    # print(limit)\n    count = 1\n    if limit > 1:\n        for num in range(2, limit + 1):\n            if num % int(K) == 0:\n                count += 1\n    if count == 1:\n        return \"-1\"\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(...)"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    i = 1\n    while i*k < 1000000000:\n        i += 1\n    return str(i*k-1)\n\n\nassert(solution(input()) == \"-1\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"10\")\nassert(solution(input()) == \"17\")\nassert(solution(input()) == \"34\")\nassert(solution(input()) == \"53\")\nassert(solution(input()) == \"72\")\nassert(solution(input()) == \"91\")\n"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return \"\""
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    p = [int(x) for x in stdin.strip().split(' ')]\n\n    p.sort()\n\n    n_plus_1_half = n / 2\n    if n % 2 == 0:\n        median = p[n_plus_1_half - 1] + p[n_plus_1_half]\n    else:\n        median = p[n_plus_1_half]\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[i] + p[j] == m:\n                count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def count_pairs(n, m):\n        nums = sorted([int(i) for i in stdin.split()])\n        n_groups = n // 2\n        return sum(\n            1\n            for _ in range(n_groups)\n            for l, r in [\n                (l, r)\n                for l, r in [\n                    (nums[l - 1], nums[n_groups]),\n                    (nums[n_groups], nums[r - 1]),\n                ]\n                if l + 1 < r\n            ]\n            if nums[n_groups] - nums[l - 1] == m\n        )\n\n    n, m = [int(i) for i in stdin.split()]\n    return str(count_pairs(n, m))"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    perms = list(map(int, stdin.split()[1:]))\n    # nums = perms[:n // 2] + perms[(n + 1) // 2:]\n    # nums.sort()\n    # return len([i for i in range(n) if nums[i] == m])\n    seen = {nums: 0 for nums in perms}\n    for i in range(n // 2):\n        if m - perms[i] in seen:\n            seen[perms[i]] += 1\n            seen[perms[n - 1 - i]] += 1\n    return str(len(seen))\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    permutation = [int(x) for x in stdin.split(\" \")]\n    return count_pairs(permutation, m, n)\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = list(map(int, stdin.split()))\n    res = 0\n    \n    for i in range(n):\n        left = i\n        right = n - 1\n        while left < right:\n            if p[i] == m:\n                res += right - i\n                break\n            if p[left] == m:\n                res += i - left\n                break\n            left += 1\n            right -= 1\n    return str(res)"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # one line\n    n, m = [int(i) for i in stdin.split()]\n    p = list(map(int, stdin.split()))\n    p.sort()\n    a = [p[(i+1)//2 - 1] for i in range(n)]\n    return str(a.count(m))\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    p.sort()\n    r = 0\n    for i in range(len(p)):\n        for j in range(i + 1, len(p)):\n            if p[i] + p[j] == m:\n                r += 1\n    return str(r)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n\n    def can_write_coursework(n: int, a: list) -> bool:\n        max_cups = max(a)\n        cups_count = Counter(a)\n        return max_cups - min(cups_count) <= n\n\n    def day(a: list) -> int:\n        max_cups = max(a)\n        cups_count = Counter(a)\n        return max_cups - min(cups_count) + 1\n\n    if not can_write_coursework(m, a):\n        return '-1'\n\n    return str(day(a))"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = [0] + a\n    s = max(1, a[0])\n    for i in range(1, n + 1):\n        s = min(s, a[i] - i + 1)\n        if s == 0:\n            break\n    if s <= 0:\n        return '-1'\n    return str(s)"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cups_of_coffee, pages = [int(x) for x in stdin.split()]\n    cups_of_coffee_list = [int(x) for x in stdin.split()]\n\n    cups_of_coffee_cnt = Counter(cups_of_coffee_list)\n\n    min_days = n\n    for cup_of_coffee in cups_of_coffee_list:\n        if cup_of_coffee not in cups_of_coffee_cnt:\n            min_days = -1\n            break\n        elif cups_of_coffee_cnt[cup_of_coffee] > cups_of_coffee_list.count(cup_of_coffee):\n            min_days = -1\n            break\n\n    return str(min_days)\n\nsolution(stdin.read())\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == 0 or m == 0:\n        return '-1'\n    cups = [int(x) for x in stdin.split()]\n    if max(cups) > m:\n        return '-1'\n\n    cups.sort()\n    dp = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if j == 0:\n                dp[j] = cups[i] + max(0, j - cups[i] + 1)\n            else:\n                dp[j] = min(dp[j - 1], dp[j]) + max(0, j - cups[i] + 1)\n    return str(dp[-1])\n\nprint(solution('5 8'))\n\nprint(solution('7 10'))\n\nprint(solution('5 15'))\n\nprint(solution('5 26'))\n\nprint(solution('7 26'))\n\nprint(solution('10 100'))\n\n\nprint(solution('26 11'))\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    cups = [int(x) for x in stdin.split()]\n    cups.sort(reverse=True)\n    days = 0\n    for i, cup in enumerate(cups):\n        days += cup - (i + 1)\n        if days > m:\n            return -1\n    return days"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, m = [int(num) for num in stdin[0].split()]\n    cups_of_coffee = [int(num) for num in stdin[1].split()]\n    return solve(n, m, cups_of_coffee)\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().split()\n    n, m = int(line[0]), int(line[1])\n    line = stdin.readline().split()\n    a = list(map(int, line))\n\n    if m == 0 or sum(a) == 0:\n        return '-1'\n\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + 1\n        for j in range(i):\n            if a[i - 1] > a[j]:\n                dp[i] = min(dp[i], dp[j] + 1)\n\n    return str(dp[n])"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_naive(list(map(int, stdin.split('\\n')[1].split())), list(map(int, stdin.split('\\n')[2].split()))))\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    c = [int(x) for x in stdin.split()]\n    return '-1' if n * m < sum(c) else str(min(m, n - sum(x - i for i, x in enumerate(c))))\n\nn, m = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\na.sort()\ni = 0\nwhile m > 0 and i < len(a):\n    m -= a[i] - i\n    i += 1"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    if n == 0 or b == []:\n        return \"-1\"\n    b.sort()\n    steps = 0\n    if b[0] == b[1]:\n        return str(steps)\n    for i in range(n):\n        if b[i] - b[i - 1]!= 1:\n            return \"-1\"\n        steps += 1\n    return str(steps)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.splitlines()[0]\n    arr = stdin.splitlines()[1].split(' ')\n    answer = '-1'\n    n = int(num)\n    arr = [int(x) for x in arr]\n\n    def recurse(a: int, b: int, arr: list[int], current: int) -> int:\n        if a == b:\n            return current\n\n        max_diff = -1\n        for i in range(1, len(arr) - 1):\n            diff = abs(arr[i] - arr[i - 1])\n            if diff > max_diff:\n                max_diff = diff\n            diff = abs(arr[i] - arr[i + 1])\n            if diff > max_diff:\n                max_diff = diff\n        if max_diff > 1:\n            return -1\n\n        for i in range(len(arr)):\n            for j in range(i + 1, len(arr)):\n                if arr[i] == arr[j]:\n                    continue\n                new_arr = arr[:]\n                new_arr[i], new_arr[j] = new_arr[j], new_arr[i]\n                if recurse(a, b, new_arr, current + 1)!= -1:\n                    return current + 1\n\n        return -1\n\n    return str(recurse(arr[0], arr[-1], arr, 0))\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 0:\n        return \"0\"\n    sequence = list(map(int, stdin.readline().strip().split(' ')))\n\n    # first determine how many elements are changed by Polycarp\n    answer = 0\n    i = 0\n    while i < n - 1:\n        diff = sequence[i+1] - sequence[i]\n        if diff == 0:\n            i += 1\n        elif diff == 1:\n            i += 2\n        else:\n            answer += 1\n            i += 1\n    if answer == n - 1:\n        return \"-1\"\n    else:\n        return str(answer)\n\nassert(solution('''4\n24 21 14 10\n''') == '3')\n\nassert(solution('''2\n500 500\n''') == '0')\n\nassert(solution('''3\n14 5 1\n''') == '-1')\n\nassert(solution('''5\n1 3 6 9 12\n''') == '1')\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split(' ')))\n    b_min = 0\n    b_max = 0\n    for i in b:\n        b_max = max(i, b_max)\n        b_min = min(i, b_min)\n    if b_min == 0:\n        return str(-1)\n    if b_max - b_min == 0:\n        return str(0)\n    return str(b_max - b_min)"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline())\n    seq = list(map(int, stdin.readline().split()))\n    len_seq = len(seq)\n    count_add = 0\n    count_sub = 0\n    i = 0\n    while i < len_seq - 1:\n        if seq[i] < seq[i+1] and seq[i+1] - seq[i] <= 1:\n            count_add += 1\n            i += 1\n        elif seq[i] > seq[i+1] and seq[i+1] - seq[i] <= 1:\n            count_sub += 1\n            i += 1\n        else:\n            return -1\n    return count_add + count_sub\n\nprint(solution(input()))\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    b = list(map(int, stdin[1].split()))\n    min_num_change = 0\n    if len(b) < 2:\n        return '0'\n    for i in range(n):\n        if b[i]!= i:\n            for j in range(i, n):\n                if b[i] > b[j]:\n                    b[i], b[j] = b[j], b[i]\n                    b = b[:i] + [j] + b[i:j] + [b[i]] + b[j:]\n                    min_num_change += 1\n                    break\n    return str(min_num_change)\n\n\nassert solution('''4\n24 21 14 10\n''') == '3'\nassert solution('''2\n500 500\n''') == '0'\nassert solution('''3\n14 5 1\n''') == '-1'\nassert solution('''5\n1 3 6 9 12\n''') == '1'\nassert solution('''7\n1 2 3 4 5 6 7\n''') == '3'\nassert solution('''9\n1 2 3 4 5 6 7 8 9\n''') == '0'\nassert solution('''6\n1 2 3 4 5 6\n''') == '3'\nassert solution('''8\n1 2 3 4 5 6 7 8 9 10\n''') == '3'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n''') == '0'\nassert solution('''21\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\n''') == '18'\nassert solution('''40\n
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n\n    b.sort()\n    if b[0] - b[1] == b[1] - b[2]:\n        return \"0\"\n    if b[0] - b[1] == b[2] - b[3]:\n        return \"0\"\n    if b[0] - b[1] == b[2] - b[3] == b[3] - b[4]:\n        return \"0\"\n    if b[0] - b[1] == b[1] - b[2] == b[2] - b[3] == b[3] - b[4] == b[4] - b[5]:\n        return \"0\"\n\n    a = [1, 0, 0, 0]\n    for i in range(n):\n        a[i % 4] += 1\n        a[(i + 1) % 4] -= 1\n        a[(i + 2) % 4] += 1\n        a[(i + 3) % 4] -= 1\n\n    return str(a.count(0))\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def arithmetic_progression(seq):\n        if len(seq) <= 2:\n            return False\n\n        for i in range(1, len(seq)):\n            if seq[i] - seq[i - 1]!= seq[1] - seq[0]:\n                return False\n\n        return True\n\n    def non_arithmetic_progression(seq):\n        if len(seq) <= 2:\n            return False\n\n        if seq[0] == seq[1] or seq[1] == seq[2]:\n            return False\n\n        for i in range(1, len(seq)):\n            if seq[i] - seq[i - 1]!= seq[i] - seq[i - 2]:\n                return False\n\n        return True\n\n    n = int(stdin.readline().strip())\n    seq = list(map(int, stdin.readline().strip().split()))\n    res = -1\n    while res == -1:\n        if arithmetic_progression(seq):\n            if non_arithmetic_progression(seq):\n                res = len(seq)\n            else:\n                seq[0] -= 1\n        else:\n            seq[0] += 1\n\n    print(res)\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    b.sort()\n    b.append(0)\n    if b[0]!= 0:\n        print(-1)\n        return\n    i = 0\n    while i + 1 < n:\n        if b[i] + 1 == b[i+1]:\n            i += 1\n        elif b[i] - 1 == b[i+1]:\n            b[i+1] += 1\n            b[i] -= 1\n            i += 1\n        elif b[i] + 1 == b[i+2]:\n            b[i+2] += 1\n            b[i] -= 1\n            i += 2\n        else:\n            print(-1)\n            return\n    print(b.count(b[0]) + 1)\n\nsolution(input())\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = tuple(int(x) for x in stdin[0].split())\n    a = list(int(x) for x in stdin[1].split())\n    # TLE\n    # a.sort()\n    # a.reverse()\n    # n = len(a)\n    # teams = 0\n    #\n    # for i in range(0, n, 2):\n    #     if n % 2 == 1:\n    #         if i + 1 < n:\n    #             team_sum = a[i] + a[i + 1]\n    #         else:\n    #             team_sum = a[i]\n    #         if team_sum <= k:\n    #             teams += 1\n    #     else:\n    #         team_sum = a[i]\n    #         if team_sum <= k:\n    #             teams += 1\n    # return teams\n    n = len(a)\n    max_teams = 0\n\n    for i in range(0, n + 1, 2):\n        teams = 0\n        j = i + 1\n        while j < n:\n            if a[i] + a[j] <= k:\n                teams += 1\n            j += 1\n\n        max_teams = max(max_teams, teams)\n\n    return max_teams"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    dp = [[0] * n for _ in range(k + 1)]\n    for i in range(1, n + 1):\n        dp[1][i - 1] = a[i - 1]\n        dp[2][i - 1] = a[i - 1] + a[i - 1]\n    for i in range(3, k + 1):\n        for j in range(1, n + 1):\n            dp[i][j - 1] = max(dp[i][j - 1], dp[i - 1][j] - 5, dp[i - 1][j - 1] + a[j - 1])\n    return str(max(dp[-1]))\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, k = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    a = list(map(int, stdin[1].split()))\n    return str(solve(n, k, a))\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    skill_list = [int(x) for x in stdin.split()]\n    skill_list = sorted(skill_list)\n    skill_list = [0] + skill_list\n    left = 0\n    for right in range(1, len(skill_list)):\n        if skill_list[right] - skill_list[left] > 5:\n            skill_list[left] += 1\n            skill_list[right] -= 1\n            left += 1\n        else:\n            skill_list[right] += 1\n    return str(min(skill_list[-k:]) + n - sum(skill_list[-k:]))\n\n\nassert(solution(input()) == input())\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n:\n        return '0'\n    s = sorted(map(int, stdin.split()))[::-1]\n    n_teams = 0\n    s_n_teams = 0\n    while n_teams <= k:\n        s_n_teams = n_teams\n        s_n_teams += s[0]\n        s_n_teams += s[1]\n        s_n_teams += s[2]\n        if s_n_teams <= k:\n            n_teams += 1\n            s[0] += 1\n            s[1] += 1\n            s[2] += 1\n        else:\n            return str(s_n_teams)\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    l = [int(x) for x in stdin.split(' ')]\n    l.sort()\n    s = 0\n    for i in range(0, n, k + 1):\n        s += l[i]\n    return s"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(k + 1):\n            if j > 0:\n                dp[i + 1][j] += dp[i][j]\n            if j + a[i] <= k:\n                dp[i + 1][j + a[i]] += dp[i][j]\n    for row in dp:\n        print(' '.join(map(str, row)))\n    return ''"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # n, k = [int(x) for x in stdin.split(' ')]\n    # a = [int(x) for x in stdin.split(' ')]\n    # return str(solve(n, k, a))\n    pass\n\n\n@timed(1.5)\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    stdin = stdin.splitlines()\n    n, k = [int(i) for i in stdin[0].split(' ')]\n    a = [int(i) for i in stdin[1].split(' ')]\n\n    cnt = 0\n    cur = set()\n    for i in range(len(a)):\n        if i in cur:\n            continue\n\n        m = max(a) - min(a)\n        if m > 5:\n            break\n\n        cur.add(i)\n        cnt += 1\n\n    return cnt\n"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    points = [int(x) for x in stdin.split()]\n    if m >= sum(points) / n:\n        return \"0\"\n\n    # sort the scores\n    points.sort(reverse=True)\n\n    # find the lowest point required\n    min_required = sum(points[:m]) / n\n\n    if m == n:\n        return str(min_required)\n\n    # find the last index of the lowest point required\n    index = 0\n    for i in range(1, n):\n        if points[i] >= min_required:\n            index = i\n            break\n\n    return str(index + 1)\n\nassert(solution(\"5 10 7\") == \"8\")\nassert(solution(\"8 10 3 6\") == \"8\")\nassert(solution(\"1 1 1\") == \"0\")\nassert(solution(\"2 2 2\") == \"0\")\nassert(solution(\"3 3 3\") == \"0\")\nassert(solution(\"3 10 2\") == \"2\")\nassert(solution(\"5 5 5\") == \"0\")\nassert(solution(\"10 1 1\") == \"2\")\nassert(solution(\"4 10 1\") == \"-1\")\nassert(solution(\"1 1 1\") == \"0\")\nassert(solution(\"2 2 2\") == \"0\")\nassert(solution(\"3 3 3\") == \"0\")\nassert(solution(\"7 9 4 6\") == \"1\")\nassert(solution(\"8 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")\nassert(solution(\"3 9 4 6\") == \"1\")"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if k < m:\n        return -1\n    else:\n        total = 0\n        for i in a:\n            total += i\n        if total < m:\n            return -1\n        else:\n            return m - (total - k)"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"1234567891011\""
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    s = sum(A)\n    if s < M:\n        return -1\n    A.sort(reverse=True)\n    A = A[:N-1]\n    s = sum(A)\n    if s < M:\n        return -1\n    if s >= M:\n        return sum(A) - M"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    n, k, m = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    if n < 2 or m < 1:\n        return -1\n    score = 0\n    for i in range(n-1):\n        stdin = stdin.split(' ')\n        score += int(stdin[0])\n    avg = (score + m) / (n-1)\n    if avg < m:\n        return -1\n    elif avg > m:\n        return (avg - m) * n\n    else:\n        return 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    N, K, M = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    A = list(map(int, stdin[3].split(' ')))\n\n    if M >= K:\n        return -1\n\n    score = K * N\n    for x in A:\n        if x >= K:\n            score -= K\n        else:\n            score -= x\n        if score <= M:\n            return score\n\n    return -1"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takahashi is taking exams on N subjects. The score on each subject will be an integer between 0 and K (inclusive).\nHe has already taken exams on N-1 subjects and scored A_i points on the i-th subject.\nHis goal is to achieve the average score of M points or above on the N subjects.\nPrint the minimum number of points Takahashi needs on the final subject to achieve his goal.\nIf the goal is unachievable, print -1 instead.\n\n>>> solution(\"\")\n-1\n>>> solution(\"1 2 3\")\n-1\n>>> solution(\"1 2 3 4\")\n1\n>>> solution(\"1 2 3 4 5\")\n2\n>>> solution(\"1 2 3 4 5 6\")\n3\n>>> solution(\"1 2 3 4 5 6 7\")\n4\n>>> solution(\"1 2 3 4 5 6 7 8\")\n5\n>>> solution(\"1 2 3 4 5 6 7 8 9\")\n6\n>>> solution(\"1 2 3 4 5 6 7 8 9 10\")\n-1\n>>> solution(\"1 2 3 4 5 6 7 8 9 10 11\")\n-1\n>>> solution(\"1 2 3 4 5 6 7 8 9 10 11 12\")\n-1\n\"\"\"\n    N, K, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort(reverse=True)\n    A = A[:N - 1]\n    s = sum(A)\n    if s >= M:\n        return N\n    else:\n        return -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split('\\n')[0]\n\nassert solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('1 1 1\\n1\\n') == 'Yes\\nYes\\nYes\\nYes\\nYes'\nassert solution('7 4 6\\n2\\n1\\n3\\n4\\n5\\n6\\n7\\n') == 'Yes\\nNo\\nYes\\nNo\\nYes\\nNo\\nYes'\nassert solution('5 5 7\\n2\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n') == 'Yes\\nYes\\nYes\\nNo\\nYes\\nYes\\nNo'\nassert solution('5 6 8\\n2\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n') == 'Yes\\nYes\\nYes\\nNo\\nYes\\nNo\\nYes'\nassert solution('5 5 9\\n2\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n') == 'Yes\\nYes\\nYes\\nNo\\nYes\\nNo\\nYes'\nassert solution('5 4 5\\n2\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n') == 'Yes\\nYes\\nYes\\nNo\\nYes\\nNo\\nYes'\nassert solution('6 3 4\\n3\\n1\\n3\\n2\\n') == 'No\\nNo\\nYes\\nNo\\nNo\\nNo'\nassert solution('7 4 6\\n2\\n1\\n3\\n4\\n5\\n6\\n7\\n') == 'Yes\\nNo\\nYes\\nNo\\nYes\\nNo\\nYes'\nassert solution('5 5 7\\n2\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n') == 'Yes\\nYes\\nYes\\nNo\\nYes\\nNo\\nYes'\nassert solution('5 6 8\\n2\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n') == 'Yes\\nYes\\nYes\\nNo\\nYes\\nYes\\nNo'\nassert solution('5 6 8\\n2\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n') == 'Yes\\nYes\\nYes\\nNo\\nYes\\nYes\\nNo'\nassert solution('5 5 9\\n2\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n') == 'Yes\\nYes\\nYes\\nNo\\nYes\\nNo\\nYes'\nassert solution"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = [int(x) for x in stdin.split(\" \")]\n    scores = [int(stdin.split(\" \")[i]) for i in range(N)]\n    for i in range(Q):\n        scores[i % N] -= 1\n    survivors = [True if x >= 0 else False for x in scores]\n    return \"\".join([\"Yes\\n\" if survivor else \"No\\n\" for survivor in survivors])\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(x) for x in stdin.split()]\n    players = [int(x) for x in stdin.split()]\n    for _ in range(q):\n        players[int(stdin.readline())-1] -= 1\n    return 'Yes' if sum(x for x in players if x >= 0) <= k else 'No'\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    |n|k|q|\n    |1|3|4|\n    |3|2|1|\n    |2|1|3|\n    |1|3|2|\n    |1|2|1|\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(line) for line in stdin.split()]\n    N, K, Q = inputs[0], inputs[1], inputs[2]\n    scores = [K] * N\n    for i in range(Q):\n        ans = int(stdin.readline()) - 1\n        if ans > 0:\n            for j in range(ans):\n                scores[j] -= 1\n    for score in scores:\n        print('Yes' if score >= 0 else 'No')\n\nsolution(input())\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, Q = map(int, stdin.split())\n    N, A = map(int, stdin.split())\n    scores = [K]*N\n    for _ in range(Q):\n        k = int(stdin.readline())\n        if A[k-1] == 1:\n            scores[k-1] -= 1\n        else:\n            scores[k-1] -= 1\n    for score in scores:\n        if score < 1:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = list(map(int, stdin.split()))\n    players_scores = list(map(int, stdin.split()))\n    players_survived = list()\n    for i in range(1, N + 1):\n        players_survived.append(True)\n    for i in range(Q):\n        players_survived[i] = players_survived[i] and (players_scores[i] >= K)\n    return '\\n'.join(str(i) for i in players_survived)\n\n-----Alternate Solutions-----\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    matrix = [\n        [int(x) for x in stdin.split(\" \")] for _ in range(n)\n    ]\n    sorted_matrix = sorted(matrix, key=lambda x: tuple(x))\n    if matrix!= sorted_matrix:\n        return \"NO\"\n    row_inversions = 0\n    column_inversions = 0\n    for row in matrix:\n        for column in range(m - 1):\n            if row[column] == 1 and row[column + 1] == 0:\n                row_inversions += 1\n    for column in range(m):\n        for row in range(n - 1):\n            if matrix[row][column] == 1 and matrix[row + 1][column] == 0:\n                column_inversions += 1\n    return f\"YES\\n{row_inversions}\\n{column_inversions}\"\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Reads the matrix as a string and returns the string of the sequence of operations that will sort the matrix.\n\n    Input: stdin is a string representing a matrix\n    Output: stdout is a string of the sequence of operations that will sort the matrix.\n    '''\n\n    n, m = map(int, stdin.split())\n    a = [map(int, line.split()) for line in stdin.splitlines()]\n\n    # if a[0][0] or a[0][1] or a[1][0] or a[1][1] are 0, the row or column has to be inverted\n    if a[0][0] or a[0][1] or a[1][0] or a[1][1] == 0:\n        r = '0'\n    else:\n        r = '1'\n\n    # the column has to be inverted\n    if a[0][0] or a[0][1] or a[1][0] or a[1][1] == 0:\n        c = '0'\n    else:\n        c = '1'\n\n    print(r)\n    print(c)"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    if n * m == 0:\n        return \"NO\"\n    b = [list(map(int, stdin.split(\" \"))) for _ in range(n)]\n    for row in range(n):\n        for col in range(m):\n            if b[row][col] == 1:\n                b[row][col] = 0\n            elif b[row][col] == 0:\n                b[row][col] = 1\n    # print(\"\".join([str(x) for x in b[0]]))\n    # print(\"\".join([str(x) for x in b[1]]))\n    r = []\n    for row in range(n):\n        r.append(\"\".join([str(x) for x in b[row]]))\n    c = []\n    for col in range(m):\n        c.append(\"\".join([str(x) for x in b[:, col]]))\n    return \"YES\" if r == sorted(r, reverse=True) and c == sorted(c, reverse=True) else \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n < 1 or m < 1:\n        return \"NO\"\n    arr = [stdin.split() for _ in range(n)]\n    if any(any(x) for x in arr):\n        return \"NO\"\n    arr.sort(key=lambda x: tuple(x))\n    return \"YES\\n\" + (\"\".join((\"\".join(x) for x in arr)) if all(x) else \"NO\")\n\nprint(solution(input()))\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(int(x) for x in stdin.readline().split())\n\n    a = []\n    for _ in range(n):\n        a.append(list(int(x) for x in stdin.readline().split()))\n\n    r = []\n    c = []\n\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                r.append(i)\n                c.append(j)\n\n    r.sort()\n    c.sort()\n\n    rr = [0 for _ in range(n)]\n    cc = [0 for _ in range(m)]\n\n    for i in range(n):\n        rr[r[i]] = i\n\n    for j in range(m):\n        cc[c[j]] = j\n\n    r = [0 for _ in range(n)]\n    c = [0 for _ in range(m)]\n\n    for i in range(n):\n        r[rr[i]] = '1' if rr[i]!= i else '0'\n        for j in range(m):\n            c[cc[j]] = '1' if cc[j]!= j else '0'\n\n    return 'YES' if r == sorted(r, reverse = True) and c == sorted(c, reverse = True) else 'NO'\n\nassert solution('''2 2\n0 1\n0 1''') == 'YES'\nassert solution('''3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1''') == 'YES'\nassert solution('''3 3\n0 0 0\n1 0 1\n1 1 0''') == 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://www.hackerrank.com/challenges/ctci-array-left-rotation/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=arrays\n    '''\n    stdin = stdin.splitlines()\n    n, m = map(int, stdin[0].split())\n    a = list(map(int, stdin[1].split()))\n    for _ in range(n):\n        a[i], a[i+m] = a[i+m], a[i]\n    return 'YES' if sorted(a) == a else 'NO'\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = [[int(x) for x in stdin.split()] for _ in range(n)]\n    if not can_be_sorted(grid):\n        print('NO')\n        return\n    print('YES')\n    row = [False] * m\n    col = [False] * n\n    print(row_inversion(grid, row))\n    print(col_inversion(grid, col))\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    matrix = [stdin.readline().strip() for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == \"0\":\n                matrix[i][j] = \"1\"\n            else:\n                matrix[i][j] = \"0\"\n\n    is_sorted = True\n\n    for i in range(n):\n        if sorted(matrix[i])!= sorted(matrix[i][::-1]):\n            is_sorted = False\n\n    if is_sorted:\n        print(\"YES\")\n        print(\"\".join(matrix[0]))\n        print(\"\".join(matrix[1]))\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = [int(x) for x in stdin.split(' ')]\n\n    matrix = [list(map(int, stdin.split(' '))) for _ in range(n)]\n\n    return 'YES' if is_sorted(matrix) else 'NO'\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if (N % 2)!= 0:\n        return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    if len(a) % 2 == 0:\n        if int(a) % 4 == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n\nassert(solution(\"373\") == \"Yes\")\nassert(solution(\"121\") == \"No\")\nassert(solution(\"436\") == \"Yes\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A string of digits is called a happy number if it does not become\n    one when the next string is evaluated.\n\n    >>> solution('121')\n    'Yes'\n\n    >>> solution('1255')\n    'Yes'\n\n    >>> solution('12345')\n    'No'\n\n    >>> solution('123456789')\n    'No'\n\n    >>> solution('1337')\n    'No'\n\n    >>> solution('12345678901')\n    'Yes'\n\n    \"\"\"\n    def is_happy(number: int) -> bool:\n        \"\"\"Returns True if number is a happy number.\n\n        >>> is_happy(12345)\n        False\n\n        >>> is_happy(12)\n        True\n\n        >>> is_happy(7)\n        True\n\n        >>> is_happy(99)\n        True\n\n        >>> is_happy(0)\n        False\n\n        \"\"\"\n        digit_list = list(str(number))\n        return sum(int(digit) ** 2 for digit in digit_list) == number\n\n    number = int(stdin)\n    while True:\n        if is_happy(number):\n            return 'Yes'\n        number = sum(int(digit) ** 2 for digit in str(number))\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number: int = int(stdin)\n    if number % 2 == 0:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string_len = int(stdin)\n    if string_len < 1 or string_len > 10:\n        return \"No\"\n    elif string_len % 2!= 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(set(stdin)) == 10 else \"No\"\n\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if _is_perfect_power(int(stdin)) else \"No\"\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def helper(s: str, n: int) -> bool:\n        for i in range(len(s)):\n            if s[i] == '6' and n > 0:\n                s = s[:i] + s[i+1:]\n                n -= 1\n            elif s[i] == '9' and n > 0:\n                s = s[:i] + s[i+1:]\n                n -= 1\n            elif n == 0:\n                return True\n        return False\n    for i in range(1, 10):\n        if helper(stdin, i):\n            return 'Yes'\n    return 'No'\n\nassert 'Yes' == solution('373')\nassert 'Yes' == solution('121')\nassert 'No' == solution('436')\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin) == 10 else \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert(solution(input()) == \"Yes\")\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nprint(solution(input()))\n\"\"\"\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = (int(x) for x in stdin.strip().split(' '))\n\n    s = stdin.strip().split(' ')\n    s = (int(x) for x in s)\n    s = [int(x) for x in s]\n\n    cnt = 0\n    for i in range(1, n):\n        if s[i] == 0:\n            cnt += i - 1\n        else:\n            if s[i-1] == 0:\n                cnt += 1\n\n    return str(cnt)"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # These two lines will be used for getting the inputs from the stdin\n    # The stdin will be in the form of lines, each line is a separate input.\n    n, b, a = [int(x) for x in stdin.strip().split()]\n    s = [int(x) for x in stdin.strip().split()]\n\n    def count_segments(b, a, s):\n        possible_moves = [1, -1]\n        i = 0\n        result = 1\n        current_segment = 0\n        while i < n:\n            if s[i] == 1:\n                current_segment += 1\n            if current_segment == 1:\n                if i + 1 < n and s[i + 1] == 1:\n                    current_segment += 1\n                else:\n                    result += 1\n                    current_segment = 0\n            if current_segment == 2:\n                if i + 1 < n and s[i + 1] == 0:\n                    result += 1\n                    current_segment = 0\n            if current_segment == 3:\n                if i + 1 < n and s[i + 1] == 1:\n                    current_segment += 1\n                    possible_moves.remove(-1)\n                else:\n                    possible_moves.remove(-1)\n                    result += 1\n                    current_segment = 0\n            if current_segment == 4:\n                if i + 1 < n and s[i + 1] == 0:\n                    result += 1\n                    current_segment = 0\n            i += 1\n        return result\n\n    return str(count_segments(b, a, s))\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n\n    a_max, b_max = min(n, a), min(n, b)\n    dp = [[0] * (a_max + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, a_max + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1])\n            if j > 0:\n                if s[i - 1] == 1:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1)\n            if dp[i][j] == b:\n                break\n\n    return str(dp[n][a_max])\n\nimport sys"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_memoized(stdin))\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(i) for i in stdin.split()]\n\n    s = list(map(int, stdin.split()))\n    return''.join([str(b), str(a), str(n-s.count(0))])\n\nassert(solution('5 2 1') == '5')\nassert(solution('6 2 1') == '3')\nassert(solution('5 2 1') == '5')\nassert(solution('5 1 2') == '2')\nassert(solution('1 2 1') == '2')\nassert(solution('1 1 1') == '0')\nassert(solution('1 1 1') == '0')\nassert(solution('5 2 1') == '5')\nassert(solution('6 2 1') == '3')\nassert(solution('5 2 1') == '5')\nassert(solution('5 1 2') == '2')\nassert(solution('1 2 1') == '2')\nassert(solution('1 1 1') == '0')\nassert(solution('1 1 1') == '0')\nassert(solution('5 2 1') == '5')\nassert(solution('6 2 1') == '3')\nassert(solution('5 2 1') == '5')\nassert(solution('5 1 2') == '2')\nassert(solution('1 2 1') == '2')\nassert(solution('1 1 1') == '0')\nassert(solution('1 1 1') == '0')\nassert(solution('5 2 1') == '5')\nassert(solution('6 2 1') == '3')\nassert(solution('5 2 1') == '5')\nassert(solution('5 1 2') == '2')\nassert(solution('1 2 1') == '2')\nassert(solution('1 1 1') == '0')\nassert(solution('1 1 1') == '0')\nassert(solution('5 2 1') == '5')\nassert(solution('6 2 1') == '3')\nassert(solution('5 2 1') == '5')\nassert(solution('5 1 2') == '2')\nassert(solution('1 2 1') == '2')\nassert(solution('1 1 1') == '0')\nassert(solution('1 1 1') == '0')\nassert(solution('5 2 1') == '5')\nassert(solution('6 2 1') == '3')\nassert(solution('5 2 1') == '5')\nassert(solution('5 1 2') == '2')\nassert(solution('1 2 1') == '2')\nassert(solution('1 1 1') == '0')\nassert(solution('1 1 1') == '0')\nassert(solution('5 2 1') == '5')\nassert(solution('6 2 1') == '3')\nassert(solution('5 2 1') == '5')\nassert(solution('5 1 2') == '2')\nassert(solution('1 2 1') == '2')\nassert(solution('1 1 1') == '0')\nassert(solution('1 1 1') == '0')\nassert(solution('5 2 1') == '5')\nassert(solution('6 2 1') == '3')\nassert(solution('5 2 1') == '5')\nassert(solution('5 1 2') == '2')\nassert(solution('1 2 1') == '2')\nassert(solution('1 1 1') == '0')\nassert(solution('1 1 1') == '0')\nassert(solution('5 2 1') == '5')\nassert(solution('6 2 1') == '3')\nassert(solution('5 2 1') == '5')\nassert(solution('5 1 2') == '2')\nassert(solution('1 2 1') == '2')\nassert(solution('1 1 1') == '0')\nassert(solution('1 1 1') == '0')\nassert(solution('5 2 1') == '5')\nassert(solution('6 2 1') == '3')\nassert(solution('5 2 1') == '5')\nassert(solution('5 1 2') == '2')\nassert(solution('1 2 1') == '2')\nassert(solution('1 1 1') == '0')\nassert(solution('1 1 1') == '0')\nassert(solution('5 2 1') == '5')\nassert(solution('6 2 1') == '3')\nassert(solution('5 2 1') == '5')\nassert(solution('5 1 2') == '2')\nassert(solution('1 2 1') == '2')\nassert(solution('1 1 1') == '0')\nassert(solution('1 1 1') == '0')\nassert(solution('5 2 1') == '5')\nassert(solution('6 2 1') == '3')\nassert(solution('5 2 1') == '5')\nassert(solution('5 1 2') == '2')\nassert(solution('1 2 1') == '2')\nassert(solution('1 1 1') == '0')\nassert(solution('1 1 1') == '0')\nassert(solution('5 2 1') == '5')\nassert(solution('6 2 1') == '3')\nassert(solution('5 2 1') == '5')\nassert(solution('5 1 2') == '2')\nassert(solution('1 2 1') == '"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(x) for x in stdin.split()]\n    segments = [int(x) for x in stdin.split()]\n    # battery_power = [0] * n\n    # accumulator_power = [0] * n\n    #\n    # for i in range(n):\n    #     battery_power[i] = min(b, a - battery_power[i])\n    #     accumulator_power[i] = min(a - battery_power[i], b)\n    #\n    #     battery_power[i + 1] = min(b - accumulator_power[i], battery_power[i])\n    #     accumulator_power[i + 1] = min(a - battery_power[i], accumulator_power[i])\n    #\n    # print(battery_power[-1] + accumulator_power[-1])\n\n    max_battery_power = a\n    max_accumulator_power = b\n\n    for i in range(1, n):\n        max_battery_power = min(max_battery_power, a - (segments[i - 1] if segments[i - 1] == 1 else 0))\n        max_accumulator_power = min(max_accumulator_power, b - (segments[i - 1] if segments[i - 1] == 1 else 0))\n\n    return str(max_battery_power + max_accumulator_power)\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    return stdout.format(\n        n - 1,\n        b - 1,\n        b - (a == 0) * (b - 1)\n    )"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return ''"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return str(eval(stdin.strip()))"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Evaluates an arithmetic expression, where the operators are '+', '-', '*', '/'.\n    \"\"\"\n    expression = stdin.strip()\n    s = ''\n    for ch in expression:\n        if ch in ['+', '-', '*', '/']:\n            s += ch\n    return eval(s)\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert (solution('''-1+2-3''')) == -6\nassert (solution('''7+1+2+3-6-5''')) == -16\nassert (solution('''-5+2-6-7-4-3+0+1''')) == -3\nassert (solution('''-7+1+2-3+4+5+6+7''')) == -49\nassert (solution('''0-0''')) == 0\nassert (solution('''0-1+2+3+4+5+6+7+8+9''')) == -49\nassert (solution('''10+0-1''')) == -9\nassert (solution('''1+0-1''')) == -1\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\nassert (solution('''0-0''')) == 0\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def operate(left: int, right: int, op: str) -> int:\n        if op == \"+\":\n            return left + right\n        elif op == \"-\":\n            return left - right\n\n    def evaluate(expr: str) -> int:\n        nums = []\n        ops = []\n        n = len(expr)\n        i = 0\n        while i < n:\n            if expr[i].isdigit():\n                num = int(expr[i])\n                i += 1\n                while i < n and expr[i].isdigit():\n                    num = num * 10 + int(expr[i])\n                    i += 1\n                nums.append(num)\n            elif expr[i] in \"+-\":\n                ops.append(expr[i])\n                i += 1\n            elif expr[i] == \"(\":\n                j = i\n                nums.append(evaluate(expr[i:j]))\n                i = j\n            elif expr[i] == \")\":\n                nums.append(operate(nums.pop(), nums.pop(), ops.pop()))\n                i += 1\n        assert i == n\n        return nums.pop()\n\n    print(evaluate(stdin))\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from re import findall\n\n    expression = stdin.strip()\n    digits = findall(r\"\\d+\", expression)\n    return str(eval(expression))\n\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdout = \"\"\n    return stdout\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if not 2 <= n <= 10 ** 5 or not 2 <= k <= 2 * 10 ** 5:\n        return \"NO\"\n\n    colors = [stdin.split()[i] for i in range(n)]\n    for i in range(1, n):\n        if colors[i] == colors[i - 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    if n % 2!= 0 or k < 3:\n        return \"NO\"\n\n    res = set()\n    for i in range(1, n + 1, 2):\n        if i in res:\n            continue\n        colors = []\n        for j in range(1, k + 1):\n            colors.append(j)\n        res.add(i)\n        for j in range(1, k + 1):\n            for k in range(1, k + 1):\n                if j!= k:\n                    res.add((i, j))\n                    colors[j] += 1\n        for j in range(1, k + 1):\n            for k in range(1, k + 1):\n                if j!= k:\n                    res.add((j, i))\n                    colors[k] += 1\n        for j in range(1, k + 1):\n            if colors[j] % 2!= 0:\n                return \"NO\"\n\n    return \"YES\"\n\n\nassert (\n    solution(\n        \"\"\"4 3\"\"\"\n    )\n    == \"YES\"\n)\nassert (\n    solution(\n        \"\"\"13 4\"\"\"\n    )\n    == \"NO\"\n)\nassert (\n    solution(\n        \"\"\"10 4\"\"\"\n    )\n    == \"YES\"\n)\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\"\"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check_rule(color1: int, color2: int) -> bool:\n        if color1 == color2:\n            return False\n        elif color1 < color2:\n            return True\n        else:\n            return False\n\n    n, k = [int(x) for x in stdin.split()]\n    assert 2 <= n <= 10**5\n    assert 2 <= k <= 2 * 10**5\n\n    if n % 2!= 0:\n        print(\"NO\")\n    else:\n        pairs = set()\n        used_colors = set()\n        for _ in range(n // 2):\n            pair = tuple(sorted(map(int, stdin.split())))\n            if pair in pairs:\n                print(\"NO\")\n                return\n            elif pair in pairs or pair[::-1] in pairs:\n                continue\n            pairs.add(pair)\n            for color in pair:\n                if color not in used_colors:\n                    used_colors.add(color)\n                else:\n                    print(\"NO\")\n                    return\n        print(\"YES\")\n        for pair in pairs:\n            print(\"{} {}\".format(*pair))"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % 2 == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\" if k == 2 else \"NO\"\n    pairs = [0] * n\n    colors = set()\n    for _ in range(n // 2):\n        pairs[0], pairs[1] = map(int, stdin.split())\n        colors.add(pairs[0])\n        colors.add(pairs[1])\n    for i in range(n // 2, n):\n        pairs[i] = pairs[i - (n // 2)]\n        colors.add(pairs[i])\n    if len(colors)!= k:\n        return \"NO\"\n    for i in range(n):\n        colors.add(pairs[i])\n    return \"YES\" + '\\n' + '\\n'.join(map(str, colors))\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \"YES\" if not is_color_choosing_possible(n, k) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [tuple(map(int, stdin.split())) for _ in range(n)]\n    memo = {}\n    for i in range(1, n):\n        for j in range(i, n):\n            if i!= j and arr[i][0] == arr[j][1] and arr[i][1] == arr[j][0]:\n                if (i, j) not in memo:\n                    memo[i, j] = memo[j, i] = False\n                elif not memo[i, j]:\n                    memo[i, j] = memo[j, i] = True\n    for i in range(1, n):\n        for j in range(i, n):\n            if arr[i][0]!= arr[j][1] or arr[i][1]!= arr[j][0]:\n                continue\n            if i not in memo or j not in memo:\n                print(\"NO\")\n                return\n            print(i, j)\n            return\n    print(\"YES\")\n    return"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if k > 2*10**5:\n        return 'NO'\n    if k % 2 == 0:\n        return 'NO'\n    if k == 1:\n        return 'NO'\n    n = 2*n\n    colors = {1, 2}\n    for _ in range(n):\n        colors.update(set(x for x in colors if x % 2!= 0))\n    return 'YES\\n' + '\\n'.join(list(map(str, sorted(list(colors)))))"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty_values = list(map(int, stdin.split()))\n    if x > n:\n        return -1\n\n    beauty_sum = 0\n    left_index = 0\n    right_index = 0\n    for right_index in range(n):\n        if (right_index - left_index + 1) >= k:\n            beauty_sum += sum(beauty_values[left_index : left_index + k])\n            left_index += 1\n        else:\n            beauty_sum += sum(beauty_values[left_index : right_index + 1])\n            left_index = right_index + 1\n\n    return beauty_sum\n\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    c = []\n    s = 0\n    for i in range(len(a)):\n        c.append(a[i])\n        if len(c) >= k:\n            s = max(s, sum(c))\n            c.pop(0)\n    if len(c) > 0:\n        return -1\n    return s"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.readline().strip().split())\n    lst = list(map(int, stdin.readline().strip().split()))\n    left, right = 0, 0\n    while left < n:\n        if lst[left] >= k:\n            right += 1\n            left += 1\n        else:\n            left += 1\n    if right >= x:\n        return 0\n    res = 0\n    left, right = 0, 0\n    while right < n:\n        if lst[right] >= k:\n            if right - left + 1 == x:\n                res = max(res, lst[left:right+1].sum())\n            right += 1\n        else:\n            right += 1\n    return -1 if res == 0 else res\n\nprint(solution('''5 2 3\n5 1 3 10 1\n'''))\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.strip().split())\n    beauty_per_picture = list(map(int, stdin.strip().split()))\n    beauty_per_segment = [0] * k\n    for i, b in enumerate(beauty_per_picture):\n        if i >= k:\n            beauty_per_segment[(i - k) % k] += b\n        else:\n            beauty_per_segment[i] += b\n    result = -1\n    for i in range(x):\n        if i < k:\n            if result == -1 or result < sum(beauty_per_segment[:i + 1]):\n                result = sum(beauty_per_segment[:i + 1])\n        else:\n            new_segment = list(map(int, stdin.strip().split()))\n            for j in range(k):\n                if result == -1 or result < sum(new_segment[:j + 1]):\n                    result = sum(new_segment[:j + 1])\n    return str(result)"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determines the maximum possible sum of values of reposted pictures if Vova follows conditions described in the problem statement.\n\n    >>> solution('''5 2 3\n   ... 5 1 3 10 1''')\n    18\n    >>> solution('''6 1 5\n   ... 10 30 30 70 10 10''')\n    -1\n    >>> solution('''4 3 1\n   ... 1 100 1 1''')\n    100\n    \"\"\"\n    n, k, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    beauty = sum(arr)\n    x = min(x, n)\n    if x > k:\n        return -1\n    else:\n        start = 0\n        while start < n:\n            end = start + k\n            if end >= n:\n                break\n            if end > start:\n                if arr[end-1] == arr[end]:\n                    end += 1\n            sum_val = sum(arr[start:end])\n            if sum_val >= beauty - sum_val:\n                return beauty - sum_val\n            start += 1\n        return beauty - sum(arr[start:n])\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    if len(a) < 3: return '-1'\n    n, k, x = a[0], a[1], a[2]\n    a = a[3:]\n    if len(a) < k: return '-1'\n    a.sort()\n    beauty = [a[i] - a[i - 1] for i in range(1, len(a))]\n    if len(a) == k + 1:\n        return '0'\n    for i in range(k - 1, len(a)):\n        j = 0\n        while j <= i - k:\n            if beauty[i] - beauty[j] >= x:\n                break\n            j += 1\n        if j == i - k:\n            return '-1'\n    return ''.join(map(str, beauty))\n\nprint(solution(input()))"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # n, x, k = map(int, stdin.split())\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = a[:n]\n    a.sort(reverse=True)\n\n    res = 0\n    curr = 0\n    while curr < n:\n        if curr + k > n:\n            return -1\n        if a[curr] <= x:\n            x -= a[curr]\n            res += a[curr]\n            curr += 1\n        else:\n            if curr + k > n:\n                return -1\n            diff = (a[curr] - x) % k\n            x = a[curr] - diff\n            res += diff\n            curr += 1\n    return res\n\n\nassert (solution(input()) == 19)\nprint(solution(input()))\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n    beauty_l = len(beauty)\n    # construct segments\n    segments = []\n    segment_sum = 0\n    for i in range(beauty_l - k + 1):\n        segment_sum += sum(beauty[i:i+k])\n        segments.append(segment_sum)\n    # calculate values of reposts\n    reposts = [0 for _ in range(beauty_l)]\n    for i in range(beauty_l - k + 1):\n        reposts[i] = segments[i] - min(segments[:i])\n    # check conditions\n    for i in range(x, len(reposts) - 1):\n        if reposts[i] < 0:\n            return -1\n    return sum(reposts)\n\nassert (solution(input()) == 18)\nassert (solution(input()) == 100)\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beautys = list(map(int, stdin.split()))\n    beautys.sort()\n    result = 0\n    for i in range(len(beautys) - k + 1):\n        result = max(result, sum(beautys[i : i + k]))\n    if result > x:\n        return -1\n    return result\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_picture, min_segment_len, num_of_reposted_pictures = map(int, stdin.split())\n    segments = map(int, stdin.split())\n\n    if num_of_reposted_pictures > min_segment_len:\n        return -1\n\n    if num_of_picture < min_segment_len:\n        return 0\n\n    segments.sort()\n\n    l = 0\n    r = num_of_picture - 1\n    best_sum = 0\n    while l < r:\n        curr_sum = segments[l] + segments[r]\n        if curr_sum > best_sum:\n            best_sum = curr_sum\n        if curr_sum == best_sum:\n            return best_sum\n        elif curr_sum < best_sum:\n            l += 1\n        else:\n            r -= 1\n\n    return best_sum\n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    r = [int(x) for x in stdin]\n    tot = 0\n    for i in range(n):\n        if r[i] == 1:\n            for j in range(max(0, i - k), min(n, i + k) + 1):\n                tot += j - i\n    return str(tot)\n\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin)[1:]\n    max_room_number = 2 * 10 ** 5\n    min_cost = 0\n    for i in range(1, max_room_number + 1):\n        if s[i - 1] == '1':\n            min_cost += i\n        elif s[i - 1] == '0':\n            min_cost += i + k\n    return str(min_cost)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin[0:n]\n    s_ = [int(x) for x in s]\n    c = 0\n    for i in range(1, n + 1):\n        c += i * (k - 1) if s_[i - 1] == 1 else k\n    return str(c)"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int, stdin.split())\n    s = stdin.strip()\n    k = 2 * k\n    graph = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        if s[i] == '1':\n            for j in range(max(1,i-k),min(n,i+k)+1):\n                graph[i][j-1] = 1\n    visited = [0] * n\n    cost = [0] * n\n    for i in range(n):\n        if graph[0][i] == 1:\n            visited[0] = 1\n            cost[0] = 1\n            break\n    for i in range(1, n):\n        if visited[i] == 0:\n            if graph[i][i] == 1:\n                visited[i] = 1\n                cost[i] = 1\n            else:\n                for j in range(i+1, n):\n                    if visited[j] == 0:\n                        if graph[i][j] == 1:\n                            visited[j] = 1\n                            cost[j] = cost[i] + 1\n                        else:\n                            visited[j] = 1\n                            cost[j] = cost[i] + 2\n    return str(sum(cost))\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    s = list(map(int, stdin.strip()))\n    x = 0\n    for i in range(n):\n        if s[i] == 1:\n            x = max(x, i - k)\n    return str(x)"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    s = stdin.strip()\n    cost = 0\n\n    for i in range(n):\n        if s[i] == '1':\n            cost += i\n        elif i - k > 0 and s[i - k] == '1':\n            cost += i - k\n        elif i + k < n and s[i + k] == '1':\n            cost += i + k\n\n    return str(cost)\n\n\nassert(solution('''5 2''') == '3')\nassert(solution('''6 1''') == '21')\nassert(solution('''4 1''') == '4')\nassert(solution('''12 6''') == '15')\n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    \n    cost = 0\n    for i in range(n):\n        if s[i] == \"0\":\n            continue\n        cost += i\n        \n        if i + k < n:\n            cost += min(k, i + k)\n        if i - k >= 0:\n            cost += min(k, n - i)\n        \n    return str(cost)"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin[:n]\n    cost = 0\n    for i in range(1, len(s)):\n        if s[i] == '1':\n            cost += (i - 1)\n    if len(s) - 1 > k * 2:\n        return str(cost)\n    for i in range(1, n + 1):\n        if s[i - 1] == '0':\n            continue\n        for j in range(max(1, i - k), min(n, i + k) + 1):\n            s[j - 1] = '1'\n    cost += (len(s) - 1)\n    return str(cost)\n\n\n\n'''\n\nN, K = list(map(int, input().split()))\n\ns = input()\n\ncost = 0\n\nfor i in range(1, N):\n    if s[i - 1] == '0':\n        continue\n    for j in range(max(1, i - K), min(N, i + K) + 1):\n        s[j - 1] = '1'\n    cost += (i - 1)\n\ncost += (N - 1)\n\nprint(cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = stdin[1:]\n    \n    if n == k == 1:\n        return '0'\n    \n    result = 0\n    \n    for i in range(1, n):\n        if s[i] == '1':\n            result += i * (n - i)\n            break\n    \n    for i in range(n - 1, 0, -1):\n        if s[i] == '1':\n            result += i * (n - i)\n            break\n    \n    return str(result)"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    T = stdin.strip()\n\n    if S == T:\n        return \"Yes\"\n\n    for i in range(len(S)):\n        for j in range(len(T)):\n            if S[i]!= T[j]:\n                continue\n\n            S_1 = S[:i] + T[j] + S[i + 1:]\n            T_1 = T[:j] + S[i] + T[j + 1:]\n\n            if S_1 == T_1:\n                return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s, t = stdin.split('\\n', 1)\n    if s == t:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    return 'Yes' if s == t[::-1] else 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.strip() == stdin.strip()[::-1] else 'No'\n\nimport sys"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin == stdin[::-1] else \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return \"Yes\" if s == t[::-1] else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[0] == stdin[1] else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin == stdin[::-1] else 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.replace('a', 'z').replace('e', 'z').replace('i', 'l').replace('o', 'e') == stdin else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.splitlines()\n    if len(S)!= len(T):\n        return 'No'\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split()]\n    algorithms = [int(x) for x in stdin.split()]\n    matrix = []\n    for _ in range(rows):\n        row = stdin.split()\n        matrix.append([int(x) for x in row])\n    min_price = 0\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(rows):\n                if matrix[i][j] <= matrix[k][j]:\n                    matrix[i][j] = max(matrix[i][j], matrix[k][j])\n        for algorithm in algorithms:\n            if algorithms.index(algorithm) == j:\n                min_price += matrix[i][j] * algorithm\n    return str(min_price)\n\nassert(solution('') == '0')\nassert(solution('0') == '0')\nassert(solution('2 2') == '3')\nassert(solution('1 2') == '3')\nassert(solution('3 1') == '6')\nassert(solution('2 2 2') == '9')\nassert(solution('3 3 3') == '18')\nassert(solution('1 2 1') == '6')\nassert(solution('2 2 2 2') == '28')\nassert(solution('3 1 1 2') == '9')\nassert(solution('4 4 1 1 2') == '18')\nassert(solution('1 2 2 3') == '9')\nassert(solution('2 1 2 1') == '3')\nassert(solution('5 5 5 2 2 1') == '21')\nassert(solution('1 1 1 1 1') == '0')\nassert(solution('1 1 1 1 1 1') == '0')\nassert(solution('2 2 2 2 1') == '6')\nassert(solution('3 1 1 1 1 1 1') == '12')\nassert(solution('2 1 2 2 1') == '3')\nassert(solution('5 4 4 2 1 2') == '9')\nassert(solution('1 1 1 1 1 1 1') == '0')\nassert(solution('2 1 1 1 1 1') == '0')\nassert(solution('5 2 1 1 1 1') == '0')\nassert(solution('1 1 1 1 1 1 1') == '0')\nassert(solution('2 2 2 1 1 1') == '6')\nassert(solution('3 1 1 1 1 1 1 1') == '12')\nassert(solution('2 1 2 2 1 1 1') == '3')\nassert(solution('5 4 4 2 1 2 1') == '9')\nassert(solution('1 1 1 1 1 1 1 1') == '0')\nassert(solution('2 1 1 1 1 1 1') == '0')\nassert(solution('5 2 1 1 1 1 1') == '0')\nassert(solution('1 1 1 1 1 1 1 1') == '0')\nassert(solution('2 2 2 1 1 1 1') == '6')\nassert(solution('3 1 1 1 1 1 1 1 1') == '12')\nassert(solution('2 1 2 2 1 1 1 1') == '3')\nassert(solution('5 4 4 2 1 2 1 1') == '9')\nassert(solution('1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('2 1 1 1 1 1 1 1') == '0')\nassert(solution('5 2 1 1 1 1 1 1') == '0')\nassert(solution('1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('2 2 2 1 1 1 1 1') == '6')\nassert(solution('3 1 1 1 1 1 1 1 1 1') == '12')\nassert(solution('2 1 2 2 1 1 1 1 1') == '3')\nassert(solution('5 4 4 2 1 2 1 1 1') == '9')\nassert(solution('1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('2 1 1 1 1 1 1 1 1') == '0')\nassert(solution('5 2 1 1 1 1 1 1 1') == '0')\nassert(solution('1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('2 2 2 1 1 1 1 1 1') == '6')\nassert(solution('3 1 1 1 1 1 1 1 1 1 1') == '12')\nassert(solution('2 1 2 2 1 1 1 1 1 1') == '3')\nassert(solution('5 4 4 2 1 2 1 1 1 1') == '9')\nassert(solution('1 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('2 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('5 2 1 1 1 1 1 1 1 1') == '0')\nassert(solution('1 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('2 2 2 1 1 1 1 1 1 1') == '6')\nassert(solution('3 1 1 1 1 1 1 1 1 1 1 1') == '12')\nassert(solution('2 1 2 2 1 1 1 1 1 1 1') == '3')\nassert(solution('5 4 4 2 1 2 1 1 1 1 1') == '9')\nassert(solution('1 1 1 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('2 1 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('5 2 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('1 1 1 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('2 2 2 1 1 1 1 1 1 1 1 1') == '6')\nassert(solution('3 1 1 1 1 1 1 1 1 1 1 1 1 1') == '12')\nassert(solution('2 1 2 2 1 1 1 1 1 1 1 1') == '3')\nassert(solution('5 4 4 2 1 2 1 1 1 1 1 1') == '9')\nassert(solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('2 1 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('5 2 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('2 2 2 1 1 1 1 1 1 1 1 1') == '6')\nassert(solution('3 1 1 1 1 1 1 1 1 1 1 1 1 1') == '12')\nassert(solution('2 1 2 2 1 1 1 1 1 1 1 1') == '3')\nassert(solution('5 4 4 2 1 2 1 1 1 1 1 1') == '9')\nassert(solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('2 1 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('5 2 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '0')\nassert(solution('2 2 2 1 1 1 1 1 1 1 1 1') == '6')\nassert(solution('3 1 1 1 1 1 1 1 1 1 1 1 1 1') == '12')\nassert(solution('2 1 2 2 1 1 1 1 1 1 1 1') == '3')\nassert(solution('5 4 4 2 1 2 1 1 1 1 1 1')"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    costs = [0] * N\n    algorithm_count = int(stdin)\n\n    for _ in range(algorithm_count):\n        start, end, cost = map(int, stdin.split())\n        costs[start - 1] += cost\n        costs[end - 1] -= cost\n\n    max_cost = max(costs)\n\n    if max_cost < 0:\n        return \"Negative max\"\n\n    return str(max_cost)\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines.\n    lines = stdin.split('\\n')\n\n    # Get the n, m, c, and d integers.\n    n = int(lines[0].split()[0])\n    m = int(lines[1].split()[0])\n    c = int(lines[2].split()[0])\n    d = int(lines[3].split()[0])\n\n    # Get the A matrix.\n    A = []\n    for line in lines[4:]:\n        A.append(list(map(int, line.split())))\n\n    # Get the X matrix.\n    X = []\n    for line in lines[5 + n:]:\n        X.append(list(map(int, line.split())))\n\n    # Initialize the matrix of result.\n    # The value at each point is the min cost of getting X from the (i,j)th algorithms' understanding levels to higher than or equal to X.\n    result = [[float('inf') for j in range(m + 1)] for i in range(n + 1)]\n    result[0][0] = 0\n\n    # For each row, from the first element to the last.\n    for i in range(1, n + 1):\n        # For each column, from the first element to the last.\n        for j in range(1, m + 1):\n            # If we can get to higher than or equal to the X from the (i,j)th algorithm, then this is the min cost to get to higher than or equal to the X.\n            result[i][j] = min(result[i - 1][j], result[i][j - 1]) + A[i - 1][j - 1]\n\n    # The min cost to get to higher than or equal to X is the minimum among all the previous rows, since this is the cost to get to higher than or equal to the previous row.\n    return str(result[n][m])\n"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P = list(map(int, stdin.split()))\n\n    # The dp[i][j] represents the minimum cost to achieve an understanding level j\n    # at the i-th iteration.\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n\n    # We start with understanding level 1, for which the cost is 0.\n    # The dp[0][j] = P[j] for j = 0, 1,..., M.\n    dp[0][1:] = P[1:]\n\n    # Let's compute the dp for the remaining iterations, and each\n    # iteration the j-th cost is P[j], so we start with the min cost.\n    for i in range(2, N + 1):\n        dp[i][1:] = [P[j] + min(dp[i - 1][j - 1], dp[i - 1][j]) for j in range(1, M + 1)]\n\n    # The cost is the minimum cost achieved, i.e. the max of all dp[N][j].\n    return str(max(dp[N]))\n\ntest_cases = int(stdin.readline().strip())\nfor t in range(1, test_cases + 1):\n    N, M = map(int, stdin.readline().strip().split())\n    P = list(map(int, stdin.readline().strip().split()))\n    print('Case #{}: {}'.format(t, solution(stdin.readline().strip())))\n\"\"\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nimport sys\nfrom functools import reduce\nfrom operator import mul\nfrom typing import Dict, Tuple\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    c = list(map(int, stdin.split(' ')))\n    c.sort(reverse=True)\n    d = {}\n    for i in range(m):\n        if c[i] not in d:\n            d[c[i]] = i\n    cost = 0\n    for i in range(1, len(d)):\n        cost += i * d[c[i]]\n    return cost\n\nassert(solution(\"3 2\") == 6)\nassert(solution(\"3 2 1\") == 6)\nassert(solution(\"2 1\") == 2)\nassert(solution(\"4 3 2 1\") == 4)\nassert(solution(\"4 3 2 1\") == 8)\nassert(solution(\"5 1\") == 5)\nassert(solution(\"10 3 4 5\") == 22)\nassert(solution(\"10 4 2 1 3 5\") == 22)\n\"\"\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    prices = [list(map(int, stdin.split())) for _ in range(n)]\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j - prices[i - 1][0] >= 0:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - prices[i - 1][0]] + prices[i - 1][1])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return \"Yes\\n\" + str(dp[n][m])\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = [tuple(map(int, stdin[1 + i:1 + i + N])) for i in range(N)]\n    M = int(stdin[1 + N])\n    C = [int(stdin[2 + N + i]) for i in range(N)]\n    X = int(stdin[2 + N + N])\n    minimum = X\n    for a in A:\n        for i in range(M):\n            if a[i] >= X:\n                minimum = min(minimum, C[i])\n                break\n    return str(minimum) if minimum <= X else 'impossible'\n\n\nimport sys"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m = [int(v) for v in stdin[0].split()]\n    prices = [float(v) for v in stdin[1].split()]\n    diff = [0]*(m+1)\n    for i in range(1, m+1):\n        for price in prices:\n            if price*i > m:\n                continue\n            diff[price*i] = max(diff[price*i], diff[i]+price*i)\n    return 'Yes' if diff[-1] >= m else 'No'"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total_score, D, G = [int(v) for v in stdin.split()]\n    perfect_bonus = (G // 100) * 100\n    base_score = (D // 100) * 100\n    total_score += perfect_bonus\n    remaining_problems = total_score - base_score\n\n    if D == 1:\n        return '1'\n    if remaining_problems < G:\n        return str(remaining_problems // 100)\n    else:\n        return '0'"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline()\ninput = input.split()\nD, G = int(input[0]), int(input[1])\np, c = [int(input[i]) for i in range(2, len(input))]\n\nproblems = 0\nperfect_bonus = 0\n\nfor i in range(1, p + 1):\n    if D - (p * i) >= 0:\n        problems += 1\n        if D - (p * i) < 0:\n            perfect_bonus += (D - p * i) * c\n        else:\n            perfect_bonus += c * (D - p * i)"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, G = [int(x) for x in stdin.split(' ')]\n    PROBLEM_SCORE, PROBLEM_BONUS, TOTAL_BONUS = 100, 100, 100\n    MOVEMENT = [\n        (PROBLEM_SCORE, PROBLEM_BONUS, TOTAL_BONUS),\n        (PROBLEM_SCORE, PROBLEM_BONUS, TOTAL_BONUS),\n        (PROBLEM_SCORE, PROBLEM_BONUS, TOTAL_BONUS),\n        (PROBLEM_SCORE, PROBLEM_BONUS, TOTAL_BONUS),\n    ]\n    SCORE_AVERAGE = (TOTAL_BONUS * D) // len(MOVEMENT)\n    ret = 0\n    for i in range(D):\n        if MOVEMENT[i][0] <= G:\n            ret += 1\n        G -= MOVEMENT[i][0]\n        MOVEMENT[i] = (\n            MOVEMENT[i][0],\n            MOVEMENT[i][1] + SCORE_AVERAGE,\n            MOVEMENT[i][2] + MOVEMENT[i][1] * (i + 1),\n        )\n    print(ret)"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p, c = map(int, stdin.split())\n    bonus = sum(c for _ in range(D))\n    bonus += G\n    # bonus += (G - 100 * (D - 1)) // 100\n    print(bonus // 100)\n\nsolution(\"2 700\\n3 500\\n5 800\\n\")\nsolution(\"4 500\\n4 500\\n4 500\\n4 500\\n\")\nsolution(\"7 400\\n5 200\\n7 100\\n\")\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    points = [int(x) for x in stdin.split()]\n    base_score = points[1]\n    perfect_bonus = points[0]\n    difficulty = points[1]\n    solutions = 0\n    solutions += base_score\n    current_score = base_score\n    for i in range(2, len(points)):\n        if points[i] == 100:\n            solutions += perfect_bonus\n        elif current_score + points[i] < difficulty:\n            solutions += 1\n            current_score += points[i]\n        elif current_score + points[i] == difficulty:\n            solutions += 1\n            current_score += points[i]\n        else:\n            break\n    return solutions"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    base_score, perfect_bonus = 0, 0\n    for _ in range(D):\n        p, c = map(int, stdin.readline().split())\n        base_score += p * c\n        perfect_bonus += c\n    points = G - base_score\n    perfect_bonus -= perfect_bonus // 100\n    points -= perfect_bonus\n    return str(perfect_bonus + (points // D))\n\nassert(solution(\"2 700\") == \"3\")\nassert(solution(\"3 500\") == \"2\")\nassert(solution(\"5 800\") == \"4\")\nassert(solution(\"1 1000\") == \"1\")\nassert(solution(\"2 2000\") == \"0\")\nassert(solution(\"10 2\") == \"1\")\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, G = (int(i) for i in stdin.split())\n    points = [int(i) for i in stdin.split()]\n    base_score = sum(points)\n    perfect_bonus = 0\n    for i in points:\n        if i == 100:\n            perfect_bonus += 1\n    return str(base_score + perfect_bonus * G // 100)"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = [int(x) for x in stdin.readline().split()]\n    numbers.sort()\n    good_candies = 0\n    for i in range(1, n-1):\n        if numbers[i] - numbers[i-1] == numbers[i+1] - numbers[i]:\n            good_candies += 1\n    return str(good_candies)"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n    candies = [0] * (2 * n - 1)\n    candies[:n] = weights[:n]\n    for i in range(n, 2 * n - 1):\n        candies[i] = candies[i - 1] + weights[i - 1]\n    return str(candies.count(n - 1))"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    candies = list(map(int, stdin.readline().split()))\n    candies.sort()\n    count = 0\n    for i in range(1, n):\n        if candies[i] - candies[i - 1]!= 1:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    good_candies = 0\n    \n    for i in range(1, n):\n        if i % 2 == 0:\n            good_candies += a[i]\n        else:\n            good_candies -= a[i]\n    \n    return str(good_candies)\n\nassert(solution('''7''') == '2')\nassert(solution('''8''') == '2')\nassert(solution('''9''') == '3')\nassert(solution('''4 8 8 7 8 4 4 5''') == '2')\n"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    dp = [0] * (n + 1)\n    for i in range(1, n):\n        dp[i + 1] = max(dp[i], dp[i - 1] + a[i - 1])\n    return str(sum(a) - dp[n])"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    good_candies = 0\n    for i in range(1, n):\n        if a[i - 1] % 2 == a[i] % 2:\n            good_candies += 1\n    return str(good_candies)\n"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(limit: int, beauty: List[int], count: int) -> int:\n        # we can always skip the first value and its beauty.\n        # so we need to calculate the beauty of the following\n        # count values with maximum sum of beauty\n        # and if we have limit - count values left we\n        # need to calculate the maximum sum of beauty\n        if count == 0:\n            return 0\n        if count < 0:\n            return -1\n        if count == 1:\n            return beauty[0]\n        if count == 2:\n            return max(beauty[0], beauty[1])\n        max_sum = 0\n        for i in range(1, count):\n            max_sum = max(max_sum, calculate(limit, beauty, count - i - 1) + beauty[i])\n        return max_sum\n\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n    count = n - k + 1\n    if count < k:\n        return -1\n    return calculate(x, beauty, count)"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n\n    if k > n:\n        return -1\n\n    a = [int(x) for x in stdin.split()]\n\n    a.sort()\n\n    # print(a)\n\n    if k > n - k:\n        return -1\n\n    a = a[(x - 1):(n - k)]\n\n    # print(a)\n\n    print(sum(a))\n"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n\n    n, k, x = int(stdin[0].split()[0]), int(stdin[0].split()[1]), int(stdin[0].split()[2])\n    a = list(map(int, stdin[1].split()))\n    dp = [0] * (x + 1)\n\n    for i in range(k, n + 1):\n        for j in range(i - k, i):\n            dp[j] = max(dp[j], a[j])\n\n    if sum(dp) < x:\n        return -1\n    return sum(dp)\n\n\nassert (solution('''5 2 3\n5 1 3 10 1''') == 18)\nassert (solution('''6 1 5\n10 30 30 70 10 10''') == 100)\nassert (solution('''4 3 1\n1 100 1 1\n''') == -1)\nassert (solution('''3 1 0\n1 1 1\n''') == -1)\nassert (solution('''4 2 3\n1 1 2 3\n''') == 6)\nassert (solution('''1 1 1\n1 1 1\n''') == -1)\nassert (solution('''5 2 3\n1 1 1 2 1\n''') == 18)\n"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n\n    beauty = sum(a)\n    prev = 0\n\n    for i in range(len(a) - x + 1):\n        curr = sum(a[i:i+x])\n        if curr > beauty:\n            return '-1'\n        if curr == beauty and i!= 0:\n            return '-1'\n        if curr > prev:\n            prev = curr\n\n    return str(prev)"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\n\n@pytest.mark.parametrize(\n    ('input_s', 'expected'),\n    (\n        # ('1\\n1\\n', '-1'),\n        ('2\\n1 3', '-1'),\n        ('2\\n1 3 1', '3'),\n        ('2\\n1 3 1 1', '3'),\n        ('2\\n1 3 1 1 1', '3'),\n        ('2\\n1 3 1 1 1 1', '3'),\n        ('2\\n1 3 1 1 1 1 1', '3'),\n        ('2\\n1 3 1 1 1 1 1 1', '3'),\n        ('2\\n1 3 1 1 1 1 1 1 1', '3'),\n        ('2\\n1 3 1 1 1 1 1 1 1 1 1', '3'),\n        ('2\\n1 3 1 1 1 1 1 1 1 1 1 1 1', '3'),\n    ),\n)\ndef"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    if k >= n - x:\n        return -1\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    a = a[:k]\n    j = 0\n    for i in range(k, n):\n        if j < x:\n            j += 1\n            continue\n        if a[0] + a[1] <= a[i]:\n            a[0] = a[1]\n            a[1] = a[i]\n            j = 1\n        else:\n            break\n    return str(sum(a))\n\nassert solution('5 2 3\\n5 1 3 10 1') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10') == '100'\nassert solution('4 3 1\\n1 100 1 1') == '-1'\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    beauty = sum(a)\n    if x < k or x > n - k + 1:\n        return '-1'\n    if x == n:\n        return str(beauty)\n    result = 0\n    for i in range(n - k + 1):\n        result = max(result, a[i] * x - (beauty - a[i] * (k - 1)) * (x - i - 1))\n    return str(result)"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    max_sum = -1\n\n    for a_i in range(n - k + 1):\n        sum_i = 0\n        for i in range(k):\n            sum_i += a[a_i + i]\n\n        if sum_i >= x:\n            max_sum = max(sum_i, max_sum)\n\n    if max_sum == -1:\n        return -1\n    else:\n        return max_sum\n\nprint(solution(input()))\n"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k, x = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n\n    ans = 0\n\n    if len(a) < k:\n        return str(ans)\n\n    for i in range(len(a) - k + 1):\n        if i + k - 1 < len(a):\n            s = sum(a[i:i + k])\n            if s > ans:\n                ans = s\n\n    return str(ans)"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n@cache\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    doughnut_cost = 4\n    cake_cost = 7\n    while n > 0:\n        if (n - cake_cost) % 2 == 0:\n            n -= cake_cost\n        else:\n            n -= (cake_cost - 1)\n        doughnut_cost += 2\n\n    return \"Yes\" if n == 0 else \"No\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    doughnut_price = 7\n    cake_price = 4\n\n    doughnut_count = int(stdin) // doughnut_price\n    cake_count = int(stdin) // cake_price\n\n    if doughnut_count < cake_count:\n        print(\"No\")\n    elif doughnut_count > cake_count:\n        print(\"No\")\n    else:\n        print(\"Yes\")"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    doughnut_price = 7\n    cake_price = 4\n    doughnut_count = 0\n    cake_count = 0\n\n    doughnut_total = 0\n    cake_total = 0\n\n    input_line = stdin.split(' ')\n\n    for line in input_line:\n        line = int(line)\n        if line > 0 and line % 2 == 0:\n            doughnut_total += line\n            doughnut_count += 1\n        else:\n            cake_total += line\n            cake_count += 1\n\n    if doughnut_total == cake_total:\n        if doughnut_count >= 1 and cake_count >= 1:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif doughnut_total < cake_total:\n        if cake_total - doughnut_total <= 10:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        if doughnut_total - cake_total <= 10:\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    money, dough, cake = 0, 0, 0\n    doughnut, cake, money = stdin.split(\" \")\n    doughnut, cake, money = int(doughnut), int(cake), int(money)\n    if doughnut <= money:\n        money -= doughnut\n        if money >= cake:\n            cake -= money\n            if cake == 0:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if check(int(stdin.strip())) else \"No\"\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    #print(n)\n    if n == 0:\n        return \"Yes\"\n    elif n < 0:\n        return \"No\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_cakes = int(stdin)\n    if num_cakes < 0:\n        raise ValueError(\"Invalid number of cakes\")\n    doughnuts = num_cakes // 2\n    cakes = num_cakes - doughnuts\n    if num_cakes % 2!= 0:\n        cakes = cakes + 1\n    if num_cakes > doughnuts and doughnuts > cakes:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 10:\n        return 'No'\n    elif n >= 5:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cake = 7\n    doughnut = 4\n    answer = \"No\"\n    for n in stdin:\n        if int(n) > cake:\n            answer = \"No\"\n            break\n        elif int(n) < cake and int(n) > doughnut:\n            answer = \"Yes\"\n            break\n        elif int(n) > doughnut:\n            cake -= int(n)\n        elif int(n) < doughnut:\n            doughnut -= int(n)\n\n    return answer"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n:\n        x, y, h = map(int, stdin.split())\n        if x == 0 or y == 0 or x == 100 or y == 100 or h <= 1:\n            continue\n        if h - abs(x - 50) - abs(y - 50) <= 0:\n            continue\n        else:\n            print(f'{x} {y} {h}')\n        n -= 1"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://www.codechef.com/JUNE20B/problems/HACKERRANK\n    '''\n    N = stdin.strip()\n    N = int(N)\n    M = []\n    for _ in range(N):\n        m = stdin.strip().split()\n        x = int(m[0])\n        y = int(m[1])\n        h = int(m[2])\n        M.append((x, y, h))\n    C_X = 0\n    C_Y = 0\n    H = 0\n    for x, y, h in M:\n        C_X = max(C_X, x)\n        C_Y = max(C_Y, y)\n        H = max(H, h)\n    print(C_X, C_Y, H)"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Reads a number of pieces of information and stores them in a list. Then calculates the center coordinates and the height of the pyramid.\n    '''\n    N = int(stdin.readline())\n    for _ in range(N):\n        x, y, h = map(int, stdin.readline().split())\n        print(x, y, h)\n    return \"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom typing import List\nfrom unittest import mock\nimport unittest\n\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    points = []\n    for line in lines[1:]:\n        x, y, h = map(int, line.split())\n        points.append([x, y, h])\n    points.sort(key=lambda x: (x[1], x[0]))\n    min_x = points[0][0]\n    max_y = points[0][1]\n    max_h = points[0][2]\n    for i in range(1, n):\n        x, y, h = points[i]\n        if x < min_x:\n            min_x = x\n        elif x == min_x:\n            if y < min_y:\n                min_y = y\n        if y > max_y:\n            max_y = y\n        elif y == max_y:\n            if h > max_h:\n                max_h = h\n    return f'{min_x} {min_y} {max_h}'\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = [line.strip() for line in stdin.split(\"\\n\")]\n    N = int(lines[0])\n\n    ans = \"\"\n    for i in range(1, N + 1):\n        ans += lines[i] + \" \"\n    \n    return ans"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    N = int(stdin)\n    x_list = list(map(int, stdin.split()))\n    y_list = list(map(int, stdin.split()))\n    h_list = list(map(int, stdin.split()))\n    \n    # Sorted the lists\n    x_list.sort()\n    y_list.sort()\n    h_list.sort()\n    \n    # Store the maximum and minimum values\n    x_max = x_list[-1]\n    y_min = y_list[0]\n    h_max = h_list[-1]\n    \n    # Calculate the center coordinates\n    c_x = (x_max + x_min) / 2\n    c_y = (y_min + y_max) / 2\n    \n    # Calculate the height\n    h = max(h_max - abs(c_x - x_max) - abs(c_y - y_min), 0)\n    \n    # Return the result\n    return \"{} {} {}\".format(c_x, c_y, h)\n\nimport sys\n\nT = int(sys.stdin.readline())\nfor i in range(T):\n    # Print the result to STDOUT\n    print(solution(sys.stdin.readline()))"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x_list, y_list, h_list = [], [], []\n    \n    for _ in range(n):\n        x, y, h = map(int, stdin.readline().split())\n        x_list.append(x)\n        y_list.append(y)\n        h_list.append(h)\n    \n    x_list, y_list = zip(*sorted(zip(x_list, y_list)))\n    \n    if len(x_list) == 1:\n        x_coord, y_coord, h_coord = x_list[0], y_list[0], h_list[0]\n    else:\n        x_coord, y_coord, h_coord = x_list[0], y_list[0], max(h_list)\n        for i in range(1, len(x_list)):\n            x_coord = min(x_coord, x_list[i])\n            y_coord = min(y_coord, y_list[i])\n            h_coord = max(h_coord, h_list[i])\n    \n    return f\"{x_coord} {y_coord} {h_coord}\"\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    lines = [line.split() for line in lines]\n    lines = [[int(num) for num in line] for line in lines]\n    N = int(lines[0][0])\n    lines = lines[1:]\n    points = [lines[i:i+N] for i in range(0, len(lines), N)]\n    centers = []\n    for point in points:\n        center = (max(point, key=lambda x: abs(x[0] - point[0][0]) + abs(x[1] - point[0][1]))[0],\n                  max(point, key=lambda x: abs(x[0] - point[0][0]) + abs(x[1] - point[0][1]))[1])\n        h = max(map(lambda x: abs(x[2] - center[0]) + abs(x[1] - center[1]), point))\n        centers.append((center[0], center[1], h))\n\n    return''.join([str(center[0]) +'' + str(center[1]) +'' + str(center[2]) for center in centers])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'b')"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of hugs needed to make the string palindromic.\n    '''\n    input_string = stdin\n    input_string = input_string.lower()\n    input_string = input_string.replace(' ', '')\n    input_string = input_string.replace('_', '')\n\n    current_hugs = 1\n    current_string = input_string\n    while not is_palindrome(current_string):\n        current_hugs += 1\n        current_string = current_string[-1] + current_string[1:-1] + current_string[0]\n    return current_hugs\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    N = len(S)\n    if N < 2:\n        return S\n    best = N - 1\n    for i in range(N // 2):\n        if S[i]!= S[N - 1 - i]:\n            best = i\n            break\n    return best + 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 1:\n        return 0\n    return sum(1 for i in range(n) if stdin[i]!= stdin[~i])"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return..."
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return whether N can be represented as the product of two integers between 1 and 9 (inclusive).\"\"\"\n    n = int(stdin)\n    if n % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    for i in range(1, 9+1):\n        for j in range(1, 9+1):\n            if a == i * j:\n                return 'Yes'\n    return 'No'"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Yes\"\n    elif n == 2:\n        return \"No\"\n    elif n % 2 == 0:\n        return \"No\"\n    else:\n        for i in range(1, 10):\n            if n % i == 0:\n                j = n / i\n                if j >= 1 and j <= 9:\n                    return \"Yes\"\n        return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if int(N) == i * j:\n                print(\"Yes\")\n                return\n    print(\"No\")\n    return\n\nprint(solution(\"\"))\n\"\"\"\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    product_set = set(range(1, 10))\n    if N in product_set:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1,10):\n        for j in range(1,10):\n            if i * j == n:\n                return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n < 10:\n        return \"Yes\"\n    s = str(n)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if int(s[i]) * int(s[j])!= n:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    for i in range(2,10):\n        if (n % i == 0):\n            print('Yes')\n            return\n\n    print('No')"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 4 4 9 7 5''')\n    '5'\n    >>> solution('''5\n   ... 4 4 9 7 5''')\n    '5'\n    \"\"\"\n    N = int(stdin)\n    sticks = list(map(int, stdin.split()[1:]))\n    sticks.sort()\n    def solve(sticks: list[int], index: int, triplets: int) -> int:\n        if triplets == 3:\n            return 1\n        elif index == len(sticks) - 2:\n            return 0\n        elif sticks[index] == sticks[index + 1]:\n            return solve(sticks, index + 2, triplets + 1)\n        elif sticks[index] == sticks[index + 2]:\n            return solve(sticks, index + 3, triplets + 1)\n        else:\n            return solve(sticks, index + 1, triplets) + solve(sticks, index + 3, triplets)\n    return str(solve(sticks, 0, 0))\n"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    sticks = [int(x) for x in stdin.readline().split()]\n    sticks.sort()\n    sticks.reverse()\n    print(sticks)\n    k = len(sticks)\n    for i in range(k):\n        for j in range(i, k):\n            for k in range(j, k):\n                if sticks[i] + sticks[j] > sticks[k]:\n                    print(sticks[i], sticks[j], sticks[k])\n    return ''"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.splitlines()[0]\n    L = stdin.splitlines()[1]\n    L = L.split()\n    L = [int(i) for i in L]\n    L.sort()\n    L.reverse()\n    return count_triangles(L)\n\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sticks = list(map(int, stdin.readline().split(' ')))\n    sticks.sort()\n    sticks.reverse()\n    sticks = [0] + sticks\n    memo = [[0 for j in range(n+1)] for i in range(n+1)]\n    memo[0][0] = 1\n\n    for i in range(1, n+1):\n        for j in range(i+1):\n            memo[i][j] = memo[i-1][j-1] + memo[i-1][j] if sticks[i] == sticks[j] else memo[i-1][j]\n    return str(memo[n][n-1])"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    sticks = list(map(int, stdin.split()))\n    sticks.sort()\n    result = 0\n    for a in range(len(sticks) - 2):\n        b = a + 1\n        c = len(sticks) - 1\n        while b < c:\n            if sticks[a] + sticks[b] > sticks[c]:\n                result += c - b\n                c -= 1\n            else:\n                b += 1\n    return str(result)"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(input())\n    print(input())\n\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stick_lengths = list(map(int, stdin.split()))\n\n    count = 0\n\n    for i in range(len(stick_lengths) - 2):\n        for j in range(i + 1, len(stick_lengths) - 1):\n            k = len(stick_lengths) - 1\n            while k > j:\n                if stick_lengths[i] + stick_lengths[j] > stick_lengths[k]:\n                    count += 1\n                k -= 1\n\n    return count"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    l = list(map(int, s))\n    length = l[0]\n    l = l[1:]\n    \n    res = 0\n    for i in range(0, length):\n        for j in range(0, length):\n            for k in range(0, length):\n                if(l[i]!= l[j] and l[j]!= l[k] and l[i]!= l[k]):\n                    res += 1\n    return str(res)\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    L = [int(x) for x in lines[1].split(' ')]\n    print(solve(L))\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '-1'\n"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A * B > 9:\n        return \"-\"\n    else:\n        return str(A * B)\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(' '))\n    if a * b > 9:\n        return -1\n    else:\n        return a * b\n"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A * B < 10:\n        return str(A * B)\n    return \"-1\""
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(\" \"))\n    if a * b > 9:\n        return \"-\"\n    return str(a * b)"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * b > 9:\n        return '-1'\n    return str(a * b)"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    A = int(A)\n    B = int(B)\n    \n    result = 1\n    \n    for i in range(1, 11):\n        result *= i\n        \n    if result % A == 0 and result % B == 0:\n        return '%d' % result\n    else:\n        return '-1'\n\nassert(solution('2 5') == '10')\nassert(solution('10 10') == '-1')\nassert(solution('7 5') == '10')\nassert(solution('7 9') == '-1')\nassert(solution('3 9') == '3')\nassert(solution('3 6') == '-1')\nassert(solution('3 3') == '6')\nassert(solution('2 1') == '-1')\nassert(solution('1 1') == '-1')\nassert(solution('4 1') == '-1')\nassert(solution('1 1') == '-1')\nassert(solution('1 2') == '-1')\nassert(solution('1 10') == '-1')\nassert(solution('10 2') == '-1')\nassert(solution('4 4') == '16')\nassert(solution('1 4') == '-1')\nassert(solution('1 3') == '-1')\nassert(solution('10 5') == '-1')\nassert(solution('1 11') == '-1')\n"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a <= 1 or a >= 10 or b <= 1 or b >= 10:\n        return -1\n    return str(a * b)"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a.isdigit() and b.isdigit():\n        a, b = int(a), int(b)\n        if a > 1 and a <= 9 and b > 1 and b <= 9:\n            return str(a * b)\n        else:\n            return '-1'\n    else:\n        return '-1'"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A*B < 10:\n        return str(A * B)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = [int(x) for x in stdin.split()]\n    X = [int(x) for x in stdin.split()]\n    X = sorted(X)\n\n    # Count the number of times each value is visited\n    count = [0] * (max(X) + 1)\n    for x in X:\n        count[x] += 1\n\n    # Find all the values with exactly one visit\n    ones = []\n    for i, x in enumerate(count):\n        if x == 1:\n            ones.append(X[i])\n\n    # Find all the values with two visits\n    twos = []\n    for i, x in enumerate(count):\n        if x == 2:\n            twos.append(X[i])\n\n    # Count the number of times each value occurs with one visit\n    occurences = [0] * len(ones)\n    for i, x in enumerate(X):\n        if x in ones:\n            occurences[ones.index(x)] += 1\n\n    # Find all the values with the minimum number of visits\n    min_occurrences = min(occurences)\n    min_indices = [i for i, x in enumerate(occurences) if x == min_occurrences]\n\n    # Find the positions with one visit\n    positions = []\n    for i in range(len(occurences)):\n        if occurences[i] == 1:\n            positions.append(i)\n\n    # Find the minimum number of moves\n    if len(positions) == 1:\n        moves = (len(X) - 1) // (positions[0] + 1)\n    else:\n        moves = (len(X) - 2) // (min_indices[0] + 1)\n\n    return str(moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    board = [int(x) for x in stdin.split()]\n    board_length = len(board)\n    Moves = 0\n\n    for i in range(0, board_length):\n        if board[i] == 0:\n            continue\n        Moves += 1\n        board[i] = 0\n\n        for j in range(i + 1, board_length):\n            if board[j] == 0:\n                continue\n\n            if abs(board[j] - board[i]) <= j - i:\n                board[j] += board[i]\n                board[i] = 0\n            else:\n                board[i] += board[j]\n                board[j] = 0\n\n    return str(Moves)"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    Xs = [int(x) for x in stdin.split()]\n    Xs.sort()\n\n    X1 = Xs[0]\n    X2 = X1 + 1\n\n    moves = 0\n\n    while X1!= X2:\n        moves += 1\n        if X1 > X2:\n            X1 = X1 - 1\n        else:\n            X1 = X1 + 1\n        X2 = X1 + 1\n\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    coordinates = [int(x) for x in stdin.split()]\n    moves = 0\n    coordinates = [(x, i + 1) for i, x in enumerate(coordinates)]\n\n    coordinates = sorted(coordinates, key=lambda c: c[0])\n\n    x, i = coordinates[0]\n    while i < n and i + 1 < n:\n        moves += 1\n        x = i + 1\n        i += 2\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def swap(l: list, a: int, b: int) -> list:\n        l[a], l[b] = l[b], l[a]\n        return l\n    def sort(l: list, lo: int, hi: int) -> list:\n        if lo < hi:\n            p = partition(l, lo, hi)\n            sort(l, lo, p-1)\n            sort(l, p+1, hi)\n        return l\n    def partition(l: list, lo: int, hi: int) -> int:\n        pivot = l[hi]\n        i = lo\n        for j in range(lo, hi):\n            if l[j] <= pivot:\n                l = swap(l, i, j)\n                i += 1\n        l = swap(l, i, hi)\n        return i\n    lines = stdin.splitlines()\n    N, M = [int(x) for x in lines[0].split()]\n    P = [int(x) for x in lines[1].split()]\n    # Sort P, as the position of the pieces must be greater than or equal to 1.\n    P = sort(P, 0, len(P)-1)\n    # Pre-compute all of the pieces that can be put at each possible position.\n    pieces = [[] for i in range(N+1)]\n    for p in P:\n        pieces[p].append(p)\n    # Compute the minimum number of moves to achieve the objective.\n    ans = 0\n    for i in range(1, len(P)):\n        for j in range(i, len(P)):\n            # Add the number of moves to reach the objective when we place the first piece at the ith position and the second piece at the jth position.\n            ans += j - i\n    return str(ans)"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n   ...\n"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    xys = [int(x) for x in stdin.split()]\n\n    xs = [0 for _ in range(n)]\n    for x, y in enumerate(xys):\n        xs[y - 1] = x + 1\n\n    best_moves = 0\n    for start in range(n):\n        curr = start\n        moves = 0\n        while True:\n            if curr == start:\n                curr = (curr + 1) % n\n                moves += 1\n            elif curr == (curr + 1) % n:\n                curr = (curr - 1) % n\n                moves += 1\n            elif curr == (curr - 1) % n:\n                curr = (curr + 1) % n\n                moves += 1\n            else:\n                break\n\n            if moves > best_moves:\n                best_moves = moves\n\n    return str(best_moves)"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.strip().split()]\n    roads = [int(x) for x in stdin.strip().split()]\n    ways = 0\n    for _ in range(min(k, m - 1)):\n        if roads[0]!= roads[1]:\n            roads.pop(0)\n            roads.pop(0)\n            roads.append(roads[0])\n            roads.append(roads[1])\n        else:\n            roads.pop(0)\n            roads.pop(0)\n        if roads[0]!= roads[1]:\n            ways += 1\n    return str(ways)"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    roads = [None] * m\n    for _ in range(m):\n        roads[_] = [int(x) for x in stdin.split()]\n    \n    roads = [[1,2]] + roads\n    \n    roads.sort(key = lambda x: x[0])\n    roads.sort(key = lambda x: x[1])\n    \n    result = [None] * k\n    result[0] = ''.join(['1' if i in roads[0] else '0' for i in range(1,n)])\n    \n    for i in range(1,k):\n        roads[0][0] = 0\n        roads[0][1] = i\n        roads.sort(key = lambda x: x[0])\n        roads.sort(key = lambda x: x[1])\n        result[i] = ''.join(['1' if i in roads[0] else '0' for i in range(1,n)])\n        \n    return '\\n'.join(result)"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(curr: int, ways: int) -> None:\n        if ways == 0:\n            return\n\n        for i in range(n):\n            if visited[i] or (curr, i) in edges:\n                continue\n            if edges:\n                edges.pop()\n            visited[i] = True\n            dfs(i, ways - 1)\n            visited[i] = False\n\n    n, m, k = map(int, stdin.split())\n    edges = set()\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges.add((a, b))\n        edges.add((b, a))\n    visited = [False] * n\n    dfs(0, k)\n    return str(k)"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    cities = [[int(x) for x in stdin.split()] for _ in range(m)]\n    roads = [[] for _ in range(n)]\n    for road in cities:\n        roads[road[0] - 1].append(road[1] - 1)\n        roads[road[1] - 1].append(road[0] - 1)\n\n    def dfs(city: int, prev: int = -1) -> int:\n        if len(roads[city]) == 0:\n            return 1\n\n        if len(roads[city]) == 1:\n            return 1\n\n        if len(roads[city]) == 2:\n            return 2\n\n        if prev == city:\n            return 0\n\n        result = 0\n        for neighbor in roads[city]:\n            if neighbor!= prev:\n                result += dfs(neighbor, city)\n\n        return result\n\n    def dfs2(city: int, prev: int = -1) -> int:\n        if len(roads[city]) == 0:\n            return 1\n\n        if len(roads[city]) == 1:\n            return 1\n\n        if len(roads[city]) == 2:\n            return 2\n\n        if prev == city:\n            return 0\n\n        result = 0\n        for neighbor in roads[city]:\n            if neighbor!= prev:\n                result += dfs2(neighbor, city)\n\n        return result\n\n    def dfs3(city: int, prev: int = -1) -> int:\n        if len(roads[city]) == 0:\n            return 1\n\n        if len(roads[city]) == 1:\n            return 1\n\n        if len(roads[city]) == 2:\n            return 2\n\n        if prev == city:\n            return 0\n\n        result = 0\n        for neighbor in roads[city]:\n            if neighbor!= prev:\n                result += dfs3(neighbor, city)\n\n        return result\n\n    return f'{dfs(0)}\\n{dfs2(0)}\\n{dfs3(0)}'\n"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.rstrip().split(\"\\n\")\n\n    n, m, k = [int(x) for x in lines[0].split(\" \")]\n    roads = [[int(x) for x in line.split(\" \")] for line in lines[1:]]\n    cities = set()\n    for i in range(len(roads)):\n        cities.add(roads[i][0])\n        cities.add(roads[i][1])\n    cities = list(cities)\n    cities.sort()\n\n    def distance(a: int, b: int) -> int:\n        if a == b:\n            return 0\n        i = cities.index(a)\n        j = cities.index(b)\n        return i - j\n\n    def smallest(road: list) -> int:\n        return min([distance(roads[i][0], roads[i][1]) for i in range(len(roads))])\n\n    def cost(road: list) -> int:\n        return smallest(road) + smallest(road[::-1])\n\n    results = []\n    for i in range(k):\n        temp = roads\n        results.append(cost(temp[0]))\n    results = list(set(results))\n    results.sort()\n\n    for result in results:\n        temp = roads\n        valid = True\n        for i in range(len(temp)):\n            temp[i][0], temp[i][1] = temp[i][1], temp[i][0]\n            if cost(temp[i]) > result:\n                valid = False\n                break\n        if valid:\n            print(result)\n            for i in range(len(temp)):\n                print(str(temp[i][0]) + str(temp[i][1]))\n            return"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    l = [list(map(int, stdin.split())) for _ in range(m)]\n\n    def _is_connected(a: int, b: int) -> bool:\n        return l[a - 1][0] == b and l[a - 1][1] == b\n\n    def _is_one_way(a: int, b: int) -> bool:\n        return l[a - 1][0] == b or l[a - 1][1] == b\n\n    def _cost(a: int, b: int) -> int:\n        if _is_one_way(a, b):\n            return 0\n        if _is_connected(a, b):\n            return 1\n        return 2\n\n    def _sum_cost(a: int, b: int) -> int:\n        return _cost(a, b) + _cost(b, a)\n\n    def _min_cost(a: int, b: int) -> int:\n        return min(_cost(a, b), _sum_cost(a, b))\n\n    ways = []\n    for _ in range(k):\n        l = sorted([(i, j) for i, j in l if i!= j], key=lambda x: _sum_cost(x[0], x[1]))\n        ways.append(''.join(str(_min_cost(a, b)) for a, b in l))\n\n    return '\\n'.join(ways)\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m, k = map(int, lines[0].split())\n    roads = [[int(s) for s in line.split()] for line in lines[1:]]\n    if len(roads)!= m:\n        return '1'\n    elif len(roads) == m:\n        return str(bin(n-1)[2:]).zfill(k)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # n, m, k = map(int, stdin.readline().split())\n    # connections = [set() for _ in range(n)]\n    # for _ in range(m):\n    #     a, b = map(int, stdin.readline().split())\n    #     connections[a - 1].add(b - 1)\n    #     connections[b - 1].add(a - 1)\n\n    # ways = [0] * k\n    # ways[0] = 1\n    # for i in range(n - 1):\n    #     for j in range(k):\n    #         if j in connections[i]:\n    #             ways[j] += ways[j - 1]\n    # return ''.join(map(str, ways))\n    pass\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint_output = solution(input())\nfor line in print_output:\n    print(line)\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    heights = list(map(int, lines[1].split()))\n    res = 'YES'\n    if heights[0]!= heights[1]:\n        res = 'NO'\n    elif n > 1:\n        for i in range(1, len(heights) - 1):\n            if heights[i] == heights[i - 1]:\n                res = 'NO'\n                break\n    return res\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    m = 2*n-2\n    if any(a[i] == a[i+1] for i in range(n-1)):\n        print('YES')\n    elif any(a[i] == m for i in range(n)):\n        print('YES')\n    else:\n        print('NO')\n\nsolution(input())\n'''\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    parts = [int(stdin) for stdin in stdin.split()]\n    if n < 1 or n > 2 * 10 ** 5 or len(parts)!= n:\n        return \"NO\"\n    left = 0\n    right = sum(parts)\n    mid = left + (right - left) // 2\n    while left!= mid!= right:\n        if (left == right) or (mid == left or mid == right):\n            break\n        if mid == mid - 1:\n            left = mid\n            mid = left + (right - left) // 2\n        if mid == mid + 1:\n            right = mid\n            mid = left + (right - left) // 2\n        if parts[mid - 1] == parts[mid]:\n            left = mid\n            mid = left + (right - left) // 2\n        if parts[mid] == parts[mid + 1]:\n            right = mid\n            mid = left + (right - left) // 2\n    if mid == right:\n        return \"YES\"\n    if mid == mid - 1:\n        return \"YES\"\n    return \"NO\"\n\n\nassert(solution(\"5\") == \"YES\")\nassert(solution(\"3\") == \"YES\")\nassert(solution(\"2 1 1 2 5\") == \"YES\")\nassert(solution(\"1 1 1\") == \"YES\")\nassert(solution(\"10 10\") == \"YES\")\nassert(solution(\"4 5 3\") == \"YES\")\nassert(solution(\"2 2 1\") == \"NO\")\nassert(solution(\"1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 2 2\") == \"NO\")\nassert(solution(\"5 5 3\") == \"NO\")\nassert(solution(\"10 10 1\") == \"NO\")\nassert(solution(\"4 5 3 1\") == \"NO\")\nassert(solution(\"1 1 1 2 2 2 3 3\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 2 2 2 2 3 3\") == \"YES\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 2 2 2 2 3 3 3\") == \"YES\")\nassert(solution
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    if sum(a) == 2 * n:\n        return \"YES\"\n\n    if a.count(a[0]) == n:\n        return \"YES\"\n    \n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = stdin.readline().strip().split()\n    return \"NO\" if len(set(h)) > 1 else \"YES\"\n    \nassert(solution(input()) == \"YES\" or solution(input()) == \"NO\")\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = [int(stdin.readline().strip()) for _ in range(n)]\n    \n    if sum(h) == 0:\n        return 'YES'\n    \n    return 'NO'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if all([a[i] == a[i + 1] for i in range(n - 1)]):\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(stdin.readline()) for i in range(n)]\n    if n == 1:\n        print('YES')\n        return 'YES'\n    elif n == 2:\n        if a[0] == a[1] == 0:\n            print('YES')\n            return 'YES'\n        elif a[0] == a[1] == 1:\n            print('NO')\n            return 'NO'\n    if a[0] == a[1]:\n        for i in range(2, n):\n            if a[i]!= a[0]:\n                print('NO')\n                return 'NO'\n        print('YES')\n        return 'YES'\n    if a[0] == 0:\n        for i in range(2, n):\n            if a[i]!= 1:\n                print('NO')\n                return 'NO'\n        print('YES')\n        return 'YES'\n    if a[0] == 1:\n        for i in range(2, n):\n            if a[i]!= 2:\n                print('NO')\n                return 'NO'\n        print('YES')\n        return 'YES'\n    for i in range(2, n):\n        if a[i]!= a[0]:\n            print('NO')\n            return 'NO'\n    print('YES')\n    return 'YES'\n"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    monster_hit_points: int = int(stdin.readline().split()[0])\n    monster_hp: int = monster_hit_points\n    rounds: int = int(stdin.readline())\n    for _ in range(rounds):\n        monster_hp += int(stdin.readline())\n        if monster_hp <= 0:\n            return '-1'\n    return str(rounds - monster_hp)\n\nassert(solution('''1000 6\n-100 -200 -300 125 77 -4''') == '9')\nassert(solution('''1000000000000 5\n-1 0 0 0 0''') == '4999999999996')\nassert(solution('''10 4\n-3 -6 5 4''') == '-1')"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    hp, n = [int(x) for x in stdin.split(\" \")]\n    d = [int(x) for x in stdin.split(\" \")[1:]]\n    hp -= min(d)\n    for i in range(n):\n        hp += d[i]\n        if hp <= 0:\n            return i + 1\n    return -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, n = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n    for _ in range(n):\n        d.append(0)\n    d = d[::-1]\n    for _ in range(H):\n        d.append(0)\n    d.reverse()\n    cur = 0\n    res = 0\n    while True:\n        if d[cur] < 0:\n            res += abs(d[cur])\n            break\n        elif d[cur] == 0:\n            cur += 1\n        else:\n            d[cur] += 1\n            for i in range(cur + 1, len(d)):\n                if d[i] > 0:\n                    res += 1\n                    break\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    monster_hp = [h]\n    monster_hp.extend(map(int, stdin.rstrip().split()))\n    rounds = 0\n    index = 0\n    while monster_hp[index] > 0:\n        index = (index + n) % len(monster_hp)\n        monster_hp[index] += monster_hp[index] + monster_hp[(index+1) % len(monster_hp)]\n        monster_hp[(index+1) % len(monster_hp)] -= monster_hp[index]\n        monster_hp[index] -= monster_hp[index]\n        rounds += 1\n    return str(rounds)"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, n = [int(x) for x in stdin.split()]\n    hp_m = list(map(int, stdin.split()[1:]))\n    for i in range(n):\n        hp_m[i] += hp_m[i - 1] if i else 0\n    for i in range(n):\n        if hp_m[i] <= 0:\n            return str(i + 1)\n    return '-1'"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d = list(map(int, stdin.strip().split()))\n    if d[0] > d[1]:\n        d = d[::-1]\n    a, b = d[:1], d[1:]\n    hp = 10 ** 12\n    while hp > 0:\n        b = [x + y for x, y in zip(a, b)]\n        a, b = b, a\n        hp = hp - 1 - max(b)\n        if hp <= 0:\n            break\n    return -1 if hp > 0 else str(sum(a) + 1)"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, n = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n    h = H\n    while h > 0:\n        for i in range(n):\n            h += d[i]\n            if h <= 0:\n                return str(i + 1)\n    return '-1'"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the first minute after which the monster is dead.\n    '''\n    line = stdin.split()\n    N = int(line[0])\n    H = int(line[1])\n    D = list(map(int, line[2].split()))\n    for i in range(N):\n        H += D[i]\n        if H <= 0:\n            return str(i+1)\n    return '-1'\n\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    candidates = {}\n    for i in range(n - 1):\n        substring = s[i:i + 2]\n        if candidates.get(substring) is None:\n            candidates[substring] = 1\n        else:\n            candidates[substring] += 1\n    max_freq = 0\n    max_2gram = \"\"\n    for key, value in candidates.items():\n        if value > max_freq:\n            max_2gram = key\n            max_freq = value\n    return max_2gram\n\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string of n characters, you need to find the two-gram with maximal number of occurrences (like \"BB\", \"AZ\", etc.).\n    \"\"\"\n    n = int(stdin.readline().strip())\n    string = stdin.readline().strip()\n    i = 0\n    counter = {}\n    for i in range(n):\n        counter[string[i:i+2]] = counter.get(string[i:i+2], 0) + 1\n    max_count = max(counter.values())\n    two_grams = []\n    for two_gram in counter:\n        if counter[two_gram] == max_count:\n            two_grams.append(two_gram)\n    return two_grams[0]\nprint(solution(input()))\n"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    print(s)\n    max_len = 1\n    max_str = s[:max_len]\n    for i in range(max_len, len(s)):\n        if s[i]!= max_str[-1]:\n            max_len += 1\n            max_str = s[i-max_len:i]\n    return max_str\n\n\nassert solution(\"ABACABA\") == \"AB\"\nassert solution(\"ZZZAA\") == \"ZZ\"\nassert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"BBAABBBABBB\") == \"BBB\"\nassert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"BBAB\") == \"BB\"\nassert solution(\"BBABBBABBBBBBB\") == \"BBBBBB\"\nassert solution(\"BABBABABBBBBBB\") == \"BBB\"\nassert solution(\"BBBABABB\") == \"BB\"\nassert solution(\"BBBABABBB\") == \"BB\"\nassert solution(\"BBABAABB\") == \"BB\"\nassert solution(\"BBAABB\") == \"BB\"\nassert solution(\"BBAAB\") == \"BB\"\nassert solution(\"BBAABBBABBB\") == \"BBB\"\nassert solution(\"BBAABBBABBBBBB\") == \"BBBBBB\"\nassert solution(\"BBAABBBABBBBBBB\") == \"BBBBBB\"\nassert solution
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    ans = ''\n    max_freq = 0\n\n    for i in range(len(s) - 1):\n        sub = s[i:i + 2]\n        freq = s.count(sub)\n        if freq > max_freq:\n            max_freq = freq\n            ans = sub\n\n    print(ans)"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = s.upper()\n    print(s)\n    ans = \"\"\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] in s[i + 1:j + 1]:\n                if len(s[i:j]) > len(ans):\n                    ans = s[i:j]\n    print(ans)\n    return ans"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.codewars.com/kata/two-characters-in-a-string\n\n    Write a function that takes a string $s$ consisting of $n$ capital Latin letters. Your function should find any two-gram contained in the given string as a substring (i.e. two consecutive characters of the string) maximal number of times.\n\n    For example, for string $s$ = \"BBAABBBA\" the answer is two-gram \"BB\", which contained in $s$ three times.\n\n    Note that occurrences of the two-gram can overlap with each other.\n\n\n    -----Input-----\n\n    The first line of the input contains integer number $n$ ($2 \\le n \\le 100$) \u2014 the length of string $s$. The second line of the input contains the string $s$ consisting of $n$ capital Latin letters.\n\n\n    -----Output-----\n\n    Print the only line containing exactly two capital Latin letters \u2014 any two-gram contained in the given string $s$ as a substring (i.e. two consecutive characters of the string) maximal number of times.\n\n\n    -----Examples-----\n\n    Input\n    7\n    ABACABA\n    Output\n    AB\n    \n    Input\n    5\n    ZZZAA\n    Output\n    ZZ\n\n    \"\"\"\n    count = {}\n    for i in range(len(stdin) - 1):\n        word = stdin[i] + stdin[i + 1]\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    \n    values = count.values()\n    max_val = max(values)\n    for key in count:\n        if count[key] == max_val:\n            return key\n"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    d = {}\n    for i in range(0, len(s) - 1):\n        if s[i:i + 2] in d:\n            d[s[i:i + 2]] += 1\n        else:\n            d[s[i:i + 2]] = 1\n    m = max(d.values())\n    s = \"\"\n    for k, v in d.items():\n        if v == m:\n            s += k\n    print(s)\n"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    moves = 0\n    while s!= t:\n        if s == \"\":\n            t = t[1:]\n        elif t == \"\":\n            s = s[1:]\n        else:\n            if s[0] == t[0]:\n                s = s[1:]\n                t = t[1:]\n            else:\n                if len(s) < len(t):\n                    t = t[1:]\n                else:\n                    s = s[1:]\n        moves += 1\n    return str(moves)\n\n\n\"\"\"\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    return len(s) + len(t) - 2 * min(len(s), len(t))\n"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().splitlines()\n    return str(min(len(s), len(t)))\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    \n    m = 0\n    while s!= t:\n        m += 1\n        if len(s) > len(t):\n            s = s[1:]\n        elif len(s) < len(t):\n            t = t[1:]\n    return m"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    x_list = list(map(int, stdin.split()))\n    max_D = 0\n    for i in range(N - 1):\n        if x_list[i + 1] - X > max_D:\n            max_D = x_list[i + 1] - X\n    return max_D\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.strip().split(' ')]\n    cities = [int(x) for x in stdin.strip().split(' ')]\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        if i == x:\n            continue\n        if cities[i - 1] == x:\n            dp[i] = 1\n        if cities[i] == x:\n            dp[i] = 1\n\n    max_dp = max(dp)\n    return str(max_dp)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, X = [int(num) for num in stdin.split()]\n    cities = [int(num) for num in stdin.split()]\n\n    best = 0\n    for i in range(1, len(cities)):\n        d = cities[i] - X\n        if d > cities[i - 1]:\n            best = i + 1\n            break\n\n    return str(best)"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    dp = [0] * (x + 1)\n    for i in range(1, x + 1):\n        dp[i] = i - arr[i - 1]\n    for i in range(n - 1, -1, -1):\n        if arr[i] == x:\n            dp[arr[i]] = 0\n        else:\n            dp[arr[i]] = min(dp[arr[i]], dp[x - arr[i]] + 1)\n    return str(dp[x])\n\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n\n    def moves(x1, y1):\n        x1 += x\n        y1 += y\n        yield (x1, y1)\n\n    def moves2(x1, y1):\n        y1 -= y\n        yield (x1, y1)\n\n    x1, y1 = x, 0\n    x2, y2 = x, 0\n\n    for _ in range(1, n):\n        x1, y1 = next(moves(x1, y1), (x1, y1))\n        x2, y2 = next(moves2(x2, y2), (x2, y2))\n\n    return str(abs(x1 - x2) + abs(y1 - y2))\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n    cities = [cities[i] for i in range(n) if cities[i]!= x]\n    return str(len(cities))"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.strip().split(\" \")]\n    xs = [int(x) for x in stdin.strip().split(\" \")]\n\n    cache = [1 for _ in range(n)]\n    def generate(i: int) -> int:\n        if cache[i]!= 1:\n            return cache[i]\n\n        best = 0\n        for j in range(1, min(i, n - i)):\n            if xs[i - j] > xs[i + j]:\n                best = max(best, generate(i - j) + 1)\n            else:\n                best = max(best, generate(i + j) + 1)\n        cache[i] = best\n        return cache[i]\n\n    return str(max(generate(i) for i in range(n)))"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    cities = [int(x) for x in stdin.split()]\n    cities.sort()\n    i, j, d, visited = 0, 0, 1, set()\n    while i < n:\n        j = i\n        while j < n and cities[j] - cities[i] <= d:\n            j += 1\n        if j - i == 1:\n            d += 1\n        elif j - i > 1:\n            d += 1\n            visited = set()\n        i = j\n    return str(d)"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result: int = 0\n    N, X = list(map(int, stdin.split()))\n    cities: list[int] = list(map(int, stdin.split()))\n    moves: list[int] = [0, 0]\n    for i in range(N):\n        if cities[i] > X:\n            return 0\n        if cities[i] == X:\n            result += 1\n    return result"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return next(x for x in stdin.split() if x.isdigit())\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin.strip()\n    n: int = len(s)\n    if n % 2 == 0 or n < 3:\n        return 'No'\n    r: str = s[:n // 2]\n    l: str = s[n // 2:]\n    if r == r[::-1]:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\"\n    \nassert (solution('') == \"Yes\")\nassert (solution('akasaka') == \"Yes\")\nassert (solution('abab') == \"No\")\nassert (solution('ababab') == \"Yes\")\nassert (solution('aaaa') == \"No\")\nassert (solution('abba') == \"Yes\")\nassert (solution('abcda') == \"Yes\")\nassert (solution('abcdaab') == \"Yes\")\nassert (solution('abcd') == \"No\")\nassert (solution('abcdba') == \"Yes\")\nassert (solution('abcdaa') == \"No\")\nassert (solution('abcdbaa') == \"Yes\")\nassert (solution('abcdaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaaabcdbaa') == \"Yes\")\nassert (solution('abcdaa"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) % 2 == 1:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return \"Yes\" if is_strong_palindrome(s) else \"No\"\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    # Check if the entire string is a palindrome\n    if s == s[::-1]:\n        print(\"Yes\")\n        return\n    # Check if the string up to the center is a palindrome\n    if s[:n // 2] == s[n // 2 :][::-1]:\n        print(\"Yes\")\n        return\n    # Check if the string up to the center and the center + 3 are a palindrome\n    if s[:n // 2] == s[n // 2 + 3 :][::-1]:\n        print(\"Yes\")\n        return\n    # We have failed to find any strong palindromes\n    print(\"No\")\n    return"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_palindrome(stdin) else 'No'\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0].strip()\n    return \"Yes\" if isStrong(S) else \"No\"\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_strong_palindrome(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) * int(b))"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [float(x) for x in stdin.strip().split()]\n    print(int(a * b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    a = int(stdin[0])\n    b = float(stdin[1])\n    answer = a * b\n    answer = str(int(answer))\n    return answer"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a, b = int(a), float(b)\n    print(a * b)"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) * int(b))"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(float, stdin.split())\n    print(int(a*b))"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [float(x) for x in stdin.strip().split(' ')]\n    return str(int(a * b))"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1: Time Limit Exceeded\n    # The limit is due to the fact that the string is too long to convert to float.\n    # However, there is a better solution to this.\n    # Given the input format, we can remove the A and B from the front of the string, and convert it to float.\n    # However, we have to deal with the fact that input() will return a string.\n    # So we have to take the floor of the float, and then convert it to an int.\n    # But this can take a while.\n    # Using divmod(a, b) is much faster than using a division operator,\n    # and this operation is also faster than converting the float to a string.\n    # Solution: O(1)\n    a, b = stdin.split(' ')\n    return str(int(float(a) * float(b)))\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    print(int(a * b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.strip().split(\" \")]\n    return str(int(a * b))"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def ways(n, a, b, res):\n        if n == 0:\n            return 1\n        if n < 0:\n            return 0\n        if a < b:\n            return 0\n        if a > n:\n            return ways(n-b, a, b+1, res)\n        return ways(n, a+1, b, res) + ways(n, a, b+1, res)\n    return str(ways(n, 0, 0, 0))"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n = int(stdin.readline().strip())\n        if n % 2!= 0:\n            print(0)\n        else:\n            print(n//2 * (n//2 - 1)//2)\n    return \"\""
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        if n == 1:\n            print(1)\n        elif n % 2 == 0:\n            print(0)\n        else:\n            print(2)\n"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    n = stdin\n    dp = [0 for i in range(n + 1)]\n    dp[0] = 1\n    if n >= 1:\n        dp[1] = 1\n    if n >= 2:\n        dp[2] = 2\n    if n >= 3:\n        dp[3] = 4\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]\n    print(dp[n])\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_candies: int = int(stdin.readline().strip())\n    if num_candies == 0:\n        return \"0\"\n    return str(solution_recursive(num_candies))\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\""
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    res = 0\n    for _ in range(n):\n        c = int(stdin.readline())\n        res += getWays(c)\n    return str(res)\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_helper(map(int, stdin.readline().strip().split())))\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split()]\n\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n\n    graph = [[] for _ in range(n)]\n\n    for u, v in roads:\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n\n    ans = [0]\n\n    def dfs(s):\n        if not ans[0]:\n            ans[0] = s\n\n        for v in graph[s]:\n            if not v in visited:\n                visited.add(v)\n                dfs(v)\n                visited.remove(v)\n\n    visited = set()\n    dfs(s-1)\n\n    return str(ans[0] - s)\n\n\n-----Answer-----\n\n1\n\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_cities, num_roads, index = [int(x) for x in stdin.split()]\n    cities = list(range(1, num_cities + 1))\n    roads = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    if index not in cities:\n        return \"0\"\n    if not roads:\n        return \"0\"\n    # roads = set(roads)\n    return str(roads_remaining(roads, index))\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdout\n\n@pytest.mark.parametrize('stdin,expected', [\n    ('9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1', '3'),\n    ('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n', '1'),\n])\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * n\n    cities = [False] * n\n    cities[s - 1] = True\n    reachable = 0\n    def dfs(node, count):\n        nonlocal reachable\n        reachable = max(reachable, count)\n        for city in graph[node]:\n            if not visited[city - 1]:\n                visited[city - 1] = True\n                dfs(city, count + 1)\n    visited[s - 1] = True\n    dfs(s - 1, 1)\n    return reachable if all(cities) else 0\n"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split()]\n    roads = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    roads.sort(key=lambda x: x[0])\n\n    def can_reach(city: int) -> bool:\n        visited = [False] * n\n        visited[city] = True\n\n        def visit(city: int) -> None:\n            if visited[city]:\n                return\n\n            visited[city] = True\n\n            for next_city in graph[city]:\n                visit(next_city)\n\n        for city in graph[city]:\n            visit(city)\n\n        return all(visited)\n\n    graph = [[] for _ in range(n)]\n    for u, v in roads:\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    result = 0\n    for city in range(n):\n        if can_reach(city):\n            result += 1\n\n    return str(result) if result else \"0\"\n\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\n            \"9 9 1\"\n        ), \"3\")\n\n        self.assertEqual(solution(\n            \"5 4 5\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"10 10 1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1 2\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"1 1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"5 6\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"6 4\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"4 1\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"5\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"4 3\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"9 8 1\"\n        ), \"3\")\n\n        self.assertEqual(solution(\n            \"7 1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"8 2\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"8 1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"5 6\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"5 7\"\n        ), \"2\")\n\n        self.assertEqual(solution(\n            \"5 2\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"5\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"3\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"10 10 1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"10 9 7\"\n        ), \"2\")\n\n        self.assertEqual(solution(\n            \"9 10 7\"\n        ), \"2\")\n\n        self.assertEqual(solution(\n            \"3\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"4\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"3 4\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"10\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"7 7\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"5\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1 2\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"5 1\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1 2\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"4 3\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1 2\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"1 1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"5\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1 2\"\n        ), \"1\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1 1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"5\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1 1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n            \"1\"\n        ), \"0\")\n\n        self.assertEqual(solution(\n"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.readline().split())\n    roads = []\n    for _ in range(m):\n        u, v = map(int, stdin.readline().split())\n        if u!= v:\n            roads.append((u, v))\n    if n == s:\n        return 0\n    roads = [set(r) for r in roads]\n    for r in roads:\n        r.add(s)\n    for r in range(len(roads)):\n        for i in range(r, len(roads)):\n            if r == i:\n                continue\n            roads[r] |= roads[i]\n            roads[r].remove(s)\n            roads[i] -= roads[r]\n    result = 0\n    for i in range(len(roads)):\n        for j in range(i + 1, len(roads)):\n            if roads[i] & roads[j]:\n                result += 1\n    return result\n\n\n\n>>> solution(\n... \"1 2\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\"\n... )\n3\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\"\n... )\n3\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\"\n... )\n3\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\"\n... )\n3\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\"\n... )\n3\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"9 9 1\\n1 2\\n1 3\\n2 3\\n1 5\\n5 6\\n6 1\\n1 8\\n9 8\\n7 1\"\n... )\n3\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n... )\n1\n\n>>> solution(\n... \"5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\"\n..."
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    visited = set()\n    count = 0\n    cities = [False] * n\n    cities[s - 1] = True\n\n    def helper(cur, count):\n        if cur in visited:\n            return\n        if cities[cur]:\n            visited.add(cur)\n            return\n        visited.add(cur)\n        cities[cur] = True\n        count += 1\n\n        for nxt in graph[cur]:\n            helper(nxt, count)\n\n    for i in range(n):\n        helper(i, count)\n\n    return str(count)\n\n\"\"\"\n\nimport sys\nfrom functools import lru_cache\n\nsys.setrecursionlimit(100000)\n\n@lru_cache(None)\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '5'"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] < i:\n            ans += (i - a[i]) + 1\n    return str(ans)"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_boxers = int(stdin.readline())\n    boxers_weights = stdin.readline().split()\n    boxers_weights = [int(weight) for weight in boxers_weights]\n    max_team_size = max(boxers_weights)\n    return str(max_team_size)\n\nassert(solution('''4\n3 2 4 1''') == '4')\nassert(solution('''6\n1 1 1 4 4 4''') == '5')\n"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = map(int, stdin.readline().strip().split())\n    t = {}\n    for i, v in enumerate(a):\n        if v not in t:\n            t[v] = 1\n        else:\n            t[v] += 1\n    return max(t.values())\n\nprint(solution(input()))\n"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    weights = [int(stdin) for _ in range(n)]\n    weights.sort()\n    # TODO\n    # max_weight = 1\n    # weight_sum = 0\n    # for i, weight in enumerate(weights):\n    #     if i == 0:\n    #         weight_sum += weight\n    #         max_weight = weight\n    #     else:\n    #         weight_sum += weight\n    #         max_weight = max(max_weight, weight_sum)\n    # return str(max_weight)\n"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weights = [int(weight) for weight in stdin.readline().strip().split()]\n    weights.sort(reverse=True)\n    count = 0\n    for weight in weights:\n        if weight % 3 == 0:\n            count += weight / 3\n        elif weight % 3 == 1:\n            count += weight - 1\n        else:\n            count += weight + 1\n    return str(count)\n\n\nassert(solution('''4\n3 2 4 1''') == '4')\nassert(solution('''6\n1 1 1 4 4 4''') == '5')\nassert(solution('''10\n2 6 4 2 8 5 9 3 1''') == '7')\nassert(solution('''14\n1 2 4 8 9 10 11 12 13 14''') == '10')\nassert(solution('''8\n1 1 1 1 1 1 1 1 1''') == '8')\nassert(solution('''1''') == '1')\nassert(solution('''0''') == '0')\nassert(solution('''999999''') == '0')\nassert(solution('''10000''') == '0')\nassert(solution('''5''') == '5')\nassert(solution('''50000000''') == '50000000')\nassert(solution('''100000''') == '100000')\nassert(solution('''10000000''') == '10000000')\nassert(solution('''50000000''') == '4999999')\nassert(solution('''10000000''') == '10000000')\nassert(solution('''1000000000''') == '1000000000')\nassert(solution('''1000000000''') == '1000000000')\nassert(solution('''5000000000''') == '1000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') == '100000000000')\nassert(solution('''100000000000''') =="
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(max(a))\n    weight = []\n    for x in a:\n        if x > 150000:\n            return '0'\n        weight.append(x)\n    weight.sort()\n    weight = list(set(weight))\n    weight.sort(reverse=True)\n    weight = [x for x in weight if x <= 150000]\n    i = 0\n    while i < len(weight) - 1:\n        if weight[i] == weight[i + 1]:\n            weight[i + 1] += 1\n            weight.pop(i)\n        else:\n            i += 1\n    return str(len(weight))"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nm = int(input())\nweights = [int(weight) for weight in input().split()]\nassert len(weights) == m\n\nboxers = [(weight, i) for i, weight in enumerate(weights, start=1)]\nboxers.sort()\n\nbest_team_size = 0\nboxers_seen = set()\n\nfor weight, i in boxers:\n    if weight in boxers_seen:\n        continue\n    boxers_seen.add(weight)\n    team_size = 1\n    for other_weight, other_i in boxers[i+1:]:\n        if other_weight == weight:\n            continue\n        if other_weight - weight > 1:\n            break\n        team_size += 1\n    best_team_size = max(best_team_size, team_size)\n\nprint(best_team_size)"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    boxers = [int(x) for x in stdin.readline().split()]\n    boxers = sorted(boxers, reverse=True)\n\n    idx = 0\n    while idx < len(boxers) - 1:\n        if boxers[idx] + 1!= boxers[idx + 1]:\n            boxers[idx] += 1\n            idx += 1\n        idx += 1\n    return''.join(map(str, boxers))\n\nassert(solution('''4\n3 2 4 1\n''')) == '4'\nassert(solution('''6\n1 1 1 4 4 4\n''')) == '5'\nassert(solution('''1\n1\n''')) == '1'\nassert(solution('''2\n1 3\n''')) == '2'\nassert(solution('''4\n1 3 4 1\n''')) == '4'\nassert(solution('''6\n1 1 1 4 4 4\n''')) == '5'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''2\n1 3\n''')) == '1'\nassert(solution('''2\n1 1\n''')) == '1'\nassert(solution('''4\n1 3 4 1\n''')) == '2'\nassert(solution('''4\n1 3 4 1\n''')) == '2'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2 4 8\n''')) == '8'\nassert(solution('''8\n2 4 8 5 1 2"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    A = list(map(int, stdin.strip().split()))\n    A.sort()\n    B = list(map(int, stdin.strip().split()))\n    B.sort()\n    B.reverse()\n    n = len(B)\n    for i, b in enumerate(B):\n        a = A[i % N]\n        if len(str(a)) < 6:\n            A[i % N] = '0' * (6 - len(str(a))) + str(a)\n    for i, b in enumerate(B):\n        a = A[i % N]\n        if len(str(b)) < 6:\n            B[i] = '0' * (6 - len(str(b))) + str(b)\n    for i, b in enumerate(B):\n        a = A[i % N]\n        if len(str(a)) < 6:\n            A[i % N] = '0' * (6 - len(str(a))) + str(a)\n    for i in range(n):\n        B[i] = '{0:06}'.format(B[i])\n    for i in range(n):\n        A[i] = '{0:06}'.format(A[i])\n    print(*(A + B))"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    pref, cities = [], []\n    for _ in range(M):\n        a, b = [int(x) for x in stdin.split()]\n        pref.append(a)\n        cities.append(b)\n    \n    if len(pref) > 1:\n        d = dict()\n        for i in range(1, N + 1):\n            if i not in pref:\n                d[i] = str(i)\n        pref = sorted(list(d.keys()))\n        cities = [d[pref[i - 1]] for i in range(1, N + 1)]\n    \n    return \" \".join(cities)\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N, M = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    pref, city, id = {}, {}, {}\n    for i in range(1, N+1):\n        pref[stdin[i].split()[0]] = i\n    for i in range(1, M+1):\n        city[stdin[i].split()[0]] = i\n    for k, v in city.items():\n        id[k] = '{:06}{:06}'.format(pref[k], v)\n    return '\\n'.join(sorted(id.values()))"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    nums = [int(stdin.strip()) for _ in range(m)]\n    res = []\n    for i in range(1, n + 1):\n        if len(str(nums[i - 1])) < 6:\n            res.append('0' * (6 - len(str(nums[i - 1]))) + str(nums[i - 1]))\n        else:\n            res.append(str(nums[i - 1]))\n    return''.join(res)"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.strip().split()]\n    \n    pref_id = {}\n    for i in range(1, n+1):\n        pref_id[i] = {}\n        for j in range(1, m+1):\n            pref_id[i][j] = int(stdin.readline().strip())\n            pref_id[i][j] = (pref_id[i][j] // 100, pref_id[i][j] % 100)\n            \n    cities = sorted([(pref_id[i][j], i, j) for i in range(1, n+1) for j in range(1, m+1)], reverse=True)\n    \n    pref_id_str = {}\n    for i in range(1, n+1):\n        pref_id_str[i] = \"\"\n        for j in range(1, m+1):\n            pref_id_str[i] += str(pref_id[i][j][1])\n            pref_id_str[i] += str(pref_id[i][j][0])\n            pref_id_str[i] += \" \"\n    \n    return \"\".join(pref_id_str[i] for i in range(1, n+1))\n\nprint(solution(stdin.read().strip()))\n\"\"\"\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    prefectures, cities = [], []\n    for _ in range(n):\n        prefecture, year = stdin.split(' ')\n        prefectures.append(int(prefecture))\n        cities.append(int(year))\n    \n    cities_dict = {cities[i]: i for i in range(n)}\n    \n    result = []\n    for _ in range(m):\n        prefecture, year = stdin.split(' ')\n        result.append(pref_cities(int(prefecture), int(year), cities_dict))\n    \n    return '\\n'.join(result)\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, m = list(map(int, stdin.split(' ')))\n    prefectures = []\n    for _ in range(n):\n        prefecture, year = stdin.split(' ')\n        prefecture = prefecture[-6:]\n        year = int(year)\n        prefectures.append((prefecture, year))\n    prefectures = sorted(prefectures, key=lambda t: t[1])\n    prefectures = sorted(prefectures, key=lambda t: t[0])\n    cities = []\n    for _ in range(m):\n        city, year = stdin.split(' ')\n        city = city[-6:]\n        year = int(year)\n        cities.append((city, year))\n    cities = sorted(cities, key=lambda t: t[1])\n    cities = sorted(cities, key=lambda t: t[0])\n    for city, year in cities:\n        prefecture, _ = prefectures[0]\n        id_number = str(prefecture)\n        id_number += '0' * (6 - len(id_number)) + str(city)\n        prefectures = prefectures[1:]\n    return ''.join(id_number[i] for i in range(0, 12, 2))"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_of_cities, num_of_prefectures = [int(x) for x in stdin.split(\" \")]\n    city_to_pref = {\n        x: [stdin.split(\" \")[i + 1] for i in range(0, 12, 2)]\n        for x, _ in enumerate(range(num_of_prefectures), 1)\n    }\n    sorted_city_to_pref = sorted(city_to_pref.items())\n    for city, pref in sorted_city_to_pref:\n        for year, _ in enumerate(range(len(pref), 6), 1):\n            pref.append(\"0\")\n        pref_id = \"\".join(pref)\n        print(f\"{pref_id}\")\n\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = tuple(map(int, stdin.strip().split(\" \")))\n    prefectures = [[] for _ in range(N)]\n    for _ in range(M):\n        city, year = tuple(map(int, stdin.strip().split(\" \")))\n        prefecture = (city - 1) // N\n        prefectures[prefecture].append(year)\n    prefecture_id = [[] for _ in range(N)]\n    for prefecture, years in enumerate(prefectures):\n        for year in years:\n            prefecture_id[prefecture].append(prefecture * 10 ** 6 + year)\n    for prefecture_id_number in prefecture_id:\n        prefecture_id_number.sort()\n        print(\"\".join(str(number)[:6] for number in prefecture_id_number))\n"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().strip().split()))\n    A.sort()\n    ans = A[-1]\n    while A:\n        a = A.pop()\n        ans -= a\n        if A:\n            ans = min(ans, A[-1])\n    return str(ans)\n\nassert(solution(\"4\") == \"2\")\nassert(solution(\"10 5 8 40\") == \"5\")\nassert(solution(\"1 5 5 10\") == \"4\")\nassert(solution(\"1 5 5 10 2\") == \"4\")\nassert(solution(\"1 5 5 10 5\") == \"1\")\nassert(solution(\"1 1 1 1 1\") == \"0\")\nassert(solution(\"2 2\") == \"0\")\nassert(solution(\"2 1 1\") == \"0\")\nassert(solution(\"2 1 1 1\") == \"0\")\nassert(solution(\"2 2 1 1\") == \"0\")\nassert(solution(\"2 1 1 1 1\") == \"0\")\nassert(solution(\"2 1 1 1 1 1\") == \"0\")\nassert(solution(\"2 2 1 1 1 1\") == \"0\")\n"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_monsters = int(stdin)\n    alive_monsters = set(range(1, num_monsters + 1))\n    while len(alive_monsters) > 1:\n        attack_monster = list(alive_monsters)[randrange(len(alive_monsters))]\n        attacked_monster = alive_monsters.pop()\n        health_reduction = randrange(10 ** 9)\n        alive_monsters.discard(attacked_monster - health_reduction)\n        if attacked_monster - health_reduction:\n            alive_monsters.add(attacked_monster - health_reduction)\n    return str(list(alive_monsters)[0])"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    a = [int(x) for x in stdin.split()[1:]]\n    A = [x for x in a if x > 0]\n    A.sort()\n    if len(A) == 1:\n        return str(A[0])\n    m = A[-1]\n    for i in range(len(A)-1, 0, -1):\n        if A[i-1] >= A[i]:\n            m = A[i-1]\n            break\n    return str(m)"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(i) for i in stdin.readline().split()]\n\n    max_health = max(nums)\n    count = 0\n    for health in nums:\n        max_health -= health\n        if max_health <= 0:\n            break\n        count += 1\n\n    return str(count)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the minimum possible final health of the last monster alive.'''\n    N, A = map(int, stdin.split())\n    return str(min(A-i for i in map(int, stdin.split())))\n\nassert(solution('''4\n2 10 8 40''') == '2')\nassert(solution('''10\n1 10 100 1000''') == '0')\nassert(solution('''4\n2 10 8 40''') == '2')\nassert(solution('''10\n1 10 100 1000''') == '0')\nassert(solution('''1\n1''') == '0')\nassert(solution('''7\n7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7'''\n    ) == '0')\n"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().split()))\n\n    alive_monsters = []\n    dead_monsters = []\n\n    for i, a in enumerate(A):\n        if a > 1:\n            alive_monsters.append(i + 1)\n        elif a == 1:\n            dead_monsters.append(i + 1)\n\n    if len(alive_monsters) == 1:\n        return str(A[alive_monsters[0] - 1])\n\n    # Keep attacking until there is only one monster alive\n    while len(alive_monsters) > 1:\n        # Select a random alive monster\n        mon_to_attack = alive_monsters[randrange(len(alive_monsters))]\n        # Get the monster with highest health\n        mon_with_max_health = alive_monsters[-1]\n        # Get the health of the monster to attack\n        health = A[mon_to_attack - 1]\n        # Get the health of the monster to attack\n        max_health = A[mon_with_max_health - 1]\n        # Reduce the health of the monster to attack by the amount of health of the monster to attack\n        health -= max_health\n        # Remove the monster from alive_monsters\n        del alive_monsters[alive_monsters.index(mon_to_attack)]\n        # If the monster attacked is not the monster with highest health\n        if mon_to_attack!= mon_with_max_health:\n            # Add the monster to alive_monsters\n            alive_monsters.append(mon_to_attack)\n\n    return str(A[alive_monsters[0] - 1])"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    health = sum(a)\n    seen = set()\n    seen.add(health)\n    for _ in range(n - 1):\n        a = list(map(int, stdin.readline().split()))\n        health -= a[0]\n        for i in range(1, len(a)):\n            health -= a[i]\n            if health in seen:\n                return str(health)\n            seen.add(health)\n    return str(health)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(str(i) for i in all_golorps_variables_values_of_a_golorp_that_can_feed_it(stdin))\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    golorp = stdin.split('?(_-_+_/')\n    golorp[1] = golorp[1].split('_<___>__')\n    golorp[2] = golorp[2].split('_<____>_<_____>_<______>_<_______>')\n    viable_golorps = [\n        golorp[0][0],\n        golorp[0][1],\n        golorp[1][0],\n        golorp[1][1],\n        golorp[2][0],\n        golorp[2][1],\n        golorp[2][2],\n        golorp[2][3],\n        golorp[2][4],\n    ]\n\n    try:\n        return min(viable_golorps, key=len)\n    except ValueError:\n        return 'false'\n\n\nassert solution('?(_-_/___*__):-___>__') == '0010'\nassert solution('?(__-_+_/_____):-__>__,_____<__') == 'false'\nassert solution('?(__+___+__-___):-___>__') == '0101'\nprint(solution(input()))\n"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin.strip()\n    return golorp_name\n\nassert(solution('') == 'false')\nassert(solution('?(_-/+___):-_-____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '00100')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '010')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '01')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '10')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '01')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '00')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '10')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '01')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '00')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '10')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '01')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '00')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '01')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '00')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '01')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '00')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '01')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '00')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '01')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '00')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '01')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '00')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '01')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '00')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '01')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '00')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '01')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '00')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '01')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '00')\nassert(solution('?(_-/+___):-_-*____>____-___>_____-_<_____,_____<_____<_______<___>____<_____,_____<___>_)') == '01')\nassert(solution('?("
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return..."
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''?(_-_/___*__):-___>__.\n   ...\n   ... ''')\n    '10'\n    >>> solution('''?(__-_+_/_____):-__>__,_____<__.\n   ...\n   ... ''')\n    'false'\n    >>> solution('''?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n   ...\n   ... ''')\n    '0250341'\n    \"\"\"\n    golorp = stdin.strip()\n    variables_in_golorp = len(golorp)\n    golorp_to_variables_map = {}\n    golorp_to_variables_map[golorp] = set()\n    for i in range(0, variables_in_golorp):\n        # Find all possible variable values\n        if golorp[i] == \"?\":\n            variable_value = \"1234567890\"\n            # Leave out last digit to avoid non-valid golorp\n            for j in range(0, 9):\n                if golorp[i + 1]!= \"?\":\n                    variable_value = variable_value.replace(str(j), \"\")\n            golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(variable_value))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"0\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"1\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"2\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"3\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"4\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"5\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"6\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"7\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"8\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"9\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"-\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"_\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"+\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\":\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"*\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"\\\\\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"/\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"<\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\">\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"(\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\")\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"{\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"}\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"[\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"]\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"=\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"+=\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"-=\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"*=\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"/=\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\"%=\"))\n    golorp_to_variables_map[golorp] = golorp_to_variables_map[golorp].union(set(\":=\"))\n    golorp_to_variables_map[golorp] = golorp_"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    grid = [[int(x) for x in stdin.split()] for _ in range(m)]\n\n    total = 0\n\n    def dfs(i, j, xor):\n        nonlocal total\n\n        total += xor ^ grid[i][j]\n\n        if i < n - 1:\n            dfs(i + 1, j, grid[i][j])\n        if j < m - 1:\n            dfs(i, j + 1, grid[i][j])\n\n    dfs(0, 0, 0)\n\n    return str(total)\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = [int(x) for x in stdin.strip().split(' ')]\n    n, m, k = lines\n    grid = [[int(x) for x in stdin.strip().split(' ')] for _ in range(m)]\n    return solve(grid, n, m, k)\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # D[i][j] is the number of paths that end in (i, j)\n    D = [0] * (n + 1)\n    for _ in range(m):\n        row = stdin.readline().split()\n        for i in range(m):\n            D[i] = xor(D[i], int(row[i]))\n    return D[n - 1]\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n\n    grid = [None for _ in range(n)]\n    for i in range(n):\n        grid[i] = [int(x) for x in stdin.split()[i+1:i+m+1]]\n\n    s = (1, 1)\n    for j in range(m):\n        for i in range(n):\n            if i == s[0] and j == s[1]:\n                continue\n            if grid[i][j] ^ (k & 1) == 0:\n                s = (i, j)\n    print(solution)\n    return \"\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        row = list(map(int, stdin.split()))\n        grid.append(row)\n\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                count += 1\n            elif i == 0:\n                count += grid[i][j - 1]\n            elif j == 0:\n                count += grid[i - 1][j]\n            else:\n                count += grid[i][j - 1] ^ grid[i - 1][j]\n\n    return str(count)\n"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(n) for n in stdin.split()]\n    grid = []\n    for _ in range(n):\n        grid.append([int(n) for n in stdin.split()])\n    return solve(grid)\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n    paths = count_paths_dp(grid, n, m)\n    print(paths ^ k)\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m, k = [int(x) for x in stdin[0].split(' ')]\n    a = [int(x) for x in stdin[1:n+1]]\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if i == j == 0:\n                res += 1\n            elif i == 0:\n                res += a[j-1]\n            elif j == 0:\n                res += a[i-1]\n            else:\n                res += (a[i-1] + a[j-1])\n    return str(res ^ k)"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\nprint(solution(stdin))\n\n>>> 3\n\nprint(solution('1 2 3'))\n>>> 2\n\nprint(solution('1 3 3 3'))\n>>> 0\n\nprint(solution('0 1 3 3'))\n>>> 0\n\nprint(solution('1 0 1 1'))\n>>> 3\n\nprint(solution('1 3 3 3'))\n>>> 0\n\nprint(solution('0 0 0 0'))\n>>> 0\n\nprint(solution('3 4 2'))\n>>> 5\n\nprint(solution('3 4 1000000000000000000'))\n>>> 0\n\nprint(solution('3 4 1000000000000000000'))\n>>> 0\n\nprint(solution('3 4 2'))\n>>> 5\n\nprint(solution('3 4 10'))\n>>> 7\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 2'))\n>>> 5\n\nprint(solution('3 4 2'))\n>>> 5\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3'))\n>>> 1\n\nprint(solution('3 4 3"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.strip().split(' ')]\n\n    grid = [[int(x) for x in stdin.strip().split(' ')] for _ in range(n)]\n\n    paths = 0\n    for i in range(1, n):\n        for j in range(1, m):\n            if grid[i][j] == k:\n                paths += 1\n            if grid[i][j] ^ grid[i - 1][j] == k:\n                paths += 1\n            if grid[i][j] ^ grid[i][j - 1] == k:\n                paths += 1\n    return str(paths)\n\nassert(solution('''3 3 11\n2 1 5\n7 10 0\n12 6 4''') == '3')\nassert(solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1''') == '5')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = stdin.readline()\n    return t[::-1]\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\nThe answer for the second example is \"thisisexampletwo\".\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nprint(solution())\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    res = ''\n    for i in range(n, 0, -1):\n        for j in range(1, i+1):\n            if s[n-i:n-j] == s[n-j:n-i]:\n                res = s[n-i:n-j] + res\n                break\n    return res\n\nfor _ in range(int(input().strip())):\n    print(solution(input().strip()))\n"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nFor more information about the algorithm, read:\n\nhttps://en.wikipedia.org/wiki/Reverse_string\n\nhttps://www.codewars.com/kata/5a35ff7c0b28ce6d90b0000cd\n'''\n\nfrom math import ceil\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\nThe second example is described in the problem statement.\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    ans = \"\"\n    for i in range(1, n + 1):\n        temp = s[n - i:] + s[:n - i]\n        ans = temp if len(temp) > len(ans) else ans\n    return ans\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n-----Solutions-----\n\"\"\"\nfrom string import ascii_lowercase as alphabet\nfrom string import ascii_uppercase as alphabet_upper\nfrom string import digits\nfrom string import punctuation\nfrom string import ascii_letters\nfrom string import hexdigits\nfrom string import octdigits\n\nfrom solutions.kyu_8.multi_factorial import factorial\nfrom solutions.kyu_8.multi_factorial import factorial_list\n\nfrom solutions.kyu_8.fibonacci import fibonacci\nfrom solutions.kyu_8.fibonacci import fibonacci_list\n\nfrom solutions.kyu_8.fibonacci import fibonacci_iterative\nfrom solutions.kyu_8.fibonacci import fibonacci_iterative_list\n\nfrom solutions.kyu_8.fibonacci import fibonacci_recursive\nfrom solutions.kyu_8.fibonacci import fibonacci_recursive_list\n\nfrom solutions.kyu_8.fibonacci import fibonacci_memoized\nfrom solutions.kyu_8.fibonacci import fibonacci_memoized_list\n\nfrom solutions.kyu_8.palindrome import palindrome_iterative\nfrom solutions.kyu_8.palindrome import palindrome_recursive\n\nfrom solutions.kyu_8.palindrome import palindrome_recursive_iterative\nfrom solutions.kyu_8.palindrome import palindrome_recursive_list\n\nfrom solutions.kyu_8.palindrome import palindrome_recursive_memoized\nfrom solutions.kyu_8.palindrome import palindrome_recursive_memoized_list\n\nfrom solutions.kyu_8.palindrome import palindrome_memoized\nfrom solutions.kyu_8.palindrome import palindrome_memoized_list\n\nfrom solutions.kyu_8.maze import find_maze_path\nfrom solutions.kyu_8.maze import find_maze_path_recursive\n\nfrom solutions.kyu_8.maze import find_maze_path_iterative\nfrom solutions.kyu_8.maze import find_maze_path_recursive_iterative\n\nfrom solutions.kyu_8.maze import find_maze_path_memoized\nfrom solutions.kyu_8.maze import find_maze_path_memoized_iterative\n\nfrom solutions.kyu_8.triangle import triangle_iterative\nfrom solutions.kyu_8.triangle import triangle_recursive\n\nfrom solutions.kyu_8.triangle import triangle_recursive_iterative\nfrom solutions.kyu_8.triangle import triangle_recursive_list\n\nfrom solutions.kyu_8.triangle import triangle_recursive_memoized\nfrom solutions.kyu_8.triangle import triangle_recursive_memoized_iterative\n\nfrom solutions.kyu_8.triangle import triangle_memoized\nfrom solutions.kyu_8.triangle import triangle_memoized_iterative\n\nfrom solutions.kyu_8.triangle import is_right_triangle\nfrom solutions.kyu_8.triangle import is_right_triangle_recursive\n\nfrom solutions.kyu_8.triangle import is_right_triangle_memoized\nfrom solutions.kyu_8.triangle import is_right_triangle_memoized_iterative\n\nfrom solutions.kyu_8.triangle import is_right_triangle_memoized_iterative\n\nfrom solutions.kyu_8.triangle import find_max_path\nfrom solutions.kyu_8.triangle import find_max_path_recursive\n\nfrom solutions.kyu_8.triangle import find_max_path_iterative\nfrom solutions.kyu_8.triangle import find_max_path_recursive_iterative\n\nfrom solutions.kyu_8.triangle import find_max_path_memoized\nfrom solutions.kyu_8.triangle import find_max_path_memoized_iterative\n\nfrom solutions.kyu_8.triangle import find_max_path_recursive_memoized\nfrom solutions.kyu_8.triangle import find_max_path_recursive_memoized_iterative\n\nfrom solutions.kyu_8.triangle import find_max_path_memoized_iterative\n\nfrom solutions.kyu_8.triangle import triangular_number\nfrom solutions.kyu_8.triangle import triangular_number_iterative\n\nfrom solutions.kyu_8.triangle import triangular_number_recursive\nfrom solutions.kyu_8.triangle import triangular_number_recursive_iterative\n\nfrom solutions.kyu_8.triangle import triangular_number_recursive_memoized\nfrom solutions.kyu_8.triangle import triangular_number_recursive_memoized_iterative\n\nfrom solutions.kyu_8.triangle import triangular_number_memoized\nfrom solutions.kyu_8.triangle import triangular_number_memoized_iterative\n\nfrom solutions.kyu_8.triangle import triangular_number_recursive_memoized_iterative\n\nfrom solutions.kyu_8.triangle import triangular_number_iterative\nfrom solutions.kyu_8.triangle import triangular_number_recursive_iterative\n\nfrom solutions.kyu_8.triangle import is_triangular\nfrom solutions.kyu_8.triangle import is_triangular_iterative\nfrom solutions.kyu_8.triangle import is_triangular_recursive\n\nfrom solutions.kyu_8.triangle import is_triangular_memoized\nfrom solutions.kyu_8.triangle import is_triangular_memoized_iterative\n\nfrom solutions.kyu_8.triangle import is_triangular_memoized_iterative\n\nfrom solutions.kyu_8.triangle import is_triangular_recursive_memoized\nfrom solutions.kyu_8.triangle import is_triangular_recursive_memoized_iterative\n\nfrom solutions.kyu_8.triangle import is_triangular_recursive_memoized_iterative\n\nfrom solutions.kyu_8.triangle import find_maximum_path_sum\nfrom solutions.kyu_8.triangle import find_maximum_path_sum_recursive\n\nfrom solutions.kyu_8.triangle import find_maximum_path_sum_iterative\nfrom solutions.kyu_8.triangle import find_maximum_path_sum_recursive_iterative\n\nfrom solutions.kyu_8.triangle import find_maximum_path_sum_memoized\nfrom solutions.kyu_8.triangle import find_maximum_path_sum_memoized_iterative"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''https://www.codewars.com/kata/5440e0b20e7c6b001060005b\n\n    This is a new kata that is quite difficult to solve! I solved it during a competition on codewars.com, but it was an insanely difficult problem, and one of the two biggest problems in this competition is a minimum of two numbers.\n\n    This is the minimum of two numbers:\n\n    Find the minimum of two numbers.\n\n    Input:\n    a and b (int, int)\n\n    Output:\n    int (minimum of a and b)\n\n    Examples:\n    solution(10, 10) returns 10\n    solution(10, 5) returns 5\n    solution(10, 0) returns 0\n    '''\n    a, b = stdin.split(' ')\n    a, b = int(a), int(b)\n    return min(a, b)\n'''\n"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    print(a + b)\n    return \"\""
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) + int(b))"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) + int(b))"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    return str(a + b)\n\nassert(solution(\"1 2\") == \"3\")\nassert(solution(\"8 17\") == \"25\")\nassert(solution(\"0 14\") == \"14\")\nassert(solution(\"5 492\") == \"873\")\nassert(solution(\"381 492\") == \"874\")\n"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return str(int(a) + int(b))\n\nassert solution(\"5 14\") == \"19\"\nassert solution(\"381 492\") == \"873\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) + int(b))"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a, b = int(a), int(b)\n    print(a + b)\n"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nclass BrainfuckInterpreter:\n    def __init__(self, code: str) -> None:\n        self.code = code\n        self.program = self.parse_code(code)\n        self.memory = [0] * 30000\n        self.pointer = 0\n        self.input_queue = deque()\n        self.output_queue = deque()\n        self.output = ''\n        self.loop = False\n        self.command_index = 0\n\n    def input(self, data: str) -> None:\n        self.input_queue.append(data)\n\n    def output(self) -> str:\n        while self.output_queue:\n            return self.output_queue.popleft()\n        return ''\n\n    def step(self) -> None:\n        if not self.input_queue:\n            self.loop = True\n            self.command_index = 0\n\n        if self.command_index == 0:\n            code = self.program[self.pointer]\n            if code == '>':\n                self.pointer += 1\n                if self.pointer >= len(self.program):\n                    self.program.extend(0 for _ in range(len(self.program), self.pointer))\n            elif code == '<':\n                self.pointer -= 1\n                if self.pointer < 0:\n                    self.program.extend(0 for _ in range(self.pointer, 0))\n                    self.pointer = 0\n            elif code == '+':\n                self.memory[self.pointer] += 1\n            elif code == '-':\n                self.memory[self.pointer] -= 1\n\n        elif self.command_index == 1:\n            code = self.program[self.pointer]\n            if code == '>':\n                self.pointer += 1\n                if self.pointer >= len(self.program):\n                    self.program.extend(0 for _ in range(len(self.program), self.pointer))\n            elif code == '<':\n                self.pointer -= 1\n                if self.pointer < 0:\n                    self.program.extend(0 for _ in range(self.pointer, 0))\n                    self.pointer = 0\n            elif code == '+':\n                self.memory[self.pointer] += 1\n            elif code == '-':\n                self.memory[self.pointer] -= 1\n\n        elif self.command_index == 2:\n            code = self.program[self.pointer]\n            if code == '>':\n                self.pointer += 1\n                if self.pointer >= len(self.program):\n                    self.program.extend(0 for _ in range(len(self.program), self.pointer))\n            elif code == '<':\n                self.pointer -= 1\n                if self.pointer < 0:\n                    self.program.extend(0 for _ in range(self.pointer, 0))\n                    self.pointer = 0\n            elif code == '+':\n                self.memory[self.pointer] += 1\n            elif code == '-':\n                self.memory[self.pointer] -= 1\n\n        elif self.command_index == 3:\n            code = self.program[self.pointer]\n            if code == '>':\n                self.pointer += 1\n                if self.pointer >= len(self.program):\n                    self.program.extend(0 for _ in range(len(self.program), self.pointer))\n            elif code == '<':\n                self.pointer -= 1\n                if self.pointer < 0:\n                    self.program.extend(0 for _ in range(self.pointer, 0))\n                    self.pointer = 0\n            elif code == '+':\n                self.memory[self.pointer] += 1\n            elif code == '-':\n                self.memory[self.pointer] -= 1\n\n        elif self.command_index == 4:\n            code = self.program[self.pointer]\n            if code == '>':\n                self.pointer += 1\n                if self.pointer >= len(self.program):\n                    self.program.extend(0 for _ in range(len(self.program), self.pointer))\n            elif code == '<':\n                self.pointer -= 1\n                if self.pointer < 0:\n                    self.program.extend(0 for _ in range(self.pointer, 0))\n                    self.pointer = 0\n            elif code == '+':\n                self.memory[self.pointer] += 1\n            elif code == '-':\n                self.memory[self.pointer] -= 1\n\n        elif self.command_index == 5:\n            code = self.program[self.pointer]\n            if code == '>':\n                self.pointer += 1\n                if self.pointer >= len(self.program):\n                    self.program.extend(0 for _ in range(len(self.program), self.pointer))\n            elif code == '<':\n                self.pointer -= 1\n                if self.pointer < 0:\n                    self.program.extend(0 for _ in range(self.pointer, 0))\n                    self.pointer = 0\n            elif code == '+':\n                self.memory[self.pointer] += 1\n            elif code == '-':\n                self.memory[self.pointer] -= 1\n\n        elif self.command_index == 6:\n            code = self.program[self.pointer]\n            if code == '>':\n                self.pointer += 1\n                if self.pointer >= len(self.program):\n                    self.program.extend(0 for _ in range(len(self.program), self.pointer))\n            elif code == '<':\n                self.pointer -= 1\n                if self.pointer < 0:\n                    self.program.extend(0 for _ in range(self.pointer, 0))\n                    self.pointer = 0\n            elif code == '+':\n                self.memory[self.pointer] += 1\n            elif code == '-':\n                self.memory[self.pointer] -= 1\n\n        elif self.command_index == 7:\n            code = self.program[self.pointer]\n            if code == '>':\n                self.pointer += 1\n                if self.pointer >= len(self.program):\n                    self.program.extend(0 for _ in range(len(self.program), self.pointer))\n            elif code == '<':\n                self.pointer -= 1\n                if self.pointer < 0:\n                    self.program.extend(0 for _ in range(self.pointer, 0))\n                    self.pointer = 0\n            elif code == '+':\n                self.memory[self.pointer] += 1\n            elif code == '-':\n                self.memory[self.pointer] -= 1\n\n        elif self.command_index == 8:\n            code = self.program[self.pointer]\n            if code == '>':\n                self.pointer += 1\n                if self.pointer >= len(self.program):"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin: a string containing the arithmetic expression to be evaluated.\n    Returns:\n        A string containing a Brainfuck program that, when executed, will print the result of evaluating this expression.\n    \"\"\"\n    def eval_in_memory(memory, inputs, ops):\n        stack = []\n        pos = 0\n        for elem in inputs:\n            memory[pos] = elem\n            pos += 1\n        for i in range(len(ops)):\n            op = ops[i]\n            if op == '+':\n                stack.append(stack.pop() + stack.pop())\n            elif op == '-':\n                stack.append(-stack.pop() + stack.pop())\n            else:\n                raise Exception()\n        return stack[0]\n\n    # Initialize memory\n    memory = [0] * 10000\n    inputs = []\n    ops = []\n    stack = []\n\n    # Evaluate the expression\n    pos = 0\n    for c in stdin:\n        if c.isdigit():\n            memory[pos] = int(c)\n            pos += 1\n        elif c == '<':\n            while stack and stack[-1]!= '[':\n                ops.append(stack.pop())\n            stack.append('<')\n        elif c == '>':\n            while stack and stack[-1]!= '[':\n                ops.append(stack.pop())\n            stack.append('>')\n        elif c == '[':\n            stack.append('[')\n        elif c == ']':\n            while stack and stack[-1]!= '[':\n                ops.append(stack.pop())\n            stack.pop()\n        elif c == '-':\n            while stack and stack[-1]!= '[':\n                ops.append(stack.pop())\n            stack.append('-')\n        else:\n            raise Exception()\n    while stack:\n        ops.append(stack.pop())\n    return ''.join(map(str, eval_in_memory(memory, inputs, ops)))\n\"\"\"\nimport re\nimport string\nimport sys\n\n\nclass Brainfuck:\n    def __init__(self):\n        self.program = []\n        self.program_pointer = 0\n\n    def convert_input(self, user_input):\n        if re.match(r'^[+-]?[0-9]+(\\.[0-9]*)$', user_input) is not None:\n            return int(user_input)\n        else:\n            try:\n                return int(string.atoi(user_input, 0))\n            except:\n                raise ValueError\n\n    def __get_value(self, value, mode):\n        return value if mode == '0' else self.program[value]\n\n    def __get_value_in_range(self, value, mode):\n        if mode == '0':\n            return value\n        elif mode == '1':\n            return self.program[value]\n        else:\n            raise ValueError\n\n    def __set_value(self, value, mode):\n        if mode == '0':\n            self.program[value] = value\n        elif mode == '1':\n            raise ValueError\n        else:\n            raise ValueError\n\n    def __set_value_in_range(self, value, mode):\n        if mode == '0':\n            raise ValueError\n        elif mode == '1':\n            raise ValueError\n        else:\n            self.program[value] = value\n\n    def __execute_opcode(self):\n        opcode = self.program[self.program_pointer]\n        if opcode == '>':\n            self.program_pointer += 1\n        elif opcode == '<':\n            self.program_pointer -= 1\n        elif opcode == '+':\n            self.program[self.program_pointer] += 1\n        elif opcode == '-':\n            self.program[self.program_pointer] -= 1\n        elif opcode == '[':\n            self.program_pointer += 1\n            if self.program[self.program_pointer]!= 0:\n                self.program_pointer -= 1\n                self.program_pointer += 1\n                while self.program[self.program_pointer]!= 0:\n                    self.program_pointer += 1\n            else:\n                self.program_pointer += 1\n        elif opcode == ']':\n            self.program_pointer += 1\n            if self.program[self.program_pointer]!= 0:\n                self.program_pointer -= 1\n                self.program_pointer += 1\n            else:\n                self.program_pointer += 1\n\n    def __execute_in_memory(self, value):\n        opcode = self.program[self.program_pointer]\n        self.program[self.program_pointer] = value\n        if opcode == '>':\n            self.program_pointer += 1\n        elif opcode == '<':\n            self.program_pointer -= 1\n        elif opcode == '+':\n            self.program[self.program_pointer] += 1\n        elif opcode == '-':\n            self.program[self.program_pointer] -= 1\n        elif opcode == '[':\n            self.program_pointer += 1\n            if self.program[self.program_pointer]!= 0:\n                self.program_pointer -= 1\n                self.program_pointer += 1\n                while self.program[self.program_pointer]!= 0:\n                    self.program_pointer += 1\n            else:\n                self.program_pointer += 1\n        elif opcode == ']':\n            self.program_pointer += 1\n            if self.program[self.program_pointer]!= 0:\n                self.program_pointer -= 1\n                self.program_pointer += 1\n            else:\n                self.program_pointer += 1\n\n    def __execute_input(self):\n        opcode = self.program[self.program_pointer]\n        if opcode == '>':\n            self.program_pointer += 1\n        elif opcode == '<':\n            self.program_pointer -= 1\n        elif opcode == '+':\n            self.program[self.program_pointer] = self.program[self.program_pointer] + 1\n        elif opcode == '-':\n            self.program[self.program_pointer] = self.program[self.program_pointer] - 1\n        elif opcode == '[' and self.program[self.program_pointer]!= 0:\n            self.program_pointer += 1\n            self.program_pointer += 1\n        elif opcode == ']' and self.program[self.program_pointer]!= 0:\n            self.program_pointer += 1\n            self.program_pointer -= 1\n        elif opcode == '[':\n            self.program_pointer += 1\n        elif opcode == ']':\n            self.program_pointer += 1\n\n    def __execute_output(self):\n        opcode = self.program[self.program_pointer]\n        if opcode == '>"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\nclass Brainfuck:\n\n    @staticmethod\n    def execute(bf: str) -> None:\n        # code = ['<', '-', '>', '[', ']', '+']\n        # code = ['<', '-', '>', '+', '[', ']']\n        code = ['<', '-', '>', '[', ']', '+', '-']\n        MEMORY = [0]*30000\n        # MEMORY = [0]*100000\n        EXIT = False\n        i = 0\n        while not EXIT:\n            if i == len(code):\n                EXIT = True\n            else:\n                token = code[i]\n                if token == '<':\n                    MEMORY[MEMORY[i]] = (MEMORY[MEMORY[i]]-1) % 256\n                elif token == '>':\n                    MEMORY[i] = (MEMORY[i]+1) % 256\n                elif token == '-':\n                    MEMORY[MEMORY[i]] = (MEMORY[MEMORY[i]]-1) % 256\n                    MEMORY[i] = (MEMORY[i]-1) % 256\n                elif token == '+':\n                    MEMORY[MEMORY[i]] = (MEMORY[MEMORY[i]]+1) % 256\n                    MEMORY[i] = (MEMORY[i]+1) % 256\n                elif token == '[' and MEMORY[i]!= 0:\n                    i = (i+1) % len(code)\n                elif token == ']' and MEMORY[i] == 0:\n                    i = (i+1) % len(code)\n                elif token == '[' and MEMORY[i]!= 0:\n                    i = (i-1) % len(code)\n                elif token == ']' and MEMORY[i] == 0:\n                    i = (i-1) % len(code)\n                i += 1\n\n        # print(MEMORY)\n        print(''.join(chr(x) for x in MEMORY))\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    data = stdin.strip().split(' ')\n    memory = [0] * 30000\n    pos = 0\n    while pos < len(data):\n        operator = data[pos]\n        if operator == '>':\n            pos += 1\n        elif operator == '<':\n            pos -= 1\n        elif operator == '+':\n            memory[pos] = memory[pos] + int(data[pos + 1])\n            pos += 2\n        elif operator == '-':\n            memory[pos] = memory[pos] - int(data[pos + 1])\n            pos += 2\n        elif operator == '[':\n            if memory[pos] == 0:\n                pos += 1\n                while data[pos]!= ']':\n                    pos += 1\n            else:\n                pos += 1\n        elif operator == ']':\n            if memory[pos]!= 0:\n                pos -= 1\n                while data[pos]!= ']':\n                    pos -= 1\n                pos += 1\n            else:\n                pos += 1\n        elif operator == '.':\n            result += chr(memory[pos])\n            pos += 1\n        else:\n            raise ValueError('Unknown operator')\n    return result"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nFor testing purposes, we will use the first few lines of input data to check your solution.\n\"\"\"\n\nfrom datetime import datetime\nfrom typing import Dict, List, Tuple\n\nfrom common.utilities import timeit\n\n\"\"\"\nHere are some useful functions that are imported from the standard library but are not used in the way we are\nsupposed to use them.\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nfrom collections import deque\nsys.setrecursionlimit(10000)\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return program\n\n\"\"\"\n\n\"\"\"\n40000 memory cells.\nmemory cells store integers from 0 to 255 with unsigned 8-bit wraparound.\nconsole input (, command) is not supported, but it's not needed for this problem.\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nYou can download the source code of the Brainfuck interpreter by the link http://assets.codeforces.com/rounds/784/bf.cpp. We use this code to interpret outputs.\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom typing import Tuple\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nassert(solution(load_input(INPUT_TEST)) == OUTPUT_TEST)\nprint(solution(load_input(INPUT)))\n\"\"\"\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIf you enjoyed this kata, feel free to check it out and try Your runtime beats 43.65% of python3 submissions!\n\n'''\n"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ninput()\nqueries = [int(x) for x in stdin.split()]\n\nfor k in queries:\n    print(str(int(str(k)[k % len(str(k))])))\n"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n'''\n\n'''\nThe only difference between the easy and the hard versions is the maximum value of $k$.\n\nYou are given an infinite sequence of form \"112123123412345$\\dots$\" which consist of blocks of all consecutive positive integers written one after another. The first block consists of all numbers from $1$ to $1$, the second one \u2014 from $1$ to $2$, the third one \u2014 from $1$ to $3$, $\\dots$, the $i$-th block consists of all numbers from $1$ to $i$. \n\nSo the first $56$ elements of the sequence are \"11212312341234512345612345671234567812345678912345678910\". Elements of the sequence are numbered from one. For example, the $1$-st element of the sequence is $1$, the $3$-rd element of the sequence is $2$, the $20$-th element of the sequence is $5$, the $38$-th element is $2$, the $56$-th element of the sequence is $0$.\n\nYour task is to answer $q$ independent queries. In the $i$-th query you are given one integer $k_i$. Calculate the digit at the position $k_i$ of the sequence.\n\n-----Input-----\n\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 500$) \u2014 the number of queries.\n\nThe $i$-th of the following $q$ lines contains one integer $k_i$ ($1 \\le k_i \\le 10^{18})$ \u2014 the description of the corresponding query.\n\n\n-----Output-----\n\nPrint $q$ lines. In the $i$-th line print one digit $x_i$ ($0 \\le x_i \\le 9)$ \u2014 the answer to the query $i$, i.e. $x_i$ should be equal to the element at the position $k_i$ of the sequence.\n\n\n-----Examples-----\nInput\n5\n1\n3\n20\n38\n56\n\nOutput\n1\n2\n5\n2\n0\n\nInput\n4\n2132\n506\n999999999999999999\n1000000000000000000\n\nOutput\n8\n2\n4\n1\n\n'''"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    for i in range(int(stdin.readline().strip())):\n        k = int(stdin.readline().strip())\n        result += str(k % 10)\n    return result\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.count('\\n') + 1\n    s = stdin.split('\\n')\n    k = [int(x) for x in stdin.split('\\n')]\n    \n    for i in range(len(k)):\n        k[i] = k[i] % 10\n        \n    return \"\".join([str(x) for x in k])\n\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Hello World\")"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    answers = []\n    for _ in range(n):\n        k = int(stdin.readline())\n        k %= 56\n        if k == 0:\n            k = 56\n        answers.append(str(k))\n    return ''.join(answers)\n\n\"\"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(1, n+1):\n        if has_seven(i) or has_five(i) or has_three(i):\n            result += 1\n    return str(result)\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len([i for i in range(int(stdin.strip()), int(stdin.strip()) + 1) if len(set(str(i))) == 3 and len(set(\"\".join(str(i)))) == 1]))"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = 0\n    for number in range(1, n + 1):\n        if number_is_seven_five_three(number):\n            result += 1\n    return str(result)\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    res = 0\n    while i <= n:\n        if is_seven_five_three(i):\n            res += 1\n        i += 1\n    return str(res)\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 7 == 0 or i % 5 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N - 1)\n"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for n in range(1, int(stdin) + 1):\n        str_n = str(n)\n        if \"7\" in str_n or \"5\" in str_n or \"3\" in str_n:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(1 for i in range(1, n + 1) if i < 100 and i % 10 == 7 and i % 100 // 10 % 10 == 5 and i % 1000 // 100 // 10 % 10 == 3))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        numbers = [int(x) for x in str(i)]\n        if (numbers.count(7) > 0 and numbers.count(5) > 0 and numbers.count(3) > 0):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')[0]\n    return '0' if a.count('0') > a.count('1') else '1'"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    '0'\n    >>> solution('0')\n    '0'\n    >>> solution('0' * 10)\n    '0' * 10\n    >>> solution('01011101')\n    '10'\n    >>> solution
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\""
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(len(stdin))"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    S = stdin\n    # The first tile must be black\n    if S[0] == '0':\n        return '1'\n    # The first tile must be white\n    if S[0] == '1':\n        return '0'\n    # The first tile is black\n    if S[0] == '0':\n        return '0'\n    # We assume that the black tiles are all adjacent\n    return '0'"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    count = 0\n    for i in range(0, len(s) - 1, 2):\n        if s[i] == s[i + 1]:\n            s = s[:i] + '1' + s[i + 2:]\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    left = s[:n // 2]\n    right = s[n // 2 + 1:]\n    left_w = sum(left.count(str(1)) - left.count(str(0)))\n    right_w = sum(right.count(str(1)) - right.count(str(0)))\n    print(min(left_w, right_w))"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    N = len(s)\n    c = 0\n    for i in range(N - 1):\n        if s[i]!= s[i + 1]:\n            c += 1\n    return c\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n\n    A = [int(x) for x in stdin.readline().strip().split()]\n\n    evens = [x for x in A if x % 2 == 0]\n    if len(evens) == 0:\n        return \"DENIED\"\n    else:\n        return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(stdin.readline()) for _ in range(n)]\n    \n    for num in nums:\n        if not (num % 3 == 0 or num % 5 == 0):\n            return 'DENIED'\n    return 'APPROVED'"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    if not N:\n        return \"\"\n    N = int(N)\n    A = [int(a) for a in stdin.readline().strip().split()]\n    res = \"APPROVED\"\n    for a in A:\n        if a % 2 == 0:\n            if (a % 3 == 0) or (a % 5 == 0):\n                continue\n            res = \"DENIED\"\n    return res"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(s) for s in stdin.readline().strip().split()]\n\n    if all([a % 3 == 0 or a % 5 == 0 for a in A]):\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(a) for a in stdin.readline().strip().split()]\n\n    res = \"DENIED\"\n\n    if all(a % 3 == 0 or a % 5 == 0 for a in A):\n        res = \"APPROVED\"\n\n    return res"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    A = stdin.readline().strip().split()\n    ap = \"APPROVED\"\n    da = \"DENIED\"\n    for x in A:\n        if int(x) % 2 == 0:\n            if int(x) % 3 == 0 or int(x) % 5 == 0:\n                pass\n            else:\n                ap = da\n                break\n    print(ap)"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lst = [int(x) for x in stdin.readline().strip().split()]\n    count = 0\n    for number in lst:\n        if (number % 2 == 0) and (number % 3 == 0) or (number % 5 == 0):\n            count += 1\n    if count == n:\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    for x in arr:\n        if x % 2 == 0:\n            if x % 3 == 0 or x % 5 == 0:\n                print(\"APPROVED\")\n            else:\n                print(\"DENIED\")\n        else:\n            print(\"DENIED\")"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [int(stdin) for stdin in stdin.split()]\n    if all(num % 3 == 0 or num % 5 == 0 for num in numbers):\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if is_playable(stdin) else \"No\")\n\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    if stdin.count(\"L\") % 2!= 0:\n        result = \"No\"\n    else:\n        result = \"Yes\"\n    print(result)"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    if len(line) % 2 == 0:\n        return \"No\"\n    pos = [0] * len(line)\n    for i in range(len(line)):\n        if i % 2 == 0:\n            if line[i] == \"L\":\n                pos[i] = 1\n            elif line[i] == \"R\":\n                pos[i] = 3\n            elif line[i] == \"U\":\n                pos[i] = 5\n            elif line[i] == \"D\":\n                pos[i] = 7\n        else:\n            if line[i] == \"L\":\n                pos[i] = 3\n            elif line[i] == \"R\":\n                pos[i] = 1\n            elif line[i] == \"U\":\n                pos[i] = 7\n            elif line[i] == \"D\":\n                pos[i] = 5\n    if pos[-1] == 1:\n        pos[-1] = 3\n    elif pos[-1] == 3:\n        pos[-1] = 1\n    elif pos[-1] == 5:\n        pos[-1] = 7\n    elif pos[-1] == 7:\n        pos[-1] = 5\n    if pos == [1, 3, 5, 7]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if 'LRDU' in stdin and 'RLUD' not in stdin else 'No'\n\nassert solution('LRDU') == 'Yes'\nassert solution('RLUD') == 'No'\nassert solution('RUDLDR') == 'Yes'\nassert solution('RUDDLD') == 'No'\nassert solution('RDDL') == 'Yes'\nassert solution('UD') == 'Yes'\nassert solution('RDLU') == 'No'\nassert solution('UDDLD') == 'No'\nassert solution('RLUDL') == 'Yes'\nassert solution('RLU') == 'No'\nassert solution('RDU') == 'Yes'\nassert solution('RUDD') == 'No'\nassert solution('UD') == 'Yes'\nassert solution('RDD') == 'Yes'\nassert solution('LD') == 'Yes'\nassert solution('LRD') == 'No'\nassert solution('RD') == 'Yes'\nassert solution
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == s[-1]:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == s[-1]:\n        return \"Yes\" if s[0] in \"LRUD\" else \"No\"\n    if s[0] == s[-2]:\n        return \"Yes\" if s[-1] == \"D\" else \"No\"\n    if s[-1] == s[0]:\n        return \"Yes\" if s[-1] == \"U\" else \"No\"\n    if s[-1] == s[-2]:\n        return \"Yes\" if s[0] == \"L\" else \"No\"\n    return \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.replace('L', 'D').replace('R', 'U').replace('U', 'R').replace('D', 'L') == stdin else 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()\n    print(n)\n\nsolution(\"1\\n3\\n2\")\n\"\"\"\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\n\nfrom sys import stdin, stdout\nfrom math import ceil\n\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, n = [int(x) for x in stdin.split(' ')]\n    s = 0\n    while n > 0:\n        s += 1\n        n -= e\n        e -= d\n        d -= c\n        c -= b\n        b -= a\n        a = max(0, a - 1)\n    return str(s)\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A, B, C, D, E = map(int, stdin.readline().strip().split(' '))\n    print(abs((N*E - (N-1)*C) / (N-1))+N*D)\nsolution(stdin)\n"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '''\n    '''\n\nfrom itertools import chain, combinations\nn = int(input())\nA, B, C, D, E = map(int, input().split())\narr = [i for i in range(1, n+1)]\nperm = list(combinations(arr, n))\nmin_time = float('inf')\nfor i in perm:\n    current_time = 0\n    for j in i:\n        current_time += j - 1\n    if current_time == n:\n        min_time = min(min_time, A+B+C+D+E)\nprint(min_time)\n"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    t = A * N + B * (N-1) + C * (N-2) + D * (N-3) + E * (N-4)\n    return str(t)"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_naive(int(stdin)))\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        return \"9\"\n    elif n == 1:\n        return \"0\"\n    else:\n        return \"9\" * (n // 2) + \"0\" * (n % 2)"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.strip()) * (10 ** 9 + 7) // 2)"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return str(9 * (9 - n) % (10 ** 9 + 7))"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                if 0 <= i <= 9 and i!= j and i!= k and j!= k:\n                    if (i + j + k) % 3 == 0 and i % 3 == 0 and j % 3 == 0 and k % 3 == 0:\n                        result += 1\n    return str(result)\n\n\nprint(solution(\"\"))\n"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    N = int(N)\n    return str(N ** 2)"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(2 ** n - 2)"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    mod = 10**9 + 7\n    print((N - 1) * (N - 2) // 2) % mod\n    return ''"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()\n    return str(pow(9, 9, 10**9) - pow(0, 9, 10**9) - 1)"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    return next(i for i in range(stdin, stdin+1) if isPrime(i))\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def isPrime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    result = 0\n    for i in range(int(stdin)):\n        if isPrime(i):\n            result = i\n    print(result)\n\nsolution(input())\n"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(next_prime_number(int(stdin)))\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    if n < 2:\n        return \"\"\n    primes = [2]\n    max = n//2\n    i = 3\n    while i < max:\n        if isPrime(i):\n            primes.append(i)\n            if i*i > n:\n                break\n            max = n//i\n        i += 2\n    return str(primes[-1])\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    n = x + 1\n    if n == 1:\n        return 1\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]\n    \n    while n!= primes[-1]:\n        if n in primes:\n            return n\n        n += 1"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimum prime number greater than or equal to X.\n    \"\"\"\n    x = int(stdin)\n    if x <= 2:\n        return 2\n    for i in range(x - 2, 1, -1):\n        if is_prime(i):\n            return i\n    return 1\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        n = int(stdin)\n        if n < 1:\n            raise ValueError(\"must be at least 1\")\n        return str(find_min_prime(n))\n    except ValueError as e:\n        print(e)\n\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(x):\n        if isPrime(i):\n            return i\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    else:\n        # \u7528\u7d20\u6570\u6570\u5217\u8868\uff0c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\n        p = [2]\n        i = 3\n        while p[-1] <= n:\n            while i <= n:\n                if i % p[-1] == 0:\n                    break\n                i += 2\n            else:\n                p.append(i)\n            i += 2\n        return str(p[-1])\nprint(solution(input()))"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum prime number greater than or equal to the input.\n    '''\n    x = int(stdin)\n    if x < 2:\n        return '-1'\n    return str(next_prime(x))\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    #remove the end two digits\n    nums = nums[:-2]\n    cur = 1\n    nums.sort()\n    for i in range(0,n-1,2):\n        if nums[i] == nums[i+1]:\n            cur += 1\n    print(cur)"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    v = list(map(int, stdin.split(\"\\n\")[1].split()))\n    count = 1\n    for i in range(n):\n        if v[i]!= v[i+2]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    v = list(map(int, stdin.readline().split()))\n    counter = 0\n    for i in range(n - 1):\n        if v[i] == v[i + 1]:\n            counter += 1\n    return str(counter + 1)"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_elem = int(stdin.strip())\n    v = list(map(int, stdin.strip().split(' ')))\n    v_1 = v[:]\n    v_2 = v[:]\n    v_3 = v[:]\n    n = 0\n    for i in range(num_elem):\n        if v[i] == v_1[i + 2]:\n            v_1[i] = v_2[i + 2]\n            v_2[i] = v_3[i + 2]\n            v_3[i] = v_1[i + 2]\n            n += 1\n    return n"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n3 1 3 2\")\n    '1'\n    >>> solution(\"4\\n3 1 3 2\\n2 2\")\n    '0'\n    >>> solution(\"4\\n3 1 3 2\\n1 2\")\n    '1'\n    >>> solution(\"4\\n3 1 3 2\\n1 1\")\n    '0'\n    >>> solution(\"4\\n3 1 3 2\\n1 1 2\")\n    '2'\n    >>> solution(\"4\\n3 1 3 2\\n1 1 3\")\n    '2'\n    \"\"\"\n    n = stdin.strip()\n    n = int(n)\n\n    v = stdin.strip().split(' ')\n    v = [int(x) for x in v]\n\n    v_1 = v[:n // 2]\n    v_2 = v[n // 2:]\n\n    t = set(v_1)\n    t.update(v_2)\n    v = list(t)\n\n    count = 0\n\n    for i in range(len(v) - 1):\n        if v[i]!= v[i + 1]:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    v = list(map(int, stdin.splitlines()[1].split()))\n    \n    count = 0\n    for i in range(1, n - 1):\n        if v[i]!= v[i + 1]:\n            v[i] = v[i - 1]\n            count += 1\n    \n    return count\n\nprint(solution(input()))\n"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sequence = list(map(int, stdin.readline().split()))\n\n    def count_replaced(sequence: List[int]) -> int:\n        prev = None\n        count = 0\n        for x in sequence:\n            if x!= prev:\n                prev = x\n                count += 1\n        return count\n\n    return str(min(count_replaced(sequence[:n - 1]), count_replaced(sequence[1:n])))\n\nassert(solution('') == '')\nassert(solution('1') == '1')\nassert(solution('4') == '2')\nassert(solution('3 1 3 2') == '1')\nassert(solution('3 1 3 2 3') == '1')\nassert(solution('1 1 1 1 1') == '1')\nassert(solution('5 1 1 1 1 1') == '4')\nassert(solution('6 1 1 1 1 1 1') == '5')\n"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    # Sort the array\n    a.sort()\n    # Get the number of pairs\n    pairs = 0\n    for i in range(n-2):\n        pairs += a[i] == a[i+2]\n    print(pairs)"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return '0'\n    v = list(map(int, stdin.split()))\n    if len(v) % 2!= 0:\n        return '-1'\n    v.sort()\n    left = 0\n    right = len(v) - 1\n    changed = 0\n    while left!= right:\n        if v[left]!= v[right]:\n            changed += 1\n        left += 1\n        right -= 1\n    return str(changed)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from functools import reduce\n    N, A, B, C = (int(n) for n in stdin.split(\" \"))\n    if any((\n        N < 3,\n        A > 1000,\n        B > 1000,\n        C > 1000,\n        A + B > 1000,\n        A + C > 1000,\n        B + C > 1000,\n    )):\n        raise ValueError(\"N, A, B, C should be between 3 and 1000\")\n\n    lst = [int(n) for n in stdin.split(\" \")]\n    lst.sort()\n    lst.reverse()\n    total_cost = 0\n    current_cost = 0\n    for i in range(N):\n        current_cost = reduce(lambda x, y: x + y, lst[i:i + 3])\n        total_cost += min(current_cost, 10)\n        lst[i] -= 1\n        lst[i + 1] -= 1\n\n    return str(total_cost)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = stdin.split()\n    N, A, B, C = int(N), int(A), int(B), int(C)\n    lst = [int(x) for x in stdin.split()]\n    \n    total = sum(lst)\n    used = min(total - A, total - B, total - C)\n    \n    return str(used)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    l = map(int, stdin.split())\n    return str(min(\n        n * (c * (c - 1)) / 2 + a,\n        n * a + (n - 1) * b + (n - 1) * (n - 2) * c,\n        n * (a + b) + (n - 1) * c,\n    ))"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, C = [int(x) for x in stdin.split()]\n    N = int(stdin)\n\n    bambos = []\n    for i in range(N):\n        bambos.append(int(stdin))\n\n    def mp_cost(bamboos):\n        return sum(bambos)\n\n    def extension(bamboos, l):\n        new_bamboo = bamboos[:]\n        new_bamboo[l] += 1\n        return mp_cost(new_bamboo), new_bamboo\n\n    def composition(bamboos, l1, l2):\n        new_bamboo = bamboos[:]\n        new_bamboo[l1 + l2] = bamboos[l1] + bamboos[l2]\n        return mp_cost(new_bamboo), new_bamboo\n\n    def shortening(bamboos, l):\n        new_bamboo = bamboos[:]\n        new_bamboo[l] -= 1\n        return mp_cost(new_bamboo), new_bamboo\n\n    def main():\n        bamboos = bambos[:]\n        bamboos.sort(reverse=True)\n\n        def _main():\n            result = 0\n            for length in [A, B, C]:\n                _, bamboos = extension(bamboos, length - 1)\n                _, bamboos = shortening(bamboos, length - 2)\n                _, bamboos = composition(bamboos, length - 2, length - 1)\n                result += mp_cost(bamboos)\n            return result\n\n        l = len(bamboos) - 1\n        while l >= 0:\n            if l < 2:\n                break\n\n            if bamboos[l] == bamboos[l - 2] + bamboos[l - 1]:\n                bamboos = bamboos[:l - 2] + [bamboos[l - 2] + bamboos[l - 1] + bamboos[l]]\n                l -= 1\n\n            if l < 3:\n                break\n\n            if bamboos[l] == bamboos[l - 3] + bamboos[l - 2] + bamboos[l - 1]:\n                bamboos = bamboos[:l - 3] + [bamboos[l - 3] + bamboos[l - 2] + bamboos[l - 1] + bamboos[l]]\n                l -= 2\n\n        return _main()\n\n    return str(main())"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = [int(x) for x in stdin.strip().split(' ')]\n    l = list(map(int, stdin.strip().split(' ')))\n    l.sort()\n    max_cost = None\n    for i in range(0, len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                cost = 10 + l[i] + l[j] + l[k]\n                if cost > max_cost:\n                    max_cost = cost\n    return max_cost"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N, A, B, C = [int(n) for n in stdin[0].split()]\n    l = [int(n) for n in stdin[1:]]\n    l.sort()\n    cost = sum(l)\n    for i in range(N):\n        if l[i] == A:\n            cost += 10\n        if l[i] == B:\n            cost += 10\n    return str(cost)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    n = int(stdin)\n    mp = 0\n    while n >= B:\n        mp += 10\n        n -= 1\n    while n >= A:\n        mp += 1\n        n -= 1\n    return str(mp)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"\"\n    l_nums = [int(n) for n in stdin.split(\" \")]\n    N, A, B, C = l_nums\n    MAGIC_COST = 10\n    mp = 0\n    for i in range(N):\n        if i == 0:\n            mp += MAGIC_COST\n            continue\n        mp += MAGIC_COST\n        mp += MAGIC_COST\n        if i == 1:\n            mp += MAGIC_COST\n        elif i == 2:\n            mp += MAGIC_COST\n    return str(mp)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.strip().split())\n    magic = [0] * (n + 1)\n    magic[1] = 1\n    for i in range(2, n + 1):\n        magic[i] = magic[i - 1] + 1\n        if i % 2 == 0:\n            magic[i] = min(magic[i], magic[i // 2] + 1)\n        if i % 3 == 0:\n            magic[i] = min(magic[i], magic[i // 3] + 1)\n        if i % 5 == 0:\n            magic[i] = min(magic[i], magic[i // 5] + 1)\n    return str(magic[n] - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    for i in range(n):\n        s = chr(ord(s[0]) + (n % 26)) + s[1:]\n    return s"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    result = ''\n    for c in s:\n        result += chr(ord(c) + int(stdin))\n    return result"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    result = []\n    for i in range(0, len(s)):\n        asci = ord(s[i])\n        if (asci > 64 and asci < 91) or (asci > 96 and asci < 123):\n            asci = asci + n\n            if asci > 90:\n                asci = asci - 26\n        elif asci == 64:\n            asci = asci + n\n        else:\n            asci = asci + n\n        result.append(chr(asci))\n    return \"\".join(result)\nprint(solution(stdin.readline().split()))\n"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string S and a non-negative integer N,\n    shifts each character of S by N in alphabetical order\n    and returns the resulting string.\n\n    Examples:\n    solution('XYZ', 0) -> 'XYZ'\n    solution('XYZ', 1) -> 'YZA'\n    solution('XYZ', 2) -> 'ZAB'\n    \"\"\"\n    # create the ascii lookup table\n    ascii_lookup = {\n        'A': 'Z',\n        'B': 'Y',\n        'C': 'X',\n        'D': 'A',\n        'E': 'B',\n        'F': 'C',\n        'G': 'D',\n        'H': 'E',\n        'I': 'F',\n        'J': 'G',\n        'K': 'H',\n        'L': 'I',\n        'M': 'J',\n        'N': 'K',\n        'O': 'L',\n        'P': 'M',\n        'Q': 'N',\n        'R': 'O',\n        'S': 'P',\n        'T': 'Q',\n        'U': 'R',\n        'V': 'S',\n        'W': 'T',\n        'X': 'U',\n        'Y': 'V',\n        'Z': 'W',\n    }\n    \n    # The shift by n will be the ascii value + n (i.e. n = 1 -> A -> B)\n    # then we can use a lookup to look up the ascii value for the shifted character\n    # we use the in operator to check if the key already exists in the lookup\n    # ascii values are in order in alphabetical order\n    shifted_str = \"\"\n    for i in range(len(stdin)):\n        shifted_str += ascii_lookup.get(stdin[i], stdin[i])\n    return shifted_str"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    return \"\".join(s[n:] + s[:n])\n\nassert(solution(input()) == input())"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    num = int(stdin)\n    char_list = [chr(i) for i in range(65, 91)]\n    for i in char_list:\n        if i == 'Z':\n            new_index = (i + num) % 26\n        else:\n            new_index = (i + num) % 26\n        print(char_list[new_index], end=\"\")\n    return None\n"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: str = stdin.strip()\n    b: str = \"\"\n    for i in range(len(a)):\n        c = ord(a[i]) + n\n        if c > ord('Z'):\n            b += chr(c - 26)\n        else:\n            b += chr(c)\n    return b\n"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    return ''.join(sorted(s, key=lambda x: (ord(x) - ord('A') + n) % 26))"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = [int(stdin.readline()) for _ in range(2 * n)]\n    a = [i for i in range(2, max(b) + 1)]\n\n    return''.join(str(i) for i in a)"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    p = primes(n + 2)\n    p = [2, 3, 5] + list(sorted(p))\n    result = []\n    for i in range(n):\n        index = p.index(a[i])\n        if index > 0:\n            result.append(p[index - 1])\n        else:\n            result.append(a[i])\n    return''.join(map(str, result))\n\nassert solution('''1\n2750131 199999''') == '199999'\nassert solution('''3\n3 5 2 3 2 4''') == '3 4 2'\nassert solution('''1\n3 6''') == '6'\nassert solution('''3\n1 2 2''') == '1 2'\nassert solution('''3\n1 4 7''') == '1 2 4'\nassert solution('''3\n1 4 5''') == '1 2 4'\nassert solution('''3\n2 7 2''') == '2 4 7'\nassert solution('''3\n2 3 2''') == '2 3'\nassert solution('''3\n2 3 5''') == '2 3'\nassert solution('''3\n2 3 4''') == '2 3'\nassert solution('''3\n2 3 5''') == '2 3'\nassert solution('''3\n3 4 7''') == '3 4 7'\nassert solution('''3\n3 4 4''') == '3 4'\nassert solution('''3\n3 4 5''') == '3 4'\nassert solution('''3\n3 5 2''') == '3 5'\nassert solution('''3\n3 5 2 3''') == '3 4'\nassert solution('''3\n3 5 2 3 2''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29''') == '3 4'\nassert solution('''3\n3 5 2 3 2 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30''') == '3 4'\nassert solution('''3\n3 5 2 3"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    prime = get_prime(arr)\n    b = get_b(arr, prime)\n    return''.join([str(x) for x in b])\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = [int(x) for x in stdin.readline().strip().split(' ')]\n    a = [2] + [i for i in range(3, len(b) + 1) if not _is_prime(i)]\n    return''.join([str(x) for x in shuf(a, b)])\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [int(x) for x in stdin.readline().split()]\n    i = 0\n    while i < len(a) - 1:\n        k = 0\n        for j in range(2, a[i]):\n            if a[i] % j == 0:\n                k = j\n                break\n        if k == 0:\n            a.append(max(a) + 2)\n        else:\n            a.append(a[i] // k)\n        i += 1\n    # print(a)\n    n = len(a)\n    a = [a[n - 1 - i] for i in range(n)]\n    # print(a)\n    for i in range(n):\n        for j in range(2, min(b[i], max(a)) + 1):\n            if j % a[i] == 0:\n                break\n        if j == b[i]:\n            b[i] = j\n            a[i] = -1\n    # print(a)\n    # print(b)\n    return''.join(map(str, a))"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_primes(n: int) -> List[int]:\n        primes = [2, 3, 5]\n        for i in range(6, n + 1):\n            # If it's not a prime, the only divisor is 1\n            if i > primes[-1] or all(i % p!= 0 for p in primes):\n                primes.append(i)\n        return primes\n\n    def get_primes_by_sort(n: int) -> List[int]:\n        primes = [2, 3, 5]\n        for i in range(6, n + 1):\n            # If it's not a prime, the only divisor is 1\n            if i > primes[-1]:\n                primes.append(i)\n            else:\n                # Remove all numbers divisible by primes[-1]\n                idx = 0\n                while idx < len(primes):\n                    if i % primes[idx] == 0:\n                        break\n                    idx += 1\n                primes = primes[:idx] + primes[idx + 1:]\n        return primes\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    if all(num < 2 * 10 ** 5 for num in a):\n        primes = get_primes_by_sort(2 * 10 ** 5)\n    else:\n        primes = get_primes(2 * 10 ** 5)\n    idx = 0\n    for num in b:\n        if num in primes:\n            a.insert(idx, num)\n            idx += 1\n        elif num < 2 * 10 ** 5:\n            a.insert(idx, primes[-1])\n            idx += 1\n        else:\n            a.insert(idx, primes[0])\n            idx += 1\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.strip().split()]\n    b = [int(x) for x in stdin.strip().split()]\n    b_copy = b[:]\n    a_copy = a[:]\n    for i in range(2, n+1):\n        if is_prime(i):\n            b.append(i)\n            b.sort()\n            a_copy.sort()\n            a = a_copy[:]\n        else:\n            b.append(max(a))\n            a.remove(max(a))\n            a.sort()\n            a_copy.sort()\n            a = a_copy[:]\n    return''.join(str(x) for x in a)\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    primes = [2, 3]\n    for i in range(2, int(math.sqrt(max(b)) + 1)):\n        if all(i % j == 0 for j in primes):\n            primes.append(i)\n    b = [i for i in b if i not in primes]\n    s = sorted(b)\n    a = [2]\n    while len(a) < n:\n        for i in primes:\n            if i >= s[0]:\n                break\n            if s[-1] % i == 0:\n                s.append(i)\n        a.append(s[0])\n        s = s[1:]\n    return''.join(map(str, a))\n\nassert(solution('''3\n3 5 2 3 2 4''') == '3 4 2 ')\nassert(solution('''1\n2750131 199999''') == '199999 ')\nassert(solution('''1\n3 6''') == '6 ')\nprint(solution('''3\n3 5 2 3 2 4'''))\nprint(solution('''1\n2750131 199999'''))\nprint(solution('''1\n3 6'''))\n'''\n"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a = a[:n]\n    b = list(map(int, stdin.readline().strip().split()))\n    b = [a[i-1] for i in b]\n    b.sort()\n    c = [2]\n    for i in b:\n        if i in c:\n            c.append(i)\n            continue\n        c.append(i)\n        a = shuffle(a)\n        a.sort()\n        c = [2]\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    a = b[:2*n]\n    b = b[2*n:]\n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    for i in range(n):\n        if a[i] not in primes:\n            for j in range(len(primes)):\n                if a[i] % primes[j] == 0:\n                    a[i] = primes[j]\n    a.sort()\n    return''.join(map(str, a))\n\nassert(solution('3\\n3 5 2 3 2 4\\n') == '3 4 2')\nassert(solution('1\\n2750131 199999\\n') == '199999')\n"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    positions = []\n    for i in range(n):\n        positions.append(i)\n    positions.sort(key=lambda pos: a[pos], reverse=True)\n    left = 0\n    right = n - 1\n    if k < n:\n        while left < right:\n            if a[left] < k:\n                left += 1\n            else:\n                break\n        if a[left] >= k:\n            if a[right] >= k:\n                while left < right:\n                    if a[right] >= k:\n                        positions[left] = right\n                        left += 1\n                        right -= 1\n                    else:\n                        break\n            else:\n                positions[left] = right\n                left += 1\n                right -= 1\n    else:\n        while left < right:\n            if a[left] >= k:\n                positions[left] = left\n                left += 1\n            else:\n                break\n        if a[left] < k:\n            positions[left] = left\n            left += 1\n    return ''.join([str(1) if i in positions[:n//2] else str(2) for i in range(n)])\n"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution goes here'''\n    pass\n\nimport sys\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    the sequence of teams is as follows:\n    1. the first coach is trying to choose the student with max programming skill\n    2. the second coach is trying to choose the student with max programming skill\n    3. the third coach is trying to choose the student with max programming skill\n    4. the forth coach is trying to choose the student with max programming skill\n    5. the fifth coach is trying to choose the student with max programming skill\n    6. the sixth coach is trying to choose the student with max programming skill\n    7. the seventh coach is trying to choose the student with max programming skill\n    8. the eighth coach is trying to choose the student with max programming skill\n    9. the ninth coach is trying to choose the student with max programming skill\n    10. the tenth coach is trying to choose the student with max programming skill\n\n    the sequence of teams is as follows:\n    1. the first coach is trying to choose the student with max programming skill\n    2. the second coach is trying to choose the student with max programming skill\n    3. the third coach is trying to choose the student with max programming skill\n    4. the forth coach is trying to choose the student with max programming skill\n    5. the fifth coach is trying to choose the student with max programming skill\n    6. the sixth coach is trying to choose the student with max programming skill\n    7. the seventh coach is trying to choose the student with max programming skill\n    8. the eighth coach is trying to choose the student with max programming skill\n    9. the ninth coach is trying to choose the student with max programming skill\n    10. the tenth coach is trying to choose the student with max programming skill\n\n    the sequence of teams is as follows:\n    1. the first coach is trying to choose the student with max programming skill\n    2. the second coach is trying to choose the student with max programming skill\n    3. the third coach is trying to choose the student with max programming skill\n    4. the fourth coach is trying to choose the student with max programming skill\n    5. the fifth coach is trying to choose the student with max programming skill\n    6. the sixth coach is trying to choose the student with max programming skill\n    7. the seventh coach is trying to choose the student with max programming skill\n    8. the eighth coach is trying to choose the student with max programming skill\n    9. the ninth coach is trying to choose the student with max programming skill\n    10. the tenth coach is trying to choose the student with max programming skill\n    \"\"\"\n\n\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    team1 = []\n    team2 = []\n    i = 0\n    while True:\n        if i+1 > n:\n            break\n        curr_max_skill = max(a[:i+1])\n        i_max_skill = a[:i+1].index(curr_max_skill)\n        team1.append(i_max_skill)\n        a[i_max_skill] = 0\n        i += 1\n        if i+1 > n:\n            break\n\n    i = 1\n    while i <= k:\n        if i+1 > n:\n            break\n        curr_max_skill = max(a[-i:])\n        i_max_skill = a[-i:].index(curr_max_skill)\n        team2.append(i_max_skill)\n        a[i_max_skill] = 0\n        i += 1\n        if i+1 > n:\n            break\n\n    return ''.join('1' if x in team1 else '2' for x in range(1, n+1))\n"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    stdin = stdin[stdin.index('\\n')+1:]\n    a = [int(x) for x in stdin.split()]\n    return ''.join('1' if i % 2 else '2' for i in range(n))"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #n, k = map(int, stdin.readline().split())\n    n, k = map(int, stdin.readline().split())\n    a = [int(x) for x in stdin.readline().split()]\n    i = 0\n    nk = k + 1\n    while a:\n        a.sort()\n        if a[0] >= nk:\n            break\n        idx = -1\n        for i in range(1, len(a)):\n            if a[i] >= nk:\n                idx = i\n                break\n        if idx!= -1:\n            a = a[idx:]\n            a.sort()\n        else:\n            a = []\n        nk += k\n    r = [1] * len(a)\n    for i in range(k, len(a), k):\n        r[i] = 2\n    return \"\".join(map(str, r))"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split(' ')]\n    stdin = stdin.split(' ')\n    stdin = [int(s) for s in stdin]\n    pairs = [[] for i in range(n)]\n    for i in range(0, n):\n        if not pairs[i]:\n            pairs[i].append(stdin[i])\n        else:\n            pairs[i].append(stdin[i])\n\n    def find_max_skill(pairs, result, skill_limit):\n        max_skill = 0\n        max_index = 0\n        for i in range(0, len(pairs)):\n            skill = sum(pairs[i])\n            if skill <= skill_limit:\n                if skill > max_skill:\n                    max_skill = skill\n                    max_index = i\n        if not pairs[max_index]:\n            pairs[max_index].append(stdin[max_index])\n        else:\n            pairs[max_index].append(stdin[max_index])\n        return max_index\n\n    def find_nearest(pairs, result, k):\n        max_skill = 0\n        max_index = 0\n        min_diff = 0\n        for i in range(0, len(pairs)):\n            skill = sum(pairs[i])\n            if skill <= max_skill:\n                if skill > max_skill:\n                    max_skill = skill\n                    max_index = i\n            else:\n                diff = abs(max_skill - skill)\n                if diff < min_diff:\n                    min_diff = diff\n                    max_index = i\n        pairs[max_index].append(stdin[max_index])\n        return max_index\n\n    if n < 2 * 10 ** 5:\n        while k > 0:\n            index = find_max_skill(pairs, [], k)\n            k -= pairs[index][1]\n            pairs[index] = []\n    else:\n        while k > 0:\n            index = find_nearest(pairs, [], k)\n            k -= pairs[index][1]\n            pairs[index] = []\n    count = 0\n    for team in pairs:\n        if team:\n            count += 1\n    return str(count)\n\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution1(self):\n        self.assertEqual(solution(stdin='5 2'), '11111')\n\n    def test_solution2(self):\n        self.assertEqual(solution(stdin='5 1'), '22111')\n\n    def test_solution3(self):\n        self.assertEqual(solution(stdin='7 1'), '1121122')\n\n    def test_solution4(self):\n        self.assertEqual(solution(stdin='7 2'), '111122')\n\n    def test_solution5(self):\n        self.assertEqual(solution(stdin='5 1'), '22111')\n\n    def test_solution6(self):\n        self.assertEqual(solution(stdin='5 2'), '11111')\n\n    def test_solution7(self):\n        self.assertEqual(solution(stdin='7 1'), '1121122')\n\n    def test_solution8(self):\n        self.assertEqual(solution(stdin='7 2'), '111122')\n\n    def test_solution9(self):\n        self.assertEqual(solution(stdin='5 1'), '22111')\n\n    def test_solution10(self):\n        self.assertEqual(solution(stdin='5 2'), '11111')\n\n    def test_solution11(self):\n        self.assertEqual(solution(stdin='7 1'), '1121122')\n\n    def test_solution12(self):\n        self.assertEqual(solution(stdin='7 2'), '111122')\n\n    def test_solution13(self):\n        self.assertEqual(solution(stdin='5 1'), '22111')\n\n    def test_solution14(self):\n        self.assertEqual(solution(stdin='5 2'), '11111')\n\n    def test_solution15(self):\n        self.assertEqual(solution(stdin='7 1'), '1121122')\n\n    def test_solution16(self):\n        self.assertEqual(solution(stdin='7 2'), '111122')\n"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nassert(solution(input) == \"11111\")\nassert(solution(input2) == \"22111\")\nassert(solution(input3) == \"1121122\")\n"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Implementation of the algorithm\n    pass\n\n\n\n\"\"\"\n\nimport sys\nfrom itertools import combinations, chain\n\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    skill_by_student = [int(x) for x in stdin.split()]\n\n    team_1 = []\n    team_2 = []\n    # Students sorted by skill\n    skill_by_student = sorted(skill_by_student, key=lambda x: x)\n\n    for i, student in enumerate(skill_by_student):\n        # Get closest left and right student\n        if len(team_1) < K:\n            closest_left = team_1[0] if len(team_1) else -1\n            closest_right = team_2[len(team_2) - 1] if len(team_2) else -1\n            closest_left_dist = abs(closest_left - i) if closest_left!= -1 else float('inf')\n            closest_right_dist = abs(closest_right - i) if closest_right!= -1 else float('inf')\n\n            for j in range(len(team_1), K):\n                new_dist_left = abs(j - i)\n                if new_dist_left < closest_left_dist:\n                    closest_left_dist = new_dist_left\n                    closest_left = j\n\n            for j in range(0, len(team_2)):\n                new_dist_right = abs(j - i)\n                if new_dist_right < closest_right_dist:\n                    closest_right_dist = new_dist_right\n                    closest_right = j\n\n            if closest_left_dist < closest_right_dist:\n                team_1.append(i)\n            else:\n                team_2.append(i)\n        else:\n            team_2.append(i)\n\n    return ''.join('1' if i in team_1 else '2' for i in range(N))\n"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    modulo = 998244353\n\n    count = [1] * n\n\n    for i in range(n):\n        for j in range(i):\n            if a[i] == a[j] and (i - j) % 2 == 0:\n                count[i] = (count[i] + count[j]) % modulo\n\n    return str(count[-1])\n\nassert(solution('''5\n1 2 1 2 3''')) == '2'\nassert(solution('''2\n100 1''')) == '2'\nassert(solution('''4\n1 3 3 7''')) == '4'\n"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    #print(a)\n    m = len(a)\n    mono = 0\n    \n    for i in range(m - 1):\n        if a[i] + 1 == a[i + 1]:\n            mono += 1\n    \n    return mono"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    s = set()\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                if a[i] - a[j] == 1:\n                    count += 1\n                    s.add(count)\n                elif a[i] - a[j] > 1:\n                    count += 2\n                    s.add(count)\n    return len(s) % 10**9\n\n\nassert(solution(StringIO(\"\"\"5\n1 2 1 2 3\n\"\"\")) == 2)\nassert(solution(StringIO(\"\"\"2\n100 1\n\"\"\")) == 2)\nassert(solution(StringIO(\"\"\"4\n1 3 3 7\n\"\"\")) == 4)\n"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                count += 1\n    return str(count % MOD)"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    a = [int(c) for c in stdin.split()]\n    mod = 1000000007\n    p = [0] * n\n    p[0] = 1\n    for i in range(1, n):\n        for j in range(0, i):\n            if a[i] > a[j] and (i - j == 1 or p[j]):\n                p[i] += 1\n    return str(p[n - 1])\n\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"11\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"34\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"45\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"17\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"67\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"73\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"49\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"47\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"53\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"72\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"86\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"90\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"97\")\nassert(solution(input()) == \"11\")\nassert(solution(input()) == \"103\")\nassert(solution(input()) == \"11\")\nassert(solution(input()) == \"109\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"112\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"110\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"116\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"118\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"119\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"120\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"123\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"130\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"134\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"135\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"142\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"143\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"144\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"145\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"146\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"147\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"148\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"149\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"150\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"151\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"152\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"153\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"155\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"156\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"157\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"158\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"159\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"160\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"161\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"162\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"163\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"164\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"165\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"166\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"167\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"168\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"169\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"170\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"171\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"172\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"173\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"174\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"175\")\nassert(solution(input()) == \"1\")\nassert(solution("
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    b[0] = 0\n    b[1] = 0\n    for i in range(2, n):\n        if a[i] == a[i - 1]:\n            b[i] = b[i - 1]\n        elif a[i] == a[i - 2] + 1:\n            b[i] = b[i - 2] + 1\n        else:\n            b[i] = b[i - 1] + 1\n    return str(b[n - 1])\n\n\nassert(solution('''5\n1 2 1 2 3''') == '2')\nassert(solution('''2\n100 1''') == '2')\nassert(solution('''4\n1 3 3 7''') == '4')\nprint(solution(input()))\n"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    counter = 0\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            counter += 1\n    return str(counter)\n    \n"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    \n    unique_arr = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                unique_arr.add((i, j))\n                unique_arr.add((j, i))\n    return str(len(unique_arr) % 1000000007)"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    res = 0\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            res += 1\n    return str(res)"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(1, n):\n        if a[i]!= a[i - 1]:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n\n    # keep track of the number of deleted elements\n    num_deleted = 0\n\n    # number of elements we need to delete to make it good\n    num_removed = n\n\n    for i in range(1, n):\n        # if the sum of elements i and i-1 is a power of two,\n        # then delete them\n        if 2**(i+1) - 1 == a[i] + a[i-1]:\n            num_deleted += 1\n            num_removed -= 1\n    return str(num_removed)"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    length = int(lines[0])\n    seq = [int(num) for num in lines[1].split(\" \")]\n    \n    max_power_of_2 = int(round(log2(max(seq))))\n    \n    prev = [0] * (max_power_of_2 + 1)\n    \n    for num in seq:\n        for i in range(max_power_of_2, 0, -1):\n            if num & (1 << i) == 0:\n                break\n            \n            prev[i] = max(prev[i], prev[i - 1] + 1)\n            \n    return str(length - prev[max_power_of_2])\n\nfor i in range(int(input())):\n    print(solution(input()))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    count = 0\n    max_element = max(arr)\n    for i in range(n):\n        if max_element % 2 == 0:\n            max_element = max_element // 2\n            count += 1\n        else:\n            break\n    return count\nprint(solution(None))\n"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    counter = 0\n    for i in range(n):\n        if 2 ** i <= a[i]:\n            continue\n        else:\n            if 2 ** (i + 1) <= a[i]:\n                a[i] -= 2 ** i\n                counter += 1\n            else:\n                break\n    return str(counter)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    for i in range(n):\n        if numbers[i] % 2 == 0:\n            numbers[i] = numbers[i] / 2\n        else:\n            numbers[i] = numbers[i] * 2\n            while numbers[i] % 2!= 0:\n                numbers[i] *= 2\n    print(sum(numbers))\n"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = [int(x) for x in stdin.split(' ')]\n    good_seq = [x for x in seq if sum([2**i for i in range(len(seq) - x, 0, -1)]) == x]\n    return str(len(good_seq) + 1)\n"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    if n == 0:\n        return 0\n    a = stdin.readline()\n    a = [int(x) for x in a.split(' ')]\n    a.sort()\n    ans = 0\n    for i in range(1,n):\n        if 2**i in a:\n            ans += (a.index(2**i))\n    return ans\n\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    if n == 0:\n        return '0'\n\n    ans = 0\n    for i in range(n):\n        if a[i] & (a[i] - 1) == 0:\n            ans += 1\n        else:\n            break\n\n    if i == n - 1:\n        return str(ans)\n\n    for j in range(i, n):\n        if a[j] & (a[j] - 1) == 0:\n            ans += 1\n        else:\n            break\n\n    return str(ans)\n"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_recursive(list(map(int, stdin))))\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get the size of the string\n    N = int(stdin[0])\n    # The string to store the result\n    res = 0\n    # Loop over the string and compute the maximum number of cubes that can be removed\n    for i in range(1, N + 1):\n        # Add to the result the maximum number of cubes that can be removed if the i-th character is 0\n        res += i * (N - i)\n    # Print the maximum number of cubes that can be removed\n    print(res)"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_cubes(stdin))\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for i in stdin:\n        if stack and stack[-1] == i:\n            stack.pop()\n        else:\n            stack.append(i)\n    return str(len(stack))"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    If N is a power of 2, it is easy to find how many cubes can be removed in O(logN). This is because the\n    number of red cubes on a single cube can be calculated by finding the index of the first 1 in the binary\n    representation of N, and subtracting that index from N. Then, the number of cubes to be removed is the\n    number of cubes that can be removed from the index.\n\n    However, for example, if N = 6, we get 0b00000001, which is 1, since the binary representation of 6 is\n    0b00000001. So, for each bit, we subtract the number of cubes that can be removed from the index of that\n    bit's 1.\n\n    For example, we can see that the number of cubes that can be removed from the index of the first bit of 1\n    is 1, so we get 0b00000001, and we subtract 1 from 6 to get 5. The number of cubes that can be removed\n    from the index of the second bit of 1 is 2, so we get 0b00000010, and we subtract 2 from 6 to get 4.\n    The number of cubes that can be removed from the index of the third bit of 1 is 4, so we get 0b00000110,\n    and we subtract 4 from 6 to get 2.\n    The number of cubes that can be removed from the index of the first bit of 0 is 0, so we get 0b00000000.\n    So, we get the total number of cubes that can be removed.\n\n    If N is not a power of 2, it is not easy to find how many cubes can be removed. For example, if N = 23,\n    we get 0b00111011, which is 7. If N = 100, we get 0b10110111, which is 11, and so on. But as soon as we\n    see another digit, we can see that the number of cubes that can be removed increases linearly. For example,\n    if N = 1234, we get 0b10001010, which is 16, and so on. So, we can conclude that the number of cubes that can\n    be removed is the maximum of how many cubes can be removed from the index of each bit of 1, and the number\n    of cubes that can be removed from the index of each bit of 0.\n\n    To calculate how many cubes can be removed, we iterate over the string in reverse, starting from the\n    rightmost bit. For each bit, we calculate the number of cubes that can be removed from the index of the\n    bit's 1 and the index of the bit's 0. We add the two numbers together. The result is the maximum number\n    of cubes that can be removed.\n    \"\"\"\n    N = int(stdin.strip())\n    if N == 0:\n        return 0\n\n    if N == 1:\n        return 1\n\n    if N == 2:\n        return 2\n\n    if N == 3:\n        return 4\n\n    if N % 2 == 0:\n        return (N - 2) * (N - 1) // 2\n\n    return (N - 1) * (N - 2) // 2 + N * (N - 1) // 2"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.strip()\n    c = len(l)\n    r = 0\n    for i in range(c):\n        if l[i] == \"0\":\n            r += 1\n        else:\n            r -= 1\n    return r\n\nprint(solution(input()))"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L = R = []\n    for _ in range(M):\n        L.append(int(stdin.split()[0]))\n        R.append(int(stdin.split()[1]))\n    num_allow = 0\n    for i in range(N):\n        if i not in L and (i+1) not in L and (i+2) not in L:\n            num_allow += 1\n    return str(num_allow)"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    return str(n*(n-1)*(n-2)*(n-3)//6)\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(\" \")]\n    gates = [int(stdin.split(\" \")[x]) for x in range(M)]\n\n    passed = set()\n    for i in range(M):\n        passed.add(gates[i])\n    passed.add(gates[i + 1])\n    passed.add(gates[i - 1])\n    return str(N - len(passed))\n"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.strip().split()]\n    cards = [int(x) for x in stdin.strip().split()]\n    cards.sort()\n\n    count = 0\n    for i in range(0, M):\n        if i == 0:\n            continue\n        if cards[i] == cards[i-1] + 1:\n            continue\n        if cards[i] == cards[i-1]:\n            continue\n        if cards[i] == cards[i-2] + 2:\n            continue\n        count += 1\n    return count"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split()]\n    Ls, Rs = [], []\n    for _ in range(M):\n        l, r = [int(n) for n in stdin.split()]\n        Ls.append(l)\n        Rs.append(r)\n    return solve(N, M, Ls, Rs)\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.strip().split(' ')]\n    cards = []\n    for _ in range(M):\n        cards.append([int(x) for x in stdin.strip().split(' ')])\n    return solve(cards, M)\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n\n    l, r = [], []\n    for i in range(N):\n        l.append(int(stdin.readline().rstrip()))\n    for i in range(N):\n        r.append(int(stdin.readline().rstrip()))\n\n    m1, m2 = 0, 0\n    for i in range(M):\n        if i % 2 == 0:\n            m1 += 1\n        else:\n            m2 += 1\n\n    ans = m1 * m2\n\n    for i in range(N):\n        for j in range(i, N):\n            for k in range(j, N):\n                if l[i] <= r[j] and l[j] <= r[k] and l[i] <= r[k]:\n                    ans -= 1\n    return str(ans)\n"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    gates = [int(x) for x in stdin.split()]\n    gates.sort()\n    pass_ids = []\n    if M == 0:\n        return \"0\"\n    for i in range(len(gates)):\n        if i % 2 == 1:\n            pass_ids.append(gates[i])\n    id_count = len(pass_ids)\n    for i in range(id_count, len(gates)):\n        if gates[i] - gates[i - id_count] >= len(gates) - id_count:\n            pass_ids.append(gates[i])\n    return str(len(pass_ids))"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input on the newlines\n    # We need to remove the outer quotes\n    # Split into two lists: L and R\n    # Split into ints\n    # Return count\n    return count"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = [0] + list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * (n + 1) for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if i == j:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = min(dp[i - 1][j - 1] + abs(h[i] - h[j]), dp[i - 1][j] + abs(h[i] - h[j]))\n    return dp[-1][-1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return answer\n   ..."
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = list(map(int, stdin.split()))\n    # Next height is the previous max height plus 1\n    # It doesn't matter if the previous height is higher\n    # So just use the max to initialize this\n    h.insert(0, 0)\n    h.append(0)\n    # Initialize a result array of size N\n    res = [float('inf')] * N\n    for i in range(1, N + 1):\n        res[i - 1] = h[i] + 1\n        if h[i] > h[i - 1]:\n            # No need to increase or decrease the height\n            # No need to water flower i\n            continue\n        if h[i] > h[i + 1]:\n            # Increase the height for all the flowers\n            # i.e. l is current height, r is current height + 1\n            # Increase all the height from l to r by 1\n            for j in range(i, i + (h[i] - h[i - 1])):\n                res[j] = h[i] + 1\n    print(res)\n    return str(res.index(min(res)))"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    best = 0\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split(' '))\n\n        # O(n)\n        heights[i] += max(heights[i] - l, r - heights[i])\n        best = max(best, heights[i])\n\n    return str(best)"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().split()))\n    ops = 0\n    for i in range(1, n):\n        l = i\n        r = i + 1\n        if h[l] < h[r]:\n            ops += 1\n    return ops"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    h = list(map(int, stdin[1:].split()))\n    max_height = max(h)\n\n    i = 0\n    j = len(h) - 1\n\n    if len(h) == 1:\n        return str(h[0])\n\n    def is_valid(k):\n        return 0 <= k < len(h)\n\n    def can_increase_k(k):\n        return h[k-1] <= h[k]\n\n    def can_increase_k_not_at_end(k):\n        return h[k-1] < h[k]\n\n    def can_increase_k_not_at_beginning(k):\n        return h[k+1] < h[k]\n\n    min_operations = 0\n\n    while i < j:\n        if is_valid(i) and is_valid(j):\n            while i < j:\n                if can_increase_k(i):\n                    i += 1\n                    min_operations += 1\n                    if h[i] == max_height:\n                        break\n\n                if can_increase_k_not_at_end(j):\n                    j -= 1\n                    min_operations += 1\n                    if h[j] == max_height:\n                        break\n\n                if can_increase_k_not_at_beginning(i):\n                    i += 1\n                    min_operations += 1\n                    if h[i] == max_height:\n                        break\n\n        else:\n            break\n\n    return str(min_operations)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    hs = list(map(int, stdin.readline().split()))\n    lowest = hs[0]\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    current = 1\n    count = 0\n    while current!= n:\n        current = 1\n        while current < n:\n            if lowest < hs[current]:\n                lowest = hs[current]\n                current += 1\n            else:\n                break\n        count += 1\n    return count"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2 2 1\")\n    '2'\n    >>> solution(\"4 1 2 1\")\n    '1'\n    >>> solution(\"2 1 4 2\")\n    '2'\n    >>> solution(\"1 4 1 1\")\n    '1'\n    >>> solution(\"1 1 1 1\")\n    '1'\n    >>> solution(\"1 1 1 1\")\n    '0'\n    \"\"\"\n    N = int(stdin)\n    heights = list(map(int, stdin.split()))\n    heights.insert(0, 0)\n    min_operations = min_operations_rec(N, heights)\n    return str(min_operations)\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    k = [0] * (n + 1)\n    k[0] = 1\n    for i in range(n):\n        k[i + 1] = k[i]\n        if a[i] < 0:\n            k[i + 1] -= 1\n        else:\n            k[i + 1] += 1\n    if k[n] < w:\n        return str(0)\n    else:\n        return str(k[n])\n"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, w = (int(x) for x in stdin.split())\n\n    a = [int(x) for x in stdin.split()]\n\n    states = [[0 for _ in range(w + 1)] for _ in range(n)]\n    states[0][a[0]] = 1\n\n    for i in range(1, n):\n        for j in range(1, w + 1):\n            states[i][j] += states[i - 1][j]\n            if j >= a[i]:\n                states[i][j] += states[i - 1][j - a[i]]\n\n    return str(states[n - 1][w])"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    records = [int(x) for x in stdin.split()]\n    num_records = len(records)\n    result = [0] * (num_records)\n    result[0] = 1\n    for i in range(1, num_records):\n        if records[i] >= 0:\n            for j in range(0, i):\n                if records[i] <= records[j]:\n                    result[i] += result[j]\n    return str(result[num_records - 1])\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, w = [int(i) for i in lines[0].split()]\n    a = [int(i) for i in lines[1].split()]\n    a = [0] + a\n    ways = [1, 0, 0]\n\n    for i in range(3, len(a)):\n        a_i = a[i]\n        if a_i > w:\n            a_i = 0\n        for j in range(0, i):\n            a_j = a[j]\n            if a_j > w:\n                a_j = 0\n            if a_i + a_j > w:\n                continue\n            ways.append(ways[j] + ways[i - j - 1])\n    return str(ways[-1])\n"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"\"\"\n3 4\n-1 1 -2\n\"\"\"))\n\n\"\"\"\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435:\n\u0412 \u0441\u0432\u043e\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c, \u043d\u0430 \u043b\u0435\u0442\u043d\u0435\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0420\u043e\u0441\u0441\u0438\u0438 \u0431\u044b\u043b\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0431\u0438\u043b\u0435\u0442\u044b \u043d\u0430 \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u044b.\n\u0421\u0430\u043c\u043e\u043b\u0435\u0442\u044b \u0438\u043c\u0435\u044e\u0442 \u043d\u0430 \u043d\u0438\u0445 \u0442\u0440\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 \u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445 \u043d\u0435 \u043f\u0440\u043e\u0441\u0432\u0435\u0442\u0438\u043b\u0438 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u0435\u0442\u0430.\n\u0411\u0438\u043b\u0435\u0442\u044b \u043f\u0440\u043e\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043f\u043e\u0438\u0441\u043a\u043e\u0432\u043e\u0435 \u043f\u043e\u043c\u043e\u0449\u043d\u0438\u043a \u0438 \u043e\u0431\u0449\u0430\u0435\u0442\u0441\u044f \u0441 \u0443\u0436\u0435 \u0440\u0430\u0437\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0431\u0438\u043b\u0435\u0442\u0430\u043c\u0438.\n\u041d\u0430 \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u044b \u043f\u0440\u0438\u0445\u043e\u0434\u044f\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041e\u0434\u043d\u0430\u043a\u043e \u043d\u0430 \u043a\u0430\u043a\u0438\u0445 \u043c\u0435\u0441\u0442\u0430\u0445 \u043e\u043d\u0438 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043d\u0435 \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u044e\u0442,\n\u0441\u0430\u043c\u043e\u043b\u0435\u0442\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u0435\u043b\u0430\u044e\u0442 \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0438 \u0441\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0432\u043e\u0440\u043e\u0442\u0430\u0445.\n\u041d\u0430 \u043f\u043e\u043b\u0435\u0442\u0430\u0445 \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u044b \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u043a\u043e\u043d\u0434\u0438\u0446\u0438\u043e\u043d\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0434\u043b\u044f \u0441\u0442\u043e\u044f\u043d\u043a\u0438.\n\u041f\u043e\u043b\u0435\u0442\u0438\u043c \u043d\u0430 \u0432\u043e\u0440\u043e\u0442\u0430\u0445 \u0438 \u0441\u043d\u043e\u0432\u0430 \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u043a\u043e\u043d\u0434\u0438\u0446\u0438\u043e\u043d\u0435\u0440\u044b, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438 \u043a\u0430\u043a\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u044b \u043f\u0440\u0438\u0448\u043b\u0438.\n\u041f\u043e\u043b\u0435\u0442\u044b \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0442 \u043d\u0430 \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u044b, \u043d\u043e \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u044b \u0432\u044b\u0434\u0435\u043b\u044f\u044e\u0442 \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u0446\u0435\u043f\u0438 \u043e\u0434\u043d\u0443 \u043f\u0430\u0440\u0443 \u0431\u0438\u043b\u0435\u0442\u043e\u0432 \u0438 \u043f\u043e \u0446\u0435\u043f\u044f\u043c \u0441 \u043a\u043e\u043d\u0434\u0438\u0446\u0438\u043e\u043d\u0435\u0440\u0430\u043c\u0438 \u043d\u0430 \u0432\u043e\u0440\u043e\u0442\u0430\u0445 \u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442 \u043f\u043e\u043b\u0435\u0442\u044b.\n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u0435\u0442\u0430 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0446\u0435\u043f\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u043a\u043b\u0430\u0441\u0441\u0430. \u041d\u0430 \u043f\u043e\u043b\u0435\u0442\u0435 \u0432\u044b\u043f\u0430\u0434\u0430\u0435\u0442 \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u0447\u0438\u0441\u043b\u043e \u0431\u0438\u043b\u0435\u0442\u043e\u0432.\n\u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043f\u043e\u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a\u043e\u0435-\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0438\u043b\u0435\u0442\u043e\u0432 \u043d\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0446\u0435\u043f\u0438.\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0446\u0435\u043f\u0438 \u043f\u0440\u043e\u0441\u0432\u0435\u0442\u0438\u043b\u0441\u044f \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043e\u0434\u043d\u043e\u0439 \u043f\u0430\u0440\u044b \u0431\u0438\u043b\u0435\u0442\u043e\u0432.\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0446\u0435\u043f\u0438 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u043d\u0435 \u043f\u0440\u043e\u0441\u0432\u0435\u0442\u0438\u043b\u043e\u0441\u044c \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430.\n\u041d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0446\u0435\u043f\u0438 \u0432\u044b\u0448\u043b\u043e \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0431\u0438\u043b\u0435\u0442\u043e\u0432.\n\u041a\u0430\u043a\u043e\u0432\u043e \u0447\u0438\u0441\u043b\u043e \u0431\u0438\u043b\u0435\u0442\u043e\u0432 \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u0446\u0435\u043f\u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0447\u0438\u0441\u043b\u0430 \u043f\u043e\u043b\u0435\u0442\u043e\u0432?\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 $n$ \u0438 $w$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0438\u043b\u0435\u0442\u043e\u0432 \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u0430\u043c\u043e\u043b\u0435\u0442\u0430 \u0432 \u0440\u0443\u0431\u043b\u044f\u0445, \u043a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u0434\u043d\u043e\u043c\u0443 \u0431\u0438\u043b\u0435\u0442\u0443 \u0438 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0441\u0442"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"\n\n\nsolution('''4 10\n2 4 1 2''')\nsolution('''5 6\n1 1 -1 -1 -1 -1''')\nsolution('''3 7\n2 3 1 -1''')\n"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split(\" \"))\n    num = list(map(int, stdin.split(\" \")))\n    passengers = [0] * (n + 1)\n    for n in num:\n        passengers[n] += 1\n    sum = 0\n    for i in range(len(passengers)):\n        sum += passengers[i]\n        if sum > w:\n            return 0\n    return sum\n\nprint(solution(input()))\n"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    w, n = [int(s) for s in stdin.split()]\n\n    if n == 0 or w == 0:\n        return \"0\"\n\n    if n == 1:\n        return \"1\"\n\n    a = [int(s) for s in stdin.split()]\n\n    cache = [0] * n\n    cache[0] = 1\n\n    for i in range(1, n):\n        for j in range(w + 1):\n            if j >= a[i]:\n                cache[i] += cache[i - 1]\n            else:\n                cache[i] += cache[i - 1] - 1\n\n    return str(cache[n - 1])\n"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    \n    for i in range(n):\n        x = a[i]\n        a[i] = x * 2\n        if i % 3 == 0:\n            a[i] = a[i] // 3\n    \n    return \" \".join(map(str, a))"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n\n    nums = [1] * n\n\n    def divide_and_multiply(a, b):\n        if a % b == 0:\n            return 0\n\n        a = a // b\n        b = b * 2\n        return a + divide_and_multiply(a, b)\n\n    for i in range(n - 1):\n        nums[i + 1] = divide_and_multiply(nums[i], 3)\n\n    return''.join(str(x) for x in nums)\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(stdin.readline()) for _ in range(n)]\n    return \" \".join([str(seq[i // 2]) for i in range(n * 2) if i % 2])\n\nTest.assertEquals(solution('''6\n4 8 6 3 12 9\n'''), '9 3 6 12 4 8', 'Example 1')\nTest.assertEquals(solution('''4\n42 28 84 126\n'''), '126 42 84 28', 'Example 2')\nTest.assertEquals(solution('''2\n1000000000000000000 3000000000000000000\n'''), '3000000000000000000 1000000000000000000', 'Example 3')\n'''\n-----Solutions-----\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = sorted(map(int, stdin.readline().strip().split()))\n    for i in range(n - 1):\n        if i % 3 == 0:\n            nums[i * 2] *= 2\n        else:\n            nums[i * 2] /= 3\n    return''.join(map(str, nums))\nprint(solution(None))\n\n\n'''\n\nn = int(input())\ns = input().strip().split()\nresult = []\nfor i in range(n):\n    if i % 3 == 0:\n        result.append(int(s[i] / 3))\n    else:\n        result.append(int(s[i] * 2))\nprint(*result)\n"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"\n    \nassert(solution('''6\n4 8 6 3 12 9\n''') == '9 3 6 12 4 8')\nassert(solution('''4\n42 28 84 126\n''') == '126 42 84 28')\nassert(solution('''2\n1000000000000000000 3000000000000000000\n''') == '3000000000000000000 1000000000000000000')\n"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Reads the n number of integers from standard input and returns them\n    in a different order, such that they can match the sequence of the\n    possible Polycarp's game.\n    '''\n    n = int(stdin.readline())\n    numbers = [int(stdin.readline()) for _ in range(n)]\n    \n    # Keep an array of indexes for each integer\n    index_map = [i for i in range(n)]\n    \n    # Sort the array according to their sum\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if sum(numbers[i:j + 1]) > sum(numbers[i + 1:j + 1]):\n                # Swap the integers\n                temp = index_map[i]\n                index_map[i] = index_map[j]\n                index_map[j] = temp\n    \n    # Reconstruct the output\n    output = [numbers[i] for i in index_map]\n    return''.join(map(str, output))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().strip().split(\" \")))\n    if n == 0:\n        return \"0\"\n    res = \"\"\n    for i in range(n - 1, -1, -1):\n        if i % 2 == 0:\n            res += str(numbers[i] * 2) + \" \"\n        else:\n            res += str(numbers[i]) + \" \"\n    return res"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    num = [int(stdin.readline().strip()) for _ in range(n)]\n    return \" \".join(map(str, sorted(num)))\n\n'''\n"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(stdin.readline()) for _ in range(n)]\n    ans = []\n    for i in range(n):\n        x = seq[i]\n        if x % 3 == 0:\n            ans.append(x // 3)\n            ans.append(x // 3)\n        elif x % 3 == 1:\n            ans.append(x // 3)\n            ans.append(x * 2)\n        elif x % 3 == 2:\n            ans.append(x * 2)\n            ans.append(x * 2)\n        else:\n            print('Something went wrong')\n    return''.join(map(str, ans))\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = list(map(int, stdin.readline().strip().split(' ')))\n    seq = sorted(seq)\n    result = []\n    for num in seq:\n        result.extend([num]*2)\n        result.append(num*3)\n    result =''.join(map(str, result))\n    return result\n"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    m = 1\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if n == 3:\n        return str(1) if (x[2] - x[1]) == (x[1] - x[0]) else str(2)\n\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            if (x[j] - x[i]) % 2 == 0:\n                m += 1\n    return str(m)\n\nprint(solution(\"6\\n3 5 4 7 10 12\"))\nprint(solution(\"5\\n-1 2 5 8 11\"))\nprint(solution(\"5\\n-1 2 5 8 11\"))\nprint(solution(\"5\\n-1 2 5 8 11\"))\nprint(solution(\"5\\n1 2 5 8 11\"))"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    points = [int(x) for x in stdin.readline().split()]\n    if len(points) == 0:\n        return \"\"\n    if len(points) == 1:\n        return \"1\"\n\n    m = len(points) // 2\n    count = 0\n    for i in range(m, len(points)):\n        if abs(points[i] - points[i - m]) % (2 ** (i - m + 1)) == 0:\n            count += 1\n    return str(count)\n\nprint(solution(None))\n\"\"\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = tuple(map(int, stdin.readline().split()))\n    return '\\n'.join(map(str, int_power_of_two_subsets(n, points)))\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = list(map(int, stdin.split()))\n    points.sort()\n    k = len(points)\n    for i in range(1, 2**k):\n        x = []\n        for j in range(k):\n            if i & (1<<j):\n                x.append(points[j])\n        if len(x) == k and not x[0] == x[1]:\n            if all([abs(x[i] - x[i-1]) == 2**j for i in range(1, len(x))]):\n                return str(len(x)) + '\\n' +''.join(map(str, x))\n    return str(0)"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write your code here\n    '''\n"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # STDIN  is passed a string\n    n = int(stdin.readline())\n    # x-coordinates of points\n    x = list(map(int, stdin.readline().split()))\n    # sort x-coordinates\n    x.sort()\n    # index of leftmost x-coordinate\n    l = 0\n    # index of rightmost x-coordinate\n    r = n - 1\n    # number of points in the right part of the array\n    rlen = 0\n    # number of points in the left part of the array\n    llen = 0\n    # counter for number of chosen points\n    cnt = 0\n    # chosen points\n    chosen = []\n    while l < r:\n        # check if there is no points in the right part of the array\n        if rlen == 0:\n            # add right part of the array\n            chosen.extend(x[r:])\n            # increase counter\n            cnt += rlen\n            # increase rightmost x-coordinate\n            r -= 1\n            # increase number of points in the right part of the array\n            rlen = n - r\n        # check if there is no points in the left part of the array\n        elif llen == 0:\n            # add left part of the array\n            chosen.extend(x[l:])\n            # increase counter\n            cnt += llen\n            # increase leftmost x-coordinate\n            l += 1\n            # increase number of points in the left part of the array\n            llen = r - l\n        # choose the points that satisfies the condition\n        else:\n            # choose the point that has minimum distance to the previous chosen point\n            if x[r] - chosen[-1] == 2 ** abs(llen - rlen):\n                chosen.append(x[r])\n                cnt += 1\n                r -= 1\n                rlen = n - r\n            else:\n                chosen.append(x[l])\n                cnt += 1\n                llen = r - l\n                l += 1\n    return str(cnt) +'' +''.join(map(str, chosen))\n"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n    l, r = 1, n - 1\n    while l < r:\n        if x[l] + x[r] == 2 * x[l]**2:\n            l += 1\n        elif x[l] + x[r] == 2 * x[r]**2:\n            r -= 1\n        else:\n            return '0'\n    return str(l + 1) +'' +''.join(map(str, x[:l+1]))\n\nassert(solution('''5\n-1 2 5 8 11\n''') == '3 1 4 7 3')\nassert(solution('''4\n-1 2 5 8 11\n''') == '2 1 3 5')\nassert(solution('''6\n3 5 4 7 10 12\n''') == '3')\nassert(solution('''5\n-1 2 5 8 11\n''') == '0')\n\n\n\n'''\n"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = sorted(map(int, stdin.readline().strip().split(' ')))\n\n    def pow2(x):\n        return x == x & (x - 1)\n\n    def bits(x):\n        return bin(x)[2:].count('1')\n\n    max_bits = max(bits(x) for x in points)\n    while True:\n        curr_bits = max_bits\n        while pow2(curr_bits):\n            curr_bits = curr_bits >> 1\n        if curr_bits == 0:\n            return max_bits\n        max_bits = max(max_bits, curr_bits)\n\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def power(n):\n        return 1 << n\n\n    n = int(stdin)\n    if n < 3:\n        return n\n    x = [int(x) for x in stdin.split()]\n    x.sort()\n    ps = [0]\n    for i in range(n):\n        ps.append(ps[-1] + power(i))\n    ans = 0\n    for i in range(n):\n        ans += 1\n        for j in range(i):\n            if ps[j] + power(i) - ps[i] == power(j):\n                ans -= 1\n                break\n    return str(ans)\n\nassert(solution(input()) == input())\n"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = list(map(int, stdin.readline().split()))\n\n    answers = []\n    for i in range(n):\n        for j in range(i, n):\n            if points[i] - points[j] == 2 ** j:\n                answers.append(points[i])\n                answers.append(points[j])\n                break\n\n    print(len(answers))\n    print(' '.join(map(str, answers)))\n    return ''"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split()]\n    t = a + b\n    aoki = a - (a % k)\n    takahashi = t - (t % k)\n    return \"{} {}\".format(takahashi, aoki)"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.strip().split(\" \"))\n    takahashi_cookies = [int(stdin.strip()) for _ in range(N)]\n    aoki_cookies = [int(stdin.strip()) for _ in range(M)]\n\n    for _ in range(K):\n        takahashi_cookies_len = len(takahashi_cookies)\n        aoki_cookies_len = len(aoki_cookies)\n        if takahashi_cookies_len > 0 and aoki_cookies_len > 0:\n            takahashi_cookies.pop()\n            aoki_cookies.pop()\n        elif takahashi_cookies_len > 0 and aoki_cookies_len == 0:\n            takahashi_cookies.pop()\n        elif takahashi_cookies_len == 0 and aoki_cookies_len > 0:\n            aoki_cookies.pop()\n\n    return f\"{len(takahashi_cookies)} {len(aoki_cookies)}\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split()]\n    takahashi_left = A\n    aoki_left = B\n    for _ in range(K):\n        if takahashi_left:\n            takahashi_left -= 1\n        elif aoki_left:\n            aoki_left -= 1\n    return f'{takahashi_left} {aoki_left}'"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_cookies, aoki_cookies, times = [int(x) for x in stdin.split()]\n    takahashi_cookies_left = takahashi_cookies\n    aoki_cookies_left = aoki_cookies\n    for _ in range(times):\n        if takahashi_cookies_left > 0:\n            takahashi_cookies_left -= 1\n            if aoki_cookies_left > 0:\n                aoki_cookies_left -= 1\n        else:\n            if aoki_cookies_left > 0:\n                aoki_cookies_left -= 1\n                if takahashi_cookies_left > 0:\n                    takahashi_cookies_left -= 1\n    print(str(takahashi_cookies_left) + \" \" + str(aoki_cookies_left))\n    return \"\""
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split(\" \")]\n    print(A + B)\n    return \"\""
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split()]\n    takahashi_cookies = 0\n    aoki_cookies = 0\n    while takahashi_cookies < A or aoki_cookies < B:\n        if takahashi_cookies < A:\n            takahashi_cookies += 1\n        if aoki_cookies < B:\n            aoki_cookies += 1\n        if takahashi_cookies == A and aoki_cookies == B:\n            break\n    return '{} {}'.format(takahashi_cookies, aoki_cookies)"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"\"))\n\"\"\"\n\nTakahashi, Aoki = [int(x) for x in stdin.split()]\nK = int(stdin.split()[2])"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split()]\n    print(A - K % A, B - K % B)"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split(' ')]\n    return '{} {}'.format(A + K * (A >= B), B + K * (A < B))"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split(\" \"))\n    takahashi_cookies = 0\n    aoki_cookies = 0\n\n    while takahashi_cookies < a or aoki_cookies < b:\n        if takahashi_cookies < a:\n            takahashi_cookies += 1\n        if aoki_cookies < b:\n            aoki_cookies += 1\n\n    return str(takahashi_cookies) + \" \" + str(aoki_cookies)\n\nprint(solution(stdin.readline()))\n\"\"\"\n\nimport sys\n\ntakahashi_cookies = 0\naoki_cookies = 0\n\nfor line in sys.stdin.readlines():\n    a, b, k = map(int, line.split(\" \"))\n    takahashi_cookies += a\n    aoki_cookies += b\n    k -= 1\n\nprint(takahashi_cookies, aoki_cookies)\n"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    balance = 100\n    for _ in range(10 ** 18):\n        balance *= 1.01\n        if balance >= int(stdin):\n            return str(_)\n    return str(balance)"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    count = 0\n    balance = 101\n    while balance > X:\n        balance = balance * 1.01\n        count += 1\n    return str(count)"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline())\n\n    years = 0\n\n    balance = 100\n    while balance < X:\n        years += 1\n        balance += (balance * (100/100))\n\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline().strip())\n\n    first_year = 101\n    second_year = first_year + 100\n\n    if X <= second_year:\n        return \"1\"\n\n    first_year_index = 0\n    second_year_index = 0\n\n    while True:\n        first_year += 1\n        second_year += 1\n\n        if X <= second_year:\n            return str(first_year_index + 2)\n\n        if X <= first_year:\n            return str(first_year_index + 1)\n\n        first_year_index += 1\n        second_year_index += 1\n"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    def next(x):\n        return x + (1 if x % 100 > 50 else 0)\n    X = int(stdin)\n    year = 1\n    bal = 100\n    while bal < X:\n        bal = next(bal)\n        year += 1\n    return str(year)\n"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    amount = int(stdin)\n    years = 0\n\n    while True:\n        years += 1\n        amount *= 1.01\n\n        if amount >= 100:\n            break\n\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) // 100)"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://en.wikipedia.org/wiki/Bank_interest#Compounding\n    The initial deposit is: (1 + 1/12) * 100 = 101\n    The balance after 1 year is: (1 + 1/12) * 100 + 100 - (1 + 1/12) * 100 = 101 + 100 - 101\n    The balance after 2 years is: (1 + 1/12) * 100 + 100 - (1 + 1/12) * 100 + 100 - (1 + 1/12) * 100 + 100 - 101\n    Thus, the answer is 3.\n    \"\"\"\n    x = int(stdin.strip())\n    y = 101\n    i = 1\n    while y <= x:\n        i += 1\n        y = (1 + 1/12) * 100 + 100 - (1 + 1/12) * y\n    return i\n    \n\nprint(solution(input()))\n"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        K = int(stdin.readline().strip())\n        s = 0\n        for a in range(1,K+1):\n            for b in range(1,K+1):\n                for c in range(1,K+1):\n                    if a*b*c == gcd(a,b,c):\n                        s += 1\n        print(s)"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    solution = 0\n    for a in range(1, num + 1):\n        for b in range(1, num + 1):\n            for c in range(1, num + 1):\n                if a < b < c:\n                    solution += gcd(a, b, c)\n    return str(solution)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, _, k = [int(x) for x in stdin.split()]\n    result = 1\n    for _ in range(k):\n        result = result * (n + 1) // gcd(result, n + 1)\n    return str(result)"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    k = int(stdin.readline())\n    if k == 1:\n        return '0'\n    elif k == 2:\n        return '1'\n    elif k == 3:\n        return '2'\n    else:\n        return str(9 * k)\n"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Return the solution as a string\n    K = int(stdin.readline().strip())\n    if K == 1:\n        return \"1\"\n    return str(K*(K+1)//2)"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    return sum([1 for a in range(1, K + 1) for b in range(1, K + 1) for c in range(1, K + 1) if gcd(a, b, c) == 1])\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    total = 0\n    for a in range(1, k + 1):\n        for b in range(1, k + 1):\n            for c in range(1, k + 1):\n                total += gcd(a, b, c)\n    return str(total)\n\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the sum of the greatest common divisor of all 3-digit numbers from 1 to K (inclusive)'''\n    K = int(stdin)\n    return sum([int(i) for i in range(1, K + 1) if len(str(i)) == len(str(K))])"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if stdin:\n        n = int(stdin)\n        return str(sum(n // gcd for n in range(1, n + 1)))\n    else:\n        return ''"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(max([sum([int(x) % int(y) for x in stdin.split()[1:]]) for y in stdin.split()[0]]))"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    N = int(data[0])\n    A = [int(a) for a in data[1:]]\n    max_f = 0\n    for a in A:\n        m = a\n        for b in A:\n            m = (m % b) + (m % a)\n        max_f = max(max_f, m)\n    return str(max_f)"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(x) for x in stdin.readline().split()]\n    res = 0\n\n    for i in range(2, n):\n        res = max(res, (i % nums[0]) + (i % nums[1]) + (i % nums[2]))\n\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    m = max(a)\n    a = list(set(a))\n    a.sort()\n    b = []\n    for i in a:\n        b.append(i % m)\n    b = list(set(b))\n    b.sort()\n    f = 0\n    for i in b:\n        f += i\n    return str(f % m)"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split('\\n')[0]\n    A = stdin.split('\\n')[1]\n    A = map(int, A.split(' '))\n    A = [x % i for i in A for x in range(i)]\n    # print(A)\n    res = A[0]\n    for i in A:\n        res = max(res, i)\n    return res\n\nassert(solution('''3\n3 4 6''')) == 10\nassert(solution('''7\n4 1 3 5 7 9''')) == 0\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(solution('''1234567890\n999 0 999 999 999''')) == 9\nassert(s"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0 or n > 3000:\n        return ''\n    arr = [int(x) for x in stdin.split(' ')]\n    s = 0\n    for i in range(n):\n        s += arr[i]\n    print(s)\n    return ''"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        return a if b == 0 else gcd(b, a % b)\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    result = 0\n    for i in range(1, n):\n        result = lcm(result, nums[i])\n    return result"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    N = int(N)\n    l = stdin[2:].split(\" \")\n    l = [int(x) for x in l]\n    max_num = l[0]\n    for n in l:\n        if n > max_num:\n            max_num = n\n    print(max_num)\n    return \"\""
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for line in stdin.splitlines():\n        numbers = [int(n) for n in line.split()]\n        result = max(result, max(numbers) * (sum(numbers) - max(numbers)))\n    return str(result)"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\")\n    'No solutions'\n    >>> solution(\"3\")\n    'No solutions'\n    >>> solution(\"1\\n2\\n2\\n1\")\n    'No solutions'\n    >>> solution(\"3\\n2\\n1\")\n    'No solutions'\n    >>> solution(\"3\\n2\\n1\\n1\")\n    'No solutions'\n    >>> solution(\"3\\n2\\n1\\n2\")\n    'No solutions'\n    >>> solution(\"3\\n2\\n1\\n3\")\n    'No solutions'\n    \"\"\"\n    n = int(stdin.readline())\n    if n == 0:\n        return \"No solutions\"\n    nums = [int(x) for x in stdin.readline().split()]\n    if len(nums)!= n:\n        return \"No solutions\"\n    ans = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            ans = max(ans, i * j - nums[i] * nums[j])\n    return str(ans)\n"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Accepts a string, and for each doublet of consecutive dice values, counts the number of doubles in a row.\n    :param stdin: input string\n    :return: output string\n    \"\"\"\n    n = int(stdin)\n    for _ in range(n):\n        rolls = [int(x) for x in stdin.split(\" \")]\n        doubles = [0] * 7\n        prev = rolls[0]\n        for i in range(1, len(rolls)):\n            if rolls[i] == prev:\n                doubles[6] += 1\n            else:\n                doubles[rolls[i] - 1] += 1\n            prev = rolls[i]\n        if max(doubles) > 2:\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d1s1, d1s2 = stdin.readline().strip().split()\n    ds = [int(d1s1), int(d1s2)]\n    for line in stdin.readlines():\n        d2s1, d2s2 = line.strip().split()\n        ds.append(int(d2s1))\n        ds.append(int(d2s2))\n\n    dp = [0] * n\n    dp[0] = ds[1] == ds[2]\n    dp[1] = ds[3] == ds[4]\n    dp[2] = ds[5] == ds[6]\n    for i in range(3, n):\n        dp[i] = dp[i-1] and ds[i] == ds[i+1] and ds[i+2] == ds[i+3]\n    return \"Yes\" if any(dp) else \"No\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    dice = [int(x) for x in stdin.readline().split()]\n    prev = [0, 0]\n    for die in dice:\n        if die == prev[0]:\n            if die == prev[1]:\n                return \"Yes\"\n            prev[1] = die\n        else:\n            prev = [die, 0]\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_lines = stdin.count('\\n') + 1\n    line_length = len(stdin.split('\\n')[0])\n    input_array = [stdin.split('\\n')[i][:line_length - 1] for i in range(number_of_lines)]\n\n    doublets = False\n    for i in range(1, number_of_lines):\n        first_roll = input_array[i - 1][0]\n        second_roll = input_array[i][0]\n        if first_roll == second_roll:\n            first_roll = input_array[i - 1][1]\n            second_roll = input_array[i][1]\n            if first_roll == second_roll:\n                doublets = True\n                break\n    if doublets:\n        print('Yes')\n    else:\n        print('No')\n    return\n"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d1, d2 = map(int, stdin.readline().split())\n    d1, d2 = (d1, d2) if d1 <= d2 else (d2, d1)\n    doublets = 0\n    for i in range(3, n):\n        d1, d2 = map(int, stdin.readline().split())\n        if d1 == d2:\n            doublets += 1\n        elif d1 == d2 - 1:\n            doublets += 1\n        elif d1 == d2 - 2:\n            doublets += 1\n    return 'Yes' if doublets >= 3 else 'No'\n\nsolution(stdin)\n"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline()[:-1]\n    L = list(map(int, stdin.readline().split()))\n    result = \"Yes\"\n    for i in range(1, len(L)):\n        if L[i] == L[i - 1]:\n            L[i], L[i - 1] = L[i - 1], L[i]\n            if L[i] == L[i - 1] and L[i] == L[i - 2]:\n                result = \"Yes\"\n                L[i], L[i - 1] = L[i - 1], L[i]\n                if L[i] == L[i - 1] and L[i] == L[i - 2]:\n                    result = \"No\"\n    return result"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    doubles = set()\n    for _ in range(N):\n        doubles.add(tuple(int(i) for i in stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(2, len(doubles)):\n        if doubles.count(doubles[i - 2]) >= 3:\n            count += 1\n    print('Yes' if count > 0 else 'No')\n\nsolution(input())"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * int(stdin) * 4)"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    return str(int(4 * math.pi * r * r / (math.pi * math.pi)))"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    return str(int(4 * math.pi * radius * radius / (math.pi * math.pi)))\n"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n\n    def area_circle(radius: int) -> int:\n        return radius ** 2 * 3.14\n\n    return str(area_circle(r) / area_circle(1))"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(int(4 * math.pi * r))\n\nassert (solution('') == '0')\nassert (solution('2') == '4')\nassert (solution('0') == '0')\nassert (solution('3') == '12')\nassert (solution('99999') == '0')\nassert (solution('9999999') == '1')\nassert (solution('9999901') == '10')\nassert (solution('9999910') == '100')\nassert (solution('9999991000') == '1000')\nassert (solution('9999999999999') == '999999')\nassert (solution('99999999900001') == '1')\n\n\"\"\"\n\nfrom math import pi\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here.\n    return str(int(stdin))"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline().strip())\n    return str(int(r * 4 / 3.141592653589793))\n\nassert(solution(\"2\") == \"4\")\nassert(solution(\"5\") == \"60\")\nassert(solution(\"100\") == \"360\")\nassert(solution(\"1000\") == \"12800\")\nassert(solution(\"10000\") == \"25600\")\n"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(math.pi * (float(stdin) ** 2)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    r = 0\n    for i in range(n - 1):\n        if l[i] < r:\n            print('No')\n            break\n        r += l[i]\n    else:\n        print('Yes')"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    L = list(map(int, stdin.readline().split()))\n    maxLength = 0\n    for i in range(1, N):\n        maxLength = max(maxLength, L[i])\n    if maxLength >= sum(L) - maxLength:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    l = [int(i) for i in stdin.readline().split(' ')]\n    return \"Yes\" if max(l) < sum(l) else \"No\"\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    l.sort()\n    return \"Yes\" if l[0] + sum(l[1:]) < max(l) else \"No\"\n\nimport sys\nfrom functools import reduce\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    side_lengths = [int(x) for x in stdin.readline().split()]\n    print(\"Yes\" if max(side_lengths) < sum(side_lengths) else \"No\")"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    m = max(l)\n    s = sum(l)\n    if m < s:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    n = int(line[0])\n    line = line[1:]\n    lengths = [int(line[i]) for i in range(n)]\n    lengths.sort()\n    if lengths[-1] < sum(lengths[:-1]):\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # do not modify this line\n    pass\n"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(x) for x in stdin.split()]\n    if n < 3 or sum(l) % n!= 0:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, *data = stdin.strip().split()\n    N, M = [int(x) for x in data]\n    \n    for _ in range(N):\n        S, C = [int(x) for x in stdin.readline().strip().split()]\n        \n        if S * C >= M * 10:\n            continue\n        \n        M = S * C\n        \n        for x in range(1, M + 1):\n            if str(x).startswith(str(C)):\n                print(x)\n                break\n        else:\n            print(-1)\n        \n    return stdin.read()\n\nprint(solution(input()))\n"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    N, M = [int(x) for x in stdin[0].split(' ')]\n    A = [int(x) for x in stdin[1:]]\n    for n in range(N):\n        tmp = [i for i in range(1, 10)]\n        for i in range(M):\n            tmp[A[i]-1] = -1\n        if max(tmp)!= -1:\n            return str(max(tmp))\n    return '-1'"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    s, c = [int(x) for x in stdin.split()]\n    \n    # corner case\n    if n < 0 or m < 0 or n > 3 or m > 5:\n        return \"-1\"\n    \n    if s < 1 or s > n:\n        return \"-1\"\n    \n    if c < 0 or c > 9:\n        return \"-1\"\n    \n    if s == 1:\n        if n == 1:\n            return str(c)\n        return str(c) + str(c)\n    \n    # minimum candidate\n    target = s - 1\n    for i in range(10, -1, -1):\n        if target < 9:\n            return str(target)\n        target = (target - 9) * (i - 1) // 9\n    return \"-1\""
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    if m < 0 or m > 5 or n < 1:\n        return '-1'\n    s, c = [int(x) for x in stdin.split(' ')]\n    if s < 1 or c < 0 or c > 9 or n < s:\n        return '-1'\n    sums = [s]\n    cums = [c]\n    for i in range(1, m):\n        sums.append(sums[i - 1] * 10 + s)\n        cums.append(cums[i - 1] * 10 + c)\n    for i in range(n - m + 1):\n        if sums[i] <= sums[n - m] and cums[i] <= cums[n - m]:\n            return str(sums[i] + cums[i])\n    return '-1'\n\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    first_m_digits = list(map(int, stdin.split()[1:1+m]))\n    second_m_digits = list(map(int, stdin.split()[1+m:]))\n    if n == 0:\n        return '-1'\n    elif n == 1:\n        return ''.join(map(str, first_m_digits))\n    elif n == 2:\n        return ''.join(map(str, second_m_digits))\n    elif n == 3:\n        return ''.join(map(str, first_m_digits)) + ''.join(map(str, second_m_digits))\n"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3\")\n    702\n    \"\"\"\n    N, M = [int(x) for x in stdin.split()]\n    for _ in range(N):\n        s, c = [int(x) for x in stdin.split()]\n        if s * 10 ** (M - 1) + c < 0:\n            return str(-1)\n    return str(s * 10 ** (M - 1) + c)"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return output"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    digits = [int(n) for n in stdin.strip().split(' ')]\n    n, m = digits[0], digits[1]\n    s, c = [int(n) for n in stdin.strip().split(' ')]\n\n    s_values = {s: c}\n    max_s_value = s\n\n    for s in range(max_s_value, 0, -1):\n        if s in s_values:\n            continue\n        if not is_good_value(s, n):\n            continue\n        s_values[s] = is_good_value(s, n)\n\n        if s_values[s] == n:\n            break\n\n    for s in range(max_s_value, 0, -1):\n        if s in s_values:\n            print(s_values[s])\n            break\n    else:\n        print(-1)\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num: str = stdin[0]\n    num: str = num.split()\n    N, M = num[0], num[1]\n    N, M = int(N), int(M)\n    if 1 <= N <= 3 and 1 <= M <= 5:\n        num: list = stdin[2:]\n        num: list = num.split()\n        for i in range(0, N):\n            num[i] = int(num[i])\n        for i in range(0, N):\n            if num[i] < 0:\n                num[i] = 0\n        for i in range(0, M):\n            num[i] = int(num[i])\n        max_ = int(''.join(str(x) for x in num))\n        if max_ <= int(''.join(str(x) for x in num[:M])) and max_ >= int(''.join(str(x) for x in num[:M][::-1])):\n            print(max_)\n        else:\n            print(-1)\n    else:\n        print(-1)"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    digits = list(map(int, stdin.split()))\n    for i in range(n):\n        if (digits[i] > 0) and (digits[i] < 10):\n            continue\n        else:\n            return '-1'\n    for i in range(n):\n        if (digits[i] == 0) and (digits[i+1] == 0):\n            continue\n        else:\n            return '-1'\n    for i in range(n):\n        if digits[i] < digits[i+1]:\n            continue\n        else:\n            return '-1'\n    max_num = 1\n    for i in range(n):\n        if (digits[i] == 0) and (digits[i+1] == 0):\n            continue\n        else:\n            max_num *= 10\n            max_num += 1\n    return str(max_num)"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(num) for num in stdin.split()]\n    return str(sum([n, n-k, n-2*k]))"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k == 1:\n        return 0\n    elif k == 2:\n        return n * (n - 1) * (n - 2) // 6\n    else:\n        return sum([n - i * (n - 1) // k for i in range(1, (n - 1) // k + 1)])\n\nassert(solution(\"3 2\") == 9)\nassert(solution(\"1 2\") == 0)\nassert(solution(\"1 1\") == 0)\nassert(solution(\"2 1\") == 0)\nassert(solution(\"2 2\") == 0)\nassert(solution(\"3 1\") == 0)\nassert(solution(\"3 3\") == 0)\nassert(solution(\"3 2\") == 9)\nassert(solution(\"5 3\") == 60)\nassert(solution(\"10 3\") == 318)\nassert(solution(\"10 2\") == 660)\nassert(solution(\"100 3\") == 62334)\nassert(solution(\"1000 3\") == 1687760)\nassert(solution(\"1000 2\") == 3576000)\n\n-----Best-Case Speed-----\nLog(N)\n\n-----Worst-Case Speed-----\nO(N^2)\n\"\"\"\n"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int, stdin.split(\" \"))\n    return (a+b) * (b+c) * (c+a) - (a*b + b*c + c*a)"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(\" \")\n    return \"\".join(str(int(n) - i * k) for i in range(3, int(n) * 2))\n"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(factorial(n) // (factorial(n - k) * factorial(k)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(factorial(n) / (factorial(n - 2) * 2))\n\ndef"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split(\" \"))\n    return str(int(N * (N - 1) * (N - 2) / 6 - (N - K) * (N - K - 1) * (N - K - 2) / 12))"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(n * (n + 1) * (n + 2) // 6 - sum(1 for i in range(n + 1, n + k + 1) if i % k == 0))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(n) for n in stdin.split()]\n    return str(pow(N, 3) - (N - 1) * pow(K - 1, 3) - (N - 1) * pow(K, 3) + pow(K, 3) + 2 * pow(K, 3) * (N - 1) + pow(K, 3) * (N - 1))"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(int(((n - 2) * (n - 1) * (n + 1) / 6) - (n / k) ** 3))\n\nassert (solution('''3 2''')) == '9'\nassert (solution('''10 6''')) == '49'\nassert (solution('''11 7''')) == '126'\nassert (solution('''12 8''')) == '226'\nassert (solution('''18 19''')) == '720'\nassert (solution('''23 22''')) == '1188'\nassert (solution('''27 29''')) == '1484'\nassert (solution('''30 35''')) == '2808'\nassert (solution('''32 37''')) == '3264'\nassert (solution('''39 41''')) == '3480'\nassert (solution('''43 44''')) == '3408'\nassert (solution('''49 50''')) == '3442'\nassert (solution('''50 52''')) == '3492'\nassert (solution('''53 54''')) == '3514'\nassert (solution('''57 60''')) == '3536'\nassert (solution('''60 64''')) == '3572'\nassert (solution('''68 69''')) == '3590'\nassert (solution('''70 72''')) == '3618'\nassert (solution('''72 76''')) == '3636'\nassert (solution('''78 79''')) == '3654'\nassert (solution('''82 83''')) == '3672'\nassert (solution('''86 87''')) == '3690'\nassert (solution('''90 91''')) == '3718'\nassert (solution('''92 93''')) == '3736'\nassert (solution('''96 97''')) == '3754'\nassert (solution('''100 99''')) == '3772'\nassert (solution('''103 104''')) == '3790'\nassert (solution('''107 108''')) == '3808'\nassert (solution('''111 112''')) == '3816'\nassert (solution('''115 116''')) == '3824'\nassert (solution('''119 120''')) == '3832'\nassert (solution('''123 124''')) == '3840'\nassert (solution('''127 128''')) == '3848'\nassert (solution('''131 132''')) == '3856'\nassert (solution('''135 136''')) == '3864'\nassert (solution('''139 140''')) == '3872'\nassert (solution('''143 144''')) == '3880'\nassert (solution('''149 152''')) == '3888'\nassert (solution('''153 154''')) == '3906'\nassert (solution('''157 158''')) == '3914'\nassert (solution('''161 162''')) == '3922'\nassert (solution('''165 166''')) == '3930'\nassert (solution('''169 170''')) == '3938'\nassert (solution('''173 174''')) == '3946'\nassert (solution('''177 180''')) == '3954'\nassert (solution('''179 182''')) == '3962'\nassert (solution('''183 184''')) == '3970'\nassert (solution('''187 188''')) == '3978'\nassert (solution('''191 192''')) == '3986'\nassert (solution('''195 196''')) == '4004'\nassert (solution('''199 200''')) == '4012'\nassert (solution('''203 204''')) == '4020'\nassert (solution('''207 208''')) == '4028'\nassert (solution('''211 212''')) == '4036'\nassert (solution('''215 216''')) == '4044'\nassert (solution('''219 220''')) == '4052'\nassert (solution('''223 224''')) == '4060'\nassert (solution('''227 228''')) == '4068'\nassert (solution('''231 232''')) == '4076'\nassert (solution('''235 236''')) == '4084'\nassert (solution('''239 240''')) == '4092'\nassert (solution('''243 244''')) == '4100'\nassert (solution('''247 248''')) == '4108'\nassert (solution('''251 252''')) == '4116'\nassert (solution('''255 256''')) == '4124'\nassert (solution('''259 260''')) == '4132'\nassert (solution('''263 264''')) == '4140'\nassert (solution('''267 268''')) == '4148'\nassert (solution('''271 272''')) == '4156'\nassert (solution('''275 276''')) == '4164'\nassert (solution('''279 280''')) == '4172'\nassert (solution('''283 284''')) == '4180'\nassert (solution('''287 288''')) == '4188'\nassert (solution('''291 292''')) == '4196'\nassert (solution('''295 296''')) == '4204'\nassert (solution('''299 300''')) == '4212'\nassert (solution('''303 304''')) == '4220'\nassert (solution('''307 308''')) == '4228'\nassert (solution('''311 312''')) == '4236'\nassert (solution('''315 316''')) == '4244'\nassert (solution('''319 320''')) == '4252'\nassert (solution('''323 324''')) == '4260'\nassert (solution('''327 328''')) == '4268'\nassert (solution('''331 332''')) == '4276'\nassert (solution('''335 336''')) == '4294'\nassert (solution('''339 340''')) == '4312'\nassert (solution('''343 344''')) == '4320'\nassert (solution('''347 348''')) == '4328'\nassert (solution('''351 352''')) == '4336'\nassert (solution('''355 356''')) == '4354'\nassert (solution('''359 360''')) == '4362'\nassert (solution('''363 364''')) == '4370'\nassert (solution('''367 368''')) == '4378'\nassert (solution('''371 372''')) == '4386'\nassert (solution('''375 376''')) == '4400'\nassert (solution('''379 380''')) == '4408'\n"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(''.join('1' if char == '0' else '0' for char in stdin[::-1]), 2))\n\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = []\n    while n > 0:\n        res.append(str(n % -2))\n        n //= -2\n    return \"\".join(res[::-1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    binary = \"\"\n    if number == 0:\n        binary = \"0\"\n    while number > 1:\n        binary = str(number % 2) + binary\n        number //= 2\n    return binary"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.strip()))\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(''.join('1' if n == '0' else '0' for n in stdin), 2))"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin)))[2:]"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(''.join('0' if i % 2 == 0 else '1' for i in range(int(stdin))), 2))"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    res = []\n    while num > 0:\n        res.append(num % -2)\n        num = num // -2\n    return ''.join(map(str, res[::-1]))"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = '1'\n    while n > 0:\n        if n % 2 == 1:\n            s = '0' + s\n        n = n // -2\n    return s"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    price = [int(x) for x in stdin.split()]\n    all_cans = sum(price)\n    total_cans = m\n    can_cans = [0] * n\n    for i in range(n):\n        can_cans[i] = total_cans / price[i]\n        total_cans -= can_cans[i] * price[i]\n\n    for i in range(1, n):\n        can_cans[i] -= can_cans[i-1]\n    \n    max_can_cans = max(can_cans)\n    can_cans = [0] * n\n    for i in range(n-1, -1, -1):\n        can_cans[i] = can_cans[i-1] - can_cans[i]\n        if can_cans[i] > max_can_cans:\n            can_cans[i] = max_can_cans\n\n    can_cans[0] = can_cans[-1] = min(can_cans[0], m - all_cans)\n    money_earned = 0\n    for i in range(n):\n        money_earned += can_cans[i] * price[i]\n\n    return str(money_earned)\n\nassert(solution(input()) == \"0\")\n\nassert(solution(input()) == \"15\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"17\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"10\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"11\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"10\")\nassert(solution(input()) == \"11\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"10\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"12\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"13\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"11\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"15\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"10\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"14\")\nassert(solution(input()) == \"11\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"12\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"11\")\nassert(solution(input()) == \"10\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"12\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"15\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"11\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"13\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"12\")\nassert(solution(input()) == \"10\")\nassert(solution(input()) == \"14\")\nassert(solution(input()) == \"11\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"13\")\nassert(solution(input()) == \"15\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"10\")\nassert(solution(input()) == \"11\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"14\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"15\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"10\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"12\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"1\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"11\")\nassert(solution(input()) == \"10\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"3\")\nassert(solution(input()) == \"7\")\nassert(solution(input()) == \"6\")\nassert(solution(input()) == \"2\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"11\")\nassert(solution(input()) == \"9\")\nassert(solution(input()) == \"5\")\nassert(solution(input()) == \"12\")\nassert(solution(input()) == \"10\")\nassert(solution(input()) == \"14\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"12\")\nassert(solution(input()) == \"11\")"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(\" \")]\n    A = [int(x) for x in stdin.split(\" \")]\n    B = [int(x) for x in stdin.split(\" \")]\n\n    left = []\n    for i in range(N):\n        left.append(A[i] - B[i])\n\n    if left[0] < 0:\n        return \"Insufficient funds!\"\n\n    index = -1\n    for i in range(len(left)):\n        if left[i] < 0:\n            index = i\n            break\n\n    if index == -1:\n        return \"Did not find an index\"\n\n    while index < len(left) - 1:\n        if left[index] > 0:\n            if index + 1 < len(left):\n                if left[index + 1] > 0:\n                    left[index] += left[index + 1]\n                    left[index + 1] = 0\n                else:\n                    return \"Did not find an index\"\n            else:\n                return \"Did not find an index\"\n        index += 1\n\n    return sum(left)"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    N_unique_A = set(map(int, stdin.split(' ')))\n    A = []\n    for i in range(N):\n        A.append(map(int, stdin.split(' ')))\n    minimum = N + 1\n    for A_i in N_unique_A:\n        num_cans = min(A_i // A[0][0], M)\n        new_minimum = A_i * num_cans\n        for j in range(1, N):\n            num_cans_this = min(A[j][0] // A[j][1], num_cans)\n            new_minimum = min(new_minimum, A_i * num_cans_this)\n            num_cans = num_cans_this\n        minimum = min(minimum, new_minimum)\n    return str(minimum)"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The minimum amount of money with which Takahashi can buy M cans of energy drinks.\"\"\"\n    n, m = tuple(map(int, stdin.split(\" \")))\n    num = stdin.strip().split(\"\\n\")\n    min_price = 0\n    for store in num:\n        store = store.split(\" \")\n        a, b = int(store[0]), int(store[1])\n        if a > m:\n            continue\n        elif m < a * b:\n            continue\n        else:\n            min_price += a * b\n    print(min_price)"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n\n    # profits = [int(stdin.split()) for stdin in stdin.splitlines()]\n    # profits = [int(stdin) for stdin in stdin.splitlines()]\n    profits = [int(stdin.strip()) for stdin in stdin.splitlines()]\n\n    dp = [[0] * (M + 1) for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        for j in range(M, -1, -1):\n            if j >= profits[i - 1]:\n                dp[i][j] = max(dp[i - 1][j], profits[i - 1] + dp[i - 1][j - profits[i - 1]])\n\n    print(dp[N][M])\n"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    r = []\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        r.append((a, b))\n    r.sort(key=lambda x: x[1])\n    res = 0\n    c = 0\n    for a, b in r:\n        c += a\n        res += a * b\n        if c > m:\n            break\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_np(stdin))\n\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum amount of money with which Takahashi can buy M cans of energy drinks.\n\n    Args:\n        stdin (str): The input given by stdin.\n\n    Returns:\n        str: The minimum amount of money with which Takahashi can buy M cans of energy drinks.\n    \"\"\"\n    N, M = map(int, stdin.split())\n    cans = list(map(int, stdin.split()))\n    cans = sorted(cans)\n    max_val = max(cans)\n    result = 0\n    while result < M:\n        result += max_val\n    return str(result)\n\n\"\"\"\n------[ HUPS: ]------\nComplexity:\nTime: O(NlogN + MlogM)\nSpace: O(N)\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    possible_moves = 0\n    current_max = 0\n\n    for i in range(1, len(h)):\n        if h[i - 1] > h[i]:\n            possible_moves += 1\n        else:\n            current_max = max(current_max, possible_moves)\n            possible_moves = 0\n    return max(current_max, possible_moves)\n"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_aux(stdin))\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = [int(i) for i in stdin.split()]\n    result = 0\n    curr_height = heights[0]\n    for i in range(1, n):\n        if curr_height < heights[i]:\n            result += 1\n            curr_height = heights[i]\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The first part of this problem is to get the height of each square.\n    Let's call these the heights.\n    So the first line of the input represents N, the number of squares.\n    The next line of the input contains N integers, each integer is the height of a square.\n    Then the answer is the maximum number of times you can move.\n    \"\"\"\n\n    # Split the input into a list of ints\n    # and the number of squares\n    h = stdin.split()\n    h = [int(h[1])] + [int(x) for x in h[2:]]\n\n    # This variable is the maximum number of times you can move\n    max_moves = 0\n\n    # We do this for every height\n    for i in range(1, len(h)):\n        # If the height of the current square is greater than the height of the previous square\n        # and we can move right to the next square,\n        if h[i] > h[i - 1] and max_moves + 1 > max_moves:\n            # Increment the number of moves\n            max_moves += 1\n\n    # Print the maximum number of times you can move\n    return max_moves"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    h = list(map(int, stdin.strip().split(' ')))\n    max = 0\n    for i in range(1, n):\n        if max < h[i] / h[i-1]:\n            max = h[i] / h[i-1]\n    return str(max)\n"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip().split()[0]\n    H = stdin.strip().split()\n    return str(move(int(N), H))\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    result = 0\n    for x in a:\n        result += x % 2\n    if k <= result:\n        return 0\n    if k == result + 1:\n        return 1\n    result += k - result\n    return result"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a = a * 2\n    ans = 0\n    for i in range(len(a)):\n        a[i] = int(a[i] / 2)\n        ans += a[i]\n    ans = (ans - (k-1)) // k\n    return str(ans)\n"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n    a.sort()\n\n    from functools import lru_cache\n    @lru_cache(None)\n    def _find_min_operations(remain):\n        if remain < 0: return None\n        if remain == 0: return 0\n\n        result = None\n        for i in range(1, n):\n            next_remain = remain - (a[i] // 2)\n            next_op = _find_min_operations(next_remain)\n            if next_op is None: continue\n            result = next_op + 1 if result is None else min(result, next_op + 1)\n\n        return result\n\n    return str(_find_min_operations(k))"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    mod = 1000000007\n    dp = [[0 for i in range(k + 1)] for j in range(n)]\n    for i in range(n):\n        dp[i][0] = 1\n    for i in range(1, n):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            if a[i] % 2 == 0:\n                dp[i][j] = (dp[i][j] + dp[i - 1][j - 1]) % mod\n    return str(dp[n - 1][k])\n\n\nimport sys"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0445 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u0447\u0442\u043e\u0431\u044b \u0434\u043e\u0441\u0442\u0438\u0447\u044c k \u0440\u0430\u0432\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    >>> solution('''5 3\n    ... 1 2 2 4 5''')\n    1\n    '''\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(min(k, len(a)))\n    \n"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # split stdin on the number of equal elements\n    n, k = [int(i) for i in stdin.split(' ')]\n    # split the array into the elements\n    array = stdin.split(' ')\n    # convert the elements into integers\n    a = [int(i) for i in array]\n    # initialize the dp table\n    dp = [n]*(k+1)\n    # fill the dp table with the numbers with no operations\n    for i in range(1, k+1):\n        dp[i] = i-1\n    # for each element of the array, try to find the closest element below it\n    for i in range(1, n):\n        # if the element is even, try to divide it by 2\n        if a[i]%2 == 0:\n            a[i] = a[i]//2\n            # initialize the min distance for this number\n            dist = n\n            # try to find the closest below it\n            for j in range(i-1, -1, -1):\n                if a[j]%2 == 0:\n                    dist = min(dist, abs(a[j]-a[i])-1)\n                    a[i] = a[i] - a[j]\n                    if a[j] == 0:\n                        break\n            dp[a[i]] = min(dp[a[i]], dist)\n    # if all elements were equal, just return 0\n    if dp[0] == n:\n        return '0'\n    # otherwise, we just need to check the first number in the array\n    else:\n        return str(dp[0])"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    answer = 0\n    \n    for i in range(n):\n        while a[i] % 2 == 0:\n            a[i] //= 2\n            answer += 1\n\n    return str(answer)\n\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    operations = 0\n\n    for i in range(n):\n        a[i] = a[i] / 2\n\n    while True:\n        flag = True\n\n        for i in range(n):\n            if a[i]!= 0:\n                a[i] = a[i] // 2\n                flag = False\n\n        if flag:\n            break\n\n        operations += 1\n\n    return str(operations)"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    minimum = float(\"inf\")\n\n    for i in range(0, len(a)):\n        for j in range(1, n):\n            a[i] = a[i] - j\n            minimum = min(minimum, len(set(a)))\n\n            a[i] = a[i] + j\n    print(minimum)\n    return \"\""
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1\")\n    '0'\n    >>> solution(\"3 5\")\n    '1'\n    >>> solution(\"2 4\")\n    '1'\n    >>> solution(\"5 4\")\n    '1'\n    >>> solution(\"10 5\")\n    '1'\n    >>> solution(\"5 3\")\n    '2'\n    >>> solution(\"10 4\")\n    '2'\n    >>> solution(\"2 3\")\n    '0'\n    >>> solution(\"1 3\")\n    '1'\n    >>> solution(\"10 10\")\n    '0'\n    >>> solution(\"4 9\")\n    '2'\n    >>> solution(\"5 2\")\n    '1'\n    >>> solution(\"1000000 1000000\")\n    '0'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n    operations = 0\n    for index in range(n):\n        while numbers[index] % 2 == 0:\n            numbers[index] /= 2\n            operations += 1\n        if numbers[index] > k:\n            return str(operations)\n    return \"0\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(n):\n        if a[i] == min(a):\n            count += 1\n        if a[i] == max(a):\n            count += 1\n    return count"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    k = int(stdin.split()[1])\n\n    a.sort()\n    result = 0\n\n    for i in range(len(a)):\n        if a[i] < k:\n            result += k - a[i]\n            a[i] = k\n\n    return str(result)"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a = sorted(a)\n    if k == len(a):\n        return 0\n    elif k == 1:\n        return 1\n    elif k == 2:\n        if a[0] == a[1]:\n            return 1\n        else:\n            return 2\n    else:\n        count = 0\n        count += k // 2\n        temp = k - count * 2\n        for i in range(temp):\n            if i > a[i]:\n                count += 1\n        if count > n - k:\n            return n - k\n        else:\n            return count"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = list(map(int, stdin.split()[1:]))\n\n    # count the number of elems that are already at their target value\n    cnt = 0\n    for i in range(n):\n        if a[i] == i + 1:\n            cnt += 1\n\n    # check if there's enough elems to satisfy the requirments\n    if cnt >= k:\n        return 0\n\n    # count the number of moves\n    moves = 0\n    for i in range(n):\n        # remove the current element from the list\n        a[i] = 0\n        # if the current elem is smaller than the target, increase it by 1\n        if a[i] < i + 1:\n            a[i] += 1\n            moves += 1\n        # if the current elem is larger than the target, decrease it by 1\n        elif a[i] > i + 1:\n            a[i] -= 1\n            moves += 1\n\n    return moves\n\nprint(solution(input()))\n"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    result = 0\n    for index, num in enumerate(a):\n        if num == min(a):\n            a[index] += 1\n            result += 1\n    return str(result)"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    mx = max(a)\n    mn = min(a)\n    first, second, third, fourth = 0, 0, 0, 0\n    if mx - k >= mn:\n        first = 1\n        third = k - mx\n    else:\n        first = k - mn\n    if mn - k >= mx:\n        second = 1\n        fourth = k - mn\n    else:\n        second = k - mx\n    return str(min(first, second) + third + fourth)"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, k = stdin.strip().split(' ')\n    k = int(k)\n    a = list(map(int, stdin.strip().split(' ')))\n    t = 0\n    #   -1 for first element\n    #   +1 for last element\n    while max(a)!= min(a):\n        t += 1\n        # find max\n        max_index = a.index(max(a))\n        max_element = a[max_index]\n        a[max_index] = max_element - 1\n        # find min\n        min_index = a.index(min(a))\n        min_element = a[min_index]\n        a[min_index] = min_element + 1\n    return t"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    result = 0\n    min_a, max_a = min(a), max(a)\n    while min_a <= max_a:\n        count = 0\n        for i in range(n):\n            if a[i] > min_a:\n                a[i] -= 1\n                count += 1\n        if count >= k:\n            result = count\n            break\n        min_a += 1\n\n    return str(result)"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n_author_ = 'jake'\n_project_ = 'leetcode'\nclass Solution(object):\n    def minimumCost(self, n, a, b, q):\n        \"\"\"\n        :type n: int\n        :type a: int\n        :type b: int\n        :type q: int\n        :rtype: List[int]\n        \"\"\"\n        from heapq import heappush, heappop\n        cost = [a, b]\n        pq = []\n        heappush(pq, (0, 0))\n        for _ in range(q):\n            r, l = map(int, stdin.readline().split())\n            heappush(pq, (l, cost[r-1]))\n            heappush(pq, (r, cost[1-r]))\n        res = []\n        while pq:\n            cost, r = heappop(pq)\n            while r:\n                heappush(pq, (r, cost))\n                r -= 1\n                if not pq:\n                    break\n            cost += heappop(pq)\n            while pq:\n                res.append(cost)\n                cost, r = heappop(pq)\n                heappush(pq, (r, cost))\n        return res\n\nimport unittest\n\nclass UnitTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        cls.soln = Solution()\n\n    def testMinimumCost(self):\n        self.assertEqual(self.soln.minimumCost(n = 1, a = 1, b = 3, q = 1), 3)\n        self.assertEqual(self.soln.minimumCost(n = 2, a = 1, b = 5, q = 2), 7)\n        self.assertEqual(self.soln.minimumCost(n = 100, a = 1, b = 5, q = 50), 12)"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\n\nassert(solution(sys.stdin.read()) == '')\n"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    for _ in range(q):\n        n1, a, b = map(int, stdin.split())\n        x = min(n1 * b, n * a)\n        print(x)\nsolution(stdin.read())\n"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    queries = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    return '\\n'.join(map(str, solve(queries)))\n\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    res = []\n    for _ in range(q):\n        n, a, b = [int(x) for x in stdin.split()]\n        res.append(n // min(a, b))\n    return '\\n'.join(str(x) for x in res)"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n   ... 10 1 3\n   ... 7 3 2\n   ... 1 1000 1\n   ... 1000000000000 42 88\n   ... ''')\n    10\n    9\n    1000\n    42000000000000\n    \"\"\"\n    queries = [int(x) for x in stdin.split('\\n')]\n    return '\\n'.join(str(min(int(n_i * a_i + b_i), int(n_i * b_i + a_i))) for n_i, a_i, b_i in queries)\n"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    b = [int(x) for x in stdin.readline().strip().split(' ')]\n    q = int(stdin.readline())\n    queries = []\n    for _ in range(q):\n        queries.append([int(x) for x in stdin.readline().strip().split(' ')])\n\n    a = sorted(a)\n    b = sorted(b)\n\n    count = 0\n\n    i = 0\n    j = 0\n\n    answers = []\n    while i < len(a) and j < len(b):\n        if a[i] <= b[j]:\n            count += a[i]\n            i += 1\n        else:\n            count += b[j]\n            j += 1\n\n        answers.append(count)\n\n    for query in queries:\n        print(answers[query[0]-1])"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    \n"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    queries = [stdin.split() for stdin in stdin.split('\\n')[1:]]\n    ans = []\n    for a, b, n in queries:\n        w = min(int(a * b), int(n / 2), int(n / 2) + int(n % 2))\n        ans.append(w)\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = list(map(int, stdin.split()))\n    L = list(map(int, stdin.split()))\n    return str(solution_aux(L, X))\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n\n    if x < 1:\n        raise ValueError('x must be a positive integer')\n\n    lines = [int(x) for x in stdin.split()]\n    if len(lines)!= n:\n        raise ValueError('The length of lines must equal n')\n\n    # Calculate the answer\n    bounces = 0\n    previous = 0\n    for i in range(n):\n        if i == 0:\n            bounces += 1\n        else:\n            bounces += 1 if lines[i] >= previous else 0\n            previous = lines[i]\n\n    return str(bounces)"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_bounces = int(stdin.readline().strip())\n    bounces = stdin.readline().strip().split()\n    num_bounces, num_bounces_at_max_coord = 0, 0\n\n    for i in range(num_bounces, len(bounces)):\n        if int(bounces[i]) <= int(bounces[i - 1]):\n            num_bounces_at_max_coord += 1\n        if i == len(bounces) - 1:\n            num_bounces_at_max_coord += 1\n\n    return num_bounces_at_max_coord\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n\n    A = [0] * (N + 1)\n    for i in range(N):\n        A[i + 1] = l[i] + A[i]\n\n    # count the number of bounces from 0 to X\n    return str(sum(1 for j in range(X + 1) if A[j] <= X))"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, X = [int(x) for x in stdin.strip().split()]\n    L = [int(x) for x in stdin.strip().split()]\n    # The maximum x-axis value is 2**31 - 1\n    # N + 1 bounces\n    count = 0\n    bounce_limit = X + 1\n    for i in range(N):\n        bounce_limit = bounce_limit - (L[i] * 2)\n        if bounce_limit <= 0:\n            count += 1\n    print(count)"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X = [int(num) for num in stdin.strip().split(' ')]\n\n    bounces = 0\n    for _ in range(N):\n        length, index = [int(num) for num in stdin.strip().split(' ')]\n        if index + length > X:\n            bounces += 1\n\n    return str(bounces)"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.strip().split(\" \"))\n    line = stdin.strip().split(\" \")\n    L = []\n    for i in line:\n        L.append(int(i))\n    print(L)\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(1, x + 1):\n            if j == L[i - 1] or j == L[i - 1] + L[i - 2]:\n                res += 1\n    return str(res)\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    if x >= sum(l):\n        return 0\n    return l.count(0) + 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.strip().split())\n    L = list(map(int, stdin.strip().split()))\n    # Let's make a cumulative list\n    cumulative_sum = [0]\n    for i in range(N):\n        cumulative_sum.append(cumulative_sum[-1] + L[i])\n    \n    def get_x(n):\n        if n <= X:\n            return n\n        for i in range(N):\n            if cumulative_sum[i] - n > X:\n                return i\n        return N\n    \n    count = 0\n    for i in range(N):\n        for j in range(get_x(cumulative_sum[i])):\n            count += 1\n    \n    return str(count)"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = stdin.readline()\n    if answer[0] == 'Y':\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 2 and n <= 100:\n        for _ in range(n):\n            w = stdin.readline().strip()\n            if len(w) > 1 and len(w) <= 10:\n                for _ in range(len(w)):\n                    if len(w) >= 2:\n                        if w[0] == w[-1]:\n                            w = w[1:-1]\n                        else:\n                            break\n            else:\n                continue\n            if w:\n                print('Yes')\n            else:\n                print('No')"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if is_shiritori(stdin) else \"No\")"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes'"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N):\n        word = stdin.readline().strip()\n        if word[0] == word[-1] and word not in words_announced:\n            words_announced.append(word)\n            if len(words_announced) == N:\n                return 'Yes'\n    return 'No'"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 'No'\n    elif n == 1:\n        return 'Yes'\n    else:\n        word = list(stdin.split())\n        for w in word:\n            if w[0]!= word[-1][-1]:\n                return 'No'\n            elif len(w) > len(word[-1]):\n                return 'No'\n        return 'Yes'"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_words = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(num_words)]\n    for i in range(num_words - 1):\n        if words[i] in words[i+1:]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    words = [stdin[1], stdin[2], stdin[3], stdin[4], stdin[5], stdin[6], stdin[7], stdin[8], stdin[9]]\n    result = \"Yes\"\n    if not N < 2 or not N < 10:\n        return \"No\"\n    if not N == len(words):\n        return \"No\"\n    return result"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a * (b + 1) // 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a_b = list(map(int, stdin.split()))\n    return str(min(a_b[0] * a_b[1], a_b[1] * a_b[0]))"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    guests, pieces = [int(x) for x in stdin.split()]\n    return str(max(1, min(guests, pieces // 2)))"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    return A * int(B)\n\nassert(solution(\"2 3\") == 6)\nassert(solution(\"5 9\") == 60)\nassert(solution(\"5 7\") == 70)\nassert(solution(\"7 7\") == 140)\nassert(solution(\"7 5\") == 95)\nassert(solution(\"9 7\") == 105)\nassert(solution(\"7 5\") == 95)\nassert(solution(\"1 2\") == 1)\nassert(solution(\"1 1\") == 1)\nassert(solution(\"10 10\") == 100)\n\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    return str(max(A, B) * 4)"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.strip().split(' ')\n    return str(int(m) * int(n) // 2)"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_guests = stdin.strip().split(' ')[0]\n    num_pieces = stdin.strip().split(' ')[1]\n    guests = [int(x) for x in num_guests]\n\n    if num_guests == '0':\n        return '0'\n    elif num_guests == '1':\n        return str(guests[0])\n    elif num_guests == '2':\n        return str(guests[0]*2)\n    elif num_guests == '3':\n        return str(guests[0]*3)\n    elif num_guests == '4':\n        return str(guests[0]*4)\n    elif num_guests == '5':\n        return str(guests[0]*5)\n    else:\n        return str(guests[0]*6)"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = (int(x) for x in stdin.split())\n    return str(min(A * 2, B * 3))"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    print(A * A + B * B)"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_guests, num_of_snack = map(int, stdin.strip().split(\" \"))\n\n    total_pieces = num_of_guests * num_of_snack\n\n    if total_pieces % 2!= 0:\n        return \"{}\".format(total_pieces + 1)\n\n    return \"{}\".format(total_pieces)"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.replace('a','x')\n    x = x.replace('e','x')\n    x = x.replace('i','x')\n    x = x.replace('o','x')\n    x = x.replace('u','x')\n    print(x)\n    return(x)"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    print(''.join(['x' for i in S]))\n    return ''"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    for i in stdin:\n        result += \"x\"\n    return result"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    for i in range(len(s)):\n        s = s[:i] + 'x' + s[i + 1:]\n    return s"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n@pytest.mark.parametrize(\n    ('input', 'expected'),\n    (\n        ('sardine', 'xxxxxxx'),\n    ),\n)\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin[0], 'x')"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(('x' if c =='s' else c) for c in stdin)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    characters = list(stdin)\n    print(''.join(map(lambda x: 'x' if x.isalpha() else x, characters)))"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"s\", \"x\").replace(\"d\", \"x\").replace(\"i\", \"x\").replace(\"e\", \"x\").replace(\"n\", \"x\")"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return ''.join(['x' for _ in s])"
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n\n    for i in range(1, len(h)):\n        if h[i-1] > h[i]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    H = list(map(int, stdin.readline().strip().split()))\n    index = [i for i in range(N)]\n    while H!= sorted(H):\n        for i in index:\n            if H[i] == max(H):\n                H[i] -= 1\n    return 'Yes' if H == sorted(H) else 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function returns a string. It's the solution to the problem statement.\n    >>> solution(\"1 2 1 1 3\")\n    'Yes'\n    \"\"\"\n    n = int(stdin.splitlines()[0])\n    h = [int(x) for x in stdin.splitlines()[1].split()]\n\n    for i in range(1, n):\n        if h[i - 1] >= h[i]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    H = [int(x) for x in stdin[1].split(\" \")]\n    for i in range(1,len(H)):\n        if H[i]<H[i-1]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n\n    >>> solution(\"1 2 1 1 3\")\n    'Yes'\n\n    >>> solution(\"2 2 1 1 2\")\n    'Yes'\n\n    >>> solution(\"2 3 1 3 3 2\")\n    'No'\n    \"\"\"\n    n = int(stdin)\n    heights = [int(i) for i in stdin.split()]\n    stack = [heights[0]]\n    for height in heights[1:]:\n        while len(stack) >= 2 and height < stack[-2]:\n            stack.pop()\n        stack.append(height)\n    return \"Yes\" if len(stack) == 1 else \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    A = [int(x) for x in stdin.split(' ')]\n    print(A)\n    for i in range(1, n):\n        if A[i] < A[i - 1]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = [int(stdin.readline().strip()) for _ in range(n)]\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if heights[j] >= heights[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return 'Yes' if max(dp) <= n else 'No'"
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_non_decreasing(stdin) else 'No'\n\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n_m = [int(x) for x in stdin.split(' ')]\n    n = n_m[0]\n    m = n_m[1]\n    c = int(stdin.split(' ')[2])\n    b = [int(x) for x in stdin.split(' ')[3:]]\n\n    def solve(a, b, c):\n        \"\"\"\n        >>> solution('2 3 -10')\n        1\n        >>> solution('1 2 3')\n        0\n        >>> solution('3 2 1')\n        1\n        \"\"\"\n        result = 0\n        for i in range(n):\n            for j in range(m):\n                result += a[i] * b[j]\n        return result + c > 0\n\n    return str(sum(solve(a, b, c) for a, b, c in zip(\n        *[iter(b)] * 3)))"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    arr = [map(int, stdin.split()) for _ in range(n)]\n    matrix = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = arr[i][j - 1] + arr[i][j] + arr[i][j + 1]\n    for i in range(n):\n        for j in range(m):\n            arr[i][j] += c\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] > 0:\n                return '1'\n    return '0'"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    assert n == len(stdin.split()) - 1\n    assert m == len(stdin.split()[-1])\n    assert c > 0\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split()[-1].split())))\n    return str(sum([matrix[i][j] * matrix[j][i] for i in range(n) for j in range(i, n)] + [c]))"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    a = [map(int, stdin.split()) for _ in range(n)]\n    b = [int(stdin) for _ in range(m)]\n    s = 0\n    for i in range(n):\n        if min(a[i]) * b[0] + max(a[i]) * b[1] + max(a[i]) * b[2] + c > 0:\n            s += 1\n    return str(s)"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    B = list(map(int, lines[1].split()))\n    A = list(map(int, lines[2].split()))\n\n    count = 0\n\n    for i in range(N):\n        cur = sum(A[i+j] * B[j] for j in range(M))\n\n        if cur > 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_cases = int(stdin.readline())\n    for _ in range(number_of_cases):\n        N, M, C = [int(n) for n in stdin.readline().split()]\n        A = [int(n) for n in stdin.readline().split()]\n        B = [int(n) for n in stdin.readline().split()]\n        A.sort(reverse=True)\n        B.sort(reverse=True)\n        number_of_solutions = 0\n        for i in range(M):\n            for j in range(M):\n                if A[i] * B[j] > 0:\n                    number_of_solutions += 1\n                    break\n        print(number_of_solutions)\n\nsolution(stdin)\n\"\"\"\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.strip().splitlines()[2:]))"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''2 3 -10\n1 2 3\n3 2 1\n1 2 2\n''')\n    '1'\n    >>> solution('''2 3 -100\n1 2 3\n3 2 1\n1 2 2\n''')\n    '0'\n    '''\n    n, m, c = map(int, stdin.split())\n    b = list(map(int, stdin.rstrip().split()))\n    b.sort(reverse=True)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (b[i] * b[j]) % m == c:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    A = []\n    B = []\n    for i in range(N):\n        A.append(map(int, stdin.split()))\n        B.append(int(stdin.split()[i+1]))\n    return solve(A, B, C)\n\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(solution(stdin.strip()))\n\nassert(solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\\n1 2 2\\n1 2 2\") == \"1\")\nassert(solution(\"2 4 -10\\n1 2 3 4\\n3 2 1 2\\n1 2 2 3\\n1 2 2 3\") == \"4\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) // 1000)"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = N // 1000\n    N = N % 1000\n    result = result + (N // 100)\n    N = N % 100\n    result = result + (N // 50)\n    N = N % 50\n    result = result + (N // 20)\n    N = N % 20\n    result = result + (N // 10)\n    N = N % 10\n    result = result + (N // 5)\n    N = N % 5\n    result = result + (N // 2)\n    N = N % 2\n    return str(result)"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 0 or N > 10000:\n        return \"error\"\n    return str(N // 1000)"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    money = int(stdin)\n    return str(money//1000*1000)"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        N, A, B = list(map(int, stdin.readline().split()))\n        print(N * (N + 1) // 2 - A * (A + 1) // 2 - B * (B + 1) // 2)\n\nsolution(None)\n"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    A = list(map(int, stdin[1].split(\" \")))\n    B = list(map(int, stdin[2].split(\" \")))\n\n    heroes = [0] * N\n    for i in range(N):\n        heroes[i] = (A[i], B[i])\n    heroes.sort(key=lambda x: x[1])\n\n    tally = 0\n    for i in range(N):\n        if i == 0:\n            tally += heroes[i][1]\n        else:\n            tally += heroes[i][0]\n\n    return tally\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(stdin.readline()) for _ in range(N)]\n    B = [int(stdin.readline()) for _ in range(N)]\n    \n    memo = {}\n    def dp(idx, attacked):\n        if (idx, attacked) in memo:\n            return memo[(idx, attacked)]\n\n        if idx == N:\n            return 0\n        \n        ans = float('-inf')\n        for attack in range(attacked+1):\n            if attack > B[idx]:\n                break\n            \n            ans = max(ans, dp(idx+1, attacked) + (A[idx] - attack) * B[idx])\n\n        memo[(idx, attacked)] = ans\n        return ans\n\n    return str(dp(0, 0))\n\nprint(solution(None))\n"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    a = [int(x) for x in stdin.readline().split(' ')]\n    b = [int(x) for x in stdin.readline().split(' ')]\n    m = a[0]\n    for i in range(n):\n        m += max(a[i], b[i])\n        a[i+1] += a[i]\n        b[i+1] += b[i]\n    return str(m)\n\nprint(solution(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = [int(i) for i in lines[1].split()]\n    B = [int(i) for i in lines[2].split()]\n\n    # Find the maximum possible number of monsters we can defeat\n    count = 0\n    for i in range(N):\n        count += max(0, A[i] - B[i])\n\n    return str(count)"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N, A, B = [int(x) for x in stdin.splitlines()[0].split()]\n    A_array = [int(x) for x in stdin.splitlines()[1].split()]\n    B_array = [int(x) for x in stdin.splitlines()[2].split()]\n\n    # Initialize a dynamic programming array to store the monsters can be defeated by the heroes\n    dp = [0 for _ in range(N + 1)]\n    dp[0] = 0\n    dp[1] = A_array[1]\n\n    for i in range(2, N + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2] + A_array[i], B_array[i - 1])\n\n    return str(dp[N])"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    heroes, towns, monsters = map(int, stdin.split())\n    # TODO: Use the fact that there is a solution for N = 0\n    return \"9\""
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.splitlines()[0].split()]\n    town_count = [int(x) for x in stdin.splitlines()[1].split()]\n\n    heroes_sum = A * (N + 1)\n\n    return str(heroes_sum - B)"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *monsters = list(map(int, stdin.split()))\n    assert len(monsters) == n\n    return max(min(a, b) for a, b in zip(monsters, monsters[1:] + monsters[:1]))\n"
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = list(map(int, stdin.split()))\n    if x < y:\n        x, y = y, x\n    for i in range(1, n+1):\n        if x >= i:\n            if x - i == y - i:\n                print(\"War\")\n                return\n    print(\"No War\")\n    return"
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    x = [int(x) for x in stdin.split()[1:]]\n    y = [int(y) for y in stdin.split()[-1:]]\n    print(\"War\" if X < 16 <= Y else \"No War\")\n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = [int(x) for x in stdin.split(\" \")]\n    if X < Y:\n        x_i = sorted(list(map(int, stdin.split(\" \")[3:])))\n        y_i = sorted(list(map(int, stdin.split(\" \")[1:3])))\n    else:\n        y_i = sorted(list(map(int, stdin.split(\" \")[3:])))\n        x_i = sorted(list(map(int, stdin.split(\" \")[1:3])))\n    Z = max(x_i[i] for i in range(N))\n    if X < Z <= Y:\n        return \"War\"\n    return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1, *x = [int(x) for x in stdin.split()]\n    y_1, *y = [int(y) for y in stdin.split()]\n    N, M = len(x), len(y)\n    if any(x < z <= y for z in zip(x, y)):\n        return \"War\"\n    return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = list(map(int, stdin.split()))\n    print('War' if x < z else 'No War')"
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = [int(x) for x in stdin.split()]\n    if M < N:\n        N, M = M, N\n        X, Y = Y, X\n\n    if (X < Y and all(x < Y for x in range(N, X - 1, -1))) or (Y < X and all(y >= X for y in range(M, Y - 1, -1))):\n        return \"War\"\n    else:\n        return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = list(map(int, stdin.split()))\n    if X < Y:\n        x = list(map(int, stdin.split()))\n        x.sort()\n        y = list(map(int, stdin.split()))\n        y.sort()\n    elif X > Y:\n        y = list(map(int, stdin.split()))\n        y.sort()\n        x = list(map(int, stdin.split()))\n        x.sort()\n    if x == y:\n        print(\"No War\")\n    else:\n        print(\"War\")"
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = [int(x) for x in stdin.split()]\n    if N < M:\n        N, M = M, N\n    x = [int(x) for x in stdin.split()[:N]]\n    y = [int(y) for y in stdin.split()[N:]]\n    x.sort()\n    y.sort()\n    if X > Y:\n        X, Y = Y, X\n    if x == Y or y == X:\n        return \"No War\"\n    z = 0\n    while z <= Y:\n        for i in range(len(x) - 1):\n            if x[i] > z and x[i + 1] < z:\n                return \"War\"\n            if y[i] < z <= y[i + 1]:\n                return \"War\"\n        z += 1\n    return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, x, y = map(int, stdin.split(\" \"))\n    if x > y:\n        x, y = y, x\n    if N > 100:\n        return \"No War\"\n    if x > M or y > N:\n        return \"No War\"\n    if x == y:\n        return \"No War\"\n    return \"War\""
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = stdin.strip().split()\n    N, M, X, Y = int(N), int(M), int(X), int(Y)\n    x = list(map(int, stdin.strip().split()[:N]))\n    y = list(map(int, stdin.strip().split()[N:]))\n    for i in x:\n        if i == X:\n            continue\n        if i > X:\n            return \"No War\"\n    for i in y:\n        if i == Y:\n            continue\n        if i < Y:\n            return \"No War\"\n    Z = X if X < Y else Y\n    return \"War\" if x == y else \"No War\""
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N = int(stdin.readline())\n    T = [int(stdin.readline()) for _ in range(N)]\n    seconds = 0\n    for i in range(N):\n        seconds += T[i]\n    seconds %= 360\n    if seconds == 0:\n        return str(seconds)\n    else:\n        return str(seconds + 360)\n"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    T = list(map(int, stdin.split(' ')))\n    second = 0\n    for i in range(N):\n        second += T[i]\n        T[i] += 360\n    print(second)"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_clocks = stdin.readline().strip()\n    T_i = stdin.readline().strip().split()\n    T_i = [int(x) for x in T_i]\n\n    min_time = 0\n    for i in range(int(num_of_clocks)):\n        min_time += T_i[i]\n\n    return min_time"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline()\n    N = int(N)\n    times = [0] * N\n    for i in range(N):\n        T = stdin.readline()\n        T = int(T)\n        times[i] = T\n    total_time = 0\n    for i in range(N):\n        total_time += 360 * times[i]\n    return str(total_time)"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split(' ')))\n    hand = 360\n    time = 0\n    for i in range(n):\n        time += t[i] * hand\n        hand *= 360\n    return str(time)\n\n\nprint(solution('2'))\nprint(solution('2 3'))\nprint(solution('2 3 3'))\nprint(solution('2 3 3 2'))\nprint(solution('3'))\nprint(solution('3 3'))\nprint(solution('3 3 3'))\nprint(solution('3 3 3 2'))\nprint(solution('5'))\nprint(solution('5 3'))\nprint(solution('5 3 3'))\nprint(solution('5 3 3 2'))\nprint(solution('10'))\nprint(solution('10 3'))\nprint(solution('10 3 3'))\nprint(solution('10 3 3 2'))\nprint(solution('15'))\nprint(solution('15 3'))\nprint(solution('15 3 3'))\nprint(solution('15 3 3 2'))\nprint(solution('20'))\nprint(solution('20 3'))\nprint(solution('20 3 3'))\nprint(solution('20 3 3 2'))\nprint(solution('25'))\nprint(solution('25 3'))\nprint(solution('25 3 3'))\nprint(solution('25 3 3 2'))\nprint(solution('30'))\nprint(solution('30 3'))\nprint(solution('30 3 3'))\nprint(solution('30 3 3 2'))\nprint(solution('35'))\nprint(solution('35 3'))\nprint(solution('35 3 3'))\nprint(solution('35 3 3 2'))\nprint(solution('40'))\nprint(solution('40 3'))\nprint(solution('40 3 3'))\nprint(solution('40 3 3 2'))\nprint(solution('45'))\nprint(solution('45 3'))\nprint(solution('45 3 3'))\nprint(solution('45 3 3 2'))\nprint(solution('50'))\nprint(solution('50 3'))\nprint(solution('50 3 3'))\nprint(solution('50 3 3 2'))\nprint(solution('55'))\nprint(solution('55 3'))\nprint(solution('55 3 3'))\nprint(solution('55 3 3 2'))\nprint(solution('60'))\nprint(solution('60 3'))\nprint(solution('60 3 3'))\nprint(solution('60 3 3 2'))\nprint(solution('65'))\nprint(solution('65 3'))\nprint(solution('65 3 3'))\nprint(solution('65 3 3 2'))\nprint(solution('70'))\nprint(solution('70 3'))\nprint(solution('70 3 3'))\nprint(solution('70 3 3 2'))\nprint(solution('75'))\nprint(solution('75 3'))\nprint(solution('75 3 3'))\nprint(solution('75 3 3 2'))\nprint(solution('80'))\nprint(solution('80 3'))\nprint(solution('80 3 3'))\nprint(solution('80 3 3 2'))\nprint(solution('85'))\nprint(solution('85 3'))\nprint(solution('85 3 3'))\nprint(solution('85 3 3 2'))\nprint(solution('90'))\nprint(solution('90 3'))\nprint(solution('90 3 3'))\nprint(solution('90 3 3 2'))\nprint(solution('95'))\nprint(solution('95 3'))\nprint(solution('95 3 3'))\nprint(solution('95 3 3 2'))\nprint(solution('100'))\nprint(solution('100 3'))\nprint(solution('100 3 3'))\nprint(solution('100 3 3 2'))\nprint(solution('105'))\nprint(solution('105 3'))\nprint(solution('105 3 3'))\nprint(solution('105 3 3 2'))\nprint(solution('110'))\nprint(solution('110 3'))\nprint(solution('110 3 3'))\nprint(solution('110 3 3 2'))\nprint(solution('115'))\nprint(solution('115 3'))\nprint(solution('115 3 3'))\nprint(solution('115 3 3 2'))\nprint(solution('120'))\nprint(solution('120 3'))\nprint(solution('120 3 3'))\nprint(solution('120 3 3 2'))\nprint(solution('125'))\nprint(solution('125 3'))\nprint(solution('125 3 3'))\nprint(solution('125 3 3 2'))\nprint(solution('130'))\nprint(solution('130 3'))\nprint(solution('130 3 3'))\nprint(solution('130 3 3 2'))\nprint(solution('135'))\nprint(solution('135 3'))\nprint(solution('135 3 3'))\nprint(solution('135 3 3 2'))\nprint(solution('140'))\nprint(solution('140 3'))\nprint(solution('140 3 3'))\nprint(solution('140 3 3 2'))\nprint(solution('145'))\nprint(solution('145 3'))\nprint(solution('145 3 3'))\nprint(solution('145 3 3 2'))\nprint(solution('150'))\nprint(solution('150 3'))\nprint(solution('150 3 3'))\nprint(solution('150 3 3 2'))\nprint(solution('155'))\nprint(solution('155 3'))\nprint(solution('155 3 3'))\nprint(solution('155 3 3 2'))\nprint(solution('160'))\nprint(solution('160 3'))\nprint(solution('160 3 3'))\nprint(solution('160 3 3 2'))\nprint(solution('165'))\nprint(solution('165 3'))\nprint(solution('165 3 3'))\nprint(solution('165 3 3 2'))\nprint(solution('170'))\nprint(solution('170 3'))\nprint(solution('170 3 3'))\nprint(solution('170 3 3 2'))\nprint(solution('175'))\nprint(solution('175 3'))\nprint(solution('175 3 3'))\nprint(solution('175 3 3 2'))\nprint(solution('180'))\nprint(solution('180 3'))\nprint(solution('180 3 3'))\nprint(solution('180 3 3 2'))\nprint(solution('185'))\nprint(solution('185 3'))\nprint(solution('185 3 3'))\nprint(solution('185 3 3 2'))\nprint(solution('190'))\nprint(solution('190 3'))\nprint(solution('190 3 3'))\nprint(solution('190 3 3 2'))\nprint(solution('195'))\n"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    clocks = [int(stdin.readline().strip()) for _ in range(n)]\n\n    max_val = max(clocks)\n\n    rotate = []\n    for i in range(1, max_val):\n        rotate.append(clocks.count(i))\n\n    return str(sum(rotate))"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #TODO: implement solution\n    return ''\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    Ts = [int(stdin.readline().strip()) for _ in range(N)]\n    return str(max(Ts) * 2)"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip().split('\\n')[0]\n    N = int(N)\n    T = stdin.strip().split('\\n')[1].split()\n    T = [int(t) for t in T]\n    \n    total = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            total += T[i] * T[j]\n    return str(total)"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    n = int(n)\n    clock = [int(stdin.readline().strip()) for _ in range(n)]\n    hand = [0] * n\n    hands = 0\n    for i in range(n):\n        hand[i] = (hand[i] + clock[i]) % 360\n        hands += hand[i]\n    print(hands)"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    weights = [int(weight) for weight in stdin.readline().split()]\n    \n    min_diff = abs(sum(weights[:N]) - sum(weights[N:]))\n    \n    for t in range(2, N):\n        wt1, wt2 = weights[:t], weights[t:]\n        if sum(wt1) == sum(wt2):\n            min_diff = min(min_diff, abs(sum(wt1) - sum(wt2)))\n    return str(min_diff)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *weights = [int(x) for x in stdin.split()]\n    \n    def recurse(t: int) -> Tuple[float, float]:\n        if t == n:\n            return 0, 0\n        \n        m1, m2 = float('inf'), float('inf')\n        for i in range(n):\n            if i > t:\n                m1 = min(m1, recurse(i)[0])\n            else:\n                m2 = min(m2, recurse(i)[1])\n        \n        return m1 + weights[t], m2 + weights[t]\n        \n    return f'{abs(recurse(0)[0] - recurse(0)[1]):.0f}'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(sum(int(num) for num in stdin.split(\" \")) - sum(int(num) for num in stdin.split(\" \")[1:])))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    n = int(data[0])\n    weights = [int(x) for x in data[1].split(\" \")]\n    N = len(weights)\n    S_1 = sum(weights[:N//2])\n    S_2 = sum(weights[N//2:])\n    return str(abs(S_1 - S_2))\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = [int(x) for x in stdin.split(\" \")]\n    div = {}\n    for i in range(n):\n        div[i+1] = m[i]\n    l = sorted(div.items(), key=lambda x: x[1])\n    s1 = sum([x[1] for x in l[:n]])\n    s2 = sum([x[1] for x in l[n:]])\n    return abs(s1-s2)"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weights = [int(w) for w in stdin.readline().strip().split()]\n    partition1, partition2 = partition(n, weights)\n    return abs(partition1 - partition2)\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *weights = [int(x) for x in stdin.split(' ')]\n\n    def helper(start, end):\n        if start == end:\n            return abs(start - sum(weights[:start]))\n\n        best_diff = abs(start - sum(weights[:start]))\n        for i in range(start, end):\n            diff = helper(start, i) + helper(i + 1, end)\n            best_diff = min(best_diff, diff)\n\n        return best_diff\n\n    return str(helper(1, n))"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write a function that returns the minimum absolute difference of two groups of elements from a sequence of integers.\n    \"\"\"\n    n = int(stdin.readline())\n    seq = tuple(int(x) for x in stdin.readline().split())\n    return str(min(abs(sum(seq[:n]) - sum(seq[n:])), abs(sum(seq[:n]) - sum(seq[n:]))))"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    w = [int(x) for x in stdin.split(\" \")]\n    s1, s2 = 0, 0\n    for i in range(n):\n        s1 += w[i]\n        w[i] = -w[i]\n    w.sort()\n    w.reverse()\n    for i in range(n):\n        s2 += w[i]\n        w[i] = -w[i]\n    return str(abs(s1 - s2))"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    W = [int(w) for w in stdin.readline().split()]\n    T = int(stdin.readline())\n    w_min, w_max = min(W), max(W)\n\n    def dfs(i: int, s1: int, s2: int) -> int:\n        if i == N:\n            return abs(s1 - s2)\n        if T == 1:\n            return min(dfs(i + 1, s1 + w_min, s2 + w_max), dfs(i + 1, s1 + w_max, s2 + w_min))\n\n        return min(dfs(i + 1, s1 + w_max, s2 + w_max), dfs(i + 1, s1 + w_min, s2 + w_min))\n\n    return str(dfs(0, 0, 0))\n\nassert solution('2\\n1 2\\n') == '0'\nassert solution('3\\n1 2 3\\n') == '0'\nassert solution('3\\n1 2 3\\n4 1\\n') == '2'\nassert solution('3\\n1 2 3\\n4 1\\n2 1\\n') == '4'\nassert solution('3\\n1 2 3\\n4 1\\n2 1\\n3 1\\n') == '0'\nassert solution('3\\n1 2 3\\n4 1\\n2 1\\n3 1\\n4 1\\n') == '0'\nassert solution('3\\n1 2 3\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n') == '0'\nassert solution('3\\n1 2 3\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n') == '0'\nassert solution('3\\n1 2 3\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n') == '0'\nassert solution('3\\n1 2 3\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n3 1\\n4 1\\n2 1\\n"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m = map(int, stdin[0].split())\n    matrix = [[int(num) for num in line.split()] for line in stdin[1:]]\n    moves = 0\n    # Transpose the matrix\n    matrix = zip(*matrix)\n    # Shift columns cyclically\n    for column in range(m):\n        for row in range(1, n):\n            matrix[row][column], matrix[row - 1][column] = matrix[row - 1][column], matrix[row][column]\n    # Transpose the matrix back\n    matrix = zip(*matrix)\n    # Shift columns cyclically\n    for column in range(m):\n        for row in range(1, n):\n            matrix[row][column], matrix[row - 1][column] = matrix[row - 1][column], matrix[row][column]\n    # Transpose the matrix back\n    matrix = zip(*matrix)\n    return \"\".join(map(str, matrix))"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    moves = 0\n    for j in range(1, m + 1):\n        for i in range(1, n + 1):\n            if matrix[i - 1][j - 1] > i * m + j:\n                matrix[i - 1][j - 1] = i * m + j\n                moves += 1\n\n    return str(moves)"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.rstrip().split(' '))\n    a = [list(map(int, stdin.rstrip().split(' '))) for _ in range(n)]\n    for i in range(1, n):\n        a[i][0] += a[i - 1][0]\n        a[0][i] += a[0][i - 1]\n    for i in range(1, n):\n        for j in range(1, m):\n            a[i][j] += min(a[i - 1][j - 1], a[i - 1][j], a[i][j - 1])\n    return str(a[n - 1][m - 1])"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    shift = 0\n    while True:\n        for i in range(n):\n            for j in range(1, m + 1):\n                matrix[i][(j + shift) % m] = matrix[i][j]\n        shift += 1\n        if all(all(x) for x in matrix):\n            break\n    return str(shift - 1)\n"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    \n    # shift the first column\n    for j in range(1, m):\n        matrix[0][j], matrix[0][j - 1] = matrix[0][j - 1], matrix[0][j]\n    \n    # shift the second column\n    for j in range(1, m):\n        matrix[j][0], matrix[j - 1][0] = matrix[j - 1][0], matrix[j][0]\n    \n    # shift the third column\n    for j in range(1, m):\n        matrix[n - 1][j], matrix[n - 1][j - 1] = matrix[n - 1][j - 1], matrix[n - 1][j]\n    \n    # shift the forth column\n    for j in range(1, m):\n        matrix[j][m - 1], matrix[j - 1][m - 1] = matrix[j - 1][m - 1], matrix[j][m - 1]\n    \n    # shift the fifth column\n    for j in range(1, m):\n        matrix[n - j][0], matrix[n - j - 1][0] = matrix[n - j - 1][0], matrix[n - j][0]\n    \n    return '\\n'.join(str(sum(x)) for x in matrix)\n\nn, m = map(int, input().split())\nmatrix = [[int(x) for x in input().split()] for _ in range(n)]"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    ans = 0\n    while True:\n        tmp = matrix[0][0]\n        for i in range(1, n):\n            matrix[0][i - 1] = matrix[0][i]\n        for i in range(n):\n            matrix[i][n - 1] = matrix[i][0]\n        for i in range(n):\n            for j in range(1, m):\n                matrix[i][j - 1] = matrix[i][j]\n        ans += 1\n        if matrix[0][0] == tmp:\n            break\n    return str(ans)"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    a = []\n    for line in lines[1:]:\n        a.append(list(map(int, line.split())))\n    \n    v = [[-1 for _ in range(m)] for _ in range(n)]\n    v[0][0] = a[0][0]\n    \n    v[0][1] = min(a[0][1], a[1][0])\n    \n    for i in range(2, n):\n        v[i][0] = v[i - 1][0] + a[i][0]\n        v[i][1] = min(v[i - 1][1] + a[i][1], v[i - 1][0] + a[i][1])\n        \n    print(min(v[n - 1][0], v[n - 1][1]))\n\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        row = stdin.split()\n        row = list(map(int, row))\n        matrix.append(row)\n\n    moves = 0\n    while True:\n        if len(matrix) == 1:\n            break\n        moves += 1\n        for i in range(1, len(matrix)):\n            for j in range(m):\n                matrix[i][j] = (i - 1) * m + j\n\n        for i in range(len(matrix)):\n            matrix[i] = matrix[i][m:] + matrix[i][:m]\n\n    for row in matrix:\n        print(' '.join(str(x) for x in row))\n\n    return str(moves)\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(m):\n        for j in range(n):\n            matrix[j][i] = (i - 1) * m + matrix[j][i]\n\n    i, j = n - 1, 0\n    ans = 0\n    while i >= 0 and j < m:\n        ans += min(m - 1, j + i)\n        i -= 1\n        j += m - 1\n    return str(ans)"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    matrix = [map(int, line.split()) for line in lines[1:n+1]]\n    for line in matrix:\n        print(line)"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    skills = [int(skill) for skill in stdin.readline().strip().split(' ')]\n\n    skills.sort()\n    count = 0\n    for i in range(0, n, 2):\n        count += skills[i]\n\n    return str(count)"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    if n % 2!= 0:\n        return \"-1\"\n    a = stdin.strip().split()\n    a = [int(x) for x in a]\n\n    return str(len(a) // 2)"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    a.sort(reverse=True)\n    b = []\n\n    for i in range(len(a)):\n        if i == len(a) - 1:\n            b.append(a[i])\n        elif i % 2 == 0:\n            b.append(a[i])\n        else:\n            b.append(a[i])\n            b.append(a[i])\n\n    print(int(len(a) / 2))\n    return ''\n"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nfrom sys import stdin, stdout\n\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 5 10 2 3 14 5\n   ... ''')\n    '5'\n    \"\"\"\n    stdin = stdin.split('\\n')\n\n    n = int(stdin[0])\n    skills = [int(x) for x in stdin[1].split()]\n\n    a = [0] * n\n    for i in range(n):\n        a[i] = skills[i]\n\n    total = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                total += 1\n\n    return str(total)"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    n = int(n)\n    if n == 0:\n        return '0'\n    skills = stdin.readline().strip().split()\n    skills = [int(skill) for skill in skills]\n\n    numTeams = int(n / 2)\n    totalProblems = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j and skills[i] == skills[j]:\n                totalProblems += 1\n                break\n    return str(totalProblems)\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here\n   ...\n\"\"\"\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(x) for x in stdin.split(' ')]\n    A.sort()\n    team = 0\n    for i in range(0, len(A), 2):\n        team += A[i] - A[i + 1] + 1\n    return str(team)\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_resting(a):\n        for hour in a:\n            if hour:\n                return False\n        return True\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    rest = 0\n    for i in range(n):\n        if is_resting(a[i:]):\n            rest += 1\n\n    return str(rest)\n"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    rest = 0\n    for i in range(1, n):\n        if a[i] == 1 and a[i - 1] == 0:\n            rest += 1\n    return str(rest)\n"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = [int(x) for x in stdin.split()]\n    cur = 0\n    while cur < n - 1:\n        idx = cur\n        while idx < n and res[idx] == res[cur]:\n            idx += 1\n        if idx < n:\n            cur = idx\n            continue\n        if cur == 0:\n            res[cur] = 0\n            cur += 1\n        else:\n            res[cur - 1] = 1\n            cur = 0\n    return str(res.count(0))\n\n\nassert solution('''5''') == '''2'''\nassert solution('''6''') == '''2'''\nassert solution('''7''') == '''3'''\nassert solution('''3''') == '''0'''\nassert solution('''0 0 0''') == '''0'''\nassert solution('''1 0 1 0 1''') == '''2'''\nassert solution('''1 0 1 0 1 0''') == '''3'''\nassert solution('''0 1 0 1 1 0 0''') == '''2'''\nassert solution('''0 1 0 1 1 0 0''') == '''3'''\nassert solution('''1 0 0 0 1''') == '''0'''\nassert solution('''1 0 0 0 1 0''') == '''1'''\nassert solution('''0 0 0''') == '''0'''\nassert solution('''1''') == '''0'''\nassert solution('''1 1''') == '''0'''\nassert solution('''0 1''') == '''0'''\nassert solution('''1 1 1''') == '''0'''\nassert solution('''1 1 1 1''') == '''0'''\nassert solution('''1 1 1 1 1''') == '''0'''\nassert solution('''1 1 1 1 1 1''') == '''0'''\nassert solution('''1 1 1 1 1 1 1''') == '''0'''\nassert solution('''1 1 1 1 1 1 1 1''') == '''0'''\nassert solution('''1 1 1 1 1 1 1 1 1''') == '''0'''\nassert solution('''1 1 1 1 1 1 1 1 1 1''') == '''0'''\nassert solution('''1 1 1 1 1 1 1 1 1 1 1 1 1''') == '''0'''\nassert solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''1 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''2'''\nassert solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '''3'''\nassert solution('''1 0 1 0 1 0 1 0 1 0 1 0 1 0''') == '''2'''\nassert solution('''1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '''3'''\nassert solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''1 0 1 0 1 0 1 0 1 0 1 0 1 0''') == '''2'''\nassert solution('''1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '''3'''\nassert solution('''1 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''1 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '''3'''\nassert solution('''1 0 1 0 1 0 1 0 1 0 1 0 1 0''') == '''2'''\nassert solution('''1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '''3'''\nassert solution('''1 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''1 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '''3'''\nassert solution('''1 0 1 0 1 0 1 0 1 0 1 0 1 0''') == '''2'''\nassert solution('''1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '''3'''\nassert solution('''1 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''1 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '''3'''\nassert solution('''1 0 1 0 1 0 1 0 1 0 1 0 1 0''') == '''2'''\nassert solution('''1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '''3'''\nassert solution('''1 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''1 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '''0'''\nassert solution('''1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '''3'''\nassert solution('''1 0 1 0 1 0 1 0 1 0 1 0 1 0''') == '''2'''\nassert solution('''1 1 1 1 1 1 1 1 1 1 1 1 1 1''') == '''"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    s = [0] * n\n    for i in range(n):\n        s[i] = 0\n        if a[i] == 1:\n            for j in range(i + 1, n):\n                s[j] = 1\n    return str(max(s))\n\n\nassert solution('1\\n0\\n0') == '1'\nassert solution('3\\n0\\n1') == '1'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '2'\nassert solution('3\\n1\\n0') == '0'\nassert solution('3\\n1\\n0\\n0') == '0'\nassert solution('3\\n0\\n0\\n0') == '0'\nassert solution('3\\n0\\n1') == '2'\nassert solution('6\\n1\\n0\\n0\\n0\\n0') == '1'\nassert solution('6\\n1\\n0\\n0\\n0\\n0') == '1'\nassert solution('6\\n1\\n0\\n0\\n0\\n0') == '1'\nassert solution('6\\n0\\n0\\n0\\n0\\n0') == '0'\nassert solution('6\\n0\\n0\\n0\\n0\\n0') == '0'\nassert solution('6\\n0\\n0\\n0\\n0\\n0') == '0'\nassert solution('6\\n1\\n1\\n0\\n1\\n0') == '2'\nassert solution('6\\n1\\n1\\n0\\n1\\n0') == '2'\nassert solution('6\\n1\\n1\\n0\\n1\\n0') == '2'\nassert solution('6\\n1\\n1\\n0\\n1\\n0') == '2'\nassert solution('6\\n1\\n1\\n0\\n1\\n0') == '2'\nassert solution('6\\n1\\n1\\n0\\n1\\n0') == '2'\nassert solution('6\\n1\\n1\\n0\\n1\\n0') == '2'\nassert solution('6\\n1\\n1\\n0\\n1\\n0') == '2'\nassert solution('6\\n1\\n1\\n0\\n1\\n0') == '2'\nassert solution('6\\n1\\n1\\n0\\n1\\n0') == '2'\nassert solution('6\\n1\\n1\\n0\\n1\\n0') == '2'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('6\\n0\\n1\\n0\\n1\\n0') == '0'\nassert solution('"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nassert (solution(\n'''5\n1 0 1 0 1\n''') == '2')\nassert (solution(\n'''6\n0 1 0 1 1 0\n''') == '2')\nassert (solution(\n'''7\n1 0 1 1 1 0 1\n''') == '3')\nassert (solution(\n'''3\n0 0 0\n''') == '0')\nassert (solution(\n'''1\n0\n''') == '0')\nassert (solution(\n'''8\n1 0 1 1 1 1 0 0\n''') == '3')\n"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n\n    return str(N)"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    output = 1\n    for i in range(n, 0, -1):\n        output = output * i\n    return str(output)"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return ''\n    return stdin[0]\n"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\")\n    1\n    >>> solution(\"7\")\n    0\n    \"\"\"\n    return \"\".join(map(lambda x: chr(int(x) + 96), list(stdin)))\n"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    count = 0\n    for i in range(1, n):\n        if (n % i == 0) and (i <= n / i):\n            count += 1\n    if count % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number == 1:\n        return str(0)\n    elif number == 2:\n        return str(1)\n    elif number == 3:\n        return str(2)\n    elif number == 4:\n        return str(3)\n    elif number == 5:\n        return str(4)\n    elif number == 6:\n        return str(5)\n    elif number == 7:\n        return str(6)\n    elif number == 8:\n        return str(7)\n    elif number == 9:\n        return str(8)\n    elif number == 10:\n        return str(9)\n    elif number == 11:\n        return str(10)\n    elif number == 12:\n        return str(11)\n    elif number == 13:\n        return str(12)\n    elif number == 14:\n        return str(13)\n    elif number == 15:\n        return str(14)\n    elif number == 16:\n        return str(15)\n    else:\n        return \"not a valid input\"\n\ndef"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    res = \"\"\n    for x in range(4):\n        res += str(x + 1)\n    return res\n"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> import sys\n    >>> sys.setrecursionlimit(5000)\n    >>> solution(stdin)\n    'The largest of the four numbers is 9.'\n    \"\"\"\n    if stdin:\n        number = int(stdin)\n        if 1 <= number <= 16:\n            if number == 1:\n                print(\"1\")\n            elif number == 2:\n                print(\"2\")\n            elif number == 3:\n                print(\"4\")\n            elif number == 4:\n                print(\"7\")\n            elif number == 5:\n                print(\"6\")\n            elif number == 6:\n                print(\"9\")\n            elif number == 7:\n                print(\"8\")\n            elif number == 8:\n                print(\"5\")\n            elif number == 9:\n                print(\"4\")\n            elif number == 10:\n                print(\"3\")\n            elif number == 11:\n                print(\"2\")\n            elif number == 12:\n                print(\"1\")\n            elif number == 13:\n                print(\"0\")\n            elif number == 14:\n                print(\"9\")\n            elif number == 15:\n                print(\"8\")\n            elif number == 16:\n                print(\"7\")\n        else:\n            print(\"0\")\n    else:\n        print(\"0\")"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # pass\n"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return output"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cheese = {cheese_name: len(cheese_name) for cheese_name in stdin.split()}\n    \n    return str(len(cheese))"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return ''\n\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    cheese = {}\n    for _ in range(N):\n        cheese[stdin.readline().strip().split()[0]] = stdin.readline().strip().split()[1]\n    return sum(1 for _ in range(N) if cheese[stdin.readline().strip().split()[0]] == 'hard')"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cheese = stdin.split(\"\\n\")\n    result = 0\n    for i in cheese:\n        if i[1] == 'hard':\n            result += 1\n    return str(result)"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cheese = {}\n    for line in stdin.splitlines():\n        cheese[line.split()[1]] = line.split()[0]\n    count = 0\n    for key in cheese:\n        if key == \"hard\":\n            count += 1\n    return count"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.strip().split(\"\\n\")))"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n    m = len(a)\n    # c = [0 for _ in range(n)]\n    c = [0 for _ in range(m)]\n    a.sort()\n    b.sort()\n    for i in range(m):\n        c[i] = (a[i] + b[i]) % n\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip().split()\n    a = [int(x) for x in a]\n    b = stdin.readline().strip().split()\n    b = [int(x) for x in b]\n    c = [0] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    return''.join([str(x) for x in c])"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = [0] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    return''.join(map(str, c))\n\nassert(solution(stdin) == '0 0 0 1 0 2 4')\n\nprint(solution(stdin))"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n    b = list(map(int, stdin.readline().strip().split(\" \")))\n    c = [0] * len(a)\n    for i in range(len(a)):\n        c[i] = (a[i] + b[i]) % t\n    return''.join(map(str, c))\n\n\nassert(solution('''4\n0 1 2 1\n3 2 1 1\n''') == '1 0 0 2')\n\nassert(solution('''7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n''') == '0 0 0 1 0 2 4')\n"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    m = len(b)\n    c = [None] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    return''.join(map(str, c))\n"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    b = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    # b = list(b)\n    # b.sort()\n    # print(b)\n    # return ''\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    for i in range(n):\n        print(c[i], end=' ')\n    return ''"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n    b = list(map(int, stdin.readline().strip().split(\" \")))\n    c = [a[i] + b[i] for i in range(n)]\n    c.sort()\n    for i in range(n):\n        print(c[i], end=\" \")\nsolution(stdin)\n"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    for i in sorted(c):\n        print(i, end=\" \")\n    return \"\""
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    b.sort()\n    m = len(a)\n    c = [None] * n\n    for i in range(n):\n        x = a[i % m] + b[i % m]\n        c[x % n] = x\n    return''.join([str(x) for x in c])\n\nassert(solution('''4\n0 1 2 1\n3 2 1 1\n''') == '1 0 0 2')\nassert(solution('''7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n''') == '0 0 0 1 0 2 4')\nprint('All tests passed successfully.')\n"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = [0] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    return''.join(map(str, c))"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution(stdin) == '1')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '1')\nassert(solution(stdin) == '0')\n\n\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)\n\n\n\n-------Testcases------\n\ninput:\n    0\n    1\n    1\n    0\noutput:\n    0\n\ninput:\n    1\n    0\n    1\n    1\noutput:\n    1\n\ninput:\n    0\n    0\n    0\n    1\noutput:\n    1\n\ninput:\n    1\n    1\n    1\n    0\noutput:\n    0\n\ninput:\n    1\n    0\n    0\n    1\noutput:\n    0\n\ninput:\n    1\n    1\n    0\n    0\noutput:\n    1\n"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    row, col = stdin.strip().split(\" \")\n    row = int(row)\n    col = int(col)\n    # your code here\n    return str(int((row*col)/2))\n\n\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    import sys\n    n = int(stdin.readline().strip())\n    A = []\n    for i in range(0,n):\n        A.append(int(stdin.readline().strip()))\n\n    print(A.count(0))\n    return ''"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdout = \"\"\n    stdout = bin(int(stdin))\n    stdout = stdout[2:]\n    return stdout\n"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return '0'\n\n\n\n'''\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return \"0\" if n % 2 == 0 else \"1\"\n\n\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution(\"0\\n1\\n1\\n0\"))\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = [int(s) for s in stdin.strip().split(\"\\n\")]\n    return \"1\" if sum(r) % 2 == 0 else \"0\""
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(bool(stdin.count('0')) ^ bool(stdin.count('1')))\n\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\\n1\\n1\\n0\") == \"0\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    return 'Yes' if d / t / 60 * s >= (d + t) / 2 else 'No'"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of minutes it takes to reach the destination\"\"\"\n    d, t, s = map(int, stdin.split(' '))\n    return \"Yes\" if d / s > t else \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    print('Yes' if T*60 + D*S/D <= T*60 + T/2 <= T*60 + T/2 + D*S/D else 'No')"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.strip().split(\" \"))\n    return \"Yes\" if t / s <= d / s else \"No\"\n\nassert(solution(\"1000 15 80\") == \"Yes\")\nassert(solution(\"1000 15 81\") == \"No\")\nassert(solution(\"1 1 1\") == \"Yes\")\nassert(solution(\"1000 1000 1000\") == \"Yes\")\nassert(solution(\"1000 1500 1500\") == \"No\")\nassert(solution(\"10 2 1\") == \"Yes\")\nassert(solution(\"10 0 1\") == \"Yes\")\nassert(solution(\"1 1 1\") == \"Yes\")\nassert(solution(\"10 10 10\") == \"Yes\")\nassert(solution(\"10 10 9\") == \"No\")\nassert(solution(\"1 1 1000\") == \"No\")\nassert(solution(\"100 1 1\") == \"No\")\nassert(solution(\"10000 1 1\") == \"No\")\nassert(solution(\"10 1000 1000\") == \"Yes\")\nassert(solution(\"1000 1500 1500\") == \"No\")\nassert(solution(\"100 1 1\") == \"No\")\nassert(solution(\"1 1 1\") == \"Yes\")\nassert(solution(\"1 1 100\") == \"No\")\nassert(solution(\"1000 1500 1500\") == \"No\")\nassert(solution(\"1000 1500 7\") == \"No\")\nassert(solution(\"1000 1500 7\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\") == \"No\")\nassert(solution(\"1000 15 7 1\")"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.strip().split())\n    return 'Yes' if t*(s - d) / (s - t) >= 0 else 'No'"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    delta = d / s\n    print(t - delta)"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    return \"Yes\" if (t / s + d) / 60.0 >= t / s else \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.strip().split(\" \"))\n    time = d / s\n    if time <= t:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    return \"Yes\" if t * (t + 1) / 2 < d * (d + 1) / 2 * s else \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split(\" \"))\n\n    return \"Yes\" if T / S >= T // S else \"No\"\n\nassert(solution(\"1000 15 80\") == \"Yes\")\nassert(solution(\"1 1 1\") == \"Yes\")\nassert(solution(\"100 1 10\") == \"No\")\nassert(solution(\"1000 9 9\") == \"No\")\nassert(solution(\"1000 0 9\") == \"No\")\n"
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n@pytest.mark.parametrize('stdin,expected', [\n    (stdin, expected)\n])\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input()  # Ignore line A_{1, 1} A_{1, 2} A_{1, 3}\n    board = []\n    for i in range(3):\n        board.append([int(x) for x in stdin.split()])\n    numbers = [int(x) for x in stdin.split()]\n    rows = [\n        {\n            x: True for x in numbers[0:3]\n        }, {\n            x: True for x in numbers[3:6]\n        }, {\n            x: True for x in numbers[6:9]\n        }\n    ]\n    cols = [\n        {\n            x: True for x in numbers[0:3]\n        }, {\n            x: True for x in numbers[3:6]\n        }, {\n            x: True for x in numbers[6:9]\n        }\n    ]\n    diagonals = [\n        {\n            x: True for x in numbers[0:3]\n        }, {\n            x: True for x in numbers[3:6]\n        }, {\n            x: True for x in numbers[6:9]\n        }\n    ]\n    for i in range(3):\n        for j in range(3):\n            if rows[i][board[i][j]] == False:\n                return \"No\"\n            if cols[j][board[i][j]] == False:\n                return \"No\"\n            if diagonals[i-j][board[i][j]] == False:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    # mark diagonal, top-left to bottom-right\n    # mark top-left, top-left to bottom-right\n    for i in range(n):\n        for j in range(n):\n            a[i][j] = a[i][j] | (a[i][j - 1] if j > 0 else 0) | (a[i - 1][j] if i > 0 else 0)\n\n    # check rows\n    for i in range(n):\n        for j in range(n - 2):\n            if a[i][j] & a[i][j + 1] & a[i][j + 2] & a[i][j + 3] & a[i][j + 4]:\n                return \"Yes\"\n\n    # check columns\n    for j in range(n):\n        for i in range(n - 2):\n            if a[i][j] & a[i + 1][j] & a[i + 2][j] & a[i + 3][j] & a[i + 4][j]:\n                return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.split()\n    size = int(grid[0])\n    b = list(map(int, grid[1:]))\n    count = 0\n    for i in range(3):\n        for j in range(3):\n            if i!= j:\n                if b[i] in [grid[i+j][j], grid[j][i+j]]:\n                    count += 1\n    if count >= 3:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = 3, 3\n    matrix = stdin.split()\n    values = [int(v) for v in stdin.split()]\n    bingo_card = [[0] * cols for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            bingo_card[i][j] = values.pop(0)\n\n    bingo = False\n    for i in range(rows):\n        if bingo_card[i][i] == 3:\n            bingo = True\n        if bingo_card[i][rows - i - 1] == 3:\n            bingo = True\n\n    if not bingo:\n        return \"No\"\n    for i in range(rows):\n        if bingo_card[i][0] == 3:\n            bingo = True\n        if bingo_card[i][rows - 1] == 3:\n            bingo = True\n\n    if not bingo:\n        return \"No\"\n    for i in range(rows):\n        for j in range(cols):\n            if bingo_card[i][j] == 3:\n                bingo = True\n            if bingo_card[j][i] == 3:\n                bingo = True\n\n    if not bingo:\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [list(map(int, line.split())) for line in stdin.strip().split(\"\\n\")]\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        if a[0][i] in b:\n            a[0][i] = -1\n        if a[i][0] in b:\n            a[i][0] = -1\n    # print(a)\n    for row in range(1, n):\n        for col in range(1, n):\n            if a[row][col] in b:\n                if row == col:\n                    if a[row][0] in b:\n                        a[row][0] = -1\n                    if a[0][col] in b:\n                        a[0][col] = -1\n                if col == n - 1 - row:\n                    if a[row][n - 1] in b:\n                        a[row][n - 1] = -1\n                    if a[0][n - 1 - col] in b:\n                        a[0][n - 1 - col] = -1\n                if row == col or col == n - 1 - row:\n                    if a[row][0] in b:\n                        a[row][0] = -1\n                    if a[0][col] in b:\n                        a[0][col] = -1\n                    if a[0][n - 1 - col] in b:\n                        a[0][n - 1 - col] = -1\n                if row == 0:\n                    if a[row][col] in b:\n                        a[row][col] = -1\n                    if a[n - 1][n - 1 - col] in b:\n                        a[n - 1][n - 1 - col] = -1\n                if col == 0:\n                    if a[row][col] in b:\n                        a[row][col] = -1\n                    if a[n - 1][n - 1 - col] in b:\n                        a[n - 1][n - 1 - col] = -1\n    # print(a)\n    for i in range(n):\n        if a[0][i] == -1:\n            break\n    else:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution based on two characteristics:\n    1. All possible values for b_i \\in [1, 100] are distinct.\n    2. b_i!= b_j (i \\neq j)\n    \"\"\"\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    values = lines[1:]\n    m = len(values)\n    if m!= n * n:\n        raise ValueError('Invalid Input')\n    values = [int(value) for value in values]\n    row_values = [set() for _ in range(n)]\n    column_values = [set() for _ in range(n)]\n    diagonal_values = [set() for _ in range(2)]\n    for i in range(n):\n        row_values[i] = {values[i * n + j] for j in range(n)}\n        column_values[i] = {values[j * n + i] for j in range(n)}\n        if i == j:\n            diagonal_values[0].add(values[i * n + j])\n        if i + j == n - 1:\n            diagonal_values[1].add(values[i * n + j])\n    result = True\n    for i in range(m):\n        for j in range(i):\n            if values[i] in row_values[i] and values[j] in column_values[j]:\n                result = False\n                break\n    for i in range(m):\n        if values[i] in diagonal_values[0]:\n            result = False\n            break\n    for i in range(m):\n        if values[i] in diagonal_values[1]:\n            result = False\n            break\n    return 'Yes' if result else 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    grid = []\n    for line in stdin.splitlines():\n        grid.append(line)\n\n    return 'Yes' if is_bingo(grid) else 'No'\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n\n    N, M = map(int, stdin[0].split(' '))\n    A = list(map(int, stdin[1].split(' ')))\n\n    left = 1\n    right = N\n\n    while left < right:\n        mid = left + (right - left) // 2\n\n        used = 0\n        for i in range(M):\n            used += min(mid, A[i])\n            if used > mid:\n                used = A[i]\n                break\n\n        if used > right:\n            right = mid\n        else:\n            left = mid + 1\n\n    if left > N:\n        return -1\n\n    return left\n\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().strip()"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n\n    A = [int(x) for x in stdin.split()]\n\n    if N == 1:\n        return str(A[0])\n\n    A.sort(reverse=True)\n\n    dp = [1 for _ in range(N)]\n    for i in range(1, N):\n        for j in range(1, min(A[i], i) + 1):\n            if j > 1 and A[i] % j == 0:\n                dp[i] = max(dp[i], dp[i - j] + 1)\n    return str(max(dp))\n\nassert(solution(input()) == '30')\n"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    A = list(map(int, stdin.split(\" \")))\n    d = 0\n    for i in A:\n        if i > d:\n            d = i\n    if d * (N // d) < N:\n        print(-1)\n    else:\n        print(d * (N // d))"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_answer(stdin))\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    # greedy\n    return max(\n        (N // i) * (A[i] - 1) + min(N % i, A[i])\n        for i in range(1, min(M, len(A)) + 1)\n    )\n"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    days, assignments = list(map(int, stdin.split(\" \")))\n    assignments.sort()\n    max_days = 0\n    for i in range(1, assignments + 1):\n        max_days += 1\n        days -= i\n        if days < 0:\n            break\n    if days < 0:\n        return \"-1\"\n    return str(max_days)\n\nassert(solution(stdin)) == \"-1\"\nassert(solution(\"5 6\")) == \"30\"\nassert(solution(\"2 4\")) == \"2\"\nassert(solution(\"1 6\")) == \"6\"\nassert(solution(\"4 6\")) == \"4\"\nassert(solution(\"5 6\")) == \"30\"\nassert(solution(\"4 1\")) == \"4\"\nassert(solution(\"9 1\")) == \"9\"\nassert(solution(\"1 10\")) == \"10\"\nassert(solution(\"10 2\")) == \"-1\"\nassert(solution(\"1 2\")) == \"-1\"\nassert(solution(\"11 2\")) == \"-1\"\n\"\"\"\nfrom typing import List\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    if n == m:\n        return -1\n    \n    i, j, k = n - m, n - 1, n - m - 1\n    \n    while k > -1:\n        if a[i] == a[j] == a[k]:\n            k -= 1\n            j -= 1\n        elif a[i] < a[j]:\n            i -= 1\n            continue\n        else:\n            j -= 1\n            continue\n    \n    return i + 1\n\nassert solution('5 2') == 3\nassert solution('5 6') == -1\nassert solution('5 6 7') == 3\nassert solution('4 10') == 4\nassert solution('2 1') == -1\nassert solution('2 2') == -1\n"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, N = [int(x) for x in stdin.split()]\n    return \"5\""
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, _, _, D = map(int, stdin.split())\n    print(pow(D, 100, 100))"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the N-th smallest integer that can be divided by 100 exactly D times\"\"\"\n    _, _, d = map(int, stdin.split())\n    for i in range(1, 10001):\n        if i % 100 == d:\n            return str(i)\n    return \"Goldbach's conjecture is wrong.\""
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The naive approach would be to compute the sum of all the integers from 1 to 100000\n    and then return the integer at the index of the sum that is divisible by 100.\n    This would be O(1) and at the worst case O(100000).\n\n    However, this is still O(NlogN) since we have to sort the array.\n\n    We can improve the runtime by using a binary search approach that is O(N) since the sum of numbers from 1 to 100000 can be computed in O(1).\n\n    We can use the formula (sum + (100 * d) = n) to compute the n-th smallest integer.\n\n    The original equation for (sum + (100 * d) = n) can be written as follows:\n    (sum + (100 * d)) % n = 0\n    (sum + (100 * d)) % n = d * (n - sum)\n    d * (n - sum) = (sum + (100 * d)) % n\n\n    >>> solution('0 3')\n    '100'\n    >>> solution('1 10')\n    '100'\n    >>> solution('1 11')\n    '100'\n    >>> solution('1 12')\n    '101'\n    >>> solution('1 13')\n    '101'\n    >>> solution('1 14')\n    '101'\n    >>> solution('1 15')\n    '101'\n    >>> solution('1 16')\n    '102'\n    >>> solution('1 17')\n    '102'\n    >>> solution('1 18')\n    '103'\n    >>> solution('1 19')\n    '103'\n    >>> solution('1 20')\n    '104'\n    >>> solution('1 21')\n    '104'\n    >>> solution('1 22')\n    '105'\n    >>> solution('1 23')\n    '105'\n    >>> solution('1 24')\n    '105'\n    >>> solution('1 25')\n    '106'\n    >>> solution('1 26')\n    '106'\n    >>> solution('1 27')\n    '106'\n    >>> solution('1 28')\n    '107'\n    >>> solution('1 29')\n    '107'\n    >>> solution('1 30')\n    '107'\n    >>> solution('1 31')\n    '107'\n    >>> solution('1 32')\n    '107'\n    >>> solution('1 33')\n    '108'\n    >>> solution('1 34')\n    '108'\n    >>> solution('1 35')\n    '108'\n    >>> solution('1 36')\n    '109'\n    >>> solution('1 37')\n    '109'\n    >>> solution('1 38')\n    '109'\n    >>> solution('1 39')\n    '109'\n    >>> solution('1 40')\n    '109'\n    >>> solution('1 41')\n    '109'\n    >>> solution('1 42')\n    '109'\n    >>> solution('1 43')\n    '109'\n    >>> solution('1 44')\n    '109'\n    >>> solution('1 45')\n    '109'\n    >>> solution('1 46')\n    '109'\n    >>> solution('1 47')\n    '109'\n    >>> solution('1 48')\n    '109'\n    >>> solution('1 49')\n    '109'\n    >>> solution('1 50')\n    '109'\n    >>> solution('1 51')\n    '109'\n    >>> solution('1 52')\n    '109'\n    >>> solution('1 53')\n    '109'\n    >>> solution('1 54')\n    '109'\n    >>> solution('1 55')\n    '109'\n    >>> solution('1 56')\n    '109'\n    >>> solution('1 57')\n    '109'\n    >>> solution('1 58')\n    '109'\n    >>> solution('1 59')\n    '109'\n    >>> solution('1 60')\n    '109'\n    >>> solution('1 61')\n    '109'\n    >>> solution('1 62')\n    '109'\n    >>> solution('1 63')\n    '109'\n    >>> solution('1 64')\n    '109'\n    >>> solution('1 65')\n    '109'\n    >>> solution('1 66')\n    '109'\n    >>> solution('1 67')\n    '109'\n    >>> solution('1 68')\n    '109'\n    >>> solution('1 69')\n    '109'\n    >>> solution('1 70')\n    '109'\n    >>> solution('1 71')\n    '109'\n    >>> solution('1 72')\n    '109'\n    >>> solution('1 73')\n    '109'\n    >>> solution('1 74')\n    '109'\n    >>> solution('1 75')\n    '109'\n    >>> solution('1 76')\n    '109'\n    >>> solution('1 77')\n    '109'\n    >>> solution('1 78')\n    '109'\n    >>> solution('1 79')\n    '109'\n    >>> solution('1 80')\n    '109'\n    >>> solution('1 81')\n    '109'\n    >>> solution('1 82')\n    '109'\n    >>> solution('1 83')\n    '109'\n    >>> solution('1 84')\n    '109'\n    >>> solution('1 85')\n    '109'\n    >>> solution('1 86')\n    '109'\n    >>> solution('1 87')\n    '109'\n    >>> solution('1 88')\n    '109'\n    >>> solution('1 89')\n    '109'\n    >>> solution('1 90')\n    '109'\n    >>> solution('1 91')\n    '109'\n    >>> solution('1 92')\n    '109'\n    >>> solution('1 93')\n    '109'\n    >>> solution('1 94')\n    '109'\n    >>> solution('1 95')\n    '109'\n    >>> solution('1 96')\n    '109'\n    >>> solution('1 97')\n    '109'\n    >>> solution('1 98')\n    '109'\n    >>> solution('1 99')\n    '109'\n    >>> solution('1 100')\n    '109'\n    >>> solution('2 1')\n    '109'\n    >>> solution('2 2')\n    '109'\n    >>> solution('2 3')\n    '109'\n    >>> solution('2 4')\n    '109'\n    >>> solution('2 5')\n    '109'\n    >>> solution('2 6')\n    '109'\n    >>> solution('2 7')\n    '109'\n    >>> solution('2 8')\n    '109'\n    >>> solution('2 9')\n    '109'\n    >>> solution('2 10')\n    '109'\n    >>> solution('2 11')\n    '109'\n    >>> solution('2 12')\n    '109'\n    >>> solution('2 13')\n    '109'\n    >>> solution('2 14')\n    '109'\n    >>> solution('2 15')\n    '109'\n    >>> solution('2 16')\n    '109'\n    >>> solution('2 17')\n    '109'\n    >>> solution('2 18')\n    '109'\n    >>> solution('2 19')\n    '109'\n    >>> solution('2 20')\n    '109'\n    >>> solution('2 21')\n    '109'\n    >>> solution('2 22')\n    '109'\n    >>> solution('2 23')\n    '109'\n    >>> solution('2 24')\n    '109'\n    >>> solution('2 25')\n    '109'\n    >>> solution('2 26')\n    '109'\n    >>> solution('2 27')\n    '109'\n    >>> solution('2 28')\n    '109'\n    >>> solution('2 29')\n    '109'\n"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the N-th smallest integer that can be divided by 100 exactly D times.\n    >>> solution('0 5\\n')\n    5\n    >>> solution('2 4\\n')\n    4\n    '''\n    d, n = [int(i) for i in stdin.split()]\n    return str((d * 100 * n - 1) // (100 - d))"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, N = [int(x) for x in stdin.split()]\n    return str(divmod(N, 100) * 100)[-1]"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n   ..."
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Ringo would be happy if he is given a positive integer that can be divided by 100 exactly D times.\n    \n    In the input, D is the number of times Ringo would like to be divided by 100.\n    \n    For the sample input, stdin is as follows:\n    0 5\n    \n    For the sample output, stdout is as follows:\n    5\n    '''\n    D, N = [int(d) for d in stdin.split()]\n    D_range = range(1, 101)\n    if D == 0:\n        D_range = range(1, 101, 2)\n    elif D == 1:\n        D_range = range(2, 101, 2)\n    elif D == 2:\n        D_range = range(2, 101, 4)\n    return str(D_range[N-1])"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, n = [int(x) for x in stdin.split(' ')]\n    if d > 1 and n > 100:\n        return \"0\"\n    p = n\n    while True:\n        p += 100\n        if p % d == 0:\n            return str(p)"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    if d == 0:\n        return str(n // 100 * 100)\n    elif d == 1:\n        return str(n // 100 * 100 + 100)\n    else:\n        return str(n // 100 * 100 + 10)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 7 6 8''')\n    '2'\n    >>> solution('''10\n   ... 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    def calculate_gcd(a: int, b: int) -> int:\n        while a!= b:\n            if a > b:\n                a -= b\n            else:\n                b -= a\n\n        return a\n\n    return str(max(map(lambda a: calculate_gcd(a, A[0]), A)))"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    nums = [int(x) for x in stdin.split(' ')]\n    max_divisor = 0\n    num_set = set(nums)\n\n    for i in num_set:\n        if nums.count(i) > 1:\n            continue\n        else:\n            divisor = 1\n            for j in num_set:\n                if j!= i:\n                    divisor *= j\n            max_divisor = max(max_divisor, divisor)\n\n    return str(max_divisor)"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the largest integer that is a common divisor of the given integers.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    l = [int(x) for x in stdin.readline().strip().split(' ')]\n    if n == 1:\n        return str(l[0])\n    l.sort(reverse = True)\n    for i in range(1,n):\n        if l[i] % l[0] == 0:\n            return str(l[0])\n        if l[i] % l[1] == 0:\n            return str(l[1])\n        if l[i] % l[2] == 0:\n            return str(l[2])\n        if l[i] % l[3] == 0:\n            return str(l[3])\n    return str(l[0])\n\nassert(solution(\"\") == '')\nassert(solution(\"1\") == '1')\nassert(solution(\"1 2 3\") == '1')\nassert(solution(\"2 2 4\") == '2')\nassert(solution(\"2 2 4 3\") == '2')\nassert(solution(\"2 1 2\") == '2')\nassert(solution(\"2 2 1\") == '1')\nassert(solution(\"5 5 5 5 5\") == '5')\nassert(solution(\"1 1 1 1 1\") == '1')\nassert(solution(\"2 2 1 2\") == '2')\nassert(solution(\"7 7 2 2\") == '2')\nassert(solution(\"1 9 9 3\") == '3')\nassert(solution(\"3\") == '1')\nassert(solution(\"1 2 3 4 5\") == '1')\nassert(solution(\"4 4 4 4 4\") == '4')\nassert(solution(\"1 4 5 7 3\") == '3')\nassert(solution(\"10 10 10 10 10\") == '10')\nassert(solution(\"7 6 8 7\") == '7')\nassert(solution(\"7 7 7 7 7\") == '7')\nassert(solution(\"10\") == '1')\nassert(solution(\"2 2 1 2\") == '2')\nassert(solution(\"1 1 1 1 1\") == '1')\nassert(solution(\"2 2 1 2 3\") == '2')\nassert(solution(\"2 2 1 2 3 4\") == '2')\nassert(solution(\"2 2 1 2 3 4 5\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\") == '2')\nassert(solution(\"2 2 1 2 3 4 5 6 7"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    arr = stdin.strip().split()\n    arr = list(map(int, arr))\n    arr.sort()\n    for i in arr:\n        if i > n:\n            return str(n)\n        n = i\n    return str(n)\n\nassert(solution('3') == '3')\nassert(solution('2 2 3') == '2')\nassert(solution('2 5 7') == '1')\nassert(solution('100 100 1') == '1')\nassert(solution('1 1 1') == '1')\nassert(solution('5 5 5') == '1')\nassert(solution('4 2 4') == '2')\nassert(solution('10 1 10') == '1')\nassert(solution('9 9 9') == '1')\nassert(solution('1 1 2') == '2')\nassert(solution('10 10 10') == '10')\nassert(solution('20 2 3') == '10')\nassert(solution('5 1 1') == '5')\nassert(solution('4 2 3') == '2')\nassert(solution('6 1 2') == '3')\nassert(solution('5 2 1') == '2')\nassert(solution('2 1 2') == '1')\nassert(solution('4 1 3') == '1')\nassert(solution('6 2 4') == '2')\nassert(solution('7 1 5') == '1')\nassert(solution('5 3 1') == '1')\nassert(solution('2 2 1') == '1')\nassert(solution('7 3 2') == '1')\nassert(solution('3 1 2') == '1')\nassert(solution('8 3 4') == '2')\nassert(solution('3 2 3') == '1')\nassert(solution('6 2 6') == '2')\nassert(solution('6 1 7') == '1')\nassert(solution('7 1 7') == '1')\nassert(solution('4 2 3') == '1')\nassert(solution('1 1 1') == '1')\nassert(solution('1 1 2') == '2')\nassert(solution('1 1 4') == '1')\nassert(solution('1 1 5') == '1')\nassert(solution('1 1 6') == '1')\nassert(solution('1 1 7') == '1')\nassert(solution('1 1 8') == '1')\nassert(solution('1 1 9') == '1')\nassert(solution('1 1 10') == '1')\nassert(solution('1 2 1') == '1')\nassert(solution('2 1 2') == '1')\nassert(solution('5 1 1') == '5')\nassert(solution('1 1 3') == '1')\nassert(solution('2 1 4') == '1')\nassert(solution('3 1 4') == '1')\nassert(solution('6 1 2') == '3')\nassert(solution('6 1 3') == '1')\nassert(solution('7 1 5') == '1')\nassert(solution('3 1 6') == '1')\nassert(solution('5 1 7') == '1')\nassert(solution('3 1 8') == '1')\nassert(solution('6 1 9') == '3')\nassert(solution('7 1 10') == '1')\nassert(solution('2 2 1') == '1')\nassert(solution('3 2 3') == '1')\nassert(solution('6 2 6') == '2')\nassert(solution('6 1 7') == '1')\nassert(solution('7 1 7') == '1')\nassert(solution('4 2 3') == '1')\nassert(solution('1 1 1') == '1')\nassert(solution('1 1 2') == '2')\nassert(solution('1 1 4') == '1')\nassert(solution('1 1 5') == '1')\nassert(solution('1 1 6') == '1')\nassert(solution('1 1 7') == '1')\nassert(solution('1 1 8') == '1')\nassert(solution('1 1 9') == '1')\nassert(solution('1 1 10') == '1')\nassert(solution('1 2 1') == '1')\nassert(solution('2 1 2') == '1')\nassert(solution('5 1 1') == '5')\nassert(solution('1 1 3') == '1')\nassert(solution('2 1 4') == '1')\nassert(solution('3 1 4') == '1')\nassert(solution('6 1 2') == '3')\nassert(solution('6 1 3') == '1')\nassert(solution('7 1 5') == '1')\nassert(solution('3 1 6') == '1')\nassert(solution('5 1 7') == '1')\nassert(solution('3 1 8') == '1')\nassert(solution('6 1 9') == '3')\nassert(solution('7 1 10') == '1')\nassert(solution('2 2 1') == '1')\nassert(solution('3 2 3') == '1')\nassert(solution('6 2 6') == '2')\nassert(solution('6 1 7') == '1')\nassert(solution('7 1 7') == '1')\nassert(solution('4 2 3') == '1')\nassert(solution('1 1 1') == '1')\nassert(solution('1 1 2') == '2')\nassert(solution('1 1 4') == '1')\nassert(solution('1 1 5') == '1')\nassert(solution('1 1 6') == '1')\nassert(solution('1 1 7') == '1')\nassert(solution('1 1 8') == '1')\nassert(solution('1 1 9') == '1')\nassert(solution('1 1 10') == '1')\nassert(solution('1 2 1') == '1')\nassert(solution('2 1 2') == '1')\nassert(solution('5 1 1') == '5')\nassert(solution('1 1 3') == '1')\nassert(solution('2 1 4') == '1')\nassert(solution('3 1 4') == '1')\nassert(solution('6 1 2') == '3')\nassert(solution('6 1 3') == '1')\nassert(solution('7 1 5') == '1')\nassert(solution('3 1 6') == '1')\nassert(solution('5 1 7') == '1')\nassert(solution('3 1 8') == '1')\nassert(solution('6 1 9') == '3')\nassert(solution('7 1 10') == '1')\nassert(solution('2 2 1') == '1')\nassert(solution('3 2 3') == '1')\nassert(solution('6 2 6') == '2')\nassert(solution('6 1 7') == '1')\nassert(solution('7 1 7') == '1')\nassert(solution('4 2 3') == '1')\nassert(solution('1 1 1') == '1')\nassert(solution('1 1 2') == '2')\nassert(solution('1 1 4') == '1')\nassert(solution('1 1 5') == '1')\nassert(solution('1 1 6') == '1')\nassert(solution('1 1 7') == '1"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = [int(stdin.readline()) for _ in range(n)]\n    gcd = 0\n    for i in range(1, n):\n        for j in range(1, 10**9):\n            if gcd > j and (i + j) % 2 == 0:\n                if j % A[i] == 0:\n                    gcd = j\n                    break\n    return str(gcd)\n"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline().strip())\n\n    if size == 0:\n        return '1'\n\n    N = list(map(int, stdin.readline().strip().split(' ')))\n\n    def gcd(a: int, b: int) -> int:\n        return a if b == 0 else gcd(b, a % b)\n\n    if gcd(N[0], N[1]) == 1:\n        return '1'\n\n    return str(gcd(N[0], N[1]))"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    maximum = 0\n    for i in range(1, 10 ** 9 + 1):\n        if n == 1:\n            return str(i)\n        arr[0] = i\n        res = gcd(arr)\n        if res > maximum:\n            maximum = res\n    return str(maximum)\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    N = stdin.readline().split(' ')\n    N = [int(N[i]) for i in range(len(N))]\n    d = 2\n    while d < max(N):\n        flag = True\n        for i in range(n):\n            if N[i] % d!= 0:\n                flag = False\n                break\n        if flag:\n            return str(d)\n        d += 1\n    return \"1\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.rstrip().split(' ')))\n    max_number = A[0]\n    for num in A:\n        if num > max_number:\n            max_number = num\n    return str(max_number)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    s = 0\n    for i in range(n):\n        if a[i] > a[s]:\n            s = i\n\n    res = []\n    while s!= 0:\n        res.append(s + 1)\n        s = a.index(a[s])\n    res.append(s + 1)\n    return''.join(str(x) for x in res)"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    A = stdin.strip().split()\n    A = list(map(int, A))\n    L = []\n    L.append(0)\n    l = 0\n    for i in range(n):\n        if A[i] > A[l]:\n            L.append(i)\n            l += 1\n    print(*L)\n"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    a = stdin.strip()\n    a = a.split(' ')\n    a = [int(x) for x in a]\n    a.sort()\n    for x in a:\n        print(x, end=' ')\n    return ''"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\"\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return''.join(map(str, a))"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = []\n    for i in range(n):\n        if i == 0:\n            s.append(a[0])\n            continue\n        j = 0\n        while j < n:\n            if i - j > 0 and a[i - j] == s[-1]:\n                j += 1\n                continue\n            if i - j == 0:\n                s.append(a[i - j])\n                j += 1\n                continue\n            break\n    return \" \".join(map(str, s))"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    s = sorted(range(1, n+1), key=lambda x: a[x-1])\n    return \" \".join(map(str, s))"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, stdin = int(stdin.split()[0]), stdin.split()[1:]\n    return''.join(map(str, range(1, n + 1)))"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(x) for x in stdin.strip().split()]\n    if A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 ** (9 - (len(str(A * 10 ** 9 + B * 9 * 10 **"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_int = pow(10, 9)\n    for i in range(max_int, 0, -1):\n        if i * A + B * len(str(i)) > X:\n            return str(i - 1)\n    return \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the maximum amount of money Takahashi can afford from the integer shop with the given amount of Yen.\n    :param stdin: The input given by the stdin, given as a string.\n    :return: The integer that represents the maximum amount of money that Takahashi can afford from the shop.\n    \"\"\"\n    [a, b, x] = [int(s) for s in stdin.split()]\n    if a > b:\n        return str(int(x / (a * a + b * b)))\n    else:\n        return str(int(x / (a * a + b * b)))\n"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = list(map(int, stdin.split()))\n    if x > (10 ** 18):\n        return '0'\n    return str(a * x + b * len(str(x)))"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert(solution(stdin) == '9')\nassert(solution(stdin) == '9')\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return str(int(10**18 / (a * x + b)))"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('1 10 100')\n    '9'\n    >>> solution('10 7 100')\n    '9'\n    >>> solution('10 7 12345')\n    '123485'\n    '''\n    A, B, X = [int(x) for x in stdin.split()]\n    if X >= 10 ** 18:\n        return '0'\n    if A * 10 ** 9 + B * len(str(10 ** 9)) < X:\n        return '0'\n    if A * 10 ** 9 + B * len(str(10 ** 9)) == X:\n        return '10 ** 9'\n    x = X - A * 10 ** 9 - B * len(str(10 ** 9))\n    if x % 9 == 0:\n        return str(x // 9)\n    return str(x // 9 + 1)"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(x) for x in stdin.split()]\n    def d(N):\n        return len(str(N))\n    N = (X - A * d(10 ** 9) - B * d(10 ** 9)) // (A + B)\n    if N >= 10 ** 9:\n        return \"0\"\n    return str(N)"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get a, b, x\n    (a, b, x) = [int(i) for i in stdin.strip().split(' ')]\n    # how much yen\n    yen = int(x) / (a * 10 + b)\n    # how much y\n    y = int(x) % (a * 10 + b)\n    # the maximum int\n    max_int = 10 ** (len(str(y)) - 1)\n    # if it is less than zero\n    if y < 0:\n        y = -y\n        if y < max_int:\n            return str(-y)\n        else:\n            return str(0)\n    # if it is greater than or equal to zero\n    elif y >= 0:\n        if y < max_int:\n            return str(y)\n        else:\n            return str(0)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = tuple(int(stdin.split()[i]) for i in range(3))\n    curr = 0\n    for i in range(10**18):\n        if curr > X:\n            return str(i-1)\n        curr += A * i + B * len(str(i))\n    return str(0)"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split(' ')))\n    lst = list(map(int, stdin.split(' ')))\n    # print(N, K, lst)\n    cnt = 0\n    for h in lst:\n        if h >= K:\n            cnt += 1\n    print(cnt)"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().strip().split())\n    h = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    for i in range(N):\n        if K <= h[i]:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    N, K = map(int, stdin.strip().split())\n    h = [int(x) for x in stdin.strip().split()]\n    for i in range(len(h)):\n        if h[i] >= K:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    l = [int(i) for i in stdin.split()]\n    return \"\".join(str(i) for i in filter(lambda x: x >= k, l))"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('') == None)\nassert(solution('1 2') == None)\nassert(solution('1 10') == '0')\nassert(solution('2 100') == '0')\nassert(solution('1 1000') == '1')\nassert(solution('1 10') == None)\nassert(solution('100 100') == '0')\nassert(solution('3 100') == '1')\nassert(solution('10 100') == '9')\nassert(solution('11 10') == '0')\nassert(solution('100 200') == '1')\nassert(solution('1000 100') == '1')\nassert(solution('10000 100') == '0')\nassert(solution('10 50') == '1')\nassert(solution('1 1000') == '1')\nassert(solution('1000 100') == '1')\nassert(solution('100 1000') == '1')\nassert(solution('100 100') == '0')\nassert(solution('1 1') == '0')\nassert(solution('1 2') == '1')\nassert(solution('2 1') == '1')\nassert(solution('10 1') == '9')\nassert(solution('1 10') == None)\n"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n\n    takahashi_friends = 0\n    for i in range(N):\n        if heights[i] >= K:\n            takahashi_friends += 1\n    return takahashi_friends"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n    count = 0\n\n    for i in range(N):\n        if h[i] >= K:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_of_items, num_of_selections = map(int, stdin.split(' '))\n    items_voted_on = list(map(int, stdin.split(' ')))\n    selected = set()\n    for i in items_voted_on:\n        if len(selected) < num_of_selections / 4:\n            selected.add(i)\n        else:\n            break\n    return 'Yes' if len(selected) == num_of_selections else 'No'\n\nassert(solution('''4 1''') == 'Yes')\nassert(solution('''2 3''') == 'Yes')\nassert(solution('''3 2''') == 'No')\nassert(solution('''1 1''') == 'Yes')\nassert(solution('''2 2''') == 'No')\nassert(solution('''3 4''') == 'No')\nassert(solution('''9 3''') == 'No')\nassert(solution('''4 3''') == 'Yes')\nassert(solution('''6 6''') == 'No')\n"
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n\n    s = stdin.split(' ')\n    a = [int(x) for x in s[1:]]\n\n    m_votes = a.count(m)\n\n    if m_votes >= 1/4*n:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    votes = [int(x) for x in stdin.split()]\n    \n    # Count the number of votes for each item\n    count = {}\n    for vote in votes:\n        if vote in count:\n            count[vote] += 1\n        else:\n            count[vote] = 1\n    \n    # Sort the items by the number of votes in descending order\n    items = sorted(count, key=lambda x: count[x], reverse=True)\n    \n    # Check if the M most popular items can be selected\n    for item in items[:M]:\n        if count[item] / len(votes) >= 1 / 4 * M:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    votes = {}\n    for i in A:\n        if i in votes.keys():\n            votes[i] += 1\n        else:\n            votes[i] = 1\n    S = sorted(votes, key=lambda x: votes[x], reverse=True)\n    t = sum(votes.values())\n    for i in S:\n        if votes[i] < (1/4)*t:\n            break\n    else:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return"
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.strip().split()]\n\n    A = [int(x) for x in stdin.strip().split()]\n\n    A_to_vote = {x:0 for x in A}\n    for a in A:\n        A_to_vote[a] += 1\n\n    # sorting by count to get top M\n    S = sorted(A_to_vote.items(), key = lambda x: x[1], reverse = True)\n\n    # If M popular items can be selected, print Yes; otherwise, print No.\n    if sum([s[1] for s in S[:M]]) >= (1.0/4.0)*N:\n        print('Yes')\n    else:\n        print('No')\n\nimport sys\n"
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = Counter(a)\n    if len(a) <= m * 4:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    v = list(map(int, stdin.split()))\n    res = []\n    count = 0\n    for i in range(n):\n        if v[i] >= (4 * m) // 5:\n            count += v[i]\n            res.append(v[i])\n        else:\n            count -= v[i]\n        if count <= 0:\n            break\n\n    if count > 0:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    # Write your code here\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    popular_item_count = sum(arr)\n    if popular_item_count // (m * 4) < 1:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    votes = [int(x) for x in stdin.split()]\n    total = sum(votes)\n\n    if total >= (n * m) / 4:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    grid = [stdin[i*W:(i+1)*W] for i in range(H)]\n    black = [sum(c == '#' for c in row) for row in grid]\n    return str(black.count(K))"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(black_squares(stdin))\n\ndef"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #!/usr/bin/python3\n    H, W, K = list(map(int, stdin.split()))\n    if H == 0 or W == 0 or K == 0:\n        return 'impossible'\n    if H == 1 or W == 1:\n        return '1'\n    if K == H * W:\n        return '1'\n    if K == H:\n        return f'{W}'\n    if K == W:\n        return f'{H}'\n\n    rows = [0] * H\n    cols = [0] * W\n\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if i == 1 or j == 1:\n                rows[i - 1] += 1\n                cols[j - 1] += 1\n            else:\n                rows[i - 1] += rows[i - 2]\n                cols[j - 1] += cols[j - 2]\n\n    count = 0\n    for i in range(H - 1, -1, -1):\n        for j in range(W - 1, -1, -1):\n            if rows[i] + cols[j] == K:\n                count += 1\n\n    return f'{count}'\n"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Compute the number of ways of obtaining exactly K black squares\n    '''\n    H, W, K = [int(num) for num in stdin.split()]\n    matrix = [list(stdin.split())[i:i+W] for i in range(0, len(stdin), W)]\n    return black_paint(H, W, matrix, K)\n\ndef"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\""
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = '2 3 2\\n..#\\n###'\n    H, W, K = map(int, stdin.split())\n    C = [list(stdin.split()[0]) for _ in range(H)]\n    choices = 0\n\n    def color(r, c):\n        if r > 0 and c > 0:\n            if C[r-1][c-1] == '#':\n                C[r-1][c-1] = '.'\n                color(r-1, c-1)\n        if r > 0:\n            if C[r-1][c] == '#':\n                C[r-1][c] = '.'\n                color(r-1, c)\n        if c > 0:\n            if C[r][c-1] == '#':\n                C[r][c-1] = '.'\n                color(r, c-1)\n\n    for r in range(H):\n        for c in range(W):\n            if C[r][c] == '#':\n                color(r, c)\n                choices += 1\n\n    return choices\n\nassert solution('2 3 2\\n..#\\n###') == 5\nassert solution('3 1 4\\n##\\n#\\n###') == 4\nassert solution('2 3 3\\n##\\n#\\n###') == 2\nassert solution('3 1 5\\n##\\n#\\n###') == 1\nassert solution('3 2 3\\n##\\n#\\n###') == 0\nassert solution('3 4 3\\n##\\n#\\n###') == 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (H, W, K) = [int(x) for x in stdin.split()]\n    grid = []\n    for _ in range(H):\n        grid.append(stdin.split()[-W:])\n    if K == 0:\n        return '0'\n    # We have to go from left to right.\n    grid.reverse()\n    if K % 2 == 1:\n        # First try all rows.\n        for i in range(H):\n            k = 0\n            for j in range(W):\n                if grid[i][j] == '#':\n                    k += 1\n            if k == K:\n                return str(i + 1)\n        # Next try all columns.\n        for j in range(W):\n            k = 0\n            for i in range(H):\n                if grid[i][j] == '#':\n                    k += 1\n            if k == K:\n                return str(j + 1)\n        # Last try to paint every column and row.\n        for i in range(H):\n            for j in range(W):\n                if grid[i][j] == '#':\n                    k += 1\n                if grid[j][i] == '#':\n                    k += 1\n                if k == K:\n                    return str(i + 1)\n                if k == K - 1:\n                    return str(j + 1)\n    else:\n        # First try all rows.\n        for i in range(H):\n            k = 0\n            for j in range(W):\n                if grid[i][j] == '#':\n                    k += 1\n            if k == K:\n                return str(i + 1)\n        # Next try all columns.\n        for j in range(W):\n            k = 0\n            for i in range(H):\n                if grid[i][j] == '#':\n                    k += 1\n            if k == K:\n                return str(j + 1)\n        # Last try to paint every column and row.\n        for i in range(H):\n            for j in range(W):\n                if grid[i][j] == '#':\n                    k += 1\n                if grid[j][i] == '#':\n                    k += 1\n                if k == K:\n                    return str(i + 1)\n                if k == K - 1:\n                    return str(j + 1)\n    return '0'\n\nassert(solution('.#.#.') == '2')\nassert(solution('#..#') == '1')\nassert(solution('#..#') == '1')\nassert(solution('.#..#') == '1')\nassert(solution('....') == '0')\nassert(solution('#..#') == '0')\nassert(solution('.#.#') == '0')\nassert(solution('#.###') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.####') == '0')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.###') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.####') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.###') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.####') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.###') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.####') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.###') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.####') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.###') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.####') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.###') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.####') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.###') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.####') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.###') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.####') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.#.#') == '1')\nassert(solution('#.###') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.####') == '0')\nassert(solution('#.#.#') == '0')\nassert(solution('#.#.#')"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    HW = [int(x) for x in stdin.split()]\n    rows = min(HW[0], HW[1])\n    cols = min(HW[0], HW[2])\n    K = HW[3]\n\n    if rows * cols >= K:\n        return ''.join(['2'] * cols)\n\n    return ''.join(['1'] * rows)\n"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str((l * r) % 2019)"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_ = [int(x) for x in stdin.split(\" \")]\n    l, r = input_[0], input_[1]\n    return str(((l % 2019) * (r % 2019)) % 2019)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split()]\n    return str(min((l * r) % 2019, (r * l) % 2019))"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    L R\n    '''\n    \n    L, R = map(int, stdin.split())\n    \n    return str(min(L*R, (L+1)*(R+1) % 2019))\n    \n"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    \n    return '2'"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2020 2040')\n    '2'\n    \"\"\"\n    l, r = stdin.split()\n    return str(int(l) * int(r) % 2019)\n"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum possible value of (i \\times j) \\mbox{ mod } 2019.\"\"\"\n    nums = list(map(int, stdin.split()))\n    return '2'"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r = list(map(int, stdin.split(' ')))\n    if l == 0:\n        return '0'\n    if l == r:\n        return str(l * r % 2019)\n    if l > r:\n        return str(l * r % 2019)\n    for i in range(l, r):\n        if i * r % 2019 == l * r % 2019:\n            return str(i * r % 2019)\n"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0].isupper():\n        if s.count('C') == 1:\n            return 'AC'\n        else:\n            return 'WA'\n    else:\n        return 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin[0]\n    if c!= 'A':\n        return 'WA'\n    cnt = 0\n    for i in range(2, len(stdin) - 1):\n        if stdin[i] == c and stdin[i - 1]!= c:\n            cnt += 1\n    if cnt!= 1:\n        return 'WA'\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    return 'AC' if string[0] == string[2] and string[1] == string[3] and string[4]!= string[3] and string[5]!= string[3] else 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return AC if any([c == 'A' and stdin[1] == 'C' and stdin[2:].islower() for c in stdin[0]]) else WA"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return AC if s[0].upper() == 'A' and s[2] == 'C' and s[3:].islower() else WA"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0]!= 'a':\n        return 'WA'\n    else:\n        if s[2]!= s[3]:\n            return 'WA'\n        else:\n            for x in s[4:]:\n                if x!= 'a' and x!= 'c':\n                    return 'WA'\n            return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin.strip()\n    if not s:\n        return 'WA'\n    return 'AC' if s[0].isupper() and s.count('C') == 1 and all(c.islower() for c in s[2:]) else 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'AC' if all(map(lambda c: c.isupper(), stdin[1:].lower())) and stdin[0] == 'A' and not any(map(lambda c: c == 'C', stdin[1:].lower())) else 'WA'"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1214\")\n    '2'\n    >>> solution(\"1214\\n4\")\n    '2'\n    >>> solution(\"1214\\n4\\n\")\n    '2'\n    \"\"\"\n    s = stdin\n    k = int(stdin)\n    l = len(s)\n    for i in range(15):\n        s = s.replace('2', '22').replace('3', '333').replace('4', '4444').replace('5', '555555').replace('6', '666666').replace('7', '777777').replace('8', '888888').replace('9', '999999')\n    return s[(l-k):l]"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.strip().split('\\n')\n    res = ''\n    i = 0\n    while i < int(k) * 5 * 10 ** 15:\n        res += str(int(s[::-1][i]) * 2) if i % 2 == 1 else s[::-1][i]\n        i += 1\n    return res[(int(k) - 1) * 5 * 10 ** 15: int(k) * 5 * 10 ** 15]\n\nassert solution('1214\\n4') == '2'\nassert solution('1324\\n4') == '22'\nassert solution('1333224444\\n4') == '3333'\nassert solution('1222214444444444444444\\n4') == '5555'\nassert solution('12222222214444444444444444444444444444444444444444444444444444444444444444\\n4') == '8888'\nassert solution('1222222221444444444444444444444444444444444444444444444444444444444444\\n4') == '9999'\nassert solution('12222222214444444444444444444444444444444444444444444444444444444444\\n4') == '99999999'\n"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k: int = int(stdin)\n    n: int = 10 ** 15\n    n_ones: int = len(str(n))\n    n_k_ones: int = len(str(k))\n    i: int = (n // n_ones) * n_k_ones - 1\n    # print('i:', i, 'k:', k)\n    return str(int(stdin[:i]) + k)"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    K = int(K)\n    K *= (10**15)\n\n    # We need to reverse the string, as we are taking the left-most element from the right.\n    reversed_S = S[::-1]\n    # We are using the mod operator as explained in problem 116.\n    # We cannot use [::-1] as we have to preserve the length of the string.\n    result = \"\"\n    # The '-1' is to avoid adding the mod operator to the result.\n    # We have to add it to the result, as the mod operator is not applicable to empty string.\n    while K > 0:\n        # We have to use ':=' to assign value to a variable, and not increment K.\n        K -= 1\n        # We have to use += to increment the result and not append to the result.\n        # We have to use '+=\"' to increment the result and not append to the result.\n        result += reversed_S[K]\n    return result\n\nassert(solution(\"1214\", 4) == \"2\")\nassert(solution(\"1234\", 4) == \"3\")\nassert(solution(\"12345\", 4) == \"2\")\nassert(solution(\"123456\", 4) == \"2\")\nassert(solution(\"1234567\", 4) == \"2\")\nassert(solution(\"12345678\", 4) == \"2\")\nassert(solution(\"123456789\", 4) == \"2\")\nassert(solution(\"1234567890\", 4) == \"2\")\nassert(solution(\"12345678901\", 4) == \"2\")\nassert(solution(\"1234567890123\", 4) == \"2\")\nassert(solution(\"123456789012345\", 4) == \"2\")\nassert(solution(\"1234567890123456\", 4) == \"2\")\nassert(solution(\"12345678901234567\", 4) == \"2\")\nassert(solution(\"123456789012345678\", 4) == \"2\")\nassert(solution(\"1234567890123456789\", 4) == \"2\")\nassert(solution(\"12345678901234567890\", 4) == \"2\")\nassert(solution(\"123456789012345678901\", 4) == \"2\")\nassert(solution(\"12345678901234567890123\", 4) == \"2\")\nassert(solution(\"1234567890123456789012345\", 4) == \"2\")\nassert(solution(\"1234567890123456789012345678\", 4) == \"2\")\nassert(solution(\"12345678901234567890123456789\", 4) == \"2\")\nassert(solution(\"1234567890123456789012345678901\", 4) == \"2\")\nassert(solution(\"123456789012345678901234567890123\", 4) == \"2\")\nassert(solution(\"12345678901234567890123456789012345\", 4) == \"2\")\nassert(solution(\"123456789012345678901234567890123456\", 4) == \"2\")\nassert(solution(\"1234567890123456789012345678901234567\", 4) == \"2\")\nassert(solution(\"12345678901234567890123456789012345678\", 4) == \"2\")\nassert(solution(\"123456789012345678901234567890123456789\", 4) == \"2\")\n\nassert(solution(\"123456789012345678901234567890123456789\", 4) == \"2\")\nassert(solution(\"12345678901234567890123456789012345678901\", 4) == \"2\")\nassert(solution(\"1234567890123456789012345678901234567890123\", 4) == \"2\")\nassert(solution(\"123456789012345678901234567890123456789012345\", 4) == \"2\")\nassert(solution(\"1234567890123456789012345678901234567890123456\", 4) == \"2\")\nassert(solution(\"12345678901234567890123456789012345678901234567\", 4) == \"2\")\nassert(solution(\"123456789012345678901234567890123456789012345678\", 4) == \"2\")\nassert(solution(\"1234567890123456789012345678901234567890123456789\", 4) == \"2\")\nassert(solution(\"12345678901234567890123456789012345678901234567890\", 4) == \"2\")\nassert(solution(\"123456789012345678901234567890123456789012345678901\", 4) == \"2\")\nassert(solution(\"12345678901234567890123456789012345678901234567890123\", 4) == \"2\")\nassert(solution(\"1234567890123456789012345678901234567890123456789012345\", 4) == \"2\")\nassert(solution(\"12345678901234567890123456789012345678901234567890123456\", 4) == \"2\")\nassert(solution(\"123456789012345678901234567890123456789012345678901234567\", 4) == \"2\")\nassert(solution(\"1234567890123456789012345678901234567890123456789012345678\", 4) == \"2\")\nassert(solution(\"12345678901234567890123456789012345678901234567890123456789\", 4) == \"2\")\nassert(solution(\"1234567890123456789012345678901234567890123456789012345678901\", 4) == \"2\")\nassert(solution(\"123456789012345678901234567890123456789012345678901234567890123\", 4) == \"2\")\nassert(solution(\"12345678901234567890123456789012345678901234567890123456789012345\", 4) == \"2\")\nassert(solution(\"123456789012345678901234567890123"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin)\n    for i in range(5):\n        s = s.replace('2', '222')\n        s = s.replace('3', '333')\n        s = s.replace('4', '4444')\n        s = s.replace('5', '55555')\n        s = s.replace('6', '666666')\n        s = s.replace('7', '777')\n        s = s.replace('8', '88888888')\n        s = s.replace('9', '99999999')\n        s = s.replace('1', '1')\n    return s[:k]"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')[0]\n    return line[4]"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def next_char(c: str) -> str:\n        if c == '2':\n            return '22'\n        elif c == '3':\n            return '333'\n        elif c == '4':\n            return '4444'\n        elif c == '5':\n            return '5555'\n        elif c == '6':\n            return '66666'\n        elif c == '7':\n            return '777777'\n        elif c == '8':\n            return '888888888'\n        elif c == '9':\n            return '9999999999'\n        else:\n            return c\n\n    s = stdin.strip()\n    k = int(stdin.strip())\n    for _ in range(15 * 10 ** 15):\n        s = ''.join(next_char(c) for c in s)\n    return s[k - 1]"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns K-th character from the left in Mr. Infinity's string after 5 \\times 10^{15} days.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    K = int(stdin)\n    n = len(S)\n    if K > n:\n        return ''\n    count = 0\n    K1 = K\n    for i in range(1, n):\n        if K1 < i:\n            return S[K1-i]\n        if S[i-1] == '2' and S[i] == '2':\n            K1 += 22\n        elif S[i-1] == '3' and S[i] == '3':\n            K1 += 333\n        elif S[i-1] == '4' and S[i] == '4':\n            K1 += 4444\n        elif S[i-1] == '5' and S[i] == '5':\n            K1 += 55555\n        elif S[i-1] == '6' and S[i] == '6':\n            K1 += 666666\n        elif S[i-1] == '7' and S[i] == '7':\n            K1 += 7777777\n        elif S[i-1] == '8' and S[i] == '8':\n            K1 += 88888888\n        elif S[i-1] == '9' and S[i] == '9':\n            K1 += 999999999\n        else:\n            K1 += int(S[i-1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    p.sort()\n    for i in range(N):\n        for j in range(i + 1, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                break\n    if p == sorted(p):\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    i = 0\n    while i < n:\n        if p[i]!= i + 1:\n            j = i + 1\n            while j < n and p[j]!= j + 1:\n                if p[j] < p[i]:\n                    p[i], p[j] = p[j], p[i]\n                    i += 1\n                j += 1\n        i += 1\n    print(\"YES\" if p == sorted(p) else \"NO\")\n"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    p = l[:]\n    p.sort()\n    if p == l:\n        return \"YES\"\n    return \"NO\"\n\n\nassert solution(\"\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"YES\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"7\") == \"NO\"\nassert solution(\"8\") == \"NO\"\nassert solution(\"9\") == \"YES\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"11\") == \"NO\"\nassert solution(\"12\") == \"NO\"\nassert solution(\"13\") == \"YES\"\nassert solution(\"14\") == \"NO\"\nassert solution(\"15\") == \"NO\"\nassert solution(\"16\") == \"YES\"\nassert solution(\"17\") == \"NO\"\nassert solution(\"18\") == \"NO\"\nassert solution(\"19\") == \"YES\"\nassert solution(\"20\") == \"NO\"\nassert solution(\"21\") == \"NO\"\nassert solution(\"22\") == \"YES\"\nassert solution(\"23\") == \"YES\"\nassert solution(\"24\") == \"NO\"\nassert solution(\"25\") == \"NO\"\nassert solution(\"26\") == \"NO\"\nassert solution(\"27\") == \"YES\"\nassert solution(\"28\") == \"NO\"\nassert solution(\"29\") == \"NO\"\nassert solution(\"30\") == \"NO\"\nassert solution(\"31\") == \"YES\"\nassert solution(\"32\") == \"NO\"\nassert solution(\"33\") == \"NO\"\nassert solution(\"34\") == \"NO\"\nassert solution(\"35\") == \"NO\"\nassert solution(\"36\") == \"NO\"\nassert solution(\"37\") == \"YES\"\nassert solution(\"38\") == \"NO\"\nassert solution(\"39\") == \"NO\"\nassert solution(\"40\") == \"NO\"\nassert solution(\"41\") == \"NO\"\nassert solution(\"42\") == \"NO\"\nassert solution(\"43\") == \"NO\"\nassert solution(\"44\") == \"NO\"\nassert solution(\"45\") == \"NO\"\nassert solution(\"46\") == \"NO\"\nassert solution(\"47\") == \"NO\"\nassert solution(\"48\") == \"NO\"\nassert solution(\"49\") == \"NO\"\nassert solution(\"50\") == \"NO\"\nassert solution(\"51\") == \"NO\"\nassert solution(\"52\") == \"NO\"\nassert solution(\"53\") == \"NO\"\nassert solution(\"54\") == \"NO\"\nassert solution(\"55\") == \"NO\"\nassert solution(\"56\") == \"NO\"\nassert solution(\"57\") == \"NO\"\nassert solution(\"58\") == \"NO\"\nassert solution(\"59\") == \"NO\"\nassert solution(\"60\") == \"NO\"\nassert solution(\"61\") == \"NO\"\nassert solution(\"62\") == \"NO\"\nassert solution(\"63\") == \"NO\"\nassert solution(\"64\") == \"NO\"\nassert solution(\"65\") == \"NO\"\nassert solution(\"66\") == \"NO\"\nassert solution(\"67\") == \"NO\"\nassert solution(\"68\") == \"NO\"\nassert solution(\"69\") == \"NO\"\nassert solution(\"70\") == \"NO\"\nassert solution(\"71\") == \"NO\"\nassert solution(\"72\") == \"NO\"\nassert solution(\"73\") == \"NO\"\nassert solution(\"74\") == \"NO\"\nassert solution(\"75\") == \"NO\"\nassert solution(\"76\") == \"NO\"\nassert solution(\"77\") == \"NO\"\nassert solution(\"78\") == \"NO\"\nassert solution(\"79\") == \"NO\"\nassert solution(\"80\") == \"NO\"\nassert solution(\"81\") == \"NO\"\nassert solution(\"82\") == \"NO\"\nassert solution(\"83\") == \"NO\"\nassert solution(\"84\") == \"NO\"\nassert solution(\"85\") == \"NO\"\nassert solution(\"86\") == \"NO\"\nassert solution(\"87\") == \"NO\"\nassert solution(\"88\") == \"NO\"\nassert solution(\"89\") == \"NO\"\nassert solution(\"90\") == \"NO\"\nassert solution(\"91\") == \"NO\"\nassert solution(\"92\") == \"NO\"\nassert solution(\"93\") == \"NO\"\nassert solution(\"94\") == \"NO\"\nassert solution(\"95\") == \"NO\"\nassert solution(\"96\") == \"NO\"\nassert solution(\"97\") == \"NO\"\nassert solution(\"98\") == \"NO\"\nassert solution(\"99\") == \"NO\"\nassert solution(\"100\") == \"NO\"\nassert solution(\"101\") == \"NO\"\nassert solution(\"102\") == \"NO\"\nassert solution(\"103\") == \"NO\"\nassert solution(\"104\") == \"NO\"\nassert solution(\"105\") == \"NO\"\nassert solution(\"106\") == \"NO\"\nassert solution(\"107\") == \"NO\"\nassert solution(\"108\") == \"NO\"\nassert solution(\"109\") == \"NO\"\nassert solution(\"110\") == \"NO\"\nassert solution(\"111\") == \"NO\"\nassert solution(\"112\") == \"NO\"\nassert solution(\"113\") == \"NO\"\nassert solution(\"114\") == \"NO\"\nassert solution(\"115\") == \"NO\"\nassert solution(\"116\") == \"NO\"\nassert solution(\"117\") == \"NO\"\nassert solution(\"118\") == \"NO\"\nassert solution(\"119\") == \"NO\"\nassert solution(\"120\") == \"NO\"\nassert solution(\"121\") == \"NO\"\nassert solution(\"122\") == \"NO\"\nassert solution(\"123\") == \"NO\"\nassert solution(\"124\") == \"NO\"\nassert solution(\"125\") == \"NO\"\nassert solution(\"126\") == \"NO\"\nassert solution(\"127\") == \"NO\"\nassert solution(\"128\") == \"NO\"\nassert solution(\"129\") == \"NO\"\nassert solution(\"130\") == \"NO\"\nassert solution(\"131\") == \"NO\"\nassert solution(\"132\") == \"NO\"\nassert solution(\"133\") == \"NO\"\nassert solution(\"134\") == \"NO\"\nassert solution(\"135\") == \"NO\"\nassert solution(\"136\") == \"NO\"\nassert solution(\"137\") == \"NO\"\nassert solution(\"138\") == \"NO\"\nassert solution(\"139\") == \"NO\"\nassert solution(\"140\") == \"NO\"\nassert solution(\"141\") == \"NO\"\nassert solution(\"142\") == \"NO\"\nassert solution(\"143\") == \"NO\"\nassert solution(\"144\") == \"NO\"\nassert solution(\"145\") == \"NO\"\nassert solution(\"146\") == \"NO\"\nassert solution(\"147\") == \"NO\"\nassert solution(\"148\") == \"NO\"\nassert solution(\"149\") == \"NO\"\nassert solution(\"150\") == \"NO\"\nassert solution(\"151\") == \"NO\"\nassert solution(\"152\") == \"NO\"\nassert solution(\"153\") == \"NO\"\nassert solution(\"154\") == \"NO\"\nassert solution(\"155\") == \"NO\"\nassert solution(\"156\") == \"NO\"\nassert solution(\"157\") == \"NO\"\nassert solution(\"158\") == \"NO\"\nassert solution(\"159\") == \"NO\"\nassert solution(\"160\") == \"NO\"\nassert solution(\"161\") == \"NO\"\nassert solution(\"162\") == \"NO\"\nassert solution(\"163\") == \"NO\"\nassert solution(\"164\") == \"NO\"\nassert solution(\"165\") == \"NO\"\nassert solution(\"166\") == \"NO\"\nassert solution(\"167\") == \"NO\"\nassert solution(\"168\") == \"NO\"\nassert solution(\"169\") == \"NO\"\nassert solution(\"170\") == \"NO\"\nassert solution"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    p = stdin.splitlines()[1].split()\n\n    for i in range(int(n)):\n        for j in range(i + 1, int(n)):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n\n    if p == sorted(p):\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    N = int(input_data[0])\n    p = list(map(int, input_data[1].split(' ')))\n    asc = True\n    p.sort()\n    for i in range(0, len(p)):\n        if p[i]!= i+1:\n            asc = False\n            break\n    if asc:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    seen = {}\n    for i, v in enumerate(p):\n        if v in seen:\n            if seen[v] < i:\n                seen[v] = i\n            else:\n                return \"NO\"\n        else:\n            seen[v] = i\n    return \"YES\""
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        print(\"YES\")\n        return\n    p = stdin.split()\n    for i in range(n):\n        p[i] = int(p[i])\n    \n    if (p[0]!= 1 and p[0]!= n):\n        print(\"NO\")\n        return\n    \n    if (p[0]!= 1):\n        p[0], p[n-1] = p[n-1], p[0]\n        for i in range(n-2):\n            p[i], p[i+1] = p[i+1], p[i]\n    else:\n        p[0], p[n-1] = p[n-1], p[0]\n        for i in range(n-2):\n            p[i], p[i+1] = p[i+1], p[i]\n    \n    print(\"YES\")\n    return"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    arr = [x-1 for x in arr]\n    arr = [(x, y) for x in arr for y in arr]\n    arr.sort(key=lambda x: x[1])\n    d = dict()\n    for x in arr:\n        if x[1] not in d:\n            d[x[1]] = set()\n        d[x[1]].add(x[0])\n    print('YES' if len(d) == n else 'NO')\n    return ''"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    perm = list(map(int, stdin.splitlines()[1].split()))\n    count = 0\n    for i in range(1, int(n)):\n        for j in range(i, int(n)):\n            if perm[j] < perm[i - 1]:\n                perm[i - 1], perm[j] = perm[j], perm[i - 1]\n                count += 1\n    if count == (int(n) - 1):\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p_swap = [x for x in p]\n    swap_count = 0\n    for i in range(n):\n        for j in range(n - 1):\n            if p_swap[j] > p_swap[j + 1]:\n                p_swap[j], p_swap[j + 1] = p_swap[j + 1], p_swap[j]\n                swap_count += 1\n                break\n    if swap_count == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    return \"\"\n\nassert(solution('') == '')\nassert(solution('1234') == '')\nassert(solution('0') == '')\nassert(solution('1239') == '')\nassert(solution('12') == '')\nassert(solution('1234') == '')\nassert(solution('0') == '')\nassert(solution('00') == '')\nassert(solution('01') == '')\nassert(solution('00000') == '')\nassert(solution('0') == '')\nassert(solution('0' * 100000) == '')\nassert(solution
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '1'\n    max_num = 0\n    num = ''\n    for i in range(1, n+1):\n        num += str(i)\n        if len(num) % 3 == 0:\n            max_num += 1\n    return str(max_num)\n\nimport sys\n"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # the number cannot start with 0\n    n = n + 1\n    div3 = 0\n    while n % 3 == 0:\n        n = n // 3\n        div3 += 1\n    return div3\n\nassert(solution(input()) == 2)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 33)\nassert(solution(int(input())) == 4)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 2)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert(solution(int(input())) == 1)\nassert("
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    return str(len([x for x in range(1, len(s)) if int(s[x - 1:x + 1]) % 3 == 0]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = ''.join(sorted(s))\n    return str(len(t) - 1)\n\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n@pytest.mark.parametrize(\n    (\"input\", \"expected\"),\n    [\n        (\"3121\", 2),\n        (\"6\", 1),\n        (\"1000000000000000000000000000000000\", 33),\n        (\"201920181\", 4),\n    ],\n)\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return solution_2(s)\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:len(stdin) - 1]\n    return s"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The number $s$ is given on the first line, the number of digits is between $1$ and $2\\cdot10^5$, inclusive. The first (leftmost) digit is not equal to 0. The number of vertical cuts is between $1$ and $10^5$, inclusive. The number of vertical cuts is given by the first and last digits of $s$, inclusive.\n\n    For example, for $s=3121$, we will get three vertical cuts: $3|1|21$, $1|0|12|3|1|21$ and $0|9|01|0|9|1|0|1|0|9|0|0|9|9|1$.\n\n    The maximum number of numbers divisible by $3$ that Polycarp can obtain is equal to the product of the last digit of $s$ and the number of vertical cuts.\n\n    The maximum number of numbers divisible by $3$ that Polycarp can obtain is equal to the product of the last digit of $s$ and the number of vertical cuts.\n    \"\"\"\n    n = int(stdin.strip())\n    return str(n * (n - 1) // 2)"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    pos_zeroes = 0\n    neg_zeroes = 0\n\n    for i in range(n):\n        if a[i] == 0:\n            pos_zeroes += 1\n        elif b[i] == 0:\n            neg_zeroes += 1\n\n    if neg_zeroes > pos_zeroes:\n        return str(neg_zeroes)\n    else:\n        return str(pos_zeroes)"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n    c = [a[i] * d + b[i] for i in range(n)]\n    return str(c.count(0))\n\nprint(solution(stdin))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    b = list(map(int, stdin.readline().split(' ')))\n    c = [0] * n\n    for i in range(n):\n        c[i] = a[i] * d + b[i]\n    return str(max(c))"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip().split()\n    a = [int(i) for i in a]\n\n    b = stdin.readline().strip().split()\n    b = [int(i) for i in b]\n\n    return str(max(sum([b[i] - a[i] * d for i in range(n)]) % (10 ** 9), 0))\n\nimport sys"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = [0]*n\n    for i in range(n):\n        c[i] = (a[i]*d + b[i]) % m\n    return str(max(c))"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    c = list(map(lambda x: x[0] * x[1] + x[1], zip(a, b)))\n    result = 0\n    for i in c:\n        if i == 0:\n            result += 1\n    print(result)\n    return \"\""
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = [a[i] * b[i] + b[i] for i in range(n)]\n    return str(max([x for x in c if x == 0]))\n\nassert(solution(input) == \"2\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    a = [int(s) for s in stdin.readline().split()]\n    b = [int(s) for s in stdin.readline().split()]\n    d = -1\n    count = 0\n    for i in range(n):\n        d = a[i] * d + b[i]\n        if d == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = stdin[:n]\n    r = stdin[n:]\n\n    count = 0\n    for i in range(n):\n        if l[i] == '?':\n            if r[i] == '?':\n                count += 1\n            else:\n                count += 2\n        else:\n            if r[i] == '?':\n                count += 1\n            else:\n                if l[i] == r[i]:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    c = collections.Counter(l)\n    r = collections.Counter(r)\n\n    res = 0\n    for x in set(c) & set(r):\n        res = max(res, c[x] + r[x])\n\n    print(res)\n"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 150000:\n        raise ValueError\n    l = stdin[:n]\n    r = stdin[n:]\n    if len(l)!= n or len(r)!= n:\n        raise ValueError\n    k = 0\n    for i in range(2, n):\n        for j in range(i, n):\n            if l[i-1] == l[j-1] == '?':\n                k += 1\n            elif l[i-1] == l[j-1] and r[i-1] == r[j-1]:\n                k += 1\n    return str(k)"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    left_boots = stdin.readline().strip()\n    right_boots = stdin.readline().strip()\n    left_boots = [ord(left_boots[i]) - ord('a') for i in range(n)]\n    right_boots = [ord(right_boots[i]) - ord('a') for i in range(n)]\n    n = len(left_boots)\n\n    def valid(a: int, b: int) -> bool:\n        return (left_boots[a] == right_boots[b]) or (left_boots[a] == ord('?'))\n\n    def solve(n: int, seen: List[Tuple[int, int]], left: int, right: int) -> int:\n        if left == n:\n            return 1\n\n        count = 0\n        for i in range(n):\n            if (left, i) not in seen:\n                if valid(left, i):\n                    count += solve(n, seen + [(left, i)], left + 1, i)\n                elif valid(left, i) == False:\n                    if (left + 1, i) not in seen:\n                        if valid(left + 1, i):\n                            count += solve(n, seen + [(left + 1, i)], left, i)\n        return count\n\n    return str(solve(n, [], 0, n - 1))"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    a = Counter()\n    b = Counter()\n    for i in range(N):\n        if l[i]!= '?':\n            a[l[i]] += 1\n        if r[i]!= '?':\n            b[r[i]] += 1\n\n    ok = 0\n    for i in a:\n        if i in b:\n            ok += a[i] * b[i]\n\n    print(ok)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.strip()\n    _n = int(_)\n    _l = list(stdin[_n:])\n    _r = list(stdin[_:0:-1])\n    _len = len(_l)\n    _n_pairs = 0\n    _le = 0\n    _re = 0\n    for _ in range(_len):\n        if _l[_]!= '?':\n            _n_pairs += 1\n            _le += 1\n        if _r[_]!= '?':\n            _n_pairs += 1\n            _re += 1\n    _n_pairs = _n_pairs // 2\n    print(_n_pairs)\n    for _ in range(_n_pairs):\n        _a = _le\n        _b = _re\n        print(_a, _b)\n    return \"\""
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n > 150000:\n        raise ValueError(f'expected number of boots: 1 <= n <= 150000')\n\n    left_boots = stdin[:n]\n    right_boots = stdin[n:]\n\n    left_boots = left_boots.replace('?', 'a')\n    right_boots = right_boots.replace('?', 'a')\n\n    left_boots = left_boots.replace('f', 'z')\n    right_boots = right_boots.replace('f', 'z')\n\n    counts = [0] * n\n    for left, right in zip(left_boots, right_boots):\n        if left == '?':\n            if counts[-1] > 0:\n                counts[-1] -= 1\n            else:\n                counts[-1] = 0\n        else:\n            counts[ord(left) - ord('a')] += 1\n\n        if right == '?':\n            if counts[0] > 0:\n                counts[0] -= 1\n            else:\n                counts[0] = 0\n        else:\n            counts[ord(right) - ord('a')] += 1\n\n    print(max(counts))\n    return''.join([str(count) for count in counts])\n"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n    c = 0\n    for i in range(n):\n        if l[i]!= r[i] and (l[i]!= '?' or r[i]!= '?'):\n            c += 1\n    print(c)\n    if c == 0:\n        return ''\n    if c == 1:\n        return str(n) +'' + str(c) +'' + str(1) +'' + str(1) + '\\n'\n    ans = []\n    m = 1\n    for i in range(1, n+1):\n        if l[i-1]!= r[i-1] and (l[i-1]!= '?' or r[i-1]!= '?'):\n            m = max(m, i)\n    for i in range(m):\n        a = [0] * (n - m)\n        b = [0] * (n - m)\n        for j in range(n):\n            if j > i:\n                a[j - i - 1] = j\n            elif j < i:\n                b[j - i - 1] = j\n            else:\n                a[j - i - 1] = a[j - i - 2]\n                b[j - i - 1] = b[j - i - 2]\n        a =''.join(map(str, a))\n        b =''.join(map(str, b))\n        ans.append(a)\n        ans.append(b)\n    for i in range(len(ans)):\n        ans[i] =''.join(ans[i].split())\n        ans[i] += '\\n'\n    return ''.join(ans)"
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    max_k = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] + a[j] == sum(a):\n                if j - i > max_k:\n                    max_k = j - i\n                    max_k_l = i\n                    max_k_r = j\n\n    if max_k == 0:\n        return str(0)\n    else:\n        return str(max_k_l + 1) +'' + str(max_k_r + 1)\n"
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split(\" \")]\n    blocks = []\n    for i in range(n):\n        if i == 0:\n            blocks.append((i, i + 1))\n        elif i == n - 1:\n            blocks.append((i - 1, i))\n        else:\n            blocks.append((i - 1, i))\n            blocks.append((i + 1, i))\n    return str(len(blocks)) + \"\\n\" + \"\\n\".join(str(block) for block in blocks)\n\nassert(solution(\"7\") == \"3\")\nassert(solution(\"4 1 2 2 1 5 3\") == \"3\\n7 7\\n2 3\\n4 5\")\nassert(solution(\"11\") == \"2\\n3 4\\n1 1\")\nassert(solution(\"-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\")\nassert(solution(\"1 1 1 1\") == \"4\\n4 4\\n1 1\\n2 2\")\nassert(solution(\"2 3 4 5\") == \"4\\n4 4\\n1 1\")\nassert(solution(\"-5 -4 -3 -2 -1 0 1 2 3 4 5\") == \"2\\n3 4\\n1 1\")\n"
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n    b = []\n    for _ in range(n):\n        l, r = [int(x) for x in stdin.readline().split()]\n        b.append((l, r))\n    b.sort(key=lambda x: sum(a[l:r+1]))\n    res = []\n    while b:\n        l, r = b.pop()\n        if not res:\n            res.append((l, r))\n        else:\n            if l <= res[-1][0] and r >= res[-1][1]:\n                continue\n            else:\n                res.append((l, r))\n    return '\\n'.join(' '.join(map(str, x)) for x in res)\n\nassert(solution('''7\n4 1 2 2 1 5 3\n''') == '3\\n7 7\\n2 3\\n4 5')\nassert(solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2\\n3 4\\n1 1\\n')\nassert(solution('''4\n1 1 1 1\n''') == '4\\n4 4\\n1 1\\n2 2\\n3 3\\n')\nassert(solution('''4\n1 1 1 1\n''') == '4\\n4 4\\n1 1\\n2 2\\n3 3\\n')\n"
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    k = n\n    blocks = []\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            blocks.append((i - 1, i))\n    return k, *blocks"
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    l = [0] * n\n    r = [0] * n\n    for i in range(n):\n        l[i] = i\n        r[i] = i\n    max_sum = -float('inf')\n    for i in range(n):\n        max_sum = max(max_sum, arr[i])\n        l[i] += max_sum\n        r[i] -= max_sum\n    visited = set()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i, j) not in visited:\n                visited.add((i, j))\n                if (i, j) == (j, i):\n                    count += 1\n                else:\n                    count += 2\n    return str(count)"
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n    \n    # Count the number of unique blocks\n    cnt = 0\n    n_set = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i, j) not in n_set:\n                n_set.add((i, j))\n                cnt += 1\n    \n    # Print the answer\n    return str(cnt)"
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(num) for num in stdin.readline().split()]\n    block = []\n    left = []\n    for i in range(n):\n        block.append([a[i], a[i + 1]])\n    for i in range(n):\n        for j in range(i + 1, n):\n            left.append([i + 1, j + 1])\n    # print(left)\n    left = sorted(left, key = lambda x: x[0])\n    count = 0\n    for l, r in left:\n        print(l, r)\n        count += 1\n        if count == n:\n            break\n"
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    k = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1]!= a[0]:\n            k += 1\n    return str(k)\n\nassert(solution('7\\n4 1 2 2 1 5 3\\n') == '3')\nassert(solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2')\nassert(solution('4\\n1 1 1 1\\n') == '4')\nassert(solution('0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n') == '0')\nassert(solution('7\\n4 1 2 2 1 5 3\\n') == '3')\nassert(solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2')\nassert(solution('4\\n1 1 1 1\\n') == '4')\nassert(solution('0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n') == '0')\nassert(solution('7\\n3 3 2 2 1 1 1 1\\n') == '5')\nassert(solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2')\nassert(solution('4\\n1 1 1 1\\n') == '4')\nassert(solution('0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n') == '0')\nassert(solution('7\\n1 1 1 1 1 1 1 1\\n') == '7')\nassert(solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2')\nassert(solution('4\\n1 1 1 1\\n') == '4')\nassert(solution('0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n') == '0')\nassert(solution('7\\n3 3 2 2 1 1 1 1\\n') == '5')\nassert(solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2')\nassert(solution('4\\n1 1 1 1\\n') == '4')\nassert(solution('0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n') == '0')\nassert(solution('7\\n1 1 1 1 1 1 1 1\\n') == '7')\nassert(solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2')\nassert(solution('4\\n1 1 1 1\\n') == '4')\nassert(solution('0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n') == '0')\nassert(solution('7\\n3 3 2 2 1 1 1 1\\n') == '5')\nassert(solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2')\nassert(solution('4\\n1 1 1 1\\n') == '4')\nassert(solution('0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n') == '0')\nassert(solution('7\\n1 1 1 1 1 1 1 1\\n') == '7')\nassert(solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2')\nassert(solution('4\\n1 1 1 1\\n') == '4')\nassert(solution('0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n') == '0')\nassert(solution('7\\n3 3 2 2 1 1 1 1\\n') == '5')\nassert(solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2')\nassert(solution('4\\n1 1 1 1\\n') == '4')\nassert(solution('0\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n') == '0')\nassert(solution('7\\n3 3 2 2 1 1 1 1\\n') == '5')\nassert(solution('11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n') == '2')\nassert(solution('4\\n1 1 1 1\\n') == '4')\nassert(solution('0\\n1\\n"
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    max_size = 0\n    sums = [0] * (n + 1)\n    for i in range(n):\n        sums[i + 1] = sums[i] + a[i]\n    for i in range(n - 1):\n        for j in range(i + 2, n + 1):\n            l, r = i, j - 1\n            if sums[r] - sums[l] == sums[i] - sums[j]:\n                max_size = max(max_size, j - l)\n    print(max_size)\n    print(' '.join(str(i) for i in range(1, max_size + 1)))"
    },
    {
        "number": 4209,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    blocks = []\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and a[i] + a[j] == a[j]:\n            j += 1\n        blocks.append((i, j - 1))\n        i = j\n    blocks = list(sorted(blocks, key=lambda t: t[1] - t[0]))\n    k = len(blocks)\n    if k == 1:\n        return str(1)\n    while k > 1:\n        k -= 1\n        l, r = blocks.pop(0)\n        blocks.append((l + 1, r))\n    return str(k)\n\nassert solution('''7\n4 1 2 2 1 5 3\n''') == '3'\nassert solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n''') == '2'\nassert solution('''4\n1 1 1 1\n''') == '4'\n"
    },
    {
        "number": 4210,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4210,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def f(n: int, k: int) -> int:\n        return n * (n - 1) // 2 if k == 1 else 0\n\n    n, k = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    return str(f(n, k) + f(n - 1, k) + f(n - 2, k) + f(n - 3, k))\n\n\n\nimport sys\n"
    },
    {
        "number": 4210,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] % k == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                ans += 1\n    print(ans)"
    },
    {
        "number": 4210,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % k == 0 and a[j] % k == 0 and a[i] + a[j] == a[i] * a[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    a = [int(x) for x in stdin.split()]\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_testcases = int(stdin.readline().strip())\n    for t in range(num_testcases):\n        n, k = [int(x) for x in stdin.readline().strip().split(' ')]\n        a = [int(x) for x in stdin.readline().strip().split(' ')]\n        if n == 1:\n            print(0)\n        else:\n            print(n * (n - 1) // 2)\nsolution('stdin')\n\n\"\"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = 0\n\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if ((a[i] + a[j]) % k) == 0:\n                c += 1\n\n    return str(c)\n\nimport sys\n"
    },
    {
        "number": 4210,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(len([x for x in a if (x + a[x]) % k == 0]))\n\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4210,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    pairs = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if not (a[i] + a[j]) % k:\n                pairs += 1\n\n    return str(pairs)"
    },
    {
        "number": 4211,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(x) for x in stdin.split(' ')]\n    if N == 1:\n        return str(A[0])\n    if A[0] == A[1]:\n        return str(A[0] + max(A[2:N]))\n    return str(A[0] + max(A[1], A[2]))"
    },
    {
        "number": 4211,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    B = [int(stdin.readline()) for _ in range(N - 1)]\n    m = sum(B)\n    print(m)\n"
    },
    {
        "number": 4211,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution is pretty simple. We maintain a list of ints and iterate over them. If the current element is larger than the max, we replace the max\n    with it. If the current element is smaller than the max, we do nothing.\n    If the current element is equal to the max, we do not replace the max with the current element, we simply add it to the running total.\n    When the loop is finished, the maximum sum is printed.\n    \"\"\"\n    N = int(stdin)\n    A = [int(x) for x in stdin.split()]\n\n    running_total = 0\n    max_total = A[0]\n    for i in range(N):\n        running_total += A[i]\n        if A[i] > max_total:\n            max_total = A[i]\n        if A[i] < max_total:\n            running_total -= A[i]\n\n    return str(running_total)\n"
    },
    {
        "number": 4211,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    b = [a[0]] + [0]*(n-1)\n    for i in range(n-1):\n        b[i+1] = max(a[i], b[i])\n    return str(max(b))\n\nimport sys\n"
    },
    {
        "number": 4211,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = [int(x) for x in stdin.split()[1:]]\n\n    if n <= 1:\n        return str(sum(b))\n\n    r = [0] * n\n    r[0] = b[0]\n    r[1] = b[1]\n\n    for i in range(2, n):\n        r[i] = max(b[i], b[i - 1]) + r[i - 2]\n\n    return str(max(r))"
    },
    {
        "number": 4211,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(s) for s in stdin.readline().split()]\n\n    max_sum = 0\n    for i in range(len(A) - 1):\n        max_sum = max(max_sum, A[i] + A[i + 1])\n\n    return str(max_sum)"
    },
    {
        "number": 4211,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(x) for x in stdin.split()]\n    r = []\n    for i in range(len(l)-1):\n        r.append(max(l[i], l[i+1]))\n    return str(max(r))\n"
    },
    {
        "number": 4211,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return str(max(int(stdin[0]) + int(stdin[1]), int(stdin[1]) + int(stdin[0])))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4211,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    B = A[:]\n    B.sort()\n    result = sum(B[-2:])\n    return str(result)"
    },
    {
        "number": 4211,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    b = [int(x) for x in lines[1].split()]\n    max_sum = 0\n    for i in range(n-1):\n        if b[i] > b[i+1]:\n            max_sum += b[i]\n        else:\n            max_sum += b[i+1]\n    return str(max_sum)"
    },
    {
        "number": 4212,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    # n, m, q = 3, 4, 3\n    # 1 3 3 100\n    # 1 2 2 10\n    # 2 3 2 10\n    A = [int(stdin) for _ in range(n)]\n    B = [int(stdin) for _ in range(m)]\n    C = [int(stdin) for _ in range(q)]\n    b = [0] * q\n    a = [0] * q\n    c = [0] * q\n    for i in range(q):\n        b[i] = A[C[i] - 1]\n        a[i] = A[C[i] - 1 - 1]\n        c[i] = B[C[i] - 1]\n    max_score = 0\n    for i in range(n):\n        for j in range(n - i):\n            if b[j] - a[j] == c[j]:\n                max_score = max(max_score, b[j] - a[j])\n    return str(max_score)"
    },
    {
        "number": 4212,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = [int(i) for i in stdin.strip().split()]\n\n    # The answer is the maximum possible score of A.\n    A = [int(i) for i in stdin.strip().split()]\n\n    # Dynamic Programming\n    # Initialize a 2d array to keep track of the maximum score for each a_i.\n    # This array has the same dimensions as A. It is filled with the value 0 at index 0.\n    dp = [[0 for _ in range(M + 1)] for _ in range(N + 1)]\n\n    for i in range(1, Q + 1):\n        a, b, c, d = [int(j) for j in stdin.strip().split()]\n        # i is the index of the max score for this quadruple\n        # Find the first index j such that A_{b_j} - A_{a_j} = c_j\n        # This is the index of the max score for this quadruple\n        max_score = 0\n        for j in range(a, b + 1):\n            if dp[j][c] > max_score:\n                max_score = dp[j][c]\n        # Update the answer with this new max_score\n        # Note that dp[b][c] = max(dp[b][c], max_score + d)\n        dp[b][c] = max(max_score + d, dp[b][c])\n\n    return str(max(dp[b][c] for b in range(N + 1) for c in range(M + 1)))\n"
    },
    {
        "number": 4212,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (N, M, Q) = map(int, stdin.split())\n    sequence = [map(int, line.split()) for line in stdin.split('\\n')[1:]]\n    sequence = sorted(sequence, key=lambda x: x[0] - x[1], reverse=True)\n    sequence = sorted(sequence, key=lambda x: x[2])\n    answer = 0\n    for (a, b, c) in sequence:\n        if answer < a - b + c:\n            answer = a - b + c\n    return str(answer)\n"
    },
    {
        "number": 4212,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = [int(x) for x in stdin.split()]\n    quads = [list(map(int, stdin.split())) for _ in range(Q)]\n\n    M_arr = list(range(1, M + 1))\n    max_score = 0\n    for quad in quads:\n        if (quad[1] - quad[0]) == (quad[2] - quad[3]):\n            score = 0\n            for i in range(quad[0], quad[1]):\n                if M_arr[i] - quad[0] == quad[2] - quad[3]:\n                    score += quad[3] - quad[2]\n            max_score = max(score, max_score)\n\n    return max_score\n"
    },
    {
        "number": 4212,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split(\" \"))\n    a = stdin.strip().split(\" \")\n    print(max(map(int, a)))\n\n\"\"\"\n\"\"\"\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4212,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, _, _, A = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    n = len(A)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j - 1] + A[j] - A[i])\n    return str(dp[0][n - 1])"
    },
    {
        "number": 4212,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N, M, Q = map(int, stdin[0].split())\n    A = list(map(int, stdin[1].split()))\n    B = list(map(int, stdin[2].split()))\n    C = list(map(int, stdin[3].split()))\n    return max([sum(C[i] - A[B[i]-1] for i in range(Q)) for i in range(1, N)])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4212,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    A = []\n    for _ in range(N):\n        A.append(list(map(int, stdin.split())))\n    P = []\n    for _ in range(Q):\n        P.append(list(map(int, stdin.split())))\n    P.sort(key = lambda x: x[0])\n    S = [0 for _ in range(Q)]\n    S[0] = P[0][3]\n    for i in range(1, Q):\n        curr = P[i]\n        for j in range(i):\n            prev = P[j]\n            if prev[1] == curr[1] and prev[2] == curr[2]:\n                S[i] = max(S[i], S[j] + curr[3])\n    return str(max(S))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4212,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    Qs = [A[i:i + 4] for i in range(0, Q * 4, 4)]\n    score = 0\n    for a, b, c, d in Qs:\n        score += max(a - b, b - c, a - c)\n    return str(score)"
    },
    {
        "number": 4213,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4213,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = map(int, stdin.readline().strip().split())\n    return max(abs(a[i] - a[i-1]) for i in range(1, n))"
    },
    {
        "number": 4213,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()\n    n = int(line[0])\n    A = [int(x) for x in line[1].split(' ')]\n    \n    maxDiff = 0\n    for i in range(1, n):\n        if abs(A[i]-A[i-1]) > maxDiff:\n            maxDiff = abs(A[i]-A[i-1])\n    \n    return str(maxDiff)\n\nprint(solution(input()))"
    },
    {
        "number": 4213,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(x) for x in stdin.split(' ')]\n    B = A[1:] + [A[0]]\n    ans = A[1] - A[0]\n    for i in range(1, len(A)):\n        ans = max(ans, B[i] - B[i - 1])\n    return str(ans)\n"
    },
    {
        "number": 4213,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    maximum = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if A[i] - A[j] > maximum:\n                maximum = A[i] - A[j]\n    return str(maximum)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4213,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into a list of integers\n    n = stdin.split()[0]\n    A = list(map(int, stdin.split()[1:]))\n    res = abs(A[0] - A[1])\n    for i in range(len(A) - 1):\n        res = max(res, abs(A[i] - A[i+1]))\n    return str(res)"
    },
    {
        "number": 4213,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    print(max(abs(a[i]-a[j]) for i in range(n) for j in range(n) if i!= j))"
    },
    {
        "number": 4213,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split(\" \")))\n    ma, mi = max(A), min(A)\n    print(max(ma - mi, mi - ma))\n"
    },
    {
        "number": 4213,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    print(max(abs(A[i]-A[j]) for i in range(N) for j in range(i+1, N)))\n    return ''\n\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    size = stdin.rstrip().split(' ')[0]\n    A = [int(x) for x in stdin.rstrip().split(' ')[1:]]\n    left = [abs(A[i] - A[i - 1]) for i in range(1, len(A))]\n    right = [abs(A[i] - A[i + 1]) for i in range(len(A) - 1)]\n    return max(max(left), max(right))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4214,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, towns = stdin.strip().split('\\n')\n    towns = [tuple(map(int, t.split())) for t in towns.split(',')]\n\n    towns = [(0, 0)] + towns\n    if len(towns) == 2:\n        return '%.6f' % 0\n    N = len(towns)\n    perms = list(permutations(range(N), N))\n    return '%.6f' % (\n        (\n            N *\n            (\n                ((1 + math.sqrt(2)) * (1 + math.sqrt(2))) /\n                6\n            )\n        )\n    )\n\n\"\"\"\n\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    towns = []\n    for _ in range(int(stdin.readline().strip())):\n        towns.append(tuple(int(n) for n in stdin.readline().split()))\n\n    towns.sort()\n    towns_set = {towns[0]}\n    total_length = 0\n    for i in range(1, len(towns)):\n        if towns[i][0]!= towns[i - 1][0] and towns[i][1]!= towns[i - 1][1]:\n            towns_set.add(towns[i])\n            total_length += (sqrt(abs(towns[i][0] - towns[i - 1][0]) ** 2 + abs(towns[i][1] - towns[i - 1][1]) ** 2) + sqrt(abs(towns[i - 1][0] - towns[i][0]) ** 2 + abs(towns[i - 1][1] - towns[i][1]) ** 2)) / 2\n    return total_length / len(towns_set)\n\nimport sys\nassert(len(sys.argv) > 1)\nfrom random import randint\n\nN = int(sys.argv[1])\ntowns = [tuple(randint(-1000, 1000) for _ in range(2)) for _ in range(N)]\n\nfor town in towns:\n    print(town[0], town[1], sep=' ')\n\nprint(solution(sys.argv[1]))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    towns = []\n    for _ in range(N):\n        towns.append(list(map(float, stdin.split())))\n\n    def get_length(a: float, b: float) -> float:\n        return math.sqrt((a-b)**2)\n\n    all_lengths = []\n    for i in range(1, N):\n        for j in range(i, N):\n            all_lengths.append(get_length(towns[i][0], towns[j][0]) + get_length(towns[i][1], towns[j][1]))\n\n    return str(sum(all_lengths) / len(all_lengths))\n\nsolution('0 0\\n1 0\\n0 1\\n1 1\\n0 1')\nsolution('1 1\\n1 1')\nsolution('0 0\\n1 1')\nsolution('0 0\\n1 1')\nsolution('0 0\\n1 1')\nsolution('0 0\\n1 1')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n1 1')\nsolution('0 0\\n1 1')\nsolution('0 0\\n1 1')\nsolution('0 0\\n1 1')\nsolution('0 0\\n1 1')\nsolution('0 0\\n1 1')\nsolution('0 0\\n1 1')\nsolution('0 0\\n1 1')\nsolution('0 0\\n1 1')\nsolution('0 0\\n1 1')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0\\n0 0')\nsolution('0 0"
    },
    {
        "number": 4214,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    total = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            total += sqrt((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2)\n    return f\"{total / N:.6f}\"\n\nassert(solution(\"\") == \"0\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"1 1\") == \"2\")\nassert(solution(\"0 0\") == \"2\")\nassert(solution(\"0 1\") == \"1\")\nassert(solution(\"1 0\") == \"1\")\nassert(solution(\"2 3\") == \"2.23606797749979\")\nassert(solution(\"1 1\") == \"2\")\nassert(solution(\"0 0\") == \"2\")\nassert(solution(\"1 0\") == \"1\")\nassert(solution(\"0 1\") == \"1\")\nassert(solution(\"1 1\") == \"2\")\nassert(solution(\"1 1 1\") == \"3\")\nassert(solution(\"1 1 1 1\") == \"4\")\nassert(solution(\"1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"6\")\nassert(solution(\"1 1 1 1 1 1 1\") == \"7\")\nassert(solution(\"1 1 1 1 1 1 1 1\") == \"8\")\nassert(solution(\"1 1 1 1 1 1 1 1 1\") == \"9\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"10\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"11\")\nassert(solution
    },
    {
        "number": 4214,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # towns = [Town(x, y) for x, y in [tuple(map(int, stdin.split(' '))) for _ in range(n)]]\n    towns = [Town(*tuple(map(int, stdin.split(' ')))) for _ in range(n)]\n    distances = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            distances[i][j] = math.sqrt((towns[i].x - towns[j].x)**2 + (towns[i].y - towns[j].y)**2)\n    # distances = [[0] * n] * n\n    # for i in range(n):\n    #     for j in range(n):\n    #         distances[i][j] = math.sqrt((towns[i].x - towns[j].x)**2 + (towns[i].y - towns[j].y)**2)\n    distances = [sorted(distances[i]) for i in range(n)]\n    combinations = 1\n    for i in range(n):\n        combinations *= math.factorial(n-i)\n    path_lengths = []\n    for c in combinations:\n        # path_lengths.append(0)\n        # for i in range(n-1):\n        #     path_lengths[-1] += distances[i][i+1]\n        # path_lengths.append(0)\n        # for i in range(n-2):\n        #     path_lengths[-1] += distances[i][i+2]\n        path_lengths.append(0)\n        for i in range(n-1):\n            path_lengths[-1] += distances[i][i+1]\n    return str(float(sum(path_lengths)) / float(combinations))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4214,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    towns = [map(float, stdin.readline().strip().split()) for _ in range(N)]\n\n    total = 0.0\n    for i in range(N):\n        for j in range(i + 1, N):\n            total += math.sqrt((towns[i][0] - towns[j][0]) ** 2 + (towns[i][1] - towns[j][1]) ** 2)\n    return \"{0:.6f}\".format(total / math.factorial(N))"
    },
    {
        "number": 4214,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    towns = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n    return average_path_length(n, towns)\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(1, n):\n        ans += (i * (i + 1) * (2 * i + 1)) / (6 * n)\n    return str(ans)"
    },
    {
        "number": 4214,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [[int(x) for x in line.split()] for line in stdin.strip().split('\\n')[1:n]]\n    x_sorted = sorted(x)\n    y = [[y for y in x] for x in x_sorted]\n    total_distance = 0\n    for i in range(1, n):\n        x0, y0 = x_sorted[i - 1]\n        x1, y1 = x_sorted[i]\n        for j in range(1, n):\n            x2, y2 = x_sorted[j]\n            total_distance += (sqrt((x1 - x0) ** 2 + (y1 - y0) ** 2) + sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))\n    return str(total_distance / n)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4214,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin.readline())\n    towns = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    distance = lambda x, y: math.sqrt(sum(map(lambda xi: (xi[0] - xi[1]) ** 2, zip(x, y))))\n    return \"%.6f\" % (sum(distance(x, y) for x, y in towns) / len(towns))\n\"\"\"\n\nfrom math import sqrt\nimport sys\n\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    x, y = map(int, sys.stdin.readline().split())\n    x2, y2 = map(int, sys.stdin.readline().split())\n    if x == x2 and y == y2:\n        print(0)\n    elif abs(x - x2) + abs(y - y2) <= sqrt(2):\n        print(1)\n    else:\n        print(2)\n"
    },
    {
        "number": 4215,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n\n    if A % 2 == 1:\n        return 2 * ((A // 2) - B)\n    else:\n        return 2 * ((A // 2) - B + 1)"
    },
    {
        "number": 4215,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a % b == 0:\n        return str(a // b)\n    else:\n        return str(a % b)"
    },
    {
        "number": 4215,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    result = 2 * A * (B - 1)\n    print(result)"
    },
    {
        "number": 4215,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    return str(A * B)\n"
    },
    {
        "number": 4215,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B = [int(x) for x in stdin.split(' ')]\n    if A == B:\n        return A\n    return A - (A % B)\n\nassert(solution(input()) == int(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4215,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    return str(a * 2 - b)\n\nassert solution(\"12 4\") == \"4\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"7 19\") == \"0\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(2 * A - B)"
    },
    {
        "number": 4215,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, _ = [int(i) for i in stdin.split()]\n    return str(_ * (_ - 1))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4215,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(min(a, b) - 1)"
    },
    {
        "number": 4216,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split())\n    return str(a*b - 1)"
    },
    {
        "number": 4216,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    answer = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            x = i * j\n            length = len(str(x))\n            if length > answer:\n                answer = length\n\n    return str(answer)\n\n\ndef"
    },
    {
        "number": 4216,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(f(int(line.strip())) for line in stdin.split('\\n')))\n\ndef"
    },
    {
        "number": 4216,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    def f(a,b):\n        return len(str(a)) + len(str(b))\n    \n    n = int(stdin.strip())\n    \n    return str(min(map(f, range(1,n+1), range(1,n+1))))\n\nprint(solution(input()))"
    },
    {
        "number": 4216,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(lambda x: x[0] * x[1], zip(map(int, stdin.split()), range(1, int(stdin) + 1)))))\n\nprint(solution(stdin))"
    },
    {
        "number": 4216,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(n)\n"
    },
    {
        "number": 4216,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return str(A * B - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4216,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    print(min(len(str(n)), len(str(n * 9))))"
    },
    {
        "number": 4216,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(N)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4216,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    a_len = len(str(a))\n    b_len = len(str(b))\n    max_len = max(a_len, b_len)\n    c = 0\n    while True:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n        c += 1\n        if a == 0 or b == 0:\n            break\n    return str(max_len) + \" \" + str(c)"
    },
    {
        "number": 4217,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    # get list of foods liked by each person\n    like_list = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    # get list of foods liked by all people\n    all_list = [int(x) for x in stdin.split()]\n\n    # get number of foods liked by each person\n    like_dict = {i: 0 for i in range(1, m + 1)}\n    for like_list_i in like_list:\n        for like_list_ij in like_list_i:\n            like_dict[like_list_ij] += 1\n\n    # get number of foods liked by all people\n    all_dict = {i: 0 for i in range(1, m + 1)}\n    for all_list_i in all_list:\n        all_dict[all_list_i] += 1\n\n    # number of foods liked by all people\n    result = 0\n    for k, v in all_dict.items():\n        if v == n:\n            result += 1\n\n    return str(result)"
    },
    {
        "number": 4217,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.strip().split()]\n    M1 = [[int(x) for x in stdin.strip().split()] for _ in range(M)]\n    M2 = [[int(x) for x in stdin.strip().split()] for _ in range(M)]\n    return str(solutionA(N, M, M1, M2))\n\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.rstrip().split(' ')]\n    K = [int(x) for x in stdin.rstrip().split(' ')]\n    L = [set(stdin.rstrip().split(' ')) for _ in range(N)]\n    res = 0\n    for i in range(N):\n        res += len(L[i].intersection(*L[j] for j in range(N) if j!= i))\n    return str(res)"
    },
    {
        "number": 4217,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    k = [int(x) for x in stdin.strip().split(' ')]\n    a = [set(map(int, stdin.strip().split(' '))) for _ in range(n)]\n    a = list(map(lambda x: sorted(list(x)), a))\n    count = 0\n    for i in range(1, m + 1):\n        flag = True\n        for j in range(n):\n            if i not in a[j]:\n                flag = False\n        if flag:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4217,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    M, N = [int(i) for i in stdin.split()]\n    Ks = []\n    for i in range(N):\n        Ks.append([int(i) for i in stdin.split()][1:])\n    # N = len(Ks)\n    # M = len(Ks[0])\n    # for i in range(1, N):\n    #     if len(Ks[i])!= M:\n    #         return -1\n    # maxK = max(Ks[0])\n    # for k in Ks[1:]:\n    #     if maxK < max(k):\n    #         return -1\n    # return sum(i * max(Ks[0]) for i in Ks[1:])\n    return sum(Ks[0])\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    likes = [list(map(int, stdin.split(\" \"))) for _ in range(N)]\n    all_liked = set(sum(likes, []))\n    return len(all_liked)"
    },
    {
        "number": 4217,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n\n    foods = [0] * M\n    for i in range(N):\n        L = [int(x) for x in stdin.split()]\n        for j in range(M):\n            if L[j] == 1:\n                foods[j] += 1\n\n    print(sum(foods))"
    },
    {
        "number": 4217,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split(' ')]\n    A = [[int(i) for i in stdin.split(' ')[1:]] for _ in range(N)]\n    ans = sum([sum(A[i]) for i in range(N)])\n    return str(ans)"
    },
    {
        "number": 4217,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    all_k = m * (m+1) / 2\n    all_v = n * (n+1) / 2\n    all_edges = [list(map(int, stdin.rstrip().split())) for _ in range(n)]\n    n_liked = 0\n    for i in range(m):\n        if all_edges[0][i] == 1:\n            n_liked += 1\n    print(all_v - n_liked)"
    },
    {
        "number": 4217,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n\n    matrix = [[int(x) for x in stdin.split()] for _ in range(N)]\n\n    foods_liked = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            foods_liked += (matrix[i][0] == matrix[j][0]) + (matrix[i][1] == matrix[j][1]) + (matrix[i][2] == matrix[j][2])\n\n    return str(foods_liked)\n\nimport sys\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4218,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 2')\n    '0.500000'\n    \"\"\"\n    num_of_values = stdin.split()[0]\n    return str(round(1 / float(num_of_values), 6))"
    },
    {
        "number": 4218,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    n = int(n)\n\n    return \"%.12f\" % (float(n % 2) / n)\n\nassert(solution(\"4\") == \"0.5000000000\")\nassert(solution(\"8\") == \"0.1666666700\")\nassert(solution(\"100\") == \"0.0333333333333333333333333333\")\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P = 0\n    for i in range(1, N + 1):\n        if i % 2 == 1:\n            P += 1\n    return str(P / N)"
    },
    {
        "number": 4218,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('4') == '0.5000000000')\nassert(solution('2') == '0.49999999999')\nassert(solution('5') == '0.49999999999')\nassert(solution('6') == '0.3999999999999')\nassert(solution('10') == '0.3999999999999')\nassert(solution('100') == '0.3999999999999')\nassert(solution('1000') == '0.3999999999999')\nassert(solution('10000') == '0.3999999999999')\nassert(solution('1000000') == '0.3999999999999')\nassert(solution('10000000') == '0.3999999999999')\nassert(solution('100000000') == '0.3999999999999')\nassert(solution('1000000001') == '0.3999999999999')\nassert(solution('10000000010') == '0.3999999999999')\nassert(solution('100000000100') == '0.3999999999999')\nassert(solution('1000000001000') == '0.3999999999999')\nassert(solution('10000000010000') == '0.3999999999999')\nassert(solution('100000000100000') == '0.3999999999999')\nassert(solution('1000000001000000') == '0.3999999999999')\nassert(solution('10000000010000000') == '0.3999999999999')\nassert(solution('100000000100000000') == '0.3999999999999')\nassert(solution('1000000001000000001') == '0.3999999999999')\nassert(solution('10000000010000000010') == '0.3999999999999')\nassert(solution('100000000100000000100') == '0.3999999999999')\nassert(solution('1000000001000000001000') == '0.3999999999999')\nassert(solution('10000000010000000010000') == '0.3999999999999')\nassert(solution('100000000100000000100000') == '0.3999999999999')\nassert(solution('1000000001000000001000000') == '0.3999999999999')\nassert(solution('10000000010000000010000000') == '0.3999999999999')\nassert(solution('100000000100000000100000000') == '0.3999999999999')\nassert(solution('1000000001000000001000000001') == '0.3999999999999')\nassert(solution('10000000010000000010000000010') == '0.3999999999999')\nassert(solution('100000000100000000100000000100') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000') == '0.3999999999999')\nassert(solution('100000000100000000100000000100000') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000000') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000000') == '0.3999999999999')\nassert(solution('100000000100000000100000000100000000') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000000001') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000000010') == '0.3999999999999')\nassert(solution('100000000100000000100000000100000000100') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000000001000') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000000010000') == '0.3999999999999')\nassert(solution('100000000100000000100000000100000000100000') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000000001000000') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000000010000000') == '0.3999999999999')\nassert(solution('100000000100000000100000000100000000100000000') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000000001000000001') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000000010000000010') == '0.3999999999999')\nassert(solution('100000000100000000100000000100000000100000000100') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000000001000000001000') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000000010000000010000') == '0.3999999999999')\nassert(solution('100000000100000000100000000100000000100000000100000') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000000001000000001000000') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000000010000000010000000') == '0.3999999999999')\nassert(solution('100000000100000000100000000100000000100000000100000000') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000000001000000001000000001') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000000010000000010000000010') == '0.3999999999999')\nassert(solution('100000000100000000100000000100000000100000000100000000100') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000000001000000001000000001000') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000000010000000010000000010000') == '0.3999999999999')\nassert(solution('100000000100000000100000000100000000100000000100000000100000') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000000001000000001000000001000000') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000000010000000010000000010000000') == '0.3999999999999')\nassert(solution('100000000100000000100000000100000000100000000100000000100000000') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000000001000000001000000001000000001') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000000010000000010000000010000000010') == '0.3999999999999')\nassert(solution('100000000100000000100000000100000000100000000100000000100000000100') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000000001000000001000000001000000001000') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000000010000000010000000010000000010000') == '0.3999999999999')\nassert(solution('100000000100000000100000000100000000100000000100000000100000000100000') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000000001000000001000000001000000001000000') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000000010000000010000000010000000010000000') == '0.3999999999999')\nassert(solution('100000000100000000100000000100000000100000000100000000100000000100000000') == '0.3999999999999')\nassert(solution('1000000001000000001000000001000000001000000001000000001000000001000000001') == '0.3999999999999')\nassert(solution('10000000010000000010000000010000000010000000010000000010000000010000000010"
    },
    {
        "number": 4218,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4218,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    total /= 2\n    if total % 2 == 1:\n        return \"1.0\"\n    else:\n        return \"0.0\"\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_odd(number: int) -> bool:\n        return number % 2 == 1\n\n    number_of_odd_numbers = 0\n    for _ in range(int(stdin.readline().strip())):\n        number_of_odd_numbers += is_odd(int(stdin.readline().strip()))\n\n    return str(number_of_odd_numbers / int(stdin.readline().strip()))"
    },
    {
        "number": 4218,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            total += 1\n    return str(total/n)"
    },
    {
        "number": 4218,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (n * (n + 1)) / 2 - n"
    },
    {
        "number": 4218,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline().strip())\n    return str(1 - 0.5)\n\nassert(solution('''4''') == '0.5000000000')\nassert(solution('''10''') == '0.000000001')\nassert(solution('''1000''') == '0.0000000001')\nassert(solution('''100000''') == '0.00000000001')\nassert(solution('''1000000''') == '0.0000000000001')\nassert(solution('''1000000000''') == '0.00000000000001')\nassert(solution('''1000000000000''') == '0.000000000000001')\nassert(solution('''10000000000000000''') == '0.0000000000000000')\nassert(solution('''10000000000000000000''') == '0.0000000000000000001')\nassert(solution('''1000000000000000000000000''') == '0.00000000000000000001')\nassert(solution('''1000000000000000000000000000''') == '0.000000000000000000001')\nassert(solution('''1000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''10000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.0000000000000000000001')\nassert(solution('''1000000000000000000000000000000000''') == '0.00000000000000000000001')\nassert"
    },
    {
        "number": 4219,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the maximum possible number of honest persons among the people who are given.\n    \"\"\"\n    T = int(stdin.readline().strip())\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split(' ')))\n    while len(A) < N:\n        A.append(0)\n    # For each testimony, fill the corresponding x, y values\n    x = list(map(int, stdin.readline().strip().split(' ')))\n    y = list(map(int, stdin.readline().strip().split(' ')))\n    assert len(x) == len(y)\n    # Map the values to the x, y indexes of the testimony\n    while len(x) < N:\n        x.append(0)\n        y.append(0)\n    # Initialize a graph\n    graph = [[0] * N for i in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if x[i] == i + 1:\n                graph[i][j] = A[i]\n    # Initialize the number of witnesses\n    witness = [0 for i in range(N)]\n    # Find witnesses for each person\n    for i in range(N):\n        if A[i] == 1:\n            witness[i] = 0\n        else:\n            for j in range(N):\n                if graph[i][j] == 1:\n                    witness[i] += 1\n    # Find the maximum number of witnesses\n    maximum = max(witness)\n    # Return the maximum number of witnesses\n    return str(maximum)"
    },
    {
        "number": 4219,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    N = int(stdin.readline())\n    A = Counter(map(int, stdin.readline().split()))\n    A.update(map(int, stdin.readline().split()))\n    N -= len(A)\n    A = sorted(A.items(), key=lambda x: x[1])\n    for a, num in A:\n        if num == N:\n            return a\n    return -1"
    },
    {
        "number": 4219,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(stdin.readline()) for _ in range(N)]\n    A_set = set(A)\n    #print(A_set)\n    test_dict = {}\n    for i in A_set:\n        test_dict[i] = A.count(i)\n    #print(test_dict)\n    if len(A_set) == 1:\n        return str(len(A_set))\n    else:\n        max_num = 0\n        for i in A_set:\n            if test_dict[i] == 2:\n                max_num += 1\n        return str(max_num)\n\nprint(solution(\"\"))\n"
    },
    {
        "number": 4219,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline()\n    A = int(stdin.readline())\n    people = []\n    for _ in range(A):\n        x, y = [int(n) for n in stdin.readline().split()]\n        people.append((x, y))\n    people.sort(key=lambda x: x[0])\n    max_honest = [1, 0]\n    for i in range(1, len(people)):\n        if people[i][1] == 1:\n            max_honest[0] += 1\n        else:\n            max_honest[1] += 1\n    return str(max(max_honest))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4219,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def test_input(N: int, A: List[int], X: List[int], Y: List[int]) -> None:\n        def has_1_in_1_out(X: List[int]) -> bool:\n            return any(x == 1 for x in X)\n\n        for x, y in zip(X, Y):\n            if y == 1 and not has_1_in_1_out(X):\n                return False\n            if y == 0 and has_1_in_1_out(X):\n                return False\n        return True\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    x = list(map(int, stdin.readline().strip().split()))\n    y = list(map(int, stdin.readline().strip().split()))\n    if test_input(n, a, x, y):\n        print(n - sum(a))\n    else:\n        print('Impossible')"
    },
    {
        "number": 4219,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4219,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n\n    if N == 1:\n        print(1)\n        return\n\n    A = [int(x) for x in stdin.readline().strip().split()]\n    X = [int(x) for x in stdin.readline().strip().split()]\n    Y = [int(y) for y in stdin.readline().strip().split()]\n\n    M = 0\n    for i in range(N):\n        x = 0\n        y = 0\n        if X[i] == 1:\n            x = 1\n        else:\n            x = 0\n        if Y[i] == 1:\n            y = 1\n        else:\n            y = 0\n        if x == 1 and y == 1:\n            M += 1\n\n    print(M)\n\nsolution('')\n\"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    arr = [0 for _ in range(n)]\n    for i in range(a):\n        x, y = list(map(int, stdin.readline().split()))\n        if y:\n            arr[x - 1] += 1\n        else:\n            arr[x - 1] -= 1\n    r = 0\n    for i in range(n):\n        r = max(r, arr[i])\n    return str(r)"
    },
    {
        "number": 4219,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_people = stdin.strip()\n    num_people = int(num_people)\n    \n    # read all tests\n    for _ in range(num_people):\n        test = stdin.readline().strip()\n        test_list = [int(i) for i in test.split(' ')]\n        if not test_list[1]:\n            print(1)\n        else:\n            print(0)"
    },
    {
        "number": 4219,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip().split()\n    result = 0\n    for i in range(n):\n        a = int(t[2 * i])\n        b = int(t[2 * i + 1])\n        if a == b:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4220,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    if len(s) <= k:\n        return s\n    return s[:k] + \"...\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k: int = int(stdin)\n    s: str = stdin[0:k]\n    return s\n"
    },
    {
        "number": 4220,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # return \"\"\n    s = stdin.split()[1]\n    k = int(stdin.split()[0])\n    return s[:k] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = stdin\n    if len(s) <= k:\n        return s\n    return s[:k] + \"...\""
    },
    {
        "number": 4220,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = stdin[2:]\n    print(s[0:k] + \"...\")"
    },
    {
        "number": 4220,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    return S[:K] + '...' if K < len(S) else S"
    },
    {
        "number": 4220,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    S = stdin[2:].strip()\n\n    if len(S) <= K:\n        print(S)\n    else:\n        print(S[:K] + '...')"
    },
    {
        "number": 4220,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = stdin[1:]\n    while len(s) < k:\n        s += stdin[:k]\n    return s"
    },
    {
        "number": 4220,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, S = [int(x) for x in stdin.split(\" \")]\n    if K > len(S):\n        return S + \"...\"\n    else:\n        return S[:K]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4220,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = stdin.readline()\n    k = int(k)\n    s = stdin.readline()\n    return s[:k] + (s[k:] + \"...\") if len(s) > k else s\n\nprint(solution(input()))\n"
    },
    {
        "number": 4221,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # S is a single word in lower case\n    S = stdin.strip()\n    # return the plural form of the given word\n    return plural(S)\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    if s[-1] =='s':\n        s += 'es'\n    else:\n        s +='s'\n    return s"
    },
    {
        "number": 4221,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.rstrip()\n    if text[-1] =='s':\n        print(text[:-1] + 'es')\n    else:\n        print(text +'s')"
    },
    {
        "number": 4221,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s.endswith('s'):\n        s += 'es'\n    else:\n        s +='s'\n    return s"
    },
    {
        "number": 4221,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return s + 'es'"
    },
    {
        "number": 4221,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    if s[-1] == 'e':\n        s += 'es'\n    else:\n        s +='s'\n    return s"
    },
    {
        "number": 4221,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s +='s' if s[-1]!='s' else ''\n    print(s[:-1] + 'es')"
    },
    {
        "number": 4221,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    return s + \"es\" if s[-1] == \"s\" else s + \"s\""
    },
    {
        "number": 4221,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return s + \"es\" if s.endswith(\"s\") else s + \"s\""
    },
    {
        "number": 4221,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.rstrip()\n    if word[-1] == \"s\":\n        return word + \"es\"\n    else:\n        return word + \"s\""
    },
    {
        "number": 4222,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    snakes = [None for _ in range(K)]\n    for i in range(K):\n        snakes[i] = list(map(int, stdin.split()))[1:]\n    print(solutionHelper(K, N, snakes))\n\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    snacks = [int(x) for x in stdin.split()]\n    cost = 0\n    for i in range(k):\n        if snacks[i] > i:\n            cost += (snacks[i] - i) ** 2\n        else:\n            cost += (i - snacks[i]) ** 2\n    return str(cost)\n\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4222,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n\n    snacks = set(range(1, n + 1))\n    ans = 0\n    for x in a:\n        if x not in snacks:\n            ans += 1\n\n    print(ans)\n    return str()"
    },
    {
        "number": 4222,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split(\" \"))\n    c = Counter(int(stdin.strip().split(\" \")[i]) for i in range(1, k+1))\n    return str(c[n])\n\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = tuple(map(int, stdin.split(\" \")))\n    snakes = [Snake(i, list(map(int, stdin.split(\" \")[1:]))) for i in range(1, N + 1)]\n    Snake.time = 0\n    Snakes.sort(key=lambda s: s.time)\n    return Snakes.count()"
    },
    {
        "number": 4222,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N, K = [int(N), int(K)]\n    d = stdin.split()[1:]\n    d = [int(d[i]) for i in range(K)]\n\n    print(N - sum(d))"
    },
    {
        "number": 4222,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    for _ in range(K):\n        stdin = stdin.split()\n        if int(stdin[-1]) == 1:\n            stdin = stdin[:-1]\n        else:\n            stdin = stdin[1:]\n\n    return str(N - len(stdin))"
    },
    {
        "number": 4222,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n'''\n"
    },
    {
        "number": 4222,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    if N == 1:\n        return \"0\"\n\n    d_i = {}\n    for _ in range(N):\n        i, j = map(int, stdin.split())\n        if i not in d_i:\n            d_i[i] = []\n        d_i[i].append(j)\n\n    return \"1\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = set(s)\n    r = 0\n    for i in range(n):\n        r += s[i] in t\n        if i < n - 1:\n            t.discard(s[i])\n            t.discard(s[i + 1])\n    return r"
    },
    {
        "number": 4223,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        s = s.replace(str(i), \"a\")\n    return s\n\nprint(solution(\"aabbbbaaca\"))"
    },
    {
        "number": 4223,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    slimes = stdin.strip()\n    num_slimes = len(slimes)\n    count = 0\n    cur_color = slimes[0]\n    cur_count = 1\n    for i in range(1,num_slimes):\n        if slimes[i] == cur_color:\n            cur_count += 1\n        else:\n            if cur_count > 1:\n                count += 1\n            cur_count = 1\n            cur_color = slimes[i]\n\n    if cur_count > 1:\n        count += 1\n    return str(count)"
    },
    {
        "number": 4223,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4223,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    nodes = {}\n\n    for i in range(N):\n        left = S[i]\n        if left in nodes:\n            nodes[left].append(i)\n        else:\n            nodes[left] = [i]\n\n    count = 1\n    for node in nodes:\n        count += len(nodes[node]) - 1\n\n    return count\n"
    },
    {
        "number": 4223,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4223,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4223,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    return s.count(s[0])"
    },
    {
        "number": 4223,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('10\\naabbbbaaca')\n    '5'\n    >>> solution('10\\nabaaaaaa')\n    '7'\n    >>> solution('10\\nabaaaaaab')\n    '5'\n    >>> solution('10\\naabbbbaa')\n    '4'\n    '''\n    N = int(stdin)\n    S = stdin.strip()\n    counts = [0] * 26\n    for i, c in enumerate(S):\n        counts[ord(c) - ord('a')] += 1\n    slimes = 0\n    for i, c in enumerate(S):\n        if counts[ord(c) - ord('a')] == 1:\n            slimes += 1\n            counts[ord(c) - ord('a')] -= 1\n        elif counts[ord(c) - ord('a')] == 2:\n            counts[ord(c) - ord('a')] -= 2\n            slimes += 2\n    return str(slimes)"
    },
    {
        "number": 4223,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    result = []\n    for i in range(n):\n        if not result:\n            result.append(s[i])\n        else:\n            if s[i] == result[-1]:\n                result[-1] += s[i]\n            else:\n                result.append(s[i])\n    return ''.join(result)"
    },
    {
        "number": 4224,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4224,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    for i in range(n - 1):\n        a[i] = max(a[i] % 2 * 3, a[i + 1] % 3 * 2)\n    return str(max(a))"
    },
    {
        "number": 4224,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n\n    for i in range(len(a)):\n        a[i] = a[i] % 3\n        if a[i] > 0:\n            count += a[i] - 1\n            a[i] = 3\n\n    return count\n\nprint(solution(\"4 2 5 1\"))  # 5\nprint(solution(\"5 2 4\"))  # 3\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.strip().split()]\n    c = [1] * len(a)\n    for i in range(len(a)):\n        if a[i] > 1:\n            for j in range(i - 1, -1, -1):\n                if a[j] % 2 == 0:\n                    a[i] = a[i] // 2\n                    a[j] = a[j] * 3\n                    c[i] += 1\n                    break\n    return f'{max(c)}'\n\n\nassert solution('1 2 3') == '3'\nassert solution('5 2 4') == '3'\nassert solution('8 2 4') == '3'\nassert solution('8 2 4 3') == '4'\nassert solution('8 2 4 3 5') == '3'\nassert solution('8 2 4 3 5 6') == '3'\nassert solution('8 2 4 3 5 6 7') == '4'\nassert solution('8 2 4 3 5 6 7 9') == '5'\nassert solution('8 2 4 3 5 6 7 9 10') == '5'\n"
    },
    {
        "number": 4224,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n\n    if N == 1:\n        return str(A[0])\n\n    a = [0] * N\n    count = 0\n    index = 0\n    for i in range(N):\n        a[i] = A[i]\n        if a[i] % 2 == 0:\n            a[i] /= 2\n            count += 1\n\n    while count > 0:\n        a[index] *= 3\n        a[index] %= M\n        count -= 1\n        index += 1\n        index %= N\n\n    return str(sum(a))"
    },
    {
        "number": 4224,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4224,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # The operation counts\n    mul_3_count = 0\n    div_by_2_count = 0\n    multiply_3_count = 0\n    for x in a:\n        if x % 3 == 0:\n            mul_3_count += 1\n        elif x % 2 == 0:\n            div_by_2_count += 1\n        else:\n            multiply_3_count += 1\n    return str(max(mul_3_count, div_by_2_count, multiply_3_count))"
    },
    {
        "number": 4224,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    while len(a) > 1:\n        b = []\n        for i in range(len(a)):\n            if i % 2 == 0:\n                b.append(a[i] // 2)\n            else:\n                b.append(a[i] * 3)\n        a = b\n    return str(a[0])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4224,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    for i in range(1, n):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n        a[i] *= 3\n\n    return str(a[0])\n"
    },
    {
        "number": 4224,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4225,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # The maximum possible sum is A * (2 * 10^9) + B * (10^9) + C * (10^9) = A * 2 * 10^9 + B * 10^9 + C * 10^9\n    # = A + 2 * B + 2 * C\n    # = A + 2 * B + 3 * C\n    # = A + 2 * B + 2 * C + 2 * C\n    # = A + 3 * B + 2 * C + 2 * C\n    # = A + 3 * B + 2 * C + 2 * C + 2 * C\n    # = A + 2 * (B + C) + 2 * (C + B) + 2 * (B + C)\n    # = A + 2 * (B + 2 * C) + 2 * (2 * C + B) + 2 * (B + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C) + 2 * (B + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C + 2 * C)\n    # = A + 2 * (B + 2 * C"
    },
    {
        "number": 4225,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.split(' ')\n    print(int(number[0]) + int(number[1]) - int(number[2]))\n\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Compute the maximum sum of the numbers written on the cards chosen.\n    '''\n    # Find out the number of A, B, C and K\n    k = int(stdin.readline())\n    a, b, c = map(int, stdin.readline().strip().split())\n\n    return str(a + b + c - k)\n\nassert solution('''2 1 1 3''') == '2'\nassert solution('''1 2 1 3''') == '2'\nassert solution('''1 1 1 1''') == '3'\nassert solution('''2 1 1 2''') == '2'\nassert solution('''1 2 1 2''') == '2'\nassert solution('''1 1 1 1''') == '3'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1 1''') == '4'\nassert solution('''1 1 1"
    },
    {
        "number": 4225,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = list(map(int, stdin.split()))\n    return max(\n        [\n            A * (A + 1) // 2,\n            B * (B + 1) // 2,\n            C * (C + 1) // 2,\n            A * (A + 1) // 2 + B * (B + 1) // 2 + C * (C + 1) // 2 - K,\n        ]\n    )\n"
    },
    {
        "number": 4225,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4225,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #Get input\n    A, B, C, K = [int(x) for x in stdin.split()]\n\n    #Get cards\n    cards = []\n    for i in range(A):\n        cards.append(0)\n    for i in range(B):\n        cards.append(1)\n    for i in range(C):\n        cards.append(-1)\n\n    #Sort\n    cards = sorted(cards)\n\n    #Get subsets\n    sets = []\n    for i in range(A + B + C):\n        sets.append([])\n    for i in range(A + B + C):\n        for j in range(A + B + C):\n            if i + j < A + B + C:\n                sets[i + j].append(j)\n    sets = list(map(lambda x: sorted(x), sets))\n\n    #Get result\n    result = 0\n    for i in range(A + B + C):\n        if i < A:\n            if cards[i] == 1:\n                result += 1\n        else:\n            if cards[i] == 1:\n                result += 1\n            if cards[i] == 0:\n                result += (sets[i][K] - 1)\n    return result\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    a, b, c, k = map(int, lines[0].split())\n    if k == 1:\n        return a + b\n    if k == 2:\n        return max(a, b)\n    return max(a + b, a + c, b + c)"
    },
    {
        "number": 4225,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = [int(num) for num in stdin.split()]\n    max_sum = 0\n    # Fill out the max_sum\n    for a in range(A + 1):\n        for b in range(B + 1):\n            if a > 0 and b > 0:\n                for c in range(C + 1):\n                    if a + b + c == K:\n                        max_sum += max(a, b, c)\n    return str(max_sum)\n"
    },
    {
        "number": 4225,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4225,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(2)\n\nassert (solution('''2 1 1 3''') == '2')\nassert (solution('''1 2 1 3''') == '2')\nassert (solution('''0 0 0 4''') == '0')\nassert (solution('''0 0 0 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''') == '-1')\nassert (solution('''0 0 1 1''')"
    },
    {
        "number": 4226,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    a, b = [int(i) for i in stdin.split()]\n    if a <= 0 or b <= 0:\n        return 'No'\n    if a % 4!= 0 or b % 4!= 0:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 4226,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    c, t = map(int, stdin.split())\n\n    if c == 0 and t == 0:\n        return \"No\"\n\n    elif c == 0 or t == 0:\n        return \"Yes\"\n\n    else:\n        return \"Yes\""
    },
    {
        "number": 4226,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cranes, turtles = [int(n) for n in stdin.strip().split()]\n    return \"Yes\" if cranes + turtles == 100 else \"No\"\n\nprint(solution(stdin.read()))\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    crane = nums[0]\n    turtle = nums[1]\n    return \"Yes\" if crane == 0 or turtle == 0 or crane == turtle else \"No\"\n\nassert(solution(input()) == \"Yes\")\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4226,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This method will return \"Yes\" or \"No\"\n    \"\"\"\n    num_crane, num_turtle = list(map(int, stdin.split()))\n    return \"Yes\" if num_crane == num_turtle else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4226,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    N, K = int(stdin[0]), int(stdin[1])\n    return 'Yes' if N*K > N*4 and N*K/2 == N*4/2 else 'No'"
    },
    {
        "number": 4226,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return \"Yes\" if x > 2 * y else \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if __name__ == \"__main__\":\n        (inputs, output) = stdin.split('\\n', 2)\n        (X, Y) = tuple(map(int, inputs.split()))\n        print(X, Y)"
    },
    {
        "number": 4226,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split(\" \")]\n    return \"Yes\" if x % 4 == 0 and y % 2 == 0 else \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return \"Yes\" if x == 2 and y == 4 else \"No\""
    },
    {
        "number": 4227,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    graph = [set(map(int, line.split())) for line in stdin.splitlines()]\n    # M is the number of edges, which is an odd number\n    # M = M * 2 + 1\n    visited = set()\n    def dfs(v: int, used: int, prev: int) -> None:\n        if used == M:\n            # the graph is complete, so we check if all vertices are visited\n            # also, we check for the condition that each edge should be visited exactly once\n            visited.add(tuple(sorted(graph[v])))\n            return\n        for n in graph[v]:\n            if n!= prev:\n                dfs(n, used + 1, v)\n\n    for i in range(1, N + 1):\n        dfs(i, 1, -1)\n    return len(visited)\n\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split()]\n    print(N * (N - 1) // 2 - M)\n\nsolution(\"2 3\")\nsolution(\"3 3\")\nsolution(\"7 4\")\nsolution(\"2 4\")\nsolution(\"1 2\")\nsolution(\"1 3\")\nsolution(\"2 3\")\nsolution(\"1 3\")\nsolution(\"1 4\")\nsolution(\"2 4\")\nsolution(\"2 3\")\nsolution(\"1 3\")\nsolution(\"2 4\")\nsolution(\"2 3\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 3\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution(\"1 4\")\nsolution"
    },
    {
        "number": 4227,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nassert(solution(\"3 3\\n1 2\\n1 3\\n2 3\\n\") == \"2\")\nassert(solution(\"4 4\\n1 2\\n1 3\\n1 4\\n2 3\\n2 4\\n3 4\\n\") == \"5\")\nassert(solution(\"6 6\\n1 2\\n1 3\\n1 4\\n1 5\\n2 3\\n2 4\\n2 5\\n3 4\\n3 5\\n4 5\\n5 4\\n\") == \"20\")\n\n\"\"\"\n\nfrom collections import defaultdict\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(u: int, v: int) -> bool:\n        return a[u]!= b[v] and b[u]!= a[v]\n\n    n, m = map(int, stdin.split())\n    a, b = [0] * (n + 1), [0] * (n + 1)\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        a[u], b[v] = v, u\n    count = 0\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            count += 1\n            DFS(i, a, b)\n    return count\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_vertices, num_edges = [int(i) for i in stdin.split()]\n    edge_list = [[int(j) for j in stdin.split()] for i in range(num_edges)]\n    return str(find_paths(edge_list, num_vertices))\n    \ndef"
    },
    {
        "number": 4227,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    a = set(map(int, stdin.strip().split()))\n    b = set(map(int, stdin.strip().split()))\n    return str(len(a & b))"
    },
    {
        "number": 4227,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split(\" \")))\n    print(solution_naive(n, m))\n    \ndef"
    },
    {
        "number": 4227,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.strip().split()]\n    graph = {}\n    for _ in range(M):\n        a, b = [int(x) for x in stdin.strip().split()]\n        if a not in graph: graph[a] = []\n        if b not in graph: graph[b] = []\n        graph[a].append(b)\n        graph[b].append(a)\n    paths = []\n    for vertex in graph:\n        if vertex == 1: paths.append([1])\n        visited = [False] * (N + 1)\n        visited[vertex] = True\n        for neighbor in graph[vertex]:\n            if visited[neighbor] == False:\n                visited[neighbor] = True\n                newPath = [vertex] + paths[-1]\n                newPath.append(neighbor)\n                paths.append(newPath)\n    return len(paths)\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split()]\n    a, b = [], []\n    for _ in range(M):\n        i, j = [int(n) for n in stdin.split()]\n        a.append(i)\n        b.append(j)\n        if i == j:\n            a.append(j)\n            b.append(j)\n    d = {}\n    return dfs(N, M, a, b, d)\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    size = stdin.split()\n    print(size)\n    return \"test\""
    },
    {
        "number": 4228,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = [int(x) for x in stdin.split()]\n    if n < 2 or l < -100 or l > 100:\n        return \"\"\n    elif n == 2:\n        return str(abs(l))\n    else:\n        c = 0\n        r = n-1\n        a = n-1\n        while c < r:\n            c += 1\n            a += 1\n            r -= 1\n        k = r\n        p = 2\n        b = 1\n        while p < n-1:\n            p += 1\n            b += 1\n        while k >= 0:\n            if abs(l-a) < abs(l-b):\n                a -= 1\n                k -= 1\n            elif abs(l-b) < abs(l-a):\n                b += 1\n                k -= 1\n            elif abs(l-a) == abs(l-b):\n                if a < b:\n                    a += 1\n                else:\n                    b -= 1\n                k -= 1\n        return str(abs(l-a))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4228,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    T = int(stdin.readline())\n    for _ in range(T):\n        N, L = [int(x) for x in stdin.readline().split()]\n        print(N*(L+N-1))\n    return ''"
    },
    {
        "number": 4228,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,l = [int(x) for x in stdin.split(\" \")]\n    return str(sum(map(lambda x: -x+l, range(1, n+1))))"
    },
    {
        "number": 4228,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    lst = [abs(l - i) for i in lst]\n    return str(sum(lst))"
    },
    {
        "number": 4228,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, l = stdin.split()\n    n, l = int(n), int(l)\n    if 2 <= n <= 200:\n        if -100 <= l <= 100:\n            n -= 1\n            apples = []\n            for i in range(n):\n                apples.append(int(stdin.readline()))\n            apples.sort()\n            min_diff = None\n            for i in range(n):\n                flavor = sum([a for a in apples[i:n]])\n                if min_diff is None or abs(l-flavor) < min_diff:\n                    min_diff = abs(l-flavor)\n            return str(flavor)\n        else:\n            raise ValueError(\"Out of range\")\n    else:\n        raise ValueError(\"Out of range\")"
    },
    {
        "number": 4228,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split(\" \"))\n    return str(sum(L+i-1 for i in range(N-1)))"
    },
    {
        "number": 4228,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    ans = 0\n    for i in range(n):\n        ans += (l + i - 1)\n    return str(ans)"
    },
    {
        "number": 4228,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4228,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4228,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split(\" \"))\n    return str(l + sum(range(l, n)) - sum(range(n-1, l, -1)))\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1,N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            print(str(i)+\"FizzBuzz\")\n            count += i\n        elif i % 3 == 0:\n            print(str(i)+\"Fizz\")\n            count += i\n        elif i % 5 == 0:\n            print(str(i)+\"Buzz\")\n            count += i\n        else:\n            print(str(i)+\"_\")\n            count += i\n    return str(count)"
    },
    {
        "number": 4229,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    n = int(n)\n    sum = 0\n    for i in range(1,n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            sum += i\n        elif i % 3 == 0:\n            sum += i\n        elif i % 5 == 0:\n            sum += i\n        else:\n            sum += i\n    return sum"
    },
    {
        "number": 4229,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    sum = 0\n    while i <= n:\n        if i % 3 == 0 and i % 5 == 0:\n            sum += i\n        elif i % 3 == 0 and i % 5!= 0:\n            sum += i\n        elif i % 3!= 0 and i % 5 == 0:\n            sum += i\n        else:\n            sum += i\n        i += 1\n    return sum"
    },
    {
        "number": 4229,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = n // 3\n    return str(sum([i if i % 3 == 0 and i % 5 == 0 else i for i in range(1, n+1)]))"
    },
    {
        "number": 4229,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 1\n    total = 0\n    fizz = 3\n    while cnt <= n:\n        if cnt % fizz == 0 and cnt % 3 == 0:\n            total += cnt\n            cnt += 1\n        elif cnt % fizz == 0:\n            total += cnt\n            cnt += 1\n        elif cnt % 3 == 0:\n            total += cnt\n            cnt += 1\n        else:\n            cnt += 1\n\n    return total"
    },
    {
        "number": 4229,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    s = 0\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            s += i\n        elif i % 3 == 0 and i % 5!= 0:\n            s += i\n        elif i % 3!= 0 and i % 5 == 0:\n            s += i\n        else:\n            s += i\n    return str(s)"
    },
    {
        "number": 4229,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    n = int(n)\n    s = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            s += i\n        elif i % 3 == 0:\n            s += i\n        elif i % 5 == 0:\n            s += i\n        else:\n            s += i\n    return str(s)"
    },
    {
        "number": 4229,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_1 = 1\n    a_2 = 2\n    a_3 = 3\n    a_4 = 5\n    while a_1 < N:\n        if a_3 % 3 == 0 and a_5 % 5 == 0:\n            a_1 = a_1 + a_2\n            a_2 = a_3\n            a_3 = a_4\n            a_4 = a_5\n            a_5 = a_3 + a_5\n        elif a_3 % 3 == 0:\n            a_1 = a_1 + a_2\n            a_2 = a_3\n            a_3 = a_3 + a_4\n        elif a_5 % 5 == 0:\n            a_1 = a_1 + a_2\n            a_2 = a_3\n            a_3 = a_5\n        else:\n            a_1 = a_1 + a_2\n            a_2 = a_3\n            a_3 = a_3 + a_4\n    return str(a_1)\n"
    },
    {
        "number": 4229,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(i for i in range(1, int(stdin)) if i % 3 == 0 and i % 5 == 0))"
    },
    {
        "number": 4229,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    res = 0\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            res += 'FizzBuzz'\n        elif i % 3 == 0:\n            res += 'Fizz'\n        elif i % 5 == 0:\n            res += 'Buzz'\n        else:\n            res += i\n    return str(res)"
    },
    {
        "number": 4230,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, N = [int(x) for x in stdin.split()]\n    P = [int(x) for x in stdin.split()[1:]]\n    P.sort()\n    result = P[0]\n    for x in P:\n        if x - result < abs(X - result):\n            result = x\n    return str(result)"
    },
    {
        "number": 4230,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Accepted\n    22/22 cases passed (288 ms)\n    Your runtime beats 82.54 % of python3 submissions\n    Your memory usage beats 57.68 % of python3 submissions (14.8 MB)\n    '''\n    x, n = stdin.split(\" \")\n    x, n = int(x), int(n)\n    nums = stdin.rstrip().split(\" \")\n\n    # Sort nums\n    nums.sort()\n\n    # Iterate over nums\n    for i in range(len(nums)):\n        # If nums[i] == x:\n        if nums[i] == x:\n            return nums[i]\n\n        # If nums[i] > x:\n        elif nums[i] > x:\n            # If nums[i] - x is the smallest, return x\n            if abs(nums[i] - x) < abs(nums[i - 1] - x):\n                return nums[i]\n\n            # If nums[i] - x is the smallest, return nums[i - 1]\n            elif abs(nums[i] - x) == abs(nums[i - 1] - x):\n                return nums[i - 1]\n\n        # If nums[i] < x:\n        elif nums[i] < x:\n            # If nums[i] + x is the smallest, return x\n            if abs(nums[i] + x) < abs(nums[i + 1] + x):\n                return nums[i]\n\n            # If nums[i] + x is the smallest, return nums[i + 1]\n            elif abs(nums[i] + x) == abs(nums[i + 1] + x):\n                return nums[i + 1]\n\n    # Return nums[len(nums) - 1]\n    return nums[len(nums) - 1]"
    },
    {
        "number": 4230,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.strip().split(\" \")))\n    print(data[0])"
    },
    {
        "number": 4230,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.strip().split()]\n    x, n = nums[0], nums[1]\n\n    p_nums = nums[2:]\n\n    left = 0\n    right = len(p_nums) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if p_nums[mid] == x:\n            return str(x)\n        elif p_nums[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    if abs(p_nums[left] - x) > abs(p_nums[right] - x):\n        return str(p_nums[right])\n    else:\n        return str(p_nums[left])\n"
    },
    {
        "number": 4230,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, seq = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    ans = []\n    for i in range(n):\n        if p[i] < seq:\n            ans.append(p[i])\n    for i in range(n):\n        if p[i] > seq:\n            ans.append(p[i])\n    ans.sort()\n    return str(ans[(n - 1) // 2])"
    },
    {
        "number": 4230,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Inputs:\n      stdin: the text in stdin\n\n    Outputs:\n      str: the answer in stdout\n    '''\n    X, N = [int(num) for num in stdin.strip().split()]\n    p = [int(num) for num in stdin.strip().split()]\n    minimum = abs(X - p[0])\n    nearest = p[0]\n    for i in range(1, N):\n        temp = abs(X - p[i])\n        if temp < minimum:\n            minimum = temp\n            nearest = p[i]\n    return str(nearest)"
    },
    {
        "number": 4230,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4230,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, N = stdin.split()\n    N = int(N)\n    # X, N = [int(x) for x in stdin.split()]\n    # N = int(N)\n    p_list = [int(x) for x in stdin.split()]\n    # print(X, N, p_list)\n    min_dist = float('inf')\n    min_num = float('inf')\n    for i in range(1, N + 1):\n        # print(i)\n        if min_dist > abs(X - p_list[i - 1]):\n            min_dist = abs(X - p_list[i - 1])\n            min_num = p_list[i - 1]\n\n    print(min_num)"
    },
    {
        "number": 4230,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, N = [int(x) for x in stdin.split()]\n    p_seq = [int(x) for x in stdin.split()]\n    # Sort the sequence\n    p_seq.sort()\n    # Search for the closest integer\n    min_diff = abs(X - p_seq[0])\n    for i in range(1, N):\n        diff = abs(X - p_seq[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest = p_seq[i]\n    # Return the closest integer\n    return str(closest)"
    },
    {
        "number": 4230,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, N = stdin.split()\n    N = int(N)\n    arr = list(map(int, stdin.rstrip().split()))\n    arr.sort()\n    ans = None\n    min_diff = abs(N - arr[0])\n    for i in range(1, len(arr)):\n        diff = abs(N - arr[i])\n        if diff < min_diff:\n            ans = arr[i]\n            min_diff = diff\n    return str(ans)\n"
    },
    {
        "number": 4231,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.strip().split())\n    h, w = map(int, stdin.strip().split())\n    return str(H * W - h * w)\n"
    },
    {
        "number": 4231,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    H, W = map(int, stdin[0].split(' '))\n    h, w = map(int, stdin[1].split(' '))\n    return str(H * W - h * w)"
    },
    {
        "number": 4231,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = [int(x) for x in stdin.split(' ')]\n    h, w = [int(x) for x in stdin.split(' ')]\n\n    s = [['w' if i % 2 == j % 2 else 'b' for i in range(rows)] for j in range(columns)]\n    return str(rows * columns - (rows - h) * (columns - w) - s.count('w'))"
    },
    {
        "number": 4231,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    return str(h * w - (h + w - 1) * 2)"
    },
    {
        "number": 4231,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(x) for x in stdin.split()]\n    h, w = [int(x) for x in stdin.split()]\n    return str(H * W - h * w)"
    },
    {
        "number": 4231,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.rstrip().split(\" \"))\n    return str(rows*cols-h*w)"
    },
    {
        "number": 4231,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    print(stdin)\n    pass"
    },
    {
        "number": 4231,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    H, W = map(int, stdin.split())\n    h, w = map(int, stdin.split())\n    return str(H * W - h * w)"
    },
    {
        "number": 4231,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4231,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    h, w = map(int, stdin[0].split())\n    h, w = map(int, stdin[1].split())\n    return str(h*w - h*(h-1)/2 - w*(w-1)/2)"
    },
    {
        "number": 4232,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    if k == 0:\n        return \"0\"\n    \n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if sum([i - s[mid] for i in s[:mid + 1]]) < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return str(s[left - 1])\n\n\nimport sys"
    },
    {
        "number": 4232,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    for i in range(10 ** 9):\n        if k == 0:\n            break\n        counter = 0\n        for j in a:\n            if j <= i:\n                counter += 1\n            if counter > k:\n                break\n        if counter == k:\n            return str(i)\n\n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    if n == 0 and k == 0:\n        return '-1'\n    elif n == 0:\n        return '1'\n    else:\n        seq = [int(x) for x in stdin.split()]\n\n        valid = False\n        for i in range(n):\n            if seq[i] <= k:\n                valid = True\n                break\n        if valid:\n            return str(i + 1)\n        else:\n            return '-1'"
    },
    {
        "number": 4232,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    sequence = [int(x) for x in stdin.split()]\n    start = 0\n    result = -1\n    while start <= n - k:\n        current_sum = sum(sequence[start:start+k])\n        if result < current_sum:\n            result = current_sum\n        start += 1\n    return str(result)"
    },
    {
        "number": 4232,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #n, k = map(int, stdin.split(\" \"))\n    #a = list(map(int, stdin.split(\" \")))\n    n, k = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n    for x in range(1, 10 ** 9 + 1):\n        if sum(1 for i in a if i <= x) == k:\n            return str(x)\n    return \"-1\"\n\n\nimport sys\nfrom math import log10, ceil\n\ndef"
    },
    {
        "number": 4232,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n, k = int(data[0]), int(data[1])\n    data = [int(x) for x in data[2:]]\n    current_number = 0\n    for x in data:\n        if x <= current_number:\n            break\n        current_number += 1\n    return str(current_number)\n\n\n\nassert(solution(input) == '3')\nassert(solution(input2) == '-1')\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4232,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0].split()[0])\n    k = int(lines[0].split()[1])\n    nums = [int(n) for n in lines[1].split()]\n    x = -1\n    for i in range(1, 10**9):\n        if k == 0:\n            break\n        if k == len([n for n in nums if n <= i]):\n            x = i\n            break\n    return str(x)\n\nassert(solution('''7 4\n3 7 5 1 10 3 20\n''') == '6')\nassert(solution('''7 2\n3 7 5 1 10 3 20\n''') == '-1')\nassert(solution('''7 2\n1 2 3 4 5 6 7 8\n''') == '-1')\nassert(solution('''7 2\n7 7 7 7 7 7 7 7\n''') == '-1')\nassert(solution('''7 2\n1 2 3 4 5 6 7 8\n''') == '1')\nassert(solution('''7 2\n1 2 2 3 4 5 6 7 8\n''') == '2')\nassert(solution('''7 2\n1 2 2 3 4 5 6 7 8\n''') == '2')\nassert(solution('''7 2\n1 2 1 2 3 4 5 6 7 8\n''') == '2')\nassert(solution('''7 2\n1 2 1 2 3 4 5 6 7 8\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''7 2\n1 1 1 1 1 1 1"
    },
    {
        "number": 4232,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    numbers = list(map(int, stdin.split(' ')))\n    sorted_numbers = sorted(numbers)\n\n    for i in range(n):\n        for j in range(k):\n            if sorted_numbers[j] > numbers[i]:\n                break\n            if j == k - 1:\n                return str(numbers[i])\n\n    return '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n:\n        return \"-1\"\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    for i in range(1, n + 1):\n        if k > 0:\n            if i <= nums[k - 1]:\n                return str(i)\n            else:\n                k -= 1\n        else:\n            return \"-1\"\n    raise Exception(\"Not reachable\")\n\n\ndef"
    },
    {
        "number": 4232,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    s = [int(x) for x in stdin.split()]\n    m = s[0]\n    for i in range(1, n):\n        m = min(m, s[i])\n\n    if m * k >= sum(s):\n        return \"-1\"\n\n    l, h = 0, m\n    while h - l > 1:\n        mid = l + (h - l) // 2\n        if sum(map(lambda x: 1 if x <= mid else 0, s)) <= k:\n            h = mid\n        else:\n            l = mid\n    return str(h)"
    },
    {
        "number": 4233,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4233,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4233,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split()]\n    grid = []\n    for _ in range(n):\n        grid.append(stdin.strip())\n    row_sums = [sum(grid[i]) for i in range(n)]\n    column_sums = [sum([grid[i][j] for i in range(n)]) for j in range(m)]\n    if n * m == sum(row_sums) + sum(column_sums):\n        stars = [0] * n\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    stars[i] += 1\n        result = ''\n        for i in range(n):\n            for j in range(m):\n                result += '{} {} {}\\n'.format(i + 1, j + 1, stars[i])\n        return result\n    return '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(s) for s in stdin.split()]\n    matrix = []\n    for _ in range(rows):\n        matrix.append(stdin.rstrip('\\n'))\n    if not star_solver(matrix):\n        return \"-1\"\n    stars = 0\n    for row in matrix:\n        for col in row:\n            if col == '*':\n                stars += 1\n    return str(stars)\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4233,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    grid = [list(stdin.strip()) for _ in range(n)]\n    def is_valid(i, j):\n        return i >= 0 and j >= 0 and i < n and j < m and grid[i][j] == '*'\n    def get_cell_neighbors(i, j):\n        return filter(is_valid, (i-1, j), (i+1, j), (i, j-1), (i, j+1))\n    def get_stars(i, j, s):\n        return (i, j, s)\n    def is_star(i, j, s):\n        return i == 0 or i == n - 1 or j == 0 or j == m - 1 or (i == 0 and j == 0) or (i == 0 and j == m - 1) or (i == n - 1 and j == 0) or (i == n - 1 and j == m - 1)\n    def draw_stars(i, j, s):\n        for x, y, s in [(i-1, j, s), (i+1, j, s), (i, j-1, s), (i, j+1, s)]:\n            if is_star(x, y, s):\n                grid[x][y] = '*'\n    def get_stars_for_draw(i, j, s):\n        neighbors = get_cell_neighbors(i, j)\n        for x, y, s in neighbors:\n            if is_star(x, y, s):\n                yield x, y, s\n            else:\n                yield x, y, 1\n    stars = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars += 1\n                draw_stars(*get_stars_for_draw(i, j, 1))\n    return str(stars) if stars <= n*m else \"-1\""
    },
    {
        "number": 4233,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split(' '))\n\n    if n*m < 2 or n*m > 100:\n        return \"-1\"\n\n    grid = [list(stdin.split(' ')[i]) for i in range(n)]\n\n    def bfs(x, y):\n        grid[x][y] = 'x'\n        q = [(x, y)]\n        while q:\n            x, y = q.pop(0)\n            if x > 0 and grid[x-1][y] == '.':\n                grid[x-1][y] = '*'\n                q.append((x-1, y))\n            if x < n - 1 and grid[x+1][y] == '.':\n                grid[x+1][y] = '*'\n                q.append((x+1, y))\n            if y > 0 and grid[x][y-1] == '.':\n                grid[x][y-1] = '*'\n                q.append((x, y-1))\n            if y < m - 1 and grid[x][y+1] == '.':\n                grid[x][y+1] = '*'\n                q.append((x, y+1))\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                bfs(i, j)\n\n    s = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                s += 1\n\n    return str(s)\n\n\nassert(solution(\n    '6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........')) == '3'\nassert(solution(\n    '5 5\\n.*...\\n****.\\n.****\\n.*...\\n.....\\n')) == '-1'\nassert(solution(\n    '3 3\\n*.*\\n.*.\\n*.*\\n')) == '-1'\nassert(solution(\n    '5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\\n')) == '3'\nassert(solution(\n    '5 5\\n.*...\\n*.*.\\n*.*.\\n*.*.\\n.....\\n')) == '3'\nassert(solution(\n    '1 1\\n*')) == '-1'\nassert(solution(\n    '5 5\\n.*...\\n*.*.\\n*.*.\\n*.*.\\n.....\\n')) == '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.strip().split()]\n\n    if n * m < 3:\n        return \"-1\"\n\n    grid = [list(stdin.strip()) for _ in range(n)]\n\n    stars = 0\n    for row in grid:\n        stars += row.count(\"*\")\n\n    if stars <= n * m:\n        return str(stars)\n\n    for row in grid:\n        for i in range(len(row)):\n            if row[i] == \"*\":\n                stars += 1\n                if stars > n * m:\n                    return \"-1\"\n                row[i] = str(stars)\n    return str(stars)\n"
    },
    {
        "number": 4233,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    if len(lines)!= 2:\n        return -1\n    \n    n, m = [int(c) for c in lines[0].split()]\n    grid = [c for c in lines[1]]\n    \n    def is_valid(p: tuple[int, int]) -> bool:\n        return 0 <= p[0] < n and 0 <= p[1] < m and grid[p[0]][p[1]] == '*'\n    \n    # row and column number of the first star\n    row, col = 0, 0\n    for r in range(n):\n        for c in range(m):\n            if grid[r][c] == '*':\n                row, col = r, c\n                break\n        \n    # star's size\n    size = 1\n    for r in range(row, n):\n        if grid[r][col] == '.':\n            size += 1\n        else:\n            break\n    \n    # does the star fit into the grid\n    if not is_valid((row, col)):\n        return -1\n    \n    # find a star of the given size\n    for r in range(row, row + size):\n        for c in range(col, col + size):\n            if is_valid((r, c)):\n                return size\n    \n    return -1\n\n\nassert(solution('''6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\n''') == 3)\nassert(solution('''5 5\n.*...\n****.\n.****\n..**.\n.....\n''') == 3)\nassert(solution('''5 5\n.*...\n***..\n.*...\n.*...\n.....\n''') == -1)\nassert(solution('''3 3\n*.*\n.*.\n*.*\n''') == -1)\nassert(solution('''6 6\n.*.*\n.*.*\n.*.*\n.*.*\n.*.*\n''') == -1)\nassert(solution('''5 5\n.*.*\n.*.*\n.*.*\n.*.*\n''') == -1)\nassert(solution('''6 5\n....*...\n....*...\n.*.*.*\n.*.*.*\n*.*.*.*\n''') == -1)\nassert(solution('''5 7\n.*..*.*\n.*...*.\n.*...*.\n.*...*.\n.*...*.\n.*...*.\n''') == -1)\nassert(solution('''5 5\n....*...\n....*...\n.*.*.*\n.*.*.*\n*.*.*.*\n''') == -1)\nassert(solution('''5 5\n....*...\n....*...\n.*.*.*\n.*.*.*\n.*.*.*\n''') == -1)\nassert(solution('''5 5\n*.*.*\n.*...*.\n.*...*.\n.*...*.\n.*...*.\n''') == -1)\nassert(solution('''3 3\n*.*\n.*.\n*.*\n''') == -1)\nassert(solution('''3 3\n*.*\n.*.\n*.*\n''') == -1)\nassert(solution('''6 6\n.*.*.*\n.*.*.*\n.*.*.*\n.*.*.*\n.*.*.*\n''') == -1)\nassert(solution('''5 7\n.*...*.\n.*...*.\n.*...*.\n.*...*.\n.*...*.\n.*...*.\n''') == -1)\nassert(solution('''5 7\n.*...*.\n.*...*.\n.*...*.\n.*...*.\n.*...*.\n.*...*.\n''') == -1)\nassert(solution('''5 6\n...*.\n.*...\n.*...\n.*...\n.*...\n.*...\n''') == -1)\nassert(solution('''5 5\n....*...\n....*...\n.*.*.*\n.*.*.*\n.*.*.*\n''') == -1)\nassert(solution('''5 5\n*.*.*\n.*...*.\n.*...*.\n.*...*.\n.*...*.\n''') == -1)\nassert(solution('''5 5\n.*.\n.*.*\n.*.*\n.*.*\n.*.*\n''') == -1)\nassert(solution('''5 5\n....*...\n....*...\n.*.*.*\n.*.*.*\n.*.*.*\n''') == -1)\nassert(solution('''5 5\n*.*.*\n.*...*.\n.*...*.\n.*...*.\n.*...*.\n''') == -1)\nassert(solution('''3 3\n*.*\n.*.\n*.*\n''') == -1)\nassert(solution('''3 3\n*.*\n.*.\n*.*\n''') == -1)\nassert(solution('''6 6\n.*.*.*\n.*.*.*\n.*.*.*\n.*.*.*\n.*.*.*\n''') == -1)\nassert(solution('''6 6\n.*.*.*\n.*.*.*\n.*.*.*\n.*.*.*\n.*.*.*\n''') == -1)\nassert(solution('''6 6\n.*.*.*\n.*.*.*\n.*.*.*\n.*.*.*\n.*.*.*\n''') == -1)\nassert(solution('''6 6\n.*.*.*\n.*.*.*\n.*.*.*\n.*.*.*\n.*.*.*\n''') == -1)\nassert(solution('''6 6\n.*.*.*\n.*.*.*\n.*.*.*\n.*.*.*\n.*.*.*\n''') == -1)\nassert(solution"
    },
    {
        "number": 4234,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4234,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    k = 0\n    for i in range(n):\n        for j in range(n - i - 1):\n            if s[j]!= s[j + 1]:\n                k += 1\n                break\n    return str(k) + '\\n' + s\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n + 1]\n    m = n // 2\n    if n % 2 == 0:\n        s = s[0:m]\n        if s == s[::-1]:\n            return n\n    else:\n        s = s[m:n]\n        if s == s[::-1]:\n            return n\n    return 0"
    },
    {
        "number": 4234,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin.split(' ')[0])\n    s = stdin.split(' ')[1]\n    s = s[:n]\n    k = 0\n    for i in range(1, len(s), 2):\n        if s[i]!= s[i-1]:\n            k += 1\n    return str(k) + '\\n' + s"
    },
    {
        "number": 4234,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    pass\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_chars = int(stdin)\n    string = stdin.strip()\n    if len(string) % 2 == 0:\n        k = len(string) // 2\n    else:\n        k = len(string) // 2 + 1\n    return k, string[k:]\n"
    },
    {
        "number": 4234,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline().strip())\n    string = stdin.readline().strip()\n    result = \"\"\n    for i in range(num):\n        if i % 2 == 0:\n            result += string[i]\n    print(len(result))\n    print(result)"
    },
    {
        "number": 4234,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4')\n    0\n    >>> solution('good')\n    2\n    >>> solution('aabc')\n    2\n    >>> solution('aaa')\n    3\n    >>> solution('a')\n    1\n    >>> solution('aa')\n    2\n    >>> solution('aba')\n    1\n    >>> solution('aaaa')\n    0\n    \"\"\"\n    chars = stdin.strip()\n    chars_length = len(chars)\n    if chars_length < 2:\n        return 0\n    if chars_length % 2 == 1:\n        return 1\n    delete = chars_length // 2\n    for i in range(delete):\n        if chars[i]!= chars[i + 1]:\n            return i\n    return delete"
    },
    {
        "number": 4234,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    i = 0\n    while i < n:\n        if s[i]!= s[i+1]:\n            i += 1\n        else:\n            s = s[:i] + s[i+2:]\n    print(len(s))\n    return s\n\nassert solution('good') == 0\nassert solution('aabc') == 2\nassert solution('aaa') == 'a'\nassert solution('abcabcabc') == 3\nassert solution('abcabcabcabc') == 4\nassert solution('abca') == 'abca'\n"
    },
    {
        "number": 4234,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    c = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if s[i]!= s[i+1]:\n                c += 1\n    return c\n"
    },
    {
        "number": 4235,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\n\nFor the last test case, the output is \"NO\".\n\n\n-----Test-----\n\n- If you correctly solve the problem, you will see the following\n  output in the first five test cases:\n"
    },
    {
        "number": 4235,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4235,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    edges: List[List[int]] = []\n    n, m = [int(x) for x in stdin.strip().split()]\n\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.strip().split()]\n        edges.append([u, v])\n\n    if n!= 2 and n % 2!= 0:\n        return \"NO\"\n\n    if n!= 2 and m!= 1:\n        return \"NO\"\n\n    # The graph will be directed, so a path of length 2 or greater is impossible\n    if m == 1:\n        return \"NO\"\n\n    # We need to keep track of a list of vertices that have already been processed\n    vertices_processed: List[int] = []\n    # The directed graph is a complete graph:\n    for i in range(1, n):\n        # We must also ensure that the vertex has not been processed before\n        if i not in vertices_processed:\n            # We must make sure that the vertex has not been processed before\n            if i == 1:\n                # The first vertex has not been processed yet\n                vertices_processed.append(1)\n                # Now we can determine the first edge\n                for j in range(2, n + 1):\n                    # If the first vertex is 1, we can only take 1-1. If it is 2, we can take 1-2. Otherwise, we must use 1-3.\n                    if j == 2:\n                        edges.append([1, 2])\n                    elif j == 3:\n                        edges.append([1, 3])\n                    else:\n                        edges.append([1, j])\n                        # We stop here as we have a valid directed graph\n                        break\n                break\n            else:\n                # The vertex has been processed, so we have to check if there is a path from the vertex to its previous\n                # vertex\n                for j in range(1, i + 1):\n                    # If there is a path, it must be of length at least 3\n                    if j == i:\n                        continue\n                    # We must also ensure that the vertex has not been processed before\n                    if j not in vertices_processed:\n                        vertices_processed.append(j)\n                        # Now we can determine the first edge\n                        for k in range(j + 1, i + 1):\n                            # If the first vertex is j, we can only take j-j. If it is k, we can only take j-k. Otherwise, we must\n                            # use j-l.\n                            if k == i:\n                                edges.append([j, i])\n                            elif k == j:\n                                edges.append([j, k])\n                            else:\n                                edges.append([j, k])\n                                # We stop here as we have a valid directed graph\n                                break\n                        break\n                # The previous vertex has been processed, so we have to check if there is a path from the previous vertex to the\n                # current vertex\n                for j in range(i, n):\n                    if j == i:\n                        continue\n                    # We must also ensure that the vertex has not been processed before\n                    if j not in vertices_processed:\n                        vertices_processed.append(j)\n                        # Now we can determine the first edge\n                        for k in range(j + 1, i + 1):\n                            # If the first vertex is j, we can only take j-j. If it is k, we can only take j-k. Otherwise, we must\n                            # use j-l.\n                            if k == i:\n                                edges.append([j, i])\n                            elif k == j:\n                                edges.append([j, k])\n                            else:\n                                edges.append([j, k])\n                                # We stop here as we have a valid directed graph\n                                break\n                        break\n    # We have a valid directed graph\n    return \"YES\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    graph = defaultdict(list)\n    for i in range(int(stdin.readline())):\n        a, b = (int(x) for x in stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    def helper(node, visited):\n        visited.add(node)\n        for i in graph[node]:\n            if i in visited:\n                continue\n            else:\n                helper(i, visited)\n\n    visited = set()\n    for i in graph:\n        if i not in visited:\n            helper(i, visited)\n\n    ans = \"\".join(map(lambda x: \"0\" if x in visited else \"1\", range(len(graph))))\n    return \"YES\" if len(ans) == len(graph) else \"NO\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_edges(lines: list[str]) -> list[list[int]]:\n        graph = [[] for _ in range(n)]\n        for line in lines:\n            u, v = map(int, line.split())\n            graph[u-1].append(v-1)\n            graph[v-1].append(u-1)\n        return graph\n\n    n, m = map(int, stdin.split())\n    graph = get_edges(stdin.splitlines())\n    print(graph)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split(\" \"))\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.strip().split(\" \"))\n        edges.append((u, v))\n    res = \"YES\"\n    for i in range(m):\n        if edges[i][0] == edges[i][1]:\n            res = \"NO\"\n        visited = set()\n        visited.add(edges[i][0])\n        curr = edges[i][0]\n        for j in range(i + 1, m):\n            if edges[j][0] == edges[j][1]:\n                res = \"NO\"\n                break\n            elif edges[j][0] in visited:\n                res = \"NO\"\n                break\n            elif edges[j][0]!= edges[j][1]:\n                visited.add(edges[j][0])\n                curr = edges[j][0]\n    return res"
    },
    {
        "number": 4235,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def directed_graph(n, edges) -> [[int]]:\n        graph = [[] for _ in range(n)]\n        for u, v in edges:\n            graph[u].append(v)\n        return graph\n\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    graph = directed_graph(n, edges)\n    for u, v in edges:\n        if graph[v] and u not in graph[v]:\n            continue\n        if graph[u]:\n            for v in graph[u]:\n                if graph[v] and u not in graph[v]:\n                    continue\n                else:\n                    break\n            else:\n                return 'NO'\n    return 'YES'\n\"\"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    seen = [False] * n\n    paths = [set() for _ in range(n)]\n    paths[0].add(0)\n    dfs(graph, paths, 0, seen)\n    res = ''\n    for path in paths:\n        if len(path) > 1:\n            res += '0'\n        else:\n            res += '1'\n    return res\n\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num, length = [int(x) for x in stdin.split(' ')]\n    if num < 1 or length < 1:\n        return ''\n    segments = [sorted(map(int, x.split(' '))) for x in stdin.split('\\n')[:-1]]\n    if len(segments) < 1:\n        return '0'\n    points = [x for x in range(length + 1)]\n    for segment in segments:\n        if segment[0] > segment[1]:\n            continue\n        for i in range(segment[0], segment[1] + 1):\n            if i in points:\n                points.remove(i)\n    return''.join(str(x) for x in points)\n    \n\nTest.assertEquals(solution('''3 5\n2 2\n1 2\n5 5'''), '2 3 4')\nTest.assertEquals(solution('''1 7\n1 7'''), '0')\nTest.assertEquals(solution('''2 2\n2 2'''), '0')\nTest.assertEquals(solution('''1 1\n1 1'''), '0')\nTest.assertEquals(solution('''5 9\n2 8\n4 2\n4 3\n4 6\n4 7\n5 8\n6 7\n7 8\n8 9'''), '2 4 6 8 9')\nTest.assertEquals(solution('''10 17\n10 17'''), '0')\nTest.assertEquals(solution('''7 10\n2 9\n5 5\n6 5\n6 8\n7 11\n8 9\n9 10\n10 11'''), '2 4 6 8 9')\nTest.assertEquals(solution('''3 5\n1 3\n4 4\n2 4\n5 5'''), '2 3 4')\nTest.assertEquals(solution('''7 10\n5 6\n5 7\n6 7\n8 9\n9 10\n10 11'''), '0')\nTest.assertEquals(solution('''4 10\n1 9\n1 8\n2 8\n2 7\n3 7\n4 7\n5 7\n6 7\n7 8\n7 9\n8 9\n9 10'''), '2 3 4 5 6 7 8 9')\n"
    },
    {
        "number": 4236,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split(' ')))\n    n, m = data[0], data[1]\n    data = data[2:]\n    l = list()\n    for i in range(0, n):\n        l.append(tuple(data[i*2:i*2+2]))\n    l = sorted(l, key=lambda x: x[0])\n    l = sorted(l, key=lambda x: x[1])\n    l = list(filter(lambda x: x[0]!= x[1], l))\n    return '\\n'.join(list(map(str, l)))"
    },
    {
        "number": 4236,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nm, n = [int(x) for x in stdin.split()]\nsegments = []\n\nfor _ in range(n):\n    l, r = [int(x) for x in stdin.split()]\n    segments.append((l, r))\n\nn = len(segments)\n\nfor i in range(m+1):\n    for j in range(n):\n        l, r = segments[j]\n        if i >= l and i <= r:\n            print(i)\n            break\n    else:\n        print(0)\n        break\n"
    },
    {
        "number": 4236,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    if len(lines)!= 2:\n        raise ValueError(\"There is not 2 lines\")\n    n, m = map(int, lines[0].split(' '))\n    if n <= 0 or m <= 0:\n        raise ValueError(\"n and m must be > 0\")\n    if n > m:\n        raise ValueError(\"n must be smaller or equal m\")\n\n    l_max = m\n    r_max = m\n    points = set()\n    for line in lines[1:]:\n        l, r = map(int, line.split(' '))\n        if l > r_max:\n            r_max = r\n        elif r < l_max:\n            l_max = l\n        else:\n            if l <= r:\n                points.add(l)\n                points.add(r)\n            else:\n                points.add(l)\n                points.add(r)\n                points.add(l_max)\n                points.add(r_max)\n    return''.join(map(str, sorted(list(points))))\n\n\nprint(solution('1 2 3\\n' * 100))\n"
    },
    {
        "number": 4236,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4236,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    left, right = [], []\n    for i in range(n):\n        l, r = map(int, stdin.split(' '))\n        left.append(l)\n        right.append(r)\n    result = 0\n    for i in range(1, m + 1):\n        if i in left:\n            continue\n        elif i in right:\n            continue\n        else:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4236,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    for _ in range(n):\n        l, r = list(map(int, stdin.split()))\n        if l > r:\n            l, r = r, l\n        if l == r:\n            print(0)\n        else:\n            print(r - l - 1)"
    },
    {
        "number": 4236,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nimport sys\n_stdin = ''\nfor _ in range(int(sys.stdin.readline())):\n    _stdin += sys.stdin.readline().strip()\nsys.stdin = _stdin\n\ntry:\n    assert(solution('''5 5\n2 2\n1 2\n5 5\n''')) == '2\\n3 4\\n'\n    assert(solution('''1 7\n1 7\n''')) == '0\\n'\nexcept AssertionError:\n    print('Test cases FAILED')\nelse:\n    print('Test cases PASSED')\n"
    },
    {
        "number": 4236,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    left = [[int(n) for n in stdin.split()] for _ in range(n)]\n    right = [[int(n) for n in stdin.split()] for _ in range(n)]\n    right.reverse()\n    left.extend(right)\n    points = [1, m]\n    for segment in left:\n        points.extend(range(segment[0], segment[1] + 1))\n    points = set(points)\n    segments = [set(range(i[0], i[1] + 1)) for i in left]\n    segments.extend([set(range(i[0], i[1] + 1)) for i in right])\n    for i in points:\n        for segment in segments:\n            if i not in segment:\n                break\n        else:\n            print(i)"
    },
    {
        "number": 4236,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = tuple(map(int, lines[0].split()))\n    xs = tuple(map(int, lines[1].split()))\n    xs = sorted(set(xs))\n    if len(xs) == 1:\n        return '0'\n    xs = xs[1:-1]\n    xs.append(m)\n    xs.insert(0, 1)\n    print(len(xs))\n    for x in xs:\n        print(x, end=' ')\n    return None"
    },
    {
        "number": 4237,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(sum([x for x in range(a, b + 1) if (x % c) == 0 or (x % d) == 0]))"
    },
    {
        "number": 4237,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ans, a, b, c, d = stdin.split(\" \")\n    ans = int(ans)\n    a, b, c, d = int(a), int(b), int(c), int(d)\n    \n    cnt = 0\n    for i in range(a, b+1):\n        if i % c == 0 or i % d == 0:\n            cnt += 1\n    \n    return str(cnt)"
    },
    {
        "number": 4237,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    total = 0\n    for i in range(a, b + 1):\n        if i % c == 0 or i % d == 0:\n            total += 1\n    return str(total)"
    },
    {
        "number": 4237,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split(\" \")]\n    answer = 0\n    for i in range(A, B + 1):\n        if i % C == 0 or i % D == 0:\n            answer += 1\n    return str(answer)"
    },
    {
        "number": 4237,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    A, B, C, D = map(int, lines[0].split())\n\n    return str(sum(1 for i in range(A, B + 1) if not any((i % c == 0) and (i % d == 0) for c, d in zip((C, D), (D, C))))"
    },
    {
        "number": 4237,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(i) for i in stdin.split()]\n    result = 0\n    for n in range(A, B+1):\n        if n % C == 0 or n % D == 0:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4237,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = [int(x) for x in stdin.strip().split()]\n    return str(len([x for x in range(A,B+1) if x % C == 0 and x % D!= 0]))"
    },
    {
        "number": 4237,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = [int(x) for x in stdin.split()]\n\n    def GCD(x: int, y: int) -> int:\n        while y!= 0:\n            q = x // y\n            x, y = y, x - q * y\n        return x\n\n    lcm = (n * m) // GCD(n, m)\n    divisible_by_k = (lcm // k) * k\n    divisible_by_l = (lcm // l) * l\n\n    print(divisible_by_k - divisible_by_l)"
    },
    {
        "number": 4237,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(range(int(stdin[:3]), int(stdin[3:])+1)).difference(set(map(lambda x: int(x) % int(stdin[3:]), stdin[3:].split(' ')))))"
    },
    {
        "number": 4237,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The input is as follows:\n    A B C D\n\n    The output is as follows:\n    The number of integers between A and B (inclusive) that can be evenly divided by neither C nor D.\n    \"\"\"\n    A, B, C, D = [int(x) for x in stdin.split()]\n    return str(sum(1 for x in range(A, B + 1) if x % C == 0 or x % D == 0))"
    },
    {
        "number": 4238,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    if stdin % 9 == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(int(i) for i in stdin) % 9 == 0 else \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return \"Yes\" if sum(int(c) for c in n) % 9 == 0 else \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return \"Yes\" if sum(int(i) for i in str(int(n))) % 9 == 0 else \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 9 == 0):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4238,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns whether or not N is a multiple of 9\n    '''\n    n = int(stdin)\n    digits = [int(d) for d in str(n)]\n    return 'Yes' if sum(digits) % 9 == 0 else 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4238,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    if sum(int(d) for d in n) % 9 == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4238,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum_digits = sum(int(d) for d in str(n))\n    return 'Yes' if sum_digits % 9 == 0 else 'No'"
    },
    {
        "number": 4238,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sum_digits = sum(int(digit) for digit in str(N))\n    return 'Yes' if sum_digits % 9 == 0 else 'No'"
    },
    {
        "number": 4239,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    amount = int(stdin)\n    print(count_operations(amount))\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = []\n    for i in range(n):\n        l.append(n - i * 9)\n    l.sort(reverse=True)\n    return str(l.index(min(l)) + 1)"
    },
    {
        "number": 4239,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '3'\n    else:\n        if n == 4:\n            return '4'\n        else:\n            return str(int((n - 4) ** 0.5) + 4)"
    },
    {
        "number": 4239,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    return str(result)\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(int(stdin)))\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    while n >= 100 and n % 100!= 0:\n        result += 1\n        n -= 100\n        if n % 36 == 0:\n            result += 1\n            n -= 36\n    result += (n // 36)\n    return str(result)"
    },
    {
        "number": 4239,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    counter = 0\n    while N > 1:\n        if N <= 6:\n            N -= 1\n        elif N <= 9:\n            N -= 6\n            counter += 1\n        elif N <= 36:\n            N -= 9\n            counter += 1\n        else:\n            N -= 36\n            counter += 1\n    return str(counter)\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '2'\n    if n == 4:\n        return '3'\n    if n == 5:\n        return '3'\n    if n == 6:\n        return '4'\n    if n == 7:\n        return '4'\n    if n == 8:\n        return '4'\n    if n == 9:\n        return '5'\n    if n == 10:\n        return '5'\n    if n == 11:\n        return '5'\n    if n == 12:\n        return '6'\n    if n == 13:\n        return '7'\n    if n == 14:\n        return '8'\n    if n == 15:\n        return '9'\n    if n == 16:\n        return '10'\n    if n == 17:\n        return '11'\n    if n == 18:\n        return '12'\n    if n == 19:\n        return '13'\n    if n == 20:\n        return '14'\n    if n == 21:\n        return '15'\n    if n == 22:\n        return '16'\n    if n == 23:\n        return '17'\n    if n == 24:\n        return '18'\n    if n == 25:\n        return '19'\n    if n == 26:\n        return '20'\n    if n == 27:\n        return '21'\n    if n == 28:\n        return '22'\n    if n == 29:\n        return '23'\n    if n == 30:\n        return '24'\n    if n == 31:\n        return '25'\n    if n == 32:\n        return '26'\n    if n == 33:\n        return '27'\n    if n == 34:\n        return '28'\n    if n == 35:\n        return '29'\n    if n == 36:\n        return '30'\n    if n == 37:\n        return '31'\n    if n == 38:\n        return '32'\n    if n == 39:\n        return '33'\n    if n == 40:\n        return '34'\n    if n == 41:\n        return '35'\n    if n == 42:\n        return '36'\n    if n == 43:\n        return '37'\n    if n == 44:\n        return '38'\n    if n == 45:\n        return '39'\n    if n == 46:\n        return '40'\n    if n == 47:\n        return '41'\n    if n == 48:\n        return '42'\n    if n == 49:\n        return '43'\n    if n == 50:\n        return '44'\n    if n == 51:\n        return '45'\n    if n == 52:\n        return '46'\n    if n == 53:\n        return '47'\n    if n == 54:\n        return '48'\n    if n == 55:\n        return '49'\n    if n == 56:\n        return '50'\n    if n == 57:\n        return '51'\n    if n == 58:\n        return '52'\n    if n == 59:\n        return '53'\n    if n == 60:\n        return '54'\n    if n == 61:\n        return '55'\n    if n == 62:\n        return '56'\n    if n == 63:\n        return '57'\n    if n == 64:\n        return '58'\n    if n == 65:\n        return '59'\n    if n == 66:\n        return '60'\n    if n == 67:\n        return '61'\n    if n == 68:\n        return '62'\n    if n == 69:\n        return '63'\n    if n == 70:\n        return '64'\n    if n == 71:\n        return '65'\n    if n == 72:\n        return '66'\n    if n == 73:\n        return '67'\n    if n == 74:\n        return '68'\n    if n == 75:\n        return '69'\n    if n == 76:\n        return '70'\n    if n == 77:\n        return '71'\n    if n == 78:\n        return '72'\n    if n == 79:\n        return '73'\n    if n == 80:\n        return '74'\n    if n == 81:\n        return '75'\n    if n == 82:\n        return '76'\n    if n == 83:\n        return '77'\n    if n == 84:\n        return '78'\n    if n == 85:\n        return '79'\n    if n == 86:\n        return '80'\n    if n == 87:\n        return '81'\n    if n == 88:\n        return '82'\n    if n == 89:\n        return '83'\n    if n == 90:\n        return '84'\n    if n == 91:\n        return '85'\n    if n == 92:\n        return '86'\n    if n == 93:\n        return '87'\n    if n == 94:\n        return '88'\n    if n == 95:\n        return '89'\n    if n == 96:\n        return '90'\n    if n == 97:\n        return '91'\n    if n == 98:\n        return '92'\n    if n == 99:\n        return '93'\n    if n == 100:\n        return '94'\n    if n == 101:\n        return '95'\n    if n == 102:\n        return '96'\n    if n == 103:\n        return '97'\n    if n == 104:\n        return '98'\n    if n == 105:\n        return '99'\n    if n == 106:\n        return '100'\n    if n == 107:\n        return '101'\n    if n == 108:\n        return '102'\n    if n == 109:\n        return '103'\n    if n == 110:\n        return '104'\n    if n == 111:\n        return '105'\n    if n == 112:\n        return '106'\n    if n == 113:\n        return '107'\n    if n == 114:\n        return '108'\n    if n == 115:\n        return '109'\n    if n == 116:\n        return '110'\n    if n == 117:\n        return '111'\n    if n == 118:\n        return '112'\n    if n == 119:\n        return '113'\n    if n == 120:\n        return '114'\n    if n == 121:\n        return '115'\n    if n == 122:\n        return '116'\n    if n == 123:\n        return '117'\n    if n == 124:\n        return '118'\n    if n == 125:\n        return '119'\n    if n == 126:\n        return '120'\n    if n == 127:\n        return '121'\n    if n == 128:\n        return '122'\n    if n == 129:\n        return '123'\n    if n == 130:\n        return '124'\n    if n == 131:\n        return '125'\n    if n == 132:\n        return '126'\n    if n == 133:\n        return '127'\n    if n == 134:\n        return '128'\n    if n == 135:\n        return '129'\n    if n == 136:\n        return '130'\n    if n == 137:\n        return '131'\n    if n == 138:\n        "
    },
    {
        "number": 4239,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Set for future reference\n    # n_th = {0: 1, 1: 1, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 3, 8: 3, 9: 3, 10: 4, 11: 4, 12: 4, 13: 5, 14: 5, 15: 5, 16: 6, 17: 6, 18: 6, 19: 7, 20: 7, 21: 7, 22: 8, 23: 8, 24: 8, 25: 9, 26: 9, 27: 9, 28: 10, 29: 10, 30: 10, 31: 11, 32: 11, 33: 11, 34: 12, 35: 12, 36: 12, 37: 13, 38: 13, 39: 13, 40: 14, 41: 14, 42: 14, 43: 15, 44: 15, 45: 15, 46: 16, 47: 16, 48: 16, 49: 17, 50: 17, 51: 17, 52: 18, 53: 18, 54: 18, 55: 19, 56: 19, 57: 19, 58: 20, 59: 20, 60: 20, 61: 21, 62: 21, 63: 21, 64: 22, 65: 22, 66: 22, 67: 23, 68: 23, 69: 23, 70: 24, 71: 24, 72: 24, 73: 25, 74: 25, 75: 25, 76: 26, 77: 26, 78: 26, 79: 27, 80: 27, 81: 27, 82: 28, 83: 28, 84: 28, 85: 29, 86: 29, 87: 29, 88: 30, 89: 30, 90: 30, 91: 31, 92: 31, 93: 31, 94: 32, 95: 32, 96: 32, 97: 33, 98: 33, 99: 33, 100: 34, 101: 34, 102: 34, 103: 35, 104: 35, 105: 35, 106: 36, 107: 36, 108: 36, 109: 37, 110: 37, 111: 37, 112: 38, 113: 38, 114: 38, 115: 39, 116: 39, 117: 39, 118: 40, 119: 40, 120: 40, 121: 41, 122: 41, 123: 41, 124: 42, 125: 42, 126: 42, 127: 43, 128: 43, 129: 43, 130: 44, 131: 44, 132: 44, 133: 45, 134: 45, 135: 45, 136: 46, 137: 46, 138: 46, 139: 47, 140: 47, 141: 47, 142: 48, 143: 48, 144: 48, 145: 49, 146: 49, 147: 49, 148: 50, 149: 50, 150: 50, 151: 51, 152: 51, 153: 51, 154: 52, 155: 52, 156: 52, 157: 53, 158: 53, 159: 53, 160: 54, 161: 54, 162: 54, 163: 55, 164: 55, 165: 55, 166: 56, 167: 56, 168: 56, 169: 57, 170: 57, 171: 57, 172: 58, 173: 58, 174: 58, 175: 59, 176: 59, 177: 59, 178: 60, 179: 60, 180: 60, 181: 61, 182: 61, 183: 61, 184: 62, 185: 62, 186: 62, 187: 63, 188: 63, 189: 63, 190: 64, 191: 64, 192: 64, 193: 65, 194: 65, 195: 65, 196: 66, 197: 66, 198: 66, 199: 67, 200: 67, 201: 67, 202: 68, 203: 68, 204: 68, 205: 69, 206: 69, 207: 69, 208: 70, 209: 70, 210: 70, 211: 71, 212: 71, 213: 71, 214: 72, 215: 72, 216: 72, 217: 73, 218: 73, 219: 73, 220: 74, 221: 74, 222: 74, 223: 75, 224: 75, 225: 75, 226: 76, 227: 76, 228: 76, 229: 77, 230: 77, 231: 77, 232: 78, 233: 78, 234: 78, 235: 79, 236: 79, 237: 79, 238: 80, 239: 80, 240: 80, 241: 81, 242: 81, 243: 81, 244: 82, 245: 82, 246: 82, 247: 83, 248: 83, 249: 83, 250: 84, 251: 84, 252: 84, 253: 85, 254: 85, 255: 85}\n    # Sorting on the basis of count\n    # key is count, value is [num]\n    count_num_mapping = {}\n    count = 0\n    num = 0\n    while True:\n        count += 1\n        num = (num * 2) + 1\n        if num in count_num_mapping:\n            count_num_mapping[num].append(count)\n        else:\n            count_num_mapping[num] = [count]\n        if num == n:\n            break\n        num = ((num + 1) / 2)\n    \n    # count_num_mapping is {k: [v1, v2, v3,..., vn]}\n    # so find the maximum of it and return it\n    max_num_count = max(count_num_mapping)\n    return str(max_num_count)"
    },
    {
        "number": 4239,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 6:\n        return str(n)\n    return str(n-1)"
    },
    {
        "number": 4240,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin[0], stdin[-1]) == stdin"
    },
    {
        "number": 4240,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    t = stdin.rstrip()\n    n = len(s)\n    if n!= len(t):\n        return \"No\"\n    for i in range(n):\n        if s[i:] + s[:i]!= t:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4240,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a: str = stdin.strip()\n    return \"Yes\" if a == a[::-1] else \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")[0]\n    stdin = stdin.lower()\n    return \"Yes\" if stdin == stdin[::-1] else \"No\""
    },
    {
        "number": 4240,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4240,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin == stdin[::-1] else 'No'"
    },
    {
        "number": 4240,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if s == t:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('ab')\n    'Yes'\n    >>> solution('abcdefghijklmnopqrstuvwxyz')\n    'Yes'\n    >>> solution('toy')\n    'Yes'\n    >>> solution('b')\n    'No'\n    >>> solution('h')\n    'No'\n    >>> solution('m')\n    'Yes'\n    >>> solution('mike')\n    'Yes'\n    \"\"\"\n    return 'Yes' if stdin[0] == stdin[-1] else 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    s = stdin.strip()\n    return 'Yes' if s == s[::-1] else 'No'"
    },
    {
        "number": 4240,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return 'Yes' if s == t[-1::-1] else 'No'"
    },
    {
        "number": 4241,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4241,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given two strings S and T.\n    Let us change some of the characters in S so that T will be a substring of S.\n    At least how many characters do we need to change?\n    Here, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.\n    \"\"\"\n    # S and T strings\n    S, T = stdin.split('\\n')\n\n    # Get count of characters\n    def _get_count(s: str) -> int:\n        count: int = 0\n        for c in s:\n            count += s.count(c)\n        return count\n\n    # Remove character\n    def _remove_char(s: str, char: str) -> str:\n        new_string = ''\n        for i in s:\n            if i!= char:\n                new_string += i\n        return new_string\n\n    # Get substring count\n    def _get_substring(s: str, t: str) -> int:\n        count: int = 0\n        for i in range(len(s)):\n            if s[i:i+len(t)] == t:\n                count += 1\n        return count\n\n    # Compare count\n    def _compare_count(s: str, t: str) -> int:\n        return _get_count(s) - _get_count(t)\n\n    # Compare substring\n    def _compare_substring(s: str, t: str) -> int:\n        return _get_substring(s, t)\n\n    # Find char\n    def _find_char(s: str, char: str) -> str:\n        for i in s:\n            if i == char:\n                return char\n\n    # Find min char\n    def _find_min_char(s: str, t: str) -> str:\n        for c in s:\n            if _get_count(s) - _get_count(t) < 0:\n                return _find_char(s, c)\n\n    # Main logic\n    if _get_count(S) < _get_count(T):\n        if _get_substring(S, T) > 0:\n            return _find_min_char(S, T)\n        else:\n            return _find_char(S, T[0])\n    else:\n        if _get_substring(S, T) > 0:\n            return _find_min_char(S, T)\n        else:\n            return _find_char(S, T[0])\n\n    # Print result\n    print(_compare_count(S, T))\n    return"
    },
    {
        "number": 4241,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the minimum number of characters in S that need to be changed to match T\n\n    >>> solution('cabacc')\n    1\n    \"\"\"\n    s, t = stdin.split('\\n')\n    return sum(s[i]!= t[i] for i in range(len(s)))\n"
    },
    {
        "number": 4241,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s, t = s.strip(), t.strip()\n    return str(len(s) - len(t))"
    },
    {
        "number": 4241,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4241,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin[0], stdin[-1])"
    },
    {
        "number": 4241,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4241,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip(), stdin.strip()\n    diffs = 0\n    for i, c in enumerate(s):\n        if t[i]!= c:\n            diffs += 1\n    return diffs\n"
    },
    {
        "number": 4241,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    t: str = stdin\n    count: int = 0\n    for i, _ in enumerate(s):\n        if s[i]!= t[i]:\n            count += 1\n    print(count)"
    },
    {
        "number": 4241,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the substring which is common to both the strings.\n    >>> solution('cabacc')\n    'acc'\n    >>> solution('abc')\n    'abc'\n    \"\"\"\n    S, T = stdin.splitlines()\n    for i in range(len(S)):\n        if S[i:] == T:\n            return S[:i]\n    return S"
    },
    {
        "number": 4242,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(i) for i in stdin.split()]\n    # 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024\n    divisors = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n    return str(divisors[K - 1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4242,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    for i in range(b // 2, 0, -1):\n        if a % i == 0 and b % i == 0:\n            if i > k:\n                return str(i)\n            k -= 1"
    },
    {
        "number": 4242,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split()]\n    if a % b == 0:\n        return str(a // b)\n\n    l = []\n    for i in range(1, b + 1):\n        if a % i == 0 and b % i == 0:\n            l.append(i)\n\n    l.sort(reverse=True)\n    return str(l[k - 1])\n"
    },
    {
        "number": 4242,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    if a % k == 0 or b % k == 0:\n        return \"No solution\"\n    d = a // k\n    d2 = b // k\n    if d < d2:\n        return str(d)\n    else:\n        return str(d2)"
    },
    {
        "number": 4242,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.strip().split()]\n    low, high = 1, min(a, b)\n\n    while low < high:\n        mid = (low + high) // 2\n        if mid > 0 and a % mid == 0 and b % mid == 0:\n            return str(mid)\n        elif mid > 0 and a % mid == 0 and b % mid!= 0:\n            low = mid + 1\n        elif mid > 0 and a % mid!= 0 and b % mid == 0:\n            high = mid - 1\n        else:\n            low += 1\n    return str(high)"
    },
    {
        "number": 4242,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [A, B, K] = [int(x) for x in stdin.split()]\n    if K < 1:\n        print('invalid')\n    elif A % K == 0 and B % K == 0:\n        print(K)\n    elif A % K > 0 and B % K > 0:\n        smallest = min(A, B)\n        for i in range(smallest, A + B, K):\n            if A % i == 0 and B % i == 0:\n                print(i)\n                break\n    else:\n        print('invalid')"
    },
    {
        "number": 4242,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split(\" \"))\n    return str(min(set(range(1, A + 1)) & set(range(1, B + 1)) - {0}))"
    },
    {
        "number": 4242,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    for i in range(a, 1, -1):\n        if (a % i == 0) and (b % i == 0):\n            k -= 1\n            if k == 0:\n                return i\n    return -1\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4242,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('8 12 2')\n    '2'\n    >>> solution('12 12 3')\n    '3'\n    >>> solution('12 12 2')\n    '2'\n    >>> solution('12 8 4')\n    '4'\n    >>> solution('12 8 1')\n    '1'\n    >>> solution('12 8 0')\n    '0'\n    >>> solution('5 5 4')\n    '4'\n    '''\n    A, B, K = map(int, stdin.split())\n    divisors = []\n    for i in range(1, min(A, B)):\n        if A % i == 0 and B % i == 0:\n            divisors.append(i)\n\n    divisors.sort()\n    if K > len(divisors):\n        return '0'\n\n    return str(divisors[K-1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4242,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b, k = [int(x) for x in stdin.split()]\n    if a > b:\n        a, b = b, a\n    if k >= a/b:\n        return str(a)\n    for i in range(a/b, 1, -1):\n        if k % i == 0:\n            return str(i)"
    },
    {
        "number": 4243,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_hap = 0\n    for i in range(1, n+1):\n        if (n/i) % 5 == 0:\n            max_hap += (n/i) * (i * 5)\n    return max_hap"
    },
    {
        "number": 4243,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4243,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_naive(stdin))\n\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    return str(2020)"
    },
    {
        "number": 4243,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    happiness = 0\n    if X == 0:\n        return happiness\n    else:\n        happiness += (X // 500) * 5000\n        if X % 500!= 0:\n            happiness += 5 * (X // 50)\n        if X % 50!= 0:\n            happiness += 5 * (X % 50)\n        return happiness"
    },
    {
        "number": 4243,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4243,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = input()\n    # return stdin\n    X = int(stdin)\n    if X == 0:\n        return 0\n    return (X // 500) * (1000 + (X % 500) // 100) * 5 + (X % 500) // 50"
    },
    {
        "number": 4243,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Please print out your answer to this problem. If you think this is too easy, try to figure out why it is too easy\n    coins = [500, 100, 50, 10, 5, 1]\n    X = int(stdin)\n    ans = 0\n    for coin in coins:\n        ans += (X // coin) * 5\n        X %= coin\n    return str(ans)"
    },
    {
        "number": 4243,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split('\\n')[0]\n"
    },
    {
        "number": 4243,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    coins = int(stdin)\n    count = 0\n    if coins >= 10:\n        coins -= 10\n        count += coins * 5\n        coins = 10\n        count += coins * 2\n    if coins >= 5:\n        coins -= 5\n        count += coins * 5\n        coins = 5\n        count += coins\n    if coins >= 2:\n        coins -= 2\n        count += coins * 5\n        coins = 2\n        count += coins\n    if coins >= 1:\n        coins -= 1\n        count += coins\n    return count"
    },
    {
        "number": 4244,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4244,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4244,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    xs = list(map(int, stdin.readline().strip().split(\" \")))\n    xs.sort()\n    return str(sum([x - xs[i - 1] for i, x in enumerate(xs)]))\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.splitlines()\n    N = int(stdin_lines[0])\n    Xs = [int(x) for x in stdin_lines[1].split(\" \")]\n\n    min_total_stamina = 0\n    # Xs[0] is the first person's stamina\n    for i in range(1, N):\n        min_total_stamina += (Xs[i] - Xs[0])**2\n\n    return str(min_total_stamina)\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4244,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split(\"\\n\")[0]))"
    },
    {
        "number": 4244,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    x = stdin.readline().split()\n    x = list(map(int, x))\n    minimum = 0\n    for i in range(n):\n        minimum += (x[i] - 2)**2\n    print(minimum)"
    },
    {
        "number": 4244,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    data = [int(s) for s in stdin.split(\" \")]\n    data.sort()\n    return str(data[0]**2 + data[-1]**2)\n\nassert(solution(\"2\") == \"5\")\nassert(solution(\"1 4\") == \"5\")\nassert(solution(\"3 2 4 2\") == \"5\")\n\"\"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4244,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    X = [int(x) for x in stdin.readline().split(\" \")]\n    X.sort()\n\n    points = 0\n\n    for i in range(1, N):\n        points += (X[i] - X[i - 1]) ** 2\n\n    return str(points)"
    },
    {
        "number": 4244,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def _convert(num: int) -> int:\n        return int(num) if num.is_integer() else num\n\n    N = stdin.rstrip('\\n').strip()\n    N = int(_convert(N))\n    X = stdin.rstrip('\\n').strip()\n    X = [int(_convert(x)) for x in X.split()]\n\n    total_points = 0\n\n    for x in range(N):\n        total_points += x ** 2 - _convert(X[x]) ** 2\n\n    return str(total_points)\n\nassert(solution('') == '')\nassert(solution('2') == '5')\nassert(solution('1 4') == '5')\nassert(solution('1 1') == '0')\nassert(solution('1 2') == '2')\nassert(solution('1 2 3') == '10')\nassert(solution('1 2 4') == '14')\nassert(solution('1 2 4 5') == '16')\nassert(solution('1 2 4 5 6') == '18')\nassert(solution('1 2 3 4 5') == '34')\nassert(solution('2 4 3 5 1') == '9')\nassert(solution('3 4 4 5 6 7') == '46')\nassert(solution('1 3 4 5 6 7') == '45')\nassert(solution('1 1') == '0')\nassert(solution('1 2 1') == '2')\nassert(solution('1 2 2') == '4')\nassert(solution('1 2 2 3') == '8')\nassert(solution('1 2 2 3 4') == '16')\nassert(solution('1 2 2 3 4 5') == '26')\nassert(solution('1 2 2 3 4 5 6') == '38')\nassert(solution('1 2 2 3 4 5 6 7') == '46')\nassert(solution('1 2 2 3 4 5 6 7 8') == '52')\nassert(solution('1 2 2 3 4 5 6 7 8 9') == '58')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10') == '66')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11') == '72')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12') == '80')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13') == '86')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14') == '94')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '100')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16') == '106')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17') == '114')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18') == '122')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19') == '130')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '138')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21') == '146')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22') == '154')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23') == '162')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24') == '170')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25') == '178')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26') == '186')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27') == '194')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28') == '202')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29') == '210')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30') == '218')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31') == '226')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32') == '234')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33') == '252')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34') == '260')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35') == '268')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36') == '276')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37') == '284')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38') == '292')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39') == '300')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40') == '308')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41') == '316')\nassert(solution('1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42')"
    },
    {
        "number": 4245,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = tuple(map(int, stdin.split()))\n    if A == 2 and B == 1:\n        print(1)\n    elif A > B:\n        print(2 * B - A)\n    else:\n        print(2 * A - B)"
    },
    {
        "number": 4245,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A == 1:\n        return 1\n    return (A * A + A) // 2 + A - 1\n\nassert(solution(\"4 10\") == 3)\nassert(solution(\"2 1\") == 1)\nassert(solution(\"1 1\") == 0)\nassert(solution(\"7 8\") == 1)\nassert(solution(\"4 2\") == 1)\nassert(solution(\"7 19\") == 4)\nassert(solution(\"20 14\") == 8)\nassert(solution(\"8 14\") == 6)\nassert(solution(\"20 19\") == 7)\nassert(solution(\"10 19\") == 6)\nassert(solution(\"100 9\") == 19)\nassert(solution(\"100 10\") == 21)\nassert(solution(\"100 11\") == 25)\nassert(solution(\"100 12\") == 28)\nassert(solution(\"100 13\") == 31)\nassert(solution(\"100 14\") == 34)\nassert(solution(\"100 15\") == 37)\nassert(solution(\"100 16\") == 40)\nassert(solution(\"100 17\") == 43)\nassert(solution(\"100 18\") == 46)\nassert(solution(\"100 19\") == 49)\nassert(solution(\"100 20\") == 52)\nassert(solution(\"100 21\") == 55)\nassert(solution(\"100 22\") == 58)\nassert(solution(\"100 23\") == 61)\nassert(solution(\"100 24\") == 64)\nassert(solution(\"100 25\") == 67)\nassert(solution(\"100 26\") == 70)\nassert(solution(\"100 27\") == 73)\nassert(solution(\"100 28\") == 76)\nassert(solution(\"100 29\") == 79)\nassert(solution(\"100 30\") == 82)\nassert(solution(\"100 31\") == 85)\nassert(solution(\"100 32\") == 88)\nassert(solution(\"100 33\") == 91)\nassert(solution(\"100 34\") == 94)\nassert(solution(\"100 35\") == 97)\nassert(solution(\"100 36\") == 100)\nassert(solution(\"100 37\") == 103)\nassert(solution(\"100 38\") == 106)\nassert(solution(\"100 39\") == 109)\nassert(solution(\"100 40\") == 112)\nassert(solution(\"100 41\") == 115)\nassert(solution(\"100 42\") == 118)\nassert(solution(\"100 43\") == 121)\nassert(solution(\"100 44\") == 124)\nassert(solution(\"100 45\") == 127)\nassert(solution(\"100 46\") == 130)\nassert(solution(\"100 47\") == 133)\nassert(solution(\"100 48\") == 136)\nassert(solution(\"100 49\") == 139)\nassert(solution(\"100 50\") == 142)\nassert(solution(\"100 51\") == 145)\nassert(solution(\"100 52\") == 148)\nassert(solution(\"100 53\") == 151)\nassert(solution(\"100 54\") == 154)\nassert(solution(\"100 55\") == 157)\nassert(solution(\"100 56\") == 160)\nassert(solution(\"100 57\") == 163)\nassert(solution(\"100 58\") == 166)\nassert(solution(\"100 59\") == 169)\nassert(solution(\"100 60\") == 172)\nassert(solution(\"100 61\") == 175)\nassert(solution(\"100 62\") == 178)\nassert(solution(\"100 63\") == 181)\nassert(solution(\"100 64\") == 184)\nassert(solution(\"100 65\") == 187)\nassert(solution(\"100 66\") == 190)\nassert(solution(\"100 67\") == 193)\nassert(solution(\"100 68\") == 196)\nassert(solution(\"100 69\") == 199)\nassert(solution(\"100 70\") == 202)\nassert(solution(\"100 71\") == 205)\nassert(solution(\"100 72\") == 208)\nassert(solution(\"100 73\") == 211)\nassert(solution(\"100 74\") == 214)\nassert(solution(\"100 75\") == 217)\nassert(solution(\"100 76\") == 220)\nassert(solution(\"100 77\") == 223)\nassert(solution(\"100 78\") == 226)\nassert(solution(\"100 79\") == 229)\nassert(solution(\"100 80\") == 232)\nassert(solution(\"100 81\") == 235)\nassert(solution(\"100 82\") == 238)\nassert(solution(\"100 83\") == 241)\nassert(solution(\"100 84\") == 244)\nassert(solution(\"100 85\") == 247)\nassert(solution(\"100 86\") == 250)\nassert(solution(\"100 87\") == 253)\nassert(solution(\"100 88\") == 256)\nassert(solution(\"100 89\") == 259)\nassert(solution(\"100 90\") == 262)\nassert(solution(\"100 91\") == 265)\nassert(solution(\"100 92\") == 268)\nassert(solution(\"100 93\") == 271)\nassert(solution(\"100 94\") == 274)\nassert(solution(\"100 95\") == 277)\nassert(solution(\"100 96\") == 280)\nassert(solution(\"100 97\") == 283)\nassert(solution(\"100 98\") == 286)\nassert(solution(\"100 99\") == 289)\nassert(solution(\"100 100\") == 292)\nassert(solution(\"100 101\") == 295)\nassert(solution(\"100 102\") == 298)\nassert(solution(\"100 103\") == 301)\nassert(solution(\"100 104\") == 304)\nassert(solution(\"100 105\") == 307)\nassert(solution(\"100 106\") == 310)\nassert(solution(\"100 107\") == 313)\nassert(solution(\"100 108\") == 316)\nassert(solution(\"100 109\") == 319)\nassert(solution(\"100 110\") == 322)\nassert(solution(\"100 111\") == 325)\nassert(solution(\"100 112\") == 328)\nassert(solution(\"100 113\") == 331)\nassert(solution(\"100 114\") == 334)\nassert(solution(\"100 115\") == 337)\nassert(solution(\"100 116\") == 340)\nassert(solution(\"100 117\") == 343)\nassert(solution(\"100 118\") == 346)\nassert(solution(\"100 119\") == 349)\nassert(solution(\"100 120\") == 352)\nassert(solution(\"100 121\") == 355)\nassert(solution(\"100 122\") == 358)\nassert(solution(\"100 123\") == 361)\nassert(solution(\"100 124\") == 364)\nassert(solution(\"100 125\") == 367)\nassert(solution(\"100 126\") == 370)\nassert(solution(\"100 127\") == 373)\nassert(solution(\"100 128\") == 376)\nassert(solution(\"100 129\") == 379)\nassert(solution(\"100 130\") == 382)\nassert(solution(\"100 131\") == 385)\nassert(solution(\"100 132\") == 388)\nassert(solution(\"100 133\") == 391)\nassert(solution(\"100 134\") == 394)\nassert(solution(\"100 135\") == 397)\nassert(solution(\"100 136\") == 400)\nassert(solution(\"100 137\") == 403)\nassert(solution(\"100 138\") == 406)\nassert(solution(\"100 139\") == 409)\nassert(solution(\"100 140\") == 412)\nassert(solution(\"100 141\") == 415)\nassert(solution(\"100 142\") == 418)\nassert(solution(\"100 143\") == 421)\nassert(solution(\"100 144\") == 424)\nassert(solution(\"100 145\") == 427)\nassert(solution(\"100 146\") == 430)\nassert(solution(\"100 147\") == 433)\nassert(solution(\"100 148\") == 436)\nassert(solution(\"100 149\")"
    },
    {
        "number": 4245,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k >= n:\n        return str(n)\n    else:\n        return str(k)"
    },
    {
        "number": 4245,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split(' ')))\n    return str(min(n, m) - 1)\n\nassert(solution('4 10') == '3')\nassert(solution('3 4') == '2')\nassert(solution('10 10') == '0')\nassert(solution('7 4') == '2')\n"
    },
    {
        "number": 4245,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(max(0, (a - b) // 2))"
    },
    {
        "number": 4245,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split()]\n    ans = 0\n    while A <= B:\n        ans += 1\n        B -= A\n    return str(ans)"
    },
    {
        "number": 4245,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, socket = stdin.split()\n    A, B = int(socket[0]), int(socket[1])\n    # base condition\n    if A == 1:\n        return str(B) + \" power strips, each with 1 socket, extend the socket into \" + socket + \" empty sockets.\"\n    # recursive condition\n    return str(B) + \" power strips, each with \" + str(A) + \" sockets, extend the socket into \" + str(B - A) + \" empty sockets.\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return str(min(A, B) - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4245,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes input as two integers\n    '''\n    a, b = [int(x) for x in stdin.split()]\n    return str(min(b - a, b))"
    },
    {
        "number": 4245,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(int((b-1) / (a-1)))"
    },
    {
        "number": 4246,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We have a 3-day weather forecast, and we have the actual weather on the three days.\n    We want to know how many days forecasted correctly.\n    \"\"\"\n    S, T = stdin.strip().split(\"\\n\")\n    S = S.replace(\"C\", \"CS\").replace(\"R\", \"RS\").replace(\"S\", \"SS\")\n    T = T.replace(\"C\", \"CS\").replace(\"R\", \"RS\").replace(\"S\", \"SS\")\n    return str(S.count(\"CS\") - T.count(\"CS\"))"
    },
    {
        "number": 4246,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4246,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4246,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    days_correct = 0\n    return str(days_correct)"
    },
    {
        "number": 4246,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    return str(S.count(\"C\") == T.count(\"C\"))"
    },
    {
        "number": 4246,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4246,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    sunny, cloudy, rainy = stdin[0], stdin[1], stdin[2]\n    return str(int(sunny == cloudy == rainy))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4246,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    T = stdin.strip()\n    sunny_days = 0\n    for i in range(3):\n        if S[i] == T[i]:\n            sunny_days += 1\n    return str(sunny_days)"
    },
    {
        "number": 4246,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    sunny, cloudy, rainy = stdin[0], stdin[1], stdin[2]\n    return str(int(sunny == cloudy == rainy))"
    },
    {
        "number": 4246,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"CS\")\n    2\n    >>> solution(\"CSCS\")\n    1\n    >>> solution(\"CSRS\")\n    2\n    >>> solution(\"CSS\")\n    1\n    \"\"\"\n    return '{}'.format(int(stdin[0] == stdin[1] == stdin[2]))"
    },
    {
        "number": 4247,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3: raise ValueError\n    perms = sorted(list(map(int, stdin.split())))\n    count = 0\n    for i in range(n - 1, 0, -1):\n        if perms[i] > perms[i - 1] and perms[i] > perms[i + 1]:\n            count += 1\n    return str(count)\n\nassert(solution(\"5\") == \"2\")\nassert(solution(\"5 5 5\") == \"0\")\nassert(solution(\"10\") == \"5\")\nassert(solution(\"1\") == \"0\")\nassert(solution(\"3\") == \"1\")\nassert(solution(\"5 1 3 4 2\") == \"2\")\nassert(solution(\"10 3 4 5 1\") == \"5\")\nassert(solution(\"10 3 4 5 6 7 8 9 1\") == \"0\")\nassert(solution(\"20 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1010 10 1010 10 10\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4247,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n < 3:\n        return \"NO SOLUTION\"\n    p = list(map(int, stdin.readline().split()))\n    ans = 0\n    for i in range(1, n - 1):\n        if p[i - 1] > p[i] > p[i + 1]:\n            ans += 1\n    print(ans)"
    },
    {
        "number": 4247,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    if n < 3 or n > 20:\n        raise ValueError('Number must be between 3 and 20')\n\n    p = stdin.strip().split()\n    p = [int(p_i) for p_i in p]\n    if not is_valid_permutation(p):\n        raise ValueError('The given permutation is invalid')\n    print(solution_recursive(p, 0))\n    return ''\n\n\ndef"
    },
    {
        "number": 4247,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3 or n > 20:\n        raise ValueError(\"Invalid n\")\n    p = [int(x) for x in stdin.split(\" \")]\n    if len(p)!= n:\n        raise ValueError(\"Invalid permutation\")\n    if len(set(p))!= n:\n        raise ValueError(\"Invalid permutation\")\n    nums = set(range(1, n))\n    for i, v in enumerate(p):\n        if v in nums:\n            nums.remove(v)\n        if len(nums) < 3:\n            break\n    else:\n        return str(len(nums))\n    return \"0\""
    },
    {
        "number": 4247,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n\n    # 1, 2, 3, 4, 5, 6, 7, 8, 9,..., n\n    d = {i: 0 for i in range(1, n + 1)}\n    for i in l:\n        d[i] += 1\n\n    c = 0\n    for i in d:\n        if d[i] == 1:\n            if d[i - 1] > 0 and d[i + 1] > 0:\n                c += 1\n\n    return str(c)"
    },
    {
        "number": 4247,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3 or n > 20:\n        return ''\n\n    perm = [int(i) for i in stdin.split()]\n\n    def second_smallest(a, b, c):\n        return a if b > a and a > c else b if c > b and b > a else c\n\n    count = 0\n\n    for i in range(1, n):\n        if second_smallest(perm[i - 1], perm[i], perm[(i + 1) % n]) == perm[i]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n    p_i = []\n    for i in range(1, n - 1):\n        if p[i] > p[i - 1] and p[i] > p[i + 1]:\n            p_i.append(p[i])\n    print(len(p_i))\n    return \"\""
    },
    {
        "number": 4247,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    arr = stdin.split()[1:]\n    arr = [int(x) for x in arr]\n\n    # we know that p is a permutation of [1,2,3,...,n]\n    if len(arr)!= 3 * n:\n        raise Exception(\"Invalid number of numbers\")\n\n    count = 0\n    for i in range(len(arr)):\n        if i % 3 == 1:\n            # check if it is the second smallest\n            if i < len(arr) - 1 and arr[i] > arr[i+1]:\n                count += 1\n            elif i > 1 and arr[i] > arr[i-1]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    perms = list(map(int, stdin.readline().strip().split()))\n    return str(perms.count(2))\n\nassert(solution('''5\n1 3 5 4 2''') == '2')\nassert(solution('''1\n1''') == '0')\nassert(solution('''10\n1 4 5 2 6 3 7 8 9 10''') == '9')\nassert(solution('''30\n232743 4231 1 2 3 4 222513 5453 6499 1 2332323 23423 1''') == '0')\n'''\n\ndef"
    },
    {
        "number": 4247,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    perm = [int(x) for x in stdin.readline().split(' ')]\n    print(second_smallest(perm))\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for _ in range(n):\n        x, y = [float(n) for n in stdin.strip().split()]\n        points.append((x, y))\n    \n    ans = 0\n    for i in range(n):\n        xi, yi = points[i]\n        for j in range(i + 1, n):\n            xj, yj = points[j]\n            dist = math.sqrt((xi - xj) ** 2 + (yi - yj) ** 2)\n            ans += dist\n    \n    return str(ans)\n\n\nimport sys\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        point = stdin.readline().split()\n        points.append((float(point[0]), float(point[1])))\n\n    xs = [point[0] for point in points]\n    ys = [point[1] for point in points]\n    x_avg = sum(xs) / len(xs)\n    y_avg = sum(ys) / len(ys)\n\n    dot_products = []\n    for x, y in points:\n        dot_products.append(((x - x_avg) * (x - x_avg) + (y - y_avg) * (y - y_avg)))\n\n    return sum(dot_products) ** 0.5\n\nprint(solution(None))\n"
    },
    {
        "number": 4248,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def dist(x1, y1, x2, y2) -> float:\n        return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** (1 / 2)\n\n    n = int(stdin.readline())\n    line = stdin.readline().split()\n    points = []\n    for i in range(n):\n        points.append((float(line[0]), float(line[1])))\n        line = stdin.readline().split()\n\n    pairs = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            pairs.append((dist(points[i][0], points[i][1], points[j][0], points[j][1]), i, j))\n\n    pairs = sorted(pairs)\n    seeds = set()\n\n    theta = 0\n    for pair in pairs:\n        i, j = pair[1], pair[2]\n        if (i, j) in seeds or (j, i) in seeds:\n            continue\n        theta += dist(points[i][0], points[i][1], points[j][0], points[j][1])\n        seeds.add((i, j))\n        seeds.add((j, i))\n\n    return str(theta)\n"
    },
    {
        "number": 4248,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Main entry point of the script.\n    '''\n    n = int(stdin.readline().strip())\n    points = [tuple(map(float, stdin.readline().strip().split(' '))) for _ in range(n)]\n    return str(bisect_the_mines(points))"
    },
    {
        "number": 4248,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    lines = lines[1:]\n    points = []\n    for i in range(n):\n        points.append(tuple(float(x) for x in lines[i].split()))\n    \n    def distance(a, b):\n        return math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\n    \n    def is_clockwise(points):\n        return all(\n            points[i][0] - points[i + 1][0] * points[i + 1][1]\n            > points[i + 1][0] * points[i + 1][1] - points[i + 1][0]\n            for i in range(n - 1))\n    \n    def is_point_in_line(point, p1, p2):\n        return (\n            ((p2[0] - p1[0]) * (point[1] - p1[1]) - (p2[1] - p1[1]) * (point[0] - p1[0])) > 0\n            and (\n                ((p2[0] - p1[0]) * (point[1] - p1[1]) - (p2[1] - p1[1]) * (point[0] - p1[0]))\n                <= (p2[0] - p1[0]) * (point[1] - p1[1]) + (p2[1] - p1[1]) * (point[0] - p1[0])\n            )\n            and (\n                ((p2[0] - p1[0]) * (point[1] - p1[1]) - (p2[1] - p1[1]) * (point[0] - p1[0]))\n                <= (p2[0] - p1[0]) * (point[1] - p1[1]) + (p2[1] - p1[1]) * (point[0] - p1[0])\n            )\n        )\n    \n    def average_point(points):\n        x = sum(x for x, y in points) / len(points)\n        y = sum(y for x, y in points) / len(points)\n        return (x, y)\n    \n    def is_convex(points):\n        def side_length(p1, p2):\n            return distance(p1, p2)\n        \n        def area(p1, p2, p3):\n            return abs((p1[0] - p2[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p2[1]))\n        \n        def normalize(point):\n            x = point[0]\n            y = point[1]\n            return (x, y)\n        \n        def normalize_vec(p1, p2):\n            return (p2[0] - p1[0], p2[1] - p1[1])\n        \n        def normalize_point(p1, p2):\n            return (p2[0] - p1[0], p2[1] - p1[1])\n        \n        def vec_angle(v1, v2):\n            return math.atan2(v2[1], v2[0]) - math.atan2(v1[1], v1[0])\n        \n        def area_triangle(p1, p2, p3):\n            a1 = area(p1, p2, p3)\n            a2 = area(p1, p3, p2)\n            a3 = area(p2, p3, p1)\n            return abs(a1 + a2 + a3 - a1 * a2 * a3) / 2\n        \n        points = [(p[0], p[1]) for p in points]\n        if len(points) <= 2:\n            return True\n        \n        normals = [\n            normalize(normalize_point(points[i], points[(i + 1) % len(points)]))\n            for i in range(len(points))\n        ]\n        \n        if not is_clockwise(normals):\n            return False\n        \n        sides = [\n            side_length(points[i], points[(i + 1) % len(points)])\n            for i in range(len(points))\n        ]\n        \n        if not is_clockwise(sides):\n            return False\n        \n        area_vectors = [\n            vec_angle(normals[i], normals[(i + 1) % len(normals)])\n            for i in range(len(normals))\n        ]\n        \n        if not is_clockwise(area_vectors):\n            return False\n        \n        return abs(area_triangle(points[0], points[1], points[2])) >= abs(\n            area_triangle(points[1], points[2], points[3]))\n\n    def min_area(points):\n        if not is_clockwise(points):\n            return math.inf\n        \n        if len(points) == 2:\n            return abs(distance(points[0], points[1]))\n        \n        center = average_point(points)\n        return min(\n            min_area(points[:2] + [center]),\n            min_area(points[2:] + [center]))\n    \n    def area(points):\n        return abs(\n            (\n                (points[0][0] - points[-1][0]) *\n                (points[0][1] + points[-1][1])\n            ) -\n            (\n                (points[0][0] + points[-1][0]) *\n                (points[0][1] - points[-1][1])\n            )\n        ) / 2\n    \n    def scale(p1, p2, scale_factor):\n        return (\n            p1[0] * scale_factor + p2[0] * (1 - scale_factor),\n            p1[1] * scale_factor + p2[1] * (1 - scale_factor)\n        )\n    \n    def is_point_in_triangle(point, p1, p2, p3):\n        return (\n            is_point_in_line(point, scale(p1, p2"
    },
    {
        "number": 4248,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    coordinates = []\n    for line in lines[1:]:\n        coordinates.append(tuple(float(x) for x in line.split()))\n    return str(sum(\n        math.atan2(c[1], c[0]) for c in coordinates\n    ))"
    },
    {
        "number": 4248,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coords = [tuple(map(float, line.split())) for line in stdin.splitlines()[1:]]\n    ans = 0.0\n    for i, coord in enumerate(coords):\n        ans += (coord[0] - coords[i - 1][0]) ** 2 + (coord[1] - coords[i - 1][1]) ** 2\n    ans *= 2\n    ans /= n\n    return str(ans)"
    },
    {
        "number": 4248,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The square root of the number of points is the answer.\n    \"\"\"\n    def sqrt(x: float, y: float) -> float:\n        return (x * x + y * y) ** 0.5\n    \n    n = int(stdin.readline())\n    for _ in range(n):\n        x, y = [float(p) for p in stdin.readline().split()]\n        print(sqrt(x, y))\n    return ''\n\nassert(solution('''8\n-2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\n\n''')) == 5.410\nassert(solution('''5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\n\n''')) == 5.620\nassert(solution('''8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n\n''')) == 5.480\nassert(solution('''5\n10.44 2.06\n10.90 0.80\n11.48 -0.48\n12.06 0.76\n12.54 2.06\n\n''')) == 6.040\nassert(solution('''8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\n\n''')) == 6.720\nassert(solution('''7\n20.62 3.00\n21.06 2.28\n21.56 1.36\n21.66 0.56\n21.64 -0.52\n22.14 2.32\n22.62 3.04\n\n''')) == 6.720\nassert(solution('''14\n27.64 2.48\n22.70 2.46\n20.78 1.34\n18.84 0.52\n14.00 -0.30\n12.34 0.36\n11.42 -0.64\n10.12 0.76\n9.10 -0.82\n8.76 -0.81\n6.85 0.26\n\n''')) == 5.480\n"
    },
    {
        "number": 4248,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    result = 0.0\n    for i in range(n):\n        x, y = list(map(float, stdin.readline().split()))\n        result += abs((x ** 2 + y ** 2) ** 0.5)\n    return str(result / n)"
    },
    {
        "number": 4249,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n\n    if m > 2 * n or m < 1:\n        return '-1'\n\n    a = sorted(a)\n    ans = 0\n\n    for i in range(m - 1):\n        a[i] += 1\n\n    for i in range(n - 1):\n        a[i] += a[i + 1]\n\n    ans += n - 1\n    ans += m - 2\n\n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            ans += a[i] - a[i + 1]\n\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    cups = max(a) + 1\n    dp = [0] * cups\n    for cup in a:\n        dp[cup] = min(cup, cups - cup)\n    for _ in range(n - 1):\n        for cup in range(1, cups):\n            dp[cup] = min(cup, dp[cup] + max(0, cup - 1))\n    return str(min(dp))\n\n\nassert solution('''5 8\n2 3 1 1 2\n''') == '4'\n\nassert solution('''7 10\n1 3 4 2 1 4 2\n''') == '2'\n\nassert solution('''5 15\n5 5 5 5 5\n''') == '1'\n\nassert solution('''5 26\n5 5 5 5 5\n''') == '-1'\n\nassert solution('''5 26\n5 5 5 5 5\n''') == '2'\n\nassert solution('''7 21\n1 3 4 2 1 4 2\n''') == '3'\n"
    },
    {
        "number": 4249,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    cups = [int(x) for x in stdin.split()]\n    cups = sorted(cups)\n    if sum(cups) < n:\n        return '-1'\n    if m == n:\n        return '0'\n    cups = [0] + cups\n    t = 1\n    while True:\n        if sum(cups[:m]) < n:\n            return str(t)\n        cups = cups[1:]\n        t += 1\n\n\nimport sys"
    },
    {
        "number": 4249,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    c = [0] * n\n    if any(c > m for c in k):\n        return '-1'\n    return str(m - max(0, sum(c[:i] - i + 1 for i in k) for c in k) - 1)"
    },
    {
        "number": 4249,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    a = list(map(int, stdin.split()))\n\n    if m > sum(a):\n        return -1\n\n    first_day = []\n    for i in range(1, n + 1):\n        if m - a[i - 1] > 0:\n            first_day.append(m - a[i - 1])\n\n    second_day = []\n    for i in range(1, n + 1):\n        if first_day[i - 1] == 0:\n            continue\n        if a[i - 1] > first_day[i - 1]:\n            second_day.append(first_day[i - 1])\n        else:\n            second_day.append(a[i - 1] - first_day[i - 1])\n\n    first_day = sorted(first_day, reverse=True)\n    second_day = sorted(second_day, reverse=True)\n\n    for i in range(len(first_day)):\n        first_day[i] += second_day[i]\n\n    return sum(first_day)\n"
    },
    {
        "number": 4249,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    coffee = list(map(int, stdin.split()))\n    max_cups = max(coffee)\n    cups = []\n    for i in range(1, max_cups + 1):\n        cups.append(coffee.count(i))\n    cups.sort(reverse=True)\n\n    cups_remaining = n\n    days_to_write = 0\n    for cup in cups:\n        if cups_remaining > cup:\n            days_to_write += 1\n            cups_remaining -= cup\n        else:\n            break\n    return str(days_to_write)\n\nassert(solution('''5 8\n2 3 1 1 2\n''') == '4')\nassert(solution('''7 10\n1 3 4 2 1 4 2\n''') == '2')\nassert(solution('''5 15\n5 5 5 5 5\n''') == '1')\nassert(solution('''5 26\n5 5 5 5 5\n''') == '-1')\nassert(solution('''5 26\n5 5 5 5 5\n''') == '-1')\nassert(solution('''7 26\n5 5 5 5 5\n''') == '-1')\n"
    },
    {
        "number": 4249,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    \n    cups_of_coffee = 0\n    for ai in a:\n        cups_of_coffee += ai\n    \n    cups_of_coffee = max(0, cups_of_coffee - n)\n    \n    if cups_of_coffee == 0:\n        return '-1'\n    else:\n        return str(int(math.ceil(math.ceil(cups_of_coffee / (n * (m - cups_of_coffee))) / n) - 1))\n\nprint(solution(stdin.read()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m = map(int, stdin[0].split())\n    a = [int(i) for i in stdin[1].split()]\n\n    if n == 1 and m == 1:\n        return 1\n\n    else:\n        a.sort()\n\n        a_1 = a[0]\n        a_n = sum(a[1:])\n\n        if a_n == 0:\n            return -1\n\n        elif n * m > a_n + 1:\n            return -1\n\n        elif a_n + 1 == n * m:\n            return a_1\n\n        else:\n            return a_1 + a_n - 1\n\n\n\nsolution(input())\n"
    },
    {
        "number": 4249,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split(' ')]\n    c = [int(s) for s in stdin.split(' ')]\n\n    if m > n:\n        return -1\n\n    counter = 0\n\n    while n > 0:\n        max_caffeine = max(c)\n        caffeine = [c[i] - (i + 1) for i in range(len(c))]\n        max_caffeine_index = caffeine.index(max_caffeine)\n\n        if max_caffeine == 0:\n            return -1\n\n        n -= max_caffeine_index + 1\n        counter += max_caffeine_index + 1\n\n        for i in range(len(c)):\n            c[i] -= max_caffeine_index + 1\n\n    return counter\n\n\nassert(solution('5 8') == 4)\nassert(solution('7 10') == 2)\nassert(solution('5 15') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26') == -1)\nassert(solution('5 26"
    },
    {
        "number": 4249,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5\\n5 5 5 5 5\")\n    '2'\n    >>> solution(\"5 15\\n5 5 5 5 5\")\n    '-1'\n    >>> solution(\"5 26\\n5 5 5 5 5\")\n    '-1'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    sorted_cups = sorted(cups)\n    while n > 1:\n        if cups[0] > sorted_cups[-1]:\n            return '-1'\n        n -= 1\n        cups[0] -= 1\n        for i in range(1, len(cups)):\n            if cups[i] < sorted_cups[-1]:\n                cups[i] += 1\n    return str(cups[0])\n    \n"
    },
    {
        "number": 4250,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    s = list(map(int, stdin.strip().split()))\n    for _ in range(k):\n        t = [x for x in s]\n        for i in range(len(s)):\n            if s.count(s[i]) > 1:\n                del t[i]\n                break\n        else:\n            return''.join(map(str, t))\n    return ''"
    },
    {
        "number": 4250,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,k = list(map(int,stdin.split()))\n    a = list(map(int,stdin.split()))\n    a = [0] + a + [0]\n    p = [0] * (n+2)\n    for i in range(1,n+1):\n        p[a[i]] += 1\n    def f(p, x, y):\n        p[x] -= 1\n        p[y] += 1\n    #p = [0] * (n+2)\n    #for i in range(1,n+1):\n    #    p[a[i]] += 1\n    #for i in range(1,n+1):\n    #    p[i] -= 1\n    #t = [0] * k\n    #def tt(x):\n    #    t[x-1] = p[x]\n    #    while x > 1:\n    #        x //= 2\n    #        if p[x] < p[2*x]:\n    #            t[x-1] = p[x]\n    #            x -= 1\n    #        else:\n    #            tt(2*x)\n    #    while x > 1:\n    #        x //= 2\n    #        p[x] = t[x-1]\n    #    for i in range(k):\n    #        if t[i] > 0:\n    #            tt(2**i)\n    #            print(i+1, end=\" \")\n    def tt(x):\n        while x > 1:\n            x //= 2\n            if p[x] < p[2*x]:\n                p[x] = p[2*x]\n                x -= 1\n        while x > 1:\n            x //= 2\n            p[x] = t[x-1]\n    def tt1(x):\n        while x > 1:\n            x //= 2\n            tt(2*x)\n        for i in range(k):\n            if t[i] > 0:\n                tt(2**i)\n                print(i+1, end=\" \")\n    #tt(n)\n    tt1(n)\nsolution(stdin.read())\n'''\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIf you enjoyed this Kata, please try:\n\nKata#Binary-Search-and-Two-Pointers-I\n\"\"\"\n\nn, k = map(int, stdin.split())\ns = list(map(int, stdin.split()))\n"
    },
    {
        "number": 4250,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string of the maximum number of copies that can be cut out of the array.\n\n    >>> solution('''7 3\n   ... 1 2 3 2 4 3 1\n   ... ''')\n    '1 2 3'\n    >>> solution('''10 4\n   ... 1 3 1 3 10 3 7 7 12 3\n   ... ''')\n    '7 3 1 3'\n    \"\"\"\n\n    n, k = [int(x) for x in stdin.split()]\n\n    s = [int(x) for x in stdin.split()]\n\n    if k > len(s):\n        return \"0\"\n\n    res = []\n    for i in range(1, k + 1):\n        for j in permutations(s, i):\n            if sum(j) == k:\n                res.append(j)\n    return \" \".join([str(x) for x in sorted(res[0])])\n"
    },
    {
        "number": 4250,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    for i in range(n - k + 1):\n        if s[i:i + k] == s[i:i + k][::-1]:\n            print(*s[i:i + k])\n            return\n\nsolution(stdin.read())\n"
    },
    {
        "number": 4250,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check_permutation(a: list, b: list) -> bool:\n        if len(a)!= len(b):\n            return False\n        for elem in a:\n            if elem in b:\n                b.remove(elem)\n            else:\n                return False\n        return True\n\n    n, k = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    max_k = min(n, k)\n    for i in range(1, max_k + 1):\n        if check_permutation(s, s[i:i + n]):\n            return \" \".join([str(x) for x in s[i:i + n]])\n"
    },
    {
        "number": 4250,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, k = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    arr = []\n    for i in range(s):\n        if s.count(s[i]) > 1:\n            arr.append(s[i])\n    return \" \".join([str(i) for i in arr])"
    },
    {
        "number": 4250,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    start = 0\n    end = n\n    while start < end:\n        mid = (start + end) // 2\n        if mid == 0:\n            break\n        i = 0\n        while i < mid:\n            if s[i] > mid:\n                break\n            i += 1\n        if i == mid:\n            end = mid\n        else:\n            start = mid\n    i = 0\n    while i < start:\n        if s[i] > start:\n            break\n        i += 1\n    return \" \".join([str(x) for x in s[i:start]])"
    },
    {
        "number": 4250,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    if k > n:\n        return 'impossible'\n    s.sort()\n    if n % k == 0:\n        return''.join(str(x) for x in s[:n // k])\n    else:\n        return 'impossible'\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4250,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()[1:]))\n\n    pass\n\nn, k = 7, 3\ns = [1, 2, 3, 2, 4, 3, 1]\nsolution(stdin)\n\nn, k = 10, 4\ns = [1, 3, 1, 3, 10, 3, 7, 7, 12, 3]\nsolution(stdin)\n\nn, k = 15, 2\ns = [1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1]\nsolution(stdin)\n\nn, k = 2, 10\ns = [1, 3, 1, 1, 1, 1, 2, 1, 1, 1]\nsolution(stdin)\n\nn, k = 10, 4\ns = [1, 3, 1, 3, 10, 3, 7, 7, 12, 3]\nsolution(stdin)\n\nn, k = 15, 2\ns = [1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1]\nsolution(stdin)\n\nn, k = 10, 5\ns = [1, 3, 1, 3, 10, 3, 7, 7, 12, 3]\nsolution(stdin)\n"
    },
    {
        "number": 4251,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    \n    k = 0\n    for _ in range(n):\n        for i in range(m):\n            for j in range(i + 1, m):\n                if abs(a[i][j] - a[i][0]) > k:\n                    k = abs(a[i][j] - a[i][0])\n    return str(k)\n"
    },
    {
        "number": 4251,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    rows = list(range(n))\n    for _ in range(m):\n        row = []\n        for i in rows:\n            row.append(a[i][-1])\n        a[rows[-1]].append(row[0])\n        rows = rows[-1:] + rows[:-1]\n\n    k = 0\n    while len(rows) > 1:\n        tmp = rows[-1]\n        for i in rows:\n            if abs(tmp - i) >= k:\n                break\n        else:\n            k += 1\n        rows = rows[:-1]\n    return k"
    },
    {
        "number": 4251,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split()]\n\n    matrix = []\n\n    for _ in range(rows):\n        matrix.append([int(x) for x in stdin.split()])\n\n    k = 0\n\n    for j in range(cols):\n        for i in range(rows - 1):\n            diff = abs(matrix[i][j] - matrix[i + 1][j])\n\n            if diff > k:\n                k = diff\n\n    return str(k)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4251,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, n = list(map(int, stdin.split()))\n    a = [list(map(int, stdin.split())) for _ in range(m)]\n    k = 0\n    \n    for i in range(m):\n        for j in range(n):\n            k = max(k, abs(a[i][j] - a[i + 1][j]))\n            k = max(k, abs(a[i][j] - a[i + 1][j + 1]))\n            k = max(k, abs(a[i][j] - a[i + 1][j - 1]))\n    return str(k)\n\nm = int(input())\nn = int(input())\na = [list(map(int, input().split())) for _ in range(m)]\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [list(map(int, stdin.split(' ')[i * m:i * m + m])) for i in range(n)]\n    p = [-1] * m\n    for i in range(n):\n        for j in range(m):\n            p[a[i][j] - 1] = j\n    s = [0] * m\n    for i in range(m):\n        s[i] = a[i][p[i]]\n    k = max(abs(s[i] - s[i + 1]) for i in range(m - 1))\n    if k == 0:\n        return '0'\n    else:\n        return str(k)"
    },
    {
        "number": 4251,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    matrix = []\n    for i in range(rows):\n        matrix.append(list(map(int, stdin.split())))\n    return str(bfs(matrix, cols))\n\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split())))\n\n    # find optimal k\n    def is_acceptable(k: int, m: int, matrix: list) -> bool:\n        for i in range(m - 1):\n            for j in range(i + 1, m):\n                if abs(matrix[i][j] - matrix[i + 1][j]) >= k:\n                    return False\n        return True\n\n    # find optimal k\n    def is_acceptable_naive(k: int, m: int, matrix: list) -> bool:\n        row_i = 0\n        col_i = 0\n        for i in range(m):\n            for j in range(i, m):\n                if abs(matrix[row_i][col_i] - matrix[row_i + 1][col_i]) >= k:\n                    return False\n                col_i += 1\n            row_i += 1\n            col_i = 0\n        return True\n\n    def brute_force_solution(matrix: list) -> int:\n        k = 0\n        for i in range(n):\n            for j in range(m - 1):\n                k = max(k, abs(matrix[i][j] - matrix[i][j + 1]))\n        return k\n\n    return str(max(brute_force_solution(matrix), is_acceptable(5, m, matrix), is_acceptable(3, m, matrix), is_acceptable(2, m, matrix)))\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4251,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    mtrx = [list(map(int, stdin.split())) for _ in range(n)]\n\n    ans = 0\n    for k in range(1, m):\n        mtrx2 = copy.deepcopy(mtrx)\n        for i in range(n):\n            l, r = i, i + k\n            while l >= 0 and r < n and len(set(mtrx2[l])) == m:\n                mtrx2[l].append(mtrx2[l].pop(0))\n                l -= 1\n                r += 1\n            while l >= 0 and r < n and len(set(mtrx2[r])) == m:\n                mtrx2[r].append(mtrx2[r].pop(0))\n                r += 1\n                l -= 1\n            while l >= 0 and r < n and len(set(mtrx2[l])) == m:\n                mtrx2[l].append(mtrx2[l].pop(0))\n                l -= 1\n                r += 1\n            while l >= 0 and r < n and len(set(mtrx2[r])) == m:\n                mtrx2[r].append(mtrx2[r].pop(0))\n                r += 1\n                l -= 1\n\n        ans = max(ans, k)\n\n    return str(ans)"
    },
    {
        "number": 4251,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum integer $k$ such that there exists some order of rows of matrix $a$ that it produces an $k$-acceptable traversal.\n\n    >>> solution(\"\"\"5 2\n   ... 9 9\n   ... 10 8\n   ... 5 3\n   ... 4 3\n   ... \"\"\")\n    '5'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    max_k = 0\n    for row_index in range(n):\n        for column_index in range(m):\n            if abs(matrix[row_index][column_index] - matrix[row_index + 1][column_index]) >= max_k:\n                max_k = abs(matrix[row_index][column_index] - matrix[row_index + 1][column_index])\n    return str(max_k)"
    },
    {
        "number": 4252,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    filename = stdin.readline()\n    x = 0\n    while filename.count('x') > 0:\n        x += 1\n        filename = filename.replace('x', '', 1)\n    return x\n\nassert(solution('''6\nxxxiii\n''') == 1)\nassert(solution('''5\nxxoxx\n''') == 0)\nassert(solution('''10\nxxxxxxxxxx\n''') == 8)\nassert(solution('''7\nxxxxxxx\n''') == 7)\nassert(solution('''7\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxxxxx\n''') == 8)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx\n''') == 7)\nassert(solution('''10\nxxxxxxx"
    },
    {
        "number": 4252,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution('xxxiii') == '1'\nassert solution('xxoxx') == '0'\nassert solution('xxxxxxx') == '8'\nassert solution('xxxxxxxxxx') == '0'\nassert solution('xxxxxxxx') == '0'\nassert solution('xxi') == '1'\nassert solution('xii') == '0'\nassert solution('ii') == '0'\nassert solution('xxxii') == '1'\nassert solution('xxii') == '0'\nassert solution('xxxii') == '1'\nassert solution('xxiii') == '1'\nassert solution('xxiv') == '1'\nassert solution('xix') == '1'\nassert solution('xv') == '1'\nassert solution('xvi') == '1'\nassert solution('xvii') == '2'\nassert solution('xviii') == '2'\nassert solution('xix') == '2'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert solution('x') == '0'\nassert"
    },
    {
        "number": 4252,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nassert(solution(\"\"\"xxxiii\"\"\") == \"1\")\nassert(solution(\"\"\"xxoxx\"\"\") == \"0\")\nassert(solution(\"\"\"xxxxxxxxxx\"\"\") == \"8\")"
    },
    {
        "number": 4252,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)\n"
    },
    {
        "number": 4252,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('xxxiii')\n    '1'\n    >>> solution('xxoxx')\n    '0'\n    >>> solution('xxxxx')\n    '8'\n    \"\"\"\n   ...\n    return...\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.split('\\n')[0]\n    res = \"\"\n    for i in range(len(name)):\n        if name[i]!= \"x\" and name[i+1]!= \"x\" and name[i+2]!= \"x\":\n            res += name[i]\n    return res if res else \"0\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lstrip(\"x\")\n"
    },
    {
        "number": 4252,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum number of characters to remove from the file name so after that the name does not contain \"xxx\" as a substring.\"\"\"\n    # Count the number of \"x\"s in the file name\n    count = 0\n    for c in stdin:\n        if c == \"x\":\n            count += 1\n        else:\n            count = 0\n\n        if count == 3:\n            return \"0\"\n\n    return \"1\""
    },
    {
        "number": 4252,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nassert(solution(\n\"\"\"\n6\nxxxiii\n\nOutput\n1\n\"\"\")) == \"1\"\n\nassert(solution(\n\"\"\"\n5\nxxoxx\n\nOutput\n0\n\"\"\")) == \"0\"\n\nassert(solution(\n\"\"\"\n10\nxxxxxxxxxx\n\nOutput\n8\n\"\"\")) == \"8\""
    },
    {
        "number": 4252,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4253,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(3 * pow(int(stdin), 2))"
    },
    {
        "number": 4253,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(3*x*x)\n\nassert(solution(\"4\") == \"48\")\nassert(solution(\"3\") == \"9\")\nassert(solution(\"2\") == \"4\")\nassert(solution(\"1\") == \"1\")\n\nprint(solution(input()))\n"
    },
    {
        "number": 4253,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = stdin.strip()\n    return str(3*float(r)**2)"
    },
    {
        "number": 4253,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n\n    return str(3 * r * r * 2)"
    },
    {
        "number": 4253,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the area of a regular dodecagon inscribed in a circle of radius r.\n\n    >>> solution(\"4\")\n    '48'\n    >>> solution(\"2\")\n    '12'\n    \"\"\"\n    radius = int(stdin)\n    return str(3 * (radius ** 2))\n"
    },
    {
        "number": 4253,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(r * r * 6)\n\nassert solution('') == '0'\nassert solution('3') == '12'\nassert solution('4') == '48'\nassert solution('10') == '336'\nassert solution('14') == '528'\nassert solution('100') == '13543936'\n\nassert solution('-3') == '-12'\nassert solution('-4') == '-48'\nassert solution('-10') == '-336'\nassert solution('-14') == '-528'\nassert solution('-100') == '-13543936'\n"
    },
    {
        "number": 4253,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(3 * (n ** 2))"
    },
    {
        "number": 4253,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    result = 3 * pow(radius, 2)\n    return str(result)"
    },
    {
        "number": 4253,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3')\n    '48'\n    >>> solution('4')\n    '48'\n    >>> solution('4.2')\n    '64'\n    >>> solution('2.7')\n    '100'\n    \"\"\"\n    r = float(stdin)\n\n    return str(3 * r ** 2)\n"
    },
    {
        "number": 4253,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(3*(r*(r**2)))"
    },
    {
        "number": 4254,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int, stdin.split())\n    return 'unsafe' if m>=n else'safe'"
    },
    {
        "number": 4254,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, W = [int(x) for x in stdin.split()]\n    if W >= S:\n        return 'unsafe'\n    return'safe'"
    },
    {
        "number": 4254,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    \n    number_of_sheep = int(stdin[0])\n    number_of_wolves = int(stdin[1])\n    \n    print(\"unsafe\" if number_of_wolves >= number_of_sheep else \"safe\")\n\nsolution(input())\n"
    },
    {
        "number": 4254,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, W = [int(x) for x in stdin.split(\" \")]\n    if S >= W:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassertion(solution(stdin) == \"unsafe\")\nassertion(solution(stdin) == \"safe\")\n"
    },
    {
        "number": 4254,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolf = [int(x) for x in stdin.split()]\n    return 'unsafe' if wolf >= sheep else'safe'\n\nprint(solution())"
    },
    {
        "number": 4254,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, w = [int(x) for x in stdin.strip().split(\" \")]\n    if w >= s:\n        return \"unsafe\"\n    return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Count the number of sheep and wolves. If the number of wolves is greater than or equal to that of sheep, they will attack the sheep.\n    If the wolves will attack the sheep, print unsafe; otherwise, print safe.\n    \"\"\"\n    number_of_sheep, number_of_wolves = [int(x) for x in stdin.split()]\n    if number_of_wolves >= number_of_sheep:\n        print(\"unsafe\")\n    else:\n        print(\"safe\")"
    },
    {
        "number": 4254,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_wolf, num_sheep = map(int, stdin.split())\n    if num_wolf <= num_sheep:\n        print(\"unsafe\")\n    else:\n        print(\"safe\")"
    },
    {
        "number": 4254,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, W = stdin.split(' ')\n    S, W = int(S), int(W)\n\n    if W >= S:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4255,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = [int(num) for num in stdin.split(\" \")]\n    return f\"{((A**2 + B**2) * C) // 2:.0f}\"\n\nassert(solution(\"3 4 5\") == \"6\")\nassert(solution(\"2 4 2\") == \"4\")\nassert(solution(\"6 6 6\") == \"12\")\nassert(solution(\"1 1 1\") == \"1\")\nassert(solution(\"100 100 100\") == \"400\")\nassert(solution(\"1000000 1000000 1000000\") == \"1000000\")\nprint(\"All tests passed successfully.\")"
    },
    {
        "number": 4255,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ab, bc, ca = [int(n) for n in stdin.split()]\n    return str(int(ab*bc/2))"
    },
    {
        "number": 4255,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, C = stdin.split(' ')\n    return str(int(A) * int(B) // 2 * int(C))"
    },
    {
        "number": 4255,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get the inputs\n    abc = list(map(int, stdin.split(' ')))\n    # Print the result\n    print(6 * math.sqrt(abc[0] * abc[1] / 2))"
    },
    {
        "number": 4255,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    side_a, side_b, side_c = stdin.strip().split(\" \")\n    return str(int(round(float(side_a) * float(side_b) / 2)))"
    },
    {
        "number": 4255,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    a, b, c = map(int, lines[0].split())\n    return str(int(a * b * c / 2))"
    },
    {
        "number": 4255,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = stdin.split()\n    AB, BC, CA = map(int, [AB, BC, CA])\n\n    # Area of the triangle\n    s = (AB * BC) / 2\n    # area of the circle inscribed in the triangle\n    r = (s * (s - AB) * (s - BC) * (s - CA)) ** 0.5\n\n    # Area of the circle inscribed in the triangle is given by s * (s - AB) * (s - BC) * (s - CA) / 4\n    # Area of the circle inscribed in the triangle is given by s * (s - AB) * (s - BC) * (s - CA) / 4\n    # Area of the circle inscribed in the triangle is given by s * (s - AB) * (s - BC) * (s - CA) / 4\n    # Area of the circle inscribed in the triangle is given by s * (s - AB) * (s - BC) * (s - CA) / 4\n    return f\"{int(s * (s - AB) * (s - BC) * (s - CA) / 4)}\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    import math\n    lengths = [int(l) for l in stdin.split()]\n    return str(math.floor(0.5 * sum(lengths[0:2])))"
    },
    {
        "number": 4255,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    print(a * b / 2 * c)"
    },
    {
        "number": 4255,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    nums = stdin.split(' ')\n    if len(nums)!= 3:\n        return None\n    nums = list(map(int, nums))\n    a, b, c = nums\n    return str(int((a * b * c) / 2))"
    },
    {
        "number": 4256,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.strip().split()))\n    return str(pow(2, min(8, A * C // B)))"
    },
    {
        "number": 4256,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(B // A + min(B % A, C))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4256,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(n) for n in stdin.split()]\n    if A < 8 or B < 8 or C < 8:\n        raise ValueError(\"Can't handle below 8\")\n    x = [int(x) for x in stdin.split()]\n    \n    return str(x[0] // (A - 8) + x[1] // (B - 8) + x[2] // (C - 8))"
    },
    {
        "number": 4256,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split()))\n    return \"0\""
    },
    {
        "number": 4256,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(v) for v in stdin.split(' ')]\n    return str(a*b//c)"
    },
    {
        "number": 4256,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    result = 0\n    while A >= B:\n        A = A - B\n        result += 1\n    return str(result)"
    },
    {
        "number": 4256,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(min(A * B // C, B))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4256,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    if b <= a:\n        return 0\n    return min(b // a, c)\n\nassert(solution(input())) == 4\n"
    },
    {
        "number": 4256,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)"
    },
    {
        "number": 4256,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return \"1\" if A < B and B < C else str(B - A)"
    },
    {
        "number": 4257,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b = stdin.split(\" \")\n    return a*int(b)"
    },
    {
        "number": 4257,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    A, B = map(int, stdin.split())\n    print(A * B)\n    return \"\"\n\"\"\"\n"
    },
    {
        "number": 4257,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    print(int(a) * int(b))"
    },
    {
        "number": 4257,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a * b)"
    },
    {
        "number": 4257,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    return str(A * B)"
    },
    {
        "number": 4257,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)"
    },
    {
        "number": 4257,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return str(a * b)"
    },
    {
        "number": 4257,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)"
    },
    {
        "number": 4257,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    return str(int(A) * int(B))"
    },
    {
        "number": 4257,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return str(A * B)"
    },
    {
        "number": 4258,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = [int(x) for x in stdin.split()]\n    seconds = int(T)\n    biscuits = 0\n    while seconds > 0:\n        if seconds % A == 0:\n            biscuits += B\n        seconds = seconds - A\n        if seconds % A == 0:\n            biscuits += B\n        seconds = seconds - A\n        if seconds % A == 0:\n            biscuits += B\n    return str(biscuits)"
    },
    {
        "number": 4258,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, T = [int(x) for x in stdin.split()]\n    total = 0\n    for _ in range(T // A):\n        total += B\n    return total"
    },
    {
        "number": 4258,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n\n    # We use T + 0.5 to avoid counting a biscuit produced during the last second.\n    return str(int(T / A) + int(T % A > 0) + int(T % A == 0 and T % A + A > 0))\n\n\ndef"
    },
    {
        "number": 4258,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = [int(x) for x in stdin.split()]\n    total_biscuits = 0\n    current_biscuit_time = 0\n    for second in range(1, T + 1):\n        current_biscuit_time += A\n        if second % A == 0:\n            total_biscuits += B\n    return str(total_biscuits)\n"
    },
    {
        "number": 4258,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    t = 0\n    c = 0\n    while t < T + 0.5:\n        c += 2 * A\n        t += A\n        c += A\n        t += A\n        c += A\n        t += A\n    return str(c)"
    },
    {
        "number": 4258,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    return str(int(T + 0.5) // A)\n\nassert(solution(stdin)) == \"10\"\n\"\"\"\n\nfrom sys import stdin, stdout\n\nfor line in stdin.readlines():\n    A, B, T = map(int, line.split())\n    seconds = T % A\n    if seconds == 0:\n        # no biscuits are produced\n        continue\n    else:\n        # one or more biscuits are produced\n        stdout.write(str(seconds + 1))\n        stdout.write('\\n')\n"
    },
    {
        "number": 4258,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.strip().split(\" \"))\n    return str(int((A + (T % A)) * ((T + 0.5) / A) * B))"
    },
    {
        "number": 4258,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    A, B, T = int(lines[0]), int(lines[1]), int(lines[2])\n    return str(int((B * T - (B - 1) * (T % A)) / A))"
    },
    {
        "number": 4258,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef"
    },
    {
        "number": 4258,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.split(\" \"))\n    cnt = 0\n    t += 0.5\n    while t < t + 0.5:\n        cnt += a\n        t += b\n    return str(cnt)"
    },
    {
        "number": 4259,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = tuple(int(line) for line in stdin.split())\n    k = int(stdin)\n    if a % k == 0:\n        return \"OK\"\n    else:\n        return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline().strip())\n    A, B = map(int, stdin.readline().strip().split(\" \"))\n\n    if A % K == 0:\n        return \"OK\"\n    else:\n        return \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = list(map(int, stdin.strip().split()))\n    for x in range(A, B+1):\n        if x % K == 0:\n            print(\"OK\")\n            return\n    print(\"NG\")\n    return"
    },
    {
        "number": 4259,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    A, B = [int(i) for i in stdin.split()]\n    if K % A == 0:\n        return \"OK\"\n    if K % B == 0:\n        return \"OK\"\n    return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split()]\n    return 'OK' if A % 7 == 0 and B % 7 == 0 else 'NG'"
    },
    {
        "number": 4259,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if (A <= 0) or (B <= 0) or (A >= 1000) or (B >= 1000) or (K <= 0) or (K >= 1000):\n        raise ValueError('A, B, K must be integers between 1 and 1000 inclusive')\n\n    if not isinstance(K, int) or K <= 0:\n        raise ValueError('K must be a positive integer')\n\n    if K == 1:\n        return 'OK'\n\n    if (A % K == 0) and (B % K == 0):\n        return 'OK'\n\n    return 'NG'"
    },
    {
        "number": 4259,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.strip().split())\n    if a < b and a % k == 0 and a >= 0:\n        return \"OK\"\n    return \"NG\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4259,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(s) for s in stdin.split(' ')]\n    K, A, B = inputs[0], inputs[1], inputs[2]\n\n    if K % A == 0 or K % B == 0:\n        return 'OK'\n    else:\n        return 'NG'"
    },
    {
        "number": 4259,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'OK' if multiple_of_7(int(stdin)) else 'NG'\n\ndef"
    },
    {
        "number": 4259,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split()]\n    if A <= K <= B or (A % K == 0 and B % K == 0):\n        return \"OK\"\n    else:\n        return \"NG\""
    },
    {
        "number": 4260,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, x = [int(s) for s in stdin.split()]\n    return str(t // x)"
    },
    {
        "number": 4260,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # T X\n    t,x = stdin.strip().split(' ')\n    return str(float(int(t) * float(x)) / float(x))"
    },
    {
        "number": 4260,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, T = map(int, stdin.split())\n    return f\"{(X * T) // 24:.3f}\""
    },
    {
        "number": 4260,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t, x = [int(x) for x in stdin.split(' ')]\n\n    # YOUR CODE HERE\n    return str(round(x/t, 3))"
    },
    {
        "number": 4260,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number_of_tests = stdin[0]\n    for _ in range(int(number_of_tests)):\n        x, t = map(int, stdin[1:].split())\n        print(1 / (x * t))"
    },
    {
        "number": 4260,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    return \"{0:.3f}\".format(float(t) * (x * t) / float(x))"
    },
    {
        "number": 4260,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, x = [int(x) for x in stdin.split()]\n    return '%.3f' % (2 * t / x)"
    },
    {
        "number": 4260,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    return format(x * t / (2 * pi) / (2 * pi), '.9f')\n\nprint(solution(input()))\n\"\"\"\n\nT, X = map(int, input().split())\n\nprint((2 * pi) * ((2 * pi) * (X * T / (2 * pi)) - T * T / (2 * pi)))\n"
    },
    {
        "number": 4260,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4260,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T, X = [int(x) for x in stdin.split(' ')]\n    print(X * T)"
    },
    {
        "number": 4261,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b == 0:\n        return \"0\"\n    if b > a:\n        a, b = b, a\n    if b < c:\n        b, c = c, b\n    if b > a:\n        return \"0\"\n    if a % c == 0:\n        return str(a // c)\n    bottle2 = (a // c) + 1\n    bottle1 = a // c\n    return str(bottle2)\n\nassert(solution(stdin) == stdout)\n"
    },
    {
        "number": 4261,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split(' ')]\n    if C == 0:\n        return '0'\n    if A == B == C:\n        return '0'\n    bottle_1_capacity = min(A, B)\n    bottle_2_capacity = max(A, B) - bottle_1_capacity\n    return str(bottle_2_capacity)"
    },
    {
        "number": 4261,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if b < c:\n        c, b = b, c\n    return str(b - c)"
    },
    {
        "number": 4261,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Passed\n    return \"\""
    },
    {
        "number": 4261,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(value) for value in stdin.split()]\n    if A == B == C:\n        return \"0\"\n    elif A > B:\n        if A >= C:\n            return str(A - C)\n        else:\n            return str(A - B)\n    else:\n        if B >= C:\n            return str(B - C)\n        else:\n            return str(B - A)\n"
    },
    {
        "number": 4261,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    bottle_1 = a - b\n    bottle_2 = c\n    while bottle_1 > 0 and bottle_2 > 0:\n        bottle_2 -= bottle_1\n        bottle_1 = a - b\n        a = bottle_1\n        b = bottle_2\n    if bottle_2 > 0:\n        return str(bottle_2)\n    return str(bottle_1)"
    },
    {
        "number": 4261,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split()]\n    return str(max(A, B, C - A))"
    },
    {
        "number": 4261,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [A, B, C] = [int(i) for i in stdin.split(' ')]\n    bottle1 = min(A, B, C)\n    bottle2 = max(A, B, C) - bottle1\n    return str(bottle2)"
    },
    {
        "number": 4261,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    bottle1, bottle2 = list(map(int, stdin.split()))\n    bottle1_to_bottle2 = bottle2 - bottle1\n    return str(bottle1_to_bottle2)"
    },
    {
        "number": 4261,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    bottles: List[int] = [int(x) for x in stdin.split(' ')]\n    return str(min(bottles[1], bottles[0]) - bottles[2])"
    },
    {
        "number": 4262,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    P = stdin[1]\n    Q = stdin[2]\n\n    n = int(N)\n    P = [int(x) for x in P.split()]\n    Q = [int(x) for x in Q.split()]\n\n    P.sort()\n    Q.sort()\n\n    if P < Q:\n        return str(len(P) - len(Q))\n    else:\n        return str(len(Q) - len(P))"
    },
    {
        "number": 4262,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given two permutations P and Q of size N (that is, P and Q are both rearrangements of (1,~2,~...,~N)),\n    there are N! possible permutations of size N. Among them, let P and Q be the a-th and b-th lexicographically smallest permutations, respectively.\n    Find |a - b|.\n    \"\"\"\n    permutations = stdin.strip()\n    permutations = permutations.replace(' ', '')\n    permutations = permutations.split('~')\n    n = int(permutations[0])\n\n    permutations[0] = permutations[0][1:]\n    permutations[n - 1] = permutations[n - 1][:-1]\n\n    if permutations[0] < permutations[n - 1]:\n        return abs(int(permutations[0]) - int(permutations[n - 1]))\n    elif permutations[0] > permutations[n - 1]:\n        return abs(int(permutations[n - 1]) - int(permutations[0]))\n    else:\n        return 0\n\nassert(solution(\"1 3 2\") == 3)\nassert(solution(\"3 1 2\") == 3)\nassert(solution(\"2 1 3\") == 3)\nassert(solution(\"1 3 1\") == 0)\nassert(solution(\"3 1 1\") == 0)\nassert(solution(\"1 2 2\") == 1)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"2 1 1\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 2 2\") == 1)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"2 2 1\") == 1)\nassert(solution(\"2 1 1\") == 1)\nassert(solution(\"2 1 2\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"2 2 2\") == 0)\nassert(solution(\"2 2 1\") == 1)\nassert(solution(\"2 1 1\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"2 1 2\") == 1)\nassert(solution(\"1 2 1\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 2 2\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"2 2 1\") == 1)\nassert(solution(\"2 1 1\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 2 1\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"2 1 2\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 2 1\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 2 2\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 2 1\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"2 1 2\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 2 1\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 2 1\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 2 1\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 2 1\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"2 1 2\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 2\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 1 2\") == 1)\nassert(solution(\"1 1 1\") == 0)\nassert(solution(\"1 2 1\") == 1)\nassert(solution(\"1 1 1\")"
    },
    {
        "number": 4262,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = [int(x) for x in stdin.readline().strip().split(' ')]\n    q = [int(x) for x in stdin.readline().strip().split(' ')]\n    return str(len(p) - len(q))"
    },
    {
        "number": 4262,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    P = list(map(int, stdin.readline().split()))\n    Q = list(map(int, stdin.readline().split()))\n    \n    a = P.index(min(P))\n    b = Q.index(min(Q))\n    \n    return abs(a - b)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4262,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4262,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n    return str(abs(A[0] - B[0]) + abs(A[1] - B[1]) + abs(A[2] - B[2]))\n\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\nTest cases:\n3\n1 3 2\n3 1 2\n3\n1 3 2\n3 1 2\n1 2 3\n3 1 2\n1 3 2\n3 1 2\n\"\"\"\n\"\"\"\ndef"
    },
    {
        "number": 4262,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    P = stdin.readline().strip().split(\" \")\n    Q = stdin.readline().strip().split(\" \")\n\n    P = list(map(int, P))\n    Q = list(map(int, Q))\n    N = len(P)\n    P = sorted(P)\n    Q = sorted(Q)\n    for i in range(N):\n        if P[i]!= Q[i]:\n            return str(abs(P[i] - Q[i]))\n    return \"0\""
    },
    {
        "number": 4262,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The problem is basically the same as the other permutation problem except that we have to find the absolute difference\n    between two permutations.\n    \"\"\"\n    N = int(stdin.readline().strip())\n    P = [int(x) for x in stdin.readline().strip().split(' ')]\n    Q = [int(x) for x in stdin.readline().strip().split(' ')]\n    print(abs(P[0] - Q[0]) + abs(P[1] - Q[1]) + abs(P[2] - Q[2]))"
    },
    {
        "number": 4262,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    P = [int(x) for x in stdin.readline().split()]\n    Q = [int(x) for x in stdin.readline().split()]\n    return str(abs(P.index(1) - Q.index(1)))\n\nimport sys"
    },
    {
        "number": 4262,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()\n    n = int(N)\n    perms = generate_permutations(n)\n    p_string = perms[0]\n    q_string = perms[1]\n    p_string = p_string[1:]\n    q_string = q_string[1:]\n    p_string = p_string[::-1]\n    q_string = q_string[::-1]\n    a_score = 0\n    b_score = 0\n    for i in range(len(p_string)):\n        if p_string[i] > q_string[i]:\n            a_score += 1\n        elif p_string[i] < q_string[i]:\n            b_score += 1\n    return str(abs(a_score - b_score))\n\nimport itertools\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4263,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return max(s.count(c) for c in 'ATCG')\n"
    },
    {
        "number": 4263,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('ATCODER')\n    'ATC'\n    >>> solution('ATCODER')\n    'AT'\n    >>> solution('ACGTA')\n    'ACGT'\n    >>> solution('ACGTAA')\n    'ACGTA'\n    \"\"\"\n    substrings = []\n    for i in range(len(stdin)):\n        for j in range(len(stdin)):\n            if len(stdin[i : j + 1]) > len(substrings):\n                substrings = stdin[i : j + 1]\n    return substrings"
    },
    {
        "number": 4263,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str()"
    },
    {
        "number": 4263,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4263,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 2:\n        return 0\n    return sum([len(s) for s in (set(s) - {\"A\", \"C\", \"G\", \"T\"})])\n"
    },
    {
        "number": 4263,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4263,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the longest substring of S that is a substring of S.\n    '''\n    return max(solution_aux(stdin, len(stdin), 0, []), key=len)\n\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Compute the length of the longest ACGT string that is a substring of S.\n    >>> solution(\"ATCODER\")\n    3\n    \"\"\"\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(9 - (n % 9))\n\nassert(solution('') == '8')\nassert(solution('2') == '1')\nassert(solution('10') == '9')\nassert(solution('10000000') == '1')\nassert(solution('1500000') == '6')\nassert(solution('1500001') == '0')\nassert(solution('16') == '1')\nassert(solution('14') == '2')\nassert(solution('1234') == '3')\nassert(solution('123456789') == '0')\nassert(solution('1234567890') == '0')\nassert(solution('1234567891011') == '1')\nassert(solution('12345678910112') == '2')\nassert(solution('123456789101123') == '3')\nassert(solution('1234567891011234') == '4')\nassert(solution('12345678910112345') == '5')\nassert(solution('123456789101123456') == '6')\nassert(solution('1234567891011234567') == '7')\nassert(solution('12345678910112345678') == '8')\nassert(solution('123456789101123456789') == '9')\nassert(solution('1234567891011234567891011') == '10')\nassert(solution('12345678910112345678910112') == '11')\nassert(solution('123456789101123456789101123') == '12')\nassert(solution('1234567891011234567891011234') == '13')\nassert(solution('12345678910112345678910112345') == '14')\nassert(solution('123456789101123456789101123456') == '15')\nassert(solution('1234567891011234567891011234567') == '16')\nassert(solution('12345678910112345678910112345678') == '17')\nassert(solution('123456789101123456789101123456789') == '18')\nassert(solution('1234567891011234567891011234567891011') == '19')\nassert(solution('12345678910112345678910112345678910112') == '20')\nassert(solution('123456789101123456789101123456789101123') == '21')\nassert(solution('1234567891011234567891011234567891011234') == '22')\nassert(solution('12345678910112345678910112345678910112345') == '23')\nassert(solution('123456789101123456789101123456789101123456') == '24')\nassert(solution('1234567891011234567891011234567891011234567') == '25')\nassert(solution('12345678910112345678910112345678910112345678') == '26')\nassert(solution('123456789101123456789101123456789101123456789') == '27')\nassert(solution('1234567891011234567891011234567891011234567891011') == '28')\nassert(solution('12345678910112345678910112345678910112345678910112') == '29')\nassert(solution('123456789101123456789101123456789101123456789101123') == '30')\nassert(solution('1234567891011234567891011234567891011234567891011234') == '31')\nassert(solution('12345678910112345678910112345678910112345678910112345') == '32')\nassert(solution('123456789101123456789101123456789101123456789101123456') == '33')\nassert(solution('1234567891011234567891011234567891011234567891011234567') == '34')\nassert(solution('12345678910112345678910112345678910112345678910112345678') == '35')\nassert(solution('123456789101123456789101123456789101123456789101123456789') == '36')\nassert(solution('1234567891011234567891011234567891011234567891011234567891011') == '37')\nassert(solution('12345678910112345678910112345678910112345678910112345678910112') == '38')\nassert(solution('123456789101123456789101123456789101123456789101123456789101123') == '39')\nassert(solution('12345678910112345678910112345678910112345678910112345678910112345') == '40')\nassert(solution('123456789101123456789101123456789101123456789101123456789101123456') == '41')\nassert(solution('1234567891011234567891011234567891011234567891011234567891011234567') == '42')\nassert(solution('12345678910112345678910112345678910112345678910112345678910112345678') == '43')\nassert(solution('123456789101123456789101123456789101123456789101123456789101123456789') == '44')\nassert(solution('1234567891011234567891011234567891011234567891011234567891011234567890') == '45')\nassert(solution('12345678910112345678910112345678910112345678910112345678910112345678901011') == '46')\nassert(solution('123456789101123456789101123456789101123456789101123456789101123456789010112') == '47')\nassert(solution('1234567891011234567891011234567891011234567891011234567891011234567890101123') == '48')\nassert(solution('123456789101123456789101123456789101123456789101123456789101123456789010112345') == '49')\nassert(solution('1234567891011234567891011234567891011234567891011234567891011234567890101123456') == '50')\nassert(solution('12345678910112345678910112345678910112345678910112345678910112345678901011234567') == '51')\nassert(solution('123456789101123456789101123456789101123456789101123456789101123456789010112345678') == '52')\nassert(solution('1234567891011234567891011234567891011234567891011234567891011234567890101123456789') == '53')\nassert(solution('12345678910112345678910112345678910112345678910112345678910112345678901011234567891011') == '54')\nassert(solution('123456789101123456789101123456789101123456789101123456789101123456789010112345678910112') == '55')\nassert(solution('123456789101123456789101"
    },
    {
        "number": 4264,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len([i for i in range(1, n) if len(str(i)) % 2 == 1]))"
    },
    {
        "number": 4264,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if not n.isdigit():\n        raise ValueError\n    n = int(n)\n    if n <= 0:\n        raise ValueError\n    odd = 0\n    for i in range(1, n+1):\n        if i < 10:\n            continue\n        if len(str(i)) % 2 == 1:\n            odd += 1\n    return str(odd)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4264,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    cnt = 0\n    for i in range(1, int(n) + 1):\n        if len(str(i)) % 2!= 0:\n            cnt += 1\n    return str(cnt)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4264,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len([i for i in range(1, n + 1) if len(str(i)) % 2 == 1]))\n"
    },
    {
        "number": 4264,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(len(set([n for n in range(1, N + 1) if len(str(n)) % 2 == 1])))"
    },
    {
        "number": 4264,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n+1):\n        if len(str(i)) % 2!= 0:\n            count += 1\n    return str(count)\n\nassert(solution(11) == \"9\")\nassert(solution(12345) == \"10\")"
    },
    {
        "number": 4264,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return str(n - 9)"
    },
    {
        "number": 4264,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = [1 for i in range(0, 10)]\n    count = 0\n    for i in range(1, n + 1):\n        digit_count = 0\n        while i > 0:\n            digit_count += 1\n            if i % 10 == 0:\n                digit_count -= 1\n            i = i // 10\n        if digit_count % 2!= 0:\n            count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4265,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string: str = stdin\n    return None"
    },
    {
        "number": 4265,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4265,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return str(min(len(s), len(t)) - min(len(s), len(t)))"
    },
    {
        "number": 4265,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4265,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    i = 0\n    j = 0\n    min_ops = 0\n    while i < len(s) and j < len(t):\n        if s[i]!= t[j]:\n            if s[i]!= s[i - 1]:\n                min_ops += 1\n            i += 1\n        else:\n            i += 1\n            j += 1\n    while i < len(s):\n        if s[i]!= s[i - 1]:\n            min_ops += 1\n        i += 1\n    while j < len(t):\n        if t[j]!= t[j - 1]:\n            min_ops += 1\n        j += 1\n    return str(min_ops)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4265,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4265,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    m = len(s)\n    n = len(t)\n    \n    if m > n:\n        return solution(t, s)\n    \n    count = 0\n    i = 0\n    while i < m and i < n:\n        if s[i]!= t[i]:\n            count += 1\n        i += 1\n    \n    return count\n\nassert(solution(\"cupofcoffee\", \"cupofhottea\") == 4)\nassert(solution(\"eccceeecceeceeeceeecceeeecceeeeecceeceeeceeccceeecceeecceeecceeecceeeeceeecceeeecceeeecceeecceeccceeecceeeceeecceeecceeecceeecceeecceeecceeccceeecceeccceeecceeecceecceeecceeecceeccceeccceeccceeecceeeecceeecceeecceeecceeecceecceeecceeecceeecceeecceeeecceeecceeccceeecceeeecceeecceeeecceeecceeecceeccceeecceeecceeecceeecceeecceeeecceeeecceeecceeecceeecceeeecceeecceeecceeeecceeecceeecceeecceeecceeecceeecceeecceeecceeecceeecceeeecceeeecceeecceeecceeecceeecceeecceeecceeeecceeecceeecceeecceeecceeecceeecceeecceeecceeecceeecceeecceeecceeecceeeecceeeecceeeecceeecceeecceeeecceeeecceeeecceeecceeecceeecceeecceeeecceeecceeecceeecceeeecceeecceeecceeecceeecceeecceeeecceeeecceeeecceeecceeecceeecceeecceeecceeecceeeecceeecceeecceeecceeecceeecceeeecceeecceeecceeeecceeecceeeecceeecceeeecceeeecceeeecceeeecceeeecceeecceeecceeeecceeecceeecceeecceeecceeecceeecceeecceeeecceeeecceeecceeecceeeecceeecceeeecceeeecceeecceeeecceeeecceeecceeeecceeeecceeecceeecceeecceeecceeecceeeecceeeecceeecceeeecceeecceeecceeeecceeecceeecceeecceeecceeeecceeeecceeecceeeecceeecceeecceeeecceeeecceeecceeeecceeeecceeecceeecceeeecceeecceeecceeeecceeecceeecceeecceeecceeeecceeeecceeecceeeecceeecceeecceeeecceeecceeeecceeeecceeeecceeecceeecceeeecceeecceeeecceeeecceeeecceeeecceeecceeeecceeeecceeeecceeeecceeeecceeecceeeecceeecceeecceeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeecceeeecceeecceeeecceeeecceeeecceeeecceeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeecceeeec"
    },
    {
        "number": 4265,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if len(s)!= len(t):\n        raise ValueError(\"Strings do not have equal lengths\")\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n            t = t[:i] + t[i].replace(s[i], t[i]) + t[i+1:]\n    return str(count)"
    },
    {
        "number": 4265,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin:\n    :return:\n    '''\n    pass"
    },
    {
        "number": 4265,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    n = len(s)\n    m = len(t)\n    if n == m:\n        return sum([min(s.count(c), t.count(c)) for c in set(s)])\n    return n + m - 2 * min(s.count(c) + t.count(c) for c in set(s) | set(t))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4266,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, X = [int(x) for x in stdin.split()]\n    black = set()\n    stones = set()\n    for stone in range(-1000000, 1000000):\n        stones.add(stone)\n        if stone - K < -1000000:\n            stones.discard(-1000000)\n        if stone + K >= 1000000:\n            stones.discard(1000000)\n        if stone == X:\n            stones.discard(stone)\n        if stone % 2 == 0:\n            black.add(stone)\n    return''.join(str(x) for x in sorted(black))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4266,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    if x > 1000000:\n        return '-1'\n    else:\n        return''.join(map(str, range(x - k + 1, x + 1)))"
    },
    {
        "number": 4266,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, x = [int(stdin.strip().split(' ')[i]) for i in range(2)]\n    return''.join(str(i) for i in range(x-k+1, x+1))"
    },
    {
        "number": 4266,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.strip().split())\n    return \" \".join(map(str, [\n        x for x in range(1, X) if (x + 1) % K == 0 or x % K == 0\n    ]))"
    },
    {
        "number": 4266,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, X = [int(x) for x in stdin.split()]\n    if K > 200000:\n        raise ValueError(\"K cannot be greater than 200000\")\n    if X > 1000000:\n        raise ValueError(\"X cannot be greater than 1000000\")\n\n    if K == 0:\n        raise ValueError(\"K cannot be 0\")\n    if X == 0:\n        raise ValueError(\"X cannot be 0\")\n\n    line = [-1000000, -999999, -999998, -999997, -999996, -999995, -999994, -999993, -999992, -999991, -999990, -999989, -999988, -999987, -999986, -999985, -999984, -999983, -999982, -999981, -999980, -999979, -999978, -999977, -999976, -999975, -999974, -999973, -999972, -999971, -999970, -999969, -999968, -999967, -999966, -999965, -999964, -999963, -999962, -999961, -999960, -999959, -999958, -999957, -999956, -999955, -999954, -999953, -999952, -999951, -999950, -999949, -999948, -999947, -999946, -999945, -999944, -999943, -999942, -999941, -999940, -999939, -999938, -999937, -999936, -999935, -999934, -999933, -999932, -999931, -999930, -999929, -999928, -999927, -999926, -999925, -999924, -999923, -999922, -999921, -999920, -999919, -999918, -999917, -999916, -999915, -999914, -999913, -999912, -999911, -999910, -999909, -999908, -999907, -999906, -999905, -999904, -999903, -999902, -999901, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -99900, -"
    },
    {
        "number": 4266,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4266,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    xs = list(range(-1000000, 1000000 + 1))\n    xs = list(filter(lambda x: x!= xs[x], xs))\n    xs = list(filter(lambda x: x - xs[x]!= k, xs))\n    return''.join(map(str, xs))"
    },
    {
        "number": 4266,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stones = stdin.split()\n    K = int(stones[0])\n    X = int(stones[1])\n    if K == 0:\n        print('0' * 10)\n        return\n    if K == 1:\n        print(str(X) * 10)\n        return\n    if K == 2:\n        print('0' + str(X-1) * 10)\n        print(str(X) * 10)\n        return\n    if K == 3:\n        print(str(X-2) * 10)\n        print('0' + str(X-1) * 10)\n        print(str(X) * 10)\n        return\n    if K == 4:\n        print('0' + str(X-3) * 10)\n        print('0' + str(X-2) * 10)\n        print('0' + str(X-1) * 10)\n        print(str(X) * 10)\n        return\n    if K == 5:\n        print('0' + str(X-4) * 10)\n        print('0' + str(X-3) * 10)\n        print('0' + str(X-2) * 10)\n        print('0' + str(X-1) * 10)\n        print(str(X) * 10)\n        return\n    if K == 6:\n        print('0' + str(X-5) * 10)\n        print('0' + str(X-4) * 10)\n        print('0' + str(X-3) * 10)\n        print('0' + str(X-2) * 10)\n        print('0' + str(X-1) * 10)\n        print(str(X) * 10)\n        return\n    if K == 7:\n        print('0' + str(X-6) * 10)\n        print('0' + str(X-5) * 10)\n        print('0' + str(X-4) * 10)\n        print('0' + str(X-3) * 10)\n        print('0' + str(X-2) * 10)\n        print('0' + str(X-1) * 10)\n        print(str(X) * 10)\n        return\n    if K == 8:\n        print('0' + str(X-7) * 10)\n        print('0' + str(X-6) * 10)\n        print('0' + str(X-5) * 10)\n        print('0' + str(X-4) * 10)\n        print('0' + str(X-3) * 10)\n        print('0' + str(X-2) * 10)\n        print('0' + str(X-1) * 10)\n        print(str(X) * 10)\n        return\n    if K == 9:\n        print('0' + str(X-8) * 10)\n        print('0' + str(X-7) * 10)\n        print('0' + str(X-6) * 10)\n        print('0' + str(X-5) * 10)\n        print('0' + str(X-4) * 10)\n        print('0' + str(X-3) * 10)\n        print('0' + str(X-2) * 10)\n        print('0' + str(X-1) * 10)\n        print(str(X) * 10)\n        return\n    if K == 10:\n        print('0' + str(X-9) * 10)\n        print('0' + str(X-8) * 10)\n        print('0' + str(X-7) * 10)\n        print('0' + str(X-6) * 10)\n        print('0' + str(X-5) * 10)\n        print('0' + str(X-4) * 10)\n        print('0' + str(X-3) * 10)\n        print('0' + str(X-2) * 10)\n        print('0' + str(X-1) * 10)\n        print(str(X) * 10)\n        return\n    return"
    },
    {
        "number": 4266,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4266,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, X = [int(n) for n in stdin.split()]\n\n    for i in range(K):\n        if i * 2 == X:\n            print(i)"
    },
    {
        "number": 4267,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"25\")\n    'No'\n    >>> solution(\"40\")\n    'Yes'\n    >>> solution(\"50\")\n    'Yes'\n    \"\"\"\n    x = int(stdin.split()[0])\n    return 'Yes' if x >= 30 else 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    return 'Yes' if X > 30 else 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    temp = int(stdin)\n\n    if 30 >= temp >= 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4267,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    temp = int(stdin)\n    if temp >= 30:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4267,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4267,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    temperature: int = int(stdin)\n\n    if temperature >= 30:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4267,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n\n    if X >= 30:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Return \"Yes\" if the air conditioner should be turned on, and \"No\" otherwise.\n\n    >>> solution('25')\n    'No'\n    >>> solution('-5')\n    'Yes'\n    >>> solution('-10')\n    'Yes'\n    '''\n\n    if X > 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n\n    if x >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4268,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(n) for n in stdin.split()]\n    points = [[int(x) for x in stdin.split()] for _ in range(N)]\n    points.sort(key=lambda x: sum(x))\n    n_pairs = 0\n    for i, point_1 in enumerate(points):\n        for point_2 in points[i + 1:]:\n            dist = sum((point_1[j] - point_2[j]) ** 2 for j in range(D))\n            if dist == int(dist):\n                n_pairs += 1\n    return str(n_pairs)"
    },
    {
        "number": 4268,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, D = list(map(int, stdin.split()))\n    if not 2 <= N <= 10:\n        return 'INVALID'\n    if not 1 <= D <= 10:\n        return 'INVALID'\n    X = []\n    for i in range(N):\n        X.append(list(map(int, stdin.split()[i + 1])))\n    c = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(D):\n                if (X[i][k] - X[j][k]) ** 2!= 0:\n                    c += 1\n    return str(c // 2)\n\nimport sys"
    },
    {
        "number": 4268,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4268,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    pairs = 0\n    for _ in range(n):\n        x = map(int, stdin.split())\n        for i in range(n):\n            for j in range(i+1, n):\n                if (x[i] - x[j]) ** 2 == int((x[i] - x[j]) ** 2):\n                    pairs += 1\n    return str(pairs)"
    },
    {
        "number": 4268,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4268,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    pair_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if int(math.sqrt(sum([abs(x1 - x2) ** 2 for x1, x2 in zip(points[i], points[j])]))) == int(math.sqrt(sum([abs(x1 - x2) ** 2 for x1, x2 in zip(points[i], points[j])]))):\n                pair_count += 1\n    return str(pair_count)"
    },
    {
        "number": 4268,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    dists = [list(map(int, line.split())) for line in stdin.splitlines()]\n    num_ints = 0\n    for i, row in enumerate(dists):\n        for j, val in enumerate(row):\n            if val == int(val):\n                num_ints += 1\n    return str(num_ints)\n\nprint(solution(stdin.read().strip()))\n"
    },
    {
        "number": 4268,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    points = [tuple(map(int, stdin.split())) for _ in range(N)]\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if (points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2 == round((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2):\n                count += 1\n    return str(count)"
    },
    {
        "number": 4268,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, D = tuple(map(int, stdin.split(' ')))\n    points = []\n    for _ in range(N):\n        points.append(tuple(map(int, stdin.split(' '))))\n    # points is now a list of N points in D-dimensional space.\n    # print(points)\n    pairs = 0\n    for i, xi in enumerate(points):\n        for j, xj in enumerate(points):\n            if i < j:\n                dist = 0\n                for d in range(D):\n                    dist += (xi[d] - xj[d])**2\n                dist = dist**0.5\n                if int(dist) == dist:\n                    pairs += 1\n    return str(pairs)"
    },
    {
        "number": 4268,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = int(stdin.split()[1])\n\n    l = [map(int, line.split()) for line in stdin.splitlines()[1:]]\n    dists = {}\n    for i in l:\n        for j in l:\n            if i!= j:\n                dist = sum([abs(a-b)**2 for a, b in zip(i, j)])**0.5\n                if dist == int(dist):\n                    if (i, j) in dists:\n                        dists[(i, j)] += 1\n                    else:\n                        dists[(i, j)] = 1\n\n    return str(len(dists))"
    },
    {
        "number": 4269,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s.isdigit():\n        s = int(s)\n        if s < 1000 or s > 9999:\n            return \"Bad\"\n        else:\n            return \"Good\"\n    else:\n        return \"Bad\""
    },
    {
        "number": 4269,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Good\" if \"\".join(sorted(stdin[0:4])) == \"9999\" else \"Bad\""
    },
    {
        "number": 4269,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    password = stdin.rstrip()\n    if password == \"3776\":\n        return \"Good\"\n    else:\n        return \"Bad\""
    },
    {
        "number": 4269,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns whether the given code is hard to enter or not.\"\"\"\n    code = stdin.strip()\n\n    if code[0] == code[1] and code[1] == code[2] and code[2] == code[3]:\n        return 'Bad'\n\n    return 'Good'"
    },
    {
        "number": 4269,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    code = stdin.rstrip()\n    if len(code)!= 4:\n        return \"Bad\"\n    \n    first_digit = code[0]\n    second_digit = code[1]\n    third_digit = code[2]\n    fourth_digit = code[3]\n    \n    if first_digit == second_digit and first_digit == third_digit and first_digit == fourth_digit:\n        return \"Bad\"\n    else:\n        return \"Good\"\n\nassert(solution(\"3776\") == \"Good\")\nassert(solution(\"3333\") == \"Bad\")\nassert(solution(\"3770\") == \"Good\")\nassert(solution(\"3770\") == \"Good\")\nassert(solution(\"3770\") == \"Bad\")\nassert(solution(\"3770\") == \"Bad\")\nassert(solution(\"3770\") == \"Good\")\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4269,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4269,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Good' if is_hard_to_enter(stdin) else 'Bad'\n\ndef"
    },
    {
        "number": 4269,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4269,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    code = stdin.strip()\n    if code.isdigit():\n        if code[0] == code[1] or code[1] == code[2] or code[2] == code[3]:\n            return 'Bad'\n        return 'Good'\n    return 'Bad'"
    },
    {
        "number": 4269,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Good' if stdin[0]!= stdin[1] and stdin[1]!= stdin[2] and stdin[2]!= stdin[3] else 'Bad'"
    },
    {
        "number": 4270,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split(' ')))\n    N = inputs[0]\n    values = inputs[1:]\n    max_value = 0\n    if N == 1:\n        return '%.5f' % values[0]\n    else:\n        for i in range(N - 1):\n            new_value = (values[i] + values[i + 1]) / 2\n            values[i] = new_value\n            values[i + 1] = new_value\n            max_value = max(max_value, new_value)\n    return '%.5f' % max_value"
    },
    {
        "number": 4270,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = [int(x) for x in stdin.split()]\n    return str(max(int((x + y) / 2) for x, y in zip(v, v[1:]) + zip(v, v[:-1])))"
    },
    {
        "number": 4270,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    v = [int(stdin.readline()) for _ in range(int(N))]\n    acc = v[0]\n    for i in range(1, int(N)):\n        acc += v[i]\n    print(acc / 2)"
    },
    {
        "number": 4270,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4270,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ingredients = list(map(float, stdin.readline().split()))\n    acc = 0\n    for i in range(n):\n        acc = (acc + ingredients[i]) / 2\n    return str(acc)\n\nassert(solution('') == '')\nassert(solution('1\\n2') == '2.0')\nassert(solution('2\\n1 2') == '2.5')\nassert(solution('3\\n1 2 3') == '2.5')\nassert(solution('3\\n2 3 1') == '2.5')\nassert(solution('1\\n1 2 3 4') == '2.5')\nassert(solution('1\\n1 1 1 1') == '2.5')\nassert(solution('2\\n1 2') == '1.5')\nassert(solution('1\\n1') == '1.0')\nassert(solution('2\\n1 2') == '1.5')\nassert(solution('2\\n1 2 3') == '1.25')\nassert(solution('2\\n1 2 3 4') == '1.2')\nassert(solution('2\\n1 2 3 4 5') == '1.1')\nassert(solution('2\\n1 2 3 4 5 6') == '1.0')\nassert(solution('2\\n1 2 3 4 5 6 7') == '0.5')\nassert(solution('2\\n1 2 3 4 5 6 7 8') == '0.25')\nassert(solution('3\\n1 2 3 4 5 6 7 8') == '0.125')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9') == '0.0625')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10') == '0.03125')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11') == '0.015625')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12') == '0.0078125')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13') == '0.00512875')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14') == '0.00281275')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '0.00141275')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16') == '0.000712875')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17') == '0.00025675')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18') == '0.000112875')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19') == '0.00006875')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '0.000027128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21') == '0.000012128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22') == '0.0000068128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23') == '0.0000027128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24') == '0.0000012128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25') == '0.000001128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26') == '0.00000068128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27') == '0.00000027128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28') == '0.00000012128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29') == '0.0000001128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30') == '0.000000068128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31') == '0.000000027128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32') == '0.000000012128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33') == '0.00000001128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34') == '0.00000000068128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35') == '0.00000000027128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36') == '0.00000000012128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37') == '0.000000000068128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38') == '0.000000000027128')\nassert(solution('3\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30"
    },
    {
        "number": 4270,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ingredients = list(map(int, stdin.split(\"\\n\")[0].split(\" \")))\n    return max(map(lambda x: sum(x)/2, zip(ingredients, ingredients[1:] + [0])))"
    },
    {
        "number": 4270,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4270,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()\n    N = int(N)\n    \n    v = stdin.strip()\n    v = v.split()\n    v = [int(v[i]) for i in range(N)]\n    \n    return str(v[0]*2+v[1]*2)\n    \n    \n    \n"
    },
    {
        "number": 4270,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline()\n    v = list(map(int, stdin.readline().split()))\n\n    current_max = v[0]\n    for i in range(1, len(v)):\n        current_max = max(current_max, v[i])\n        v[i] = current_max\n\n    return str(current_max)"
    },
    {
        "number": 4270,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ingredients = [int(i) for i in stdin.split(' ')]\n    ingredients.sort()\n    N = len(ingredients)\n    # only takes care of the one ingredient\n    if N == 1:\n        return str(ingredients[0])\n    # two ingredients\n    if N == 2:\n        return str(ingredients[0] + ingredients[1] / 2)\n    # more than 2 ingredients\n    previous = 0\n    for i in range(N):\n        previous = ingredients[i] + previous / 2\n    return str(previous)"
    },
    {
        "number": 4271,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A, B, C = [int(v) for v in stdin.readline().strip().split()]\n    # print(N, A, B, C)\n    # print(N, N + 1)\n    total = 0\n    d = 1\n    while d <= N:\n        total += A + (d - 1) * C\n        d += 1\n    print(total)\n\nimport sys"
    },
    {
        "number": 4271,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()[:-1]\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    c = [int(x) for x in stdin.readline().split()]\n    takahashi = a[0]\n    ans = 0\n    for i in range(1, int(n)):\n        takahashi += a[i]\n        ans += b[i]\n        if i + 1 < int(n):\n            ans += c[i]\n    return str(ans)\n\nimport sys"
    },
    {
        "number": 4271,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *meals = [int(x) for x in stdin.split()]\n    meals.insert(0, 0)\n    curr_points = [0] * (n + 1)\n    for i in range(n):\n        meals[i + 1] += meals[i]\n        curr_points[i + 1] += meals[i]\n        curr_points[i + 2] += meals[i]\n    return str(sum(curr_points[2:]))"
    },
    {
        "number": 4271,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    if not N.isdigit():\n        return 'Error: Input is not a digit!'\n\n    N = int(N)\n\n    if not (2 <= N <= 20):\n        return 'Error: Input is out of bounds!'\n\n    A = stdin.readline().strip().split()\n    if not A[0].isdigit():\n        return 'Error: Input is not a digit!'\n\n    A = [int(x) for x in A]\n\n    if not (1 <= A[0] <= N):\n        return 'Error: Input is out of bounds!'\n\n    B = stdin.readline().strip().split()\n    if not B[0].isdigit():\n        return 'Error: Input is not a digit!'\n\n    B = [int(x) for x in B]\n\n    if not (1 <= B[0] <= 50):\n        return 'Error: Input is out of bounds!'\n\n    C = stdin.readline().strip().split()\n    if not C[0].isdigit():\n        return 'Error: Input is not a digit!'\n\n    C = [int(x) for x in C]\n\n    if not (1 <= C[0] <= 50):\n        return 'Error: Input is out of bounds!'\n\n    satisfaction = 0\n\n    for i in range(0, N):\n        if i == 0:\n            satisfaction += A[i] * B[i]\n        elif i == N - 1:\n            satisfaction += C[i - 1]\n        else:\n            satisfaction += A[i] * B[i]\n\n    return str(satisfaction)\n\n\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    dish_count = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    B = [int(x) for x in stdin.readline().split()]\n    C = [int(x) for x in stdin.readline().split()]\n\n    satisfaction_points = 0\n    for i in range(1, dish_count):\n        satisfaction_points += A[i - 1] * B[i - 1] + C[i - 1]\n\n    return str(satisfaction_points)"
    },
    {
        "number": 4271,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n    C = list(map(int, stdin.readline().split()))\n    ans = 0\n    for i in range(1, n):\n        ans += max(0, min(B[i - 1], C[i - 1]) + A[i])\n    return str(ans)"
    },
    {
        "number": 4271,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n    C = list(map(int, stdin.readline().strip().split()))\n    points = 0\n    for i in range(1, N):\n        points += A[i - 1] + C[i - 1]\n        if i < N - 1:\n            points += B[i]\n    return str(points)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4271,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def _get_inputs() -> Tuple[int, List[int], List[int], List[int]]:\n        def _get_next_input() -> Tuple[int, List[int], List[int], List[int]]:\n            N = int(stdin.readline())\n            dishes = [int(stdin.readline()) for _ in range(N)]\n            S = [int(stdin.readline()) for _ in range(N)]\n            return N, dishes, S\n\n        def _parse_input(input_str: str) -> Tuple[int, List[int], List[int], List[int]]:\n            input_list = [int(s) for s in input_str.split()]\n            return input_list[0], input_list[1:], input_list[N + 1:N + 1 + N], input_list[2 * N + 1:]\n\n        def _parse_inputs(input_str: str) -> Tuple[int, List[int], List[int], List[int]]:\n            N, dishes, S = _parse_input(input_str)\n            return N, dishes, S, [0] * N\n\n        def _get_next_inputs(N: int, dishes: List[int], S: List[int]) -> Tuple[int, List[int], List[int]]:\n            dishes[N - 1] = _get_next_input()\n            return N - 1, dishes, S\n\n        N, dishes, S, used_S = _parse_inputs(stdin.readline())\n        while N > 1:\n            N, dishes, S, used_S = _get_next_inputs(N, dishes, S)\n\n        return N, dishes, S, used_S\n\n    def _calc_satisfaction_points(N: int, A: List[int], S: List[int], used_S: List[bool]) -> int:\n        points = 0\n        for i in range(N):\n            if not used_S[i]:\n                points += A[i] * S[i]\n                used_S[i] = True\n\n        return points\n\n    N, A, S, used_S = _get_inputs()\n    return str(_calc_satisfaction_points(N, A, S, used_S))\n"
    },
    {
        "number": 4271,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4271,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_points() -> int:\n        points = 0\n        for a, b, c in zip(A, B, C):\n            points += max(a, b)\n            points += (a + b) * c\n        return points\n\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    B = [int(x) for x in stdin.readline().split()]\n    C = [int(x) for x in stdin.readline().split()]\n\n    satisfaction_points = get_points()\n    for a, b, c in zip(A, B, C):\n        satisfaction_points += a\n        satisfaction_points += (a + b) * c\n\n    print(satisfaction_points)\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4272,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    c = Counter(s[:3])\n    d = Counter(s[3:])\n    ans = 0\n    for i in range(n - 2):\n        if s[i:i + 3] in c:\n            c[s[i:i + 3]] -= 1\n            if c[s[i:i + 3]] == 0:\n                del c[s[i:i + 3]]\n            ans += 1\n        if s[i + 3:i + 6] in d:\n            d[s[i + 3:i + 6]] -= 1\n            if d[s[i + 3:i + 6]] == 0:\n                del d[s[i + 3:i + 6]]\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4272,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4272,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... ZABCDBABCQ\n   ... ''')\n    2\n    \"\"\"\n    _, s = stdin.split('\\n')\n    return str(s.count(\"AB\"))\n"
    },
    {
        "number": 4272,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin.strip()\n    count = 0\n    for i in range(len(S) - 2):\n        if S[i:i + 3] == \"ABC\":\n            count += 1\n    return count\n\nprint(solution(input()))\n"
    },
    {
        "number": 4272,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 4272,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    return ''.join(\n        [\n            subseq.count('ABC')\n            for subseq in (s[i : i + 3] for i in range(len(s) - 2))\n        ]\n    )"
    },
    {
        "number": 4272,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.replace(\"Z\", \"A\").replace(\"Q\", \"B\").replace(\"C\", \"D\").replace(\"A\", \"Z\")\n    return str(s.lower().count(\"abc\"))\n"
    },
    {
        "number": 4272,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(len(stdin) - 3):\n        if stdin[i:i + 3] == 'ABC':\n            count += 1\n    return count"
    },
    {
        "number": 4272,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin[1:]\n    count = 0\n    for i in range(N-2):\n        if S[i:i+3] == \"ABC\":\n            count += 1\n    return count"
    },
    {
        "number": 4272,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n + 1]\n    return str(s.count('ABC'))"
    },
    {
        "number": 4273,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = list(stdin.readline().strip())\n    s.sort()\n    count = 0\n    for i in range(n):\n        if s[i][0] not in 'AMRC':\n            continue\n        for j in range(i + 1, n):\n            if s[j][0] not in 'AMRC':\n                continue\n            for k in range(j + 1, n):\n                if s[k][0] not in 'AMRC':\n                    continue\n                else:\n                    if s[i][0]!= s[j][0] and s[i][0]!= s[k][0] and s[j][0]!= s[k][0]:\n                        count += 1\n    return str(count)"
    },
    {
        "number": 4273,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here"
    },
    {
        "number": 4273,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N = int(stdin[0])\n    S = stdin[1]\n    choices = [x for x in S if x in \"MAHOCR\"]\n    return str(factorial(len(choices))/factorial(3)/factorial(len(choices)-3))\n\n\"\"\"\n\nimport sys\nfrom math import factorial\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    peeps = [stdin.readline().strip() for _ in range(n)]\n    peeps = sorted(peeps, key=len)\n\n    def is_valid(guess: str) -> bool:\n        if len(guess)!= len(peeps[0]):\n            return False\n\n        for p in peeps:\n            if p[0]!= guess[0]:\n                return False\n        return True\n\n    res = 0\n    for i in range(len(peeps)):\n        for j in range(i + 1, len(peeps)):\n            for k in range(j + 1, len(peeps)):\n                guess = ''.join([peeps[i], peeps[j], peeps[k]])\n                if is_valid(guess):\n                    res += 1\n                    break\n    return str(res)"
    },
    {
        "number": 4273,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    while n > 0:\n        name = stdin.readline().strip()\n        print(\n            nCr(n, 3)\n        )  # this should solve the problem in O(n^3) time\n        n -= 1\n    return\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    names = stdin.readline().split()\n    from collections import defaultdict\n    d = defaultdict(int)\n    for name in names:\n        d[name[0]] += 1\n    print(sum(d.values()))\n\n\"\"\"\n\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    print(n)\n\"\"\"\n\nn = int(input())\ns = []\nfor _ in range(n):\n    s.append(input())\n    \ns.sort()\ncount = 0\nfor i in range(n):\n    if s[i].startswith('M'):\n        count += 1\n        print(s[i])\nprint(count)\n"
    },
    {
        "number": 4273,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4273,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    solutions = {}\n    for _ in range(N):\n        name = stdin()\n        if name[0] in \"MARC\":\n            solutions[name] = 1\n        else:\n            solutions[name] = 0\n    solutions = sorted(solutions)\n    result = 0\n    for i in range(len(solutions)):\n        if solutions[i] == 0:\n            continue\n        for j in range(i, len(solutions)):\n            if solutions[j] == 0:\n                continue\n            for k in range(j, len(solutions)):\n                if solutions[k] == 0:\n                    continue\n                if solutions[i] + solutions[j] + solutions[k] == 0:\n                    result += 1\n    return str(result)"
    },
    {
        "number": 4273,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    return str(solution_2(n, s))\n\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == m:\n        print('Yes')\n        return\n    print('No')\n    return\n\nprint(solution(input()))\n\"\"\"\n\nn, m = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4274,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    n, m = list(map(int, stdin.split()))\n\n    takahashi_submits = sum(1 for _ in range(m) if stdin.split()[0])\n    return \"Yes\" if takahashi_submits == m else \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.strip().split(\" \")\n    N = int(N)\n    M = int(M)\n    M = min(N, M)\n    if N == 1:\n        return \"No\"\n    if M == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    n, m = int(stdin[0]), int(stdin[1])\n\n    if m > n:\n        m, n = n, m\n    passed = 0\n    for i in range(m):\n        stdin = stdin[2+i].split(\" \")\n        t, f = int(stdin[0]), int(stdin[1])\n        if t >= f:\n            passed += 1\n\n    if passed == m:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function reads the number of test cases from stdin, and for each one:\n    1. Reads the number of test cases from stdin, and for each one:\n    2. Reads the number of test cases from stdin, and for each one:\n    3. Reads the number of test cases from stdin, and for each one:\n    4. Reads the number of test cases from stdin, and for each one:\n    5. Reads the number of test cases from stdin, and for each one:\n    6. Reads the number of test cases from stdin, and for each one:\n    7. Reads the number of test cases from stdin, and for each one:\n    8. Reads the number of test cases from stdin, and for each one:\n    9. Reads the number of test cases from stdin, and for each one:\n    10. Reads the number of test cases from stdin, and for each one:\n\n    \"\"\"\n    N, M = map(int, stdin.strip().split())\n    for _ in range(M):\n        N, M = map(int, stdin.strip().split())\n        if N == M:\n            print('Yes')\n        else:\n            print('No')"
    },
    {
        "number": 4274,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4274,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M > N:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4274,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n <= 1:\n        return \"No\"\n    if m < n:\n        return \"No\"\n    if n == m:\n        return \"Yes\"\n    if m == n - 1:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N > 0 and M > 0:\n        if M <= N:\n            return \"Yes\"\n        return \"No\"\n    return \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(num) for num in stdin.strip().split(' ')]\n    if m == 0 or m > n:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return Yes if the string S is coffee-like, otherwise return No.\n\n    >>> solution('sippuu')\n    'Yes'\n    >>> solution('bbbc')\n    'No'\n    \"\"\"\n    if stdin[2] == stdin[4] and stdin[5] == stdin[6]:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return \"Yes\" if s[2] == s[3] == s[4] == s[5] else \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[2] == s[3] and s[4] == s[5]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s[0:3] + s[3:5] + s[5:7]\n    if s[3] == s[4] and s[5] == s[6]:\n        return 'Yes'\n    else:\n        return 'No'\n\nassert(solution('sippuu') == 'Yes')\nassert(solution('sip') == 'No')\n"
    },
    {
        "number": 4275,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split(\"\\n\")[0]\n    if string[2] == string[3] and string[4] == string[5]:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return "
    },
    {
        "number": 4275,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[2] == s[3] and s[4] == s[5]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if 3 <= len(stdin) <= 6 and stdin[2] == stdin[3] and stdin[4] == stdin[5] else \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[2] == s[3] and s[4] == s[5]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return \"Yes\" if s[2] == s[4] and s[5] == s[6] else \"No\""
    },
    {
        "number": 4276,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4276,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T, N = map(int, stdin.split())\n    c, t = [], []\n    for _ in range(N):\n        c_i, t_i = map(int, stdin.split())\n        c.append(c_i)\n        t.append(t_i)\n    min_cost = c[0]\n    for i in range(1, N):\n        if min_cost > c[i]:\n            min_cost = c[i]\n    return str(min_cost)"
    },
    {
        "number": 4276,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4276,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\n\"\"\"\nfor the given input:\n\nT = 70\nc_1 = 7\nt_1 = 60\nc_2 = 1\nt_2 = 80\n\n- the first route takes him home at cost 7.\n- the second route takes longer than time T = 70.\n- the third route gets him home at cost 4.\nThus, the cost 4 of the third route is the minimum.\n\nTLE\n\nfor the given input:\n\nT = 70\nc_1 = 7\nt_1 = 60\nc_2 = 1\nt_2 = 80\n\n- the first route takes him home at cost 7.\n- the second route takes longer than time T = 70.\n- the third route takes him home at cost 4.\nThus, the cost 4 of the third route is the minimum.\n\n\"\"\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Find the smallest cost of a route that takes not longer than time T.\n    The first argument is the standard input which is a string.\n    It contains the time T, the number of routes, and a sequence of routes,\n    in the format c_i t_i.\n    '''\n    N, T = map(int, stdin.split())\n    costs = [int(v) for v in stdin.strip().split()]\n\n    # Let the cost of the route be c and time be t, then the cost of the route is the min(c_i, t_i)\n    # We want to calculate the min(c_i, t_i) of the routes, and we have to consider the following scenarios\n    # - t_i > T => no route can get the home\n    # - t_i < T => we can start a new route\n    # - t_i = T => no new route, but we still need to calculate the min(c_i, t_i) of the routes\n    # - t_i > T => we can start a new route and we can calculate the min(c_i, t_i) of the routes\n    # - t_i < T => we can't start a new route, but we can calculate the min(c_i, t_i) of the routes\n    # - t_i = T => we can't start a new route, we can calculate the min(c_i, t_i) of the routes\n    # Since the min(c_i, t_i) for any route is the min(c_i, t_i) if it is strictly greater than T,\n    # we can start a new route only if t_i > T and then we can calculate the min(c_i, t_i) of the routes.\n    # Let the min(c_i, t_i) be the cost of the route, then the cost of the route is the min(c_i, t_i)\n    # Let the min(c_i, t_i) of the route be the cost of the route, then the cost of the route is the min(c_i, t_i)\n    # And the cost of the route is the min(c_i, t_i), then the cost of the route is the min(c_i, t_i).\n    # We can also say that we can always start a new route and then calculate the min(c_i, t_i) of the routes.\n    # This is our greedy algorithm: we always choose the route with the min(c_i, t_i) as the cost of the route.\n    # If the current route has the min(c_i, t_i), then we can add the current route to the current route,\n    # and we can update the min(c_i, t_i) of the current route as the min(min(c_i, t_i), t_i)\n    # Then we can add the current route to the route list, and we update the min(c_i, t_i) of the current route as the min(min(c_i, t_i), t_i)\n    # Finally, we have to calculate the min(c_i, t_i) of the current route as the min(min(c_i, t_i), t_i)\n    # And we also have to update the min(c_i, t_i) of the current route as the min(min(c_i, t_i), t_i)\n\n    # calculate the min(c_i, t_i) of the routes\n    costs.sort()\n    best = min(costs)\n    while costs:\n        c, t = costs.pop(0)\n        if t <= T:\n            costs.append((c, t + c))\n            best = min(best, c)\n\n    return best"
    },
    {
        "number": 4276,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4276,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    routes = [map(int, line.split()) for line in stdin.strip().split('\\n')]\n    min_cost = float('inf')\n    for route in routes:\n        if route[1] <= T:\n            min_cost = min(min_cost, route[0])\n    if min_cost == float('inf'):\n        return 'TLE'\n    return str(min_cost)"
    },
    {
        "number": 4276,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    N = int(stdin.readline())\n    cities = []\n    for _ in range(N):\n        cities.append(tuple(map(int, stdin.readline().split())))\n    cities = sorted(cities, key=lambda c: c[1])\n    costs = [c[0] for c in cities]\n    for i in range(len(cities) - 1, -1, -1):\n        if cities[i][1] <= T:\n            costs[i] -= 1\n            T -= cities[i][1]\n        else:\n            break\n    return str(min(costs))"
    },
    {
        "number": 4276,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    routes = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    routes.sort(key=lambda route: route[1])\n    routes.sort(key=lambda route: route[0])\n    \n    cost = 0\n    route_index = 0\n    for i in range(N):\n        if routes[route_index][1] <= T:\n            T -= routes[route_index][1]\n            cost += routes[route_index][0]\n        else:\n            route_index += 1\n    return cost\n\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.readline().split())\n    A = [int(x) for x in stdin.readline().split()]\n    A.sort()\n    A = [x for x in A if x <= T]\n    for i in range(len(A)):\n        if T % A[i] == 0:\n            return str(T // A[i])\n    else:\n        return 'TLE'"
    },
    {
        "number": 4277,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, a, b = map(int, stdin.split())\n\n    # Compute result\n    print(min(a * n, b * n))"
    },
    {
        "number": 4277,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4277,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(i) for i in stdin.split()]\n\n    if N == 1:\n        return str(A)\n\n    if A == 1:\n        return str(B)\n\n    if B == 1:\n        return str(A)\n\n    if A == B:\n        return str(A * (N - 1))\n\n    if N % 2 == 0:\n        return str(A * (N // 2) + B * (N // 2 - 1))\n    else:\n        return str(A * (N // 2) + B * (N // 2))"
    },
    {
        "number": 4277,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(n) for n in stdin.split()]\n    print(min(N * A, N * B, A * B))"
    },
    {
        "number": 4277,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(' ')]\n    return str(min(n * a, n * b))"
    },
    {
        "number": 4277,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return str(min(A * N, B * N))"
    },
    {
        "number": 4277,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    return str(min(n * a, b))"
    },
    {
        "number": 4277,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(i) for i in stdin.split()]\n    return str(int((B - A) / (N - 1) * (N - 1) + (N - 1) * A))"
    },
    {
        "number": 4277,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n    N A B\n\n    Output:\n    Minimum total travel expense\n    \"\"\"\n    n, a, b = map(int, stdin.split())\n\n    return str(n * a + n * a)\n"
    },
    {
        "number": 4277,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write a program which computes the minimum total travel expense.\n    Input\n    - An integer representing the number of train stations and taxi stations\n    - An integer representing the cost of the train per station\n    - An integer representing the cost of the taxi per station\n    Output\n    - An integer representing the minimum total travel expense\n    '''\n    return\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nassert str(solution('acornistnt\\npeanutbomb\\nconstraint')) == '1\\n'\n\n\"\"\"\n"
    },
    {
        "number": 4278,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    anagrams = [None] * n\n    for i in range(n):\n        anagrams[i] = countAnagrams(strings[i])\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if anagrams[i] == anagrams[j]:\n                count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = [stdin.split()[i] for i in range(N)]\n    return '\\n'.join(str(i+1) for i, word in enumerate(s) if sorted(word) == sorted(word[::-1]))"
    },
    {
        "number": 4278,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.rstrip().split(\"\\n\")\n    strings = [string.strip() for string in strings]\n    strings = [string.replace(\" \", \"\") for string in strings]\n    strings = [string.lower() for string in strings]\n    n = int(strings[0])\n    strings = strings[1:]\n    return \" \".join([str(count_anagrams(string, strings)) for string in strings])\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    lines = lines[1:]\n    anagrams = [''.join(sorted(line)) for line in lines]\n    pairs = [list(i) for i in itertools.permutations(range(1, n + 1), 2)]\n    result = 0\n    for i, j in pairs:\n        if anagrams[i - 1] == anagrams[j - 1]:\n            result += 1\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4278,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    n = int(n)\n    for i in range(1, n + 1):\n        s = stdin[i]\n        s = list(s)\n        s = sorted(s)\n        s = ''.join(s)\n        stdout = str(i) +'' + s\n        print(stdout)"
    },
    {
        "number": 4278,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return str(ans)"
    },
    {
        "number": 4278,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4278,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = [stdin[i:i+10] for i in range(0, len(stdin), 10)]\n    for i in range(N):\n        for j in range(i, N):\n            if sorted(s[i]) == sorted(s[j]):\n                print(1)\n                return\n    print(0)\n    return"
    },
    {
        "number": 4278,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    s = stdin[1:]\n    pairs = 0\n    # O(n) solution\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if sorted(s[i]) == sorted(s[j]):\n                pairs += 1\n    return str(pairs)\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n    \n'''\n"
    },
    {
        "number": 4279,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4279,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    result = []\n    for _ in range(q):\n        k = int(stdin.readline())\n        s = ''.join(str(k - 1) * (k // 10)) + str(k % 10)\n        result.append(s[k])\n    return ''.join(result)\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4279,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4279,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4279,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4279,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nfrom itertools import islice\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = int(lines[0].split()[0]), int(lines[0].split()[1])\n\n    if n < 2 or n > 200000 or k < 0 or k > n - 1:\n        raise ValueError('Incorrect input')\n\n    roads = []\n    for i in range(1, n):\n        roads.append([int(x) for x in lines[i].split()])\n\n    return str(solution_naive(roads, k))\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    data = [int(x) for x in stdin.strip().split()]\n    print(solution2(n, k, data))\n\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n, k), *_ = map(int, stdin.split())\n    roads = list(\n        (int(x), int(y)) for x, y in (map(int, line.split()) for line in stdin.splitlines()[1:])\n    )\n    answers = {0: []}\n    for start, end in roads:\n        for company in answers[start]:\n            if end not in answers:\n                answers[end] = []\n            answers[end].append(company)\n        if end not in answers:\n            answers[end] = []\n        answers[end].append(len(answers))\n    not_good = {i for i in range(1, n) if len(answers[i]) > k}\n    n_not_good = len(not_good)\n    r = 0\n    while n_not_good > k:\n        n_not_good = len(not_good)\n        r += 1\n        for company in answers[r]:\n            answers[company].remove(r)\n            if len(answers[company]) > k:\n                not_good.add(company)\n        for company in answers[r]:\n            answers[company].remove(r)\n            if len(answers[company]) > k:\n                not_good.add(company)\n    if n_not_good <= k:\n        return str(r)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4280,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n    roads = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    return solve(n, k, roads)\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    assert 2 <= n <= 200000\n    assert 0 <= k <= n - 1\n    cities = [int(line) for line in stdin.split()]\n\n    cnts = [0] * n\n    for i in range(1, n):\n        cnts[i] = cnts[i - 1] + abs(cities[i] - cities[i - 1])\n    roads = []\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if cnts[i] <= k and cnts[j] <= k:\n                roads.append([cities[i], cities[j]])\n    roads = sorted(roads)\n    ret = [0] * len(roads)\n    i = 0\n    j = 0\n    cnt = 0\n    while i < len(roads) and j < len(roads):\n        if roads[i][0] == roads[j][1]:\n            j += 1\n            if j >= len(roads):\n                break\n        elif roads[i][0] < roads[j][1]:\n            ret[cnt] = roads[i][0]\n            i += 1\n            if i >= len(roads):\n                break\n            cnt += 1\n        else:\n            ret[cnt] = roads[j][1]\n            j += 1\n            if j >= len(roads):\n                break\n            cnt += 1\n    ret[-1] = roads[i][1] if i < len(roads) else roads[j][1]\n    return''.join(map(str, ret))\n"
    },
    {
        "number": 4280,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    def good_cities(n, k):\n        cities = set()\n        for i in range(n):\n            for j in range(i + 1, n):\n                if (i, j) not in cities:\n                    cities.add((i, j))\n\n                    if len(cities) > k:\n                        return False\n\n        return True\n\n    def company_roads(n, k):\n        roads = set()\n        for i in range(n - 1):\n            x, y = map(int, stdin.split())\n            roads.add((x, y))\n            roads.add((y, x))\n\n            if len(roads) > k:\n                return False\n\n        return True\n\n    cities_count = n - 1\n    roads_count = n - 1\n\n    for i in range(n - 1):\n        roads_count -= company_roads(n, k)\n        if roads_count == 0:\n            break\n        cities_count -= good_cities(n, k)\n\n        if cities_count == 0:\n            break\n\n    return str(roads_count) if roads_count else '0'\n\nimport sys"
    },
    {
        "number": 4280,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.strip().split(' ')]\n    roads = [None] * n\n    for _ in range(n - 1):\n        roads[int(stdin.readline().strip()) - 1] = int(stdin.readline().strip()) - 1\n    c = 1\n    result = [0] * n\n    for i in range(n):\n        if result[i] == 0 and result.count(0) < k:\n            result[roads[i]] = c\n            c += 1\n    result = [str(i + 1) for i in result]\n    return''.join(result)"
    },
    {
        "number": 4280,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k >= n - 1:\n        return str(0)\n    return str(solve(n, k))\n\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4281,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n\n_author_ = 'jake'\n_project_ = 'leetcode'\nclass Solution:\n    def minmax(self, x, y, n):\n        \"\"\"\n        :param x: list of integers\n        :param y: list of integers\n        :param n: integer\n        :return: integer\n        \"\"\"\n        houses = [0] * n\n        for i in range(n):\n            houses[x[i]] += 1\n            houses[y[i]] -= 1\n        return max(houses), min(houses)\n"
    },
    {
        "number": 4281,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4281,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split(\" \")))\n    houses = set([])\n    max_houses = 0\n    for i in range(n):\n        houses.add(x[i])\n        houses.add(x[i]+1)\n        houses.add(x[i]-1)\n        max_houses = max(max_houses, len(houses))\n    return f\"{max_houses} {len(houses) - max_houses}\"\n\n\n\nimport sys\n\nn = int(sys.stdin.readline())\nx = [int(s) for s in sys.stdin.readline().split()]\n\nhouses = [0] * n\n\nfor i in range(n):\n    houses[i] = houses[i - 1] + abs(x[i] - x[i - 1])\n    if x[i] - x[i - 1] < 0:\n        houses[i] -= 1\n\nprint(f\"{max(houses)} {len(houses) - max(houses)}\")\n"
    },
    {
        "number": 4281,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nm = int(stdin.readline().strip())\nx = list(map(int, stdin.readline().strip().split()))\nprint(solution(m, x))\n\n\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    X = tuple(int(x) for x in stdin.split())\n\n    # max_houses = 0\n    # for i in range(N):\n    #     houses = [0] * (N + 2)\n    #     for j in range(i + 1, N):\n    #         if houses[X[j]]:\n    #             houses[X[j]] += 1\n    #         else:\n    #             houses[X[j]] += 1\n    #             houses[X[i] + 1] += 1\n    #             houses[X[i] - 1] += 1\n    #\n    #     if houses[-1]:\n    #         houses[-1] += 1\n    #     if houses[0]:\n    #         houses[0] += 1\n    #\n    #     max_houses = max(max_houses, max(houses))\n    #\n    # return''.join(map(str, (max_houses, min(max_houses, N))))\n\n    res = (0, 0)\n    for i in range(N):\n        res = max(res, (res[0] + 1, min(res[1] + 1, res[0])))\n        res = max(res, (res[1] - 1, min(res[0] - 1, res[1])))\n\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4281,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    houses = [int(stdin.readline().strip()) for _ in range(n)]\n    return \" \".join([str(min(houses))] + [str(max(houses))])\n"
    },
    {
        "number": 4281,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2 4 4\n   ... \n   ... ''')\n    '2 4'\n    \"\"\"\n    n = int(stdin.readline())\n    x = sorted(map(int, stdin.readline().split()))\n    s = {x[0]}\n    max_houses = 0\n    for i in range(1, len(x)):\n        if x[i] - x[i - 1] == 1:\n            s.add(x[i])\n        if len(s) > max_houses:\n            max_houses = len(s)\n    return str(max_houses) +'' + str(max(max_houses, len(x) - max_houses))\n"
    },
    {
        "number": 4281,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(n) for n in stdin.split()]\n    f = [0] * n\n    for i in range(n):\n        f[i] = [f[j] for j in range(n) if x[i] > x[j] and i!= j]\n    return str(len(set(f))) +'' + str(max(f[i]) + 1)\nprint(solution(input()))\n"
    },
    {
        "number": 4281,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nFor the minimum number of occupied houses friends can go to $[0, 1, 2, 3]$ or to $[2, 3, 4, 5]$.\ndef"
    },
    {
        "number": 4282,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #input\n    n = stdin.readline().strip()\n    a = [[int(i) for i in stdin.readline().strip().split()] for _ in range(int(n))]\n\n    #compute\n    ans = []\n    for i in range(int(n)):\n        for j in range(1, len(a[i])):\n            if a[i][0]!= i+1:\n                ans.append(a[i][0])\n                break\n        ans.append(a[i][1])\n        \n    #output\n    print(*ans)"
    },
    {
        "number": 4282,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 4282,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import permutations\n    n = int(stdin)\n    if n == 0:\n        return ''\n    elif n == 1:\n        return str(1)\n    elif n == 2:\n        return '1 2'\n    a = [int(x) for x in stdin.split()]\n    a_first = [x for x in a if x!= a[0]]\n    a_second = [x for x in a if x!= a[1]]\n    a_first.sort()\n    a_second.sort()\n    p = permutations(a)\n    for i in p:\n        if i[0] == a_first[0] and i[1] == a_second[0]:\n            return''.join([str(x) for x in i])\n    return ''"
    },
    {
        "number": 4282,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    result = []\n    left = 0\n    right = n - 1\n    while left < right:\n        result.append(arr[left])\n        result.append(arr[right])\n        left += 1\n        right -= 1\n\n    return''.join(map(str, result))\n\n\nprint(solution(''))\n\n\"\"\""
    },
    {
        "number": 4282,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 1:\n        return str(1)\n    elif n == 2:\n        return \"1\" * 2\n    else:\n        perms = [str(i) for i in range(1, n + 1)]\n        for line in stdin:\n            i, j = map(int, line.split())\n            if i > j:\n                i, j = j, i\n            i, j = i - 1, j - 1\n            perms[i], perms[j] = perms[j], perms[i]\n        return \" \".join(perms)\n\nassert solution(StringIO(\"5\\n5\\n5\")) == \"3 2 4 1 5\"\nassert solution(StringIO(\"3\\n3\\n3\")) == \"3 1 2\"\nassert solution(StringIO(\"1\\n2\\n1\")) == \"3 1 2\"\nassert solution(StringIO(\"2\\n2\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n1\\n2\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n2\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n3\\n1\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n2\\n1\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n3\\n2\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n3\\n3\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n2\\n3\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n2\\n1\\n1\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n3\\n1\\n1\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n2\\n2\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n2\\n2\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n1\\n2\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n2\\n1\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n3\\n1\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n3\\n2\\n1\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n3\\n2\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n3\\n3\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n3\\n3\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n1\\n2\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n2\\n1\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n3\\n1\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n3\\n2\\n1\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n3\\n2\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n3\\n3\\n1\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n1\\n3\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n2\\n1\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n2\\n3\\n1\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n2\\n1\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n3\\n1\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n3\\n2\\n1\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n3\\n2\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n3\\n3\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n3\\n3\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n1\\n2\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n3\\n1\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n3\\n2\\n1\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n3\\n2\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n3\\n3\\n1\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n3\\n3\\n1\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n1\\n3\\n2\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n2\\n1\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n2\\n3\\n1\")) == \"1 2 3\"\nassert solution(StringIO(\"1\\n1\\n2\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"2\\n3\\n1\\n3\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n3\\n2\\n1\")) == \"1 2 3\"\nassert solution(StringIO(\"3\\n3\\n2\\n3\")) == \"1 2 3\"\n\n\n-----\n\nP."
    },
    {
        "number": 4282,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    kids = [int(stdin.readline().strip()) for _ in range(int(n))]\n    kids = sorted(kids)\n    kids_perm = [0 for _ in range(n)]\n    for i in range(n):\n        kids_perm[i] = kids[(i + 1) % n]\n    return \" \".join(map(str, kids_perm))\n"
    },
    {
        "number": 4282,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4282,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0] * n\n    for i in range(n):\n        a[i] = int(stdin)\n    a.append(a[0])\n    a.pop(0)\n    result = ''\n    for i in range(len(a)):\n        result += str(a[i])\n        if i < len(a) - 1:\n            result +=''\n    return result"
    },
    {
        "number": 4282,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    res = [0] * n\n    for _ in range(n):\n        a = [int(x) for x in stdin.readline().strip().split(' ')]\n        res[a[0]-1] = a[1]\n    return''.join(map(str, res))"
    },
    {
        "number": 4282,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    return''.join(map(str, a[::-1]))\n\nassert solution('''5''') == '''3 2 4 1 5 '''\nassert solution('''3''') == '''3 1 2'''\nassert solution('''3 4 3 2 1''') == '''3 1 2 4 3'''\nassert solution('''4''') == '''1 2 3 4'''\nassert solution('''4 4 1 3 2''') == '''1 2 3 4 4'''\nassert solution('''7''') == '''1 2 3 4 5 6 7'''\nassert solution('''7 7 4 6 5 2 1''') == '''1 2 3 4 5 6 7 7'''\nassert solution('''10''') == '''1 2 3 4 5 6 7 8 9 10'''\nassert solution('''10 10 1 2 3 4 5 6 7 8 9''') == '''1 2 3 4 5 6 7 8 9 10 10'''\nassert solution('''10 10 10 1 2 3 4 5 6 7 8 9''') == '''1 2 3 4 5 6 7 8 9 10 10 10'''\nassert solution('''10 10 10 1 2 3 4 5 6 7 8 9 10 11''') == '''1 2 3 4 5 6 7 8 9 10 10 11 11 12'''\nassert solution('''100''') == '''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'''\nassert solution('''100 100 99 98 97 96 95 94 93 92 91 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 59 58 57 56 55 54 53 52 51 50 49 48 47 46 44 43 41 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1''') == '''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 99 100'''\nassert solution('''10000''') == '''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 99 100'''\nassert solution('''10000 10000 9998 9987 9699 9699''') == '''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 99 100'''\nassert solution('''10000 10000 9998 9987 9699 9699 9998''') == '''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 99 100'''\nassert solution('''10000 10000 9998 9987 9699 9699 9998 9999''') == '''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 99 100'''\nassert solution('''100000''') == '''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 99 100'''\nassert solution('''100000 100000 99 9998 99998''') == '''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46"
    },
    {
        "number": 4283,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the maximum possible number of students in a balanced team.\n    \"\"\"\n    pass"
    },
    {
        "number": 4283,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4283,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #n = int(stdin.readline())\n    #stdin = stdin.readline()\n    n = int(stdin.readline())\n    if n == 1:\n        return str(1)\n    stdin = stdin.readline().split()\n    stdin = [int(x) for x in stdin]\n    if n == 2:\n        return str(max(stdin))\n    max_skill = max(stdin)\n    diff = max_skill - stdin[0]\n    for i in range(1, n):\n        if stdin[i] - stdin[0] > diff:\n            max_skill = stdin[i]\n            diff = max_skill - stdin[i]\n    if diff > 5:\n        return str(0)\n    return str(max(stdin))\n"
    },
    {
        "number": 4283,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline().strip())\n    skill = stdin.readline().strip().split()\n\n    # pylint: disable=consider-using-enumerate\n    max_skill = max(skill)\n    skill.remove(max_skill)\n\n    for i in range(len(skill)):\n        skill[i] = abs(skill[i] - max_skill)\n\n    return len(skill)"
    },
    {
        "number": 4283,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    skill = [int(x) for x in stdin.readline().split()]\n    skill.sort()\n    arr = [skill[0]]\n    for i in range(1, n):\n        if skill[i] - arr[-1] < 5:\n            arr.append(skill[i])\n        else:\n            arr.append(arr[-1] + 5)\n    return str(len(arr))"
    },
    {
        "number": 4283,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return'solution'"
    },
    {
        "number": 4283,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def check_balanced(pair):\n        skill1, skill2 = pair\n        return abs(skill1 - skill2) <= 5\n\n    skills = [int(x) for x in stdin.split()]\n    skills.sort()\n\n    balanced_pairs = filter(check_balanced, itertools.combinations(skills, 2))\n    print(max(map(len, balanced_pairs)))\n"
    },
    {
        "number": 4283,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4283,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    result = 0\n    for i, j in d.items():\n        if j > result:\n            result = j\n    return str(result)"
    },
    {
        "number": 4283,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4284,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = n - 1\n    arr = stdin.strip().split('\\n')\n    arr = [int(x) for x in arr]\n    arr = arr[1:]\n    res = []\n    for i in range(len(arr)):\n        k, n, a, b = arr[i]\n        if k <= 0:\n            res.append(1)\n        elif k > n:\n            res.append(k)\n        else:\n            left = max(0, k - a)\n            right = n - max(0, k - b)\n            if left == right:\n                res.append(left)\n            else:\n                res.append(min(left, right))\n    return '\\n'.join(str(x) for x in res)"
    },
    {
        "number": 4284,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    a, b, c, d = map(int, stdin[1].split())\n    l = []\n    for i in range(n):\n        k, n, a, b = map(int, stdin[i + 2].split())\n        s = a * k - d\n        if s > 0:\n            if s > b:\n                l.append(k)\n            else:\n                l.append(s // b)\n        elif s < 0:\n            if s <= a:\n                l.append(0)\n            else:\n                l.append(s // a)\n        else:\n            l.append(0)\n    s = 0\n    for i in l:\n        s += i\n    if s > 0:\n        print(s)\n    else:\n        print(-1)"
    },
    {
        "number": 4284,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    result = ''\n    def test(a,b,c,d):\n        nonlocal n, result\n        if n == 0:\n            return\n        s = 0\n        if a == 1:\n            s += 1\n        if c == 1:\n            s += 1\n        if b == 1:\n            s += 1\n        if d == 1:\n            s += 1\n        if s > n:\n            result = '-1'\n        else:\n            result = str(s)\n    for _ in range(n):\n        k, n, a, b = [int(x) for x in stdin.split()]\n        test(a, b, k, n - k)\n    return result\nprint(solution(input()))\n"
    },
    {
        "number": 4284,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        k, n, a, b = map(int, stdin.split())\n        charge = k\n        moves = 0\n        while charge >= a:\n            moves += 1\n            charge -= a\n        while charge >= b:\n            charge -= b\n            moves += 1\n        if moves >= n:\n            print(moves)\n        else:\n            print(-1)\n"
    },
    {
        "number": 4284,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        K, N, A, B = [int(s) for s in stdin.readline().split(\" \")]\n        print(-1 if K > A * N or K > B * N else K // N)\nsolution(stdin)\n"
    },
    {
        "number": 4284,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    for _ in range(int(stdin)):\n        k, n, a, b = map(int, stdin.split())\n        if n % a == 0:\n            ans.append(n//a)\n        elif n % b == 0:\n            ans.append(n//b)\n        else:\n            ans.append(-1)\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4284,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.strip().split())\n    if k <= a:\n        return \"0\"\n    if k <= b:\n        return str(k)\n    return \"-1\""
    },
    {
        "number": 4284,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4284,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return ''\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n\n    def max_type_turn(k: int, n: int, a: int, b: int) -> int:\n        \"\"\"Return max number of turns for a game\n        >>> max_type_turn(15, 5, 3, 2)\n        4\n        \"\"\"\n        if a == b == 1:\n            return n\n        if n == 0:\n            return -1\n        if k <= a:\n            return n\n        if k <= b:\n            return n + 1\n        else:\n            return -1\n\n    for _ in range(T):\n        k, n, a, b = map(int, stdin.readline().strip().split())\n        print(max_type_turn(k, n, a, b))\n"
    },
    {
        "number": 4285,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    a, b, c = s.count('a'), s.count('b'), s.count('c')\n    return (a + b + c - 1) * (a * b * c) % (10 ** 9 + 7)"
    },
    {
        "number": 4285,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read first line\n    line = stdin.readline().strip()\n    n = int(line)\n\n    # Read second line\n    s = stdin.readline().strip()\n\n    modulo = pow(10, 9) + 7\n    res = 0\n    for i in range(1, n):\n        if s[i] == '?':\n            res += pow(3, n - i)\n    print(res % modulo)"
    },
    {
        "number": 4285,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Count number of all \"abc\" in all strings with replaced question marks.\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # The number of possible substrings can be computed using the Catalan number.\n    # The Catalan number is the sum of all binomial coefficients of n terms,\n    # where n is the number of non-negative terms in the binomial coefficient of n,\n    # i.e., n! / (n + 1)! * (n + 2)! *... * (n + k)!\n    n = int(stdin)\n    catalan = catalan_number(n)\n    # The answer is n! / (n + 1)! * (n + 2)! *... * (n + k)! * (n + k + 1)! *... * (n + k + 2)!\n    return str(catalan % 10 ** 9 + 7)\n\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4285,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.count(\"?\")\n    print((3**a)*(2**(n-a-1))%(10**9 + 7))"
    },
    {
        "number": 4285,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    s = s.replace(\"?\", \"a\")\n    s = s.replace(\"?\", \"b\")\n    s = s.replace(\"?\", \"c\")\n    return s\n"
    },
    {
        "number": 4285,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4286,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n    b = [int(s) for s in stdin.split()]\n    # read next line\n    for _ in range(m):\n        x, y, w = [int(s) for s in stdin.split()]\n        a[x - 1] += w\n        a[y - 1] += w\n    # sort\n    a.sort()\n    # initialize\n    coins = 0\n    index = 0\n    for i in range(n):\n        if a[i] < b[i]:\n            coins += b[i] - a[i]\n            a[i] = b[i]\n    return str(coins)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4286,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def add_edge(x: int, y: int, cost: int) -> None:\n        \"\"\"Add edge to graph\"\"\"\n        nonlocal cost_graph, adjacency_list\n\n        if x == y:\n            return\n\n        if x not in cost_graph:\n            cost_graph[x] = [0, []]\n        if y not in cost_graph:\n            cost_graph[y] = [0, []]\n\n        cost_graph[x][0] += cost\n        cost_graph[y][0] += cost\n\n        adjacency_list[x].append(y)\n        adjacency_list[y].append(x)\n\n    def add_cost(x: int, y: int, cost: int) -> None:\n        \"\"\"Add edge with cost to graph\"\"\"\n        nonlocal cost_graph, adjacency_list\n\n        if x == y:\n            return\n\n        if x not in cost_graph:\n            cost_graph[x] = [0, []]\n        if y not in cost_graph:\n            cost_graph[y] = [0, []]\n\n        cost_graph[x][0] += cost\n        cost_graph[y][0] += cost\n\n        adjacency_list[x].append(y)\n        adjacency_list[y].append(x)\n\n    cost_graph = {}\n    adjacency_list = {}\n\n    n, m = [int(x) for x in stdin.split()]\n\n    for _ in range(m):\n        x, y, w = [int(x) for x in stdin.split()]\n        add_edge(x, y, w)\n        add_cost(x, y, w)\n\n    cost_graph = {k: v for k, v in cost_graph.items() if v[0] > 0}\n    adjacency_list = {k: list(set(v)) for k, v in adjacency_list.items()}\n\n    # get connected components\n    connected_components = []\n    visited = set()\n    for start in cost_graph.keys():\n        if start in visited:\n            continue\n        component = [start]\n        visited.add(start)\n        stack = [start]\n\n        while stack:\n            v = stack.pop()\n\n            for n in adjacency_list[v]:\n                if n in visited:\n                    continue\n                visited.add(n)\n                component.append(n)\n                stack.append(n)\n\n        connected_components.append(component)\n\n    return str(len(connected_components))\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4286,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n\n    a = [int(x) for x in stdin.split()]\n\n    g = [[] for x in range(n)]\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            g[i].append((a[i] + a[j], i, j))\n            g[j].append((a[i] + a[j], i, j))\n\n    visited = [False for x in range(n)]\n\n    def dfs(i, visited, path):\n        if visited[i]:\n            return 0\n\n        visited[i] = True\n\n        for g_i, u, v in g[i]:\n            if not visited[v]:\n                path += g_i\n                ret = dfs(v, visited, path)\n\n                if ret!= 0:\n                    return ret\n\n                path -= g_i\n\n        return 0\n\n    visited = [False for x in range(n)]\n    return dfs(0, visited, 0)\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    e = [[int(x) for x in stdin.split()] for _ in range(m)]\n    dp = [0] + [float('inf')] * n\n    for _ in range(n - 1):\n        for x, y, w in e:\n            dp[x] = min(dp[x], dp[y] + w)\n    return str(min(dp))\n\nsolution(input())\n"
    },
    {
        "number": 4286,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split()))\n    a = tuple(map(int, stdin.split()))\n    \n    g = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = tuple(map(int, stdin.split()))\n        g[u - 1].append((v - 1, w))\n        g[v - 1].append((u - 1, w))\n    \n    dist = [float('inf') for _ in range(n)]\n    dist[0] = 0\n    heap = [(0, 0)]\n    while heap:\n        d, v = heappop(heap)\n        if dist[v] < d:\n            continue\n        for nv, nd in g[v]:\n            if dist[nv] > nd + d:\n                dist[nv] = nd + d\n                heappush(heap, (dist[nv], nv))\n    \n    return dist[-1]\n\nprint(solution(stdin.read()))\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from sys import stdin,stdout\n    from math import inf\n    n,m = map(int,stdin.readline().split())\n    a = [int(stdin.readline().strip()) for _ in range(n)]\n    graph = [{} for _ in range(n)]\n    for _ in range(m):\n        x,y,w = map(int,stdin.readline().split())\n        graph[x-1][y-1] = w\n        graph[y-1][x-1] = w\n    for i in range(n):\n        graph[i][i] = 0\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if i!= j:\n                    graph[i][j] = min(graph[i][j],graph[i][k] + graph[k][j])\n    ans = inf\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if graph[i][j] < ans:\n                    ans = graph[i][j]\n    stdout.write(str(ans))\nsolution(stdin.read())\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    edges = [[int(i) for i in stdin.split()] for _ in range(m)]\n    costs = [[] for _ in range(n)]\n    for (a, b, c) in edges:\n        costs[a-1].append((b-1, c))\n        costs[b-1].append((a-1, c))\n    all_costs = [sum(i) for i in costs]\n    for i in range(len(costs)):\n        costs[i].sort(key=lambda x: x[1])\n    dp = [0] * n\n    for i in range(n):\n        curr_cost = all_costs[i]\n        for (j, k) in costs[i]:\n            if j!= i:\n                dp[i] = max(dp[i], dp[j] + k + curr_cost)\n    return dp[n-1]\n\n\nassert(solution(input) == 5)\n"
    },
    {
        "number": 4286,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Calculate the minimum number of coins to make the graph connected.\n    '''\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    l = [int(x) for x in stdin.strip().split(' ')]\n    m = [int(x) for x in stdin.strip().split(' ')]\n    if m[0] == 0:\n        return 0\n    l.sort()\n    m.sort()\n    d = {}\n    for i, v in enumerate(l):\n        d[v] = i\n    res = 0\n    for i, v in enumerate(m):\n        res += v * (n - d[v])\n        res += v * m[i]\n    return res"
    },
    {
        "number": 4286,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    numbers = [int(x) for x in stdin.split()]\n    while m > 0:\n        a, b, c = [int(x) for x in stdin.split()]\n        numbers.append(a + b)\n        m -= 1\n    return sum(numbers)\n\n-----\n\n-----\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n\n------\n"
    },
    {
        "number": 4287,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = stdin.strip().split(' ')\n    a, n, m = int(a), int(n), int(m)\n\n    segments = []\n    for i in range(n):\n        l, r = stdin.strip().split(' ')\n        l, r = int(l), int(r)\n        if l > r:\n            l, r = r, l\n        segments.append([l, r])\n\n    umbrellas = []\n    for i in range(m):\n        x, p = stdin.strip().split(' ')\n        x, p = int(x), int(p)\n        umbrellas.append([x, p])\n\n    min_fatigue = -1\n    for i in range(n):\n        left = segments[i][0]\n        right = segments[i][1]\n        for j in range(m):\n            if left <= umbrellas[j][0] <= right:\n                curr_fatigue = 0\n                if i!= 0:\n                    curr_fatigue += umbrellas[j][1]\n                if j!= 0:\n                    curr_fatigue += segments[i - 1][1] - segments[i - 1][0]\n                if j!= m - 1:\n                    curr_fatigue += segments[i][1] - segments[i][0]\n                min_fatigue = max(min_fatigue, curr_fatigue)\n\n    return str(min_fatigue)"
    },
    {
        "number": 4287,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4287,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = list(map(int, stdin.split()))\n    polycarp = Polycarp(a, n, m)\n    polycarp.move()\n    return str(polycarp.fatigue)\n\n\nclass Polycarp:\n    def __init__(self, a: int, n: int, m: int) -> None:\n        self.a = a\n        self.n = n\n        self.m = m\n        self.fatigue = 0\n        self.polycarp_start_x = 0\n        self.polycarp_end_x = a\n        self.umbrellas = [Umbrella(self.m, i) for i in range(n)]\n        self.umbrella_index_to_be_thrown = None\n        self.umbrella_index_in_use = None\n        self.polycarp_travelled = 0\n        self.polycarp_fatigue = 0\n        self.polycarp_has_put_umbrella_at = []\n\n    def move(self) -> None:\n        # TODO implement me\n        # raise NotImplementedError()\n        self.polycarp_end_x = self.polycarp_start_x + (self.polycarp_end_x - self.polycarp_start_x) // 2\n        self.fatigue += self.polycarp_fatigue\n        self.polycarp_travelled += 1\n        # print(self.polycarp_travelled)\n\n        if self.polycarp_travelled % 2 == 0:\n            if self.polycarp_start_x == 0:\n                self.polycarp_fatigue = 0\n                self.polycarp_has_put_umbrella_at.append(0)\n            else:\n                self.polycarp_fatigue = self.polycarp_fatigue + self.umbrella_index_to_be_thrown.weight\n                self.polycarp_fatigue = self.polycarp_fatigue + self.umbrella_index_in_use.weight\n                self.polycarp_has_put_umbrella_at.append(self.umbrella_index_to_be_thrown.id)\n                self.polycarp_has_put_umbrella_at.append(self.umbrella_index_in_use.id)\n                self.polycarp_fatigue = self.polycarp_fatigue - self.umbrella_index_in_use.weight\n                self.umbrella_index_in_use = None\n            self.polycarp_start_x = self.polycarp_start_x + 1\n        else:\n            if self.polycarp_end_x == self.a:\n                self.polycarp_fatigue = 0\n                self.polycarp_has_put_umbrella_at.append(self.a)\n            else:\n                self.polycarp_fatigue = self.polycarp_fatigue + self.umbrella_index_to_be_thrown.weight\n                self.polycarp_fatigue = self.polycarp_fatigue + self.umbrella_index_in_use.weight\n                self.polycarp_fatigue = self.polycarp_fatigue - self.umbrella_index_in_use.weight\n                self.polycarp_fatigue = self.polycarp_fatigue - self.umbrella_index_to_be_thrown.weight\n                self.umbrella_index_to_be_thrown = None\n                self.umbrella_index_in_use = None\n            self.polycarp_end_x = self.polycarp_end_x - 1\n        self.polycarp_travelled += 1\n        # print(self.polycarp_travelled)\n\n        # print(self.polycarp_fatigue)\n\n\nclass Umbrella:\n    def __init__(self, m: int, id: int) -> None:\n        self.m = m\n        self.id = id\n        self.weight = 0\n        self.position = None\n\n    def throw(self, current_position: int) -> None:\n        self.weight = self.weight + 1\n        self.position = current_position\n"
    },
    {
        "number": 4287,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, a, n, m = (int(x) for x in stdin.split())\n    L = sorted([(int(x) for x in stdin.split()) for _ in range(n)], key=lambda x: x[0])\n    mw = [int(x) for x in stdin.split()]\n    \n    min_fatigue = INF\n    for _ in range(m):\n        i, p = [int(x) for x in stdin.split()]\n        min_fatigue = min(min_fatigue, total_fatigue(a, i, p, L))\n    return str(min_fatigue)\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m, a = [int(x) for x in stdin.split()]\n    while True:\n        if n == 0 and m == 0:\n            return \"0\"\n        c = Counter()\n        for _ in range(n):\n            l, r = [int(x) for x in stdin.split()]\n            if l <= a:\n                c[l] += 1\n            if r <= a:\n                c[r] -= 1\n        ans = 0\n        for k, v in c.items():\n            ans += k * (v + 1)\n        if ans >= m * a:\n            return \"-1\"\n        m -= max(c.values())\n\nimport sys\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = [int(x) for x in stdin.split()]\n    l = []\n    for _ in range(n):\n        l.append([int(x) for x in stdin.split()])\n    l.sort()\n    A = [0 for _ in range(a + 1)]\n    for i, j in l:\n        A[i] += j\n    for i in range(1, len(A)):\n        A[i] += A[i - 1]\n    w = 0\n    for i in range(len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if j - i <= m:\n                w = max(w, A[j] - A[i] - j - 1)\n    return str(w) if w >= 0 else \"-\"\n"
    },
    {
        "number": 4287,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (a, n, m) = list(map(int, stdin.split()))\n\n    segments = []\n\n    for _ in range(n):\n        (l, r) = list(map(int, stdin.split()))\n        segments.append((l, r))\n\n    umbrellas = []\n\n    for _ in range(m):\n        (x, p) = list(map(int, stdin.split()))\n        umbrellas.append((x, p))\n\n    # (a, n, m) = (10, 2, 4)\n    # (segments, umbrellas) = (((3, 7), ((8, 10),)), (((0, 10),), ((3, 4), (8, 1)), ((0, 10),)))\n\n    def total_fatigue(x: int, a: int, segments: List[Tuple[int, int]]) -> int:\n        \"\"\"\n        Calculate the total fatigue of Polycarp starting at point x\n        \"\"\"\n        total_fatigue = 0\n\n        for segment in segments:\n            if x <= segment[0]:\n                break\n\n            if segment[0] < x <= segment[1]:\n                total_fatigue += segment[1] - x\n\n            elif x < segment[1] and segment[1] <= segment[0]:\n                total_fatigue += segment[0] - x\n\n        return total_fatigue\n\n    def find_min_fatigue(x: int, a: int, segments: List[Tuple[int, int]], umbrellas: List[Tuple[int, int]]) -> int:\n        \"\"\"\n        Return the minumum total fatigue of Polycarp starting at point x\n        \"\"\"\n        fatigue = total_fatigue(x, a, segments)\n\n        for (x, p) in umbrellas:\n            fatigue += p\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue += total_fatigue(x, a, segments)\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue -= p\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue += total_fatigue(x, a, segments)\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue -= p\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue += total_fatigue(x, a, segments)\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue -= p\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue += total_fatigue(x, a, segments)\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue -= p\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue += total_fatigue(x, a, segments)\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue -= p\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue += total_fatigue(x, a, segments)\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue -= p\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue += total_fatigue(x, a, segments)\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue -= p\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue += total_fatigue(x, a, segments)\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue -= p\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue += total_fatigue(x, a, segments)\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue -= p\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue += total_fatigue(x, a, segments)\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue -= p\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue += total_fatigue(x, a, segments)\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue -= p\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue += total_fatigue(x, a, segments)\n\n            if fatigue < min_fatigue:\n                continue\n\n            fatigue -= p\n\n            "
    },
    {
        "number": 4287,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.strip().split(' '))\n    \n    if n == 0:\n        return '-1'\n    \n    left_to_right_mapping = [a] * n\n    right_to_left_mapping = [a] * n\n    \n    def index_of(array: List[int], value: int) -> int:\n        if array[0] <= value <= array[-1]:\n            return array.index(value)\n        \n        return -1\n    \n    for i in range(n):\n        l, r = map(int, stdin.strip().split(' '))\n        left_to_right_mapping[i] = l\n        right_to_left_mapping[i] = r\n    \n    max_left = max(left_to_right_mapping)\n    max_right = max(right_to_left_mapping)\n    \n    # 0 <= l <= a <= r <= a\n    # l <= x <= r\n    # l <= max_left + 1 <= r <= max_right + 1\n    \n    # max_left + 1 <= r\n    # max_left + 2 <= r <= max_right + 2\n    # max_left + 3 <= r\n    #...\n    \n    # max_left + m < r\n    # max_left + m + 1 <= r <= max_right + m + 1\n    # max_left + m + 2 <= r\n    #...\n    \n    for i in range(n):\n        if max_left + i + 1 > max_right + i + 1:\n            break\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    # max_left + m + 1 <= r <= max_right + m + 1\n    \n    # max_left + m < r <= max_right + m\n    "
    },
    {
        "number": 4287,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split()))\n    a, b, c = list(map(int, stdin.split()))\n    r = []\n    for _ in range(A):\n        r.append(list(map(int, stdin.split())))\n    c1, c2, c3 = [], [], []\n    for i in r:\n        c1.append(i[0])\n        c2.append(i[1])\n    r.sort()\n    r = r[::-1]\n    for i in range(len(r)):\n        c3.append(c2[r[i] - 1] - c1[i])\n    if a - 1 < min(c1):\n        return \"-1\"\n    return sum(c3) + (a - 1 - min(c1)) * (a - 1)"
    },
    {
        "number": 4287,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 4288,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(stdin) for stdin in stdin.split())\n    if a == b or b == c:\n        if a!= b and b!= c and a!= c:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n    else:\n        print(\"Yes\")\n"
    },
    {
        "number": 4288,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, c = stdin.split(' ')\n    if a == b:\n        if a!= c:\n            return 'Yes'\n        else:\n            return 'No'\n    elif a!= c:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4288,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B and A!= C:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4288,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x == y and x!= z:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.strip().split())\n    return \"Yes\" if a == b and b!= c else \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4288,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if a == b and b!= c else \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"Yes\"\n    elif a == b or b == c or a == c:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4288,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    return 'Yes' if data[0] == data[1] and data[1]!= data[2] else 'No'"
    },
    {
        "number": 4288,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if a == b or b == c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4289,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4289,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    data = list(map(int, stdin.readline().strip().split(' ')))\n\n    h, c = data[0], data[1]\n\n    for i in range(2, n+2):\n        if h > 0:\n            h -= data[i] * 0.006\n        else:\n            c += 1\n            h = data[i] * 0.006\n\n    return str(c)"
    },
    {
        "number": 4289,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4289,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, hs = map(int, stdin.split())\n    hs = list(map(int, stdin.split()))\n    count = 0\n    total = sum(hs)\n    for i in range(n):\n        if (a - (total - hs[i])) < (hs[i] - (a - total)):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4289,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A = list(map(int, stdin.split()))\n    H = list(map(int, stdin.split()))\n    H.sort()\n    result = -1\n    for i in range(N):\n        if abs(A - T * (H[i] - H[0]) / (H[N - 1] - H[0])) < abs(A - T * (H[i] - H[N - 1]) / (H[N - 1] - H[0])):\n            result = i\n    return str(result)\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4289,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a, h = map(int, stdin.readline().strip().split())\n\n    c = []\n    for i in range(n):\n        c.append(int(stdin.readline().strip()))\n\n    c.sort()\n    c = sorted(c, reverse=True)\n    print(c.index(a)+1)"
    },
    {
        "number": 4289,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a, b = map(int, stdin.readline().split())\n    h = [int(stdin.readline()) for _ in range(n)]\n    index = h.index(min(h, key=lambda x: abs(a - x * 0.006)))\n    return str(index)"
    },
    {
        "number": 4289,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    A = int(lines[1])\n    T = []\n    for line in lines[2:]:\n        T.append(int(line))\n    res = \"\"\n    min_diff = sys.maxsize\n    for i in range(N):\n        diff = abs(A - (T[i] - T[i] * 0.006))\n        if diff < min_diff:\n            min_diff = diff\n            res = i\n    return res\n"
    },
    {
        "number": 4289,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4289,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    T, A = map(int, stdin.readline().split())\n    H = list(map(int, stdin.readline().split()))\n\n    h_max = max(H)\n    h_min = min(H)\n    h_sum = sum(H)\n\n    print(H.index(h_min) + 1)\n\"\"\"\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    return str(odd_sum(N, M))\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    # At least one of the two balls can be chosen to be the last one.\n    # Hence the count of odd numbers is N.\n    return str(pow(2, N, MOD))\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split(\" \")]\n    memo = {}\n\n    def f(m: int, n: int, cache: dict) -> int:\n        if m == 0:\n            return n % 2\n        if n == 0:\n            return 1\n        if (m, n) in cache:\n            return cache[(m, n)]\n\n        if n < m:\n            memo[(m, n)] = f(m, n + 1, cache)\n        else:\n            memo[(m, n)] = f(m - 1, n, cache) + f(m, n - 1, cache)\n\n        return memo[(m, n)]\n\n    return str(f(m, n, memo))"
    },
    {
        "number": 4290,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4290,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_balls = [int(x) for x in stdin.split(' ')]\n    total_num_balls = num_balls[0] + num_balls[1]\n    return str(num_balls.count(2) * num_balls.count(4) * num_balls.count(6) * num_balls.count(8) * num_balls.count(10))\n\nassert(solution('2 1') == '1')\nassert(solution('0 0') == '0')\nassert(solution('2 0') == '0')\nassert(solution('1 1') == '0')\nassert(solution('1 1') == '0')\nassert(solution('2 2') == '0')\nassert(solution('2 1') == '0')\nassert(solution('2 0') == '0')\nassert(solution('3 2') == '0')\nassert(solution('3 1') == '0')\nassert(solution('3 0') == '0')\nassert(solution('4 2') == '0')\nassert(solution('4 1') == '0')\nassert(solution('4 0') == '0')\nassert(solution('5 2') == '0')\nassert(solution('5 1') == '0')\nassert(solution('5 0') == '0')\nassert(solution('6 2') == '0')\nassert(solution('6 1') == '0')\nassert(solution('6 0') == '0')\nassert(solution('7 2') == '0')\nassert(solution('7 1') == '0')\nassert(solution('7 0') == '0')\nassert(solution('8 2') == '0')\nassert(solution('8 1') == '0')\nassert(solution('8 0') == '0')\nassert(solution('9 2') == '0')\nassert(solution('9 1') == '0')\nassert(solution('9 0') == '0')\nassert(solution('10 2') == '0')\nassert(solution('10 1') == '0')\nassert(solution('10 0') == '0')\nassert(solution('11 2') == '0')\nassert(solution('11 1') == '0')\nassert(solution('11 0') == '0')\nassert(solution('12 2') == '0')\nassert(solution('12 1') == '0')\nassert(solution('12 0') == '0')\nassert(solution('13 2') == '0')\nassert(solution('13 1') == '0')\nassert(solution('13 0') == '0')\nassert(solution('14 2') == '0')\nassert(solution('14 1') == '0')\nassert(solution('14 0') == '0')\nassert(solution('15 2') == '0')\nassert(solution('15 1') == '0')\nassert(solution('15 0') == '0')\nassert(solution('16 2') == '0')\nassert(solution('16 1') == '0')\nassert(solution('16 0') == '0')\nassert(solution('17 2') == '0')\nassert(solution('17 1') == '0')\nassert(solution('17 0') == '0')\nassert(solution('18 2') == '0')\nassert(solution('18 1') == '0')\nassert(solution('18 0') == '0')\nassert(solution('19 2') == '0')\nassert(solution('19 1') == '0')\nassert(solution('19 0') == '0')\nassert(solution('20 2') == '0')\nassert(solution('20 1') == '0')\nassert(solution('20 0') == '0')\nassert(solution('21 2') == '0')\nassert(solution('21 1') == '0')\nassert(solution('21 0') == '0')\nassert(solution('22 2') == '0')\nassert(solution('22 1') == '0')\nassert(solution('22 0') == '0')\nassert(solution('23 2') == '0')\nassert(solution('23 1') == '0')\nassert(solution('23 0') == '0')\nassert(solution('24 2') == '0')\nassert(solution('24 1') == '0')\nassert(solution('24 0') == '0')\nassert(solution('25 2') == '0')\nassert(solution('25 1') == '0')\nassert(solution('25 0') == '0')\nassert(solution('26 2') == '0')\nassert(solution('26 1') == '0')\nassert(solution('26 0') == '0')\nassert(solution('27 2') == '0')\nassert(solution('27 1') == '0')\nassert(solution('27 0') == '0')\nassert(solution('28 2') == '0')\nassert(solution('28 1') == '0')\nassert(solution('28 0') == '0')\nassert(solution('29 2') == '0')\nassert(solution('29 1') == '0')\nassert(solution('29 0') == '0')\nassert(solution('30 2') == '0')\nassert(solution('30 1') == '0')\nassert(solution('30 0') == '0')\nassert(solution('31 2') == '0')\nassert(solution('31 1') == '0')\nassert(solution('31 0') == '0')\nassert(solution('32 2') == '0')\nassert(solution('32 1') == '0')\nassert(solution('32 0') == '0')\nassert(solution('33 2') == '0')\nassert(solution('33 1') == '0')\nassert(solution('33 0') == '0')\nassert(solution('34 2') == '0')\nassert(solution('34 1') == '0')\nassert(solution('34 0') == '0')\nassert(solution('35 2') == '0')\nassert(solution('35 1') == '0')\nassert(solution('35 0') == '0')\nassert(solution('36 2') == '0')\nassert(solution('36 1') == '0')\nassert(solution('36 0') == '0')\nassert(solution('37 2') == '0')\nassert(solution('37 1') == '0')\nassert(solution('37 0') == '0')\nassert(solution('38 2') == '0')\nassert(solution('38 1') == '0')\nassert(solution('38 0') == '0')\nassert(solution('39 2') == '0')\nassert(solution('39 1') == '0')\nassert(solution('39 0') == '0')\nassert(solution('40 2') == '0')\nassert(solution('40 1') == '0')\nassert(solution('40 0') == '0')\nassert(solution('41 2') == '0')\nassert(solution('41 1') == '0')\nassert(solution('41 0') == '0')\nassert(solution('42 2') == '0')\nassert(solution('42 1') == '0')\nassert(solution('42 0') == '0')\nassert(s"
    },
    {
        "number": 4290,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 4290,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(2**n - 2 * 2**(n+m) + 2**(n+m) * 2**m)"
    },
    {
        "number": 4290,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    return str(solve(n, m))\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(2 ** (n + m) - 2 ** (n - 1) - 2 ** (m - 1))"
    },
    {
        "number": 4290,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    return str(count_even_odd(n, m))\n\n\ndef"
    },
    {
        "number": 4291,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4291,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = [int(x) for x in stdin.split(' ')]\n    S = stdin.split('\\n')[1]\n    queries = [stdin.split(' ')[1:] for _ in range(Q)]\n\n    def count_ac(S: str, start: int, end: int) -> int:\n        return S[start:end].count('AC')\n\n    for query in queries:\n        l, r = int(query[0]), int(query[1])\n        print(count_ac(S, l, r))\n\nsolution(input())\n"
    },
    {
        "number": 4291,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = stdin.split(' ')\n    n, q = int(n), int(q)\n    s = stdin[len('ACGT '):-1]\n    # print(n, q)\n    # print(s)\n    res = [s[i: j+1] for i in range(n) for j in range(n) if i < j]\n    # print(res)\n    return '\\n'.join(str(len(res[x])) for x in range(q))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4291,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    pass\n"
    },
    {
        "number": 4291,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.readline().split())\n    S = stdin.readline().strip()\n\n    # pre-process the input\n    pre_processed = [[0] * 4 for _ in range(N)]\n    for i in range(N):\n        pre_processed[i][0] = 1 if S[i] == 'A' else 0\n        pre_processed[i][1] = 1 if S[i] == 'C' else 0\n        pre_processed[i][2] = 1 if S[i] == 'G' else 0\n        pre_processed[i][3] = 1 if S[i] == 'T' else 0\n\n    # start processing\n    for q in range(Q):\n        l, r = map(int, stdin.readline().split())\n\n        # query 1\n        count = 0\n        for i in range(l, r + 1):\n            count += pre_processed[i][0]\n\n        # print the answer\n        print(count)\n\n        # query 2\n        count = 0\n        for i in range(l, r + 1):\n            count += pre_processed[i][1]\n\n        # print the answer\n        print(count)\n\n        # query 3\n        count = 0\n        for i in range(l, r + 1):\n            count += pre_processed[i][2]\n\n        # print the answer\n        print(count)"
    },
    {
        "number": 4291,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ACACTACG\\n3 7\\n2 3\\n1 8\")\n    '2\\n0\\n3'\n    \"\"\"\n    pass"
    },
    {
        "number": 4291,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4291,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        N, Q = list(map(int, stdin.readline().strip().split()))\n        S = stdin.readline().strip()\n        queries = []\n        for _ in range(Q):\n            l, r = list(map(int, stdin.readline().strip().split()))\n            queries.append((l, r))\n        print(*(substring_count(S, l, r) for l, r in queries))\n\ndef"
    },
    {
        "number": 4291,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Accepted\n    57/57 cases passed (32 ms)\n    Your runtime beats 42.39% of pythonsubmissions.\n    '''\n    n, q = [int(x) for x in stdin.split()]\n    s = stdin[n:]\n    ac = 0\n    for i in range(n):\n        l, r = [int(x) for x in stdin.split()]\n        if l <= i <= r:\n            if s[i] == 'A' or s[i] == 'C':\n                ac += 1\n    return '\\n'.join([str(ac)] * q)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4291,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('ACACTACG')\n    '2\\n0\\n3'\n    '''\n    import sys\n    lines = [line.strip() for line in stdin.split('\\n')]\n    N, Q = map(int, lines[0].split())\n    S = lines[1]\n    queries = [tuple(map(int, line.split())) for line in lines[2:]]\n    for l, r in queries:\n        print(S[l-1:r].count('AC'))\n    return ''"
    },
    {
        "number": 4292,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = [line.strip() for line in stdin.splitlines()]\n    print(lines)"
    },
    {
        "number": 4292,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    fruit_prices = list(map(int, stdin.split()))\n    min_total_price = min(fruit_prices[:K])\n    total_price = min_total_price * N\n    return str(total_price)"
    },
    {
        "number": 4292,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip().split(' ')\n    N, K = int(line[0]), int(line[1])\n    prices = list(map(int, stdin.strip().split(' ')))\n    min_price = sum([min(x, K) for x in prices])\n    return str(min_price)"
    },
    {
        "number": 4292,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, K = [int(i) for i in stdin.split()]\n    _, *prices = [int(i) for i in stdin.split()]\n    return str(sum(prices[:K]))"
    },
    {
        "number": 4292,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    prices = [int(s) for s in stdin.split()]\n    return str(sum(sorted(prices, reverse=True)[:k]))"
    },
    {
        "number": 4292,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split(' '))\n    prices = list(map(int, stdin.strip().split(' ')))\n\n    min_cost = sum(prices[:k])\n    max_cost = sum(prices[-k:])\n\n    if min_cost < max_cost:\n        return str(min_cost)\n    else:\n        return str(max_cost)"
    },
    {
        "number": 4292,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    prices = [int(x) for x in stdin.split(\" \")]\n\n    ans = sum(prices[i] for i in range(k))\n    for i in range(k, n):\n        ans = min(ans, prices[i] + prices[i - k] + sum(prices[j] for j in range(i - k + 1, i + 1)))\n    return str(ans)"
    },
    {
        "number": 4292,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n\n    if K > N:\n        return \"NEGATIVE\"\n\n    fruits = [int(x) for x in stdin.split()]\n    fruits.sort()\n    fruits = fruits[:K]\n    fruits = fruits[::-1]\n    total = 0\n    for fruit in fruits:\n        total += fruit\n\n    return str(total)"
    },
    {
        "number": 4292,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4292,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The greedy algorithm\n    '''\n    n, k = [int(x) for x in stdin.strip().split()]\n    prices = [int(x) for x in stdin.strip().split()]\n    if k > n:\n        return '0'\n    if k == 1:\n        return str(prices[0])\n    if k == n:\n        return str(sum(prices))\n    \n    if n > k:\n        min_cost = prices[0]\n        for i in range(1, n):\n            if prices[i] < min_cost:\n                min_cost = prices[i]\n        return str(min_cost * n)\n\n    if k > n:\n        return str(sum(prices))\n    \n    if k == 1:\n        return str(prices[0])\n    \n    if k == n:\n        return str(sum(prices))\n\n    return str(sum(prices) - (n - k) * prices[-1])\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4293,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for line in stdin.splitlines():\n        p, q, r = [int(x) for x in line.split()]\n        result.append(min(p * (q + r), p * r, q * (r + p)))\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4293,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(f) + int(t) for f, t in zip(stdin.split(\" \"), stdin.split(\" \")[::-1])))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4293,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4293,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pqr = list(map(int, stdin.split(' ')))\n    return min(pqr[0] + pqr[1], pqr[2] + pqr[0], pqr[2] + pqr[1])"
    },
    {
        "number": 4293,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(' ')\n    p = int(data[0])\n    q = int(data[1])\n    r = int(data[2])\n    min_flight_time = min(p, q, r)\n    if min_flight_time == p:\n        print(p)\n    elif min_flight_time == q:\n        print(q)\n    elif min_flight_time == r:\n        print(r)\n    else:\n        print(0)"
    },
    {
        "number": 4293,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = stdin.split(\" \")\n    P, Q, R = int(P), int(Q), int(R)\n    \n    max_time = max(P, Q, R)\n    min_time = min(P, Q, R)\n    \n    return str(max_time * min_time)"
    },
    {
        "number": 4293,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def min_sum_of_flight_times(P: int, Q: int, R: int) -> int:\n        return min(P * R, Q * R, P * Q)\n\n    pqr = list(map(int, stdin.split()))\n    return str(min_sum_of_flight_times(pqr[0], pqr[1], pqr[2]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4293,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"4\""
    },
    {
        "number": 4293,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4293,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    p, q, r = map(int, stdin.strip().split())\n    return str(min(p + q, q + r, p + r))"
    },
    {
        "number": 4294,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a = [int(num) for num in stdin.split(\" \")]\n    if x < a:\n        return \"0\"\n    else:\n        return \"10\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    values = stdin.split(\" \")\n    x = int(values[0])\n    y = int(values[1])\n    \n    return str(0 if x < y else 10)"
    },
    {
        "number": 4294,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    input_line = stdin.split(\" \")\n    x = int(input_line[0])\n    a = int(input_line[1])\n    if x < a:\n        return '0'\n    else:\n        return '10'"
    },
    {
        "number": 4294,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, a = stdin.split()\n    return '0' if int(x) < int(a) else '10'"
    },
    {
        "number": 4294,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    x = int(inputs[0])\n    a = int(inputs[1])\n\n    if x < a:\n        return \"0\"\n    else:\n        return \"10\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.readline().strip()\n    second_line = stdin.readline().strip()\n    if int(first_line) < int(second_line):\n        return '0'\n    return '10'\n"
    },
    {
        "number": 4294,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the string 0 if X is less than A, otherwise 10.\n    >>> solution('0 3')\n    '0'\n    >>> solution('3 5')\n    '10'\n    '''\n    \n    X, A = tuple(map(int, stdin.split()))\n    return '0' if X < A else '10'\n"
    },
    {
        "number": 4294,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, a = stdin.split()\n    x = int(x)\n    a = int(a)\n\n    if x < a:\n        print(\"0\")\n    else:\n        print(\"10\")"
    },
    {
        "number": 4294,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution to the problem.\"\"\"\n    input_list = stdin.split(' ')\n    A = int(input_list[1])\n    X = int(input_list[0])\n    if X < A:\n        print(0)\n    else:\n        print(10)"
    },
    {
        "number": 4294,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, A = stdin.split()\n    print('0' if int(X) < int(A) else '10')\n"
    },
    {
        "number": 4295,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n\n    return str(N - K)\n\nassert solution('7 4') == '1'\nassert solution('100000000 7 1000000000') == '0'\nassert solution('7 1000000000 1') == '0'\nassert solution
    },
    {
        "number": 4295,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(num) for num in stdin.split(\" \")]\n    return str(abs(n - k))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4295,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    N = abs(N - K)\n    return str(N)"
    },
    {
        "number": 4295,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.splitlines()\n    N, K = int(t[0]), int(t[1])\n    d = abs(N - K)\n    if d == 0:\n        return str(K)\n    elif d % K == 0:\n        return str(K)\n    else:\n        return str(d)\n    \n"
    },
    {
        "number": 4295,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    i = 1\n    while i <= n:\n        n -= i\n        i += k\n    return str(i)\n\nassert(solution(stdin) == '1')\nassert(solution(stdin = \"7 4\") == '1')\nassert(solution(stdin = \"7 4\") == '1')\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4295,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = [int(x) for x in stdin.split(\" \")]\n    n = lines[0]\n    k = lines[1]\n\n    print(k - n)\n    return \"\""
    },
    {
        "number": 4295,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.strip().split(\" \")]\n    print(n - k)\n"
    },
    {
        "number": 4295,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nk = list(map(int, stdin.strip().split()))\n    k, n = nk[1], nk[0]\n    diff = abs(n - k)\n    print(diff)"
    },
    {
        "number": 4295,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('7 4')\n    '1'\n    '''\n    N, K = map(int, stdin.split())\n    n = abs(N - K)\n    k = 0\n    while n > 0:\n        k += n % 10\n        n = n // 10\n    return str(max(n, k))"
    },
    {
        "number": 4295,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return str(k - n)\n    return \"1\""
    },
    {
        "number": 4296,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split(\" \")]\n    if a+b+c >= 22:\n        print(\"bust\")\n    else:\n        print(\"win\")\n    return \"\""
    },
    {
        "number": 4296,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A1, A2, A3 = [int(stdin.split(' ')[i]) for i in range(3)]\n    return 'bust' if A1 + A2 + A3 >= 22 else 'win'"
    },
    {
        "number": 4296,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Get user input, return bust or win.\n    '''\n    A = list(map(int, stdin.split()))\n    if A[0] + A[1] + A[2] >= 22:\n        return 'bust'\n    else:\n        return 'win'\n\nassert(solution('5 7 9') == 'win')\nassert(solution('5 7 11') == 'bust')"
    },
    {
        "number": 4296,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a + b + c >= 22:\n        return 'bust'\n    return 'win'"
    },
    {
        "number": 4296,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = [int(x) for x in stdin.split(' ')]\n    if a+b+c>=22:\n        print('bust')\n    else:\n        print('win')"
    },
    {
        "number": 4296,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = map(int, stdin.split())\n    if a1 + a2 + a3 >= 22:\n        print(\"bust\")\n    else:\n        print(\"win\")"
    },
    {
        "number": 4296,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = [int(x) for x in stdin.strip().split()]\n    if a1 + a2 + a3 >= 22:\n        print(\"bust\")\n    else:\n        print(\"win\")\n    return \"\""
    },
    {
        "number": 4296,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split()]\n    A1, A2, A3 = nums[0], nums[1], nums[2]\n\n    if A1 + A2 + A3 >= 22:\n        return 'bust'\n\n    return 'win'"
    },
    {
        "number": 4296,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    a1, a2, a3 = int(inputs[0]), int(inputs[1]), int(inputs[2])\n    if a1 + a2 + a3 >= 22:\n        print(\"bust\")\n    else:\n        print(\"win\")"
    },
    {
        "number": 4296,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.strip().split(' ')]\n    if a+b+c >= 22:\n        return 'bust'\n    return 'win'"
    },
    {
        "number": 4297,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(next_n(n))\n\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return str(n//2)*(n//2)\n"
    },
    {
        "number": 4297,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    "
    },
    {
        "number": 4297,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().strip()\n    return str(int(line) // 2)\n\nprint(solution(input()))\n\"\"\"\n\nn = int(input())\n\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def is_divisible(x):\n        return x % 2 == 0 and x % n == 0\n    return next(filter(is_divisible, range(1, n + 1, 2)), None)"
    },
    {
        "number": 4297,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) // 2 * 2)"
    },
    {
        "number": 4297,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    low = 1\n    high = N\n    while high > low:\n        mid = (low + high) // 2\n        if mid % 2 == 0 and mid % N == 0:\n            low = mid + 1\n        elif mid % 2 == 0:\n            low = mid + 1\n        elif mid % N == 0:\n            high = mid - 1\n        else:\n            high = mid - 1\n    return low"
    },
    {
        "number": 4297,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    # We assume that the integer to be divisible by both 2 and N\n    # will be at least N. If this is not the case, we return the\n    # smallest integer that is divisible by both 2 and N.\n    # Thus, we just need to find the smallest integer divisible\n    # by 2, since we assume that the integer to be divisible by\n    # both 2 and N will be at least N.\n    result = N\n    \n    # We loop through all possible divisors of 2 (since we assume\n    # that the integer to be divisible by both 2 and N will be at\n    # least N). The loop will run only if the divisor is smaller than\n    # result. If the divisor is greater than result, we update the result.\n    for i in range(2, result+1):\n        if result % i == 0:\n            result //= i\n    \n    return str(result)"
    },
    {
        "number": 4297,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    if N == 1:\n        return \"1\"\n    divisible = False\n    for i in range(2, (N + 1) // 2):\n        if N % i == 0:\n            divisible = True\n            break\n    if not divisible:\n        return str(N)\n    return str(N - i)\n\nassert solution(\"3\") == \"1\"\nassert solution(\"6\") == \"3\"\nassert solution(\"9\") == \"3\"\nassert solution(\"13\") == \"3\"\nassert solution(\"20\") == \"6\"\nassert solution(\"27\") == \"9\"\nassert solution(\"30\") == \"12\"\nassert solution(\"36\") == \"18\"\nassert solution(\"37\") == \"18\"\nassert solution(\"49\") == \"18\"\nassert solution(\"49\") == \"18\"\nassert solution(\"55\") == \"18\"\nassert solution(\"60\") == \"18\"\nassert solution(\"69\") == \"18\"\nassert solution(\"78\") == \"18\"\nassert solution(\"81\") == \"18\"\nassert solution(\"90\") == \"18\"\nassert solution(\"91\") == \"18\"\nassert solution(\"100\") == \"18\"\nassert solution(\"101\") == \"18\"\nassert solution(\"102\") == \"18\"\nassert solution(\"103\") == \"18\"\nassert solution(\"104\") == \"18\"\nassert solution(\"105\") == \"18\"\nassert solution(\"106\") == \"18\"\nassert solution(\"107\") == \"18\"\nassert solution(\"108\") == \"18\"\nassert solution(\"109\") == \"18\"\nassert solution(\"110\") == \"18\"\nassert solution(\"111\") == \"18\"\nassert solution(\"112\") == \"18\"\nassert solution(\"113\") == \"18\"\nassert solution(\"114\") == \"18\"\nassert solution(\"115\") == \"18\"\nassert solution(\"116\") == \"18\"\nassert solution(\"117\") == \"18\"\nassert solution(\"118\") == \"18\"\nassert solution(\"119\") == \"18\"\nassert solution(\"120\") == \"18\"\nassert solution(\"121\") == \"18\"\nassert solution(\"122\") == \"18\"\nassert solution(\"123\") == \"18\"\nassert solution(\"124\") == \"18\"\nassert solution(\"125\") == \"18\"\nassert solution(\"126\") == \"18\"\nassert solution(\"127\") == \"18\"\nassert solution(\"128\") == \"18\"\nassert solution(\"129\") == \"18\"\nassert solution(\"130\") == \"18\"\nassert solution(\"131\") == \"18\"\nassert solution(\"132\") == \"18\"\nassert solution(\"133\") == \"18\"\nassert solution(\"134\") == \"18\"\nassert solution(\"135\") == \"18\"\nassert solution(\"136\") == \"18\"\nassert solution(\"137\") == \"18\"\nassert solution(\"138\") == \"18\"\nassert solution(\"139\") == \"18\"\nassert solution(\"140\") == \"18\"\nassert solution(\"141\") == \"18\"\nassert solution(\"142\") == \"18\"\nassert solution(\"143\") == \"18\"\nassert solution(\"144\") == \"18\"\nassert solution(\"145\") == \"18\"\nassert solution(\"146\") == \"18\"\nassert solution(\"147\") == \"18\"\nassert solution(\"148\") == \"18\"\nassert solution(\"149\") == \"18\"\nassert solution(\"150\") == \"18\"\nassert solution(\"151\") == \"18\"\nassert solution(\"152\") == \"18\"\nassert solution(\"153\") == \"18\"\nassert solution(\"154\") == \"18\"\nassert solution(\"155\") == \"18\"\nassert solution(\"156\") == \"18\"\nassert solution(\"157\") == \"18\"\nassert solution(\"158\") == \"18\"\nassert solution(\"159\") == \"18\"\nassert solution(\"160\") == \"18\"\nassert solution(\"161\") == \"18\"\nassert solution(\"162\") == \"18\"\nassert solution(\"163\") == \"18\"\nassert solution(\"164\") == \"18\"\nassert solution(\"165\") == \"18\"\nassert solution(\"166\") == \"18\"\nassert solution(\"167\") == \"18\"\nassert solution(\"168\") == \"18\"\nassert solution(\"169\") == \"18\"\nassert solution(\"170\") == \"18\"\nassert solution(\"171\") == \"18\"\nassert solution(\"172\") == \"18\"\nassert solution(\"173\") == \"18\"\nassert solution(\"174\") == \"18\"\nassert solution(\"175\") == \"18\"\nassert solution(\"176\") == \"18\"\nassert solution(\"177\") == \"18\"\nassert solution(\"178\") == \"18\"\nassert solution(\"179\") == \"18\"\nassert solution(\"180\") == \"18\"\nassert solution(\"181\") == \"18\"\nassert solution(\"182\") == \"18\"\nassert solution(\"183\") == \"18\"\nassert solution(\"184\") == \"18\"\nassert solution(\"185\") == \"18\"\nassert solution(\"186\") == \"18\"\nassert solution(\"187\") == \"18\"\nassert solution(\"188\") == \"18\"\nassert solution(\"189\") == \"18\"\nassert solution(\"190\") == \"18\"\nassert solution(\"191\") == \"18\"\nassert solution(\"192\") == \"18\"\nassert solution(\"193\") == \"18\"\nassert solution(\"194\") == \"18\"\nassert solution(\"195\") == \"18\"\nassert solution(\"196\") == \"18\"\nassert solution(\"197\") == \"18\"\nassert solution(\"198\") == \"18\"\nassert solution(\"199\") == \"18\"\nassert solution(\"200\") == \"18\"\nassert solution(\"201\") == \"18\"\nassert solution(\"202\") == \"18\"\nassert solution(\"203\") == \"18\"\nassert solution(\"204\") == \"18\"\nassert solution(\"205\") == \"18\"\nassert solution(\"206\") == \"18\"\nassert solution(\"207\") == \"18\"\nassert solution(\"208\") == \"18\"\nassert solution(\"209\") == \"18\"\nassert solution(\"210\") == \"18\"\nassert solution(\"211\") == \"18\"\nassert solution(\"212\") == \"18\"\nassert solution(\"213\") == \"18\"\nassert solution(\"214\") == \"18\"\nassert solution(\"215\") == \"18\"\nassert solution(\"216\") == \"18\"\nassert solution(\"217\") == \"18\"\nassert solution(\"218\") == \"18\"\nassert solution(\"219\") == \"18\"\nassert solution(\"220\") == \"18\"\nassert solution(\"221\") == \"18\"\nassert solution(\"222\") == \"18\"\nassert solution(\"223\") == \"18\"\nassert solution(\"224\") == \"18\"\nassert solution(\"225\") == \"18\"\nassert solution(\"226\") == \"18\"\nassert solution(\"227\") == \"18\"\nassert solution(\"228\") == \"18\"\nassert solution(\"229\") == \"18\"\nassert solution(\"230\") == \"18\"\nassert solution(\"231\") == \"18\"\nassert solution(\"232\") == \"18\"\nassert solution(\"233\") == \"18\"\nassert solution(\"234\") == \"18\"\nassert solution(\"235\") == \"18\"\nassert solution(\"236\") == \"18\"\nassert solution(\"237\") == \"18\"\nassert solution(\"238\") == \"18\"\nassert solution(\"239\") == \"18\"\nassert solution(\"240\") == \"18\"\nassert solution(\"241\") == \"18\"\nassert solution(\"242\") == \"18\"\nassert solution(\"243\") == \"18\"\nassert solution(\"244\") == \"18\"\nassert solution(\"245\") == \"18\"\nassert solution(\"246\") == \"18\"\nassert solution(\"247\") == \"18\"\nassert solution(\"248\") == \"18\"\nassert solution(\"249\") == \"18\"\nassert solution(\"250\") == \"18\"\nassert solution(\"251\") == \"18\"\nassert solution(\"252\") == \"18\"\nassert solution(\"253\") == \"18\"\nassert solution(\"254\") == \"18\"\nassert solution(\"255\") == \"18\"\nassert solution(\"256\") == \"18\"\nassert solution(\"257\") == \"18\"\nassert solution(\"258\") == \"18\"\nassert solution(\"259\") == \"18\"\nassert solution(\"260\") == \"18\"\nassert solution(\"261\") == \""
    },
    {
        "number": 4297,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    limit = 2*n\n    \n    for i in range(limit, 1, -1):\n        if i % 2 == 0 and i % n == 0:\n            return i\n\nassert(solution('3') == 3)\nassert(solution('2') == 2)\nassert(solution('7') == 21)"
    },
    {
        "number": 4298,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, D = map(int, lines[0].split())\n    return str(min(N, 2 * D))\n"
    },
    {
        "number": 4298,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split()]\n    inspectors = 1\n    if D <= N - D:\n        return inspectors\n    else:\n        return inspectors + 1"
    },
    {
        "number": 4298,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split()]\n    return str(int((N - D) / (N - 1)) + 1)\n\nprint(solution(input()))"
    },
    {
        "number": 4298,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split()]\n    return str(N - D)"
    },
    {
        "number": 4298,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number_of_apples, inspection_depth = [int(x) for x in stdin.split(\" \")]\n    total_apples = number_of_apples * (number_of_apples + 1) // 2\n    expected_apples = total_apples // inspection_depth\n    return str(expected_apples)"
    },
    {
        "number": 4298,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split()]\n    if N == 1:\n        return 1\n    possible_inspectors = [x for x in range(1, N + 1)]\n    i = 0\n    while i < len(possible_inspectors):\n        for j in range(i + D, i + D * 2):\n            if j < len(possible_inspectors):\n                if possible_inspectors[j]!= 0:\n                    possible_inspectors[i] = possible_inspectors[j]\n                    possible_inspectors[j] = 0\n                    i += 1\n                    break\n    return i + D"
    },
    {
        "number": 4298,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(i) for i in stdin.split()]\n    min_n = min(N - D, D)\n    return min_n"
    },
    {
        "number": 4298,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(solution)"
    },
    {
        "number": 4298,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4299,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    print('bon' if n % 100 in (12, 13, 14) else 'hon')"
    },
    {
        "number": 4299,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.rstrip())\n    return (\"pon\" if N % 10 in [0, 1, 6, 8] else \"bon\" if N % 10 == 3 else \"hon\")"
    },
    {
        "number": 4299,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 999:\n        return 'hon' if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9 else 'pon'\n    else:\n        return 'hon' if n % 100 == 2 or n % 100 == 4 or n % 100 == 5 or n % 100 == 7 or n % 100 == 9 else 'pon'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4299,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"bon\"\n    if n < 100:\n        return \"hon\"\n    if n < 1000:\n        return \"pon\"\n    return \"bon\""
    },
    {
        "number": 4299,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    phrase = str(n) + \" \u672c\"\n    if n == 0:\n        return \"pon\"\n    elif n % 10 == 2:\n        return \"hon\"\n    elif n % 10 == 4 or n % 10 == 5:\n        return \"pon\"\n    elif n % 10 == 7 or n % 10 == 8:\n        return \"bon\"\n    elif n % 10 == 3:\n        return \"bon\"\n    else:\n        return \"pon\""
    },
    {
        "number": 4299,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n <= 999:\n        return 'hon' if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9 else 'pon'\n    else:\n        return 'bon'"
    },
    {
        "number": 4299,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"bon\"\n    if n < 10:\n        return \"bon\"\n    if n < 100:\n        return \"pon\"\n    if n < 1000:\n        if n % 10 == 2:\n            return \"hon\"\n        if n % 10 == 4:\n            return \"hon\"\n        if n % 10 == 5:\n            return \"hon\"\n        if n % 10 == 7:\n            return \"hon\"\n        if n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    if n < 100000:\n        if n % 100 == 0:\n            return \"bon\"\n        if n % 100 == 1:\n            return \"hon\"\n        if n % 100 == 6:\n            return \"hon\"\n        if n % 100 == 8:\n            return \"hon\"\n        return \"pon\"\n    if n < 1000000:\n        if n % 1000 == 0:\n            return \"bon\"\n        if n % 1000 == 1:\n            return \"hon\"\n        if n % 1000 == 6:\n            return \"hon\"\n        if n % 1000 == 8:\n            return \"hon\"\n        return \"pon\"\n    if n < 1000000000:\n        if n % 10000 == 0:\n            return \"bon\"\n        if n % 10000 == 1:\n            return \"hon\"\n        if n % 10000 == 6:\n            return \"hon\"\n        if n % 10000 == 8:\n            return \"hon\"\n        return \"pon\"\n    if n < 10000000000:\n        if n % 100000 == 0:\n            return \"bon\"\n        if n % 100000 == 1:\n            return \"hon\"\n        if n % 100000 == 6:\n            return \"hon\"\n        if n % 100000 == 8:\n            return \"hon\"\n        return \"pon\"\n    if n < 1000000000000:\n        if n % 1000000 == 0:\n            return \"bon\"\n        if n % 1000000 == 1:\n            return \"hon\"\n        if n % 1000000 == 6:\n            return \"hon\"\n        if n % 1000000 == 8:\n            return \"hon\"\n        return \"pon\"\n    if n < 10000000000000:\n        if n % 10000000 == 0:\n            return \"bon\"\n        if n % 10000000 == 1:\n            return \"hon\"\n        if n % 10000000 == 6:\n            return \"hon\"\n        if n % 10000000 == 8:\n            return \"hon\"\n        return \"pon\"\n    if n < 100000000000000:\n        if n % 100000000 == 0:\n            return \"bon\"\n        if n % 100000000 == 1:\n            return \"hon\"\n        if n % 100000000 == 6:\n            return \"hon\"\n        if n % 100000000 == 8:\n            return \"hon\"\n        return \"pon\"\n    if n < 1000000000000000:\n        if n % 1000000000 == 0:\n            return \"bon\"\n        if n % 1000000000 == 1:\n            return \"hon\"\n        if n % 1000000000 == 6:\n            return \"hon\"\n        if n % 1000000000 == 8:\n            return \"hon\"\n        return \"pon\"\n    return \"pon\""
    },
    {
        "number": 4299,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4299,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4299,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1000:\n        if n % 100 // 10 == 2:\n            return \"hon\"\n        elif n % 100 // 10 == 4 or n % 100 // 10 == 5:\n            return \"pon\"\n        else:\n            return \"bon\"\n    else:\n        return \"hon\"\n    return \"hon\"\n\nassert(solution(\"16\") == \"pon\")\nassert(solution(\"1234\") == \"hon\")\nassert(solution(\"1098\") == \"hon\")\nassert(solution(\"999\") == \"hon\")\nassert(solution(\"1459\") == \"hon\")\n\n\"\"\"\ndef"
    },
    {
        "number": 4300,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    values = stdin.split(' ')\n    N = int(values[0])\n    d = [int(value) for value in values[1:]]\n    health = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            health += d[i] * d[j]\n    return str(health)"
    },
    {
        "number": 4300,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d = [int(x) for x in stdin.split()]\n    \n    print(N * (N - 1) // 2)"
    },
    {
        "number": 4300,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = list(map(int, stdin.readline().split()))\n    return str(sum(d[i] * d[i - 1] for i in range(1, n)))"
    },
    {
        "number": 4300,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin (str): input in the form of a string\n\n    Returns:\n        str: output in the form of a string\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4300,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    health_points = int(stdin)\n    health_points_restored = 0\n    for i in range(health_points):\n        health_points_restored += (health_points - 1) * i\n    return str(health_points_restored)"
    },
    {
        "number": 4300,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    _, d_list = stdin.split()\n    d_list = list(map(int, d_list.split()))\n    return str(n * (n - 1) // 2 * sum(d_list))\n"
    },
    {
        "number": 4300,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d = [int(x) for x in stdin.split()]\n    N = len(d)\n\n    dp = [[0] * N for _ in range(N)]\n\n    for i in range(N):\n        dp[i][i] = d[i]\n\n    for n in range(2, N):\n        for i in range(N - n):\n            j = i + n\n            dp[i][j] = d[i] * d[j]\n            for k in range(i + 1, j):\n                dp[i][j] = max(dp[i][j], d[i] * d[j] + dp[i][k] + dp[k][j])\n\n    return str(dp[0][N - 1])\n"
    },
    {
        "number": 4300,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    takoyaki = [int(x) for x in stdin.readline().split()]\n\n    health = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            health[i] += takoyaki[i] * takoyaki[j]\n\n    return sum(health)"
    },
    {
        "number": 4300,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = [int(x) for x in stdin.split()]\n    print(sum([n * (n - 1) * (n - 2) / 2 for x in itertools.combinations(d, 2)]))"
    },
    {
        "number": 4300,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\")\n    0\n    >>> solution(\"3\")\n    0\n    >>> solution(\"1 2 3\")\n    6\n    >>> solution(\"3 1 2\")\n    3\n    >>> solution(\"1 5 5 1 2 1 2 3 4 4 1 1 1 1 2 2 1 1 3 1 4 2 4 1 4\")\n    16\n    >>> solution(\"1 5 5 1 2 1 2 2 3 4 4 1 1 1 1 2 2 1 1 3 1 4 2 4 1 4\")\n    16\n    \"\"\"\n    health = int(stdin.strip())\n    takoyaki = sorted(list(map(int, stdin.strip().split())), reverse=True)\n    return sum(health * health for _ in range(len(takoyaki) * (len(takoyaki) - 1) // 2))\n"
    },
    {
        "number": 4301,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    array = [int(x) for x in stdin.split()]\n    ans = [0] * len(array)\n    for i in range(len(array) - 1):\n        ans[i] = max(array[i + 1:] + [array[i]])\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4301,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n\n    n = int(stdin[0])\n    numbers = [int(num) for num in stdin[1:]]\n    num_dict = {}\n\n    for num in numbers:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n\n    sorted_nums = sorted(num_dict.items(), key=lambda x: x[0])\n    max_num = sorted_nums[-1][0]\n    max_num_count = sorted_nums[-1][1]\n\n    for key, value in num_dict.items():\n        if value > max_num_count:\n            max_num = key\n            max_num_count = value\n\n    print(max_num)\n"
    },
    {
        "number": 4301,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split()]\n    print(max(x - 1 for x in data))\n"
    },
    {
        "number": 4301,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(s) for s in stdin.split()]\n    max_val = 0\n    for i in range(1, n - 1):\n        max_val = max(max_val, max(a[:i] + a[i + 1:]))\n    print(max_val)\n    return \"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    if size < 2:\n        raise ValueError(\"sequence must have at least 2 elements\")\n\n    curr_max = None\n    for n in range(1, size):\n        next_val = int(stdin[n])\n        if curr_max is None or next_val > curr_max:\n            curr_max = next_val\n\n    return str(curr_max)\n"
    },
    {
        "number": 4301,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    l = len(a)\n    max_prev, max_curr = -1, -1\n    for i in range(l):\n        if max_prev < a[i]:\n            max_prev = a[i]\n            max_curr = max(max_curr, a[i])\n        elif max_curr < a[i]:\n            max_curr = a[i]\n    return str(max_prev)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4301,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = []\n    max_A = 0\n    for _ in range(N):\n        A.append(int(stdin))\n    for i in range(1, N):\n        if A[i] > max_A:\n            max_A = A[i]\n    return str(max_A)\n\nassert(solution(stdin) == stdin[stdin.rfind(\"\\n\")])\n\"\"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split(' ')))\n    ans = A[0]\n    for i in range(N - 1):\n        ans = max(ans, A[i + 1])\n    return str(ans)"
    },
    {
        "number": 4301,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    n = int(stdin)\n    input_list = list(map(int, stdin.split(\" \")))\n    max_val = max(input_list[1:])\n    return str(max_val)\n"
    },
    {
        "number": 4301,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_integers = int(stdin)\n    if num_of_integers < 2:\n        raise ValueError(\"input must be greater than 2\")\n    max_val = stdin.split(\"\\n\")[0]\n    max_val = max_val[max_val.find(\" \") + 1 :]\n    return max_val\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4302,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4302,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == y:\n        return str(x)\n    else:\n        return str(x + y - 1)\n"
    },
    {
        "number": 4302,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A + B)"
    },
    {
        "number": 4302,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(n) for n in stdin.split()]\n    return str(max(a * 2, b * 3))"
    },
    {
        "number": 4302,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(\" \")]\n    coins = 0\n    while A > 0 and B > 0:\n        if A >= B:\n            A -= 1\n            coins += B\n        else:\n            B -= 1\n            coins += A\n\n    return str(coins)\n"
    },
    {
        "number": 4302,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B // 2)"
    },
    {
        "number": 4302,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(2 * min(A, B) - 1)"
    },
    {
        "number": 4302,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    return str(a * b)\n"
    },
    {
        "number": 4302,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    d = [0] * (m + 1)\n\n    for i in range(n, m + 1):\n        d[i] = i\n\n    for i in range(n, m + 1):\n        for j in range(i, m + 1, i):\n            d[j] = max(d[j], d[j - i] + 1)\n\n    return str(d[m])"
    },
    {
        "number": 4302,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5 3''')\n    '9'\n    '''\n    n, k = [int(x) for x in stdin.split(' ')]\n    coins = [0] * (k + 1)\n    coins[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j >= i:\n                coins[j] += coins[j - i]\n    return str(coins[k])"
    },
    {
        "number": 4303,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    positions = [int(x) for x in stdin.split()]\n    positions.sort()\n    positions.reverse()\n    n -= 1\n    positions = [0] + positions\n    pos = 0\n    times = [float('inf')] * n\n    times[0] = 0\n    for i in range(1, n):\n        while pos < len(positions) and positions[pos] <= i:\n            pos += 1\n        for j in range(i - positions[pos - 1]):\n            times[i] = min(times[i], times[pos - 1] + abs(positions[pos] - i))\n    return str(times[-1])\n\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    return str(max(0, k - n) * n + sum(min(x, k) for x in c))"
    },
    {
        "number": 4303,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    print(x)\n    return"
    },
    {
        "number": 4303,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candles = list(map(int, stdin.split()))\n\n    min_time = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and candles[i] == candles[j]:\n            j += 1\n        if j - i - 1 < k:\n            i = j\n            continue\n        k -= (j - i - 1)\n        i = j\n\n    return str(min_time)"
    },
    {
        "number": 4303,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.strip().split(\" \")))\n    candles = list(map(int, stdin.strip().split(\" \")))\n    return str(solution2(N, K, candles))\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(\" \")]\n    x = list(map(int, stdin.strip().split(\" \")))\n    low, high = 0, n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x[mid] == mid:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return str(k - (low - 1))"
    },
    {
        "number": 4303,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = [int(x) for x in stdin.split()]\n\n    if k > n:\n        return \"impossible\"\n\n    time = 0\n    i = 0\n    while i < n and k > 0:\n        if i == c[i]:\n            i += 1\n        else:\n            time += (c[i] - i)\n            i = c[i]\n\n        k -= 1\n\n    return str(time)"
    },
    {
        "number": 4303,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4303,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candles = list(map(int, stdin.split()))\n\n    left = 0\n    right = 0\n\n    for i in range(n):\n        if i - left > k:\n            left += 1\n\n        if right > i:\n            right -= 1\n\n        if i == left:\n            left += 1\n        elif i == right:\n            right -= 1\n\n    return str(right - left + 1)\n"
    },
    {
        "number": 4303,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    cands = [int(x) for x in stdin.split()]\n    cands.sort()\n    # print(cands)\n    ans = 0\n    for i in range(0, n):\n        ans += abs(cands[i] - cands[i - 1])\n        if cands[i] == k:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4304,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a, b) - min(a, b))\n\nassert(solution('1 2') == '1')\nassert(solution('8 13') == '2')\nassert(solution('10 13') == '1')\nassert(solution('8 7') == '2')\nassert(solution('1 2') == '1')\nassert(solution('8 10') == '2')\nassert(solution('2 1') == '2')\nassert(solution('1 3') == '3')\nassert(solution('2 3') == '1')\nassert(solution('1 3') == '1')\nassert(solution('5 8') == '3')\nassert(solution('5 9') == '3')\nassert(solution('5 10') == '3')\nassert(solution('5 11') == '3')\nassert(solution('5 12') == '3')\nassert(solution('5 13') == '3')\nassert(solution('5 14') == '3')\nassert(solution('5 15') == '3')\nassert(solution('5 16') == '3')\nassert(solution('5 17') == '3')\nassert(solution('5 18') == '3')\nassert(solution('5 19') == '3')\nassert(solution('5 20') == '3')\nassert(solution('5 21') == '3')\nassert(solution('5 22') == '3')\nassert(solution('5 23') == '3')\nassert(solution('5 24') == '3')\nassert(solution('5 25') == '3')\nassert(solution('5 26') == '3')\nassert(solution('5 27') == '3')\nassert(solution('5 28') == '3')\nassert(solution('5 29') == '3')\nassert(solution('5 30') == '3')\nassert(solution('5 31') == '3')\nassert(solution('5 32') == '3')\nassert(solution('5 33') == '3')\nassert(solution('5 34') == '3')\nassert(solution('5 35') == '3')\nassert(solution('5 36') == '3')\nassert(solution('5 37') == '3')\nassert(solution('5 38') == '3')\nassert(solution('5 39') == '3')\nassert(solution('5 40') == '3')\nassert(solution('5 41') == '3')\nassert(solution('5 42') == '3')\nassert(solution('5 43') == '3')\nassert(solution('5 44') == '3')\nassert(solution('5 45') == '3')\nassert(solution('5 46') == '3')\nassert(solution('5 47') == '3')\nassert(solution('5 48') == '3')\nassert(solution('5 49') == '3')\nassert(solution('5 50') == '3')\nassert(solution('5 51') == '3')\nassert(solution('5 52') == '3')\nassert(solution('5 53') == '3')\nassert(solution('5 54') == '3')\nassert(solution('5 55') == '3')\nassert(solution('5 56') == '3')\nassert(solution('5 57') == '3')\nassert(solution('5 58') == '3')\nassert(solution('5 59') == '3')\nassert(solution('5 60') == '3')\nassert(solution('5 61') == '3')\nassert(solution('5 62') == '3')\nassert(solution('5 63') == '3')\nassert(solution('5 64') == '3')\nassert(solution('5 65') == '3')\nassert(solution('5 66') == '3')\nassert(solution('5 67') == '3')\nassert(solution('5 68') == '3')\nassert(solution('5 69') == '3')\nassert(solution('5 70') == '3')\nassert(solution('5 71') == '3')\nassert(solution('5 72') == '3')\nassert(solution('5 73') == '3')\nassert(solution('5 74') == '3')\nassert(solution('5 75') == '3')\nassert(solution('5 76') == '3')\nassert(solution('5 77') == '3')\nassert(solution('5 78') == '3')\nassert(solution('5 79') == '3')\nassert(solution('5 80') == '3')\nassert(solution('5 81') == '3')\nassert(solution('5 82') == '3')\nassert(solution('5 83') == '3')\nassert(solution('5 84') == '3')\nassert(solution('5 85') == '3')\nassert(solution('5 86') == '3')\nassert(solution('5 87') == '3')\nassert(solution('5 88') == '3')\nassert(solution('5 89') == '3')\nassert(solution('5 90') == '3')\nassert(solution('5 91') == '3')\nassert(solution('5 92') == '3')\nassert(solution('5 93') == '3')\nassert(solution('5 94') == '3')\nassert(solution('5 95') == '3')\nassert(solution('5 96') == '3')\nassert(solution('5 97') == '3')\nassert(solution('5 98') == '3')\nassert(solution('5 99') == '3')\nassert(solution('5 100') == '3')\nassert(solution('5 101') == '3')\nassert(solution('5 102') == '3')\nassert(solution('5 103') == '3')\nassert(solution('5 104') == '3')\nassert(solution('5 105') == '3')\nassert(solution('5 106') == '3')\nassert(solution('5 107') == '3')\nassert(solution('5 108') == '3')\nassert(solution('5 109') == '3')\nassert(solution('5 110') == '3')\nassert(solution('5 111') == '3')\nassert(solution('5 112') == '3')\nassert(solution('5 113') == '3')\nassert(solution('5 114') == '3')\nassert(solution('5 115') == '3')\nassert(solution('5 116') == '3')\nassert(solution('5 117') == '3')\nassert(solution('5 118') == '3')\nassert(solution('5 119') == '3')\nassert(solution('5 120') == '3')\nassert(solution('5 121') == '3')\nassert(solution('5 122') == '3')\nassert(solution('5 123') == '3')\nassert(solution('5 124') == '3')\nassert(solution('5 125') == '3')\nassert(solution('5 126') == '3')\nassert(solution('5 127') == '3')\nassert(solution('5 128') == '3"
    },
    {
        "number": 4304,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split(\" \")]\n    return \"1\" if (b - a) % 2 == 0 else \"2\"\n\nassert(solution(\"1 2\") == \"2\")\nassert(solution(\"10 13\") == \"2\")\nassert(solution(\"100 501\") == \"2\")\nassert(solution(\"-99 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"1 1\") == \"2\")\nassert(solution(\"100 501\") == \"2\")\nassert(solution(\"1001 4961\") == \"2\")\nassert(solution(\"1000 199\") == \"2\")\nassert(solution(\"2000 1\") == \"1\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-99 -1\") == \"2\")\nassert(solution(\"-100 -100\") == \"2\")\nassert(solution(\"3 3\") == \"2\")\nassert(solution(\"-2 -1\") == \"2\")\nassert(solution(\"-2 -1\") == \"2\")\nassert(solution(\"1 2\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")\nassert(solution(\"-1 -1\") == \"2\")"
    },
    {
        "number": 4304,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(' '))\n    return str(int(math.ceil(b-a)))\n"
    },
    {
        "number": 4304,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    x, y = [a, b], [b, a]\n    w, e = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    count = 0\n    while True:\n        for i in range(len(w)):\n            for j in range(len(e)):\n                if w[i] - x[0][j] == y[0][i] - x[1][j] and w[i] - x[0][j]!= 0 and w[i] - x[0][j]!= 1:\n                    count += 1\n                    w.pop(i)\n                    e.pop(j)\n                    break\n        if count == 0:\n            print(0)\n            return\n        if len(w) == 0:\n            print(count)\n            return\n        if len(e) == 0:\n            print(count)\n            return"
    },
    {
        "number": 4304,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b == 1:\n        return '0'\n    snow_depth = 1\n    while b - snow_depth > 0:\n        snow_depth += 1\n        b -= snow_depth\n    return str(snow_depth)"
    },
    {
        "number": 4304,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    res = 0\n    for i in range(a, b + 1):\n        res += i - 1\n    return str(res)"
    },
    {
        "number": 4304,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    east, west = map(int, stdin.split())\n    return str(max(0, (east-west+1)//2))"
    },
    {
        "number": 4304,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int((int(stdin) - 1) * int(stdin) / 2))"
    },
    {
        "number": 4304,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a > b:\n        a, b = b, a\n    return str(a * b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4304,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(' ')))\n    return str(a - b)"
    },
    {
        "number": 4305,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, n = [int(x) for x in stdin.split(\" \")]\n    m = n\n    while m > 0:\n        if s < m:\n            print(m)\n            return\n        s -= m\n        m -= 1\n    print(\"0\")\n    return\n\nprint(solution(input()))\n"
    },
    {
        "number": 4305,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    return str(H // A)"
    },
    {
        "number": 4305,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, A = [int(x) for x in stdin.split()]\n    attack = 1\n    while H > 0:\n        H = H - A\n        attack += 1\n    return str(attack)"
    },
    {
        "number": 4305,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n\n    count = 0\n    while H > 0:\n        H -= A\n        count += 1\n\n    return count\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4305,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()"
    },
    {
        "number": 4305,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int((10**4 - 1) / (10 - 1) + 1))"
    },
    {
        "number": 4305,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n\nimport sys\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    if H == 1:\n        return '0'\n    elif A == 0:\n        return '1'\n    return str(2 + H // A)"
    },
    {
        "number": 4305,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    health, attack = tuple(map(int, stdin.split()))\n    counter = 0\n    while health > 0:\n        health -= attack\n        counter += 1\n\n    return str(counter)"
    },
    {
        "number": 4305,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, A = [int(x) for x in stdin.split()]\n    m = H // A\n    if m == 0:\n        return '0'\n    elif m == 1:\n        return str(H - A)\n    else:\n        return str(m - 1)\n"
    },
    {
        "number": 4306,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    duration = map(int, stdin.split())\n    return str(abs(duration[0]-duration[2]) + abs(duration[1]-duration[3]))\n\nprint(solution(\"0 75 25 100\"))\n\n>>> 50\n"
    },
    {
        "number": 4306,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    return str(int(input[0]) + int(input[1]) + int(input[2]) - int(input[3]))"
    },
    {
        "number": 4306,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[-1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4306,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4306,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    alice, bob = tuple(map(int, stdin.split()))\n    return str(alice + bob)"
    },
    {
        "number": 4306,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    alice, bob = stdin.split(' ')\n    return str(int(alice) - int(bob))\n\n\nassert(solution(\"0 75 25 100\") == \"50\")\nassert(solution(\"0 75 25\") == \"50\")\nassert(solution(\"0 75\") == \"0\")\nassert(solution(\"0\") == \"0\")\nassert(solution(\"1 1\") == \"0\")\nassert(solution(\"0 0\") == \"0\")\nassert(solution(\"1 0\") == \"0\")\nassert(solution(\"1 1 1\") == \"0\")\nassert(solution(\"1 1 2\") == \"1\")\nassert(solution(\"1 1 2 3\") == \"2\")\nassert(solution(\"1 1 2 3 4\") == \"3\")\nassert(solution(\"1 1 2 3 4 5\") == \"4\")\nassert(solution(\"1 1 2 3 4 5 6\") == \"5\")\nassert(solution(\"1 1 2 3 4 5 6 7\") == \"6\")\nassert(solution(\"1 1 2 3 4 5 6 7 8\") == \"7\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9\") == \"8\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10\") == \"9\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11\") == \"10\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12\") == \"11\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13\") == \"12\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14\") == \"13\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\") == \"14\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\") == \"15\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\") == \"16\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\") == \"17\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"18\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") == \"19\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\") == \"20\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\") == \"21\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\") == \"22\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\") == \"23\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\") == \"24\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\") == \"25\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\") == \"26\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\") == \"27\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\") == \"28\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\") == \"29\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\") == \"30\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\") == \"31\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\") == \"32\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\") == \"33\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\") == \"34\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\") == \"35\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\") == \"36\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\") == \"37\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\") == \"38\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\") == \"39\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\") == \"40\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\") == \"41\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\") == \"42\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\") == \"43\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\") == \"44\")\nassert(solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33"
    },
    {
        "number": 4306,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = [int(n) for n in stdin.split()]\n    return str(max(a, b) - min(a, b) - max(c, d) + min(c, d))"
    },
    {
        "number": 4306,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return str(abs(A - B) + abs(C - D))"
    },
    {
        "number": 4306,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    a, b, c, d = map(int, stdin.strip().split(' '))\n    # Solve the problem\n    alice, bob = a + c, b + d\n    return str(alice - bob)"
    },
    {
        "number": 4306,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    return str(abs(a - b) + abs(c - d))"
    },
    {
        "number": 4307,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the count of the odd numbers with exactly eight positive divisors\n    in the range [1, N] (inclusive).\n    \"\"\"\n    N = int(stdin.readline().strip())\n    count = 0\n    for i in range(1, N+1):\n        if i == 1:\n            continue\n        if i % 2!= 0 and (i * (i + 1) * (i + 2) * (i + 3)) % (i * i * i) == 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4307,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ret = 0\n    for i in range(1, n + 1):\n        if is_prime(i):\n            if number_of_divisors(i) == 8:\n                ret += 1\n    return ret\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    count = 0\n    for i in range(1, number + 1):\n        if i % 2!= 0:\n            if len(set(i // j for j in range(1, i + 1))) == 8:\n                count += 1\n    print(count)"
    },
    {
        "number": 4307,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        if i % 2 == 1 and isPrime(i):\n            divisors = 0\n            for j in range(1, i + 1):\n                if i % j == 0:\n                    divisors += 1\n            if divisors == 8:\n                count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        if i % 2!= 0:\n            divisors = 1\n            for j in range(1, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    divisors += 2\n            if divisors == 8:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4307,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    # your code here\n    for i in range(1, int(stdin) + 1):\n        if i == 1:\n            continue\n        if isOdd(i) and haveDivisors(i, 8):\n            count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1 and i!= 1:\n            count = 0\n            for j in range(1, i):\n                if i % j == 0:\n                    count += 1\n            if count == 8:\n                result += 1\n    return str(result)"
    },
    {
        "number": 4307,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for n in range(1, int(stdin)+1) if n % 2!= 0 and len(primefactors(n)) == 8))\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = 0\n    for i in range(1, n+1):\n        if i % 2 == 1 and len(set(map(int, str(i)))) == 8:\n            c += 1\n    print(c)\n    return \"\""
    },
    {
        "number": 4307,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.read())\n    ans = 0\n    for i in range(1, n + 1):\n        if i > 1 and len(set(divisors(i))) == 8:\n            ans += 1\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,k = [int(x) for x in stdin.split(' ')]\n    array = sorted(random.sample(range(1,100),n))\n    array2 = sorted(random.sample(range(1,100),k))\n    return abs(array[-1] - array2[0])"
    },
    {
        "number": 4308,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return str(k - n)\n    else:\n        return str(n - k)\n"
    },
    {
        "number": 4308,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - k)"
    },
    {
        "number": 4308,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    crackers, users = stdin.split()\n    crackers, users = int(crackers), int(users)\n    crackers_received = sorted([(i, i * i) for i in range(1, crackers + 1)], key=lambda x: x[1], reverse=True)[:users]\n    crackers_received = [i[0] for i in crackers_received]\n    return str(min(crackers - i, i) for i in crackers_received)"
    },
    {
        "number": 4308,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n\"\"\"\n\"\"\"\n-----Solution-----\n\"\"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Return minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user.\n    >>> solution('7 3')\n    1\n    '''\n    N, K = stdin.strip().split()\n    N, K = int(N), int(K)\n    N -= 1\n    ans = 0\n    if K >= N:\n        return '0'\n    elif K == 0:\n        return '1'\n    else:\n        ans = 2\n        if K % 2 == 1:\n            ans += 1\n        ans += K // 2\n        return str(ans)"
    },
    {
        "number": 4308,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(i) for i in stdin.strip().split(' ')]\n    return str(abs(inputs[0] - inputs[1]))"
    },
    {
        "number": 4308,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(min(n - k, k))\n\nprint(solution(\"7 3\"))\n"
    },
    {
        "number": 4308,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split(\" \"))\n    return str(N-K)\n\nassert(solution(\"7 3\") == \"1\")\nassert(solution(\"10 3\") == \"5\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    if K > N:\n        K = N\n    max_crackers = 0\n    min_crackers = 0\n    for i in range(1, K + 1):\n        if max_crackers < 2 * i:\n            max_crackers = 2 * i\n        if min_crackers > 2 * i:\n            min_crackers = 2 * i\n    return str(abs(max_crackers - min_crackers))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4309,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N, N * 10):\n        if all(i % j == 0 for j in range(2, i)):\n            return str(i)"
    },
    {
        "number": 4309,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = int(stdin)\n    current_result = 1\n    for i in range(1, input_data):\n        if (input_data % i == 0) and (input_data // i in [1, 2, 3, 4, 5, 6, 7, 8, 9]):\n            current_result *= i\n    return str(current_result)"
    },
    {
        "number": 4309,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        if set(str(i)) == set(str(n)):\n            return str(i)\n\nprint(solution(input()))"
    },
    {
        "number": 4309,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n\nassert solution('111') == '111'\nassert solution('011') == '01'\nassert solution('999') == '999'\nassert solution('99988899') == '9988899'\nassert solution('999888899') == '99888899'\nassert solution('99988899888') == '99988899'\nassert solution('9998889988888999') == '99988899'\nassert solution('988899888899') == '988899'\nassert solution('98899888899') == '98899'\nassert solution('9988998899') == '99899'\nassert solution('998998899') == '99899'\nassert solution('9989988899') == '998998899'\nassert solution('99899888899') == '9989988899'\nassert solution('99899888888899') == '99899888899'\nassert solution('9989988888888899') == '99899888888899'\nassert solution('998998888888888899') == '9989988888888899'\nassert solution('99899888888888888899') == '998998888888888899'\nassert solution('998998888888888888899') == '9989988888888888899'\nassert solution('998998888888888888888899') == '9989988888888888888899'\nassert solution('9989988888888888888888888899') == '9989988888888888888888888899'\nassert solution('99899888888888888888888888888899') == '99899888888888888888888888888899'\nassert solution('998998888888888888888888888888888899') == '998998888888888888888888888888888899'\nassert solution('998998888888888888888888888888888888899') == '9989988888888888888888888888888888888899'\nassert solution('9989988888888888888888888888888888888889') == '99899888888888888888888888888888888888888899'\nassert solution('998998888888888888888888888888888888888889') == '998998888888888888888888888888888888888888888899'\nassert solution('99899888888888888888888888888888888888888889') == '9989988888888888888888888888888888888888888888888899'\nassert solution('9989988888888888888888888888888888888888888889') == '9989988888888888888888888888888888888888888888888889'\nassert solution('99899888888888888888888888888888888888888888888') == '998998888888888888888888888888888888888888888888888899'\nassert solution('99899888888888888888888888888888888888888888888888') == '998998888888888888888888888888888888888888888888888889'\nassert solution('99899888888888888888888888888888888888888888888888889') == '99899888888888888888888888888888888888888888888888888889'\nassert solution('998998888888888888888888888888888888888888888888888889') == '998998888888888888888888888888888888888888888888888888889'\nassert solution('9989988888888888888888888888888888888888888888888888889') == '998998888888888888888888888888888888888888888888888888889'\nassert solution('99899888888888888888888888888888888888888888888888888889') == '998998888888888888888888888888888888888888888888888888889'\nassert solution('998998888888888888888888888888888888888888888888888888889') == '9989988888888888888888888888888888888888888888888888888889'\nassert solution('9989988888888888888888888888888888888888888888888888888889') == '99899888888888888888888888888888888888888888888888888888889'\nassert solution('99899888888888888888888888888888888888888888888888888888889') == '99899888888888888888888888888888888888888888888888888888889'\nassert solution('998998888888888888888888888888888888888888888888888888888889') == '99899888888888888888888888888888888888888888888888888888889'\nassert solution('9989988888888888888888888888888888888888888888888888888888889') == '99899888888888888888888888888888888888888888888888888888889'\nassert solution('99899888888888888888888888888888888888888888888888888888888889') == '99899888888888888888888888888888888888888888888888888888889'\nassert solution('998998888888888888888888888888888888888888888888888888888888889') == '99899888888888888888888888888888888888888888888888888888889'\nassert solution('9989988888888888888888888888888888888888888888888888888888888889') == '99899888888888888888888888888888888888888888888888888888889'\nassert solution('99899888888888888888888888888888888888888888888888888888888888889') == '99899888888888888888888888888888888888888888888888888888889'\nassert solution('998998888888888888888888888888888888888888888888888888888888888889') == '99899888888888888888888888888888888888888888888888888888889'\nassert solution('9989988888888888888888888888888888888888888888888888888888888888889') == '99899888888888888888888888888888888888888888888888888888889'\nassert solution('99899888888888888888888888888888888888888888888888888888888888888889"
    },
    {
        "number": 4309,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    # 100\u4e07\u307e\u3067\u306e\u7a7a\u306e\u6570\u5217\u3092\u4f5c\u308b\n    # \u521d\u671f\u4f4d\u7f6e: 0,0,0,0,0,0,0,0,0,0\n    # \u305d\u306e\u6b21\u306f0,0,0,0,0,0,0,0,0,0\n    # \u305d\u306e\u6b21\u306f1,0,0,0,0,0,0,0,0,0\n    # \u305d\u306e\u6b21\u306f1,1,0,0,0,0,0,0,0,0\n    # \u305d\u306e\u6b21\u306f1,1,1,0,0,0,0,0,0,0\n    # \u305d\u306e\u6b21\u306f1,1,1,1,0,0,0,0,0,0\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,0,0,0,0,0\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,0,0,0,0\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,0,0,0\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,0,0\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,0\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1,1\n    # \u305d\u306e\u6b21\u306f1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 4309,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return ABC[n]\n\nABC = [\"ABC\" + str(i) for i in range(10)]"
    },
    {
        "number": 4309,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 1\n    while True:\n        if n < 100:\n            break\n        ans += 1\n        n //= 10\n    return str(ans)"
    },
    {
        "number": 4309,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N >= 999:\n        return '999'\n    else:\n        for i in range(999, 100, -1):\n            if ''.join(sorted(str(i))) == sorted(str(N)):\n                return str(i)\n        return '100'"
    },
    {
        "number": 4309,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    a = int(n)\n    while(n!= 0):\n        c = 0\n        c = n % 10\n        if c == 0:\n            break\n        else:\n            n = (n // 10)\n    if c == 0:\n        return '0'\n    return str(c)"
    },
    {
        "number": 4309,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    def is_same_digit_n(n: int) -> bool:\n        n_str = str(n)\n        return all(n_str[i] == n_str[i+1] for i in range(len(n_str)-1))\n\n    for i in range(10, n):\n        if is_same_digit_n(i):\n            print(i)\n            break"
    },
    {
        "number": 4310,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    task_cost_list = stdin.split(\" \")\n    task_cost_list = [int(x) for x in task_cost_list]\n    task_cost_list.sort()\n    print(sum(task_cost_list))"
    },
    {
        "number": 4310,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(x) for x in stdin.split(\" \")]\n    A = arr[0]\n    B = arr[1]\n    C = arr[2]\n\n    if A < B:\n        A, B = B, A\n\n    if A > C:\n        if A - C >= B:\n            return str(C)\n        elif A - C < B:\n            return str(A - C)\n    elif A == C:\n        return \"0\"\n    elif A < C:\n        return str(A - C)\n    elif A > C:\n        return str(C - A)\n"
    },
    {
        "number": 4310,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(x) for x in stdin.split()]\n    return str(min(sum(abs(A[i] - A[j]) for j in range(i + 1, len(A))) for i in range(len(A) - 1)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4310,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given three integers, print the minimum cost to complete all tasks.\n    \"\"\"\n    tasks = [int(num) for num in stdin.split()]\n    return min(sum(abs(tasks[i] - tasks[j]) for j in range(3)) for i in range(3))\n\nassert(solution(\"1 6 3\") == \"5\")\nassert(solution(\"1 4 3\") == \"4\")\nassert(solution(\"3 1 4\") == \"2\")\nassert(solution(\"3 2 4\") == \"3\")\nassert(solution(\"3 4 5\") == \"4\")\nassert(solution(\"3 4 6\") == \"4\")\n"
    },
    {
        "number": 4310,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    print(sum(abs(A[i] - A[i - 1]) for i in range(2, len(A))))"
    },
    {
        "number": 4310,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split(\" \")))\n    print(sum(abs(a1 - a2) for a1, a2 in zip(A, A[1:])) + A[0])"
    },
    {
        "number": 4310,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    # Complete the first task at cost 0.\n    cost = a[0]\n    # Now, complete the second task at cost 1.\n    a = a[1:]\n    cost += abs(a[1] - a[0])\n    # Now, complete the third task at cost 2.\n    a = a[2:]\n    cost += abs(a[1] - a[0])\n    # Now, complete the fourth task at cost 3.\n    a = a[3:]\n    cost += abs(a[1] - a[0])\n    # Finally, complete the fifth task at cost 4.\n    a = a[4:]\n    cost += abs(a[1] - a[0])\n    return str(cost)"
    },
    {
        "number": 4310,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Create a list with the inputs\n    a = [int(item) for item in stdin.split()]\n    # Create a list with the first task completed\n    a1 = [0 for item in range(3)]\n    # Create a list with the second task completed\n    a2 = [0 for item in range(3)]\n    # Create a list with the third task completed\n    a3 = [0 for item in range(3)]\n    # Create a list with the final result\n    final = []\n    # Calculate the sum of the absolute value of the differences between the first task completed and the first task\n    for i in range(1, len(a)):\n        a1[0] += abs(a[i] - a[i - 1])\n    # Calculate the sum of the absolute value of the differences between the second task completed and the first task\n    for i in range(1, len(a)):\n        a2[0] += abs(a[i] - a[i - 1])\n    # Calculate the sum of the absolute value of the differences between the third task completed and the first task\n    for i in range(1, len(a)):\n        a3[0] += abs(a[i] - a[i - 1])\n    # Calculate the sum of the absolute value of the differences between the first task completed and the second task\n    for i in range(1, len(a)):\n        a1[1] += abs(a[i] - a[i - 1])\n    # Calculate the sum of the absolute value of the differences between the second task completed and the second task\n    for i in range(1, len(a)):\n        a2[1] += abs(a[i] - a[i - 1])\n    # Calculate the sum of the absolute value of the differences between the third task completed and the second task\n    for i in range(1, len(a)):\n        a3[1] += abs(a[i] - a[i - 1])\n    # Calculate the sum of the absolute value of the differences between the first task completed and the third task\n    for i in range(1, len(a)):\n        a1[2] += abs(a[i] - a[i - 1])\n    # Calculate the sum of the absolute value of the differences between the second task completed and the third task\n    for i in range(1, len(a)):\n        a2[2] += abs(a[i] - a[i - 1])\n    # Calculate the sum of the absolute value of the differences between the third task completed and the third task\n    for i in range(1, len(a)):\n        a3[2] += abs(a[i] - a[i - 1])\n    # Select the final result\n    final = min(a1[2], a2[2], a3[2])\n    return str(final)\n"
    },
    {
        "number": 4310,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        A = list(map(int, stdin.readline().strip().split(\" \")))\n        cost = 0\n        cost += abs(A[1] - A[0])\n        cost += abs(A[2] - A[1])\n        print(cost)"
    },
    {
        "number": 4310,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(n) for n in stdin.split()]\n    a = sorted(A)\n    b = a[2] - a[1]\n    return str(sum(a))"
    },
    {
        "number": 4311,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s: int = int(stdin)\n    if s % 2 == 0:\n        return str(s // 2)\n    return str(3 * s + 1)"
    },
    {
        "number": 4311,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s % 2 == 0:\n        return \"2\"\n    else:\n        return \"5\""
    },
    {
        "number": 4311,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4311,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4311,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    for n in range(1,s+1):\n        if n%2==0:\n            print(n/2)\n        else:\n            print(3*n+1)\n    return"
    },
    {
        "number": 4311,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4311,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    a = [int(i) for i in s]\n    a.sort()\n    n = len(a)\n    if n == 0:\n        return \"0\"\n    if a[0] == 1:\n        return str(n)\n    for i in range(1, n):\n        if a[i] % 2 == 0:\n            continue\n        if a[i] > a[i - 1] * 2:\n            return str(i)\n    return str(n)"
    },
    {
        "number": 4311,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4311,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s % 2:\n        return 3 * s + 1\n    else:\n        return s // 2\n"
    },
    {
        "number": 4311,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin.strip())\n    if stdin % 2 == 0:\n        return str(int(stdin/2))\n    else:\n        return str(int((3*stdin)+1))\n\nassert(solution(8) == \"5\")\nassert(solution(4) == \"2\")\nassert(solution(2) == \"1\")\nassert(solution(1) == \"1\")\nassert(solution(4) == \"2\")\nassert(solution(2) == \"1\")\nassert(solution(1) == \"1\")\nassert(solution(4) == \"2\")\nassert(solution(2) == \"1\")\nassert(solution(1) == \"1\")\n\n\"\"\"\n\ns = int(input())\n"
    },
    {
        "number": 4312,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takahashi will have a battle using his monsters.\n    The health and strength of Takahashi's monster are A and B, respectively, and those of Aoki's monster are C and D, respectively.\n    The two monsters will take turns attacking, in the order Takahashi's, Aoki's, Takahashi's, Aoki's,...\n    Here, an attack decreases the opponent's health by the value equal to the attacker's strength.\n    The monsters keep attacking until the health of one monster becomes 0 or less.\n    The person with the monster whose health becomes 0 or less loses, and the other person wins.\n    If Takahashi will win, print Yes; if he will lose, print No.\n    '''\n    # Stdin is divided by whitespace\n    A, B, C, D = [int(i) for i in stdin.split(' ')]\n    if A > B:\n        A, B = B, A\n\n    if A > C:\n        A, C = C, A\n    if A > D:\n        A, D = D, A\n    if B > C:\n        B, C = C, B\n    if B > D:\n        B, D = D, B\n    if C > D:\n        C, D = D, C\n    if A == B == C == D:\n        return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int, stdin.split())\n    if B > D:\n        A,B,C,D = C,D,A,B\n    if A > D:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4312,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4312,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4312,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    monster1, monster2 = stdin.split(\" \")\n    return \"Yes\" if int(monster1) < int(monster2) else \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    A, B, C, D = map(int, stdin)\n    if A > B:\n        A, B = B, A\n    if C > D:\n        C, D = D, C\n    while A <= C:\n        A += B\n        C -= D\n    if A < C:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4312,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_monster, aoki_monster, takahashi_health, aoki_health = [int(x) for x in stdin.split()]\n    while takahashi_health > 0 and aoki_health > 0:\n        if takahashi_health > aoki_monster * aoki_health:\n            aoki_health -= takahashi_monster * takahashi_health\n        else:\n            takahashi_health -= aoki_monster * aoki_health\n            aoki_health = 0\n    return \"Yes\" if takahashi_health > 0 else \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4313,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    gems = list(map(int, stdin.readline().strip().split()))\n    costs = list(map(int, stdin.readline().strip().split()))\n\n    max_gems = []\n    for gem, cost in zip(gems, costs):\n        max_gems.append(gem - cost)\n\n    print(max(max_gems))"
    },
    {
        "number": 4313,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4313,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string of gems, find the maximum possible value of X-Y\n    \"\"\"\n    N = int(stdin.readline().strip())\n    GemList = [int(gem) for gem in stdin.readline().strip().split()]\n    CostList = [int(cost) for cost in stdin.readline().strip().split()]\n    X = sum(GemList)\n    Y = sum(CostList)\n    if X - Y < 0:\n        return \"0\"\n    else:\n        return str(X - Y)"
    },
    {
        "number": 4313,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get the maximum possible value of X-Y.\n\n    >>> solution(\"3\\n10 2 5\\n6 3 4\")\n    '5'\n    >>> solution(\"3\\n10 2 5\\n6 7 8\")\n    '6'\n    >>> solution(\"7\\n2 3 1 8 7 6 1 2\")\n    '6'\n    \"\"\"\n    n, *gems = [int(x) for x in stdin.strip().split()]\n    costs, vals = [], []\n    for i in range(n):\n        costs.append(int(stdin.readline()))\n        vals.append(int(stdin.readline()))\n    costs = sorted(costs)\n    gems = sorted(gems)\n    cumsum = 0\n    for i in range(n):\n        cumsum += gems[i]\n        vals[i] -= costs[i]\n        if cumsum - vals[i] >= 0:\n            cumsum -= vals[i]\n        else:\n            break\n    return str(cumsum)\n"
    },
    {
        "number": 4313,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    gem_val = [int(e) for e in stdin.readline().split()]\n    gem_cost = [int(e) for e in stdin.readline().split()]\n    max_cost = 0\n    for i in range(n):\n        if gem_cost[i] + max_cost > 50:\n            max_cost += 50 - gem_cost[i]\n            break\n        else:\n            max_cost += gem_cost[i]\n    print(max_cost)"
    },
    {
        "number": 4313,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, gem_value, gem_cost = map(int, stdin.split(\" \"))\n    gems = sorted(zip(gem_value, gem_cost))\n    gems.reverse()\n    gem_value, gem_cost = list(zip(*gems))\n    gem_value = list(gem_value)\n    gem_cost = list(gem_cost)\n    max_value = 0\n    for i in range(N):\n        cost_value = gem_value[i] - gem_cost[i]\n        if max_value < cost_value:\n            max_value = cost_value\n    return str(max_value)"
    },
    {
        "number": 4313,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    gems = list(map(int, stdin.split()[1:]))\n    costs = list(map(int, stdin.split()[0].split()))\n    d = {v: i for i, v in enumerate(gems)}\n    cost_sum = sum(costs)\n    result = 0\n    for i, v in enumerate(gems):\n        if d[v] > i:\n            continue\n        elif d[v] + i < len(gems):\n            result += gems[d[v] + i] * costs[i]\n        else:\n            result += gems[i] * costs[i]\n    return str(cost_sum - result)\n\nprint(solution(stdin.read()))\n\n\"\"\"\n\nimport sys\n\nn, cost = list(map(int, sys.stdin.readline().split()))\ngems = sorted(list(map(int, sys.stdin.readline().split())))\ncosts = list(map(int, sys.stdin.readline().split()))\n\nd = {v: i for i, v in enumerate(gems)}\ncost_sum = sum(costs)\nresult = 0\nfor i, v in enumerate(gems):\n    if d[v] > i:\n        continue\n    elif d[v] + i < len(gems):\n        result += gems[d[v] + i] * costs[i]\n    else:\n        result += gems[i] * costs[i]\nprint(cost_sum - result)\n"
    },
    {
        "number": 4313,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    gem_values = list(map(int, stdin.readline().split()))\n    gem_costs = list(map(int, stdin.readline().split()))\n\n    # calculate values of gems obtained and their costs\n    gem_values_and_costs = list(zip(gem_values, gem_costs))\n\n    # we need to choose max_cost gems in such a way that X-Y is maximized\n    # in this case, we will try to get an exact amount of gems with highest\n    # costs. this will work as follows:\n    # X - Y = Y * max_cost - X * (max_cost - 1)\n    # for example, if we have 3 gems and 3 costs (10, 5, 2), we can get\n    # 2 gems with 10 cost and 1 with 5 cost, but we need 1 gem with 2 cost\n    # so, when we get all 3 gems, we get 3 gems with 2 cost and 1 with 10 cost\n    # and in this case, X-Y is maximized, so we choose 2 gems with 10 cost\n    # and 1 with 2 cost.\n    # therefore, we should choose gems with highest costs.\n\n    # first, get the max cost\n    max_cost = max(gem_costs)\n\n    # then, get the gems with highest costs\n    gems_with_highest_costs = [g for g, c in gem_values_and_costs if c == max_cost]\n\n    # now, get the max value\n    max_value = sum(gem_values) - sum(gems_with_highest_costs)\n\n    return str(max_value)\n"
    },
    {
        "number": 4313,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split()[0]\n    V = stdin.split()[1:]\n    C = stdin.split()[2:]\n    v = [int(i) for i in V]\n    c = [int(i) for i in C]\n\n    if sum(v) < sum(c):\n        return \"NO\"\n    else:\n        return str(sum(v) - sum(c))"
    },
    {
        "number": 4313,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gems = stdin.split()\n    gem_costs = [int(gems[i]) for i in range(n)]\n    total_cost = int(stdin)\n    gems_count = [0] * n\n    costs_remaining = gem_costs[:]\n    remaining_cost = total_cost\n    max_cost = None\n    for i in range(n):\n        cur_cost = costs_remaining.pop(0)\n        if remaining_cost >= cur_cost:\n            remaining_cost -= cur_cost\n            gems_count[i] = 1\n        elif max_cost is None:\n            max_cost = remaining_cost\n            gems_count[i] = max_cost // cur_cost\n            remaining_cost = max_cost % cur_cost\n        else:\n            gems_count[i] = max_cost // cur_cost\n            remaining_cost = max_cost % cur_cost\n\n    return''.join([str(gems_count[i]) for i in range(n)])"
    },
    {
        "number": 4314,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = list(map(int, stdin.strip().split()))\n    H = n[0]\n    W = n[1]\n    grid = [list(map(str, stdin.strip().split())) for _ in range(H)]\n    board = [['.'] * W for _ in range(H)]\n    for row in range(H):\n        for col in range(W):\n            board[row][col] = grid[row][col]\n    print(board)\n    return ''.join([''.join(row) for row in board])"
    },
    {
        "number": 4314,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4314,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4314,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4314,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n_m = stdin.split('\\n')\n    h, w = map(int, n_m[0].split())\n    m = n_m[1:]\n\n    def remove_row(m):\n        # find the index of the first row that contains only white squares\n        for i, row in enumerate(m):\n            if all(x == '.' for x in row):\n                return i, row\n        raise ValueError('no white rows')\n\n    def remove_column(m):\n        # find the index of the first column that contains only white squares\n        for j, col in enumerate(zip(*m)):\n            if all(x == '.' for x in col):\n                return j, col\n        raise ValueError('no white columns')\n\n    def compress(m):\n        # remove empty rows and columns, remove white rows and columns\n        i, row = remove_row(m)\n        j, col = remove_column(zip(*m))\n        if not row and not col:\n            return\n        if not row:\n            return compress(m[:i]) + compress(m[i + 1:])\n        if not col:\n            return compress(zip(*m[:j]) + zip(*m[j + 1:]))\n        return [['.'] * w + row + ['.'] * (w - len(row)) for row in m[i:i + h]] + [['.'] * w + col + ['.'] * (w - len(col)) for col in zip(*m[j:j + h])]\n\n    return '\\n'.join(''.join(row) for row in compress(m))"
    },
    {
        "number": 4314,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    row_count, column_count = map(int, stdin.split())\n    original_grid = [list(stdin.strip()) for _ in range(row_count)]\n    grid = [[None for _ in range(column_count)] for _ in range(row_count)]\n    for row in range(row_count):\n        for column in range(column_count):\n            if original_grid[row][column] == '#':\n                grid[row][column] = '#'\n    return '\\n'.join(''.join(row) for row in grid)"
    },
    {
        "number": 4314,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(x) for x in stdin.split()]\n    grid = [stdin[i:i + W] for i in range(0, len(stdin), W)]\n    for row in grid:\n        if all(c == '.' for c in row):\n            grid = grid[:grid.index(row)] + grid[grid.index(row) + 1:]\n    for column in zip(*grid):\n        if all(c == '.' for c in column):\n            for row in grid:\n                grid.remove(row)\n    return '\\n'.join(''.join(row) for row in grid)"
    },
    {
        "number": 4314,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4314,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(x) for x in stdin.split()]\n    grid = [stdin.split()[i * W:(i + 1) * W] for i in range(H)]\n    for row in grid:\n        print(''.join(row))"
    },
    {
        "number": 4314,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return ''"
    },
    {
        "number": 4315,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    r = int(stdin.readline())\n    return \"%.2f\"%(3.1415926535897932384 * r)\n\nprint(solution(None))\n\"\"\"\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(2*pi*float(stdin),2))"
    },
    {
        "number": 4315,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    R: int = int(stdin)\n    if not 1 <= R <= 100:\n        return 'Out of range'\n    return '%.8f' % (pi * 2 * R)"
    },
    {
        "number": 4315,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    R: int = int(stdin.readline().strip())\n    return str(round(2*math.pi*R, 2))"
    },
    {
        "number": 4315,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    return \"6.28318530717958623200\""
    },
    {
        "number": 4315,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes a string from stdin containing a number R.\n    Returns the circumference of a circle of radius R.\n    '''\n    R = int(stdin)\n    return str(2*3.14159265359 * R)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4315,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4315,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    R: int = int(stdin)\n\n    return format(3.14 * 2 * R, '.2f')"
    },
    {
        "number": 4315,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_line = stdin.strip()\n    assert(input_line)\n    radius = int(input_line)\n    assert(radius >= 1)\n    return str(round(math.pi * radius * radius, 3))"
    },
    {
        "number": 4315,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.strip())\n    return format(2*3.141592653589793*R, '.8f')"
    },
    {
        "number": 4316,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if (stdin.count(stdin[0]) == 2) and (stdin.count(stdin[3]) == 2) else 'No'"
    },
    {
        "number": 4316,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    N = int(stdin)\n    print(\"Yes\" if 2 in [stdin.count(i) for i in stdin] else \"No\")"
    },
    {
        "number": 4316,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.replace('AS', '').replace('AA', '').replace('BB', '').replace('SS', '').replace('LL', '').replace('TT', ''), ''\n    return 'Yes' if A + A == B + B else 'No'"
    },
    {
        "number": 4316,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s.count(s[0]) == 2 and s.count(s[-1]) == 2:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if len(stdin)!= 4:\n        return \"error\"\n    if stdin.count(stdin[0]) == 2 and stdin.count(stdin[1]) == 2:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(' ')\n    d = {}\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    if len(d) == 2 and d[s[0]] == 2 and d[s[3]] == 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s.count(s[0]) == 2 and s.count(s[1]) == 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"SSAA\")\n    'Yes'\n    >>> solution(\"SSAB\")\n    'No'\n    >>> solution(\"SSAC\")\n    'No'\n    >>> solution(\"ASSA\")\n    'Yes'\n    \"\"\"\n    counts = collections.Counter(stdin)\n    return 'Yes' if counts['A'] == 2 and counts['S'] == 2 else 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 4316,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if stdin.count(stdin[0]) == 2 and stdin.count(stdin[3]) == 2:\n        return \"Yes\"\n    return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4317,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(' ')))\n    return str(max(a + b, a - b, a * b))"
    },
    {
        "number": 4317,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num1, num2 = map(int, stdin.split())\n    return (str(max(num1 + num2, num1 - num2, num1 * num2)) + \" \" +\n            str(max(num1 - num2, num1 + num2, num1 * num2)))"
    },
    {
        "number": 4317,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The goal of this problem is to solve a very simple school\n    math equation. This is a very popular problem in school.\n\n    The school math equation is :\n    A + B = 2.5\n    A - B = -1.5\n    A * B = 2\n    \"\"\"\n    a, b = [int(n) for n in stdin.split(' ')]\n    return \"%.1f\" % (a + b)\n"
    },
    {
        "number": 4317,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return \"\".join(max(str(a + b), str(a - b), str(a * b), sep=\"\\n\"))\n"
    },
    {
        "number": 4317,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max([a + b, a - b, a * b], key=int)"
    },
    {
        "number": 4317,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # A + B, A - B, A * B\n    _, a, b = [int(x) for x in stdin.split(' ')]\n    print(max(a + b, a - b, a * b))"
    },
    {
        "number": 4317,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns a string, which is the largest number among A + B, A - B, and A \\times B.\n    >>> solution('1 2')\n    '10'\n    '''\n    A, B = map(int, stdin.split())\n    return max(str(A + B), str(A - B), str(A * B))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4317,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(\" \")]\n\n    print(max(A + B, A - B, A * B))\n    return \"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Accepts a string from stdin.\n\n    Returns the largest number among A + B, A - B, and A \\times B.\n    \"\"\"\n    A, B = map(int, stdin.split())\n    return str(max(A + B, A - B, A * B))"
    },
    {
        "number": 4317,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    print(max(a + b, a - b, a * b))\n"
    },
    {
        "number": 4318,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split(' ')]\n\n    inns = 0\n    for i in range(1, len(arr)):\n        if arr[i-1] <= arr[i]:\n            inns += 1\n\n    return str(inns)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4318,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = [int(num) for num in stdin.split()]\n    count = 0\n    for i in range(1, n):\n        if h[i] <= h[i-1]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4318,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, heights = stdin.splitlines()\n    max_height = max(map(int, heights.split()))\n    h, c = max_height, 0\n    while h > 0:\n        h -= 1\n        if h < max_height:\n            break\n        c += 1\n    return str(c)"
    },
    {
        "number": 4318,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 4318,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inns = [int(n) for n in stdin.split()]\n\n    return str(inns.count(1) + inns.count(2) + inns.count(3))\n"
    },
    {
        "number": 4318,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = [int(x) for x in stdin.readline().split()]\n\n    def can_see_ocean(i: int, j: int) -> bool:\n        if i == 1:\n            return True\n        if j == 1:\n            return True\n        return h[i - 1] <= h[j] and h[j - 1] <= h[i]\n\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            if can_see_ocean(i, j):\n                count += 1\n    return str(count)"
    },
    {
        "number": 4318,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    heights = list(map(int, stdin.split()))\n\n    # invariant: heights[i] is the height of the i-th mountain from the west\n    # height of the first mountain is always equal to the max of the heights\n    # the height of the i-th mountain from the west is equal to the max of all heights of the inns\n    # that have not yet seen the ocean from the inn at the top of the i-th mountain\n    seen = [0] * m\n    seen[0] = 1\n    max_height = heights[0]\n    for h in heights:\n        max_height = max(h, max_height)\n        for i in range(m):\n            if i == 0:\n                seen[i] = 1\n                continue\n            if h <= seen[i - 1]:\n                seen[i] += 1\n    return str(seen.count(max_height))"
    },
    {
        "number": 4318,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    M = [int(x) for x in lines[1].split()]\n    \n    if M[0] >= M[1]:\n        print(1)\n        return\n\n    c = 0\n    for i in range(1, N):\n        if M[i] <= M[i - 1]:\n            c += 1\n    print(c)"
    },
    {
        "number": 4318,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *h = map(int, stdin.split())\n    print(sum(i - j for i, j in zip(h, h[1:])))"
    },
    {
        "number": 4318,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4319,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def step_count(stairs: list[int]) -> list[int]:\n        result = [1]\n        for i in range(1, len(stairs)):\n            if stairs[i] - stairs[i - 1] > 1:\n                result.append(result[-1] + 1)\n            else:\n                result.append(1)\n        return result\n\n    def count_stairs(stairs: list[int]) -> int:\n        result = 0\n        for i in range(1, len(stairs)):\n            if stairs[i] - stairs[i - 1] == 1:\n                result += 1\n        return result\n\n    n = int(stdin.readline())\n    stairs = list(map(int, stdin.readline().split()))\n    stairs_steps = step_count(stairs)\n\n    print(count_stairs(stairs_steps))\n    print(*stairs_steps)\n\n    return '\\n'.join(stdin.read().split('\\n')[0:-1])\n\nimport sys\nfrom io import StringIO\n\nsolution(StringIO(sys.stdin.read()))"
    },
    {
        "number": 4319,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_of_steps = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().strip().split()))\n    stairs = []\n    for i in range(number_of_steps):\n        stairs.append(0)\n\n    for i in range(number_of_steps):\n        stairs[i] = stairs[i] + numbers[i]\n\n    stairs.sort()\n    result = []\n    current = 0\n    previous = 0\n    for i in range(number_of_steps):\n        if stairs[i] - previous == 1:\n            stairs[i] = current + 1\n            previous = stairs[i]\n            current = 0\n        else:\n            current += 1\n    stairs.sort()\n    result = \"\"\n    for i in stairs:\n        result = result + str(i) + \" \"\n    return result[:-1]"
    },
    {
        "number": 4319,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    #print(nums)\n    res = [0] * n\n    #print(res)\n    stack = []\n    ans = []\n    for num in nums:\n        while len(stack) > 0 and stack[-1] > num:\n            res[stack.pop() - 1] = num\n        stack.append(num)\n        ans.append(stack[-1] - res[-1])\n    print(res)\n    print(ans)\n    return''.join(map(str, res))"
    },
    {
        "number": 4319,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stairs = [int(x) for x in stdin.readline().split()]\n    stairs.sort()\n    stairs.reverse()\n    _stairs = stairs.copy()\n    answers = [None] * n\n    steps = [0] * n\n    answers[0] = 0\n    steps[0] = 1\n    for i in range(1, n):\n        for j in range(0, i):\n            if _stairs[j] + 1 == _stairs[i]:\n                answers[i] = j + 1\n                steps[i] = steps[j] + 1\n    for i in range(1, n):\n        steps[i] += steps[i-1]\n    return \"\\n\".join(map(str, steps))\n\nassert solution(\"7\\n1 2 3 1 2 3 4\") == \"2\\n3 4\"\nassert solution(\"4\\n1 1 1 1\") == \"4\\n1 1 1 1\"\nassert solution(\"5\\n1 2 1 2 1\") == \"1\\n5\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4319,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline().strip())\n    stairs = [int(x) for x in stdin.readline().strip().split()]\n    result = [0] * count\n    stairs.sort(reverse=True)\n    result[0] = 1\n    for i in range(1, count):\n        if stairs[i] > stairs[i - 1]:\n            result[i] = result[i - 1] + 1\n    return''.join([str(x) for x in result])"
    },
    {
        "number": 4319,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_stairs = int(stdin.readline().strip())\n\n    stairs = [int(x) for x in stdin.readline().strip().split(\" \")]\n\n    stairs_data = {x: stairs.count(x) for x in set(stairs)}\n\n    stairs_list = sorted(list(stairs_data.keys()))\n\n    stairs_list.reverse()\n\n    result = []\n\n    for i in stairs_list:\n        result.append(stairs_data[i])\n\n    return \" \".join([str(x) for x in result])\n"
    },
    {
        "number": 4319,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    stairs = sorted(list(map(int, stdin.readline().strip().split(\" \"))))\n    print(stairs)\n    print(stairs.index(stairs[0]))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4319,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stairs = [int(stdin.readline()) for _ in range(n)]\n    stairs.sort()\n    print(stairs.count(stairs[0]))\n    return ''\n"
    },
    {
        "number": 4319,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(num) for num in stdin.readline().split()]\n    stairs = [[] for _ in range(n + 1)]\n    stairs[0] = [1]\n    for i in range(n):\n        for j in range(nums[i]):\n            stairs[i + 1].append(stairs[i][j] + stairs[i][j + 1])\n    return''.join(str(stairs[n]) for n in range(n))"
    },
    {
        "number": 4320,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        k = int(math.log2(n)) + 1\n        if 2 ** (k-1) == n:\n            print(k)\n        else:\n            print(1)"
    },
    {
        "number": 4320,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 1\n    k = 2\n    while True:\n        if x + 2*x + 4*x == n:\n            return str(x)\n        elif x + 2*x + 4*x > n:\n            break\n        else:\n            x += 2*x + 4*x\n            k += 1\n    return str(x)\n\n\n-----"
    },
    {
        "number": 4320,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    def get_k(x):\n        n, k = x, 0\n        while n >= 2:\n            n = n / 2\n            k += 1\n        return k\n    for i in range(int(stdin.readline().strip())):\n        x = int(stdin.readline().strip())\n        print(get_k(x))"
    },
    {
        "number": 4320,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    testcases = int(stdin.readline())\n    for _ in range(testcases):\n        x = int(stdin.readline())\n        k = int(stdin.readline())\n        while x < k:\n            x += 2 * x\n            k += 1\n        print(x)"
    },
    {
        "number": 4320,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    k = 2\n    result = []\n    while (k > 1):\n        x = (n - 4 ** (k - 1)) // (2 ** (k - 2))\n        if (x < k):\n            result.append(x)\n            k -= 1\n        else:\n            result.append(k)\n    return''.join([str(i) for i in result])\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n3\\n3\")\n    '1\\n2\\n1'\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        for k in range(2, n):\n            x = n - 2 * n % k\n            if x < n:\n                break\n        if x == n:\n            print(k)\n            continue\n        x = n - 2 * x\n        if x == n:\n            print(k)\n            continue\n        print(x)\n"
    },
    {
        "number": 4320,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4320,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    x = 1\n    while True:\n        if n - 2 ** (k - 1) * x == 0:\n            return str(x)\n        k += 1\n        x += 2\n\nprint(solution(input()))\n"
    },
    {
        "number": 4320,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #t = int(stdin.readline().strip())\n    #for _ in range(t):\n    #    n = int(stdin.readline().strip())\n    #    x = 1\n    #    k = 1\n    #    while x * (x + 2 * x) / 2 <= n:\n    #        x += 2\n    #        k += 1\n    #    print(k)\n\n    n = int(stdin.readline().strip())\n    while n % 2 == 0:\n        n /= 2\n    if n == 1:\n        print(1)\n        return\n    k = 1\n    while (n - 4 * k * k) % (2 * k) == 0:\n        k += 1\n    print(2 ** k)\n\nsolution(stdin)"
    },
    {
        "number": 4321,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    while k > 0:\n        if n % 10 == 1:\n            res += n % 10\n            n = int(n / 10)\n        else:\n            n = n // 10\n        k -= 1\n    return str(res)\n\nprint(solution(input()))"
    },
    {
        "number": 4321,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    while count < k:\n        n -= 1\n        if n == 0:\n            n = int(n/10)\n        count += 1\n    return n"
    },
    {
        "number": 4321,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    def test_normal(self):\n        self.assertEqual(solution(\"512 4\"), \"50\")"
    },
    {
        "number": 4321,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.strip().split(' ')\n    return str(int(n) - int(k))\n\nprint(solution(input()))"
    },
    {
        "number": 4321,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    ans = n\n    for _ in range(k):\n        ans -= 1\n    return str(ans)"
    },
    {
        "number": 4321,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = n\n    for _ in range(k):\n        result -= 1\n        if result < 0:\n            result = (result % 10) + 1\n    return str(result)\n\nprint(solution(input()))\n\n\"\"\"\n\nn, k = map(int, input().split())\n\nresult = n\nfor _ in range(k):\n    result -= 1\n    if result < 0:\n        result = (result % 10) + 1\n\nprint(result)\n"
    },
    {
        "number": 4321,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split(\" \"))\n    n = str(n)\n    for i in range(k):\n        if n[-1]!= \"0\":\n            n = str(int(n) - 1)\n        else:\n            n = str(int(n) // 10)\n    return n"
    },
    {
        "number": 4321,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    for _ in range(k):\n        last = n % 10\n        if last:\n            n //= 10\n        else:\n            n //= 100\n    \n    return str(n)"
    },
    {
        "number": 4321,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nTESTED\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    if n == 1:\n        return str(1)\n    result = 0\n    for i in range(k):\n        if n % 10 == 0:\n            n //= 10\n        else:\n            n -= 1\n        result += 1\n    return str(n)"
    },
    {
        "number": 4322,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    k = int(stdin[0])\n    n = int(stdin[1])\n    a = [int(stdin[i]) for i in range(2, n + 2)]\n    return str(k) + '\\n' +''.join(map(str, solution_2(n, a)))\n\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 1:\n        return str(1)\n    a = list(map(int, stdin.readline().strip().split()))\n    if max(a) - min(a) <= 1:\n        return str(len(a))\n    res = []\n    left, right = 0, len(a) - 1\n    while left <= right:\n        if abs(a[left] - a[right]) <= 1:\n            res.append(a[left])\n            res.append(a[right])\n            left += 1\n            right -= 1\n        elif a[left] < a[right]:\n            res.append(a[left])\n            left += 1\n        else:\n            res.append(a[right])\n            right -= 1\n    return str(len(res)) + '\\n' +''.join(map(str, res[::-1]))\n\nassert(solution('''7\n4 3 5 1 2 2 1\n''') == '5\\n2 1 1 2 3\\n')\nassert(solution('''5\n3 7 5 1 5\n''') == '2\\n5 5\\n')\nassert(solution('''3\n5 1 4\n''') == '2\\n4 5\\n')\nassert(solution('''7\n2 2 3 2 1 2 2\n''') == '7\\n1 2 2 2 2 3 2\\n')\nassert(solution('''4\n6 4 1 2 1 1\n''') == '4\\n4 1 1 1 1\\n')\nprint(solution('''9\n5 4 2 2 2 2 5 3 1 1\n'''))\n"
    },
    {
        "number": 4322,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = sorted(a)\n    res = [b[0], b[-1]]\n    print(res)\n    return \" \".join(map(str, res))\n\nassert solution('''7\n4 3 5 1 2 2 1''') == \"5 1 1 2 3\"\nassert solution('''5\n3 7 5 1 5''') == \"2 1 1 2 3\"\nassert solution('''3\n5 1 4''') == \"2 5 5\""
    },
    {
        "number": 4322,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            s += 1 if abs(a[i] - a[j]) <= 1 else 0\n    return f'{s}'\n\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n < 1 or n > 100:\n        raise Exception('Invalid number of people')\n    height_list = list(map(int, stdin.readline().strip().split()))\n    if len(height_list)!= n:\n        raise Exception('Invalid number of people')\n    sorted_height_list = sorted(height_list)\n    min_height = sorted_height_list[0]\n    min_idx = 0\n    max_height = sorted_height_list[-1]\n    max_idx = len(sorted_height_list) - 1\n    if min_height == max_height:\n        return 1\n    while min_idx < max_idx:\n        if sorted_height_list[min_idx] + 1 == sorted_height_list[max_idx]:\n            min_idx += 1\n            max_idx -= 1\n        else:\n            break\n    if min_idx < max_idx:\n        circle_size = max_idx - min_idx + 1\n        result = [sorted_height_list[i] for i in range(min_idx, max_idx + 1)]\n        return str(circle_size) + '\\n' +''.join(map(str, result))\n    else:\n        return 1\n"
    },
    {
        "number": 4322,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    res = [a[0]]\n    for i in range(1, n):\n        if abs(a[i] - res[-1]) <= 1:\n            res.append(a[i])\n        else:\n            break\n\n    res_str = str(len(res)) +'' +''.join(map(str, res))\n    print(res_str)\n    return res_str\n\n\nimport sys"
    },
    {
        "number": 4322,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = [int(x) for x in stdin.readline().strip().split(\" \")]\n\n    def heuristic(n):\n        return abs(h[n] - h[n + 1])\n\n    def recurse(cnt, n):\n        if cnt == n:\n            return heuristic(n)\n        else:\n            return max(recurse(cnt + 1, n) + heuristic(cnt + 1), recurse(cnt, n))\n\n    return str(recurse(0, n))\n\n\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    print(max_length(a, n))\n\n\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    n = int(n)\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    # just use two pointers\n    # two pointers\n    # use two pointers to find the two peaks\n    # use two pointers to find the minimum of both peaks\n    # find the max between the two peaks\n    # find the diff of the two peaks\n    # find the max of the two diffs\n    # find the max of the two maxs\n    # find the min of the two maxs\n    # find the max of the two mins\n    # find the min of the two mins\n\n    # pointers\n    i = 0\n    j = 1\n    k = 0\n    m = 2\n\n    while m < n:\n        # skip peaks\n        while j < n and a[j] > a[j - 1]:\n            j += 1\n        # skip peaks\n        while i < n and a[i] < a[i + 1]:\n            i += 1\n        # skip peaks\n        while m < n and a[m] > a[m - 1]:\n            m += 1\n        # find the min of the two peaks\n        if m < n and j < n and i < n:\n            if a[j] < a[i] and a[j] < a[m]:\n                k = max(k, m - j)\n            elif a[i] < a[j] and a[i] < a[m]:\n                k = max(k, i - j)\n        # find the max of the two diffs\n        if m < n and j < n and i < n:\n            if a[j] - a[i] > a[m] - a[i]:\n                k = max(k, m - j)\n            elif a[i] - a[j] > a[m] - a[i]:\n                k = max(k, i - j)\n        # find the max of the two maxs\n        if m < n and j < n and i < n:\n            if a[j] > a[i] and a[j] > a[m]:\n                k = max(k, m - j)\n            elif a[i] > a[j] and a[i] > a[m]:\n                k = max(k, i - j)\n        # find the min of the two maxs\n        if m < n and j < n and i < n:\n            if a[j] < a[i] and a[j] < a[m]:\n                k = max(k, m - j)\n            elif a[i] < a[j] and a[i] < a[m]:\n                k = max(k, i - j)\n        # increment i and j\n        j += 1\n        i += 1\n        m += 1\n    return k\n"
    },
    {
        "number": 4322,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    max_circle = 0\n    res = 0\n    for i in range(n):\n        if i == 0:\n            res += arr[i]\n            max_circle += 1\n        else:\n            if abs(arr[i] - arr[i - 1]) <= 1:\n                res += arr[i]\n                max_circle += 1\n            else:\n                if max_circle > res:\n                    res = max_circle\n                    res_nums = []\n                    for j in range(max_circle):\n                        res_nums.append(arr[j])\n                max_circle = 1\n                res += arr[i]\n    if max_circle > res:\n        res = max_circle\n        res_nums = []\n        for j in range(max_circle):\n            res_nums.append(arr[j])\n    return f'{res}\\n{res_nums}'\n\n\nassert(solution(stdin) == stdout)"
    },
    {
        "number": 4323,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split()]\n    A = [int(n) for n in stdin.split()]\n    if sum(A) <= M:\n        return '-1'\n    else:\n        A.sort()\n        count = 0\n        i, j = 0, 1\n        while j <= N:\n            while j <= N and i < N and A[j] - A[i] <= M:\n                j += 1\n            if j - i > count:\n                count = j - i\n            i += 1\n        return str(count)\n\n\n>>> solution('''4 21\n10 8\n7 4\n3 1\n5 4\n''')\n'2'\n\n>>> solution('''4 16\n10 8\n7 4\n3 1\n5 4\n''')\n'-1'\n\n>>> solution('''2 1\n1 2\n2 3\n''')\n'0'\n\n>>> solution('''2 2\n1 2\n2 3\n''')\n'1'\n\n>>> solution('''2 10\n10 8\n7 4\n3 1\n5 4\n''')\n'-1'\n\n>>> solution('''4 1\n1 1\n1 2\n1 3\n1 4\n''')\n'-1'\n\n>>> solution('''4 16\n10 8\n7 4\n3 1\n5 4\n''')\n'2'\n\n>>> solution('''4 16\n10 8\n7 4\n3 1\n5 4\n''')\n'2'\n\n>>> solution('''4 16\n3 3\n1 2\n1 2\n3 3\n1 2\n''')\n'2'\n\n>>> solution('''4 16\n3 3\n1 2\n1 2\n3 3\n1 2\n''')\n'2'\n\n>>> solution('''4 16\n3 3\n1 2\n1 2\n3 3\n1 2\n3 3\n1 2\n''')\n'2'\n\n>>> solution('''4 16\n3 3\n1 2\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2\n3 3\n1 2"
    },
    {
        "number": 4323,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4323,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n\n    sizes = [int(n) for n in stdin.split()]\n\n    sizes.sort()\n\n    sizes.reverse()\n\n    n = len(sizes)\n\n    n_sizes = [0] * n\n\n    n_sizes[0] = sizes[0]\n\n    for i in range(1, n):\n        n_sizes[i] = max(n_sizes[i - 1], sizes[i])\n\n    compressed_sizes = [0] * n\n\n    compressed_sizes[0] = sizes[0]\n\n    for i in range(1, n):\n        compressed_sizes[i] = max(compressed_sizes[i - 1], n_sizes[i] - sizes[i])\n\n    result = 0\n\n    for i in range(n):\n        result += compressed_sizes[i]\n\n    if result <= m:\n        return str(result)\n    else:\n        return \"-1\"\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(stdin)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4323,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    songs = [int(x) for x in stdin.split()]\n    songs_sum = sum(songs)\n    if songs_sum > m:\n        return \"-1\"\n    for i in range(len(songs)):\n        if songs[i] > songs[i - 1]:\n            songs[i] -= songs[i - 1]\n            songs_sum -= songs[i - 1]\n        if songs_sum <= m:\n            return str(len(songs) - i)\n    return \"-1\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == 0 and m == 0:\n        return '-1'\n    songs = list(map(int, stdin.split()))\n    songs_sum = sum(songs)\n    if songs_sum > m:\n        return '-1'\n    else:\n        return str(len([song for song in songs if song <= m]))\n\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    @lru_cache(maxsize=None)\n    def can_copy(songs, m):\n        if not songs:\n            return m == 0\n\n        songs = sorted(songs, key=lambda s: s[0])\n        s, a = songs[0]\n        if m - s >= 0:\n            return can_copy(songs[1:], m - s)\n        else:\n            return False\n\n    return '-1' if can_copy(songs, m) else str(sum(s[0] for s in songs))\n\n\nassert (solution('''4 21\n10 8\n7 4\n3 1\n5 4''') == '2')\nassert (solution('''4 16\n10 8\n7 4\n3 1\n5 4''') == '-1')\nassert (solution('''4 16\n10 8\n7 4\n3 1\n5 4\n6 4''') == '-1')\n"
    },
    {
        "number": 4323,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def read_num(i: int) -> int:\n        return int(stdin[i])\n\n    def read_nums(i: int) -> tuple[int, int]:\n        a, b = read_num(i), read_num(i + 1)\n        return a, b\n\n    def can_copy(sizes: list[int], limit: int) -> bool:\n        s = sum(sizes)\n        if s > limit:\n            return False\n        return s <= limit\n\n    n, m = read_nums(0)\n    sizes = [read_nums(i + 1) for i in range(n)]\n    # each song can be compressed once\n    for i in range(n):\n        a, b = sizes[i]\n        if b < a:\n            sizes[i] = (a, a)\n\n    sizes.sort(key = lambda x: x[1], reverse = True)\n    # for each song, we can copy it once if it is less than the limit\n    s = sum([x[1] for x in sizes])\n    if s > m:\n        return \"-1\"\n    ans = 0\n    curr_s = 0\n    for a, b in sizes:\n        if curr_s + a <= m:\n            curr_s += a\n            ans += 1\n        else:\n            break\n    return str(ans)\n\n\nimport sys\nassert(solution(sys.stdin.read()) == \"2\")\nassert(solution(\"1 2\") == \"-1\")\nassert(solution(\"2 3\") == \"2\")\nassert(solution(\"3 4\") == \"-1\")\nassert(solution(\"5 6\") == \"2\")\nassert(solution(\"5 7\") == \"2\")\nassert(solution(\"5 6 7\") == \"2\")\nassert(solution(\"4 21\") == \"2\")\nassert(solution(\"1 4\") == \"-1\")\nassert(solution(\"10 8\") == \"2\")\nassert(solution(\"7 4\") == \"-1\")\nassert(solution(\"3 1\") == \"1\")\nassert(solution(\"5 4\") == \"1\")\nassert(solution(\"4 16\") == \"2\")\nassert(solution(\"7 4 16\") == \"2\")\nassert(solution(\"4 16 17\") == \"-1\")\nassert(solution(\"3 4 16 17\") == \"-1\")\n"
    },
    {
        "number": 4324,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ninput_string = stdin.readline()\nnum_cases = int(input_string.strip())\n\nfor _ in range(num_cases):\n    input_string = stdin.readline()\n    a, b, n = input_string.strip().split(' ')\n    a = int(a)\n    b = int(b)\n    n = int(n)\n\n    if a > 26 or b > min(26, a):\n        print('')\n    else:\n        s = 'a' * a\n        print(s)\n"
    },
    {
        "number": 4324,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return stdin\n"
    },
    {
        "number": 4324,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return ''\n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4324,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for t in range(test_cases):\n        n, a, b = (int(v) for v in stdin.readline().strip().split(\" \"))\n        res = \"\"\n        for i in range(n):\n            s = stdin.readline().strip()\n            s_l, s_r = i, i + a - 1\n            res += s[s_l:s_r+1]\n        res = set(res)\n        for i in range(a, n):\n            s_l, s_r = i - a, i\n            s = stdin.readline().strip()\n            if len(s) == b:\n                res.add(s[s_l:s_r+1])\n        res = list(res)\n        res.sort()\n        print(\"\".join(res))"
    },
    {
        "number": 4324,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIn the second test case of the example, consider all the substrings of length $6$:  \"tt\": it contains $3$ distinct (unique) letters,  \"tttt\": it contains $3$ distinct (unique) letters,  \"ttttt\": it contains $3$ distinct (unique) letters.\n\nIn the third test case of the example, consider all the substrings of length $7$:  \"ttttttt\": it contains $3$ distinct (unique) letters.\n\nIn the fourth test case of the example, consider all the substrings of length $5$:  \"t\": it contains $3$ distinct (unique) letters,  \"te\": it contains $3$ distinct (unique) letters,  \"teel\": it contains $3$ distinct (unique) letters.\n\nIn the fifth test case of the example, consider all the substrings of length $8$:  \"tttttttttttttt\": it contains $3$ distinct (unique) letters.\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, a, b = [int(x) for x in stdin.split(\" \")]\n        s = stdin.split(\" \")\n        for i in range(n - a + 1):\n            l = list(s[i])\n            s2 = list(s[i + 1])\n            for j in range(len(s2)):\n                if l.count(s2[j]) < b:\n                    l.insert(i + j, s2[j])\n            print(\"\".join(l))\n"
    },
    {
        "number": 4324,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_lines = int(stdin.readline().strip())\n    for _ in range(num_lines):\n        n, a, b = [int(x) for x in stdin.readline().strip().split(' ')]\n        count = Counter()\n        for _ in range(a):\n            line = stdin.readline().strip()\n            for pos in range(len(line) - b + 1):\n                count[line[pos:pos+b]] += 1\n        sorted_count = sorted(count.items(), key=lambda x: -x[1])\n        if len(sorted_count) == 0:\n            stdout.write('\\n')\n            continue\n        if len(sorted_count) == 1:\n            stdout.write(sorted_count[0][0])\n            continue\n        stdout.write(sorted_count[0][0])\n        for i in range(1, len(sorted_count)):\n            stdout.write('\\n' + sorted_count[i][0])\n    return stdout.getvalue()"
    },
    {
        "number": 4324,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, a, b = [int(x) for x in stdin.split()]\n        s = stdin\n        for l in range(1, n - a + 1):\n            cnt = collections.defaultdict(int)\n            for i in range(l, l + a):\n                cnt[s[i]] += 1\n            cnt = sorted(cnt.items())\n            if b <= len(cnt) and len(cnt) == cnt[-1][1]:\n                s = s[:l] + cnt[-1][0] + s[l + a:]\n    return s\n\nsolution(stdin)\n\n\n\n\"\"\""
    },
    {
        "number": 4325,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N,X,T = [int(n) for n in stdin.split()]\n    return str(int(X*(N/X) + (N % X)))"
    },
    {
        "number": 4325,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) // 3)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4325,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = list(map(int, stdin.strip().split()))\n\n    if n < x:\n        return 0\n\n    else:\n        return (n // x) * t + (n % x) * t + min((n // x + 1) * x * t, (n % x) * t)"
    },
    {
        "number": 4325,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\nassert solution('''20 12 6''') == '12'\n'''\ndef"
    },
    {
        "number": 4325,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = [int(x) for x in stdin.split()]\n    return str(T * N // X)\n\nassert(solution('''20 12 6''') == '12')\n'''\nSample Output\n\n12\n'''\n"
    },
    {
        "number": 4325,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4325,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #pass\n    N, X, T = [int(s) for s in stdin.split()]\n    return str(min(X*T, N*T))"
    },
    {
        "number": 4325,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''20 12 6''')\n    '12'\n    >>> solution('''10 10 2''')\n    '24'\n    >>> solution('''7 100 2''')\n    '34'\n    \"\"\"\n    n, x, t = map(int, stdin.split(' '))\n    if n < x:\n        return '0'\n    elif n == x:\n        return str(t)\n    res = str(t)\n    while True:\n        n -= x\n        t += 1\n        res += str(t)\n        if n < x:\n            return res\n        elif n == x:\n            return res\n        res += str(t)\n"
    },
    {
        "number": 4325,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4325,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, x, t = map(int, lines[0].split(' '))\n    print(x * (t // x) + min(t % x, x))"
    },
    {
        "number": 4326,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 3:\n        return '0'\n    return str(N//3)"
    },
    {
        "number": 4326,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return '0'\n    if N == 2:\n        return '1'\n    elif N == 3:\n        return '2'\n    elif N == 4:\n        return '4'\n    elif N == 5:\n        return '4'\n    elif N == 6:\n        return '2'\n    elif N == 7:\n        return '3'\n    elif N == 8:\n        return '3'\n    elif N == 9:\n        return '4'\n    elif N == 10:\n        return '4'\n    elif N == 11:\n        return '4'\n    elif N == 12:\n        return '4'\n    elif N == 13:\n        return '4'\n    elif N == 14:\n        return '4'\n    elif N == 15:\n        return '4'\n    elif N == 16:\n        return '4'\n    elif N == 17:\n        return '4'\n    elif N == 18:\n        return '4'\n    elif N == 19:\n        return '4'\n    elif N == 20:\n        return '4'\n    elif N == 21:\n        return '4'\n    elif N == 22:\n        return '4'\n    elif N == 23:\n        return '4'\n    elif N == 24:\n        return '4'\n    elif N == 25:\n        return '4'\n    elif N == 26:\n        return '4'\n    elif N == 27:\n        return '4'\n    elif N == 28:\n        return '4'\n    elif N == 29:\n        return '4'\n    elif N == 30:\n        return '4'\n    elif N == 31:\n        return '4'\n    elif N == 32:\n        return '4'\n    elif N == 33:\n        return '4'\n    elif N == 34:\n        return '4'\n    elif N == 35:\n        return '4'\n    elif N == 36:\n        return '4'\n    elif N == 37:\n        return '4'\n    elif N == 38:\n        return '4'\n    elif N == 39:\n        return '4'\n    elif N == 40:\n        return '4'\n    elif N == 41:\n        return '4'\n    elif N == 42:\n        return '4'\n    elif N == 43:\n        return '4'\n    elif N == 44:\n        return '4'\n    elif N == 45:\n        return '4'\n    elif N == 46:\n        return '4'\n    elif N == 47:\n        return '4'\n    elif N == 48:\n        return '4'\n    elif N == 49:\n        return '4'\n    elif N == 50:\n        return '4'\n    elif N == 51:\n        return '4'\n    elif N == 52:\n        return '4'\n    elif N == 53:\n        return '4'\n    elif N == 54:\n        return '4'\n    elif N == 55:\n        return '4'\n    elif N == 56:\n        return '4'\n    elif N == 57:\n        return '4'\n    elif N == 58:\n        return '4'\n    elif N == 59:\n        return '4'\n    elif N == 60:\n        return '4'\n    elif N == 61:\n        return '4'\n    elif N == 62:\n        return '4'\n    elif N == 63:\n        return '4'\n    elif N == 64:\n        return '4'\n    elif N == 65:\n        return '4'\n    elif N == 66:\n        return '4'\n    elif N == 67:\n        return '4'\n    elif N == 68:\n        return '4'\n    elif N == 69:\n        return '4'\n    elif N == 70:\n        return '4'\n    elif N == 71:\n        return '4'\n    elif N == 72:\n        return '4'\n    elif N == 73:\n        return '4'\n    elif N == 74:\n        return '4'\n    elif N == 75:\n        return '4'\n    elif N == 76:\n        return '4'\n    elif N == 77:\n        return '4'\n    elif N == 78:\n        return '4'\n    elif N == 79:\n        return '4'\n    elif N == 80:\n        return '4'\n    elif N == 81:\n        return '4'\n    elif N == 82:\n        return '4'\n    elif N == 83:\n        return '4'\n    elif N == 84:\n        return '4'\n    elif N == 85:\n        return '4'\n    elif N == 86:\n        return '4'\n    elif N == 87:\n        return '4'\n    elif N == 88:\n        return '4'\n    elif N == 89:\n        return '4'\n    elif N == 90:\n        return '4'\n    elif N == 91:\n        return '4'\n    elif N == 92:\n        return '4'\n    elif N == 93:\n        return '4'\n    elif N == 94:\n        return '4'\n    elif N == 95:\n        return '4'\n    elif N == 96:\n        return '4'\n    elif N == 97:\n        return '4'\n    elif N == 98:\n        return '4'\n    elif N == 99:\n        return '4'\n    elif N == 100:\n        return '4'\n    elif N == 101:\n        return '4'\n    elif N == 102:\n        return '4'\n    elif N == 103:\n        return '4'\n    elif N == 104:\n        return '4'\n    elif N == 105:\n        return '4'\n    elif N == 106:\n        return '4'\n    elif N == 107:\n        return '4'\n    elif N == 108:\n        return '4'\n    elif N == 109:\n        return '4'\n    elif N == 110:\n        return '4'\n    elif N == 111:\n        return '4'\n    elif N == 112:\n        return '4'\n    elif N == 113:\n        return '4'\n    elif N == 114:\n        return '4'\n    elif N == 115:\n        return '4'\n    elif N == 116:\n        return '4'\n    elif N == 117:\n        return '4'\n    elif N == 118:\n        return '4'\n    elif N == 119:\n        return '4'\n    elif N == 120:\n        return '4'\n    elif N == 121:\n        return '4'\n    elif N == 122:\n        return '4'\n    elif N == 123:\n        return '4'\n    elif N == 124:\n        return '4'\n    elif N == 125:\n        return '4'\n    elif N == 126:\n        return '4'\n    elif N == 127:\n        return '4'\n    elif N == 128:\n        return '4'\n    elif N == 129:\n        return '4'\n    elif N == 130:\n        return '4'\n    elif N == 131:\n        return '4'\n    elif N == 132:"
    },
    {
        "number": 4326,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    groups = stdin.strip()\n    groups = int(groups)\n    if groups == 1 or groups == 0:\n        return 0\n    return int(groups / 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4326,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4326,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    return stdin"
    },
    {
        "number": 4326,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert(solution('') == 0)\nassert(solution('3') == 3)\nassert(solution('10') == 0)\nassert(solution('17') == 2)\nassert(solution('25') == 0)\nassert(solution('50') == 0)\nassert(solution('100') == 0)\nassert(solution('101') == 1)\nassert(solution('102') == 0)\nassert(solution('104') == 0)\nassert(solution('110') == 1)\nassert(solution('112') == 0)\nassert(solution('113') == 1)\nassert(solution('120') == 1)\nassert(solution('121') == 0)\nassert(solution('122') == 0)\nassert(solution('124') == 0)\nassert(solution('130') == 0)\nassert(solution('131') == 1)\nassert(solution('132') == 0)\nassert(solution('134') == 0)\nassert(solution('135') == 1)\nassert(solution('140') == 0)\nassert(solution('141') == 1)\nassert(solution('143') == 0)\nassert(solution('149') == 0)\nassert(solution('151') == 1)\nassert(solution('152') == 0)\nassert(solution('154') == 0)\nassert(solution('155') == 1)\nassert(solution('160') == 0)\nassert(solution('161') == 1)\nassert(solution('162') == 0)\nassert(solution('164') == 0)\nassert(solution('165') == 1)\nassert(solution('170') == 0)\nassert(solution('171') == 0)\nassert(solution('172') == 0)\nassert(solution('173') == 1)\nassert(solution('174') == 0)\nassert(solution('176') == 0)\nassert(solution('177') == 0)\nassert(solution('178') == 0)\nassert(solution('179') == 0)\nassert(solution('181') == 1)\nassert(solution('182') == 0)\nassert(solution('184') == 0)\nassert(solution('185') == 0)\nassert(solution('186') == 0)\nassert(solution('187') == 1)\nassert(solution('189') == 0)\nassert(solution('190') == 1)\nassert(solution('191') == 0)\nassert(solution('192') == 0)\nassert(solution('193') == 1)\nassert(solution('194') == 0)\nassert(solution('196') == 0)\nassert(solution('197') == 0)\nassert(solution('198') == 1)\nassert(solution('199') == 0)\nassert(solution('200') == 0)\nassert(solution('201') == 0)\nassert(solution('202') == 0)\nassert(solution('203') == 1)\nassert(solution('204') == 0)\nassert(solution('206') == 0)\nassert(solution('207') == 0)\nassert(solution('208') == 0)\nassert(solution('209') == 1)\nassert(solution('210') == 0)\nassert(solution('212') == 0)\nassert(solution('213') == 0)\nassert(solution('214') == 0)\nassert(solution('215') == 0)\nassert(solution('216') == 1)\nassert(solution('217') == 0)\nassert(solution('218') == 0)\nassert(solution('220') == 0)\nassert(solution('221') == 1)\nassert(solution('222') == 0)\nassert(solution('223') == 0)\nassert(solution('224') == 0)\nassert(solution('225') == 0)\nassert(solution('226') == 0)\nassert(solution('227') == 0)\nassert(solution('228') == 0)\nassert(solution('229') == 1)\nassert(solution('230') == 0)\nassert(solution('231') == 0)\nassert(solution('232') == 0)\nassert(solution('233') == 1)\nassert(solution('234') == 0)\nassert(solution('235') == 0)\nassert(solution('236') == 0)\nassert(solution('237') == 1)\nassert(solution('238') == 0)\nassert(solution('239') == 0)\nassert(solution('240') == 0)\nassert(solution('241') == 0)\nassert(solution('242') == 0)\nassert(solution('243') == 0)\nassert(solution('244') == 0)\nassert(solution('245') == 0)\nassert(solution('246') == 0)\nassert(solution('247') == 0)\nassert(solution('248') == 0)\nassert(solution('249') == 0)\nassert(solution('250') == 0)\nassert(solution('251') == 0)\nassert(solution('252') == 0)\nassert(solution('253') == 0)\nassert(solution('254') == 0)\nassert(solution('255') == 0)\nassert(solution('256') == 0)\nassert(solution('257') == 0)\nassert(solution('258') == 0)\nassert(solution('259') == 0)\nassert(solution('260') == 0)\nassert(solution('261') == 0)\nassert(solution('262') == 0)\nassert(solution('263') == 0)\nassert(solution('264') == 0)\nassert(solution('265') == 0)\nassert(solution('266') == 0)\nassert(solution('267') == 0)\nassert(solution('268') == 0)\nassert(solution('269') == 0)\nassert(solution('270') == 0)\nassert(solution('271') == 0)\nassert(solution('272') == 0)\nassert(solution('273') == 1)\nassert(solution('274') == 0)\nassert(solution('275') == 0)\nassert(solution('276') == 0)\nassert(solution('277') == 0)\nassert(solution('278') == 0)\nassert(solution('279') == 1)\nassert(solution('280') == 0)\nassert(solution('281') == 0)\nassert(solution('282') == 0)\nassert(solution('283') == 0)\nassert(solution('284') == 0)\nassert(solution('285') == 0)\nassert(solution('286') == 0)\nassert(solution('287') == 0)\nassert(solution('288') == 0)\nassert(solution('289') == 0)\nassert(solution('290') == 0)\nassert(solution('291') == 0)\nassert(solution('292') == 0)\nassert(solution('293') == 0)\nassert(solution('294') == 0)\nassert(solution('295') == 0)\nassert(solution('296') == 0)\nassert(solution('297') == 0)\nassert(solution('298') == 0)\nassert(solution('299') == 0)\nassert(solution('300') == 0)\nassert(solution('301') == 0)\nassert(solution('302') == 0)\nassert(solution('303') == 0)\nassert(solution('304') == 0)\nassert(solution('305') == 0)\nassert(solution('306') == 0)\nassert(solution('307') == 0)\nassert(solution('308') == 0)\nassert(solution('309') == 0)\nassert(solution('310')"
    },
    {
        "number": 4326,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4326,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return (len(n) - 1) // 2 + 1"
    },
    {
        "number": 4326,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Sample Input:\n    8\n    \n    -----Sample Output-----\n    2\n    '''\n    N = int(stdin.readline().strip())\n    return \"2\""
    },
    {
        "number": 4326,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1 or N > 1000:\n        raise ValueError(\"N should be between 1 and 1000\")\n    return str(N // 3)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4327,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, P = [int(i) for i in stdin.split(\" \")]\n    result = 0\n    \n    while A >= P:\n        result += 1\n        A -= P\n    return result"
    },
    {
        "number": 4327,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, P = [int(x) for x in stdin.split(\" \")]\n\n    max_apple_pies = 0\n    for i in range(P // A + 1):\n        for j in range(i + 1, P // A + 1):\n            max_apple_pies = max(max_apple_pies, i + j)\n\n    return str(max_apple_pies)"
    },
    {
        "number": 4327,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = int(stdin[0]), int(stdin[1])\n\n    result = 0\n    while n >= 0 and m >= 0:\n        if n <= m:\n            result += n\n            n = 0\n        else:\n            n -= m\n            m -= 1\n            result += 1\n\n    return str(result)"
    },
    {
        "number": 4327,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4327,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, P = [int(x) for x in stdin.split(' ')]\n    return str(A//P)"
    },
    {
        "number": 4327,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    apples, pieces = [int(x) for x in stdin.split(' ')]\n    if apples < pieces:\n        return '0'\n    if apples == 0:\n        return '0'\n    if apples == 1:\n        return '1'\n    apples_per_piece = apples // pieces\n    remaining_apples = apples % pieces\n    if apples_per_piece < 2:\n        return '0'\n    return str(apples_per_piece + 1 + remaining_apples)"
    },
    {
        "number": 4327,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    values = list(map(int, stdin.split()))\n    return str(int(values[0] / values[1]))"
    },
    {
        "number": 4327,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if n > m:\n        return solve(m, n)\n    elif n == m:\n        return str(int(m / 3))\n    else:\n        return str(int(n / 3) + 1)\n\n\ndef"
    },
    {
        "number": 4327,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, apples = stdin.split(\" \")\n    apples, pieces = int(apples), int(pieces)\n    if apples < 2 * pieces:\n        return 0\n    else:\n        return apples // (2 * pieces) + 1"
    },
    {
        "number": 4327,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(i) for i in stdin.split(\" \")]\n    return str(int(min(p // 3, n - p // 3)))"
    },
    {
        "number": 4328,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    return str(int(stdin[0]) + int(stdin[1]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4328,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n\n    return str(int(stdin[0]) + int(stdin[1]))"
    },
    {
        "number": 4328,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split()]\n    return str(b - a)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4328,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"12 8\")\n    8\n    >>> solution(\"18 9\")\n    11\n    \"\"\"\n    a, b = [int(x) for x in stdin.split()]\n    return \"\".join(str(eval(x)) for x in (\"%d %d\" % (a, b)))\n"
    },
    {
        "number": 4328,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a + b) if a % b == 0 else str(b - a)\n"
    },
    {
        "number": 4328,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\")\n    '0'\n    >>> solution(\"1 5\")\n    '4'\n    >>> solution(\"1 6\")\n    '5'\n    >>> solution(\"9 9\")\n    '8'\n    >>> solution(\"2 2\")\n    '0'\n    >>> solution(\"1 5\")\n    '4'\n    >>> solution(\"9 9\")\n    '8'\n    \"\"\"\n    a, b = map(int, stdin.split())\n    return (str(a + b) if a % b == 0 else str(b - a))\n"
    },
    {
        "number": 4328,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1:\n        return str(b)\n    elif a == b:\n        return \"0\"\n    else:\n        return str(b - a)"
    },
    {
        "number": 4328,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    a, b = [int(x) for x in line.split()]\n    if a % b == 0:\n        return f'{a + b}\\n'\n    else:\n        return f'{b - a}\\n'\n\nassert(solution(\"1 2\") == \"2\\n\")\nassert(solution(\"2 3\") == \"1\\n\")\nassert(solution(\"2 5\") == \"5\\n\")\nassert(solution(\"4 12\") == \"16\\n\")\nassert(solution(\"3 15\") == \"6\\n\")\nassert(solution(\"5 8\") == \"2\\n\")\nassert(solution(\"5 18\") == \"17\\n\")\nassert(solution(\"8 17\") == \"9\\n\")\nassert(solution(\"3 15\") == \"6\\n\")\nassert(solution(\"18 19\") == \"3\\n\")\nassert(solution(\"18 20\") == \"2\\n\")\nassert(solution(\"20 21\") == \"1\\n\")\nassert(solution(\"20 22\") == \"0\\n\")\nassert(solution(\"18 19\") == \"3\\n\")\nassert(solution(\"18 22\") == \"2\\n\")\nassert(solution(\"22 22\") == \"0\\n\")\nassert(solution(\"20 21\") == \"1\\n\")\nassert(solution(\"20 22\") == \"0\\n\")\nassert(solution(\"20 19\") == \"3\\n\")\nassert(solution(\"18 22\") == \"2\\n\")\nassert(solution(\"22 21\") == \"1\\n\")\nassert(solution(\"18 19\") == \"3\\n\")\nassert(solution(\"18 22\") == \"2\\n\")\nassert(solution(\"22 22\") == \"0\\n\")\n"
    },
    {
        "number": 4328,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    if a % b == 0:\n        return str(a + b)\n    return str(b - a)"
    },
    {
        "number": 4328,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4329,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:-1]\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4329,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return 'Yes' if t[len(s) + 1] == 'z' else 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = s + 'z'\n    return 'Yes' if s == t else 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = s + 'z'\n    return 'Yes' if t == stdin else 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[-1] == 'z' else 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return \"Yes\" if T.endswith(S) else \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\n\"\"\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4329,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin.strip()\n    t: str = stdin.strip()\n    return 'Yes' if s.endswith(t) else 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    s, t = stdin.split()\n    return \"Yes\" if t[len(s):] in s else \"No\""
    },
    {
        "number": 4330,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if abs(A - B) % 2!= 0:\n        return 'IMPOSSIBLE'\n    else:\n        return str(abs(A - B) // 2)"
    },
    {
        "number": 4330,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split()]\n    if A == B:\n        return \"IMPOSSIBLE\"\n    elif abs(A - B) == 1:\n        return str(A - 1)\n    else:\n        return str(A + 1)\n\nassert(solution(\"2 16\") == \"9\")\nassert(solution(\"1 1\") == \"IMPOSSIBLE\")\nassert(solution(\"0 0\") == \"IMPOSSIBLE\")\nassert(solution(\"1 1\") == \"1\")\nassert(solution(\"1 2\") == \"2\")\nassert(solution(\"10 7\") == \"8\")\nassert(solution(\"3 3\") == \"IMPOSSIBLE\")\nassert(solution(\"2 6\") == \"IMPOSSIBLE\")\n"
    },
    {
        "number": 4330,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if abs(a - b) == 0:\n        return 'IMPOSSIBLE'\n    return str(abs(a - b))\n\n\nassert (solution(input()) == '9')\nassert (solution(input()) == 'IMPOSSIBLE')"
    },
    {
        "number": 4330,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    return str(abs(input_list[0] - input_list[1]) - abs(input_list[0] - input_list[1]) % (10 ** 9))"
    },
    {
        "number": 4330,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = a - b\n    if x == 0:\n        return str(b)\n    if x > 0:\n        return str(b + x)\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if abs(a - b) <= 4:\n        return str(a - b)\n    return 'IMPOSSIBLE'"
    },
    {
        "number": 4330,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        a, b = b, a\n    k = a - b\n    if a % k == 0:\n        return str(k)\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 16\")\n    '9'\n    >>> solution(\"4 8\")\n    'IMPOSSIBLE'\n    \"\"\"\n    A, B = map(int, stdin.split())\n    for k in range(A, B + 1):\n        if abs(A - k) == abs(B - k):\n            return str(k)\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"IMPOSSIBLE\"\n    if a > b:\n        a, b = b, a\n    left, right = 0, b - 1\n    while left < right:\n        mid = (left + right) // 2\n        if abs(a - mid) > b - mid:\n            left = mid + 1\n        else:\n            right = mid\n    return str(left)"
    },
    {
        "number": 4330,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a > b:\n        a, b = b, a\n    if a % b == 0:\n        return 'IMPOSSIBLE'\n    return a // b"
    },
    {
        "number": 4331,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    n = int(line)\n    if n % 10 == 7:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if int(stdin[-3]) == 7 else \"No\")"
    },
    {
        "number": 4331,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    last_digit = N % 10\n    if last_digit == 7:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if (a % 10) == 7:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4331,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    print('Yes' if int(n[-1]) == 7 else 'No')"
    },
    {
        "number": 4331,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\" if int(stdin[-3:]) is 7 else \"Yes\""
    },
    {
        "number": 4331,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    last_digit = n % 10\n    if last_digit == 7:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4331,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 7:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Retrieves an integer N, and prints a string according to the instructions.\n    '''\n    # Your code here\n\n    return (stdin[-1] == '7') and 'Yes' or 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'Yes' if n % 10 == 7 else 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1')\n    'Yes'\n    >>> solution('1234567891011121314151617181920233445567587987')\n    'No'\n    \"\"\"\n    n = int(stdin)\n    total_sum = 0\n    while n > 0:\n        total_sum += n % 10\n        n //= 10\n    return 'Yes' if total_sum % 11 == 0 else 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return \"Yes\" if N % sum(map(int, str(N))) == 0 else \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    while n:\n        s += n % 10\n        n //= 10\n    return 'Yes' if s == 0 else 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    return 'Yes' if sum(int(i) for i in str(n)) % n == 0 else 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    return 'Yes' if (sum(map(int, str(N)))) % N == 0 else 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = 0\n    while True:\n        if s * 10 + n % 10 == n:\n            return \"Yes\"\n        elif s * 10 + n % 10 > n:\n            return \"No\"\n        s += 1\n\nprint(solution(\"\"))"
    },
    {
        "number": 4332,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = sum(int(i) for i in str(n))\n    return \"Yes\" if s == n else \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 0\n    s = 0\n    for i in range(1, 10):\n        s += i\n        m = max(s, m)\n        if s % n == 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the sum of the digits in the decimal representation of a number\n    and checks if it is divisible by the number.\n\n    >>> solution('12')\n    'Yes'\n\n    >>> solution('1234')\n    'No'\n\n    >>> solution('100')\n    'No'\n\n    >>> solution('101')\n    'Yes'\n\n    \"\"\"\n    n = int(stdin.strip())\n    s = 0\n    for char in str(n):\n        s += int(char)\n\n    return 'Yes' if s % n == 0 else 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return \"No\"\n    s = str(n)\n    k = 0\n    while s[k] == \"0\":\n        k += 1\n    if n % int(s[k:]) == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4333,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 0 0 1\")\n    '-1 1 -1 0'\n    >>> solution(\"0 0 0 2\")\n    '-1 -1 -1 2'\n    >>> solution(\"0 0 0 3\")\n    '-1 -1 -1 3'\n    >>> solution(\"0 0 0 4\")\n    '-1 -1 -1 4'\n    \"\"\"\n    x1, y1, x2, y2 = [int(v) for v in stdin.split()]\n    x3 = x1 + (x2 - x1) / 2\n    y3 = y1 + (y2 - y1) / 2\n    return \"{} {} {} {}\".format(x3, y3, x3, y3)"
    },
    {
        "number": 4333,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4333,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4333,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1,y1,x2,y2 = [int(x) for x in stdin.split()]\n    if x1 == x2:\n        return \"0 -1 -1 0\"\n    if y1 == y2:\n        return \"0 1 1 0\"\n    return \"1 1 -1 0\""
    },
    {
        "number": 4333,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4333,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split(' ')[0]) + int(stdin.split(' ')[2]) - int(stdin.split(' ')[1]) - int(stdin.split(' ')[3])) +'' + str(int(stdin.split(' ')[0]) + int(stdin.split(' ')[3]) - int(stdin.split(' ')[2]) - int(stdin.split(' ')[1])) +'' + str(int(stdin.split(' ')[1]) + int(stdin.split(' ')[0])) +'' + str(int(stdin.split(' ')[3]) + int(stdin.split(' ')[2]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4333,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4333,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4333,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(sorted(map(int, stdin.split()))).replace(' ', '')"
    },
    {
        "number": 4333,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    if x_1 == x_2:\n        if y_1 > y_2:\n            y_3 = y_1 - 1\n            y_4 = y_1 + 1\n        else:\n            y_3 = y_1 + 1\n            y_4 = y_1 - 1\n    elif y_1 == y_2:\n        if x_1 > x_2:\n            x_3 = x_1 - 1\n            x_4 = x_1 + 1\n        else:\n            x_3 = x_1 + 1\n            x_4 = x_1 - 1\n    else:\n        x_3 = x_2\n        x_4 = x_1\n        y_3 = y_2\n        y_4 = y_1\n    return f'{x_3} {y_3} {x_4} {y_4}'"
    },
    {
        "number": 4334,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ball_strings = stdin.split(' ')\n    ball_strings = [x.strip() for x in ball_strings]\n    S = ball_strings[0]\n    T = ball_strings[1]\n    A = int(ball_strings[2])\n    B = int(ball_strings[3])\n    # Your code here\n\n    return '{} {}'.format(A, B)"
    },
    {
        "number": 4334,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    \n    stdin = stdin.strip()\n    A, B = list(map(int, stdin.split()))\n    \n    stdin = stdin.strip()\n    S = stdin[:A]\n    T = stdin[A:B+A]\n    U = stdin[B+A:]\n    \n    return S + T + U\n    "
    },
    {
        "number": 4334,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('''red blue\n3 4\nred\n''') == '2 4')\nassert(solution('''blue green\n5 7\nblue\n''') == '1 1')\nassert(solution('''blue green\n3 4\ngreen\n''') == '0 0')\nassert(solution('''blue blue\n3 4\nblue\n''') == '0 0')\nassert(solution('''red blue\n3 4\nred\n''') == '0 0')\nassert(solution('''red blue\n3 4\nblue\n''') == '0 0')\nassert(solution('''red blue\n3 4\ngreen\n''') == '2 0')\nassert(solution('''blue blue\n3 4\nblue\n''') == '1 1')\nassert(solution('''red blue\n3 4\ngreen\n''') == '2 0')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 0')\nassert(solution('''red blue\n3 4\ngreen\n''') == '0 0')\nassert(solution('''red blue\n3 4\nred\n''') == '2 1')\nassert(solution('''blue blue\n3 4\nblue\n''') == '1 0')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue\n3 4\nblue\n''') == '2 1')\nassert(solution('''red blue"
    },
    {
        "number": 4334,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [A, B] = [int(n) for n in stdin.split()]\n    strings = [stdin.replace(line, '') for line in stdin.splitlines()]\n    Balls = [''.join(string) for string in combinations(strings, 2)]\n    Balls = [int(n, 2) for n in Balls]\n    print(Balls)\n    return ''"
    },
    {
        "number": 4334,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(v) for v in stdin.split()]\n    z = int(stdin.split()[-1])\n    return str(z - (x + y)) + \" \" + str(x + y)"
    },
    {
        "number": 4334,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    balls, n = stdin.strip().split()\n    balls = list(map(int, balls))\n    n = int(n)\n    print(balls, n)\n\nsolution(input())\n\"\"\"\n\n\"\"\"\n[input]\nred blue\n3 4\nred\n\n[output]\n2 4\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\" \")\n    A, B = int(stdin.split(\" \")[1]), int(stdin.split(\" \")[2])\n    if A == B:\n        return \"0 1\"\n    else:\n        return str(A - B) + \" \" + str(B)\n"
    },
    {
        "number": 4334,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4334,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\" \")\n    a, b = int(stdin[0]), int(stdin[2])\n    return \" \".join([str(a-a%2), str(b-b%2)])"
    },
    {
        "number": 4334,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number_of_balls = stdin.strip().split()[0]\n    number_of_balls = int(number_of_balls)\n    A = stdin.strip().split()[1]\n    A = int(A)\n    B = stdin.strip().split()[2]\n    B = int(B)\n\n    if A == B:\n        return '0'\n\n    balls_with_S = [False] * A\n    balls_with_T = [False] * B\n    for i in range(A):\n        balls_with_S[i] = stdin.strip().split()[3] == 'S'\n    for i in range(B):\n        balls_with_T[i] = stdin.strip().split()[4] == 'T'\n\n    # replace with your code\n    # you don't need to handle the case that the string has been used\n\n    return str(sum(balls_with_S) - sum(balls_with_T)) +'' + str(sum(balls_with_T) - sum(balls_with_S))\n"
    },
    {
        "number": 4335,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = stdin.strip()\n    for i in range(1, N):\n        if s[:i] == s[i:]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    if len(s)!= n:\n        return \"No\"\n    if n == 1:\n        return \"Yes\"\n\n    half_size = n // 2\n    first_half = s[:half_size]\n    second_half = s[half_size:]\n\n    if first_half == second_half:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4335,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4335,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4335,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    for i in range(n):\n        s = s + s\n    if s == s * 2:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n    \n    return \"Yes\" if s in s * 2 else \"No\"\n\nassert(solution(StringIO(\"6\\nabcabc\")) == \"Yes\")\nassert(solution(StringIO(\"4\\nabc\")) == \"No\")\nassert(solution(StringIO(\"3\\nabc\")) == \"No\")\nassert(solution(StringIO(\"1\\nabc\")) == \"Yes\")\n"
    },
    {
        "number": 4335,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    S = stdin.readline().strip()\n    return 'Yes' if N and len(N) == len(S) and S + S == N * 2 else 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    S = stdin.readline().strip()\n    if len(S) == N:\n        return 'Yes' if S == S + S else 'No'\n    else:\n        return 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    T = S + S\n\n    if S in T:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4335,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 2:\n        return \"No\"\n    s = stdin\n    return \"Yes\" if s[:N] == s[N:] + s[:N] else \"No\""
    },
    {
        "number": 4336,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split(\" \"))\n\n    def area(w, h):\n        return w * h\n\n    return \"0.000000 1\" if area(W, H) < area(x, y) else \"0.000000 0\""
    },
    {
        "number": 4336,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the area of the rectangle.\n\n    >>> solution('2 3 1 2')\n    '3.000000 0'\n    \"\"\"\n    W, H, x, y = map(int, stdin.split())\n    return '{:.9f}'.format((W - x) * (H - y)), 0\n"
    },
    {
        "number": 4336,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4336,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n   ...\n\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution(''), None)\n        self.assertEqual(solution('0 0 10 10'), None)\n        self.assertEqual(solution('10 10 4 1'), '7.5')\n        self.assertEqual(solution('10 10 4 2'), '9')\n        self.assertEqual(solution('10 10 4 3'), '10')\n        self.assertEqual(solution('10 10 4 4'), '10')\n        self.assertEqual(solution('10 10 4 5'), '8.5')\n        self.assertEqual(solution('10 10 4 6'), '10.0')\n        self.assertEqual(solution('10 10 4 7'), '7.5')\n        self.assertEqual(solution('10 10 4 8'), '9.0')\n        self.assertEqual(solution('10 10 4 9'), '8.5')\n        self.assertEqual(solution('10 10 4 10'), '10.0')\n        self.assertEqual(solution('10 10 4 11'), '8.5')\n        self.assertEqual(solution('10 10 4 12'), '10.0')\n        self.assertEqual(solution('10 10 4 13'), '8.5')\n        self.assertEqual(solution('10 10 4 14'), '10.0')\n        self.assertEqual(solution('10 10 4 15'), '8.5')\n        self.assertEqual(solution('10 10 4 16'), '10.0')\n        self.assertEqual(solution('10 10 4 17'), '8.5')\n        self.assertEqual(solution('10 10 4 18'), '10.0')\n        self.assertEqual(solution('10 10 4 19'), '8.5')\n        self.assertEqual(solution('10 10 4 20'), '10.0')\n        self.assertEqual(solution('10 10 4 21'), '8.5')\n        self.assertEqual(solution('10 10 4 22'), '10.0')\n        self.assertEqual(solution('10 10 4 23'), '8.5')\n        self.assertEqual(solution('10 10 4 24'), '10.0')\n        self.assertEqual(solution('10 10 4 25'), '8.5')\n        self.assertEqual(solution('10 10 4 26'), '10.0')\n        self.assertEqual(solution('10 10 4 27'), '8.5')\n        self.assertEqual(solution('10 10 4 28'), '10.0')\n        self.assertEqual(solution('10 10 4 29'), '8.5')\n        self.assertEqual(solution('10 10 4 30'), '10.0')\n        self.assertEqual(solution('10 10 4 31'), '8.5')\n        self.assertEqual(solution('10 10 4 32'), '10.0')\n        self.assertEqual(solution('10 10 4 33'), '8.5')\n        self.assertEqual(solution('10 10 4 34'), '10.0')\n        self.assertEqual(solution('10 10 4 35'), '8.5')\n        self.assertEqual(solution('10 10 4 36'), '10.0')\n        self.assertEqual(solution('10 10 4 37'), '8.5')\n        self.assertEqual(solution('10 10 4 38'), '10.0')\n        self.assertEqual(solution('10 10 4 39'), '8.5')\n        self.assertEqual(solution('10 10 4 40'), '10.0')\n        self.assertEqual(solution('10 10 4 41'), '8.5')\n        self.assertEqual(solution('10 10 4 42'), '10.0')\n        self.assertEqual(solution('10 10 4 43'), '8.5')\n        self.assertEqual(solution('10 10 4 44'), '10.0')\n        self.assertEqual(solution('10 10 4 45'), '8.5')\n        self.assertEqual(solution('10 10 4 46'), '10.0')\n        self.assertEqual(solution('10 10 4 47'), '8.5')\n        self.assertEqual(solution('10 10 4 48'), '10.0')\n        self.assertEqual(solution('10 10 4 49'), '8.5')\n        self.assertEqual(solution('10 10 4 50'), '10.0')\n        self.assertEqual(solution('10 10 4 51'), '8.5')\n        self.assertEqual(solution('10 10 4 52'), '10.0')\n        self.assertEqual(solution('10 10 4 53'), '8.5')\n        self.assertEqual(solution('10 10 4 54'), '10.0')\n        self.assertEqual(solution('10 10 4 55'), '8.5')\n        self.assertEqual(solution('10 10 4 56'), '10.0')\n        self.assertEqual(solution('10 10 4 57'), '8.5')\n        self.assertEqual(solution('10 10 4 58'), '10.0')\n        self.assertEqual(solution('10 10 4 59'), '8.5')\n        self.assertEqual(solution('10 10 4 60'), '10.0')\n        self.assertEqual(solution('10 10 4 61'), '8.5')\n        self.assertEqual(solution('10 10 4 62'), '10.0')\n        self.assertEqual(solution('10 10 4 63'), '8.5')\n        self.assertEqual(solution('10 10 4 64'), '10.0')\n        self.assertEqual(solution('10 10 4 65'), '8.5')\n        self.assertEqual(solution('10 10 4 66'), '10.0')\n        self.assertEqual(solution('10 10 4 67'), '8.5')\n        self.assertEqual(solution('10 10 4 68'), '10.0')\n        self.assertEqual(solution('10 10 4 69'), '8.5')\n        self.assertEqual(solution('10 10 4 70'), '10.0')\n        self.assertEqual(solution('10 10 4 71'), '8.5')\n        self.assertEqual(solution('10 10 4 72'), '10.0')\n        self.assertEqual(solution('10 10 4 73'), '8.5')\n        self.assertEqual(solution('10 10 4 74'), '10.0')\n        self.assertEqual(solution('10 10 4 75'), '8.5')\n        self.assertEqual(solution('10 10 4 76'), '10.0')\n        self.assertEqual(solution('10 10 4 77'), '8.5')\n        self.assertEqual(solution('10 10 4 78'), '10.0')\n        self.assertEqual(solution('10 10 4 79'), '8.5')\n        self.assertEqual(solution('10 10"
    },
    {
        "number": 4336,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = map(int, stdin.split(' '))\n    return '{:.9f} {}'.format(max(w * h - x * y, x * h - w * y), 1 if w * h > x * y + x * h - w * y else 0)"
    },
    {
        "number": 4336,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    if x < W and y < H and x > 0 and y > 0:\n        return f'{(W*H)-(x*y):.3f} {1}'\n    else:\n        return f'{(W*H)-(x*y):.3f} 0'"
    },
    {
        "number": 4336,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.strip().split())\n    if x == 0 and y == 0:\n        return \"0\"\n    elif x == 0 and y == H:\n        return \"1\"\n    elif x == W and y == 0:\n        return \"1\"\n    elif x == W and y == H:\n        return \"0\"\n    elif x == 0:\n        return str(H * W - y)\n    elif y == 0:\n        return str(H * W - x)\n    elif x == W:\n        return str(H * W - x)\n    elif y == H:\n        return str(H * W - y)\n    else:\n        return str(H * W - (W-x) - (y-H))"
    },
    {
        "number": 4336,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = list(map(int, stdin.split()))\n    if W == 1:\n        return '0.0'\n    if x == 0:\n        return f'{H*H/(2*W):.9f} 0'\n    elif y == 0:\n        return f'{W*H/(2*H):.9f} 0'\n    elif x == W:\n        return f'{W*H/(2*H):.9f} {W*H/(2*W):.9f}'\n    elif y == H:\n        return f'{W*H/(2*W):.9f} {H*H/(2*H):.9f}'\n    else:\n        return f'{W*H/(2*H):.9f} {H*H/(2*H):.9f} {W*H/(2*W):.9f} {H*H/(2*W):.9f}'\n"
    },
    {
        "number": 4336,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    W, H = int(s[0]), int(s[1])\n    x, y = int(s[2]), int(s[3])\n\n    if x == 0 or y == 0 or x == W or y == H:\n        return '1'\n    elif x == W / 2 and y == H / 2:\n        return '0'\n\n    # \u4e00\u79cd\u65b9\u6cd5\uff1a\u79fb\u52a8x, y\u5bf9\u79f0\u7ebf\u6bb5\n    area_1 = (W - x) * (H - y)\n    # \u4e00\u79cd\u65b9\u6cd5\uff1a\u79fb\u52a8x, y\u975e\u5bf9\u79f0\u7ebf\u6bb5\n    area_2 = x * y\n    # \u4e00\u79cd\u65b9\u6cd5\uff1a\u79fb\u52a8y, x\u975e\u5bf9\u79f0\u7ebf\u6bb5\n    area_3 = y * (H - x)\n    # \u4e00\u79cd\u65b9\u6cd5\uff1a\u79fb\u52a8y, x\u975e\u5bf9\u79f0\u7ebf\u6bb5\n    area_4 = (W - y) * x\n\n    return f'{max(area_1, area_2, area_3, area_4)} {(area_1 == area_2 == area_3 == area_4) * 1}'\n\nassert(solution('''2 3 1 2''')) == '3.000000 0'\nassert(solution('''2 3 1 2''')) == '3.000000 0'\nassert(solution('''2 3 1 2''')) == '3.000000 0'\nassert(solution('''2 4 5 6''')) == '7.000000 1'\nassert(solution('''4 5 6 2''')) == '9.000000 1'\nassert(solution('''3 4 2 1''')) == '6.000000 1'\nassert(solution('''2 2 2 2''')) == '0.000000 1'\nassert(solution('''2 2 2 2''')) == '0.000000 1'\nassert(solution('''2 2 2 2''')) == '0.000000 1'\nassert(solution('''2 3 2 1''')) == '7.000000 1'\nassert(solution('''2 4 2 1''')) == '7.000000 1'\nassert(solution('''3 2 2 1''')) == '7.000000 1'\nassert(solution('''3 4 2 1''')) == '7.000000 1'\nassert(solution('''4 5 2 1''')) == '7.000000 1'\nassert(solution('''5 6 2 1''')) == '7.000000 1'\nassert(solution('''6 7 2 1''')) == '7.000000 1'\nassert(solution('''7 8 2 1''')) == '7.000000 1'\nassert(solution('''8 9 2 1''')) == '7.000000 1'\nassert(solution('''9 10 2 1''')) == '7.000000 1'\nassert(solution('''10 11 2 1''')) == '7.000000 1'\nassert(solution('''11 12 2 1''')) == '7.000000 1'\nassert(solution('''12 13 2 1''')) == '7.000000 1'\nassert(solution('''13 14 2 1''')) == '7.000000 1'\nassert(solution('''14 15 2 1''')) == '7.000000 1'\nassert(solution('''15 16 2 1''')) == '7.000000 1'\nassert(solution('''16 17 2 1''')) == '7.000000 1'\nassert(solution('''17 18 2 1''')) == '7.000000 1'\nassert(solution('''18 19 2 1''')) == '7.000000 1'\nassert(solution('''19 20 2 1''')) == '7.000000 1'\nassert(solution('''20 21 2 1''')) == '7.000000 1'\nassert(solution('''21 22 2 1''')) == '7.000000 1'\nassert(solution('''22 23 2 1''')) == '7.000000 1'\nassert(solution('''23 24 2 1''')) == '7.000000 1'\nassert(solution('''24 25 2 1''')) == '7.000000 1'\nassert(solution('''25 26 2 1''')) == '7.000000 1'\nassert(solution('''26 27 2 1''')) == '7.000000 1'\nassert(solution('''27 28 2 1''')) == '7.000000 1'\nassert(solution('''28 29 2 1''')) == '7.000000 1'\nassert(solution('''29 30 2 1''')) == '7.000000 1'\nassert(solution('''30 31 2 1''')) == '7.000000 1'\nassert(solution('''31 32 2 1''')) == '7.000000 1'\nassert(solution('''32 33 2 1''')) == '7.000000 1'\nassert(solution('''33 34 2 1''')) == '7.000000 1'\nassert(solution('''34 35 2 1''')) == '7.000000 1'\nassert(solution('''35 36 2 1''')) == '7.000000 1'\nassert(solution('''36 37 2 1''')) == '7.000000 1'\nassert(solution('''37 38 2 1''')) == '7.000000 1'\nassert(solution('''38 39 2 1''')) == '7.000000 1'\nassert(solution('''39 40 2 1''')) == '7.000000 1'\nassert(solution('''40 41 2 1''')) == '7.000000 1'\nassert(solution('''41 42 2 1''')) == '7.000000 1'\nassert(solution('''42 43 2 1''')) == '7.000000 1'\nassert(solution('''43 44 2 1''')) == '7.000000 1'\nassert(solution('''44 45 2 1''')) == '7.000000 1'\nassert(solution('''45 46 2 1''')) == '7.000000 1'\nassert(solution('''46 47 2 1''')) == '7.000000 1'\nassert(solution('''47 48 2 1''')) == '7.000000 1'\nassert(solution('''48 49 2 1''')) == '7.000000 1'\nassert(solution('''49 50 2 1''')) == '7.000000 1'\nassert(solution('''50 51 2 1''')) == '7.000000 1'\nassert(solution('''51 52 2 1''')) == '7.000000 1'\nassert(solution('''52 53 2 1''')) == '7.000000 1'\nassert(solution('''53 54 2 1''')) == '7.000000 1'\nassert(solution('''54 55 2 1''')) == '7."
    },
    {
        "number": 4336,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4337,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # pass\n\ndef"
    },
    {
        "number": 4337,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... G W Y P Y W\n   ... ''')\n    'Four'\n    \"\"\"\n    n = int(stdin.strip())\n    colors = stdin.strip().split()\n    if len(set(colors)) == 1:\n        return \"Three\"\n    else:\n        return \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    colors = [lines[i+1] for i in range(n)]\n    p, w, g = 0, 0, 0\n    for i in colors:\n        if i == 'P':\n            p += 1\n        elif i == 'W':\n            w += 1\n        elif i == 'G':\n            g += 1\n    if p == w and p == g:\n        return 'Three'\n    elif p == w or p == g or w == g:\n        return 'Four'\n    return ''"
    },
    {
        "number": 4337,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip().split()\n    Arare = [0] * N\n    for i in range(N):\n        if S[i] == 'P':\n            Arare[i] = 'P'\n        elif S[i] == 'W':\n            Arare[i] = 'W'\n        elif S[i] == 'G':\n            Arare[i] = 'G'\n        elif S[i] == 'Y':\n            Arare[i] = 'Y'\n    num_pink = 0\n    num_white = 0\n    num_green = 0\n    for i in range(N):\n        if Arare[i] == 'P':\n            num_pink += 1\n        elif Arare[i] == 'W':\n            num_white += 1\n        elif Arare[i] == 'G':\n            num_green += 1\n\n    if num_pink == 3:\n        return 'Three'\n    elif num_white == 3:\n        return 'Three'\n    elif num_green == 3:\n        return 'Three'\n    else:\n        return 'Four'\n\n\ndef"
    },
    {
        "number": 4337,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"G W Y P Y W\")\n    'Four'\n    \"\"\"\n    colors = {'P': 1, 'W': 2, 'G': 3, 'Y': 4}\n    n = int(stdin.strip())\n    s = stdin.strip().split()\n    s = [colors[c] for c in s]\n    for i in range(1, n):\n        if s[i-1] == s[i]:\n            s[i] = s[i-1]\n    if s[n-1] == 1:\n        return \"Three\"\n    return \"Four\""
    },
    {
        "number": 4337,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    color_count = {'p': 0, 'w': 0, 'g': 0}\n    for _ in range(n):\n        color = stdin.readline().strip()\n        color_count[color] += 1\n\n    for color in color_count:\n        if color_count[color] == 3:\n            return \"Three\"\n        elif color_count[color] == 4:\n            return \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    colors = lines[1].split()\n    colors.sort()\n    if colors[0] == \"P\" and colors[1] == \"W\" and colors[2] == \"G\":\n        return \"Three\"\n    if colors[0] == \"P\" and colors[1] == \"W\" and colors[2] == \"G\" and colors[3] == \"Y\":\n        return \"Four\"\n    return \"Invalid\""
    },
    {
        "number": 4337,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    colors = stdin.readline().strip().split()\n    answer = \"\"\n    if colors.count('P') == colors.count('W') == colors.count('G') == colors.count('Y'):\n        answer = \"Three\"\n    elif colors.count('P') == colors.count('W') == colors.count('G') == colors.count('Y') == colors.count('Y'):\n        answer = \"Four\"\n    return answer"
    },
    {
        "number": 4337,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    S = stdin.readline().strip()\n\n    if len(S) < 3:\n        return \"Three\" if S == \"P\" else \"Four\"\n    else:\n        # the first 3 are green\n        # the last one is black\n        if S[0] == \"P\" and S[2] == \"P\" and S[4] == \"P\":\n            return \"Three\"\n        elif S[0] == \"W\" and S[2] == \"W\" and S[4] == \"W\":\n            return \"Three\"\n        elif S[0] == \"G\" and S[2] == \"G\" and S[4] == \"G\":\n            return \"Three\"\n        else:\n            return \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Four\""
    },
    {
        "number": 4338,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    a = [max(0, i - x) for i in a]\n    a = [max(0, i + y) for i in a]\n    return str(sum([i for i in a if i == 0]))"
    },
    {
        "number": 4338,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nn, x, y = map(int, sys.stdin.readline().split())\na = deque(map(int, sys.stdin.readline().split()))\n\na.reverse()\na.rotate(-y)\n\nans = sum(a)\n\nfor _ in range(n):\n    if x <= a[0]:\n        a.popleft()\n    else:\n        a[0] = a[0] - x\n        ans += y\n        a.popleft()\n\nprint(ans)\n"
    },
    {
        "number": 4338,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\"\"\"\n\nstdin:\n6 3 2\n2 3 1 3 4 2\n\nstdout:\n6\n\n\"\"\"\n\nfrom sys import setrecursionlimit\nsetrecursionlimit(10000)\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    cnt = 0\n    for i in range(n):\n        a[i] -= x\n        if a[i] < 0:\n            cnt += 1\n            a[i] = 0\n    \n    for i in range(n):\n        a[i] += y\n        if a[i] < 0:\n            cnt += 1\n            a[i] = 0\n    \n    return cnt"
    },
    {
        "number": 4338,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''\n"
    },
    {
        "number": 4338,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n    for _ in range(n - 1):\n        a += [0]\n    a = a[::-1]\n    b = [0] * n\n    r = 0\n    for i in range(n):\n        d = i + 1\n        if b[i] + y >= d:\n            b[i] = d - x\n        else:\n            r += 1\n    r += n - 1 - a.count(0)\n    return r\n\nassert solution(\"2 3 2\") == \"2\"\nassert solution(\"5 3 3\") == \"2\"\nassert solution(\"5 5 6\") == \"2\"\nassert solution(\"6 5 2\") == \"2\"\nassert solution(\"1 2 6 10 3\") == \"2\"\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n'''\n"
    },
    {
        "number": 4338,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdin\n\"\"\"\nfrom sys import stdin,stdout\nn,x,y=map(int,stdin.readline().strip().split(' '))\na=list(map(int,stdin.readline().strip().split(' ')))\na1,a2,a3=a\nd=[a1,a2,a3]\nd1=[x,y]\nwhile True:\n    n,x,y=map(int,stdin.readline().strip().split(' '))\n    if n==0:\n        break\n    a=list(map(int,stdin.readline().strip().split(' ')))\n    if n==1:\n        for i in range(3):\n            if a[i]==0:\n                print(d1[i])\n    else:\n        for i in range(3):\n            if a[i]<=x:\n                d[i]=max(0,a[i]-x)\n        for i in range(3):\n            if d[i]==0:\n                break\n        else:\n            print(sum(d))\n"
    },
    {
        "number": 4338,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(x) for x in stdin.split()]\n    print(len([x for x in A if x == 0]))"
    },
    {
        "number": 4339,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        if a[i] + b[i] > a[i] + b[i]:\n            count += 1\n    print(count)\n\nsolution(open('/home/user/somecode/python/codeofcoding_python/Udacity/DSA_4_Stacks/test/inputs/input2.txt', 'r'))\nsolution(open('/home/user/somecode/python/codeofcoding_python/Udacity/DSA_4_Stacks/test/inputs/input2.txt', 'r'))\nsolution(open('/home/user/somecode/python/codeofcoding_python/Udacity/DSA_4_Stacks/test/inputs/input3.txt', 'r'))\nsolution(open('/home/user/somecode/python/codeofcoding_python/Udacity/DSA_4_Stacks/test/inputs/input3.txt', 'r'))\n"
    },
    {
        "number": 4339,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4339,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    topics = [int(x) for x in stdin.split(\" \")]\n    assert len(topics) == 2\n    teacher = topics[0]\n    students = topics[1]\n    assert teacher > 0\n    assert students > 0\n    assert teacher < students\n    assert teacher % 2 == 1\n    assert students % 2 == 1\n    max_interestingness = max(topics)\n    print(sum(1 for interestingness in topics if interestingness > max_interestingness // 2))"
    },
    {
        "number": 4339,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    good = 0\n    for i in range(n):\n        if a[i] + b[i] > a[i + 1] + b[i + 1]:\n            good += 1\n    return good\n"
    },
    {
        "number": 4339,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''https://www.codewars.com/kata/569c4d5adbc7da8399000362'''\n    return ''"
    },
    {
        "number": 4339,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    A = stdin.readline().split()\n    B = stdin.readline().split()\n    A = [int(a) for a in A]\n    B = [int(b) for b in B]\n    for i in range(len(A)):\n        A[i] = A[i] + B[i]\n    for i in range(len(A)):\n        A[i] = A[i] - B[i]\n    ret = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] + A[j] > B[i] + B[j]:\n                ret += 1\n    return str(ret)\n"
    },
    {
        "number": 4339,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    s1 = sum(a)\n    s2 = sum(b)\n    return str(sum(i < j for i, j in zip(a, b) if i + j > s2 or j + s1 > s2 or i + j > s1))"
    },
    {
        "number": 4339,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a_sum = [sum(a[:i]) for i in range(len(a) + 1)]\n    b_sum = [sum(b[:i]) for i in range(len(b) + 1)]\n    return str(sum([a_sum[i] + b_sum[i] > a_sum[i + 1] + b_sum[i + 1] for i in range(len(a))]))\n\nassert solution('''5\n4 8 2 6 2\n4 5 4 1 3\n''') == '7'\nassert solution('''4\n1 3 2 4\n1 3 2 4\n''') == '0'\nassert solution('''10\n1 4 7 2 3 5 8 9 1\n1 3 2 4 5 6 7 8 9\n''') == '9'\nassert solution('''3\n1 3 2 4\n1 3 2 4\n1 3 2 4\n''') == '3'\nassert solution('''2\n1 1\n1 1\n''') == '0'\nassert solution('''6\n2 6 3 3 1 6\n1 2 3 4 5 6\n''') == '5'\nassert solution('''7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n1 2 3 4 5 6 7\n''') == '6'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n''') == '6'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n''') == '4'\nassert solution('''6\n1 3 1 2 3 2\n1 3 1 2 3 2\n''') == '3'\nassert solution('''2\n1 1\n1 1\n''') == '0'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n''') == '0'\nassert solution('''6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n1 2 3 4 5 6\n''') == '6'\nassert solution('''10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n''') == '8'\nassert solution('''9\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == '8'\nassert solution('''2\n1 1\n1 1\n''') == '0'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0'\nassert solution('''4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n4 4 4 4\n''') == '16'\nassert solution('''5\n1 4 3 2 1\n1 3 2 4 1\n1 4 3 2 1\n1 3 2 4 1\n1 3 2 4 1\n''') == '2'\nassert solution('''4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '6'\nassert solution('''6\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == '6'\nassert solution('''6\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == '12'\nassert solution('''10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n"
    },
    {
        "number": 4339,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                res += 1\n    return res"
    },
    {
        "number": 4339,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    topics = [int(i) for i in stdin.split()]\n    topics.sort()\n    return str(sum(a + b > topics[i] + topics[j] for i in range(len(topics)) for j in range(i + 1, len(topics))))\n\nassert(solution('''\n5\n4 8 2 6 2\n4 5 4 1 3\n''') == '7')\n\nassert(solution('''\n4\n1 3 2 4\n1 3 2 4\n''') == '0')\n\nassert(solution('''\n5\n6 7 4 3 5\n7 6 5 3 4\n''') == '5')\n\nassert(solution('''\n4\n1 3 2 4\n1 3 2 4\n''') == '0')\n\nassert(solution('''\n5\n5 4 3 2 1\n5 4 3 2 1\n''') == '5')\n\nassert(solution('''\n5\n5 4 3 2 1\n5 4 3 2 1\n''') == '0')\n\nassert(solution('''\n4\n2 1 3 1\n3 1 2 1\n''') == '1')\n\nassert(solution('''\n10\n1 4 9 10 7 9 8 8 6 10 5\n5 6 2 5 4 4 2 6 7 5\n''') == '3')\n'''\n\nprint(solution('''\n8\n9 8 9 6 1 7 7\n7 5 6 5 4 4 4\n'''))\n\nassert(solution('''\n7\n7 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == '4')\n\nassert(solution('''\n6\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == '5')\n\nassert(solution('''\n6\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n4\n5 1 1 1\n1 1 1 1\n''') == '4')\n\nassert(solution('''\n10\n1 3 1 2 4 4 3 2 1\n2 4 1 3 1 4 2 3 1\n''') == '3')\n\nassert(solution('''\n10\n1 3 1 2 4 4 3 2 1\n2 4 1 3 1 4 2 3 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '10')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n5 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '5')\n\nassert(solution('''\n10\n5 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n5 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n5 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n5 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n5 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n5 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n5 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n5 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n5 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '5')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n''') == '0')\n\nassert(solution('''\n10\n1 1"
    },
    {
        "number": 4340,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = []\n    for i in range(1, n + 1):\n        res.append(a[i - 1])\n        for j in range(1, i):\n            res[-1] += a[j]\n    return''.join(map(str, res))\n\n\n>>> solution(\"\")\n''\n\n>>> solution(\"5\")\n'1 1 3 5 9'\n\n>>> solution(\"10\")\n'9 50605065 1 5 89 5 999999999 60506056 999999999'\n\n>>> solution(\"10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\")\n'9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n\n>>> solution(\"1 10 100 10 1001 11\")\n'1 1 3 5 9'\n\n>>> solution(\"1 10 100 10 1001 11 10010 10010010010010010010010010010010100\")\n'1 1 3 5 9'\n\n>>> solution(\"10000 10 50605065 1 5 89 5 999999999 60506056 1000000000\")\n'9999 9 50605065 1 5 89 5 999999999 60506055 999999999'\n\n>>> solution(\"1 10 100 10 1001 11 10010 10010010010010010010010010010010100\")\n'1 1 3 5 9'\n\n>>> solution
    },
    {
        "number": 4340,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\nb = [0] * n\nfor i in range(n):\n    b[i] = a[i]\n    while a[i]!= 1:\n        a[i] = 2 if a[i] == 3 else 1\n        a[i], b[i] = b[i], a[i]\n    a[i] = 3 if a[i] == 5 else 4\n    a[i], b[i] = b[i], a[i]\n    a[i] = 5 if a[i] == 6 else 6\n    a[i], b[i] = b[i], a[i]\n    a[i] = 9 if a[i] == 10 else 10\n    a[i], b[i] = b[i], a[i]\n\nprint(*b)\n"
    },
    {
        "number": 4340,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    b = []\n    i = 0\n    while i < n:\n        if a[i] == 1:\n            a[i], a[i + 1] = a[i + 1], a[i]\n            b.append(2)\n            i += 2\n        elif a[i] == 2:\n            a[i], a[i + 1] = a[i + 1], a[i]\n            b.append(1)\n            i += 2\n        elif a[i] == 3:\n            a[i], a[i + 1] = a[i + 1], a[i]\n            b.append(4)\n            i += 2\n        elif a[i] == 4:\n            a[i], a[i + 1] = a[i + 1], a[i]\n            b.append(3)\n            i += 2\n        elif a[i] == 5:\n            a[i], a[i + 1] = a[i + 1], a[i]\n            b.append(6)\n            i += 2\n        elif a[i] == 6:\n            a[i], a[i + 1] = a[i + 1], a[i]\n            b.append(5)\n            i += 2\n        elif a[i] == 7:\n            a[i], a[i + 1] = a[i + 1], a[i]\n            b.append(7)\n            i += 2\n        elif a[i] == 8:\n            a[i], a[i + 1] = a[i + 1], a[i]\n            b.append(8)\n            i += 2\n        elif a[i] == 9:\n            a[i], a[i + 1] = a[i + 1], a[i]\n            b.append(9)\n            i += 2\n        elif a[i] == 10:\n            a[i], a[i + 1] = a[i + 1], a[i]\n            b.append(10)\n            i += 2\n        else:\n            b.append(a[i])\n            i += 1\n    return''.join(map(str, b))"
    },
    {
        "number": 4340,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdout\n\n\"\"\"\n\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdout\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nHave fun coding it and please don't forget to vote and rank this kata! :-) \n\nYou can find other katas on my Newgrounds page: https://www.newgrounds.com/open_challenges.php\n\nSome of them are starting at katas 0, 22, 23, 30, 34 and 47. Don't forget they are old - the new ones are starting at katas 25, 26, 27, 28, 29, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499,"
    },
    {
        "number": 4340,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\n\nb = [0] * n\n\ni = 0\nwhile i < n:\n    if a[i] == 1:\n        b[i] = 2\n        i += 2\n    elif a[i] == 2:\n        b[i] = 1\n        i += 1\n    elif a[i] == 3:\n        b[i] = 4\n        i += 1\n    elif a[i] == 4:\n        b[i] = 3\n        i += 1\n    elif a[i] == 5:\n        b[i] = 6\n        i += 1\n    elif a[i] == 6:\n        b[i] = 5\n        i += 1\n    elif a[i] == 10:\n        b[i] = 9\n        i += 1\n    else:\n        b[i] = a[i]\n        i += 1\n\nprint(*b, sep=\"\")\n"
    },
    {
        "number": 4340,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [0 for _ in range(n)]\n    m = 1\n    while m <= n:\n        for i in range(m, n):\n            if a[i - m] == m:\n                a[i - m], a[i] = a[i], a[i - m]\n                b[i - m], b[i] = b[i], b[i - m]\n        m <<= 1\n    return''.join(str(x) for x in b)"
    },
    {
        "number": 4340,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    b = a\n    for _ in range(2):\n        a = a[n:] + a[:n]\n        a = [2 if i == 1 else 1 if i == 2 else 3 if i == 3 else 4 if i == 4 else 5 if i == 5 else 6 if i == 6 else 5 if i == 9 else 9 if i == 10 else 10 for i in a]\n    return''.join(map(str, a))\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nb = a\nfor _ in range(2):\n    a = a[n:] + a[:n]\n    a = [2 if i == 1 else 1 if i == 2 else 3 if i == 3 else 4 if i == 4 else 5 if i == 5 else 6 if i == 6 else 5 if i == 9 else 9 if i == 10 else 10 for i in a]\n\nprint(*a)\n"
    },
    {
        "number": 4340,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n   ..."
    },
    {
        "number": 4341,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    edges = [(int(x) - 1) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        v1, v2 = edge\n        graph[v1].append(v2)\n        graph[v2].append(v1)\n\n    comp = set()\n    for i, j in enumerate(graph):\n        if j and i not in comp:\n            visited = set()\n            queue = [i]\n            while queue:\n                v = queue.pop(0)\n                if v in visited:\n                    continue\n                visited.add(v)\n                if v in comp:\n                    continue\n                comp.add(v)\n                queue.extend(j for v in graph[v] if v not in visited)\n    return str(len(comp) - len(comp.intersection(comp)))\n\n\nassert(solution(stdin) == \"1\")\n"
    },
    {
        "number": 4341,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ninput = '''3 3\n1 2\n2 3\n1 3\n\noutput = solution(input)'''\n\n\"\"\"\n\nfrom sys import setrecursionlimit\nsetrecursionlimit(200000)\n\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_adj(vertex: int) -> Tuple[int]:\n        adj_vertex = set()\n        for edge in edges:\n            if edge[0] == vertex:\n                adj_vertex.add(edge[1])\n            if edge[1] == vertex:\n                adj_vertex.add(edge[0])\n        return tuple(sorted(adj_vertex))\n\n    def dfs(vertex: int, vertex_stack: List[int], visited: List[bool] = None) -> None:\n        if visited is None:\n            visited = [False] * n\n        visited[vertex] = True\n        for adj_vertex in find_adj(vertex):\n            if adj_vertex in vertex_stack:\n                continue\n            if not visited[adj_vertex]:\n                vertex_stack.append(adj_vertex)\n                dfs(adj_vertex, vertex_stack, visited)\n\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n    nodes_with_adjacent_nodes = set()\n    for edge in edges:\n        nodes_with_adjacent_nodes.add(edge[0])\n        nodes_with_adjacent_nodes.add(edge[1])\n    nodes = list(nodes_with_adjacent_nodes)\n    nodes.sort()\n    vertex_stack = []\n    visited = [False] * n\n    for node in nodes:\n        if not visited[node]:\n            vertex_stack.append(node)\n            dfs(node, vertex_stack, visited)\n    print(sum(visited))\n    return \"\""
    },
    {
        "number": 4341,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    graph = Graph(n)\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph.add_edge(u - 1, v - 1)\n\n    return str(graph.get_number_of_connected_components_with_cycles())\n"
    },
    {
        "number": 4341,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    stdin = stdin.splitlines()\n    n, m = [int(x) for x in stdin[0].split()]\n    edges = {(int(x) for x in stdin[1 + i].split()): set() for i in range(m)}\n    for u, v in edges.keys():\n        edges[v].add(u)\n        edges[u].add(v)\n    return '1' if len(edges) == 2 * n else '2'"
    },
    {
        "number": 4341,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here\n\"\"\"\n\n\nimport sys\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n'''\n"
    },
    {
        "number": 4341,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution to the problem\n    >>> solution('1 2\\n3 4\\n5 4\\n3 5\\n')\n    '2'\n    \"\"\"\n    # return stdin[:-1].split()\n    # return stdin.split()[-1]\n    return stdin.strip().split()[-1]"
    },
    {
        "number": 4341,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    visited = [False] * n\n    for _ in range(m):\n        v1, v2 = map(int, stdin.split())\n        graph[v1].append(v2)\n        graph[v2].append(v1)\n    \n    result = 0\n    for vertex in range(n):\n        if not visited[vertex]:\n            if is_cycle(graph, vertex, visited):\n                result += 1\n    return str(result)\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = map(int, stdin.split())\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        adj[u].append(v)\n        adj[v].append(u)\n    visited = set()\n    num = 0\n    for i in range(n):\n        if i not in visited:\n            t = [i]\n            visited.add(i)\n            while len(t) > 0:\n                u = t.pop()\n                for v in adj[u]:\n                    if v not in visited:\n                        visited.add(v)\n                        t.append(v)\n            num += 1\n    return str(num)"
    },
    {
        "number": 4342,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_nice(u: int, v: int) -> bool:\n        if u in red or v in red:\n            return False\n        if u in blue or v in blue:\n            return False\n        return True\n\n    n = int(stdin.readline())\n    red, blue = set(), set()\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        if u not in red and v not in red:\n            if is_nice(u, v):\n                red.add(u)\n                red.add(v)\n        elif u not in blue and v not in blue:\n            if is_nice(u, v):\n                blue.add(u)\n                blue.add(v)\n\n    return str(len(red & blue))\n"
    },
    {
        "number": 4342,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    colors = tuple(int(color) for color in stdin.split())\n    def num_edges(u: int, v: int) -> int:\n        if colors[u]!= colors[v]:\n            return 1\n        return 0\n\n    edges = [tuple(map(int, edge.split())) for edge in stdin.splitlines()[1:]]\n    edges.sort(key=lambda e: num_edges(e[0], e[1]))\n    def components(edges: List[Tuple[int, int]]) -> Tuple[List[int], List[int]]:\n        components = [[], []]\n        for edge in edges:\n            if edge[0] not in components[0]:\n                components[0].append(edge[0])\n            if edge[1] not in components[1]:\n                components[1].append(edge[1])\n        return components\n    components = components(edges)\n    print(len([i for i in range(n) if i not in components[0] and i not in components[1]]))"
    },
    {
        "number": 4342,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, *colors = map(int, stdin.split())\n    tree = {i: [] for i in range(len(colors))}\n    for u, v in [map(int, line.split()) for line in stdin.strip().split('\\n')]:\n        tree[u] += [v]\n        tree[v] += [u]\n    \n    red = [i for i, v in enumerate(colors) if v == 1]\n    blue = [i for i, v in enumerate(colors) if v == 2]\n    if len(red) < 2 or len(blue) < 1:\n        return '0'\n    \n    def traverse(v: int, tree: dict[int, list[int]], root: int) -> list[int]:\n        if not tree[v]:\n            return [root]\n        if tree[v] == [root]:\n            return [root]\n        \n        return traverse(tree[v][0], tree, v) + traverse(tree[v][1], tree, v)\n    \n    for u, v in [map(int, line.split()) for line in stdin.strip().split('\\n')]:\n        if tree[u] and tree[v] and tree[u][0]!= tree[v][0]:\n            if (traverse(tree[u][0], tree, u) + traverse(tree[v][0], tree, v)) not in [red, blue]:\n                return '1'\n    return '0'\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4342,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def traverse(node: int, prev: int) -> None:\n        visited[node] = True\n        if node in edges:\n            for child in edges[node]:\n                if visited[child]:\n                    continue\n                if child == prev:\n                    continue\n                traverse(child, node)\n\n    n, *a = [int(x) for x in stdin.split()]\n    edges = {x: [] for x in range(n)}\n    for idx in range(n):\n        for j in range(idx + 1, n):\n            if a[j] == a[idx]:\n                edges[idx].append(j)\n                edges[j].append(idx)\n    visited = [False] * n\n    count = 0\n    for v1 in range(n):\n        if visited[v1]:\n            continue\n        traverse(v1, -1)\n        count += 1\n    return str(count)\n\n\nassert(solution('''5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5''') == '1')\nassert(solution('''3\n1 1 2\n2 3\n1 3\n''') == '0')\nassert(solution('''5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n''') == '4')\nassert(solution('''6\n1 0 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n''') == '6')\nassert(solution('''7\n1 0 0 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n''') == '0')\nassert(solution('''8\n1 0 0 0 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n95 97\n96 98\n97 99\n98 100\n99 101\n100 102\n101 103\n103 104\n104 105\n105 106\n106 107\n107 108\n108 109\n109 110\n110 111\n111 112\n112 113\n113 114\n114 115\n115 116\n116 117\n117 118\n118 119\n119 120\n120 121\n121 122\n122 123\n123 124\n124 125\n125 126\n126 127\n127 128\n128 129\n129 130\n130 131\n131 132\n132 133\n133 134\n134 135\n135 136\n136 137\n137 138\n138 139\n139 140\n139 141\n141 142\n142 143\n143 144\n144 145\n145 146\n146 147\n147 148\n148 149\n149 150\n150 151\n151 152\n152 153\n153 154\n153 155\n155 156\n155 157\n157 158\n158 159\n159 160\n160 161\n161 162\n161 163\n163 164\n164 165\n165 166\n166 167\n167 168\n168 169\n169 170\n169 171\n171 172\n172 173\n173 174\n174 175\n175 176\n176 177\n177 178\n178 179\n179 180\n180 181\n181 182\n182 183\n183 184\n183 185\n185 186\n186 187\n187 188\n188 189\n189 190\n190 191\n191 192\n192 193\n193 194\n194 195\n195 196\n195 197\n196 198\n196 199\n197 200\n197 201\n197 202\n197 203\n197 204\n197 205\n197 206\n197 207\n197 208\n197 209\n197 210\n197 211\n197 212\n197 213\n197 214\n197 215\n197 216\n197 217\n197 218\n197 219\n197 220\n197 221\n197 222\n197 223\n197 224\n197 225\n197 226\n197 227\n197 228\n197 229\n197 230\n197 231\n197 232\n197 233\n197 234\n197 235\n197 236\n197 237\n197 238\n197 239\n197 240\n197 241\n197 242\n197 243\n197 244\n197 245\n197 246\n197 247\n197 248\n197 249\n197 250\n197 251\n197 252\n197 253\n197 254\n197 255\n197 256\n197 257\n197 258\n197 259\n197 260\n197 261\n197 262\n197 263\n197 264\n197 265\n197 266\n197 267\n197 268\n197 269\n197 270\n197 271\n197 272\n197 273\n197 274\n197 275\n197 276\n197 277\n197 278\n197 279\n197 280\n197 281\n197 282\n197 283\n197 284\n197 285\n197 286\n197 287\n197 288\n197 289\n197 290\n197 291\n197 292\n197 293\n197 294\n197 295\n197 296\n197 297\n197 298\n197 299\n197 300\n197 301\n197 302\n197 303\n197 304\n197 305\n197 306\n197 307\n197 308\n197 309\n197 310\n197 311\n197 312\n197 313\n197 314\n197 315\n197"
    },
    {
        "number": 4342,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        v, u = map(int, stdin.readline().split())\n        graph[v].append(u)\n        graph[u].append(v)\n    red, blue = 0, 0\n    for i in range(n):\n        if numbers[i] == 1:\n            red += 1\n        elif numbers[i] == 2:\n            blue += 1\n        else:\n            continue\n    def dfs(graph, v, visited, colors):\n        colors[v] = 1\n        visited[v] = True\n        for u in graph[v]:\n            if not visited[u]:\n                dfs(graph, u, visited, colors)\n    visited = [False] * n\n    colors = [0] * n\n    for i in range(n):\n        if not visited[i]:\n            dfs(graph, i, visited, colors)\n    return str(red * blue)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4342,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4342,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4342,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_nice_edges(stdin))\n\n\n-----\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4342,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    colors = stdin.readline().strip()\n    for _ in range(int(n) - 1):\n        v1, v2 = stdin.readline().strip().split(' ')\n        v1, v2 = int(v1), int(v2)\n        if v1 == v2 or colors[v1] == colors[v2]:\n            continue\n        return '1'\n    return '0'\n\nimport sys\n"
    },
    {
        "number": 4342,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    colors = list(map(int, stdin.split()))\n    n = colors.count(2)\n    graph = defaultdict(set)\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u].add(v)\n        graph[v].add(u)\n    red = 0\n    blue = 0\n    for color in colors:\n        if color == 1:\n            red += 1\n        elif color == 2:\n            blue += 1\n    if red > blue:\n        return str(red - blue)\n    else:\n        return str(blue - red)\n\n\nassert solution('''5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5''') == '1'\nassert solution('''5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n2 3''') == '4'\nassert solution('''5\n1 1 2\n2 3\n1 3\n''') == '0'\nassert solution('''5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n1 3''') == '0'\nassert solution('''5\n2 1 2\n2 3\n1 3\n''') == '0'\nassert solution('''6\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n1 3\n''') == '4'\nassert solution('''6\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n4 3\n''') == '5'\nassert solution('''7\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n1 3\n''') == '3'\nassert solution('''7\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n4 3\n''') == '4'\nassert solution('''8\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n1 3\n''') == '4'\nassert solution('''8\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n4 3\n''') == '5'\nassert solution('''9\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n1 3\n''') == '5'\nassert solution('''9\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n4 3\n''') == '5'\nassert solution('''10\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n1 3\n''') == '5'\nassert solution('''10\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n4 3\n''') == '5'\nassert solution('''11\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n1 3\n''') == '5'\nassert solution('''11\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n4 3\n''') == '5'\nassert solution('''12\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n1 3\n''') == '5'\nassert solution('''12\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n4 3\n''') == '5'\nassert solution('''13\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n1 3\n''') == '5'\nassert solution('''13\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n4 3\n''') == '5'\nassert solution('''14\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n1 3\n''') == '5'\nassert solution('''14\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n4 3\n''') == '5'\nassert solution('''15\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n1 3\n''') == '5'\nassert solution('''15\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n4 3\n''') == '5'\nassert solution('''16\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8"
    },
    {
        "number": 4343,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return...\n"
    },
    {
        "number": 4343,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = sorted(stdin.readline().strip())\n    t = sorted(stdin.readline().strip())\n\n    def find_median(a, b):\n        n = len(a)\n        mid = n // 2\n        return a[mid] if n % 2 == 1 else (a[mid - 1] + a[mid]) / 2\n\n    ans = ''\n    for i in range(n):\n        if s[i] == t[i]:\n            ans += t[i]\n        else:\n            ans += find_median(s, t)\n    return ans\n"
    },
    {
        "number": 4343,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    # replace all letters with their values\n    s = s.replace('a', '0')\n    s = s.replace('b', '1')\n    s = s.replace('c', '2')\n    s = s.replace('d', '3')\n    s = s.replace('e', '4')\n    s = s.replace('f', '5')\n    s = s.replace('g', '6')\n    s = s.replace('h', '7')\n    s = s.replace('i', '8')\n    s = s.replace('j', '9')\n    s = s.replace('k', 'a')\n    s = s.replace('l', 'b')\n    s = s.replace('m', 'c')\n    s = s.replace('n', 'd')\n    s = s.replace('o', 'e')\n    s = s.replace('p', 'f')\n    s = s.replace('q', 'g')\n    s = s.replace('r', 'h')\n    s = s.replace('s', 'i')\n    s = s.replace('t', 'j')\n    s = s.replace('u', 'k')\n    s = s.replace('v', 'l')\n    s = s.replace('w','m')\n    s = s.replace('x', 'n')\n    s = s.replace('y', 'o')\n    s = s.replace('z', 'p')\n\n    t = t.replace('a', '0')\n    t = t.replace('b', '1')\n    t = t.replace('c', '2')\n    t = t.replace('d', '3')\n    t = t.replace('e', '4')\n    t = t.replace('f', '5')\n    t = t.replace('g', '6')\n    t = t.replace('h', '7')\n    t = t.replace('i', '8')\n    t = t.replace('j', '9')\n    t = t.replace('k', 'a')\n    t = t.replace('l', 'b')\n    t = t.replace('m', 'c')\n    t = t.replace('n', 'd')\n    t = t.replace('o', 'e')\n    t = t.replace('p', 'f')\n    t = t.replace('q', 'g')\n    t = t.replace('r', 'h')\n    t = t.replace('s', 'i')\n    t = t.replace('t', 'j')\n    t = t.replace('u', 'k')\n    t = t.replace('v', 'l')\n    t = t.replace('w','m')\n    t = t.replace('x', 'n')\n    t = t.replace('y', 'o')\n    t = t.replace('z', 'p')\n\n    s = int(s)\n    t = int(t)\n    res = \"\"\n\n    if s == t:\n        return \" \"\n\n    while s!= t:\n        if s > t:\n            res = res + \"n\"\n            s = s - 1\n        else:\n            res = res + \"p\"\n            t = t - 1\n    res = res + \"p\"\n    return res\n\n\ndef"
    },
    {
        "number": 4343,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return..."
    },
    {
        "number": 4343,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = stdin[:k]\n    t = stdin[k:]\n    a = []\n    b = []\n    for i in range(len(s)):\n        a.append(s[i])\n        b.append(t[i])\n    a.sort()\n    b.sort()\n    print(a[k // 2] + b[k // 2])"
    },
    {
        "number": 4343,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    # Write your code here\n    # return \"\"\n    l = []\n    for i in range(k):\n        l.append(s[i]+t[i])\n    l.sort()\n    l.reverse()\n    print(l[(k-1)/2])\n    return \"\""
    },
    {
        "number": 4343,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = stdin[0:k]\n    t = stdin[k + 1:]\n    return median(s, t, k)\n\ndef"
    },
    {
        "number": 4343,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    return find_median(k, s, t)\n\ndef"
    },
    {
        "number": 4343,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    if s[0] == s[1]:\n        return s[0] + s[2]\n    return s[(len(s) + 1) // 2]"
    },
    {
        "number": 4343,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    if s < t:\n        s += s\n        t += t\n    if s > t:\n        s += s\n        t += t\n    s = s[:k]\n    t = t[:k]\n    ls = [x[:k] for x in stdin.split()[3:]]\n    ls.sort()\n    m = len(ls) // 2\n    if m == 0:\n        return ls[0]\n    elif m == 1:\n        return ls[0]\n    else:\n        return ls[m - 1]\n\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    if n < k:\n        return \"NO\"\n    ratings = [int(x) for x in stdin.strip().split()]\n    students = set(ratings)\n    if k > len(students):\n        return \"NO\"\n    else:\n        return \"YES\" +''.join(str(x) for x in sorted(students))"
    },
    {
        "number": 4344,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n\n    ratings = list(map(int, stdin.split()))\n    # ratings.sort()\n    if k > n:\n        return \"NO\"\n\n    ratings = list(set(ratings))\n    ratings.sort()\n\n    return \"YES\" + \" \" + \" \".join(map(str, ratings))"
    },
    {
        "number": 4344,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4344,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n    if len(a) < k or max(a) > 100:\n        return \"NO\"\n    if len(a) == k:\n        return \"YES\"\n    s = set()\n    for i in range(k):\n        x = a[i]\n        if x in s:\n            continue\n        s.add(x)\n    return \"YES\\n\" + \"\\n\".join(map(str, a[:k]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4344,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    # check the validity of the inputs\n    if n < 1 or n > 100 or k < 1 or k > n:\n        return \"NO\"\n\n    # sort the ratings\n    ratings = [int(x) for x in stdin.split()]\n    ratings.sort()\n\n    # try to construct a team\n    for i in range(1, n + 1):\n        if i not in ratings:\n            return \"NO\"\n    return \"YES\" + \" \" + \" \".join([str(x) for x in ratings])\n\n\nassert(solution(\"5 3\\n15 13 15 15 12\\n\") == \"YES\\n1 2 5\\n\")\nassert(solution(\"5 4\\n15 13 15 15 12\\n\") == \"NO\\n\")\nassert(solution(\"4 4\\n20 10 40 30\\n\") == \"YES\\n1 2 3 4\\n\")\nassert(solution(\"4 4\\n20 10 40 30\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n1 1\\n\") == \"NO"
    },
    {
        "number": 4344,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4344,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if not stdin:\n        return \"\"\n\n    n, k = list(map(int, stdin.split()))\n\n    if k > n:\n        return \"NO\"\n\n    rating = list(map(int, stdin.split()))\n    n = len(rating)\n\n    if n == k:\n        return \"YES\"\n\n    rating.sort()\n    count = {}\n\n    for i in rating:\n        count[i] = count.get(i, 0) + 1\n\n    keys = list(count.keys())\n\n    for i in range(n - k):\n        if count.get(keys[i], 0) > 1:\n            del count[keys[i]]\n        else:\n            del count[keys[i]]\n            break\n\n    keys = list(count.keys())\n\n    if len(keys) == k:\n        for key in keys:\n            print(key)\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if k > n:\n        return \"NO\"\n    a.sort()\n    res = \"YES\"\n    for i in range(k-1):\n        if a[i] == a[i+1]:\n            res = \"NO\"\n            break\n    return res\n"
    },
    {
        "number": 4345,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4345,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    increasing = [0 for i in range(n)]\n    decreasing = [0 for i in range(n)]\n\n    increasing[0] = 0\n    decreasing[0] = 0\n    \n    for i in range(1, n):\n        if increasing[i-1] > a[i]:\n            increasing[i] = increasing[i-1] + 1\n            \n        if decreasing[i-1] < a[i]:\n            decreasing[i] = decreasing[i-1] + 1\n            \n    for i in range(n):\n        if increasing[i] == increasing[i-1] + 1:\n            increasing[i] = 0\n        else:\n            increasing[i] = 1\n            \n        if decreasing[i] == decreasing[i-1] + 1:\n            decreasing[i] = 0\n        else:\n            decreasing[i] = 1\n            \n    if increasing[n-1] == decreasing[n-1] == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n    \n\nassert(solution(\"4\\n1 2 4 0 2\") == \"YES\")\nassert(solution(\"4\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"YES\")\nassert(solution(\"9\\n5 1 3 6 8 2 9 0 10\") == \"NO\")\nassert(solution(\"5\\n1 2 4 0 2\") == \"YES\")\nassert(solution(\"5\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"8\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"8\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"10\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"10\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"16\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"16\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"1000\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"1000\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"10000\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"10000\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"10000000\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"10000000\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"100000000\\n1 2 4 0 2\") == \"NO\")\nassert(solution(\"100000000\\n1 2 4 0 2\") == \"NO\")\n\n\"\"\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"NO\"\n    a = [int(x) for x in stdin.split()]\n    if sorted(a) == a:\n        return \"NO\"\n    n1 = 0\n    n2 = 0\n    for i in range(n):\n        if a[i] == 1:\n            n2 += 1\n        elif a[i] == 0:\n            n1 += 1\n    if n1 == 0:\n        return \"NO\"\n    if n1 < n2:\n        n1, n2 = n2, n1\n    if n1 * 2 == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = []\n    curr = 0\n    for x in a:\n        if x == 0:\n            res.append(0)\n            continue\n        if curr < x:\n            res.append(0)\n            curr = x\n            continue\n        res.append(1)\n    return \"YES\" if res.count(0) == 0 and res.count(1) == 0 else \"NO\"\nprint(solution(input()))"
    },
    {
        "number": 4345,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = [0] * n\n    for i in range(n):\n        if a[i] > a[i - 1]:\n            res[i] = 1\n        elif a[i] < a[i - 1]:\n            res[i] = 0\n    return \"YES\\n\" + \"\".join(map(str, res))\n"
    },
    {
        "number": 4345,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4345,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    increasing = []\n    decreasing = []\n\n    for i, x in enumerate(a):\n        if i == 0:\n            increasing.append(x)\n        else:\n            if x > increasing[-1]:\n                increasing.append(x)\n            else:\n                decreasing.append(x)\n\n    if len(increasing) == len(decreasing):\n        return \"YES\"\n\n    increasing_len = len(increasing)\n    decreasing_len = len(decreasing)\n    while increasing_len < decreasing_len:\n        if increasing[-1] > decreasing[-1]:\n            increasing.append(increasing[-1])\n            increasing_len += 1\n        else:\n            decreasing.append(decreasing[-1])\n            decreasing_len += 1\n\n    return \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if b[j] == 1:\n            if a[i] > b[j]:\n                j += 1\n            else:\n                i += 1\n        else:\n            if a[i] < b[j]:\n                j += 1\n            else:\n                i += 1\n    if i == n or j == n:\n        return 'NO'\n    else:\n        return 'YES'\n\nassert solution('1\\n2') == 'NO'\nassert solution('1\\n1') == 'YES'\nassert solution('4\\n1 2 4 0 2') == 'NO'\nassert solution('5\\n1 2 4 0 2') == 'YES'\nassert solution('10\\n1 2 4 0 2 5 3 6 7 8 9 10') == 'NO'\nassert solution('10\\n1 2 4 0 2 5 3 6 7 8 9 10 11 12') == 'NO'\nassert solution('20\\n1 2 4 0 2 5 3 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == 'NO'\nassert solution('20\\n1 2 4 0 2 5 3 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40') == 'NO'\nassert solution('10\\n1 2 4 0 2 5 3 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == 'YES'\nassert solution('10\\n1 2 4 0 2 5 3 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41') == 'YES'\nassert solution('10\\n1 2 4 0 2 5 3 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52') == 'YES'\nassert solution('10\\n1 2 4 0 2 5 3 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52') == 'YES'\nassert solution('10\\n1 2 4 0 2 5 3 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52') == 'YES'\n"
    },
    {
        "number": 4345,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = list(map(int, stdin.readline().split()))\n\n    increasing = [True] * n\n    decreasing = [True] * n\n    for i in range(n):\n        for j in range(i):\n            if lst[j] < lst[i] and increasing[j]:\n                increasing[i] = False\n                break\n        for j in range(i, n):\n            if lst[j] > lst[i] and decreasing[j]:\n                decreasing[i] = False\n                break\n\n    if not increasing and not decreasing:\n        return \"YES\"\n\n    elif increasing and decreasing:\n        return \"NO\"\n\n    else:\n        res = [\"1\"] * n\n        for i in range(n):\n            if increasing[i]:\n                res[i] = \"0\"\n            if decreasing[i]:\n                res[n - i - 1] = \"0\"\n        return \"YES\" + \"\".join(res)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4345,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    B = sorted(A)\n    C = sorted(A, reverse=True)\n    if A == B or A == C:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4346,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    queries = [stdin.readline().strip() for _ in range(t)]\n\n    for query in queries:\n        query = query.split()\n        L, v, l, r = int(query[0]), int(query[1]), int(query[2]), int(query[3])\n        n = v * (l // v)\n\n        for i in range(L // v):\n            if i * v in range(l, r + 1) and (i + 1) * v not in range(l, r + 1):\n                n += 1\n\n        print(n)\n    return None"
    },
    {
        "number": 4346,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        (L, v, l, r) = [int(n) for n in stdin.readline().split()]\n\n        result = 0\n        for i in range(l, r + 1, v):\n            if i % v == 0:\n                result += 1\n\n        print(result)\n"
    },
    {
        "number": 4346,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    result = [0] * n\n    for i in range(n):\n        line = stdin.readline().split()\n        result[i] = int(line[3]) - int(line[2])\n    return '\\n'.join(str(x) for x in result)"
    },
    {
        "number": 4346,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return ''.join(str(i) for i in range(n))\n\nassert solution('1\\n1\\n1\\n1') == '1'\nassert solution('2\\n2\\n2\\n2') == '2'\nassert solution('3\\n3\\n3\\n3') == '3'\nassert solution('4\\n4\\n4\\n4') == '4'\nassert solution('5\\n5\\n5\\n5') == '5'\nassert solution('6\\n6\\n6\\n6') == '6'\nassert solution('7\\n7\\n7\\n7') == '7'\nassert solution('8\\n8\\n8\\n8') == '8'\nassert solution('9\\n9\\n9\\n9') == '9'\nassert solution('10\\n10\\n10\\n10') == '10'\nassert solution('11\\n11\\n11\\n11') == '11'\nassert solution('12\\n12\\n12\\n12') == '12'\nassert solution('13\\n13\\n13\\n13') == '13'\nassert solution('14\\n14\\n14\\n14') == '14'\nassert solution('15\\n15\\n15\\n15') == '15'\nassert solution('16\\n16\\n16\\n16') == '16'\nassert solution('17\\n17\\n17\\n17') == '17'\nassert solution('18\\n18\\n18\\n18') == '18'\nassert solution('19\\n19\\n19\\n19') == '19'\nassert solution('20\\n20\\n20\\n20') == '20'\nassert solution('21\\n21\\n21\\n21') == '21'\nassert solution('22\\n22\\n22\\n22') == '22'\nassert solution('23\\n23\\n23\\n23') == '23'\nassert solution('24\\n24\\n24\\n24') == '24'\nassert solution('25\\n25\\n25\\n25') == '25'\nassert solution('26\\n26\\n26\\n26') == '26'\nassert solution('27\\n27\\n27\\n27') == '27'\nassert solution('28\\n28\\n28\\n28') == '28'\nassert solution('29\\n29\\n29\\n29') == '29'\nassert solution('30\\n30\\n30\\n30') == '30'\nassert solution('31\\n31\\n31\\n31') == '31'\nassert solution('32\\n32\\n32\\n32') == '32'\nassert solution('33\\n33\\n33\\n33') == '33'\nassert solution('34\\n34\\n34\\n34') == '34'\nassert solution('35\\n35\\n35\\n35') == '35'\nassert solution('36\\n36\\n36\\n36') == '36'\nassert solution('37\\n37\\n37\\n37') == '37'\nassert solution('38\\n38\\n38\\n38') == '38'\nassert solution('39\\n39\\n39\\n39') == '39'\nassert solution('40\\n40\\n40\\n40') == '40'\nassert solution('41\\n41\\n41\\n41') == '41'\nassert solution('42\\n42\\n42\\n42') == '42'\nassert solution('43\\n43\\n43\\n43') == '43'\nassert solution('44\\n44\\n44\\n44') == '44'\nassert solution('45\\n45\\n45\\n45') == '45'\nassert solution('46\\n46\\n46\\n46') == '46'\nassert solution('47\\n47\\n47\\n47') == '47'\nassert solution('48\\n48\\n48\\n48') == '48'\nassert solution('49\\n49\\n49\\n49') == '49'\nassert solution('50\\n50\\n50\\n50') == '50'\nassert solution('51\\n51\\n51\\n51') == '51'\nassert solution('52\\n52\\n52\\n52') == '52'\nassert solution('53\\n53\\n53\\n53') == '53'\nassert solution('54\\n54\\n54\\n54') == '54'\nassert solution('55\\n55\\n55\\n55') == '55'\nassert solution('56\\n56\\n56\\n56') == '56'\nassert solution('57\\n57\\n57\\n57') == '57'\nassert solution('58\\n58\\n58\\n58') == '58'\nassert solution('59\\n59\\n59\\n59') == '59'\nassert solution('60\\n60\\n60\\n60') == '60'\nassert solution('61\\n61\\n61\\n61') == '61'\nassert solution('62\\n62\\n62\\n62') == '62'\nassert solution('63\\n63\\n63\\n63') == '63'\nassert solution('64\\n64\\n64\\n64') == '64'\nassert solution('65\\n65\\n65\\n65') == '65'\nassert solution('66\\n66\\n66\\n66') == '66'\nassert solution('67\\n67\\n67\\n67') == '67'\nassert solution('68\\n68\\n68\\n68') == '68'\nassert solution('69\\n69\\n69\\n69') == '69'\nassert solution('70\\n70\\n70\\n70') == '70'\nassert solution('71\\n71\\n71\\n71') == '71'\nassert"
    },
    {
        "number": 4346,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        L, v, l, r = [int(x) for x in stdin.readline().split()]\n        n_l = (L + 1) // v\n        l_tot = sum(range(l, n_l * v, v))\n        if l_tot >= l:\n            l_tot += v - (n_l - 1)\n        r_tot = sum(range(r, n_l * v, v))\n        if r_tot > r:\n            r_tot -= v\n        print(l_tot - r_tot)"
    },
    {
        "number": 4346,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    ans = []\n    for _ in range(t):\n        ans.append(int(stdin.readline()))\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4346,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    queries = [int(stdin.readline()) for _ in range(n)]\n    return '\\n'.join(str(query_queries(queries[i])) for i in range(n))\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(0, t):\n        l, v, l, r = [int(x) for x in stdin.readline().strip().split(\" \")]\n        ans = 0\n        for p in range(l, r + 1):\n            if p % v == 0 and not (l <= p <= r):\n                ans += 1\n        print(ans)"
    },
    {
        "number": 4346,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline().strip())\n    results = [0] * count\n    for i in range(count):\n        L, v, l, r = (int(n) for n in stdin.readline().strip().split(\" \"))\n        for j in range(1, v + 1):\n            if (j + l - 1) % v == 0:\n                results[i] += 1\n    return \"\\n\".join(str(r) for r in results)\n\n\n\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        l, v, p, q = [int(x) for x in stdin.split()]\n        if l % v == 0:\n            print(v)\n            continue\n        if p % v == 0:\n            print(v)\n            continue\n        if p % l == 0:\n            print(v)\n            continue\n        if q % v == 0:\n            print(v)\n            continue\n        if q % l == 0:\n            print(v)\n            continue\n        if (p + q) % v == 0:\n            print(v)\n            continue\n        if (p + q) % l == 0:\n            print(v)\n            continue\n        print(0)\n    return ''"
    },
    {
        "number": 4347,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(factorial(n) // (factorial(n // 2) ** 2))"
    },
    {
        "number": 4347,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return str(int(n*(n-1) / 2))"
    },
    {
        "number": 4347,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of ways of making two round dances\n    in the range [2,20] using the formula n!/((n-2)!)\n    \"\"\"\n    n = int(stdin)\n    if n < 2 or n > 20:\n        return ''\n    if n % 2!= 0:\n        return ''\n    \n    result = 1\n    for i in range(2,n+1,2):\n        result *= i\n    return str(result//math.factorial(n-2))"
    },
    {
        "number": 4347,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(binomial(n, 2) * 2)\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return 0\n    \n    result = 1\n    factor = 2\n    while factor <= n:\n        result *= n // factor\n        factor += 1\n    \n    return result\n\nassert(solution(2) == 1)\nassert(solution(4) == 3)\nassert(solution(8) == 1260)\nassert(solution(20) == 121645100408832000)"
    },
    {
        "number": 4347,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4347,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(factorial(n) // (factorial(n // 2) ** 2))\n\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"1\"\n    if n % 2!= 0:\n        return \"0\"\n    \n    def helper(n):\n        if n <= 2:\n            return 1\n        n1 = n // 2\n        n2 = n - n1\n        if n1 == n2:\n            return n1\n        return n1 + helper(n1) + helper(n2)\n    \n    return str(helper(n))\n    \n    \ndef"
    },
    {
        "number": 4347,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0 or n & 1:\n        return 0\n    return binom(n - 1, n / 2)\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n % 2!= 0:\n        return 0\n    return binom(n, n // 2)\n"
    },
    {
        "number": 4348,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    string = stdin.strip()\n\n    for i in range(k):\n        if string[0] == \"a\":\n            string = string[1:]\n        elif string[0] == \"b\":\n            string = string[1:]\n        elif string[0] == \"c\":\n            string = string[1:]\n        elif string[0] == \"d\":\n            string = string[1:]\n        elif string[0] == \"e\":\n            string = string[1:]\n        elif string[0] == \"f\":\n            string = string[1:]\n        elif string[0] == \"g\":\n            string = string[1:]\n        elif string[0] == \"h\":\n            string = string[1:]\n        elif string[0] == \"i\":\n            string = string[1:]\n        elif string[0] == \"j\":\n            string = string[1:]\n        elif string[0] == \"k\":\n            string = string[1:]\n        elif string[0] == \"l\":\n            string = string[1:]\n        elif string[0] == \"m\":\n            string = string[1:]\n        elif string[0] == \"n\":\n            string = string[1:]\n        elif string[0] == \"o\":\n            string = string[1:]\n        elif string[0] == \"p\":\n            string = string[1:]\n        elif string[0] == \"q\":\n            string = string[1:]\n        elif string[0] == \"r\":\n            string = string[1:]\n        elif string[0] == \"s\":\n            string = string[1:]\n        elif string[0] == \"t\":\n            string = string[1:]\n        elif string[0] == \"u\":\n            string = string[1:]\n        elif string[0] == \"v\":\n            string = string[1:]\n        elif string[0] == \"w\":\n            string = string[1:]\n        elif string[0] == \"x\":\n            string = string[1:]\n        elif string[0] == \"y\":\n            string = string[1:]\n        elif string[0] == \"z\":\n            string = string[1:]\n\n    return string"
    },
    {
        "number": 4348,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    s = stdin.strip()\n    while k > 0:\n        a = s.find('a')\n        b = s.find('b')\n        c = s.find('c')\n        if a!= -1:\n            s = s[:a] + s[a+1:]\n            k -= 1\n        elif b!= -1:\n            s = s[:b] + s[b+1:]\n            k -= 1\n        elif c!= -1:\n            s = s[:c] + s[c+1:]\n            k -= 1\n        elif k == 0:\n            break\n    return s"
    },
    {
        "number": 4348,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Given a string and an integer k, remove the first k letters from the string and return it. If the string is empty, return an empty string.'''\n    n, k = [int(x) for x in stdin.split()]\n    if n == 0:\n        return ''\n    s = stdin[:n]\n    while k > 0 and s!= '':\n        if s[0] == 'a':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'b':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'c':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'd':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'e':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'f':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'g':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'h':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'i':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'j':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'k':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'l':\n            s = s[1:]\n            k -= 1\n        elif s[0] =='m':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'n':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'o':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'p':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'q':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'r':\n            s = s[1:]\n            k -= 1\n        elif s[0] =='s':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 't':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'u':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'v':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'w':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'x':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'y':\n            s = s[1:]\n            k -= 1\n        elif s[0] == 'z':\n            s = s[1:]\n            k -= 1\n        else:\n            break\n    return s"
    },
    {
        "number": 4348,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    s = stdin.strip()\n    for _ in range(k):\n        if s and s[0] == 'a':\n            s = s[1:]\n        elif s and s[0] == 'b':\n            s = s[1:]\n        elif s and s[0] == 'c':\n            s = s[1:]\n        elif s and s[0] == 'z':\n            s = s[1:]\n    return s if s else None"
    },
    {
        "number": 4348,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4348,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4348,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    i = 0\n    while k > 0:\n        if 'a' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'b' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'c' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'd' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'e' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'f' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'g' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'h' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'i' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'j' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'k' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'l' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif'm' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'n' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'o' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'p' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'q' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'r' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif's' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 't' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'u' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'v' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'w' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'x' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'y' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        elif 'z' in s[i:]:\n            s = s[:i] + s[i+1:]\n            k -= 1\n        i += 1\n    return s\n\n\nassert solution(stdin) == stdin.strip()\n"
    },
    {
        "number": 4348,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4348,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[:n]\n    result = ''\n    for _ in range(k):\n        if s and s[0] == 'a':\n            s = s[1:]\n        elif s and s[0] == 'b':\n            s = s[1:]\n        elif s and s[0] == 'c':\n            s = s[1:]\n        elif s and s[0] == 'd':\n            s = s[1:]\n        elif s and s[0] == 'e':\n            s = s[1:]\n        elif s and s[0] == 'f':\n            s = s[1:]\n        elif s and s[0] == 'g':\n            s = s[1:]\n        elif s and s[0] == 'h':\n            s = s[1:]\n        elif s and s[0] == 'i':\n            s = s[1:]\n        elif s and s[0] == 'j':\n            s = s[1:]\n        elif s and s[0] == 'k':\n            s = s[1:]\n        elif s and s[0] == 'l':\n            s = s[1:]\n        elif s and s[0] =='m':\n            s = s[1:]\n        elif s and s[0] == 'n':\n            s = s[1:]\n        elif s and s[0] == 'o':\n            s = s[1:]\n        elif s and s[0] == 'p':\n            s = s[1:]\n        elif s and s[0] == 'q':\n            s = s[1:]\n        elif s and s[0] == 'r':\n            s = s[1:]\n        elif s and s[0] =='s':\n            s = s[1:]\n        elif s and s[0] == 't':\n            s = s[1:]\n        elif s and s[0] == 'u':\n            s = s[1:]\n        elif s and s[0] == 'v':\n            s = s[1:]\n        elif s and s[0] == 'w':\n            s = s[1:]\n        elif s and s[0] == 'x':\n            s = s[1:]\n        elif s and s[0] == 'y':\n            s = s[1:]\n        elif s and s[0] == 'z':\n            s = s[1:]\n        elif s and s[0] =='':\n            s = s[1:]\n        elif s and s[0] == ',':\n            s = s[1:]\n        elif s and s[0] == '\"':\n            s = s[1:]\n        elif s and s[0] == ':':\n            s = s[1:]\n        elif s and s[0] == ';':\n            s = s[1:]\n        elif s and s[0] == '<':\n            s = s[1:]\n        elif s and s[0] == '>':\n            s = s[1:]\n        elif s and s[0] == '?':\n            s = s[1:]\n        elif s and s[0] == '_':\n            s = s[1:]\n        elif s and s[0] == '-':\n            s = s[1:]\n        elif s and s[0] == '\\\\':\n            s = s[1:]\n        elif s and s[0] == '|':\n            s = s[1:]\n        elif s and s[0] == '{':\n            s = s[1:]\n        elif s and s[0] == '}':\n            s = s[1:]\n        elif s and s[0] == '[':\n            s = s[1:]\n        elif s and s[0] == ']':\n            s = s[1:]\n        elif s and s[0] == '$':\n            s = s[1:]\n        elif s and s[0] == '&':\n            s = s[1:]\n        elif s and s[0] == '*':\n            s = s[1:]\n        elif s and s[0] == '`':\n            s = s[1:]\n        elif s and s[0] == '+':\n            s = s[1:]\n        elif s and s[0] == '%':\n            s = s[1:]\n        elif s and s[0] == '!':\n            s = s[1:]\n        elif s and s[0] == '~':\n            s = s[1:]\n        elif s and s[0] == '^':\n            s = s[1:]\n        elif s and s[0] == '@':\n            s = s[1:]\n        elif s and s[0] == '`':\n            s = s[1:]\n        elif s and s[0] == '\"':\n            s = s[1:]\n        elif s and s[0] == ';':\n            s = s[1:]\n        elif s and s[0] == ':':\n            s = s[1:]\n        elif s and s[0] == '_':\n            s = s[1:]\n        elif s and s[0] == ',':\n            s = s[1:]\n        elif s and s[0] == '=':\n            s = s[1:]\n        elif s and s[0] == '+':\n            s = s[1:]\n        elif s and s[0] == '*':\n            s = s[1:]\n        elif s and s[0] == '{':\n            s = s[1:]\n        elif s and s[0] == '}':\n            s = s[1:]\n        elif s and s[0] == '{':\n            s = s[1:]\n        elif s and s[0] == '}':\n            s = s[1:]\n        elif s and s[0] == ']':\n            s = s[1:]\n        elif s and s[0] == '[':\n            s = s[1:]\n        elif s and s[0] == '-':\n            s = s[1:]\n        elif s and s[0] == '|':\n            s = s[1:]\n        elif s and s[0] == '.':\n            s = s[1:]\n        elif s and s[0] == '/':\n            s = s[1:]\n        elif s and s[0] == '\\\\':\n            s = s[1:]\n        elif s and s[0] == '|':\n            s = s[1:]\n        elif s and s[0] == '<':\n"
    },
    {
        "number": 4348,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length, num_rem = [int(n) for n in stdin.split()]\n    string = stdin.strip()\n    if len(string) < num_rem:\n        return \"\"\n    for i in range(num_rem):\n        if string[0] == \"a\":\n            string = string[1:]\n        elif string[0] == \"b\":\n            string = string[1:]\n        elif string[0] == \"c\":\n            string = string[1:]\n        elif string[0] == \"d\":\n            string = string[1:]\n        elif string[0] == \"e\":\n            string = string[1:]\n        elif string[0] == \"f\":\n            string = string[1:]\n        elif string[0] == \"g\":\n            string = string[1:]\n        elif string[0] == \"h\":\n            string = string[1:]\n        elif string[0] == \"i\":\n            string = string[1:]\n        elif string[0] == \"j\":\n            string = string[1:]\n        elif string[0] == \"k\":\n            string = string[1:]\n        elif string[0] == \"l\":\n            string = string[1:]\n        elif string[0] == \"m\":\n            string = string[1:]\n        elif string[0] == \"n\":\n            string = string[1:]\n        elif string[0] == \"o\":\n            string = string[1:]\n        elif string[0] == \"p\":\n            string = string[1:]\n        elif string[0] == \"q\":\n            string = string[1:]\n        elif string[0] == \"r\":\n            string = string[1:]\n        elif string[0] == \"s\":\n            string = string[1:]\n        elif string[0] == \"t\":\n            string = string[1:]\n        elif string[0] == \"u\":\n            string = string[1:]\n        elif string[0] == \"v\":\n            string = string[1:]\n        elif string[0] == \"w\":\n            string = string[1:]\n        elif string[0] == \"x\":\n            string = string[1:]\n        elif string[0] == \"y\":\n            string = string[1:]\n        elif string[0] == \"z\":\n            string = string[1:]\n        elif string[0] == \" \":\n            string = string[1:]\n    return string\n"
    },
    {
        "number": 4349,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    days = [0 for _ in range(n)]\n\n    for _ in range(m):\n        d, t = map(int, stdin.split())\n        days[t - 1] += 1\n\n    for i, k in enumerate(days):\n        if k == 0:\n            days[i] = 1\n\n    return max(days)\n"
    },
    {
        "number": 4349,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    k = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    p.sort()\n    p.reverse()\n\n    m = min(p)\n\n    result = 1\n    for i in range(m):\n        if i + 1 in p:\n            result += 1\n\n    return result\n\n\nassert(solution(stdin) == 8)\nassert(solution(stdin2) == 20)\n"
    },
    {
        "number": 4349,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    d = list(map(int, stdin.readline().split()))\n    return stdin.read()\n\nassert solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8'\nassert solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20'\nassert solution('''1 2\n5 2\n5 3\n''') == '5'\nassert solution('''1 3\n1 1\n1 2\n1 3\n''') == '2'\nassert solution('''1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1"
    },
    {
        "number": 4349,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys"
    },
    {
        "number": 4349,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    special_offers = list(map(int, stdin.readline().split()))\n\n    sorted_k = sorted(k)\n    sorted_k.reverse()\n\n    sum_of_k = sum(sorted_k)\n    d = 1\n    while True:\n        if d > 2 * 10 ** 5:\n            return -1\n        if sum_of_k - (m - d) * 2 <= 0:\n            return d\n        d += 1\n"
    },
    {
        "number": 4349,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    k = [int(x) for x in stdin.split()]\n    k.sort()\n    # print(n, m, k)\n    cur = sum(k)\n    m -= 2\n    ans = None\n    i = 0\n    while i < n:\n        if cur <= m:\n            m -= cur\n            i += 1\n            cur += k[i]\n            # print(i, cur)\n        elif m == 0:\n            break\n        else:\n            ans = i\n            break\n    else:\n        ans = n\n    return str(ans)\n\nassert(solution(stdin) == stdin)\n\ntest_inp1 = '5 6\\n1 2 0 2 0'\ntest_out1 = '8'\n\ntest_inp2 = '5 3\\n4 2 1 3 2'\ntest_out2 = '20'\n\ntest_inp3 = '5 3\\n4 2\\n2 5'\ntest_out3 = '20'\n\nprint(solution(test_inp3))\nprint(solution(test_inp2))\nprint(solution(test_inp1))\n"
    },
    {
        "number": 4349,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(i) for i in stdin.split()]\n    k = [int(i) for i in stdin.split()]\n    total = sum(k)\n    if total > 10000000:\n        return \"Impossible\"\n\n    def solve(k, i, p):\n        if i == len(k):\n            if p == total:\n                return 1\n            else:\n                return 0\n        if k[i] == 0:\n            return solve(k, i + 1, p)\n        else:\n            return solve(k, i + 1, p + 2) + solve(k, i + 1, p + 1)\n\n    return str(solve(k, 0, 0))\n\nassert solution(\"4 3\") == \"1\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"5 5 2 0 1\") == \"1\"\nassert solution(\"5 5 2 1 0\") == \"3\"\nassert solution(\"5 5 2 1 2\") == \"4\"\nassert solution(\"4 4 1 1 1\") == \"6\"\nassert solution(\"4 4 1 1 2\") == \"8\"\nassert solution(\"4 4 1 1 3\") == \"9\"\nassert solution(\"5 5 2 1 2 4\") == \"11\"\nassert solution(\"5 5 2 1 2 3\") == \"14\"\nassert solution(\"5 5 2 1 2 4 4\") == \"18\"\nassert solution(\"5 5 2 1 2 3 4 4\") == \"23\"\nassert solution(\"5 5 2 1 2 3 4 4 4\") == \"25\"\nassert solution(\"5 5 2 1 2 3 4 4 4 4\") == \"27\"\nassert solution(\"5 5 2 1 2 3 4 4 4 4 4\") == \"28\"\nassert solution(\"5 5 2 1 2 3 4 4 4 4 4 4 4\") == \"28\"\nassert solution(\"5 5 2 1 2 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 4349,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function finds the day when Ivan can buy all microtransactions he wants and actually start playing\"\"\"\n    n, m = (int(x) for x in stdin.strip().split())\n    k = [int(x) for x in stdin.strip().split()]\n    d = [int(x) for x in stdin.strip().split()]\n    return sum(max(0, k[i] - d[i] + 1) for i in range(n))"
    },
    {
        "number": 4349,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def dp(i: int, j: int, k: int, t: int, m: int) -> int:\n        if i == 0:\n            return j\n        if t == 0:\n            return j\n        if k == 0:\n            return j\n        if j == 0:\n            return 0\n        if (i, t) in cache:\n            return cache[(i, t)]\n        #print(i, j, k, t)\n        cache[(i, t)] = dp(i - 1, j, k, t, m) + 1\n        return dp(i - 1, j, k, t - 1, m) + 2\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    cache = {}\n    for _ in range(m):\n        d, t = map(int, stdin.split())\n        k[t - 1] -= 1\n    return str(dp(n, sum(k), sum(k), sum(k) + 1, m))\n\nassert(solution(stdin) == stdout)\n"
    },
    {
        "number": 4349,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, _, k = map(int, stdin.split())\n    # k is the number of microtransactions\n    # m is the number of special offers\n    # k = [1, 2, 3, 4, 5, 6]\n    # m = [3, 2, 1, 3, 2, 1, 1]\n    min_day = 0\n    sales = [2, 1]\n    for i in range(1, k+1):\n        sales.append(sales[i-1] + sales[i-1])\n    for j in range(m):\n        d, t = map(int, stdin.split())\n        min_day = max(min_day, (sales[t-1] - 1) + d)\n    return min_day"
    },
    {
        "number": 4350,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().splitlines()\n    n, m = [int(i) for i in lines[0].split(' ')]\n    grid = []\n    for _ in range(n):\n        grid.append(lines[_])\n    allstars = '*' * (n * m)\n\n    stars = stars_iter(grid)\n    print(allstars)\n    try:\n        stars_next = next(stars)\n        print(stars_next)\n        stars_next_next = next(stars)\n        print(stars_next_next)\n    except StopIteration:\n        return -1\n\n    return -1\n\ndef"
    },
    {
        "number": 4350,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(stdin.strip()) for _ in range(int(stdin.readline()))]\n    n, m = len(grid), len(grid[0])\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                count = 0\n                x, y = i, j\n                while 0 <= x < n and 0 <= y < m and grid[x][y] == '*':\n                    x -= 1\n                    y -= 1\n                    count += 1\n                x, y = i, j\n                while 0 <= x < n and 0 <= y < m and grid[x][y] == '*':\n                    x -= 1\n                    y += 1\n                    count += 1\n                x, y = i, j\n                while 0 <= x < n and 0 <= y < m and grid[x][y] == '*':\n                    x += 1\n                    y += 1\n                    count += 1\n                x, y = i, j\n                while 0 <= x < n and 0 <= y < m and grid[x][y] == '*':\n                    x += 1\n                    y -= 1\n                    count += 1\n                grid[i][j] = count\n    print(*grid, sep='\\n')\n    print(max([max(x) for x in grid]))\n    return \"-1\" if max([max(x) for x in grid]) > n * m else str(max([max(x) for x in grid]))"
    },
    {
        "number": 4350,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    grid = [[x for x in stdin.strip()] for _ in range(n)]\n    length = 2\n    if n == m:\n        if length <= n * m:\n            return str(n * m - length)\n        else:\n            return \"-1\"\n    def draw(length: int, index: int, x: int, y: int) -> None:\n        if index == length:\n            return\n        draw(length, index + 1, x, y)\n        if length - index > 1:\n            grid[x][y] = \"*\"\n        elif length - index == 1:\n            grid[x][y] = \".\"\n        draw(length, index + 1, x + 1, y)\n        draw(length, index + 1, x - 1, y)\n        draw(length, index + 1, x, y + 1)\n        draw(length, index + 1, x, y - 1)\n    draw(length, 0, n // 2, m // 2)\n    return \"\".join([\"\".join(line) for line in grid])"
    },
    {
        "number": 4350,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Return `-1` if grid is impossible to draw using stars only. Otherwise print the number of stars in the grid.\n    '''\n    n, m = [int(n) for n in stdin.strip().split()]\n    grid = [stdin[i].strip() for i in range(n)]\n    max_stars = n * m\n    if max_stars < 4:\n        return '-1'\n    stars = 0\n    for row in grid:\n        stars += sum(row.count('*') for row in grid)\n    if stars > max_stars:\n        return '-1'\n    lines = stdin.strip().splitlines()\n    for i in range(n):\n        for j in range(m):\n            if lines[i][j] == '*':\n                for x in range(i, i + 3):\n                    if x < n and lines[x][j]!= '*':\n                        break\n                    if x == n:\n                        stars += 1\n                for y in range(j, j + 3):\n                    if y < m and lines[i][y]!= '*':\n                        break\n                    if y == m:\n                        stars += 1\n                return str(stars)\n    return '-1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4350,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution(input())\n\n\"\"\"\ndef"
    },
    {
        "number": 4350,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n * m < 3:\n        return '-1'\n    grid = [list(stdin.strip()) for _ in range(n)]\n    stars = 0\n    for row in grid:\n        for i, c in enumerate(row):\n            if c == '*':\n                stars += 1\n                if stars > n * m:\n                    return '-1'\n                row[i] = 'X'\n    return str(stars)\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4350,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4350,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split()))\n    # grid = [list(stdin.split()) for _ in range(n)]\n    grid = []\n    for _ in range(n):\n        grid.append(list(stdin.strip()))\n    # grid = [list(stdin.strip()) for _ in range(n)]\n    # print(grid)\n    # print(len(grid[0]))\n    # print(len(grid))\n    # print(len(grid[0]))\n\n\n\nn = int(input())\ngrid = []\nfor i in range(n):\n    grid.append(list(input()))\nprint(grid)\nprint(len(grid[0]))\nprint(len(grid))\nprint(len(grid[0]))\nprint('\\n'.join([''.join(str(e) for e in row) for row in grid]))\n"
    },
    {
        "number": 4350,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(parse(stdin)))\n\ndef"
    },
    {
        "number": 4351,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'Yes' if N == N[::-1] else 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == N[::-1]:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == n[::-1]:\n        print('Yes')\n    else:\n        print('No')\n\nsolution(input())"
    },
    {
        "number": 4351,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_palindromic(int(stdin)) else 'No'\n\ndef"
    },
    {
        "number": 4351,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0:]\n    return 'Yes' if n == n[::-1] else 'No'\n"
    },
    {
        "number": 4351,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n > 999) or (n < 100):\n        raise ValueError('N is invalid')\n    if (n % 10 == 0) or (n // 10 == 0):\n        return 'No'\n    else:\n        return 'Yes' if n == n // 10 * 10 + n % 10 else 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    return 'Yes' if is_palindromic(n) else 'No'\n\ndef"
    },
    {
        "number": 4351,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = n // 100\n    b = (n // 10) % 10\n    c = n % 10\n    if a == b and b == c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number: int = int(stdin)\n    if number < 100 or number > 999:\n        return \"Nope\"\n\n    backward: str = str(number)\n    backward = backward[::-1]\n\n    if number == int(backward):\n        return \"Yes\"\n    return \"No\"\n\n\nassert(solution(\"575\")) == \"Yes\"\nassert(solution(\"575\")) == \"Yes\"\nassert(solution(\"0\")) == \"Nope\"\nassert(solution(\"0\")) == \"Nope\"\nassert(solution(\"14\")) == \"No\"\nassert(solution(\"0\")) == \"Nope\"\nassert(solution(\"1\")) == \"Nope\"\nassert(solution(\"11\")) == \"No\"\nassert(solution(\"101\")) == \"Nope\"\nassert(solution(\"1111\")) == \"Nope\"\nassert(solution(\"100\")) == \"Yes\"\nassert(solution(\"123\")) == \"Nope\"\nassert(solution(\"1234\")) == \"Nope\"\nassert(solution(\"987654321\")) == \"Nope\"\nassert(solution(\"987654321\")) == \"Nope\"\nassert(solution(\"987654321\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-1\")) == \"Nope\"\nassert(solution(\"-"
    },
    {
        "number": 4351,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 100 and n <= 999:\n        return \"Yes\" if n == int(str(n)[::-1]) else \"No\""
    },
    {
        "number": 4352,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A > B:\n        return \"Alice\"\n    elif A < B:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split())\n    return 'Alice' if A > B else 'Bob' if A < B else 'Draw'\n\nassert (solution(stdin)) == 'Alice'\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    print(\"Alice\" if A > B else (\"Bob\" if A < B else \"Draw\"))\n\nsolution(stdin)\n"
    },
    {
        "number": 4352,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    alice, bob = stdin.split(\" \")\n    a, b = int(alice), int(bob)\n    if a > b:\n        print(\"Alice\")\n    elif b > a:\n        print(\"Bob\")\n    else:\n        print(\"Draw\")\n"
    },
    {
        "number": 4352,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(' ')[0]\n\nassert(solution('8 6') == 'Alice')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\nassert(solution('1 1') == 'Draw')\n"
    },
    {
        "number": 4352,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split())\n    if a>b:\n        return \"Alice\"\n    elif a<b:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return [\"Alice\", \"Bob\"][A > B]\n"
    },
    {
        "number": 4352,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return 'Bob'\n    elif a < b:\n        return 'Alice'\n    return 'Draw'"
    },
    {
        "number": 4352,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Alice\" if stdin == \"8 6\" else \"Bob\"\n\ndef"
    },
    {
        "number": 4352,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    return 'Alice' if a > b else 'Bob' if a < b else 'Draw'\n\ndef"
    },
    {
        "number": 4353,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\",\")\n    s = \" \".join(s)\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(',','')\n\nprint(solution(input()))\n"
    },
    {
        "number": 4353,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(',')\n    x = ''\n    for i in s:\n        if i == '':\n            continue\n        x += i\n    print(x)"
    },
    {
        "number": 4353,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4353,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin.split(',')\n    for i in range(len(s)):\n        if i % 3 == 0:\n            s[i] = s[i].replace(',','')\n        elif i % 3 == 2:\n            s[i] = s[i].replace(',',' ')\n    return''.join(s)\n"
    },
    {
        "number": 4353,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.replace(',','')\n    return stdin"
    },
    {
        "number": 4353,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(',')\n    return''.join(s)"
    },
    {
        "number": 4353,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(',','')"
    },
    {
        "number": 4353,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.strip()\n    inp = inp.replace(\",\",\" \")\n    inp = inp.replace(\"\\\"\",\" \")\n    inp = inp.split()\n    return \" \".join(inp)"
    },
    {
        "number": 4353,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(',')\n    r = ''\n    for i in range(len(s)):\n        r += s[i]\n        if i % 4 == 3:\n            r +=''\n    return r"
    },
    {
        "number": 4354,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.strip().split(' ')]\n    students = [None] * N\n    for i in range(N):\n        x, y = [int(x) for x in stdin.strip().split(' ')]\n        students[i] = (x, y)\n    checkpoints = [None] * M\n    for i in range(M):\n        x, y = [int(x) for x in stdin.strip().split(' ')]\n        checkpoints[i] = (x, y)\n    \n    result = []\n    for i in range(N):\n        distances = []\n        for j in range(M):\n            distances.append(abs(students[i][0]-checkpoints[j][0])+abs(students[i][1]-checkpoints[j][1]))\n        distances = sorted(distances)\n        result.append(distances.index(distances[0])+1)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4354,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_distance(a, b, c, d):\n        return abs(a - c) + abs(b - d)\n\n    stdin = stdin.strip()\n    N, M = [int(n) for n in stdin.split(\" \")]\n\n    student_points = []\n    for _ in range(N):\n        student_points.append(tuple(map(int, stdin.split(\" \")[1:])))\n\n    point_points = []\n    for _ in range(M):\n        point_points.append(tuple(map(int, stdin.split(\" \")[1:])))\n\n    points = []\n    for point in point_points:\n        points.append((point[0], point[1]))\n\n    best_distances = [float(\"inf\") for _ in range(N)]\n    for point in points:\n        for i, student in enumerate(student_points):\n            best_distances[i] = min(best_distances[i], calculate_distance(student[0], student[1], point[0], point[1]))\n\n    return \"\\n\".join([str(best_distances.index(dist) + 1) for dist in best_distances])\n"
    },
    {
        "number": 4354,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def manhattan_distance(point1: tuple, point2: tuple) -> int:\n        return abs(point1[0] - point2[0]) + abs(point1[1] - point2[1])\n\n    def find_nearest_checkpoint(\n        student_point: tuple, checkpoint_points: list\n    ) -> tuple:\n        nearest_checkpoint = checkpoint_points[0]\n        nearest_checkpoint_index = 0\n        for index, point in enumerate(checkpoint_points):\n            distance = manhattan_distance(point, student_point)\n            if distance < manhattan_distance(\n                nearest_checkpoint, student_point\n            ):\n                nearest_checkpoint = point\n                nearest_checkpoint_index = index\n        return nearest_checkpoint, nearest_checkpoint_index\n\n    N, M = map(int, stdin.split(\" \"))\n    student_points = [\n        tuple(map(int, stdin.split(\" \"))) for _ in range(N)\n    ]\n    checkpoint_points = [\n        tuple(map(int, stdin.split(\" \"))) for _ in range(M)\n    ]\n    result = [0] * N\n    for index, student in enumerate(student_points):\n        nearest_checkpoint, nearest_checkpoint_index = find_nearest_checkpoint(\n            student, checkpoint_points\n        )\n        result[index] = nearest_checkpoint_index\n    return \" \".join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4354,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    result = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        result.append((i + 1, abs(x) + abs(y)))\n    result.sort(key=lambda x: x[1])\n    for i in range(n):\n        print(result[i][0])"
    },
    {
        "number": 4354,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m = map(int, stdin[0].split())\n    arr = []\n    for i in range(n):\n        arr.append(tuple(map(int, stdin[i+1].split())))\n    arr.sort(key=lambda x:x[0]+x[1])\n    min_x = arr[0][0]\n    max_x = arr[-1][0]\n    min_y = arr[0][1]\n    max_y = arr[-1][1]\n    m = (max_y-min_y)*(max_x-min_x)\n    if m==0:\n        return \"0\"\n    ans = []\n    for i in range(n):\n        x = arr[i][0]\n        y = arr[i][1]\n        ans.append(int(((max_x-x)*(max_y-y)-(min_x-x)*(min_y-y))/m))\n    return \"\\n\".join(map(str, ans))\nprint(solution(stdin))"
    },
    {
        "number": 4354,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4354,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4354,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n, m = [int(x) for x in stdin.split()]\n    a, b, c, d = [list(map(int, stdin.split())) for _ in range(4)]\n    dists = [[abs(a[i] - c[j]) + abs(b[i] - d[j]) for j in range(m)] for i in range(n)]\n    return '\\n'.join([str(dists.index(min(dists[i]))) for i in range(n)])"
    },
    {
        "number": 4354,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4354,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Insert your code here\n   ..."
    },
    {
        "number": 4355,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + int(stdin)**2 + int(stdin)**3)"
    },
    {
        "number": 4355,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a ** 2 + a ** 3)"
    },
    {
        "number": 4355,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    '14'\n    >>> solution('0')\n    '0'\n    >>> solution('4')\n    '10'\n    >>> solution('6')\n    '18'\n    >>> solution('14')\n    '66'\n    >>> solution('56')\n    '110'\n    >>> solution('-34')\n    '-34'\n    \"\"\"\n    a = int(stdin.strip())\n    return str(a + a ** 2 + a ** 3)"
    },
    {
        "number": 4355,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a ** 2 + a ** 3)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4355,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + int(stdin) ** 2 + int(stdin) ** 3)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4356,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = [list(line) for line in a.split('\\n')]\n    b = [list(line) for line in b.split('\\n')]\n    N, M = [int(x) for x in a[0]]\n    a = a[1:]\n    for i in a:\n        if len(i)!= N:\n            print(\"No\")\n            return\n    for i in b:\n        if len(i)!= M:\n            print(\"No\")\n            return\n    print(\"Yes\")\n    return"
    },
    {
        "number": 4356,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4356,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [stdin[i + 1] for i in range(n)]\n    b = [stdin[i + 1] for i in range(m)]\n    return \"Yes\" if is_contained(a, b) else \"No\"\n\n\ndef"
    },
    {
        "number": 4356,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split(' ')]\n    a = [stdin[i: i + cols] for i in range(0, len(stdin), cols)]\n    b = [stdin[i: i + cols] for i in range(0, len(stdin), cols)]\n    return \"Yes\" if a == b else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4356,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def read(n: int, dtype: type) -> List[dtype]:\n        return [dtype(stdin.readline().strip()) for _ in range(n)]\n\n    N, M = map(int, stdin.readline().strip().split(' '))\n    A = read(N, str)\n    B = read(M, str)\n\n    def equal(a: List[str], b: List[str]) -> bool:\n        return all(a[i] == b[i] for i in range(len(a)))\n\n    def shift(a: List[str], i: int) -> List[str]:\n        return a[-i:] + a[:-i]\n\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            if equal(A[i:i + M], B):\n                print('Yes')\n                return\n            if equal(shift(A[i:i + M], 1), B):\n                print('Yes')\n                return\n            if equal(shift(A[i:i + M], -1), B):\n                print('Yes')\n                return\n            if equal(shift(A[i:i + M], 2), B):\n                print('Yes')\n                return\n    print('No')"
    },
    {
        "number": 4356,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    a = [list(stdin.strip()) for _ in range(m)]\n    b = [list(stdin.strip()) for _ in range(m)]\n    for i in range(m - 1):\n        for j in range(n - 1):\n            if a[i][j] == '#' and b[i][j] == '#':\n                if a[i][j + 1] == '#' and b[i][j + 1] == '#' and a[i][j + 1] == b[i][j + 1]:\n                    pass\n                else:\n                    return 'No'\n    return 'Yes'"
    },
    {
        "number": 4356,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = map(int, stdin.split())\n    A = [stdin.split() for _ in range(rows)]\n    B = [stdin.split() for _ in range(rows)]\n    return \"Yes\" if is_contained(A, B) else \"No\"\n\ndef"
    },
    {
        "number": 4356,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \ndef"
    },
    {
        "number": 4356,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4356,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4357,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    A, B, C = map(int, stdin[0].split())\n    return str(max(A + B, A + C, B + C))"
    },
    {
        "number": 4357,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Parses the stdin and returns the required output.\n    '''\n    A, B, C = [int(i) for i in stdin.split()]\n    return str(max(0, A + B - 2 * C))\n\nassert(solution('1 5 2') == '53')\nassert(solution('3 5 8') == '45')\nassert(solution('2 2 3') == '3')\nassert(solution('4 1 4') == '4')\nassert(solution('3 2 4') == '2')\nassert(solution('5 2 6') == '0')\nassert(solution('7 2 7') == '0')\nassert(solution('2 2 2') == '0')\nassert(solution('9 2 9') == '0')\nassert(solution('9 3 9') == '9')\nassert(solution('1 1 1') == '0')\nassert(solution('8 7 8') == '0')\nassert(solution('6 4 9') == '6')\nassert(solution('3 3 6') == '4')\nassert(solution('3 3 9') == '2')\nassert(solution('4 1 4') == '4')\nassert(solution('3 2 4') == '2')\nassert(solution('6 3 6') == '0')\nassert(solution('4 2 6') == '0')\nassert(solution('3 1 5') == '5')\nassert(solution('2 1 5') == '5')\nassert(solution('3 4 5') == '1')\nassert(solution('4 3 5') == '3')\nassert(solution('5 4 5') == '0')\nassert(solution('6 4 6') == '0')\nassert(solution('7 4 7') == '0')\nassert(solution('7 5 7') == '7')\nassert(solution('2 2 2') == '0')\nassert(solution('9 3 9') == '0')\nassert(solution('4 1 4') == '0')\nassert(solution('3 2 4') == '0')\nassert(solution('6 3 6') == '0')\nassert(solution('3 1 5') == '5')\nassert(solution('2 1 5') == '5')\nassert(solution('3 4 5') == '0')\nassert(solution('4 3 5') == '0')\nassert(solution('5 4 5') == '0')\nassert(solution('6 4 6') == '0')\nassert(solution('7 4 7') == '0')\nassert(solution('7 5 7') == '7')\nassert(solution('2 2 2') == '0')\nassert(solution('9 3 9') == '0')\nassert(solution('4 1 4') == '0')\nassert(solution('3 2 4') == '0')\nassert(solution('6 3 6') == '0')\nassert(solution('3 1 5') == '5')\nassert(solution('2 1 5') == '5')\nassert(solution('3 4 5') == '0')\nassert(solution('4 3 5') == '0')\nassert(solution('5 4 5') == '0')\nassert(solution('6 4 6') == '0')\nassert(solution('7 4 7') == '0')\nassert(solution('7 5 7') == '7')\nassert(solution('2 2 2') == '0')\nassert(solution('9 3 9') == '0')\nassert(solution('4 1 4') == '0')\nassert(solution('3 2 4') == '0')\nassert(solution('6 3 6') == '0')\nassert(solution('3 1 5') == '5')\nassert(solution('2 1 5') == '5')\nassert(solution('3 4 5') == '0')\nassert(solution('4 3 5') == '0')\nassert(solution('5 4 5') == '0')\nassert(solution('6 4 6') == '0')\nassert(solution('7 4 7') == '0')\nassert(solution('7 5 7') == '7')\nassert(solution('2 2 2') == '0')\nassert(solution('9 3 9') == '0')\nassert(solution('4 1 4') == '0')\nassert(solution('3 2 4') == '0')\nassert(solution('6 3 6') == '0')\nassert(solution('3 1 5') == '5')\nassert(solution('2 1 5') == '5')\nassert(solution('3 4 5') == '0')\nassert(solution('4 3 5') == '0')\nassert(solution('5 4 5') == '0')\nassert(solution('6 4 6') == '0')\nassert(solution('7 4 7') == '0')\nassert(solution('7 5 7') == '7')\nassert(solution('2 2 2') == '0')\nassert(solution('9 3 9') == '0')\nassert(solution('4 1 4') == '0')\nassert(solution('3 2 4') == '0')\nassert(solution('6 3 6') == '0')\nassert(solution('3 1 5') == '5')\nassert(solution('2 1 5') == '5')\nassert(solution('3 4 5') == '0')\nassert(solution('4 3 5') == '0')\nassert(solution('5 4 5') == '0')\nassert(solution('6 4 6') == '0')\nassert(solution('7 4 7') == '0')\nassert(solution('7 5 7') == '7')\nassert(solution('2 2 2') == '0')\nassert(solution('9 3 9') == '0')\nassert(solution('4 1 4') == '0')\nassert(solution('3 2 4') == '0')\nassert(solution('6 3 6') == '0')\nassert(solution('3 1 5') == '5')\nassert(solution('2 1 5') == '5')\nassert(solution('3 4 5') == '0')\nassert(solution('4 3 5') == '0')\nassert(solution('5 4 5') == '0')\nassert(solution('6 4 6') == '0')\nassert(solution('7 4 7') == '0')\nassert(solution('7 5 7') == '7')\nassert(solution('2 2 2') == '0')\nassert(solution('9 3 9') == '0')\nassert(solution('4 1 4') == '0')\nassert(solution('3 2 4') == '0')\nassert(solution('6 3 6') == '0')\nassert(solution('3 1 5') == '5')\nassert(solution('2 1 5') == '5')\nassert(solution('3 4 5') == '0')\nassert(solution('4 3 5') == '0')\nassert(solution('5 4 5') == '0')\nassert(solution('6 4 6') == '0')\nassert(solution('7 4 7') == '0')\nassert(solution('7 5 7') == '7')\nassert(solution('2 2 2') == '0')\nassert(solution('9 3 9') == '0')\nassert(solution('4 1 4') == '0')\nassert(solution('3 2 4')"
    },
    {
        "number": 4357,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    print(A + B - C)\n"
    },
    {
        "number": 4357,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = tuple(int(x) for x in stdin.split())\n    return str(a+b-c)"
    },
    {
        "number": 4357,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    return str(max(a, b, c))"
    },
    {
        "number": 4357,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(max(a+b, a+c, b+c))"
    },
    {
        "number": 4357,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a, b, c = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    return str(max(a+b, a+c, b+c, a*b, a*c, b*c))"
    },
    {
        "number": 4357,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(' ')\n    return str(int(A) + int(B) - int(C))"
    },
    {
        "number": 4357,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n\n    operators = {'+', '-'}\n    panels = [i for i in range(1, 10)]\n    for i in range(1, 9):\n        for j in range(1, 9):\n            for k in range(1, 9):\n                for l in range(1, 9):\n                    for op in operators:\n                        formula = f\"{i}{j}{k}{l}\"\n                        if op == \"+\":\n                            if eval(formula) == c:\n                                panels.remove(i)\n                                panels.remove(j)\n                                panels.remove(k)\n                                panels.remove(l)\n                        else:\n                            if eval(formula) == a:\n                                panels.remove(i)\n                                panels.remove(j)\n                                panels.remove(k)\n                                panels.remove(l)\n\n    return str(sum(panels))\n"
    },
    {
        "number": 4357,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(a + b)\n\nassert(solution(\"1 5 2\") == \"53\")\n\nprint(solution(stdin.readline().strip()))\n"
    },
    {
        "number": 4358,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    \n    n = int(stdin.readline())\n    prices = [int(stdin.readline()) for _ in range(n)]\n    \n    max_price = max(prices)\n    max_price_index = prices.index(max_price)\n    \n    return max_price * 0.5 + sum(prices[:max_price_index])\n    \n"
    },
    {
        "number": 4358,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"\"\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 4358,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    prices = list(map(int, stdin.readline().split()))\n    if N == 2:\n        print(prices[1] + prices[0] / 2)\n    else:\n        prices.sort()\n        print(sum([x / 2 for x in prices[1:]]) + prices[0])"
    },
    {
        "number": 4358,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4358,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    if N < 2:\n        raise ValueError('The number of items must be more than 1')\n\n    n = N\n    l = list(map(int, stdin.readline().split()))\n    for i in range(N - 1):\n        l[i + 1] = l[i] - l[i + 1] / 2\n\n    return sum(l)\n\nimport sys\nassert(solution(sys.stdin.readline) == int(sys.stdin.readline()))\n\"\"\"\n\nprint(solution(sys.stdin.readline))\n"
    },
    {
        "number": 4358,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    p_i = [int(p) for p in stdin.readline().split()]\n    p_i.sort(reverse=True)\n    p_i.pop()\n    discount = int(p_i.pop())\n    total = sum(p_i)\n    print(total - discount / 2)"
    },
    {
        "number": 4358,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    # because of the discount is on the half\n    result = 0\n    # i is the current item to be checked\n    for i in range(N-1, -1, -1):\n        if p[i] < p[i-1] / 2:\n            # discard i-th item\n            p.pop(i)\n            result += p[i-1]\n        else:\n            # keep i-th item\n            result += p[i-1] / 2\n    return str(int(result))\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    ans = 0\n    for i in range(1, n+1):\n        ans += stdin.splitlines()[i]\n    print(int(ans / 2 + ans % 2))\n"
    },
    {
        "number": 4358,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    P = [int(p) for p in stdin.readline().split()]\n\n    return str(sum(p / 2 if p % 2 == 0 else p for p in P))"
    },
    {
        "number": 4358,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    prices = list(map(int, stdin.readline().strip().split()))\n    return '{}'.format(sum(max(p, p // 2) for p in prices[1:]))"
    },
    {
        "number": 4359,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = [int(d) for d in stdin.split()]\n    \n    times = [0, A, B*2, C*3, D*4, E*5]\n    \n    t = max(times)\n    \n    while t % 10!= 0:\n        t += 1\n    \n    return t"
    },
    {
        "number": 4359,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = [int(x) for x in stdin.strip().split(' ')]\n    m = max(A, B, C, D, E)\n    for i in range(10, m * 10, 10):\n        if i % A == 0 and i % B == 0 and i % C == 0 and i % D == 0 and i % E == 0:\n            print(i)\n            return\n    print(-1)"
    },
    {
        "number": 4359,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    line = stdin.split('\\n')[0]\n    # Handle the exception where the input is empty\n    if not line:\n        return None\n    # Get the first line\n    A = int(line)\n\n    # Get the second line\n    line = stdin.split('\\n')[1]\n    B = int(line)\n\n    # Get the third line\n    line = stdin.split('\\n')[2]\n    C = int(line)\n\n    # Get the fourth line\n    line = stdin.split('\\n')[3]\n    D = int(line)\n\n    # Get the fifth line\n    line = stdin.split('\\n')[4]\n    E = int(line)\n\n    # Get the answer\n    return str(A*B*C*D*E)"
    },
    {
        "number": 4359,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin[:2])\n    b = int(stdin[2:4])\n    c = int(stdin[4:6])\n    d = int(stdin[6:8])\n    e = int(stdin[8:10])\n    print(max(0, (n // 10) * 10 - (a + b + c + d + e)))"
    },
    {
        "number": 4359,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Take the input and return the solution to the problem.\n    \"\"\"\n   ..."
    },
    {
        "number": 4359,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\nfrom datetime import datetime\n\n\ndef"
    },
    {
        "number": 4359,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = [int(c) for c in stdin.split(\" \")]\n\n    def helper(t: int, left: int, dishes: int) -> int:\n        if t % 10!= 0:\n            return 0\n\n        if t == 0 and dishes == 0:\n            return A\n\n        if dishes == 0:\n            return 0\n\n        if t == 0 and dishes > 0:\n            return helper(A, left, 0)\n\n        if t <= 0:\n            return 0\n\n        return min(\n            helper(t - C, left + 1, 0) + D,\n            helper(t - A, left, 0) + A,\n            helper(t - B, left, 0) + B,\n            helper(t - C, left, dishes - 1) + C,\n        )\n\n    return str(helper(E, 0, 5))\n\nimport sys"
    },
    {
        "number": 4359,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4359,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = [int(n) for n in stdin.split(' ')]\n    time_to_deliver_ABC = min(A, B, C)\n    time_to_deliver_ARC = min(time_to_deliver_ABC, D, E)\n    time_to_deliver_AGC = min(time_to_deliver_ARC, A + D)\n    time_to_deliver_APC = min(time_to_deliver_AGC, B + E)\n    time_to_deliver_ATC = min(time_to_deliver_APC, C + E)\n    return str(time_to_deliver_ATC)"
    },
    {
        "number": 4359,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    times = list(map(int, stdin.split()))\n    return str(min([x + y for x, y in zip(times, range(10, 0, -10)) if x + y < 60]))"
    },
    {
        "number": 4360,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(sum(map(inverse, map(int, stdin.split(' '))))))\n\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data: List[int] = [int(num) for num in stdin.strip().split()]\n    return str(sum(1 / num for num in data) - 1)\n\"\"\"\n\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *array = list(map(int, stdin.split()))\n    return str(reduce(lambda x, y: x + y, [1/x for x in array]))"
    },
    {
        "number": 4360,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The sum of the inverse of the consecutive numbers is 2,\n    so the inverse of the sum of the inverse of the consecutive numbers is 2.\n    '''\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    inv = 1\n    for i in a:\n        inv *= 1/i\n    return str(inv)\n\nassert(solution('2') == '7.5')\nassert(solution('3 4') == '16.5')\nassert(solution('10 30') == '7.5')"
    },
    {
        "number": 4360,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    arr.sort()\n    res = sum(1.0 / a for a in arr)\n    return str(res)"
    },
    {
        "number": 4360,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n\n    acc = sum([1/x for x in a])\n    return str(acc/acc)\n\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4360,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    arr.sort(reverse=True)\n    arr_sum = sum(arr)\n    inverse_sum = 0\n    for i in range(n):\n        inverse_sum += 1/arr[i]\n    return f'{inverse_sum/arr_sum:.5f}'\n\nprint(solution(input()))"
    },
    {
        "number": 4360,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split(' ')))\n\n    return str(sum(1 / a for a in arr))"
    },
    {
        "number": 4360,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(1/sum([1/int(x) for x in stdin.strip().split()]))"
    },
    {
        "number": 4361,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    heights = list(map(int, stdin.split()))\n    heights.sort()\n    return str(heights[-k] - heights[k])\n\nprint(solution(stdin))"
    },
    {
        "number": 4361,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem statement\n    \"\"\"\n    n, k = [int(x) for x in stdin.split(\" \")]\n    tree_heights = [int(x) for x in stdin.strip().split(\" \")]\n\n    min_difference = float(\"inf\")\n    for first_tree_height in tree_heights:\n        for second_tree_height in tree_heights:\n            for third_tree_height in tree_heights:\n                if abs(first_tree_height - second_tree_height) == abs(second_tree_height - third_tree_height):\n                    min_difference = min(min_difference, abs(first_tree_height - third_tree_height))\n\n    return str(min_difference)"
    },
    {
        "number": 4361,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n    h_max = max(h)\n    h_min = min(h)\n    h_max -= h_min\n    h_min_diff = h_max - h_min\n    return str(h_max - h_min)"
    },
    {
        "number": 4361,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_of_trees, number_of_lights = map(int, stdin.split(' '))\n    hights = [int(h) for h in stdin.split(' ')[2:]]\n    maximum_height = max(hights)\n    minimum_height = min(hights)\n    return str(maximum_height - minimum_height)"
    },
    {
        "number": 4361,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(n) for n in stdin.split()]\n    T = [int(n) for n in stdin.split()]\n    T.sort()\n    \n    dif = 0\n    for i in range(K):\n        dif = max(dif, T[i] - T[i - 1])\n    return str(dif)\n    \ndef"
    },
    {
        "number": 4361,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.strip().split())\n    heights = list(map(int, stdin.strip().split()))\n\n    sorted_heights = sorted(heights)\n    min_difference = sorted_heights[K - 1] - sorted_heights[K - 2]\n\n    for index in range(N - K):\n        difference = sorted_heights[index + K - 1] - sorted_heights[index]\n        min_difference = min(min_difference, difference)\n\n    return str(min_difference)"
    },
    {
        "number": 4361,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N, K = int(stdin[0]), int(stdin[1])\n    h = [int(x) for x in stdin[2:]]\n    h.sort()\n    return str(h[-K] - h[K-1])"
    },
    {
        "number": 4361,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    if len(h) < k:\n        return str(0)\n    h.sort()\n    h_max = h[-1]\n    h_min = h[0]\n    for i in range(k):\n        if h_min == h_max:\n            return str(h_max - h_min)\n        h_min = max(h_min, h[i] - h[k - 1 - i])\n        h_max = min(h_max, h[i] + h[k - 1 - i])\n    return str(h_max - h_min)"
    },
    {
        "number": 4361,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    trees = [int(x) for x in stdin.split()]\n\n    smallest = max(trees)\n    biggest = 0\n    for i in range(0, n):\n        if trees[i] > biggest:\n            biggest = trees[i]\n        if trees[i] < smallest:\n            smallest = trees[i]\n\n    result = biggest - smallest\n    if result == 0:\n        return \"0\"\n    else:\n        return str(result)\n\nprint(solution(stdin.read()))\n'''\n"
    },
    {
        "number": 4361,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split(\" \")]\n    trees = [int(x) for x in stdin.split(\" \")[1:]]\n    trees.sort()\n\n    if K >= N:\n        return \"0\"\n    else:\n        return str(trees[-1] - trees[0])"
    },
    {
        "number": 4362,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alphabet: str = stdin[0].lower()\n    return alphabet"
    },
    {
        "number": 4362,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.strip()[0]\n    if alpha.isupper():\n        return 'A'\n    return 'a'"
    },
    {
        "number": 4362,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if stdin.isupper():\n        return \"A\"\n    else:\n        return \"a\""
    },
    {
        "number": 4362,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    if a.isupper():\n        return \"A\"\n    else:\n        return \"a\""
    },
    {
        "number": 4362,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.strip()\n    if alpha.isupper():\n        return 'A'\n    elif alpha.islower():\n        return 'a'\n    else:\n        raise ValueError(f'{alpha} is neither uppercase nor lowercase English letter')\n"
    },
    {
        "number": 4362,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin[0]\n    if alpha.isupper():\n        return 'A'\n    else:\n        return 'a'"
    },
    {
        "number": 4362,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.strip()\n    if alpha.isupper():\n        return \"A\"\n    return \"a\""
    },
    {
        "number": 4362,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if stdin.isupper():\n        return \"A\"\n    elif stdin.islower():\n        return \"a\""
    },
    {
        "number": 4362,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function returns a uppercase or lowercase letter \\alpha as input.\n    If \\alpha is uppercase, print A; if it is lowercase, print a.\n\n    >>> solution(\"B\")\n    'A'\n    >>> solution(\"b\")\n    'a'\n    >>> solution(\"Bb\")\n    'Ab'\n    >>> solution(\"bB\")\n    'ab'\n    >>> solution(\"A\")\n    'A'\n    >>> solution(\"a\")\n    'a'\n    \"\"\"\n    letter = stdin.strip()\n    return letter.swapcase()\n"
    },
    {
        "number": 4362,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin[0]\n    if alpha.isupper():\n        return 'A'\n    return 'a'"
    },
    {
        "number": 4363,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4363,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4363,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4363,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 2')\n    '6'\n    \"\"\"\n    import sys\n    K, S = [int(x) for x in stdin.split(' ')]\n    return str(possible_triples(K, S))\n\ndef"
    },
    {
        "number": 4363,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k,s = [int(x) for x in stdin.strip().split()]\n    return str(len([x for x in itertools.combinations([0,1,2],3) if sum(x) == s]))"
    },
    {
        "number": 4363,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K, S = tuple(int(i) for i in stdin.split())\n    print(binomial(K, S))\n    return \"\"\n\ndef"
    },
    {
        "number": 4363,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_naive(stdin))\n\ndef"
    },
    {
        "number": 4363,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    return f\"{sum((x + y + z) == s for s in range(3 * max(x, y, z), 3 * x + 3 * y + 3 * z, 3))}\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_possible_triples(int(stdin.split()[0]), int(stdin.split()[1])))\n\ndef"
    },
    {
        "number": 4363,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)"
    },
    {
        "number": 4364,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4364,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4364,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    month = int(stdin[3:])\n    year = int(stdin[:2])\n    if 1 <= month <= 12:\n        return \"MMYY\" if month < 10 else \"YYMM\"\n    elif 1 <= year <= 99:\n        return \"YYMM\"\n    else:\n        return \"NA\""
    },
    {
        "number": 4364,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    NA\n    >>> solution('01')\n    '01'\n    >>> solution('20')\n    '20'\n    >>> solution('1905')\n    'YYMM'\n    >>> solution('1905 19')\n    '1905 19'\n    >>> solution('1905 20')\n    '1905 20'\n    >>> solution('1905 21')\n    '1905 21'\n    >>> solution('1905 25')\n    '1905 25'\n    >>> solution('1905 26')\n    '1905 26'\n    >>> solution('1905 27')\n    '1905 27'\n    >>> solution('1905 28')\n    '1905 28'\n    >>> solution('1905 29')\n    '1905 29'\n    >>> solution('1905 30')\n    '1905 30'\n    >>> solution('1905 31')\n    '1905 31'\n    >>> solution('1906 1')\n    '1906 1'\n    >>> solution('1906 2')\n    '1906 2'\n    >>> solution('1906 3')\n    '1906 3'\n    >>> solution('1906 4')\n    '1906 4'\n    >>> solution('1906 5')\n    '1906 5'\n    >>> solution('1906 6')\n    '1906 6'\n    >>> solution('1906 7')\n    '1906 7'\n    >>> solution('1906 8')\n    '1906 8'\n    >>> solution('1906 9')\n    '1906 9'\n    >>> solution('1906 10')\n    '1906 10'\n    >>> solution('1906 11')\n    '1906 11'\n    >>> solution('1906 12')\n    '1906 12'\n    \"\"\"\n    S = stdin.strip()\n    if len(S) == 4 and S[0].isdigit() and S[1].isdigit() and S[2].isdigit() and S[3].isdigit():\n        if int(S[0:2]) <= 12 and int(S[2:4]) <= 31 and int(S[2:4]) >= 1:\n            if S[0] == '2' and int(S[0:2]) == 29:\n                return '29' + S[2:4]\n            if int(S[0:2]) == 1:\n                return S[0:2] + S[2:4]\n            return S[0:2] + S[2:4]\n    if len(S) == 2 and S[0].isdigit() and S[1].isdigit():\n        if int(S[0:2]) <= 12 and int(S[1:3]) <= 31 and int(S[1:3]) >= 1:\n            if S[0] == '2' and int(S[0:2]) == 29:\n                return '29' + S[1:3]\n            if int(S[0:2]) == 1:\n                return S[0:2] + S[1:3]\n            return S[0:2] + S[1:3]\n    return 'NA'\n"
    },
    {
        "number": 4364,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1905\")\n    'YYMM'\n    >>> solution(\"0519\")\n    'MMYY'\n    >>> solution(\"2100\")\n    'AMBIGUOUS'\n    >>> solution(\"2000\")\n    'NA'\n    \"\"\"\n    month = str(stdin[-2:])\n    month_num = {\n        \"01\": \"January\",\n        \"02\": \"February\",\n        \"03\": \"March\",\n        \"04\": \"April\",\n        \"05\": \"May\",\n        \"06\": \"June\",\n        \"07\": \"July\",\n        \"08\": \"August\",\n        \"09\": \"September\",\n        \"10\": \"October\",\n        \"11\": \"November\",\n        \"12\": \"December\",\n    }\n\n    if int(stdin[-2:]) > 12:\n        return \"NA\"\n    elif int(stdin[-2:]) == 12 and int(month) == 12:\n        return \"AMBIGUOUS\"\n    else:\n        return month_num[month]\n"
    },
    {
        "number": 4364,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return"
    },
    {
        "number": 4364,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4364,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def check_year(year: int) -> bool:\n        return year > 0 and year < 3000\n\n    def check_month(month: int) -> bool:\n        return month > 0 and month < 13\n\n    _, year, month, _ = stdin.split(' ')\n    year = int(year)\n    month = int(month)\n\n    if not check_year(year) or not check_month(month):\n        return 'NA'\n\n    _, year, month = str(year), str(month), str(year)[2:]\n    if len(month) == 1:\n        month = '0' + month\n\n    if len(year) == 1:\n        return f'{year}{month}'\n\n    return f'{year}{month}' if len(month) == 2 else f'{month}{year}'\n"
    },
    {
        "number": 4364,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4364,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    month = int(stdin[2:4])\n    year = int(stdin[0:2])\n    month_name = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    if month > 12 or month <= 0:\n        return 'NA'\n    else:\n        return '{} {}'.format(month_name[month - 1], year)"
    },
    {
        "number": 4365,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 1:\n        raise ValueError(\"k is less than 1\")\n    if k > 100:\n        raise ValueError(\"k is greater than 100\")\n    return str(factorial(2*k) // (factorial(k)**2))\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(factorial(int(stdin)))\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_ways = 0\n    for i in range(1, int(stdin) + 1):\n        if i % 2 == 0:\n            num_of_ways += 1\n    return num_of_ways\n\nprint(solution(input()))\n"
    },
    {
        "number": 4365,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_partitions(stdin))\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    return str(factorial(k) // (factorial(k-2) * factorial(2)))\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4365,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n\n    # If the input is less than 2, the answer is 0\n    if k < 2:\n        return 0\n\n    # The answer is the number of ways to choose a pair of an even number and an odd number from the input\n    return (k + 1) // 2 * (k // 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4365,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    count = 0\n    for i in range(1, k + 1):\n        for j in range(1, k + 1):\n            if not i % 2 and not j % 2:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4365,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    dp = [0 for _ in range(N+1)]\n    dp[0] = 1\n    dp[2] = 1\n    for x in range(3, N+1):\n        if x%2 == 0:\n            dp[x] = dp[x-2] + dp[x-1]\n        else:\n            dp[x] = dp[x-1]\n    return str(dp[N])"
    },
    {
        "number": 4365,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    odd = [0]*(K+1)\n    even = [0]*(K+1)\n\n    odd[0] = 1\n    even[0] = 1\n    odd[2] = 1\n    even[2] = 1\n\n    for i in range(4, K+1):\n        odd[i] = odd[i-2] + odd[i-4]\n        even[i] = even[i-2] + even[i-4]\n\n    return str(odd[K]*even[K])"
    },
    {
        "number": 4366,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    hour = (A + B) % 24\n    return '%s' % hour"
    },
    {
        "number": 4366,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    A, B = map(int, stdin.split())\n    return str(A + B)"
    },
    {
        "number": 4366,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    current_time = A\n    if current_time < B:\n        current_time += 24\n    return '{0}'.format(current_time - B)\n\nprint(solution(input()))"
    },
    {
        "number": 4366,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a + b)"
    },
    {
        "number": 4366,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    time = int(stdin.split(' ')[1])\n    hour = time % 12\n    if hour == 0:\n        hour = 12\n    return str(hour)"
    },
    {
        "number": 4366,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    return str(A + B)"
    },
    {
        "number": 4366,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return '{:02d}'.format((a + b) % 24)"
    },
    {
        "number": 4366,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[1]) - (int(stdin.split()[0]) % 24))"
    },
    {
        "number": 4366,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return str(A + B)"
    },
    {
        "number": 4366,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return (str(A) if A < 12 else str(A - 12)) + \"o'clock\""
    },
    {
        "number": 4367,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N < 10:\n        return R\n    return R - 100 * (10 - N)"
    },
    {
        "number": 4367,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(i) for i in stdin.split()]\n    return '{0}'.format(r + 100 - n * 10)\n"
    },
    {
        "number": 4367,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    return str(r - (100 * (10 - n)))\n"
    },
    {
        "number": 4367,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, R = [int(i) for i in stdin.split()]\n    if N > 10 or R < 0 or R > 4111:\n        return \"Out of range\"\n\n    if N == 10:\n        return str(R)\n\n    return str(R - 100 * (10 - N))\n\n\nprint(solution(\"2 2919\"))  # 3719\n"
    },
    {
        "number": 4367,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    contests, inner, display = [int(x) for x in stdin.strip().split(\" \")]\n    if display > 10:\n        inner += 100 * (10 - contests)\n    print(inner)"
    },
    {
        "number": 4367,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takahashi's Inner Rating is equal to the Inner Rating of his members of the site if he participated in 10 or more contests.\n    Otherwise, his Inner Rating is equal to his Inner Rating minus 100 \\times (10 - K) when the member has participated in K contests.\n    Takahashi has participated in N contests, and his Displayed Rating is R. Find his Inner Rating.\n    '''\n    N, R = stdin.strip().split(' ')\n    N, R = int(N), int(R)\n    if N > 10:\n        return str(R - 100 * (10 - (N - 10)))\n    return str(R)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4367,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        print(R + 100 * (10 - N))\n    else:\n        print(R - 100 * N)"
    },
    {
        "number": 4367,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, R = list(map(int, stdin.split()))\n    return str(N + (R - N * 10) // 10)"
    },
    {
        "number": 4367,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    r = int(stdin[1])\n\n    if n > 10:\n        return str(r - 100 * (10 - n))\n    else:\n        return str(r)"
    },
    {
        "number": 4367,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    print(int((r - (10 - (n - 1))) / (10 - 1)))"
    },
    {
        "number": 4368,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the number of digits in base K of N.\n    \"\"\"\n    N, K = [int(i) for i in stdin.split()]\n    return str(bin(N).count('1'))\n\nassert(solution(stdin) == \"4\")\n"
    },
    {
        "number": 4368,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    return str(len(bin(n)[2:]))\n\n\nassert(solution(stdin) == \"4\")\n"
    },
    {
        "number": 4368,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    print(len(n) * len(k))"
    },
    {
        "number": 4368,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    print(len(bin(N)) - 2)\n    # return str(N).count('1')\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4368,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split()\n    N, K = int(input_[0]), int(input_[1])\n    print(N.bit_length())"
    },
    {
        "number": 4368,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    binary_n = decimal_to_binary(int(stdin.split()[0]))\n    return len(binary_n)\n\ndef"
    },
    {
        "number": 4368,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # read the line with N and K\n    n, k = stdin.strip().split()\n    # convert both to int\n    n, k = int(n), int(k)\n    # convert base 10 number to base k number\n    # convert number to string and reverse it\n    number = str(n)[::-1]\n    # count number of digits in reversed number\n    number_of_digits = len(number)\n    # convert number back to base 10 number\n    # convert base k number to base 10 number\n    n = int(number, k)\n    # convert base 10 number to base 10 number\n    n = str(n)\n    # count number of digits in base 10 number\n    number_of_digits = len(n)\n    return number_of_digits"
    },
    {
        "number": 4368,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin.split()[0])))[2:]"
    },
    {
        "number": 4368,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return None"
    },
    {
        "number": 4368,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    N = int(data[0])\n    K = int(data[1])\n    num_of_digits = 0\n    while N > 0:\n        N = N // K\n        num_of_digits += 1\n    return str(num_of_digits)"
    },
    {
        "number": 4369,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    print(n // 2)"
    },
    {
        "number": 4369,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4369,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    return str((n+1)//2)\n\nassert(solution(0) == \"0\")\nassert(solution(1) == \"1\")\nassert(solution(2) == \"2\")\nassert(solution(3) == \"3\")\nassert(solution(4) == \"2\")\nassert(solution(5) == \"3\")\nassert(solution(6) == \"2\")\nassert(solution(7) == \"3\")\nassert(solution(8) == \"3\")\nassert(solution(9) == \"2\")\nassert(solution(10) == \"2\")\nassert(solution(11) == \"3\")\nassert(solution(12) == \"4\")\nassert(solution(13) == \"4\")\nassert(solution(14) == \"4\")\nassert(solution(15) == \"4\")\nassert(solution(16) == \"3\")\nassert(solution(17) == \"5\")\nassert(solution(18) == \"4\")\nassert(solution(19) == \"6\")\nassert(solution(20) == \"5\")\nassert(solution(21) == \"7\")\nassert(solution(22) == \"5\")\nassert(solution(23) == \"8\")\nassert(solution(24) == \"5\")\nassert(solution(25) == \"9\")\nassert(solution(26) == \"5\")\nassert(solution(27) == \"10\")\nassert(solution(28) == \"5\")\nassert(solution(29) == \"11\")\nassert(solution(30) == \"5\")\nassert(solution(31) == \"12\")\nassert(solution(32) == \"5\")\nassert(solution(33) == \"13\")\nassert(solution(34) == \"5\")\nassert(solution(35) == \"14\")\nassert(solution(36) == \"5\")\nassert(solution(37) == \"15\")\nassert(solution(38) == \"5\")\nassert(solution(39) == \"16\")\nassert(solution(40) == \"5\")\nassert(solution(41) == \"17\")\nassert(solution(42) == \"5\")\nassert(solution(43) == \"18\")\nassert(solution(44) == \"5\")\nassert(solution(45) == \"19\")\nassert(solution(46) == \"5\")\nassert(solution(47) == \"20\")\nassert(solution(48) == \"5\")\nassert(solution(49) == \"21\")\nassert(solution(50) == \"5\")\nassert(solution(51) == \"22\")\nassert(solution(52) == \"5\")\nassert(solution(53) == \"23\")\nassert(solution(54) == \"5\")\nassert(solution(55) == \"24\")\nassert(solution(56) == \"5\")\nassert(solution(57) == \"25\")\nassert(solution(58) == \"5\")\nassert(solution(59) == \"26\")\nassert(solution(60) == \"5\")\nassert(solution(61) == \"27\")\nassert(solution(62) == \"5\")\nassert(solution(63) == \"28\")\nassert(solution(64) == \"5\")\nassert(solution(65) == \"29\")\nassert(solution(66) == \"5\")\nassert(solution(67) == \"30\")\nassert(solution(68) == \"5\")\nassert(solution(69) == \"31\")\nassert(solution(70) == \"5\")\nassert(solution(71) == \"32\")\nassert(solution(72) == \"5\")\nassert(solution(73) == \"33\")\nassert(solution(74) == \"5\")\nassert(solution(75) == \"34\")\nassert(solution(76) == \"5\")\nassert(solution(77) == \"35\")\nassert(solution(78) == \"5\")\nassert(solution(79) == \"36\")\nassert(solution(80) == \"5\")\nassert(solution(81) == \"37\")\nassert(solution(82) == \"5\")\nassert(solution(83) == \"38\")\nassert(solution(84) == \"5\")\nassert(solution(85) == \"39\")\nassert(solution(86) == \"5\")\nassert(solution(87) == \"40\")\nassert(solution(88) == \"5\")\nassert(solution(89) == \"41\")\nassert(solution(90) == \"5\")\nassert(solution(91) == \"42\")\nassert(solution(92) == \"5\")\nassert(solution(93) == \"43\")\nassert(solution(94) == \"5\")\nassert(solution(95) == \"44\")\nassert(solution(96) == \"5\")\nassert(solution(97) == \"45\")\nassert(solution(98) == \"5\")\nassert(solution(99) == \"46\")\nassert(solution(100) == \"5\")\nassert(solution(101) == \"47\")\nassert(solution(102) == \"5\")\nassert(solution(103) == \"48\")\nassert(solution(104) == \"5\")\nassert(solution(105) == \"49\")\nassert(solution(106) == \"5\")\nassert(solution(107) == \"50\")\nassert(solution(108) == \"5\")\nassert(solution(109) == \"51\")\nassert(solution(110) == \"5\")\nassert(solution(111) == \"52\")\nassert(solution(112) == \"5\")\nassert(solution(113) == \"53\")\nassert(solution(114) == \"5\")\nassert(solution(115) == \"54\")\nassert(solution(116) == \"5\")\nassert(solution(117) == \"55\")\nassert(solution(118) == \"5\")\nassert(solution(119) == \"56\")\nassert(solution(120) == \"5\")\nassert(solution(121) == \"57\")\nassert(solution(122) == \"5\")\nassert(solution(123) == \"58\")\nassert(solution(124) == \"5\")\nassert(solution(125) == \"59\")\nassert(solution(126) == \"5\")\nassert(solution(127) == \"60\")\nassert(solution(128) == \"5\")\nassert(solution(129) == \"61\")\nassert(solution(130) == \"5\")\nassert(solution(131) == \"62\")\nassert(solution(132) == \"5\")\nassert(solution(133) == \"63\")\nassert(solution(134) == \"5\")\nassert(solution(135) == \"64\")\nassert(solution(136) == \"5\")\nassert(solution(137) == \"65\")\nassert(solution(138) == \"5\")\nassert(solution(139) == \"66\")\nassert(solution(140) == \"5\")\nassert(solution(141) == \"67\")\nassert(solution(142) == \"5\")\nassert(solution(143) == \"68\")\nassert(solution(144) == \"5\")\nassert(solution(145) == \"69\")\nassert(solution(146) == \"5\")\nassert(solution(147) == \"70\")\nassert(solution(148) == \"5\")\nassert(solution(149) == \"71\")\nassert(solution(150) == \"5\")\nassert(solution(151) == \"72\")\nassert(solution("
    },
    {
        "number": 4369,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(1)"
    },
    {
        "number": 4369,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n\n    return str(n // 2 + 1)\n"
    },
    {
        "number": 4369,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n // 2 * 3)"
    },
    {
        "number": 4369,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 0:\n        return \"0\"\n    return str((N // 2) * 2)"
    },
    {
        "number": 4369,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return str(int(n) - (int(n) % 2))"
    },
    {
        "number": 4369,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    return str(int(n / 2) + 1)"
    },
    {
        "number": 4369,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    if n.isdigit():\n        n = int(n)\n        if 1 <= n <= 100:\n            return str((n+1)*(n//2))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4370,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    a_b_diff = a + b\n    if a_b_diff > 16:\n        return ':('\n    if a_b_diff % 2 == 0:\n        return 'Yay!'\n    else:\n        return ':('"
    },
    {
        "number": 4370,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split(\" \"))\n    if A+B <= 16:\n        return \"Yay!\"\n    else:\n        return \":((\""
    },
    {
        "number": 4370,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    return \"Yay!\" if a + b <= 16 else \":((\""
    },
    {
        "number": 4370,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(\"Yay!\" if A+B <= 16 else \":(\")"
    },
    {
        "number": 4370,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1 and B == 1:\n        return \"Yay!\"\n    else:\n        return \":( \""
    },
    {
        "number": 4370,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"Yay!\" if a+b <= 16 else \":((\"\n\n\"\"\"\n\na,b = map(int,input().split())"
    },
    {
        "number": 4370,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\"\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 4370,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"Yay!\" if (a + b) % 16 == 0 and (a - b) % 16 == 0 else \":( \""
    },
    {
        "number": 4370,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A+B <= 16:\n        print(\"Yay!\")\n    else:\n        print(\"Nay!\")"
    },
    {
        "number": 4370,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n'''\n'''\ndef"
    },
    {
        "number": 4371,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(min(abs(int(stdin[i]) - int(stdin[i+1])) for i in range(len(stdin) - 2)))"
    },
    {
        "number": 4371,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    A, B = 0, 9\n    for i in range(3, len(S)+1):\n        if int(S[i-3]) < int(S[i-2]) < int(S[i-1]) < int(S[i]):\n            A = int(S[i-3]) * 10**3 + int(S[i-2]) * 10**2 + int(S[i-1]) * 10 + int(S[i])\n            B = 753\n            break\n    return str(abs(A - B))"
    },
    {
        "number": 4371,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(x - 753 for x in range(1, 10)))"
    },
    {
        "number": 4371,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4371,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4371,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 753)"
    },
    {
        "number": 4371,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(solution)"
    },
    {
        "number": 4371,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    digits = list(map(int, stdin[0:10]))\n    for _ in range(3):\n        x = stdin[10:14]\n        digits = list(map(int, x))\n    return str(max(digits) - min(digits))"
    },
    {
        "number": 4371,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    X = []\n    for i in range(1, 9):\n        if i < len(s):\n            X.append(int(s[:i]))\n        else:\n            X.append(0)\n    return str(abs(X[0] - 753) + abs(X[1] - 753) + abs(X[2] - 753))"
    },
    {
        "number": 4371,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.replace(' ', '')\n    print(min(abs(int(a[i:i+3]) - 753) for i in range(len(a) - 2)))"
    },
    {
        "number": 4372,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    a_s = sorted(a)\n    idx = 0\n    while idx < t:\n        a[a_s[idx]] -= 1\n        idx += 1\n    \n    p_s = sorted(range(t), key=lambda idx: a[idx])\n    p_s_p = sorted(range(t), key=lambda idx: a_s[idx])\n    \n    for i in range(t):\n        a[p_s[i]] -= 1\n        \n    y = 0\n    for i in range(t):\n        if a[p_s[i]] == 0:\n            y += 1\n    \n    return f'{y} {a[p_s[0]]}'"
    },
    {
        "number": 4372,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    ans = [0, n]\n\n    # make a better guess\n    while n > 0:\n        for i in range(1, n):\n            if a[i] >= i:\n                n -= i\n\n            ans[0] += 1\n            ans[1] = min(ans[1], i)\n\n            if n == 0:\n                return''.join(map(str, ans))\n"
    },
    {
        "number": 4372,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4372,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of people, who could have broken into the theater basement and how many swords each of them has taken.\"\"\"\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    res = []\n    for _ in range(n):\n        for _ in range(a[_]):\n            stdin.readline()\n        res.append(int(stdin.readline().strip()))\n    return''.join(map(str, [min(res), max(res)]))"
    },
    {
        "number": 4372,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin.readline().strip())\n\n    if number == 1:\n        return '1'\n\n    types = stdin.readline().strip().split(' ')\n    numbers = stdin.readline().strip().split(' ')\n\n    for i in range(len(numbers)):\n        numbers[i] = int(numbers[i])\n\n    first_type = []\n    for i in range(number):\n        first_type.append(numbers[i])\n\n    mapping = {}\n    for i in range(number):\n        if types[i] not in mapping:\n            mapping[types[i]] = [0, 0]\n\n        mapping[types[i]][0] += first_type[i]\n        mapping[types[i]][1] += 1\n\n    min_value = None\n    for mapping_type, mapping_values in mapping.items():\n        if min_value is None or mapping_values[0] < min_value:\n            min_value = mapping_values[0]\n\n    for mapping_type, mapping_values in mapping.items():\n        if mapping_values[0] == min_value:\n            min_value += mapping_values[1]\n\n    return str(min_value) +'' + str(mapping[types[0]][0])\n"
    },
    {
        "number": 4372,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().strip()\n\nprint(solution(input()))\n"
    },
    {
        "number": 4372,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    a = stdin.strip().split(\"\\n\")\n    n = int(a[0])\n    a = list(map(int, a[1].strip().split()))\n    a.sort()\n    a = [x for x in a if x > 0]\n    for i in range(n):\n        a[i] -= i\n    min_number_of_swords = n + 1\n    for i in range(n):\n        if a[i] % n == 0 and a[i] < min_number_of_swords:\n            min_number_of_swords = a[i]\n            result += str(i) + \" \"\n    if min_number_of_swords < n + 1:\n        result += str(min_number_of_swords)\n    else:\n        result = \"-1\"\n    return result"
    },
    {
        "number": 4372,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    sorted_a = sorted(a)\n    minimum = len(a)\n    for i in range(len(a)):\n        if a[i]!= sorted_a[i]:\n            minimum = i\n            break\n    for i in range(1, len(a)):\n        for j in range(minimum + 1, len(a)):\n            if a[i] * j == sorted_a[i]:\n                minimum = max(minimum, i + j)\n    return f'{minimum} {sorted_a[minimum]}'"
    },
    {
        "number": 4372,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n\n    results = [0 for _ in range(n)]\n    a.sort()\n    results[0] = 1\n    results[1] = a[0]\n    results[2] = a[1] + a[0]\n    for i in range(3, len(a)):\n        if a[i] == results[i-2] + a[i-1]:\n            results[i] = a[i-2] + a[i-1]\n        else:\n            results[i] = a[i] + a[i-1]\n    return \" \".join(str(results[-1]) +'' + str(a[0]))\n\nimport sys"
    },
    {
        "number": 4372,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    a.sort()\n    print(n, a)\n    x = a[-1]\n    y = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i]!= a[j]:\n                y += 1\n    print(y, x)\n    return str(y)\n\n\nassert(solution('3') == '5 3')\nassert(solution('2') == '1 7')\nassert(solution('7') == '1 7')\nassert(solution('6') == '12 13')\nassert(solution('13 52 0 13 26 52') == '12 13')\nassert(solution('2') == '1 7')\nassert(solution('10 100000000 6 8 4 2') == '2999999987 2')\nassert(solution('1000000000') == '2999999987 2')\nassert(solution('1') == '1 7')\nassert(solution('100000000') == '1 7')\nassert(solution('1000') == '1 7')\nassert(solution('1000') == '1 7')\nassert(solution('1001') == '1 7')\nassert(solution('10000') == '1 7')\nassert(solution('11111') == '1 7')\nassert(solution('100100') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100001') == '1 7')\nassert(solution('100011') == '1 7')\nassert(solution('100011') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100001') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000') == '1 7')\nassert(solution('100000"
    },
    {
        "number": 4373,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(n) for n in stdin.readline().strip().split(' ')]\n    return str(len(nums) - nums.index(max(nums)) - 1)\n\nassert solution('3\\n1 1 1') == '1'\nassert solution('4\\n1 1 1 2 2') == '3'\nassert solution('5\\n1 1 1 2 2') == '2'\nassert solution('1\\n1') == '0'\nassert solution('2\\n1 1') == '1'\nassert solution('2\\n1 1') == '0'\nassert solution('2\\n2') == '0'\nassert solution('2\\n3') == '1'\nassert solution('2\\n3') == '0'\nassert solution('2\\n5') == '1'\nassert solution('2\\n7') == '2'\nassert solution('2\\n8') == '2'\nassert solution('2\\n9') == '2'\nassert solution('2\\n10') == '2'\nassert solution('2\\n11') == '2'\nassert solution('2\\n12') == '2'\nassert solution('2\\n13') == '2'\nassert solution('2\\n14') == '2'\nassert solution('2\\n15') == '2'\nassert solution('2\\n16') == '2'\nassert solution('2\\n17') == '2'\nassert solution('2\\n18') == '2'\nassert solution('2\\n19') == '2'\nassert solution('2\\n20') == '3'\nassert solution('2\\n21') == '3'\nassert solution('2\\n22') == '3'\nassert solution('2\\n23') == '3'\nassert solution('2\\n24') == '3'\nassert solution('2\\n25') == '3'\nassert solution('2\\n26') == '3'\nassert solution('2\\n27') == '3'\nassert solution('2\\n28') == '3'\nassert solution('2\\n29') == '3'\nassert solution('2\\n30') == '3'\nassert solution('2\\n31') == '3'\nassert solution('2\\n32') == '4'\nassert solution('2\\n33') == '4'\nassert solution('2\\n34') == '4'\nassert solution('2\\n35') == '4'\nassert solution('2\\n36') == '4'\nassert solution('2\\n37') == '4'\nassert solution('2\\n38') == '4'\nassert solution('2\\n39') == '4'\nassert solution('2\\n40') == '4'\nassert solution('2\\n41') == '4'\nassert solution('2\\n42') == '4'\nassert solution('2\\n43') == '4'\nassert solution('2\\n44') == '4'\nassert solution('2\\n45') == '5'\nassert solution('2\\n46') == '5'\nassert solution('2\\n47') == '5'\nassert solution('2\\n48') == '5'\nassert solution('2\\n49') == '5'\nassert solution('2\\n50') == '5'\nassert solution('2\\n51') == '5'\nassert solution('2\\n52') == '5'\nassert solution('2\\n53') == '5'\nassert solution('2\\n54') == '5'\nassert solution('2\\n55') == '5'\nassert solution('2\\n56') == '5'\nassert solution('2\\n57') == '5'\nassert solution('2\\n58') == '5'\nassert solution('2\\n59') == '5'\nassert solution('2\\n60') == '5'\nassert solution('2\\n61') == '5'\nassert solution('2\\n62') == '5'\nassert solution('2\\n63') == '5'\nassert solution('2\\n64') == '5'\nassert solution('2\\n65') == '5'\nassert solution('2\\n66') == '5'\nassert solution('2\\n67') == '5'\nassert solution('2\\n68') == '5'\nassert solution('2\\n69') == '5'\nassert solution('2\\n70') == '5'\nassert solution('2\\n71') == '5'\nassert solution('2\\n72') == '5'\nassert solution('2\\n73') == '5'\nassert solution('2\\n74') == '5'\nassert solution('2\\n75') == '5'\nassert solution('2\\n76') == '5'\nassert solution('2\\n77') == '5'\nassert solution('2\\n78') == '5'\nassert solution('2\\n79') == '5'\nassert solution('2\\n80') == '5'\nassert solution('2\\n81') == '5'\nassert solution('2\\n82') == '5'\nassert solution('2\\n83') == '5'\nassert solution('2\\n84') == '5'\nassert solution('2\\n85') == '5'\nassert solution('2\\n86') == '5'\nassert solution('2\\n87') == '5'\nassert solution('2\\n88') == '5'\nassert solution('2\\n89') == '5'\nassert solution('2\\n90') == '5'\nassert solution('2\\n91') == '5'\nassert solution('2\\n92') == '5'\nassert solution('2\\n93') == '5'\nassert solution('2\\n94') == '5'\nassert solution('2\\n95') == '5'\nassert solution('2\\n96') == '5'\nassert solution('2\\n97') == '5'\nassert solution('2\\n98') == '5'\nassert solution('2\\n99') == '5'\nassert solution('2\\n100') == '5'\nassert solution('3\\n1 1 1') == '0'\nassert solution('3\\n1 1 1') == '1'\nassert solution('3\\n1 1 1') == '0'\nassert solution('3\\n1 1 1') == '1'\nassert solution('3\\n1 1 1') == '0'\nassert solution('3\\n2 1 2') == '0'\nassert solution('3\\n2 1 2') == '1'\nassert solution('3\\n2 1 2') == '0'\nassert solution('3\\n2 1 2') == '1'\nassert solution('3\\n2 1 2') == '0'\nassert solution('3\\n3 1 3') == '0'\nassert solution('3\\n3 1 3') == '1'\nassert solution('3\\n3 1 3') == '0'\nassert solution('3\\n3 1 3') == '1'\nassert solution('3\\n3 1 3') == '0'\nassert solution('3\\n4"
    },
    {
        "number": 4373,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    counter = 0\n    while n!= 0:\n        result = sum(a[:n])\n        n -= 1\n        if result <= 1:\n            counter += 1\n        else:\n            break\n    return str(counter)\n\nassert(solution('''4\n3 1 4 1''') == \"3\")\nassert(solution('''3\n1 1 1''') == \"1\")\nassert(solution('''5\n1 1 1 2 2''') == \"2\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1 1''') == \"1\")\nassert(solution('''4\n3 1 4 1''') == \"1\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1''') == \"1\")\n\n\n\nassert(solution('''4\n3 1 4 1''') == \"3\")\nassert(solution('''3\n1 1 1''') == \"1\")\nassert(solution('''5\n1 1 1 2 2''') == \"2\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1''') == \"1\")\nassert(solution('''4\n3 1 4 1''') == \"1\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1''') == \"1\")\n\n\n\nassert(solution('''4\n3 1 4 1''') == \"3\")\nassert(solution('''3\n1 1 1''') == \"1\")\nassert(solution('''5\n1 1 1 2 2''') == \"2\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1''') == \"1\")\nassert(solution('''4\n3 1 4 1''') == \"1\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1''') == \"1\")\n\nassert(solution('''4\n3 1 4 1''') == \"3\")\nassert(solution('''3\n1 1 1''') == \"1\")\nassert(solution('''5\n1 1 1 2 2''') == \"2\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1''') == \"1\")\nassert(solution('''4\n3 1 4 1''') == \"1\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1''') == \"1\")\n\n\nassert(solution('''4\n3 1 4 1''') == \"3\")\nassert(solution('''3\n1 1 1''') == \"1\")\nassert(solution('''5\n1 1 1 2 2''') == \"2\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1''') == \"1\")\nassert(solution('''4\n3 1 4 1''') == \"1\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1''') == \"1\")\n\nassert(solution('''4\n3 1 4 1''') == \"3\")\nassert(solution('''3\n1 1 1''') == \"1\")\nassert(solution('''5\n1 1 1 2 2''') == \"2\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1''') == \"1\")\nassert(solution('''4\n3 1 4 1''') == \"1\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1''') == \"1\")\n\nassert(solution('''4\n3 1 4 1''') == \"3\")\nassert(solution('''3\n1 1 1''') == \"1\")\nassert(solution('''5\n1 1 1 2 2''') == \"2\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1''') == \"1\")\nassert(solution('''4\n3 1 4 1''') == \"1\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1''') == \"1\")\n\nassert(solution('''4\n3 1 4 1''') == \"3\")\nassert(solution('''3\n1 1 1''') == \"1\")\nassert(solution('''5\n1 1 1 2 2''') == \"2\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1''') == \"1\")\nassert(solution('''4\n3 1 4 1''') == \"1\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1''') == \"1\")\n\nassert(solution('''4\n3 1 4 1''') == \"3\")\nassert(solution('''3\n1 1 1''') == \"1\")\nassert(solution('''5\n1 1 1 2 2''') == \"2\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1''') == \"1\")\nassert(solution('''4\n3 1 4 1''') == \"1\")\nassert(solution('''1\n1 1 1''') == \"1\")\nassert(solution('''10\n1 1 1 1 1 1 1 1 1''') == \"1\")\n\nassert(solution('''4\n3 1 4 1''') == \"3\")\nassert(solution('''3\n1 1 1''')"
    },
    {
        "number": 4373,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return 1\n    res = 1\n    s = a[0]\n    for i in range(1, n):\n        if s == a[i]:\n            res += 1\n            s = 0\n        s += a[i]\n    return res\n\nassert(solution('''4\n3 1 4 1''') == 3)\nassert(solution('''3\n1 1 1''') == 1)\nassert(solution('''5\n1 1 1 2 2''') == 2)\n\nprint(solution('''1000\n97 39 74 38 54 71 82 57 67 69 40 65 72 68 36 71 94 73 81 59 78 36 51 91 79 18 69 82 96 44 89 85 74 82 33 38 79 92 78 18 82 31 99 97 98 76 67 93 99 93 97 45 39 87 96 86 58 78 39 19 78 36 90 96 41 80 85 18 32 26 81 83 85 92 19 68 31 17 47 99 88 81 95 48 82 93 44 66 55 91 36 85 22 28 57 13 25 45 41 44 46 21 76 40 17 43 88 90 36 34 49 85 56 82 48 18 28 29 61 59 42 35 30 35 18 70 83 37 23 33 31 19 64 61 40 59 30 73 44 16 37 91 40 29 64 82 79 79 78 26 45 29 30 32 68 13 29 29 30 43 33 33 16 83 75 31 36 74 35 31 40 50 68 38 82 79 30 36 16 83 61 46 73 85 72 76 93 27 78 57 55 79 24 39 93 43 22 29 48 63 52 50 63 35 30 29 43 47 80 22 35 65 37 26 97 87 62 86 78 72 76 61 34 96 39 28 40 67 31 93 41 83 70 45 83 89 66 36 71 59 68 59 22 78 50 61 67 35 39 31 82 76 33 71 83 60 87 51 89 43 59 73 43 41 19 62 30 43 74 68 70 96 65 84 35 22 60 64 74 50 33 79 63 59 94 30 36 57 21 30 67 79 17 25 83 38 81 89 39 50 92 89 57 41 21 57 24 31 37 78 73 86 33 48 47 30 30 33 89 42 58 35 40 65 22 73 51 82 63 33 97 35 50 41 59 79 86 22 75 21 22 14 17 61 16 89 45 71 19 57 18 74 31 52 83 11 64 24 39 26 65 82 11 32 14 26 32 58 16 92 21 22 50 71 73 17 13 25 19 26 22 50 24 17 19 71 37 86 79 37 41 78 32 22 84 50 75 19 14 21 12 56 83 19 57 87 16 41 71 82 19 55 49 19 54 79 35 19 78 30 29 22 19 34 85 18 52 57 19 71 47 86 18 17 19 63 19 22 16 91 81 19 15 19 19 18 19 22 76 19 26 67 76 61 82 19 20 19 19 24 19 21 19 61 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19 22 19 19"
    },
    {
        "number": 4373,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if sum(a) % n == 0:\n        return str(n)\n    return str(sum(a) // n)\n\nassert solution(open(\"data/test_solution_2.txt\", \"r\")) == \"4\"\nassert solution(open(\"data/test_solution_1.txt\", \"r\")) == \"3\"\nprint(solution(open(\"data/input_2.txt\", \"r\")))\nprint(solution(open(\"data/input_1.txt\", \"r\")))\n\"\"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(compute_day_count(int(stdin)))\n\ndef"
    },
    {
        "number": 4373,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    contests = list(map(int, stdin.readline().split()))\n\n    contests.sort(reverse=True)\n    num_problems = contests[0]\n    contests_left = num_problems\n    days = 0\n\n    for i in range(1, n):\n        if num_problems >= contests[i]:\n            num_problems -= contests[i]\n            contests_left -= 1\n        else:\n            num_problems = contests[i]\n            contests_left = num_problems\n\n        if num_problems == 0:\n            days += 1\n            num_problems = contests[i]\n            contests_left -= 1\n\n    return str(days)\n\nassert solution('1\\n1') == '1'\nassert solution('4\\n3 1 4 1') == '3'\nassert solution('3\\n1 1 1') == '1'\nassert solution('5\\n1 1 1 2 2') == '2'\nassert solution('6\\n1 1 1 2 2 3 2') == '3'\nassert solution('6\\n2 2 2 2 3 3 3') == '3'\nassert solution('6\\n2 2 3 3 3 3 3') == '4'\nassert solution('6\\n2 2 2 2 2 2 2') == '5'\nassert solution('6\\n2 2 2 2 2 2 2 2') == '6'\nassert solution('6\\n2 2 2 2 2 2 2 2 2') == '6'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2') == '7'\nassert solution('7\\n2 2 2 2 2 2 2"
    },
    {
        "number": 4373,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    contests = list(map(int, stdin.split()))\n    contests.sort()\n    count = 0\n    max_count = 0\n\n    for contest in contests:\n        if contest <= count:\n            break\n        count += contest\n        max_count += 1\n\n    return max_count\n\nassert solution(\n    \"4\\n3 1 4 1\\n\") == 3\nassert solution(\n    \"3\\n1 1 1\\n\") == 1\nassert solution(\n    \"5\\n1 1 1 2 2\\n\") == 2\nassert solution(\n    \"5\\n1 1 1 2 2 3 3\\n\") == 4\nassert solution(\n    \"5\\n2 2 2 2 2 2\\n\") == 4\nassert solution(\n    \"5\\n1 1 1 2 2 3 3\\n\") == 4\nassert solution(\n    \"10\\n
    },
    {
        "number": 4373,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For more info on contests see: https://polycarp.com/trainings/programming-competition/\n    \"\"\"\n    num_contests = int(stdin)\n    contests = list(map(int, stdin.strip().split(' ')))\n    result = 0\n    while contests:\n        problem_count = contests[0]\n        problems = list(map(int, stdin.strip().split(' ')))\n        if len(problems) >= problem_count:\n            result += 1\n            contests = problems[problem_count:]\n        else:\n            break\n    return str(result)\n\nimport sys"
    },
    {
        "number": 4373,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    contests = list(map(int, stdin.readline().strip().split()))\n    contests.sort(reverse=True)\n    problems = list(map(int, stdin.readline().strip().split()))\n    contests = contests[:n]\n    total = 0\n    problems = problems[:n]\n    for i in range(n):\n        if problems[i] > contests[i]:\n            total += contests[i]\n        else:\n            total += problems[i]\n    return str(total)\n\nassert(solution('''4\n3 1 4 1\n''') == '3')\nassert(solution('''3\n1 1 1\n''') == '1')\nassert(solution('''5\n1 1 1 2 2\n''') == '2')\nassert(solution('''3\n1 1 1\n''') == '1')\nassert(solution('''3\n1 2 2\n''') == '1')\nassert(solution('''2\n2 2\n''') == '1')\nassert(solution('''5\n2 2 2 2 2\n''') == '2')\nassert(solution('''3\n1 2 1\n''') == '0')\nassert(solution('''3\n1 1 1\n''') == '0')\nassert(solution('''1\n1\n''') == '1')\nassert(solution('''1\n1\n''') == '1')\nassert(solution('''1\n1\n''') == '1')\nassert(solution('''1\n1\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')\nassert(solution('''2\n2\n''') == '1')"
    },
    {
        "number": 4373,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    s = sum(arr)\n    if s % n!= 0:\n        return -1\n    return s // n\n\n\nassert solution('''4\n3 1 4 1''') == 3\nassert solution('''3\n1 1 1''') == 1\nassert solution('''5\n1 1 1 2 2''') == 2\nassert solution('''1\n1 1 1''') == -1\nassert solution('''1\n1 1 1 2 2''') == -1\n"
    },
    {
        "number": 4374,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    graph = nx.Graph()\n    for _ in range(m):\n        v, u = [int(x) for x in stdin.split()]\n        graph.add_edge(v, u)\n\n    # let's make sure we have a tree\n    if not nx.is_connected(graph):\n        graph.add_edge(0, 1)\n\n    if nx.is_connected(graph):\n        return str(nx.diameter(graph))\n    else:\n        return str(0)\n"
    },
    {
        "number": 4374,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    vertices = [[] for x in range(n)]\n    for x in range(m):\n        v1, v2 = [int(x) for x in stdin.split()]\n        if v1 not in vertices[v2 - 1]:\n            vertices[v2 - 1].append(v1)\n        if v2 not in vertices[v1 - 1]:\n            vertices[v1 - 1].append(v2)\n    max_diameter = 0\n    for v1 in vertices:\n        v1.sort()\n        for v2 in vertices:\n            v2.sort()\n            for i, v1_ in enumerate(v1):\n                for v2_ in v2[i:]:\n                    if v1_!= v2_:\n                        max_diameter = max(max_diameter, v1_.index(v2_) + v2_.index(v1_) + 2)\n    return str(max_diameter)\n"
    },
    {
        "number": 4374,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4374,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    g = defaultdict(list)\n    for _ in range(m):\n        v, u = [int(x) for x in stdin.strip().split()]\n        g[v].append(u)\n        g[u].append(v)\n    nx = nx_graph(g, n)\n    diameter = nx.diameter()\n    return str(diameter)\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4374,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(arr):\n        n = int(arr[0])\n        m = int(arr[1])\n        edges = [tuple(map(int, line.strip().split())) for line in arr[2:]]\n        tree = Graph(n)\n        for v, u in edges:\n            tree.add_edge(v, u)\n        return tree.diameter()\n    return '\\n'.join(map(str, solve(stdin.strip().split('\\n'))))\n\n\n\n\"\"\"\n\nfrom typing import Dict, List\n\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4374,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    nodes = [int(x) for x in stdin.readline().strip().split()]\n    edges = [int(x) for x in stdin.readline().strip().split()]\n    adj = [set() for _ in range(n)]\n    for edge in edges:\n        u, v = nodes[edge]\n        adj[u].add(v)\n        adj[v].add(u)\n    diameter = 0\n    for component in adj:\n        diameter = max(diameter, len(component))\n    return str(diameter)\n\nassert(solution('''2\n4\n1 2\n2 3''') == '2')\nassert(solution('''2\n0\n''') == '1')\nassert(solution('''3\n2\n1 3\n2 3''') == '2')\nassert(solution('''1\n1\n''') == '1')\nassert(solution('''4\n4\n1 2\n2 3\n3 4\n4 2''') == '2')\nassert(solution('''4\n4\n1 2\n2 3\n1 3\n1 4\n1 4\n''') == '2')\nassert(solution('''2\n0\n''') == '1')\nassert(solution('''1\n0\n''') == '1')\nassert(solution('''3\n2\n1 3\n2 3''') == '2')\nassert(solution('''1\n1\n''') == '1')\nassert(solution('''4\n4\n1 2\n2 3\n1 3\n2 3''') == '2')\nassert(solution('''4\n4\n1 2\n2 3\n1 3\n1 4\n1 4\n''') == '2')\nassert(solution('''5\n5\n1 2\n2 3\n1 3\n2 4\n1 5\n4 2\n1 5\n''') == '3')\nassert(solution('''6\n6\n1 2\n2 3\n1 3\n1 4\n1 5\n1 6\n1 6\n1 7\n1 8\n1 9\n2 4\n1 9\n1 10\n1 11\n1 12\n2 5\n1 11\n2 12\n2 13\n2 14\n2 15\n2 16\n3 5\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n2 6\n1 17\n2 18\n2 19\n2 20\n2 21\n1 19\n1 21\n2 22\n2 23\n2 24\n2 25\n2 26\n1 25\n1 26\n2 27\n1 27\n1 28\n1 29\n1 30\n1 31\n1 32\n2 31\n1 32\n1 33\n1 34\n1 35\n1 36\n2 33\n1 36\n2 37\n2 38\n1 38\n1 39\n1 40\n2 37\n1 40\n1 41\n1 42\n1 43\n1 44\n1 45\n1 46\n1 47\n2 45\n1 47\n2 48\n1 48\n1 49\n1 50\n1 51\n2 50\n1 51\n1 52\n1 53\n1 54\n1 55\n1 56\n1 57\n1 58\n1 59\n1 60\n1 61\n1 62\n2 61\n1 62\n1 63\n1 64\n1 65\n1 66\n1 67\n1 68\n1 69\n1 70\n1 71\n1 72\n1 73\n1 74\n1 75\n1 76\n2 73\n1 76\n1 77\n1 78\n1 79\n1 80\n1 81\n1 82\n2 80\n1 82\n1 83\n1 84\n1 85\n1 86\n1 87\n1 88\n1 89\n1 90\n1 91\n1 92\n1 93\n1 94\n1 95\n1 96\n1 97\n1 98\n2 96\n1 97\n1 98\n1 99\n1 100\n2 99\n1 100\n1 101\n1 102\n1 103\n1 104\n1 105\n1 106\n1 107\n1 108\n1 109\n1 110\n1 111\n1 112\n1 113\n1 114\n1 115\n1 116\n1 117\n1 118\n1 119\n1 120\n1 121\n1 122\n1 123\n1 124\n1 125\n1 126\n1 127\n1 128\n1 129\n2 127\n1 129\n1 130\n1 131\n1 132\n1 133\n1 134\n1 135\n1 136\n1 137\n1 138\n1 139\n1 140\n1 141\n1 142\n1 143\n1 144\n1 145\n1 146\n1 147\n1 148\n1 149\n1 150\n1 151\n1 152\n1 153\n1 154\n1 155\n1 156\n1 157\n1 158\n1 159\n1 160\n1 161\n1 162\n1 163\n1 164\n1 165\n1 166\n1 167\n1 168\n1 169\n1 170\n1 171\n1 172\n1 173\n1 174\n1 175\n1 176\n1 177\n1 178\n1 179\n1 180\n1 181\n1 182\n1 183\n1 184\n1 185\n1 186\n1 187\n1 188\n1 189\n1 190\n1 191\n1 192\n1 193\n1 194\n1 195\n1 196\n1 197\n1 198\n1 199\n1 200\n2 197\n1 200\n1 201\n1 202\n1 203\n1 204\n1 205\n1 206\n1 207\n1 208\n1 209\n1 210\n1 211\n1 212\n1 213\n1 214\n1 215\n1 216\n1 217\n1 218\n1 219\n1 220\n1 221\n1 222\n1 223\n1 224\n1 225\n1 226\n1 227\n1 228\n1 229\n1 230\n1 231\n1 232\n1 233\n1 234\n1 235\n1 236\n1 237\n1 238\n1 239\n1 240\n1 241\n1 242\n1 243\n1 244\n1 245\n1 246\n1 247\n1 248\n1 249\n1 250\n1 251\n1 252\n1 253\n1 254\n1 255\n1 256\n1 257\n1 258\n1 259\n1 260\n1 261\n1 262\n1 263\n1 264\n1 265\n1 266\n1 267\n1 268\n1 269\n1 270\n1 271\n1 272\n1 273\n1 274\n1 275\n1 276\n1 277\n1 278\n1 279\n1 280\n1 281\n1 282\n1 283\n1 284\n1 285\n1 286\n1 287\n1 288\n1 289\n1 290\n1 291\n1 292\n1 293\n1 294\n1 295\n1 296\n1 297\n1 298\n1 299\n"
    },
    {
        "number": 4374,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_ = [line.split() for line in stdin.splitlines()]\n    print(solution_naive(input_))\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    if n == 0:\n        return 0\n\n    vertices = [set() for _ in range(n + 1)]\n    for _ in range(m):\n        v, u = [int(x) for x in stdin.split()]\n        vertices[v].add(u)\n        vertices[u].add(v)\n\n    for i in range(n + 1):\n        for j in range(i):\n            if j == i:\n                continue\n            if j in vertices[i]:\n                continue\n            if i in vertices[j]:\n                continue\n\n            vertices[i].add(j)\n            vertices[j].add(i)\n            return len(vertices[i]) - 1\n    return 0\n"
    },
    {
        "number": 4375,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    graph = []\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph.append((u, v))\n    return str(max_subset_total_weight(n, weights, graph, k))\n\n\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    edge_list = [tuple(int(x) for x in stdin.split()) for _ in range(n - 1)]\n    print(k, n, edge_list)\n    tree = UndirectedGraph(n)\n    for u, v in edge_list:\n        tree.add_edge(u, v)\n    tree.print_adj_list()\n    print(tree.max_weight(k))\n\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v = [int(x) for x in stdin.split()]\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    \n    tree = [0] * n\n    for i in range(n):\n        tree[i] = tree_walker(a, k, graph, i, tree)\n\n    return str(max(tree))\n\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = [x.strip() for x in stdin.strip().split(\"\\n\")]\n    n, k = [int(x) for x in lines[0].split()]\n    weights = [int(x) for x in lines[1].split()]\n\n    edges = [map(int, x.split()) for x in lines[2:]]\n\n    adj_list = [[] for _ in range(n)]\n\n    for u, v in edges:\n        adj_list[u-1].append(v-1)\n        adj_list[v-1].append(u-1)\n\n    def count_distances(u: int, adj_list: List[List[int]], weights: List[int]) -> int:\n        if u == len(adj_list):\n            return 0\n        result = 0\n        for v in adj_list[u]:\n            if weights[u] + weights[v] <= k:\n                result = max(result, count_distances(v, adj_list, weights) + weights[u] + weights[v])\n        return result + weights[u]\n\n    return str(count_distances(0, adj_list, weights))\n\nassert(solution(\n\"\"\"5 1\n1 2 3 4 5\n1 2\n2 3\n3 4\n3 5\n\"\"\") == \"11\"\n)\nassert(solution(\n\"\"\"7 2\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n\"\"\") == \"4\"\n)\nassert(solution(\n\"\"\"7 2\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n\"\"\") == \"4\"\n)\nassert(solution(\n\"\"\"7 3\n2 1 2 1 2 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n\"\"\") == \"4\"\n)\nassert(solution(\n\"\"\"6 2\n1 1 1 1 1 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n\"\"\") == \"4\"\n)\nassert(solution(\n\"\"\"6 2\n1 1 1 1 1 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n\"\"\") == \"4\"\n)\nassert(solution(\n\"\"\"6 2\n1 1 1 1 1 1 1\n6 4\n1 5\n3 1\n2 3\n7 5\n7 4\n\"\"\") == \"4\"\n)\n"
    },
    {
        "number": 4375,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    adj = [set() for _ in range(n)]\n    weights = [int(x) for x in stdin.split()]\n    for _ in range(n - 1):\n        u, v = [int(x) for x in stdin.split()]\n        adj[u - 1].add(v - 1)\n        adj[v - 1].add(u - 1)\n    for v in adj:\n        v.discard(-1)\n    dist = [-1] * n\n    dist[0] = weights[0]\n    for i in range(n - 1):\n        for u in adj[i]:\n            dist[u] = max(dist[u], weights[i] + dist[i])\n    return max(dist)"
    },
    {
        "number": 4375,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n@pytest.mark.parametrize(\"execution_time,expected\", [\n    (\n        '1\\n5 1\\n1 2 3 4 5\\n1 2\\n2 3\\n3 4\\n3 5',\n        '11'\n    ),\n    (\n        '1\\n5 2\\n2 1 2 1 2 1 1\\n1 2\\n2 3\\n3 4\\n3 5',\n        '4'\n    ),\n    (\n        '1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200',\n        '66'\n    )\n])\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(n - 1)]\n    graph = {}\n    for u, v in edges:\n        graph.setdefault(u, []).append(v)\n        graph.setdefault(v, []).append(u)\n    print(max_weight(graph, a, k))\n\n\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4375,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline()\n\n\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def total_weight(vertices: list[int], edges: list[tuple[int, int]], max_distance: int) -> int:\n        tree_graph = {x: [] for x in range(1, n + 1)}\n        for u, v in edges:\n            tree_graph[u].append(v)\n            tree_graph[v].append(u)\n\n        # T[i][j] = the sum of weights of vertices which are in the subset of vertices\n        # with distance i and no vertices in it, also\n        # T[i][j] = T[i - 1][j - 1] + a[i]\n        # T[0][0] = 0\n        # T[i][0] = 0\n        T = [[0] * (max_distance + 1) for _ in range(n + 1)]\n        for k in range(1, max_distance + 1):\n            for i in range(1, n + 1):\n                T[i][k] = T[i - 1][k - 1] + a[i]\n                for j in range(1, n + 1):\n                    if i!= j:\n                        T[i][k] = max(T[i][k], T[i - 1][k - 1] + a[j])\n        print(T)\n        return T[-1][-1]\n\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    edges = [tuple(map(int, stdin.split())) for _ in range(n - 1)]\n\n    return str(total_weight(a, edges, k))"
    },
    {
        "number": 4376,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4376,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_envelope_room_number(envelope_number: int) -> int:\n        return envelope_number - 1\n\n    n, m = (int(x) for x in stdin.split())\n    a = tuple(int(x) for x in stdin.split())\n    b = tuple(int(x) for x in stdin.split())\n    result = []\n    for i in range(m):\n        envelope_number, letter_number = (int(x) for x in stdin.split())\n        result.append(f\"{i + 1} {get_envelope_room_number(envelope_number)}\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 4376,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = [int(x) for x in lines[0].split(' ')]\n    a = [int(x) for x in lines[1].split(' ')]\n    b = [int(x) for x in lines[2].split(' ')]\n    \n    for i in range(m):\n        if b[i] < a[0]:\n            print(1, 1)\n        elif b[i] < a[0] + a[1]:\n            print(1, b[i])\n        else:\n            for j in range(n):\n                if b[i] < a[j]:\n                    print(j+1, b[i])\n                    break"
    },
    {
        "number": 4376,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    dorms, letters = [int(x) for x in stdin.strip().split()]\n    rooms = [int(x) for x in stdin.strip().split()]\n    nums = rooms[:]\n    rooms.sort()\n    k = 0\n    for l in letters:\n        k += 1\n        if l > nums[-1]:\n            break\n        for i in range(len(nums)):\n            if nums[i] > l:\n                nums[i] -= 1\n                d = i + 1\n                break\n        if d == 1:\n            print(d, 1)\n        else:\n            print(d, k)\n    return \"\""
    },
    {
        "number": 4376,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4376,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    assert 1 <= n <= 100\n    assert 1 <= m <= 200000000\n\n    a = list(map(int, stdin.split()))\n    assert 1 <= min(a) <= 10000000000\n    assert 1 <= max(a) <= 10000000000\n\n    b = list(map(int, stdin.split()))\n    assert 1 <= min(b) <= max(a)\n    assert min(b) <= max(a) <= 10000000000\n\n    d = {}\n    for i in range(1, n+1):\n        for j in range(1, a[i-1]+1):\n            d[j] = i\n    assert len(d) == max(a)+1\n\n    for i in range(m):\n        print(d[b[i]], b[i])"
    },
    {
        "number": 4376,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 4376,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m = tuple(map(int, lines[0].split()))\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n    a.sort()\n    b.sort()\n    out = ''\n    i = 0\n    j = 0\n    while i < len(a):\n        j = 0\n        while j < a[i]:\n            out += '\\n' + str(i + 1) +'' + str(j + 1)\n            j += 1\n        i += 1\n    return out\n\n\"\"\""
    },
    {
        "number": 4376,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(n) for n in stdin.split()]\n    b = [int(n) for n in stdin.split()]\n    r = {}\n    for i, num in enumerate(a):\n        for j in range(num):\n            r[j + 1] = i + 1\n    \n    for _ in range(m):\n        a, b = b, a\n        n, m = m, n\n        for j in range(m):\n            print(r[b[j]], end=' ')\n        print()"
    },
    {
        "number": 4376,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(str(f) +'' + str(k) for (f, k) in sorted((int(f) - 1, int(k)) for (f, k) in (line.split() for line in stdin.split('\\n'))))\n\n_author_ = 'jake'\n_project_ = 'leetcode'\nclass Solution(object):\n    def deliver(self, n, m, a, b):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :type a: List[int]\n        :type b: List[int]\n        :rtype: List[int]\n        \"\"\"\n        rooms = {}\n        for i in range(len(a)):\n            if i > 0:\n                for j in range(a[i - 1]):\n                    rooms[j + 1] = i\n            rooms[a[i]] = i\n\n        return [rooms[b[i]] + 1 for i in range(m)]"
    },
    {
        "number": 4377,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline())\n    a, b, c, d = map(int, stdin.readline().split())\n\n    s = set()\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                if i + j + k == d and a * i + b * j + c * k == c:\n                    s.add(i)\n                    s.add(j)\n                    s.add(k)\n\n    s = sorted(list(s))\n\n    return''.join(str(x) for x in s)"
    },
    {
        "number": 4377,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split()]\n    a, b, c, d = nums[0], nums[1], nums[2], nums[3]\n    res = []\n\n    for x in range(10):\n        for y in range(10):\n            if x!= y and a + b == x + y and c + d == x + y + c:\n                res.append(x)\n                res.append(y)\n                res.append(x)\n                res.append(y)\n                return''.join(str(x) for x in res)"
    },
    {
        "number": 4377,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return''.join(map(str, [a, b, c]))\n\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input()) == '1 100 1'\nassert solution(input"
    },
    {
        "number": 4377,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gives the sum of the four integers in a given board.\n    \"\"\"\n    a, b, c, d = [int(x) for x in stdin.strip().split()]\n    for i in range(1, d):\n        a += b\n        b += c\n    return''.join([str(a), str(b), str(c)])"
    },
    {
        "number": 4377,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return''.join(str(a + b) for a, b in zip(sorted([c, d, a, b]), sorted([c, d, a, b])))\n\nassert solution('3 6 5 4') == '2 1 3'\nassert solution('40 40 40 60') == '20 20 20'\nassert solution('201 101 101 200') == '1 100 100'\nprint(solution(input()))\n"
    },
    {
        "number": 4377,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(num) for num in stdin.split(\" \")]\n    numbers = sorted(numbers)\n    a, b, c = numbers[0], numbers[1], numbers[2]\n    if a < b and b < c:\n        a, b, c = b, c, a\n    if a < c:\n        a, c = c, a\n    if b < c:\n        b, c = c, b\n    return \"{} {} {}\".format(a, b, c)\n"
    },
    {
        "number": 4377,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(i) for i in stdin.split(\" \")]\n    a, b, c, d = x\n    res = [0, 0, 0]\n    for i in range(3):\n        for j in range(3):\n            if i == j:\n                continue\n            if res[i] + res[j] == d:\n                res[i], res[j] = x[i], x[j]\n                break\n    return \" \".join([str(i) for i in res])\n"
    },
    {
        "number": 4377,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    a = int(line[0])\n    b = int(line[1])\n    c = int(line[2])\n    d = int(line[3])\n    a, b, c = sorted([a, b, c])\n    for i in range(1, 4):\n        if a + i not in (b, c, d):\n            break\n        if b + i not in (a, c, d):\n            break\n        if c + i not in (a, b, d):\n            break\n        if a + b + i not in (c, d):\n            break\n    else:\n        return''.join([str(i) for i in [a, b, c]])\n    return''.join([str(i) for i in [a, b, d]])\n\nassert(solution('3 6 5 4') == '2 1 3')\nassert(solution('40 40 40 60') == '20 20 20')\nassert(solution('201 101 101 200') == '1 100 100')\nprint(solution('3 6 5 4'))\nprint(solution('40 40 40 60'))\nprint(solution('201 101 101 200'))\n"
    },
    {
        "number": 4377,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # x1, x2, x3, x4 = [int(x) for x in stdin.split()]\n    x1, x2, x3, x4 = map(int, stdin.split())\n    return''.join(map(str, sorted([x1, x2, x3, x4])))\n\ndef"
    },
    {
        "number": 4377,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(n) for n in stdin.split()]\n    return''.join(str(sum(numbers[i:i + 3])) for i in range(0, len(numbers), 3))"
    },
    {
        "number": 4378,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    lamps = [lamp for lamp in s]\n    k = 0\n    for i in range(1, len(lamps)):\n        if lamps[i]!= lamps[i - 1]:\n            k += 1\n    print(k)\n    print(''.join(lamps))\n"
    },
    {
        "number": 4378,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n\n    dp = [[1] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i):\n            if s[j] == s[i]:\n                dp[j][i] = dp[j][i - 1]\n            elif s[j] == 'R' and s[i] == 'G':\n                dp[j][i] = dp[j][i - 1] + 1\n            elif s[j] == 'G' and s[i] == 'R':\n                dp[j][i] = dp[j][i - 1] + 1\n            elif s[j] == 'B' and s[i] == 'G':\n                dp[j][i] = dp[j][i - 1] + 1\n            elif s[j] == 'G' and s[i] == 'B':\n                dp[j][i] = dp[j][i - 1] + 1\n            elif s[j] == 'B' and s[i] == 'R':\n                dp[j][i] = dp[j][i - 1] + 1\n\n    m = float('inf')\n    for i in range(n):\n        m = min(m, dp[i][i])\n\n    print(m)\n    res = \"\"\n    for i in range(n):\n        for j in range(i):\n            if dp[i][j] == m:\n                res += s[i]\n                break\n\n    print(res)\n    return res\n"
    },
    {
        "number": 4378,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stdout = stdin\n    for i in range(1, n):\n        if stdin[i - 1] == stdin[i]:\n            stdout = stdout[:i - 1] + stdout[i + 1 :]\n    return stdout\n"
    },
    {
        "number": 4378,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[1]\n    n = int(stdin.splitlines()[0])\n    s = ''.join(sorted(s))\n    st = ''\n    for i in range(n - 1):\n        if s[i]!= s[i + 1]:\n            st += s[i]\n    st += s[-1]\n    return st\n\nassert solution('''9\nRBGRRBRGG\n''') == 'RBGRGBRGR'\nassert solution('''8\nBBBGBRRR\n''') == 'BRBGBRGR'\nassert solution('''13\nBBRRRRGGGGGRR\n''') == 'BGRBRBGBGBGRG'\nprint(solution('''12\nRBRRRRGGGGGRR\n'''))\n"
    },
    {
        "number": 4378,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    lamps = []\n    for i in range(0, len(s)):\n        lamps.append(s[i])\n    lamps.sort()\n    counts = {}\n    for i in range(0, len(s)):\n        if lamps[i] not in counts.keys():\n            counts[lamps[i]] = 1\n        else:\n            counts[lamps[i]] += 1\n    lamps = list(counts.keys())\n    lamps.sort()\n    lamps.reverse()\n    lamps_copy = list(lamps)\n    for lamp in lamps_copy:\n        if counts[lamp] > 1:\n            del counts[lamp]\n    if len(counts) == 1:\n        return str(counts[lamps[0]])\n    elif len(counts) == 0:\n        return \"0\"\n    else:\n        return str(len(counts))\n"
    },
    {
        "number": 4378,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    a = {'R': 0, 'G': 1, 'B': 2}\n    if n == 1:\n        return ''\n    if n == 2:\n        if s[0] == s[1]:\n            return ''\n        else:\n            return s[0] + s[1]\n    if n % 2 == 0:\n        return solution(stdin)\n    if n == 3:\n        if s[0] == s[1]:\n            if s[2]!= s[0]:\n                return s[0] + s[1] + s[2]\n            else:\n                return s[0] + s[2]\n        else:\n            return solution(stdin)\n    if n % 2 == 1:\n        return solution(stdin)\nsolution(stdin)\n"
    },
    {
        "number": 4378,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    # s = stdin.split('B')\n    # r = min(len(s[0]), len(s[2]))\n    # return s[0][:r] + s[2][:r]\n    for i in range(1, n):\n        if s[i - 1]!= s[i]:\n            return s[:i] + s[i + 1:]\n    return s\n"
    },
    {
        "number": 4378,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    def dfs(i, res, visited):\n        if i == n:\n            if res not in ress:\n                ress.append(res)\n            return\n        for color in 'R', 'G', 'B':\n            if color not in visited:\n                visited.add(color)\n                dfs(i + 1, res + color, visited)\n                visited.remove(color)\n    ress = []\n    dfs(0, '', set())\n    return '\\n'.join(ress)"
    },
    {
        "number": 4378,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    while len(s) < n:\n        s += stdin.readline().strip()\n    \n    for _ in range(n):\n        s = s.replace('B', 'R').replace('R', 'G').replace('G', 'B')\n    \n    s = s[:n]\n    \n    return s"
    },
    {
        "number": 4378,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = s.replace('B', 'G').replace('R', 'G').replace('G', 'R')\n    s = s.replace('R', 'G').replace('G', 'R')\n    s = s.replace('R', 'G').replace('G', 'R')\n    n = int(s.count('R')) + int(s.count('G'))\n    if n % 2 == 0:\n        return '-1'\n    else:\n        return str(n // 2)\n\nprint(solution(''))\n"
    },
    {
        "number": 4379,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(\" \")]\n    a.sort()\n    \n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    max_len = max(dp)\n    result = []\n    for i in range(n - 1, -1, -1):\n        if dp[i] == max_len:\n            result.append(i)\n            max_len -= 1\n    \n    return f\"{max_len}\" + \" \".join(map(str, result))\n\nsolution(stdin)\n"
    },
    {
        "number": 4379,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    arr.sort()\n    count = 0\n    start = 0\n    l = []\n    if len(arr) <= 1:\n        return len(arr)\n    if arr[-1] - arr[0] <= 1:\n        return 1\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] <= 1:\n            count += 1\n        else:\n            l.append(count)\n            count = 0\n            start = i + 1\n    l.append(count)\n    return max(l)\nprint(solution(stdin))\n"
    },
    {
        "number": 4379,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(item) for item in stdin.readline().strip().split(' ')]\n    arr.sort()\n    arr_dict = {item: arr.count(item) for item in arr}\n    max_subseq_len = 0\n    max_subseq = []\n    for item in arr_dict:\n        if arr_dict[item] > max_subseq_len:\n            max_subseq_len = arr_dict[item]\n            max_subseq = [item]\n        elif arr_dict[item] == max_subseq_len:\n            max_subseq.append(item)\n    if len(max_subseq) == 1:\n        return str(max_subseq_len)\n    else:\n        return''.join([str(item) for item in max_subseq])\n\nprint(solution(None))\n"
    },
    {
        "number": 4379,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4379,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    start = 0\n    end = len(a) - 1\n    while start < end:\n        if a[start] < a[end]:\n            return str(len(a[start: end + 1]))\n        start += 1\n        end -= 1\n    return \"1\"\n\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    k = 1\n    l = []\n    for i in range(len(a)):\n        if i + k - 1 >= len(a):\n            break\n        if a[i] + 1 == a[i + k - 1]:\n            k += 1\n        else:\n            l.append(i)\n    return str(k) +'' +''.join(str(i + 1) for i in l)\n\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, arr = stdin.split('\\n', 1)\n    arr = list(map(int, arr.split(' ')))\n    max_length = 1\n    current = [0]\n    while max_length < len(arr):\n        current = [current[i] + 1 for i in range(len(current))]\n        if arr[current[-1]] - arr[current[0]] < max_length:\n            current = [current[i] + 1 for i in range(len(current))]\n            max_length += 1\n        else:\n            for i in range(1, len(current)):\n                current[i] += 1\n            current[0] = 0\n    return max_length\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    pass"
    },
    {
        "number": 4379,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    array = list(map(int, stdin.split()))\n    max_subsequence = 0\n    start = 0\n    end = len(array) - 1\n    for i in range(1, len(array)):\n        if array[i - 1] < array[i]:\n            max_subsequence = i\n    for i in range(1, len(array) - max_subsequence):\n        if array[i - 1] < array[i + max_subsequence - 1]:\n            start = i\n            break\n    for i in range(len(array) - 1, start, -1):\n        if array[i - 1] < array[i + max_subsequence - 1]:\n            end = i\n            break\n    return str(max_subsequence) + \" \" + str(start + 1) + \" \" + str(end + 1)"
    },
    {
        "number": 4380,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % 2 == 0 or B % 2 == 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int,stdin.split())\n    if (A * B) % 2 == 1:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4380,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4380,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"Yes\" if a * b % 2 == 1 else \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    return \"Yes\" if A * B % 2 == 1 else \"No\""
    },
    {
        "number": 4380,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(c) for c in stdin.split()]\n    for c in range(1, 4):\n        if (a * b * c) % 2!= 0:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(' '))\n    if a < 1 or a > 3 or b < 1 or b > 3:\n        raise ValueError('a and b must be between 1 and 3 inclusive')\n    return 'Yes' if a * b % 2!= 0 else 'No'"
    },
    {
        "number": 4380,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    if A == 1 or A == 2:\n        if B == 1 or B == 2:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4380,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine if there is an integer C between 1 and 3 (inclusive) such that A \\times B \\times C is an odd number.\n    \"\"\"\n    a, b = [int(x) for x in stdin.split()]\n    return 'Yes' if (a * b * 3) % 2 == 1 else 'No'"
    },
    {
        "number": 4380,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if 1 <= A <= 3 and 1 <= B <= 3:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\""
    },
    {
        "number": 4381,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.strip().split(' ')\n    return str(int(X) * int(Y) // 2)"
    },
    {
        "number": 4381,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    if y % 2 == 0:\n        return str(x + (x // 2) * (y // 2))\n    else:\n        return str(x + (x // 2) * (y // 2 + 1))"
    },
    {
        "number": 4381,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(int(y/2) if y%2==0 else y)\n\nprint(solution(input()))\n\n\"\"\"\nx, y = map(int, input().split())\nprint(x + y/2 if y%2==0 else y)\n"
    },
    {
        "number": 4381,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_y = stdin.split()\n    return str(int(int(x_y[0]) * 0.5 * int(x_y[1] / 2)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4381,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X < Y:\n        return str(X * 2)\n    else:\n        return str(X)\n\n\nprint(solution(input()))\n\"\"\"\ndef"
    },
    {
        "number": 4381,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return f\"{A * B // 2:.0f}\""
    },
    {
        "number": 4381,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    print(x * y // 2)"
    },
    {
        "number": 4381,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.strip().split()]\n    return str(x // 2)\n"
    },
    {
        "number": 4381,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_y = [int(i) for i in stdin.split()]\n    return str(int(x_y[0] / 2 + x_y[1]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4381,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a,b = map(int, stdin.split())\n    return str(int(a / 2 + b))"
    },
    {
        "number": 4382,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.rstrip()\n    return str(int(factorial(int(n))/(factorial(int(n)-4)*factorial(4))))\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n\n    return str(factorial(9) // (factorial(N) * factorial(9 - N)))\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4382,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(\n        ''.join(\n            (\n                str(digits_available(int(n)))\n                for n in line.split()\n            )\n        )\n        for line in stdin.splitlines()\n    )\n\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(factorial(10) // factorial(n) // factorial(9))"
    },
    {
        "number": 4382,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4382,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    print(int(math.factorial(n)/(math.factorial(n-1)*math.factorial(2))))\n    return \"\""
    },
    {
        "number": 4382,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4382,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return str(binomial(9, n) // binomial(9, n - 4) % 1000000007)"
    },
    {
        "number": 4382,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = 0\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                if n > 0:\n                    n -= 1\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4383,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if (x % 5 == 0) or (x % 3 == 0) or (x % 7 == 0):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here"
    },
    {
        "number": 4383,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if int(stdin) == 7 else 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4383,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4383,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 7:\n        return \"YES\"\n    elif x == 5:\n        return \"NO\"\n    elif x == 3:\n        return \"YES\"\n    elif x == 2:\n        return \"YES\"\n    elif x == 1:\n        return \"YES\"\n    elif x == 0:\n        return \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4383,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X % 3 == 0 and X % 5 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4383,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X == 1 or X == 2:\n        return \"NO\"\n    if X == 3:\n        return \"YES\"\n    if X % 3 == 0:\n        return \"YES\"\n    if X % 3 == 1:\n        return \"NO\"\n    if X % 3 == 2:\n        return \"YES\"\n\nprint(solution(\"\")"
    },
    {
        "number": 4383,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == '5' else 'NO'"
    },
    {
        "number": 4383,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 1:\n        print(\"NO\")\n    elif x == 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"NO\""
    },
    {
        "number": 4384,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = ''\n    for i in range(1000, n + 1):\n        if i % 10 < 3:\n            s = chr(ord('A') + i % 10 - 1) + s\n        else:\n            s = chr(ord('A') + i % 10 - 2) + s\n    return s"
    },
    {
        "number": 4384,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return chr(ord('A') + (int(stdin) - 1))"
    },
    {
        "number": 4384,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.rstrip()[:3]"
    },
    {
        "number": 4384,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 999:\n        return \"ABD\" + str(n + 1)\n    return \"ABC\" + str(n - 999)"
    },
    {
        "number": 4384,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:3]"
    },
    {
        "number": 4384,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return 'ABC' + (n - 1) * '999'"
    },
    {
        "number": 4384,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return ABC[n]"
    },
    {
        "number": 4384,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin[:3])"
    },
    {
        "number": 4384,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"\"\n    if n <= 99:\n        result += \"A\" * n\n    elif n <= 999:\n        result += \"B\"\n    elif n <= 9999:\n        result += \"C\"\n    elif n <= 99999:\n        result += \"D\"\n    elif n == 100000:\n        result += \"E\"\n    return result"
    },
    {
        "number": 4384,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = 'ABC'\n    for i in range(999, 0, -1):\n        s += chr(ord('A') + (n-1) // i)\n        n -= 1\n    print(s)"
    },
    {
        "number": 4385,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = tuple(int(x) for x in stdin.strip().split())\n    if k < abs(b - a) and k < abs(c - a) and k < abs(d - a) and k < abs(e - a):\n        return \"Yay!\"\n    return \":(\\n\"\n\n\ndef"
    },
    {
        "number": 4385,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ans: str = \"\"\n    for line in stdin.split(\"\\n\"):\n        a, b, c, d, e, k = map(int, line.split())\n        if e - a >= k:\n            ans = \"Yay!\"\n            break\n    return ans"
    },
    {
        "number": 4385,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef"
    },
    {
        "number": 4385,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if (a < b < c < d < e and k < b - a) or (a < c < d < e < b and k < c - a):\n        return 'Yay!'\n    return ':( '\n\nimport sys\nfrom math import log\n\ndef"
    },
    {
        "number": 4385,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d,e,k = [int(i) for i in stdin.split()]\n    if a < b < c < d < e:\n        if b - a <= k and c - b <= k and d - c <= k and e - d <= k:\n            return \"Yay!\"\n    return \":(\",a,b,c,d,e,k\n\ndef"
    },
    {
        "number": 4385,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = [int(x) for x in stdin.split()]\n    if a < b < c < d < e:\n        return \"Yay!\"\n    else:\n        return \":(\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if a + b <= c or a + c <= b or b + c <= a or a + d <= c or a + e <= d or b + d <= a or b + e <= a or c + d <= b or c + e <= b or d + e <= c or a + k <= b or a + k <= c or a + k <= d or a + k <= e:\n        return \"Yay!\"\n    else:\n        return \":( \"\n"
    },
    {
        "number": 4385,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n\n    if a == b or a == c or a == d or a == e:\n        if c == d or c == e or d == e:\n            return \"Yay!\"\n        else:\n            return \":(\\n\"\n\n    if b == c or b == d or b == e:\n        if d == e or c == e or d == e:\n            return \"Yay!\"\n        else:\n            return \":(\\n\"\n\n    if c == d or c == e or d == e:\n        if b == d or b == e or d == e:\n            return \"Yay!\"\n        else:\n            return \":(\\n\"\n    else:\n        if k >= max(b - a, d - c) + 1 and k >= max(a - b, c - d) + 1:\n            return \"Yay!\"\n        else:\n            return \":(\\n\""
    },
    {
        "number": 4385,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = [int(i) for i in stdin.split()]\n    if a < b < c < d < e:\n        return 'Yay!'\n    if a > b > c > d > e:\n        return 'Yay!'\n    return ':( '\n\nsolution = lambda stdin: print('Yay!' if sorted(map(int, stdin.split()))[2] <= sum(sorted(map(int, stdin.split()))[:2]) else ':( ')"
    },
    {
        "number": 4385,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if a == b or c == d or a == c or a == d or b == c or b == d or c == d:\n        return 'Yay!'\n    if a < b < c < d < e and a + b + c + d + e - 5 <= k:\n        return 'Yay!'\n    return 'AtCoder city, there are five antennas standing in a straight line. They are called Antenna A, B, C, D and E from west to east, and their coordinates are a, b, c, d and e, respectively. Two antennas can communicate directly if the distance between them is k or less, and they cannot if the distance is greater than k. Determine if there exists a pair of antennas that cannot communicate directly.\\n'"
    },
    {
        "number": 4386,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        return stdin\n    else:\n        return'red'\n"
    },
    {
        "number": 4386,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        print(stdin)\n    else:\n        print('red')"
    },
    {
        "number": 4386,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a > 3200:\n        return'red'\n    return 'pink'"
    },
    {
        "number": 4386,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a > 3200:\n        return \"red\"\n    else:\n        return stdin"
    },
    {
        "number": 4386,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        print('pink')\n    else:\n        print('red')"
    },
    {
        "number": 4386,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        return stdin\n    return \"red\""
    },
    {
        "number": 4386,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    s = stdin.readline()\n    if a < 3200:\n        print(s)\n    else:\n        print('red')"
    },
    {
        "number": 4386,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        return stdin\n    else:\n        return \"red\""
    },
    {
        "number": 4386,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        return stdin\n    return \"red\""
    },
    {
        "number": 4386,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        return stdin\n    return'red'"
    },
    {
        "number": 4387,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    if T < 1200:\n        return \"ABC\"\n    if T < 2800:\n        return \"ARC\"\n    return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    if rating < 1200:\n        return 'ABC'\n    elif rating < 2800:\n        return 'ARC'\n    else:\n        return 'AGC'"
    },
    {
        "number": 4387,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(ABC)\n\"\"\"\nimport sys\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef"
    },
    {
        "number": 4387,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # The input is a single integer.\n    r = int(stdin)\n\n    if r < 1200:\n        return 'ABC'\n\n    if r < 2800:\n        return 'ARC'\n\n    return 'AGC'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4387,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r < 1200:\n        return \"ABC\"\n    elif r < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4387,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    Takahashi_rating = int(stdin)\n    contests_under_1200 = [1200, 1200+100, 1200+200, 1200+300, 1200+400, 1200+500, 1200+600, 1200+700, 1200+800, 1200+900, 1200+1000]\n    contests_under_2800 = [2800, 2800+100, 2800+200, 2800+300, 2800+400, 2800+500, 2800+600, 2800+700, 2800+800, 2800+900, 2800+1000]\n    if Takahashi_rating < 1200:\n        return \"ABC\"\n    elif Takahashi_rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4387,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    if rating >= 2800:\n        return \"AGC\"\n    if rating >= 1200:\n        return \"ARC\"\n    return \"ABC\""
    },
    {
        "number": 4387,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.split('\\n')[0])\n    result = ''\n    if R <= 1200:\n        result = 'ABC'\n    elif R <= 2800:\n        result = 'ARC'\n    else:\n        result = 'AGC'\n    return result"
    },
    {
        "number": 4387,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r < 1200:\n        return \"ABC\"\n    if r < 2800:\n        return \"ARC\"\n    return \"AGC\""
    },
    {
        "number": 4388,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 4388,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = int(s)\n    a = (s % 10)\n    b = (s // 10) % 10\n    c = (s // 100) % 10\n    if (a == 1):\n        a = 9\n    if (b == 1):\n        b = 9\n    if (c == 1):\n        c = 9\n    s = s // 100\n    s = s // 10\n    s = s % 10\n    s = s * 100\n    s = s // 10\n    s = s + a\n    s = s * 10\n    s = s + b\n    s = s * 10\n    s = s + c\n    print(s)"
    },
    {
        "number": 4388,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return ''.join(list(str(int(n.replace('1', '9')))))\n\nassert(solution('') == '')\nassert(solution('1') == '9')\nassert(solution('119') == '991')\nassert(solution('1488') == '2099')\nassert(solution('111') == '909')\nassert(solution('999') == '9989')\nassert(solution('11100001') == '111001')\nassert(solution('11111111') == '990000')\n"
    },
    {
        "number": 4388,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    res = int(stdin)\n    res = str(res)\n    for i in range(0, len(res)):\n        if res[i] == '1':\n            res = res[:i] + '9' + res[i+1:]\n    return res"
    },
    {
        "number": 4388,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    new = s.replace(\"1\", \"9\", 1)\n    new = new.replace(\"9\", \"1\", 1)\n    return new\n"
    },
    {
        "number": 4388,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the solution of the problem\n    @stdin: the input string\n    '''\n    return stdin.replace('1', '9')\n\nassert(solution('119') == '991')\nassert(solution('100') == '1000')\nassert(solution('959') == '9999')\nassert(solution('101') == '10001')\nassert(solution('999') == '999999')\nassert(solution('0') == '0')\nassert(solution('9') == '9')\nassert(solution('9') == '9')\nassert(solution('1') == '1')\nassert(solution('2') == '2')\nassert(solution('3') == '3')\nassert(solution('4') == '4')\nassert(solution('5') == '5')\nassert(solution('6') == '6')\nassert(solution('7') == '7')\nassert(solution('8') == '8')\nassert(solution('9') == '9')"
    },
    {
        "number": 4388,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    s1 = \"\".join(str(int(n[i]) ^ 1) for i in range(3))\n    s2 = \"\".join(str(int(n[i]) ^ 9) for i in range(3))\n    return s1 + s2"
    },
    {
        "number": 4388,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[2] + stdin[1] + stdin[0]\n    return int(n.replace(\"1\", \"9\").replace(\"9\", \"1\"))"
    },
    {
        "number": 4388,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(''.join(['9' if i == '1' else '1' for i in str(n)])))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4388,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + int(stdin) % 10 * 10 + int(stdin) % 100 // 10 * 100)"
    },
    {
        "number": 4389,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4389,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4389,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4389,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4389,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        b = stdin.readline().strip()\n        a = \"\".join(sorted(b[2::2])) + b[1::2]\n        print(a)\n    return \"\""
    },
    {
        "number": 4389,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nassert solution('abbaac') == 'abac'\nassert solution('ac') == 'ac'\nassert solution('bccddaaf') == 'bcdaf'\nassert solution('zzzzzzzzzz') == 'zzzzzzzzzz'\n\n\n\n\n\"\"\"\nfrom itertools import combinations\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return..."
    },
    {
        "number": 4389,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4389,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    m = len(s)\n    n = m % 2\n    if n!= 0:\n        return s[:m - n]\n    else:\n        return s\n"
    },
    {
        "number": 4390,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        a, b = stdin.split()\n        print(int(a) // int(b))\n    return \"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(0, t):\n        a, b = stdin.readline().strip().split(' ')\n        print(solution(a, b))"
    },
    {
        "number": 4390,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline())\n    for _ in range(num_cases):\n        a, b = map(int, stdin.readline().split())\n        print(a % b)\n"
    },
    {
        "number": 4390,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().split())\n        m = 0\n        while a % b!= 0:\n            m += 1\n            a += 1\n        print(m)\n"
    },
    {
        "number": 4390,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    print(a % b)\n"
    },
    {
        "number": 4390,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4390,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4390,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    return '\\n'.join(map(str, nums))"
    },
    {
        "number": 4390,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        a, b = [int(x) for x in stdin.readline().split()]\n        if b == 0:\n            print(0)\n        elif a % b == 0:\n            print(0)\n        else:\n            print(a // b + 1)\n    return stdin"
    },
    {
        "number": 4390,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = {}\n    for i in range(1, 10):\n        d[i] = 0\n    for j in range(n):\n        a, b = map(int, stdin.split())\n        i = 0\n        while not (a % b) == 0:\n            a = a + 1\n            i += 1\n        d[b] += i\n    res = []\n    for i in range(1, 10):\n        res.append(str(d[i]))\n    return '\\n'.join(res)\n"
    },
    {
        "number": 4391,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_n, input_k = map(int, stdin.split())\n    input_numbers = list(map(int, stdin.split()))\n\n    avg_value = sum(input_numbers[:input_k]) / input_k\n\n    return str(max([avg_value] + [temp_avg_value for temp_avg_value in input_numbers[input_k - 1:] if abs(avg_value - temp_avg_value) < 1e-6]))\n\nprint(solution(input()))"
    },
    {
        "number": 4391,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.readline().split()]\n    a = [int(x) for x in stdin.readline().split()]\n\n    res = 0\n    for i in range(n - k + 1):\n        res = max(res, sum(a[i:i + k]) / k)\n\n    return str(res)\n\nprint(solution('input.txt'))\n\"\"\"\n\n__author__ = 'v.shabalin'\n\ndef"
    },
    {
        "number": 4391,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    temperatures = [int(x) for x in stdin.split()]\n\n    heat_intensity = []\n    for i in range(n - k + 1):\n        heat_intensity.append(sum(temperatures[i: i + k]) / k)\n    return str(max(heat_intensity))\n"
    },
    {
        "number": 4391,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n\n    res = 0.0\n    for i in range(n - k + 1):\n        res = max(res, sum(a[i:i + k]) / k)\n    return str(res)\n\nassert solution(stdin) == '2.666666666666667'\n"
    },
    {
        "number": 4391,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = map(int, lines[0].split())\n    temperatures = map(int, lines[1].split())\n    heat_intensity = heat_intensity_value(temperatures, k)\n    return heat_intensity\n\ndef"
    },
    {
        "number": 4391,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n    res = float('-inf')\n    for i in range(n - k + 1):\n        avg = sum(a[i:i + k]) / k\n        if avg > res:\n            res = avg\n    return str(res)"
    },
    {
        "number": 4391,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(' ')\n    n = int(stdin[0])\n    k = int(stdin[1])\n\n    stdin = stdin[2:]\n    stdin = [float(num) for num in stdin]\n    \n    max_sum = 0\n    for i in range(n):\n        temp_sum = sum(stdin[i:i+k])/k\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    \n    return str(max_sum)\n\nassert (solution('''3 4 1 2''')) == '2.666666666666667'\nassert (solution('''1 2 3 4''')) == '2.0'\nassert (solution('''10 5 2''')) == '10.0'\nassert (solution('''1 5 2 3 4''')) == '3.0'\nassert (solution('''100 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31''')) == '0.81414'\nassert (solution('''3 4 2 4 2 4 3''')) == '0.5'\nassert (solution('''7 2 2 7 2 7 2 7''')) == '0.125'\nassert (solution('''1 5 1 5 1 5 1 5''')) == '1.0'\nassert (solution('''1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31''')) == '0.96'\n"
    },
    {
        "number": 4391,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    s = [a[i: i + n] for i in range(0, n, n - k + 1)]\n\n    res = s[0]\n    for a in s:\n        res = max(res, a)\n\n    return f'{res:.6f}'\n\nassert(solution(stdin) == stdin)\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4391,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, n = tuple(map(int, stdin.readline().split()))\n    temperatures = list(map(float, stdin.readline().split()))\n\n    intervals = []\n    for i in range(n - k + 1):\n        intervals.append((temperatures[i], temperatures[i + k - 1]))\n\n    heat_intensity = max([(intervals[i][1] - intervals[i][0]) for i in range(len(intervals))])\n    return str(heat_intensity)\n\nassert solution(stdin_ = StringIO('''4 3\n3 4 1 2\n''')) == '2.666666666666667'\n\nassert solution(stdin_ = StringIO('''5 4\n1 2 3 4 5\n''')) == '2.5'\n"
    },
    {
        "number": 4391,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    m = len(stdin.readline().split())\n    m_days = list(map(int, stdin.readline().split()))\n\n    m_sum = 0\n    m_days_cnt = 0\n    for i in range(len(m_days)):\n        m_sum += m_days[i]\n        m_days_cnt += 1\n        if m_days_cnt == k:\n            m_sum -= m_days[i-k+1]\n            m_days_cnt -= 1\n        elif m_days_cnt == n - k + 1:\n            m_days_cnt -= 1\n    m_avg = m_sum / (n - k + 1)\n    return str(max(m_avg, m_avg + 0.0000000001))\n\nassert(solution('''4 3\n3 4 1 2''') == \"2.666666666666667\")\nassert(solution('''4 3\n4 4 4 3''') == \"2.666666666666667\")\nassert(solution('''1 1\n1''') == \"0.5\")\nassert(solution('''4 5\n5 5 5 5''') == \"2.0\")\nassert(solution('''1 2\n1''') == \"0.5\")\nassert(solution('''2 3\n1 2 3''') == \"1.25\")\nassert(solution('''3 4\n1 2 3 4''') == \"0.5\")\nassert(solution('''3 4\n1 2 3 4''') == \"0.5\")\nassert(solution('''5 3\n2 3 4 5 6''') == \"1.5\")\nassert(solution('''4 3\n3 4 1 2''') == \"2.666666666666667\")\nassert(solution('''5 2\n2 3 4 5''') == \"3.0\")\nassert(solution('''5 4\n2 3 4 5 6''') == \"3.0\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''5 3\n1 2 3 4 5''') == \"3.0\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1 2''') == \"0.5\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1 2''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \"1.25\")\nassert(solution('''3 2\n1''') == \"0.5\")\nassert(solution('''4 3\n1 2 3 4''') == \""
    },
    {
        "number": 4392,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split(' '))\n        a = list(map(int, stdin.readline().strip().split(' ')))\n        p = list(map(int, stdin.readline().strip().split(' ')))\n\n        if isSorted(a, p):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4392,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_sorted(a: list) -> bool:\n        for i in range(1, len(a)):\n            if a[i] < a[i - 1]:\n                return False\n        return True\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        ps = set(map(int, stdin.readline().split()))\n        if is_sorted(a) and ps:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4392,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(1, t + 1):\n        n, m = [int(s) for s in stdin.readline().strip().split(' ')]\n        a = [int(s) for s in stdin.readline().strip().split(' ')]\n        p = [int(s) for s in stdin.readline().strip().split(' ')]\n        if can_sort(n, m, a, p):\n            print('YES')\n        else:\n            print('NO')\n    return\n\ndef"
    },
    {
        "number": 4392,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # assert 3 == 3\n    # assert 2 == 2\n    # assert 1 == 1\n    # assert 4 == 4\n    # assert 2 == 2\n    # assert 3 == 3\n    # assert 4 == 4\n    # assert 1 == 1\n    # assert 4 == 4\n    # assert 2 == 2\n    # assert 1 == 1\n    # assert 5 == 5\n    # assert 2 == 2\n    # assert 3 == 3\n    # assert 2 == 2\n    # assert 4 == 4\n    # assert 3 == 3\n    # assert 2 == 2\n    # assert 4 == 4\n    # assert 3 == 3\n    # assert 3 == 3\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 3 == 3\n    # assert 1 == 1\n    # assert 4 == 4\n    # assert 2 == 2\n    # assert 2 == 2\n    # assert 4 == 4\n    # assert 3 == 3\n    # assert 4 == 4\n    # assert 3 == 3\n    # assert 4 == 4\n    # assert 2 == 2\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 == 1\n    # assert 1 =="
    },
    {
        "number": 4392,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_max(a: list, p: list, max_index: int) -> int:\n        if max_index < 0:\n            return -1\n        if a[max_index] > a[max_index + 1]:\n            return max_index\n        return find_max(a, p, max_index - 1)\n\n    def swap_elements(a: list, i: int, j: int) -> None:\n        a[i], a[j] = a[j], a[i]\n\n    def is_sorted(a: list) -> bool:\n        if len(a) == 0:\n            return True\n        return a[0] <= a[1] and is_sorted(a[1:])\n\n    def rearrange(a: list, p: list) -> list:\n        if len(a) == 0:\n            return a\n        max_index = find_max(a, p, len(a) - 1)\n        if max_index < 0:\n            return a\n        if a[max_index] < a[0]:\n            swap_elements(a, 0, max_index)\n        return rearrange(a[1:], p)\n\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        p = list(map(int, stdin.readline().strip().split()))\n        a = rearrange(a, p)\n        if is_sorted(a):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4392,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline().strip())\n    for _ in range(num_cases):\n        n, m = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        p = list(map(int, stdin.readline().split()))\n        p.sort()\n        i = 0\n        while i < m:\n            if p[i] > a[i]:\n                break\n            a[p[i]], a[p[i] + 1] = a[p[i] + 1], a[p[i]]\n            i += 1\n        if i == m:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4392,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(1, t + 1):\n        n, m = map(int, stdin.readline().strip().split(' '))\n        a = list(map(int, stdin.readline().strip().split(' ')))\n        p = list(map(int, stdin.readline().strip().split(' ')))\n        s = set(p)\n        curr_a = a[:]\n        curr_p = p[:]\n        curr_i = 0\n        curr_s = len(s)\n        while curr_i < n and curr_s > 1:\n            curr_a[p[curr_i]] = a[p[curr_i] + 1]\n            curr_a[p[curr_i] + 1] = a[p[curr_i]]\n            curr_i += 1\n            curr_s -= 1\n        if curr_s == 1:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4392,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4392,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, m = [int(x) for x in stdin.split()]\n        a = [int(x) for x in stdin.split()[1:n + 1]]\n        p = [int(x) for x in stdin.split()[n + 1:n + m + 1]]\n        sorted_a = sorted(a)\n        for i in p:\n            if a[i - 1] >= a[i]:\n                print('NO')\n                break\n        else:\n            print('YES')\n"
    },
    {
        "number": 4393,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n    i = 0\n    while i < n:\n        if t[i] == '0':\n            t = t[:i] + 'a' + t[i+1:]\n            i += 2\n        else:\n            t = t[:i] + '0' + t[i+1:]\n            i += 1\n    return t"
    },
    {
        "number": 4393,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    string = stdin.readline().strip()\n    return decryption(length, string)\n\ndef"
    },
    {
        "number": 4393,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"\n\n_input = \"\"\"\n6\nbaabbb\n\n7\nooopppssss\n\n8\noooooo\n\"\"\"\n\nprint(solution(_input))\n"
    },
    {
        "number": 4393,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip()\n    n = int(stdin)\n    s = \"\"\n    for i in range(1, n+1):\n        s += \"1\" * i + \"0\" * (n - i)\n    return s[:n]"
    },
    {
        "number": 4393,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n    ans = ''\n    for i in range(n):\n        ans += t[i] * (n - i)\n    return ans"
    },
    {
        "number": 4393,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    result = []\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            result.append(s[:i])\n            result.append(s[:i] * 2)\n            result.append(s[:i] * 3)\n            s = s[i:]\n            n = n // i - i\n            i = 1\n        else:\n            i += 1\n    if s:\n        result.append(s)\n    return \"\".join(result)\n"
    },
    {
        "number": 4393,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0] * (n // 2) + stdin[0] * ((n % 2) + 1)\n    return s"
    },
    {
        "number": 4393,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n    t = t[::-1]\n    s = \"\"\n    for _ in range(n):\n        s += \"\".join(\"1\" if t[i] == \"0\" else \"0\" for i in range(n))\n        t = t[1:] + t[:1]\n    return s[::-1]"
    },
    {
        "number": 4393,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = stdin.readline().strip()\n    s = ''\n    for i in range(1, n + 1):\n        s += 'a' * i\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            s += t[i - j]\n    return s"
    },
    {
        "number": 4393,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline())\n    t = stdin.readline()\n    res = \"\"\n    for i in range(m):\n        n = stdin.readline()\n        c = t[i]\n        while c in n:\n            n = n[1:]+n[0]\n        res += n\n    return res"
    },
    {
        "number": 4394,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_nodes, number_of_edges = map(int, stdin.split(' '))\n    edges = [map(int, stdin.split(' ')) for _ in range(number_of_edges)]\n    graph = Graph()\n    for u, v, w in edges:\n        graph.add_edge(u, v, w)\n\n    edges_to_remove = [0] * number_of_nodes\n    edges_to_add = [0] * number_of_nodes\n    return str(graph.minimum_cost_unification_of_mst(edges_to_remove, edges_to_add))\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    edges = {tuple(int(x) for x in stdin.strip().split(' ')) for _ in range(m)}\n    return str(get_min_ops(n, edges))\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [map(int, stdin.split()) for _ in range(m)]\n    edges = sorted(edges, key=lambda e: (e[0], e[1]))\n    _, x, _ = set(map(lambda e: e[0], edges)), set(map(lambda e: e[1], edges)), set(map(lambda e: e[1], edges))\n    if x!= x.union(set(range(1, n + 1))):\n        return 0\n    mst_cost = sum(map(lambda e: e[2], edges))\n    MST = [e for e in edges if e[0] not in x and e[1] not in x]\n    for edge in MST:\n        mst_cost += edge[2]\n    while mst_cost!= 0:\n        for i in range(len(edges)):\n            if edges[i][0] not in x and edges[i][1] not in x:\n                mst_cost -= edges[i][2]\n                edges[i][2] += 1\n                if mst_cost == 0:\n                    break\n    return len(MST)\n    \n    \nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(stdin), 2)"
    },
    {
        "number": 4394,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [map(int, stdin.split()) for _ in range(m)]\n    mst = prim(n, edges)\n    cost = sum(e[2] for e in mst)\n    return str(cost - mst[0][2])\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    edges = [tuple(int(x) for x in stdin.strip().split()) for _ in range(m)]\n    V = set()\n    for u, v, w in edges:\n        V.update([u, v])\n    V = list(sorted(V))\n    n = len(V)\n    E = [[] for _ in range(n)]\n    for u, v, w in edges:\n        E[u - 1].append((v - 1, w))\n        E[v - 1].append((u - 1, w))\n    MST = []\n    # minimum spanning tree - minimum cost\n    c = 0\n    for u in V:\n        MST.append((u, 0))\n    while len(MST) < n:\n        i, j = 0, 0\n        while i < len(MST) and j < len(E[MST[i][0]]):\n            if E[MST[i][0]][j][1] < MST[i][1]:\n                i += 1\n            elif E[MST[i][0]][j][1] > MST[i][1]:\n                j += 1\n            else:\n                MST.insert(i, E[MST[i][0]][j])\n                c += 1\n                j += 1\n        if i < len(MST):\n            if j < len(E[MST[i][0]]):\n                MST.insert(i, E[MST[i][0]][j])\n                c += 1\n        else:\n            if j < len(E[MST[0][0]]):\n                MST.insert(0, E[MST[0][0]][j])\n                c += 1\n    print(c)\n    return '\\n'.join([str(x + 1) for x in MST])"
    },
    {
        "number": 4394,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    edges = [sorted([int(i) for i in stdin.split()]) for _ in range(m)]\n    distances = {}\n    for edge in edges:\n        u, v, w = edge\n        distances[(u, v)] = w\n        distances[(v, u)] = w\n    tree_edges = {i for i in range(1, n + 1)}\n    tree_edges.remove(n)\n    tree_edges.remove(1)\n    while tree_edges:\n        vertex = tree_edges.pop()\n        distance = 0\n        for u, v in edges:\n            if vertex in (u, v):\n                distance += 1\n                continue\n            if vertex in (u, v):\n                distance += 2\n        if distance not in distances:\n            continue\n        weight = distances[distance]\n        for u, v in edges:\n            if vertex in (u, v):\n                continue\n            if vertex in (u, v):\n                tree_edges.add(u)\n                tree_edges.add(v)\n                break\n            if u == vertex:\n                tree_edges.add(v)\n                break\n            elif v == vertex:\n                tree_edges.add(u)\n                break\n    return str(len(tree_edges))\n"
    },
    {
        "number": 4394,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    edges = [tuple([int(x) for x in stdin.strip().split(' ')]) for _ in range(m)]\n    graph = defaultdict(list)\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    mst_cost = 0\n    visited = set()\n    for i in range(n):\n        if i not in visited:\n            mst_cost, visited = get_min_cost(graph, visited, n, i, mst_cost)\n    return str(mst_cost)\n\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert(solution(stdin) == expected)\n\"\"\"\n\nfrom sys import stdin\nfrom math import inf\n\nn, m = [int(x) for x in stdin.readline().split()]\ngraph = [[] for _ in range(n)]\n\nfor _ in range(m):\n    u, v, w = [int(x) for x in stdin.readline().split()]\n    graph[u].append((v, w))\n    graph[v].append((u, w))\n\ntotal_weight = 0\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    edges = [map(int, stdin.strip().split()) for _ in range(m)]\n\n    for edge in edges:\n        edge[2] -= 1\n\n    edges.sort(key = lambda x: x[2])\n    edges.sort(key = lambda x: x[1])\n\n    cost = 0\n    nodes = set()\n\n    for edge in edges:\n        u, v = edge[0], edge[1]\n        if u not in nodes and v not in nodes:\n            nodes.add(u)\n            nodes.add(v)\n            cost += edge[2]\n        elif u in nodes and v not in nodes:\n            nodes.add(v)\n            cost += edge[2]\n        elif u not in nodes and v in nodes:\n            nodes.add(u)\n            cost += edge[2]\n    return cost\n    \n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    edges = [[int(x) for x in stdin.strip().split()] for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for u, v, w in edges:\n        graph[u - 1].append((v - 1, w))\n        graph[v - 1].append((u - 1, w))\n\n    def solve(edges, visited):\n        nonlocal graph, n\n        if not edges:\n            return 0\n\n        mst, count = [], 0\n\n        while edges:\n            edge = edges.pop()\n            if edge[0] not in visited:\n                visited.add(edge[0])\n                mst.append(edge)\n                count += 1\n\n                for v, w in graph[edge[0]]:\n                    edges.append((v, w, edge[2] + 1))\n\n        return count\n\n    min_count = n * m\n    for i in range(1, n):\n        visited = set()\n        min_count = min(min_count, solve(graph[i - 1], visited))\n\n    return str(min_count)\n\nassert solution(\"\"\"8 10\n1 2 1\n2 3 2\n2 4 5\n1 4 2\n6 3 3\n6 1 3\n3 5 2\n3 7 1\n4 8 1\n6 2 4\"\"\") == \"1\"\nassert solution(\"\"\"4 3\n2 1 3\n4 3 4\n2 4 1\n\"\"\") == \"0\"\nassert solution(\"\"\"3 3\n1 2 1\n2 3 2\n1 3 3\n\"\"\") == \"0\"\nassert solution(\"\"\"3 3\n1 2 1\n2 3 3\n1 3 3\n\"\"\") == \"1\"\nassert solution(\"\"\"1 0\n\"\"\") == \"0\"\nassert solution(\"\"\"5 6\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n\"\"\") == \"2\"\nassert solution(\"\"\"2 0\n\"\"\") == \"0\"\nassert solution(\"\"\"2 0\n1 1\n\"\"\") == \"0\"\nassert solution(\"\"\"2 0\n1 1\n1 1\n\"\"\") == \"1\"\nassert solution(\"\"\"1 0\n\"\"\") == \"0\"\nassert solution(\"\"\"5 5\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n\"\"\") == \"2\"\nassert solution(\"\"\"5 6\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n\"\"\") == \"2\"\nassert solution(\"\"\"5 7\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n1 6 3\n\"\"\") == \"3\"\nassert solution(\"\"\"1 0\n\"\"\") == \"0\"\nassert solution(\"\"\"10 15\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n1 6 3\n1 7 3\n1 8 3\n1 9 3\n1 10 3\n1 11 3\n1 12 3\n1 13 3\n1 14 3\n1 15 3\n\"\"\") == \"2\"\nassert solution(\"\"\"10 15\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n1 6 3\n1 7 3\n1 8 3\n1 9 3\n1 10 3\n1 11 3\n1 12 3\n1 13 3\n1 14 3\n1 15 3\n1 16 3\n1 17 3\n1 18 3\n1 19 3\n1 20 3\n\"\"\") == \"3\"\nassert solution(\"\"\"10 15\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n1 6 3\n1 7 3\n1 8 3\n1 9 3\n1 10 3\n1 11 3\n1 12 3\n1 13 3\n1 14 3\n1 15 3\n1 16 3\n1 17 3\n1 18 3\n1 19 3\n1 20 3\n1 21 3\n1 22 3\n1 23 3\n1 24 3\n1 25 3\n1 26 3\n1 27 3\n1 28 3\n1 29 3\n1 30 3\n1 31 3\n1 32 3\n1 33 3\n1 34 3\n1 35 3\n1 36 3\n1 37 3\n1 38 3\n1 39 3\n1 40 3\n\"\"\") == \"3\"\nassert solution(\"\"\"10 15\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n1 6 3\n1 7 3\n1 8 3\n1 9 3\n1 10 3\n1 11 3\n1 12 3\n1 13 3\n1 14 3\n1 15 3\n1 16 3\n1 17 3\n1 18 3\n1 19 3\n1 20 3\n1 21 3\n1 22 3\n1 23 3\n1"
    },
    {
        "number": 4395,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lamps = stdin.split(' ')\n    lamps = [int(x) for x in lamps]\n    r = 0\n    for i in lamps:\n        for j in lamps:\n            if i!= j and (abs(i-j) % 3 == 0):\n                r += 1\n    return str(r)\n\n\nassert solution('3') == '1'\nassert solution('3 1 1') == '2'\nassert solution('3 1 2') == '0'\nassert solution('7') == '3'\nassert solution('7 4 7 3') == '0'\nassert solution('10') == '3'\nassert solution('7 4 7 3 3 1') == '3'\nassert solution('7 4 7 3 3 1 3') == '2'\nassert solution('10 4 5 6 7 9 1 2 3 4 5 6 7 8 9 10') == '0'\nassert solution('2 3 2 4 3 3 1 2 2 3 2 3 2 2 3 3') == '5'\nassert solution('2 2 2 3 3 3 4 4 5 5 6 6 6 6 6 6 6') == '8'\nassert solution('4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4') == '0'\nassert solution('4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 4395,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    pass"
    },
    {
        "number": 4395,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    a = Counter(s)\n    ans = 0\n    for i in a:\n        if i == 'R':\n            ans += a['G']\n        elif i == 'G':\n            ans += a['B']\n        else:\n            ans += a['R']\n    if ans % 3!= 0:\n        return ''\n    return ''.join(sorted(s))\n"
    },
    {
        "number": 4395,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    return ''\n\n\nassert solution('') == ''\nassert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('2 ') == '1'\nassert solution('1 ') == '1'\nassert solution('1 2') == '1'\nassert solution('2 3') == '1'\nassert solution('3 2') == '1'\nassert solution('3 2 ') == '1'\nassert solution('1 2 3') == '1'\nassert solution('2 3 1') == '1'\nassert solution('3 1 2') == '1'\nassert solution('2 2 2') == '1'\nassert solution('3 2 3') == '1'\nassert solution('3 3 3') == '1'\nassert solution('3 3 3 ') == '1'\nassert solution('3 3 3 1') == '1'\nassert solution('3 3 3 2') == '1'\nassert solution('3 3 3 2 ') == '1'\nassert solution('2 3 3 3') == '1'\nassert solution('3 3 3 3') == '1'\nassert solution('3 3 3 3 ') == '1'\nassert solution('3 3 3 3 1') == '1'\nassert solution('3 3 3 3 2') == '1'\nassert solution('3 3 3 3 3') == '1'\nassert solution('3 3 3 3 3 ') == '1'\nassert solution('3 3 3 3 3 1') == '1'\nassert solution('3 3 3 3 3 2') == '1'\nassert solution('3 3 3 3 3 3') == '1'\nassert solution('3 3 3 3 3 3 ') == '1'\nassert solution('3 3 3 3 3 3 1') == '1'\nassert solution('2 3 3 3 3 3') == '1'\nassert solution('3 3 3 3 3 3 ') == '1'\nassert solution('3 3 3 3 3 3 1') == '1'\nassert solution('3 3 3 3 3 3 2') == '1'\nassert solution('3 3 3 3 3 3 3') == '1'\nassert solution('3 3 3 3 3 3 3 ') == '1'\nassert solution('3 3 3 3 3 3 3 1') == '1'\nassert solution('2 3 3 3 3 3 3') == '1'\nassert solution('3 3 3 3 3 3 3 ') == '1'\nassert solution('3 3 3 3 3 3 3 1') == '1'\nassert solution('2 3 3 3 3 3 3') == '1'\nassert solution('3 3 3 3 3 3 3 ') == '1'\nassert solution('3 3 3 3 3 3 3 1') == '1'\nassert solution('3 3 3 3 3 3 3 2') == '1'\nassert solution('3 3 3 3 3 3 3 3') == '1'\nassert solution('3 3 3 3 3 3 3 3 ') == '1'\nassert solution('3 3 3 3 3 3 3 3 1') == '1'\nassert solution('1') == '1'\nassert solution('1 1') == '1'\nassert solution('1 1 1') == '1'\nassert solution('1 1 1 1') == '1'\nassert solution('1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1') == '1'\nassert solution('1 1 1 1 1 1 1 1 1 1') == '1'\nassert solution
    },
    {
        "number": 4395,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    s_list = [s[i] for i in range(n)]\n    s_set = set(s_list)\n    for each in s_set:\n        if s_list.count(each) > 1:\n            return -1\n    if 'RB' in s_set:\n        return -1\n    else:\n        return sum([1 for each in s_set if s_list.count(each) == 1])"
    },
    {
        "number": 4395,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    result = n\n    for i in range(n):\n        for j in range(n):\n            if i!= j and abs(i - j) % 3 == 0 and s[i]!= s[j]:\n                result -= 1\n                break\n    return str(result)\n\n\nassert solution(\n    \"3\") == \"1\"\nassert solution(\"BRB\") == \"1\"\nassert solution(\"RGBGRBB\") == \"3\"\nassert solution(\"BBGGRRGGGGBBBBRRGGB\") == \"5\"\nassert solution(\"GBBBBRRRGBRBRRRGBRB\") == \"3\"\n\n\"\"\"\n\nfrom functools import reduce\n\n\ndef"
    },
    {
        "number": 4395,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    p = 0\n    for i in range(n-1):\n        if s[i]!= s[i+1]:\n            p += 1\n    r = n % 3\n    if r == 0:\n        r = 3\n    if r == 1:\n        r = 2\n    if r == 2:\n        r = 1\n    return str(p) + '\\n' + s[:p] + s[p:p+r] + s[p+r:]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4395,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4395,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_nice(color: str) -> bool:\n        return (abs(color.count('R') - color.count('G')) % 3 == 0) and (abs(color.count('G') - color.count('B')) % 3 == 0) and (abs(color.count('B') - color.count('R')) % 3 == 0)\n\n    n = int(stdin)\n    s = stdin[1:-1]\n\n    colors = [x for x in s]\n    count = 0\n\n    for i in range(len(colors)):\n        for j in range(i + 1, len(colors)):\n            if is_nice(colors[i] + colors[j]):\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4395,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n@pytest.mark.parametrize(\n    (\"input\", \"expected\"),\n    (\n        (\"\", None),\n        (\"3\", None),\n        (\"10\", None),\n        (\"12\", None),\n        (\"17\", None),\n        (\"20\", None),\n        (\"30\", None),\n        (\"45\", None),\n        (\"55\", None),\n        (\"100\", None),\n        (\"101\", None),\n        (\"102\", None),\n        (\"103\", None),\n        (\"104\", None),\n        (\"105\", None),\n        (\"106\", None),\n        (\"107\", None),\n        (\"108\", None),\n        (\"109\", None),\n        (\"110\", None),\n        (\"111\", None),\n        (\"112\", None),\n        (\"113\", None),\n        (\"114\", None),\n        (\"115\", None),\n        (\"116\", None),\n        (\"117\", None),\n        (\"118\", None),\n        (\"119\", None),\n        (\"120\", None),\n        (\"121\", None),\n        (\"122\", None),\n        (\"123\", None),\n        (\"124\", None),\n        (\"125\", None),\n        (\"126\", None),\n        (\"127\", None),\n        (\"128\", None),\n        (\"129\", None),\n        (\"130\", None),\n        (\"131\", None),\n        (\"132\", None),\n        (\"133\", None),\n        (\"134\", None),\n        (\"135\", None),\n        (\"136\", None),\n        (\"137\", None),\n        (\"138\", None),\n        (\"139\", None),\n        (\"140\", None),\n        (\"141\", None),\n        (\"142\", None),\n        (\"143\", None),\n        (\"144\", None),\n        (\"145\", None),\n        (\"146\", None),\n        (\"147\", None),\n        (\"148\", None),\n        (\"149\", None),\n        (\"150\", None),\n        (\"151\", None),\n        (\"152\", None),\n        (\"153\", None),\n        (\"154\", None),\n        (\"155\", None),\n        (\"156\", None),\n        (\"157\", None),\n        (\"158\", None),\n        (\"159\", None),\n        (\"160\", None),\n        (\"161\", None),\n        (\"162\", None),\n        (\"163\", None),\n        (\"164\", None),\n        (\"165\", None),\n        (\"166\", None),\n        (\"167\", None),\n        (\"168\", None),\n        (\"169\", None),\n        (\"170\", None),\n        (\"171\", None),\n        (\"172\", None),\n        (\"173\", None),\n        (\"174\", None),\n        (\"175\", None),\n        (\"176\", None),\n        (\"177\", None),\n        (\"178\", None),\n        (\"179\", None),\n        (\"180\", None),\n        (\"181\", None),\n        (\"182\", None),\n        (\"183\", None),\n        (\"184\", None),\n        (\"185\", None),\n        (\"186\", None),\n        (\"187\", None),\n        (\"188\", None),\n        (\"189\", None),\n        (\"190\", None),\n        (\"191\", None),\n        (\"192\", None),\n        (\"193\", None),\n        (\"194\", None),\n        (\"195\", None),\n        (\"196\", None),\n        (\"197\", None),\n        (\"198\", None),\n        (\"199\", None),\n        (\"200\", None),\n        (\"201\", None),\n        (\"202\", None),\n        (\"203\", None),\n        (\"204\", None),\n        (\"205\", None),\n        (\"206\", None),\n        (\"207\", None),\n        (\"208\", None),\n        (\"209\", None),\n        (\"210\", None),\n        (\"211\", None),\n        (\"212\", None),\n        (\"213\", None),\n        (\"214\", None),\n        (\"215\", None),\n        (\"216\", None),\n        (\"217\", None),\n        (\"218\", None),\n        (\"219\", None),\n        (\"220\", None),\n        (\"221\", None),\n        (\"222\", None),\n        (\"223\", None),\n        (\"224\", None),\n        (\"225\", None),\n        (\"226\", None),\n        (\"227\", None),\n        (\"228\", None),\n        (\"229\", None),\n        (\"230\", None),\n        (\"231\", None),\n        (\"232\", None),\n        (\"233\", None),\n        (\"234\", None),\n        (\"235\", None),\n        (\"236\", None),\n        (\"237\", None),\n        (\"238\", None),\n        (\"239\", None),\n        (\"240\", None),\n        (\"241\", None),\n        (\"242\", None),\n        (\"243\", None),\n        (\"244\", None),\n        (\"245\", None),\n        (\"246\", None),\n        (\"247\", None),\n        (\"248\", None),\n        (\"249\", None),\n        (\"250\", None),\n        (\"251\", None),\n        (\"252\", None),\n        (\"253\", None),\n        (\"254\", None),\n        (\"255\", None),\n        (\"256\", None),\n        (\"257\", None),\n        (\"258\", None),\n        (\"259\", None),\n        (\"260\", None),\n        (\"261\", None),\n        (\"262\", None),\n        (\"263\", None),\n        (\"264\", None),\n        (\"265\", None),\n        (\"266\", None),\n        (\"267\", None),\n        (\"268\", None),\n        (\"269\", None),\n        (\"270\", None),\n        (\"271\", None),\n        (\"272\", None),\n        (\"273\", None),\n        (\"274\", None),\n        (\"275\", None),\n        (\"276\", None),\n        (\"277\", None),\n        (\"278\", None),\n        (\"279\", None),\n        (\"280\", None),\n        (\"281\", None),\n        (\"282\", None),\n        (\"283\", None),\n        (\"284\", None),\n        (\"285\", None),\n        (\"286\", None),\n        (\"287\", None),\n        (\"288\", None),\n        (\"289\", None),\n        (\"290\", None),\n        (\"291\", None),\n        (\"292\", None),\n        (\"293\", None),\n        (\"294\", None),\n        (\"295\", None),\n        (\"296\", None),\n        (\"297\", None),\n        (\"298\", None),\n        (\"299\", None),\n        (\"300\", None),\n        (\"301\", None),\n        (\"302\", None),\n        (\"303\", None),\n        (\"304\", None),\n        (\"305\", None),\n        (\"306"
    },
    {
        "number": 4396,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(eval(stdin.splitlines()[0]) * eval(stdin.splitlines()[1])))"
    },
    {
        "number": 4396,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()[1:]))\n    u = stdin.split()[0]\n    if u == \"JPY\":\n        return str(sum(x) * 380000.0)\n    elif u == \"BTC\":\n        return str(sum(x) * 100000000.0)\n    else:\n        raise ValueError(\"unknown unit\")"
    },
    {
        "number": 4396,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4396,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    values = []\n    for line in stdin.splitlines():\n        values.append(line.split())\n    return solve(values)\n\n\ndef"
    },
    {
        "number": 4396,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = [0] * n\n    u = [None] * n\n    for i in range(n):\n        x[i], u[i] = stdin.readline().strip().split()\n        x[i] = float(x[i])\n        if u[i] == 'JPY':\n            x[i] = int(x[i])\n    x = sorted(x)\n    u = sorted(u)\n    def convert(x, u) -> float:\n        if u == 'JPY':\n            return x\n        return x / 380000.0\n\n    def sum(x) -> float:\n        return sum(convert(x_i, u_i) for x_i, u_i in zip(x, u))\n\n    return str(sum(x))\n\nprint(solution(input()))"
    },
    {
        "number": 4396,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.split()\n    N = int(tokens[0])\n    x = [float(tokens[i+1]) for i in range(N)]\n    u = [tokens[i] for i in range(N+1, len(tokens))]\n    return str(int(sum([x[i] * 380000 * 1000 if u[i] == 'JPY' else x[i] * 1000000000 for i in range(N)])))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4396,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x, u = [int(x) for x in stdin.readline().strip().split()]\n    c = sum(int(u) * x for x in stdin.readline().strip().split())\n    print(c * 10000)"
    },
    {
        "number": 4396,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4396,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_value(u: str, x: int) -> float:\n        if u == 'JPY':\n            return x\n        elif u == 'BTC':\n            return x * 0.00000001\n        else:\n            raise ValueError('invalid value for u: {}'.format(u))\n\n    def parse(line: str) -> tuple[int, float]:\n        n, *nums, string = line.strip().split()\n        return int(n), tuple(map(float, nums))\n\n    N, nums = parse(stdin)\n    outputs = []\n    for i in range(N):\n        x, u = nums[i], stdin.readline().strip()\n        outputs.append(get_value(u, x))\n    return sum(outputs)\n\nassert(solution('''2\n10000 JPY\n0.10000000 BTC''') == 48000.0)\nassert(solution('''2\n0.10000000 BTC\n10000 JPY''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY''') == 48000.0)\nassert(solution('''2\n10000 JPY\n0.10000000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n0.10000000 BTC\n0.10000000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n0.10000000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n0.10000000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n0.10000000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n0.10000000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n0.10000000 BTC\n0.10000000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n0.10000000 BTC\n0.10000000 BTC\n0.10000000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n0.10000000 BTC\n0.10000000 BTC\n0.10000000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC''') == 48000.0)\nassert(solution('''2\n10000 JPY\n10000 JPY\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC\n10000 BTC"
    },
    {
        "number": 4396,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Print the gift value of the gift to standard output.\n    \"\"\"\n    N, gift = map(int, stdin.splitlines()[0].split())\n    gift = float(gift)\n    x, y = map(float, stdin.splitlines()[1].split())\n    x_rate = 380000.0 / y\n    ans = gift * x_rate\n    print(int(ans) if int(ans) == ans else int(ans) + 0.5)"
    },
    {
        "number": 4397,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    i = int(stdin.split()[1])\n    for j in range(n, 0, -1):\n        if (j + i) % n == 0:\n            return str(j)"
    },
    {
        "number": 4397,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.split())\n    return str(n - i)"
    },
    {
        "number": 4397,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, i = [int(x) for x in stdin.split()]\n    if N == 1:\n        return 1\n    return i * N - (i - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4397,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, i = [int(x) for x in stdin.split()]\n    return str(n - i + 1)\n\n\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input())) == '3'\nassert(solution(input()))"
    },
    {
        "number": 4397,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    N, i = int(line[0]), int(line[1])\n    if N == 1:\n        return 1\n    elif N == 2:\n        return i\n    elif N == 3:\n        return 2\n    elif N == 4:\n        return 3\n    elif N == 5:\n        return 4\n    elif N == 6:\n        return 5\n    elif N == 7:\n        return 6\n    elif N == 8:\n        return 7\n    elif N == 9:\n        return 8\n    elif N == 10:\n        return 9\n    elif N == 11:\n        return 10\n    elif N == 12:\n        return 11\n    elif N == 13:\n        return 12\n    elif N == 14:\n        return 13\n    elif N == 15:\n        return 14\n    elif N == 16:\n        return 15\n    elif N == 17:\n        return 16\n    elif N == 18:\n        return 17\n    elif N == 19:\n        return 18\n    elif N == 20:\n        return 19\n    elif N == 21:\n        return 20\n    elif N == 22:\n        return 21\n    elif N == 23:\n        return 22\n    elif N == 24:\n        return 23\n    elif N == 25:\n        return 24\n    elif N == 26:\n        return 25\n    elif N == 27:\n        return 26\n    elif N == 28:\n        return 27\n    elif N == 29:\n        return 28\n    elif N == 30:\n        return 29\n    elif N == 31:\n        return 30\n    elif N == 32:\n        return 31\n    elif N == 33:\n        return 32\n    elif N == 34:\n        return 33\n    elif N == 35:\n        return 34\n    elif N == 36:\n        return 35\n    elif N == 37:\n        return 36\n    elif N == 38:\n        return 37\n    elif N == 39:\n        return 38\n    elif N == 40:\n        return 39\n    elif N == 41:\n        return 40\n    elif N == 42:\n        return 41\n    elif N == 43:\n        return 42\n    elif N == 44:\n        return 43\n    elif N == 45:\n        return 44\n    elif N == 46:\n        return 45\n    elif N == 47:\n        return 46\n    elif N == 48:\n        return 47\n    elif N == 49:\n        return 48\n    elif N == 50:\n        return 49\n    elif N == 51:\n        return 50\n    elif N == 52:\n        return 51\n    elif N == 53:\n        return 52\n    elif N == 54:\n        return 53\n    elif N == 55:\n        return 54\n    elif N == 56:\n        return 55\n    elif N == 57:\n        return 56\n    elif N == 58:\n        return 57\n    elif N == 59:\n        return 58\n    elif N == 60:\n        return 59\n    elif N == 61:\n        return 60\n    elif N == 62:\n        return 61\n    elif N == 63:\n        return 62\n    elif N == 64:\n        return 63\n    elif N == 65:\n        return 64\n    elif N == 66:\n        return 65\n    elif N == 67:\n        return 66\n    elif N == 68:\n        return 67\n    elif N == 69:\n        return 68\n    elif N == 70:\n        return 69\n    elif N == 71:\n        return 70\n    elif N == 72:\n        return 71\n    elif N == 73:\n        return 72\n    elif N == 74:\n        return 73\n    elif N == 75:\n        return 74\n    elif N == 76:\n        return 75\n    elif N == 77:\n        return 76\n    elif N == 78:\n        return 77\n    elif N == 79:\n        return 78\n    elif N == 80:\n        return 79\n    elif N == 81:\n        return 80\n    elif N == 82:\n        return 81\n    elif N == 83:\n        return 82\n    elif N == 84:\n        return 83\n    elif N == 85:\n        return 84\n    elif N == 86:\n        return 85\n    elif N == 87:\n        return 86\n    elif N == 88:\n        return 87\n    elif N == 89:\n        return 88\n    elif N == 90:\n        return 89\n    elif N == 91:\n        return 90\n    elif N == 92:\n        return 91\n    elif N == 93:\n        return 92\n    elif N == 94:\n        return 93\n    elif N == 95:\n        return 94\n    elif N == 96:\n        return 95\n    elif N == 97:\n        return 96\n    elif N == 98:\n        return 97\n    elif N == 99:\n        return 98\n    elif N == 100:\n        return 99\n    elif N == 101:\n        return 100\n    elif N == 102:\n        return 101\n    elif N == 103:\n        return 102\n    elif N == 104:\n        return 103\n    elif N == 105:\n        return 104\n    elif N == 106:\n        return 105\n    elif N == 107:\n        return 106\n    elif N == 108:\n        return 107\n    elif N == 109:\n        return 108\n    elif N == 110:\n        return 109\n    elif N == 111:\n        return 110\n    elif N == 112:\n        return 111\n    elif N == 113:\n        return 112\n    elif N == 114:\n        return 113\n    elif N == 115:\n        return 114\n    elif N == 116:\n        return 115\n    elif N == 117:\n        return 116\n    elif N == 118:\n        return 117\n    elif N == 119:\n        return 118\n    elif N == 120:\n        return 119\n    elif N == 121:\n        return 120\n    elif N == 122:\n        return 121\n    elif N == 123:\n        return 122\n    elif N == 124:\n        return 123\n    elif N == 125:\n        return 124\n    elif N == 126:\n        return 125\n    elif N == 127:\n        return 126\n    elif N == 128:\n        return 127\n    elif N == 129:\n        return 128\n    elif N == 130:\n        return 129\n    elif N == 131:\n        return 130\n    elif N == 132:\n        return 131\n    elif N == 133:\n        return 132\n    elif N == 134:\n        return 133\n    elif N == 135:\n        return 134\n    elif N == 136:\n        return 135\n    elif N == 137:\n        return 136\n    elif N == 138:\n        return 137\n    elif N == 139:\n        return 138\n    elif N == 140:\n        return 139\n    elif N == 141:\n        return 140\n    elif N == 142:\n        return 141\n    elif N == 143:\n        return 142\n    elif N == 144:\n        return 143\n    elif N == 145:\n        return 144\n    elif N == 146:\n        return 145\n    elif N == 147:\n        return 146\n    elif N == 148:\n        return 147\n    elif N == 149:\n        return 148\n    elif N == 150:\n        return 149\n    elif N == 151:\n        return 150\n    elif N == 152:\n        return 151\n    elif N == 153:\n        return 152\n    elif N == 154:\n        return 153\n    elif N == 155:\n        return 154\n"
    },
    {
        "number": 4397,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, i = list(map(int, stdin.split()))\n    return str(n - i + 1)"
    },
    {
        "number": 4397,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of cars on the back\n    '''\n    # get the number of cars and the starting number\n    N, i = map(int, stdin.split())\n\n    # we know the index of the ith car from the front\n    # is the same as the index of the ith car from the back\n    # hence we know the answer is the same as i - 1\n    return str(i - 1)\n\nassert(solution(input('Number of cars and starting number:\\n')) == input('Input:\\n'))\n"
    },
    {
        "number": 4397,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, i = [int(x) for x in stdin.split(' ')]\n    \n    return str(N - i + 1)"
    },
    {
        "number": 4397,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_cars = int(stdin.split()[0])\n    i = int(stdin.split()[1])\n    return str(num_cars - i + 1)"
    },
    {
        "number": 4397,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, i = stdin.split(\" \")\n    N, i = int(N), int(i)\n    print(N - i)"
    },
    {
        "number": 4398,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    return stdin"
    },
    {
        "number": 4398,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.rstrip().split('\\n')\n    N = int(lines[0])\n    S, T = lines[1].split()\n    result = ['' for _ in range(2 * N)]\n\n    for i in range(N):\n        result[i] = S[i]\n        result[i + N] = T[i]\n\n    return ''.join(result)"
    },
    {
        "number": 4398,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    s, t = stdin.readline().split(' ')\n    s, t = list(s), list(t)\n    for i in range(int(n)):\n        s.append(t.pop(0))\n        t.append(s.pop(0))\n    return ''.join(s + t)"
    },
    {
        "number": 4398,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    return \"\".join([x + y for x, y in zip(s, t)])"
    },
    {
        "number": 4398,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin.strip().split()\n    t = list(s[1])\n    n = len(s[0])\n    for i in range(n):\n        print(s[0][i] + t[i], end=\"\")\n    \n"
    },
    {
        "number": 4398,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution is based on the observations of the problem statement.\n    1. The length of both strings is the same.\n    2. The length of both strings is same as 2.\n    3. The two strings are not the same length.\n    '''\n    num = stdin.rstrip().split(' ')[0]\n    str_1, str_2 = stdin.rstrip().split(' ')[1].split('\\n')\n    new_str = ''\n    for i in range(int(num)):\n        new_str += str_1[i] + str_2[i]\n    print(new_str)"
    },
    {
        "number": 4398,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4398,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given two strings s and t of equal length.\n    You have to print the characters of t in reverse order,\n    and in the same order as they are present in s.\n    \"\"\"\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    s_list = list(s)\n    t_list = list(t)\n    t_list.reverse()\n    new_list = []\n\n    for i in range(int(n)):\n        new_list.append(s_list[i])\n        new_list.append(t_list[i])\n\n    return ''.join(new_list)"
    },
    {
        "number": 4398,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s, t = stdin.readline().split()\n    res = \"\"\n    for i in range(n):\n        res += s[i] + t[i]\n    print(res)"
    },
    {
        "number": 4398,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str()"
    },
    {
        "number": 4399,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(set(stdin)) == 1 else \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0] == s[1] == s[2] == \"A\":\n        return \"Yes\"\n    return \"No\"\n\nassert(solution(\"ABA\")) == \"Yes\"\nassert(solution(\"AAB\")) == \"No\"\nassert(solution(\"ABB\")) == \"Yes\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4399,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Read the string.\n    s = stdin.strip()\n\n    # Count the number of A and B in the string.\n    a = s.count('A')\n    b = s.count('B')\n\n    # If the number of A and B is an odd number, then the string is not valid.\n    if a % 2 == 1 or b % 2 == 1:\n        return \"No\"\n\n    # Otherwise, if the number of A and B is even, there is a valid pair of stations.\n    else:\n        return \"Yes\""
    },
    {
        "number": 4399,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    a = s[0]\n    b = s[2]\n    if a!= b:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if \"AB\" in stdin and stdin.count(\"AB\") == 2 else \"No\")"
    },
    {
        "number": 4399,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4399,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_connected(stdin) else 'No'\n\ndef"
    },
    {
        "number": 4399,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4399,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin.strip()\n    if s[0] == s[1] == s[2]:\n        return \"No\"\n\n    if s[0] == s[1] or s[1] == s[2] or s[0] == s[2]:\n        return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4400,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return '2'"
    },
    {
        "number": 4400,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    \n    if not stdin:\n        raise ValueError\n    \n    r = [stdin[0]]\n    \n    for i in range(1, len(stdin)):\n        if stdin[i] == stdin[i-1]:\n            r.append(stdin[i])\n        elif stdin[i] == 'S':\n            r.append(stdin[i])\n        else:\n            if len(r) > 1:\n                print(len(r))\n            r = [stdin[i]]\n    \n    if len(r) > 1:\n        print(len(r))\n        \n    return ''\n\nprint(solution(stdin))"
    },
    {
        "number": 4400,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    s = stdin.strip()\n    if len(s)!= 3:\n        return None\n    # find consecutive\n    consecutive = 1\n    # rain\n    rain = False\n    for c in s:\n        if c == \"R\":\n            rain = True\n        else:\n            if rain:\n                consecutive += 1\n                rain = False\n    return consecutive"
    },
    {
        "number": 4400,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(['2'] if x == 'R' else ['1'] for x in stdin)"
    },
    {
        "number": 4400,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    max_consecutive_rain = 0\n    rain_count = 0\n    for c in stdin:\n        if c == 'S':\n            max_consecutive_rain += 1\n            rain_count = 0\n        else:\n            rain_count += 1\n            max_consecutive_rain = max(max_consecutive_rain, rain_count)\n    return str(max_consecutive_rain)\n"
    },
    {
        "number": 4400,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum number of consecutive rainy days in this period.\n\n    >>> solution('RRR')\n    2\n    >>> solution('RSR')\n    1\n    \"\"\"\n    s = stdin.replace('R', 'S').replace('S', 'R')\n    if s == stdin:\n        return 0\n    return max(len(s.split('S')) - 1, len(s.split('S')) - 2)"
    },
    {
        "number": 4400,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s: List[str] = stdin.strip().split(\" \")\n    prev_sunny = False\n    sunny = 0\n    prev_rainy = False\n    rainy = 0\n    for i in range(len(s)):\n        if s[i] == \"S\":\n            if not prev_sunny:\n                sunny += 1\n            else:\n                rainy += 1\n            prev_sunny = True\n            prev_rainy = False\n        else:\n            if prev_sunny:\n                sunny += 1\n                prev_sunny = False\n            else:\n                if not prev_rainy:\n                    rainy += 1\n                    prev_rainy = True\n    return str(max(rainy, sunny))\n\n\ndef"
    },
    {
        "number": 4400,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4400,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4400,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    max_rain_days = 0\n    rain_count = 0\n    for i in range(0, len(stdin)):\n        if stdin[i] == 'S':\n            rain_count += 1\n        else:\n            if rain_count > max_rain_days:\n                max_rain_days = rain_count\n            rain_count = 0\n    return max_rain_days\n\nassert(solution('RSRS') == 2)\nassert(solution('RRRR') == 4)\nassert(solution('RRSRSRSRS') == 0)\nassert(solution('RSRSRSRSRSR') == 3)\n\n-----My Analysis-----\nSince we know that the number of consecutive rainy days is at most 2, we can simply run a while loop to check for the max rain days.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4401,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(' ')\n    x, y, z = int(lines[0]), int(lines[1]), int(lines[2])\n    print(x, y, z)\n    if x > y:\n        x, y = y, x\n    if x > z:\n        x, z = z, x\n    if y > z:\n        y, z = z, y\n    print(x, y, z)"
    },
    {
        "number": 4401,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.strip().split())\n    return''.join(map(str, [Z, Y, X]))\n"
    },
    {
        "number": 4401,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return\n    a, b, c = stdin.strip().split()\n    return''.join([c, a, b])"
    },
    {
        "number": 4401,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n\n    a, b = swap(a, b)\n    a, c = swap(a, c)\n\n    return f'{a} {b} {c}'\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.strip().split(' '))\n    return''.join(map(str, [c, b, a]))"
    },
    {
        "number": 4401,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    boxes = stdin.split(\" \")\n    return \"{} {} {}\".format(boxes[2], boxes[1], boxes[0])"
    },
    {
        "number": 4401,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split(\" \")]\n    n = len(nums)\n    content = [0] * n\n\n    for i in range(n):\n        content[i] = nums[(i + 1) % n]\n    return \" \".join(map(str, content))"
    },
    {
        "number": 4401,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\" \")\n    x, y, z = int(data[0]), int(data[1]), int(data[2])\n    return f\"{z} {x} {y}\"\n\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split(' ')))\n    return''.join(map(str, [C, B, A]))"
    },
    {
        "number": 4402,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4402,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b = map(int, stdin.strip().split(' '))\n    return str(int(b / 2) if a >= 13 else 0)"
    },
    {
        "number": 4402,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The user inputs the age of Takahashi and the cost of the Ferris wheel in yen, and the program computes and returns the cost of the Ferris wheel for Takahashi.\n\n    >>> solution(\"30 100\")\n    '100'\n    \"\"\"\n    age, cost = stdin.split()\n    return str(int(cost) / 2 if int(age) >= 13 else int(cost))\n"
    },
    {
        "number": 4402,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A <= 13:\n        return str(B)\n    elif A >= 15 and A <= 25:\n        return str(B / 2)\n    else:\n        return '0'"
    },
    {
        "number": 4402,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a >= 13 and b % 2 == 0:\n        return str(int(b / 2))\n    if a >= 6 and a <= 12 and b % 2 == 0:\n        return str(int(b / 2))\n    return \"0\""
    },
    {
        "number": 4402,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(int(B / 2 if A >= 13 else B / 2 - (A - 5) * B / 2))"
    },
    {
        "number": 4402,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 13:\n        return str(B//2)\n    elif A > 12:\n        return str(B//2)\n    else:\n        return str(B)"
    },
    {
        "number": 4402,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 13 or (A >= 13 and A <= 12):\n        return str(B)\n    return str(B // 2)"
    },
    {
        "number": 4402,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a >= 13:\n        print(b / 2)\n    else:\n        print(b)"
    },
    {
        "number": 4402,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip().split(' ')\n    print(int((int(line[0]) / 2) if int(line[0]) % 2 == 0 else int(line[0]) / 2 + 1))\n"
    },
    {
        "number": 4403,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_brain = 0\n    for symbol in stdin:\n        if symbol == '+':\n            takahashi_brain += 1\n        else:\n            takahashi_brain -= 1\n    return str(takahashi_brain)"
    },
    {
        "number": 4403,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = 0\n    for i in stdin:\n        number += 1 if i == '+' else -1\n    return str(number)"
    },
    {
        "number": 4403,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_mind = 0\n    for symbol in stdin:\n        if symbol == '+':\n            takahashi_mind += 1\n        else:\n            takahashi_mind -= 1\n    return str(takahashi_mind)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4403,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))"
    },
    {
        "number": 4403,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.strip().split()\n    return str((eval(a) + eval(b) - eval(c) - eval(d)) % 10)"
    },
    {
        "number": 4403,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(stdin)))"
    },
    {
        "number": 4403,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are going to be given 4 symbols: + and -.\n    Your goal is to calculate the integer in Takahashi's mind after he eats all the symbols.\n    The integer in his mind is initially 0.\n    Takahashi is now going to eat the first symbol +. After eating it, his integer in Takahashi's mind increases by 1.\n    Takahashi is now going to eat the second symbol -. After eating it, his integer in Takahashi's mind decreases by 1.\n    Takahashi is now going to eat the third symbol +. After eating it, his integer in Takahashi's mind increases by 1.\n    Takahashi is now going to eat the fourth symbol -. After eating it, his integer in Takahashi's mind decreases by 1.\n    \"\"\"\n    return str(eval(stdin))"
    },
    {
        "number": 4403,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([1 if i == '+' else -1 for i in stdin]))"
    },
    {
        "number": 4403,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    i = 0\n    while i < len(s):\n        if s[i] == \"+\":\n            i += 1\n            if i < len(s) and s[i] == \"+\":\n                i += 1\n                if i < len(s) and s[i] == \"+\":\n                    i += 1\n                    if i < len(s) and s[i] == \"+\":\n                        i += 1\n                        if i < len(s) and s[i] == \"+\":\n                            i += 1\n                            if i < len(s) and s[i] == \"+\":\n                                i += 1\n                                if i < len(s) and s[i] == \"+\":\n                                    i += 1\n                                    if i < len(s) and s[i] == \"+\":\n                                        i += 1\n                                        if i < len(s) and s[i] == \"+\":\n                                            i += 1\n                                            if i < len(s) and s[i] == \"+\":\n                                                i += 1\n                                                if i < len(s) and s[i] == \"+\":\n                                                    i += 1\n                                                    if i < len(s) and s[i] == \"+\":\n                                                        i += 1\n                                                        if i < len(s) and s[i] == \"+\":\n                                                            i += 1\n                                                            if i < len(s) and s[i] == \"+\":\n                                                                i += 1\n                                                                if i < len(s) and s[i] == \"+\":\n                                                                    i += 1\n                                                                    if i < len(s) and s[i] == \"+\":\n                                                                        i += 1\n                                                                        if i < len(s) and s[i] == \"+\":\n                                                                            i += 1\n                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                i += 1\n                                                                                if i < len(s) and s[i] == \"+\":\n                                                                                    i += 1\n                                                                                    if i < len(s) and s[i] == \"+\":\n                                                                                        i += 1\n                                                                                        if i < len(s) and s[i] == \"+\":\n                                                                                            i += 1\n                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                i += 1\n                                                                                                if i < len(s) and s[i] == \"+\":\n                                                                                                    i += 1\n                                                                                                    if i < len(s) and s[i] == \"+\":\n                                                                                                        i += 1\n                                                                                                        if i < len(s) and s[i] == \"+\":\n                                                                                                            i += 1\n                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                i += 1\n                                                                                                                if i < len(s) and s[i] == \"+\":\n                                                                                                                   i += 1\n                                                                                                                   if i < len(s) and s[i] == \"+\":\n                                                                                                                       i += 1\n                                                                                                                       if i < len(s) and s[i] == \"+\":\n                                                                                                                            i += 1\n                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                i += 1\n                                                                                                                                if i < len(s) and s[i] == \"+\":\n                                                                                                                                    i += 1\n                                                                                                                                    if i < len(s) and s[i] == \"+\":\n                                                                                                                                       i += 1\n                                                                                                                                       if i < len(s) and s[i] == \"+\":\n                                                                                                                                            i += 1\n                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                i += 1\n                                                                                                                                                if i < len(s) and s[i] == \"+\":\n                                                                                                                                                   i += 1\n                                                                                                                                                   if i < len(s) and s[i] == \"+\":\n                                                                                                                                                      i += 1\n                                                                                                                                                      if i < len(s) and s[i] == \"+\":\n                                                                                                                                                            i += 1\n                                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                i += 1\n                                                                                                                                                                if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                          i += 1\n                                                                                                                                                                          if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                               i += 1\n                                                                                                                                                                               if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                                            i += 1\n                                                                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                                            i += 1\n                                                                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                                            i += 1\n                                                                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                                            i += 1\n                                                                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                                            i += 1\n                                                                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                                            i += 1\n                                                                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                                            i += 1\n                                                                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                                            i += 1\n                                                                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                                            i += 1\n                                                                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                                            i += 1\n                                                                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                                            i += 1\n                                                                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                                            i += 1\n                                                                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                                            i += 1\n                                                                                                                                                                                            if i < len(s) and s[i] == \"+\":\n                                                                                                                                                                                            i += 1\n                                                                                             "
    },
    {
        "number": 4403,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin))"
    },
    {
        "number": 4404,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin[:10]\n    if \"2019/04/30\" > date:\n        print(\"Heisei\")\n    else:\n        print(\"TBD\")"
    },
    {
        "number": 4404,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return"
    },
    {
        "number": 4404,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    date = stdin.split(\"/\")\n    month = date[0]\n    day = date[1]\n    year = date[2]\n\n    if int(month) > 4:\n        print(\"Heisei\")\n    else:\n        print(\"TBD\")"
    },
    {
        "number": 4404,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write a program that prints Heisei if the date represented by S is not later than April 30, 2019, and prints TBD otherwise.\n    \"\"\"\n    date = stdin.split('/')\n    if date[1] > '04' or (date[1] == '04' and date[2] > '30') or (date[1] == '04' and date[2] == '30' and date[0] > '2019'):\n        return 'Heisei'\n    return 'TBD'"
    },
    {
        "number": 4404,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split('/')\n    if int(date[1]) < 4:\n        return \"TBD\"\n    return \"Heisei\""
    },
    {
        "number": 4404,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns Heisei if the date represented by S is not later than April 30, 2019, and prints TBD otherwise.\n\n    Args:\n        stdin (str): the date in the yyyy/mm/dd format\n\n    Returns:\n        str: Heisei if the date represented by S is not later than April 30, 2019, and print TBD otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4404,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    date: list[str] = stdin.split(\"/\")\n    year: int = int(date[0])\n    month: int = int(date[1])\n    day: int = int(date[2])\n    if month > 4:\n        if year > 2019:\n            return \"Heisei\"\n        else:\n            return \"TBD\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split(\"/\")\n    date[0] = int(date[0])\n    date[1] = int(date[1])\n    date[2] = int(date[2])\n    if date[1] > 4:\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    month, date, year = stdin.split(\"/\")\n    month = int(month)\n    date = int(date)\n    year = int(year)\n\n    if month > 4 and date > 30 and year > 2019:\n        return \"Heisei\"\n    else:\n        return \"TBD\""
    },
    {
        "number": 4404,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split('/')\n    month = int(date[0])\n    day = int(date[1])\n    year = int(date[2])\n\n    if month > 4:\n        return 'Heisei'\n    elif month == 4 and day > 30:\n        return 'Heisei'\n    else:\n        return 'TBD'"
    },
    {
        "number": 4405,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('18\\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10')\n    '14'\n    >>> solution('10\\n6 6 6 3 6 1000000000 3 3 6 6\\n')\n    '9'\n    >>> solution('3\\n1337 1337 1337')\n    '3'\n    \"\"\"\n    pass"
    },
    {
        "number": 4405,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    count = {}\n    for i in a:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    max = 0\n    for key, value in count.items():\n        if value > max:\n            max = value\n    return max"
    },
    {
        "number": 4405,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    c = [0] * n\n    # for i in range(n):\n    #     b[a[i]-1] += 1\n    #     c[a[i]-1] += 1\n    #     if b[a[i]-1] > c[a[i]-1]:\n    #         c[a[i]-1] += 1\n    #     if b[a[i]-1] == c[a[i]-1]:\n    #         c[a[i]-1] += 1\n    #     print(b[a[i]-1], c[a[i]-1])\n    # print(sum(b))\n    return sum(b)\n"
    },
    {
        "number": 4405,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4405,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4405,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4405,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()[1:]\n    n = int(stdin[0])\n    t = [int(i) for i in stdin[1].split()]\n    w = [t[i] * 2 for i in range(n)]\n    w.sort(reverse=True)\n    p = []\n    i = 0\n    while i < n:\n        if i == 0:\n            p.append(2 * w[i])\n        elif p[-1] > w[i]:\n            p.append(2 * w[i])\n        else:\n            p.append(p[-1])\n        i += 1\n    return str(max(p))"
    },
    {
        "number": 4405,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip().split()\n    l = len(s)\n    if l == 0:\n        return 0\n    s.sort()\n    ans = 1\n    i = 1\n    while i < l:\n        if int(s[i]) == int(s[i-1]) * 2:\n            i += 1\n        else:\n            ans += 1\n            i += 1\n    return ans"
    },
    {
        "number": 4405,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [int(stdin) for stdin in stdin.split(\" \")]\n\n    numbers.sort(reverse=True)\n    print(numbers)\n    contests = 0\n    for i, number in enumerate(numbers):\n        if i % 2 == 0:\n            contests += number\n        else:\n            contests += number * 2\n\n    return str(contests)"
    },
    {
        "number": 4405,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4406,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4406,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    ids = map(int, lines[1].split())\n    friends = [[] for _ in range(n)]\n    for i, friend in enumerate(ids):\n        friends[i].append(friend)\n\n    for _ in range(n):\n        if len(friends[0]) > k:\n            friends[0].pop()\n\n        if len(friends[0]) < k:\n            friends[0].append(friends[0][0])\n            friends[0].pop(0)\n            \n        for index in range(1, len(friends)):\n            if len(friends[index]) > k:\n                friends[index].pop()\n            if len(friends[index]) < k:\n                friends[index].append(friends[index][0])\n                friends[index].pop(0)\n                \n    result = []\n    for index, friend in enumerate(friends):\n        if friend:\n            result.append(friend[0])\n        else:\n            result.append(index + 1)\n    \n    return''.join(map(str, result))\n\nprint(solution(input()))"
    },
    {
        "number": 4406,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split(' ')))\n    messages = list(map(int, stdin.split(' ')))\n\n    conversations = [None] * k\n    messages_left = n\n\n    for i in range(k):\n        messages_left -= 1\n        conversations[i] = messages.pop(0)\n        if messages_left == 0:\n            break\n\n    return '\\n'.join(map(str, conversations))\n\nassert(solution(stdin) == stdout)\n"
    },
    {
        "number": 4406,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ids = list(map(int, stdin.split()))\n    ids = set(ids)\n\n    convs = []\n    for i in range(n):\n        convs.append(ids.pop())\n\n    convs = list(map(str, convs))\n    convs.sort()\n    convs = list(map(int, convs))\n    print(len(convs))\n    print(*convs)"
    },
    {
        "number": 4406,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    stdin = stdin.splitlines()\n    n, k = list(map(int, stdin[0].split(' ')))\n    ids = list(map(int, stdin[1].split(' ')))\n    n -= len(ids)\n    a = []\n    a.append(ids[0])\n    for i in range(1, len(ids)):\n        if ids[i] in a:\n            a = a[0:a.index(ids[i])] + a[a.index(ids[i])+1:]\n        else:\n            a.append(ids[i])\n    if len(a) > k:\n        a = a[len(a)-k:]\n    return''.join([str(len(a))] + a)\n\nassert(solution('''7 2\n1 2 3 2 1 3 2\n''') == '2')\nassert(solution('''10 4\n2 3 3 1 1 2 1 2 3 3\n''') == '3')\nassert(solution('''1000 1\n0\n''') == '0')\nassert(solution('''1000 2\n2\n''') == '1')\nassert(solution('''1000 3\n1 2 3 4 5 6 7 8 9 10\n''') == '2')\nassert(solution('''1000 4\n1 2 3 4 5 6 7 8 9 10\n''') == '3')\nassert(solution('''1000 5\n1 2 3 4 5 6 7 8 9 10\n''') == '4')\nassert(solution('''1000 6\n1 2 3 4 5 6 7 8 9 10\n''') == '5')\nassert(solution('''1000 7\n1 2 3 4 5 6 7 8 9 10\n''') == '6')\nassert(solution('''1000 8\n1 2 3 4 5 6 7 8 9 10\n''') == '7')\nassert(solution('''1000 9\n1 2 3 4 5 6 7 8 9 10\n''') == '8')\nassert(solution('''1000 10\n1 2 3 4 5 6 7 8 9 10\n''') == '9')\nassert(solution('''1000 11\n1 2 3 4 5 6 7 8 9 10\n''') == '10')\nassert(solution('''1000 12\n1 2 3 4 5 6 7 8 9 10\n''') == '11')\nassert(solution('''1000 13\n1 2 3 4 5 6 7 8 9 10\n''') == '12')\nassert(solution('''1000 14\n1 2 3 4 5 6 7 8 9 10\n''') == '13')\nassert(solution('''1000 15\n1 2 3 4 5 6 7 8 9 10\n''') == '14')\nassert(solution('''1000 16\n1 2 3 4 5 6 7 8 9 10\n''') == '15')\nassert(solution('''1000 17\n1 2 3 4 5 6 7 8 9 10\n''') == '16')\nassert(solution('''1000 18\n1 2 3 4 5 6 7 8 9 10\n''') == '17')\nassert(solution('''1000 19\n1 2 3 4 5 6 7 8 9 10\n''') == '18')\nassert(solution('''1000 20\n1 2 3 4 5 6 7 8 9 10\n''') == '19')\nassert(solution('''1000 21\n1 2 3 4 5 6 7 8 9 10\n''') == '20')\nassert(solution('''1000 22\n1 2 3 4 5 6 7 8 9 10\n''') == '21')\nassert(solution('''1000 23\n1 2 3 4 5 6 7 8 9 10\n''') == '22')\nassert(solution('''1000 24\n1 2 3 4 5 6 7 8 9 10\n''') == '23')\nassert(solution('''1000 25\n1 2 3 4 5 6 7 8 9 10\n''') == '24')\nassert(solution('''1000 26\n1 2 3 4 5 6 7 8 9 10\n''') == '25')\nassert(solution('''1000 27\n1 2 3 4 5 6 7 8 9 10\n''') == '26')\nassert(solution('''1000 28\n1 2 3 4 5 6 7 8 9 10\n''') == '27')\nassert(solution('''1000 29\n1 2 3 4 5 6 7 8 9 10\n''') == '28')\nassert(solution('''1000 30\n1 2 3 4 5 6 7 8 9 10\n''') == '29')\nassert(solution('''1000 31\n1 2 3 4 5 6 7 8 9 10\n''') == '30')\nassert(solution('''1000 32\n1 2 3 4 5 6 7 8 9 10\n''') == '31')\nassert(solution('''1000 33\n1 2 3 4 5 6 7 8 9 10\n''') == '32')\nassert(solution('''1000 34\n1 2 3 4 5 6 7 8 9 10\n''') == '33')\nassert(solution('''1000 35\n1 2 3 4 5 6 7 8 9 10\n''') == '34"
    },
    {
        "number": 4406,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n\n    if k < n:\n        return \"\"\n    if k == n:\n        return \" \".join([str(l[x]) for x in range(1, n+1)])\n\n    for _ in range(n-k):\n        l.pop(0)\n    return \" \".join([str(l[x]) for x in range(1, k+1)])"
    },
    {
        "number": 4406,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    ids = [int(x) for x in stdin.split()]\n    res = []\n    for _ in range(n):\n        if len(res) < k:\n            res.append(ids[0])\n            ids = ids[1:]\n        else:\n            res.append(ids[0])\n            ids = ids[1:]\n    return''.join(str(x) for x in res)\n"
    },
    {
        "number": 4406,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    ids = [int(x) for x in stdin.split()]\n    convs = [[] for _ in range(k)]\n    # ids_ind = [-1] * k\n    i = 0\n    while i < n:\n        k_ind = -1\n        for j in range(k):\n            if len(convs[j]) < k:\n                convs[j].append(ids[i])\n                k_ind = j\n                break\n        if k_ind!= -1:\n            convs[k_ind] = convs[k_ind][-1:] + convs[k_ind][:-1]\n            convs[k_ind].reverse()\n        else:\n            print(1)\n            print(*convs[0])\n            i += 1\n            continue\n        if i == n - 1:\n            break\n        print(2)\n        print(*convs[1])\n        i += 1\n    print(1)\n    print(*convs[0])\n    return \"\"\n\n\n-----Alternate Solutions-----\n\ndef"
    },
    {
        "number": 4406,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"1 3 2\"\n"
    },
    {
        "number": 4406,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = list(map(int, stdin[0].split()))\n    list_of_ids = list(map(int, stdin[1].split()))\n    m = 0\n    list_of_conversations = []\n    if n > k:\n        for i in range(k):\n            list_of_conversations.append(list_of_ids[i])\n        for i in range(k, n):\n            list_of_conversations.append(list_of_ids[i])\n            list_of_ids[i - k] = list_of_ids[i]\n            list_of_conversations[i - k] = list_of_conversations[i]\n            list_of_conversations[i] = i + 1\n            m += 1\n    elif n == k:\n        for i in range(n):\n            list_of_conversations.append(list_of_ids[i])\n            list_of_conversations[i] = list_of_ids[i]\n            m += 1\n    else:\n        for i in range(n):\n            list_of_conversations.append(list_of_ids[i])\n            list_of_conversations[i] = list_of_ids[i]\n            m += 1\n    return str(m) +'' +''.join(map(str, list_of_conversations))\n\nn, k = list(map(int, input().split()))\nids = list(map(int, input().split()))\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The example from the question.\"\"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    queries = [int(stdin.readline()) for _ in range(q)]\n    # make list of sets\n    coins = [set() for _ in range(n)]\n    for i in range(n):\n        coins[i].add(a[i])\n    # print(coins)\n    # print(queries)\n    for q in queries:\n        if q in coins[0]:\n            print(1)\n        else:\n            print(-1)\n\n\ndef"
    },
    {
        "number": 4407,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Write code to produce output here\n\nprint(solution(stdin))"
    },
    {
        "number": 4407,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    coins, queries = [int(n) for n in stdin.split()]\n\n    coins = [2 ** int(c) for c in stdin.split()]\n    queries = [int(n) for n in stdin.split()]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4407,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    queries = [int(stdin) for stdin in stdin.split()]\n    for query in queries:\n        for coin in coins:\n            if query < coin:\n                break\n        else:\n            print(coin)\n    else:\n        print(-1)\n    return 'No'"
    },
    {
        "number": 4407,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 4407,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    coins = [int(x) for x in stdin.split()]\n    queries = [int(x) for x in stdin.split()]\n    pass\n\ndef"
    },
    {
        "number": 4407,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    coins = [int(x) for x in stdin.split()]\n    dp = [0] * (m + 1)\n    for i in range(m, -1, -1):\n        for j in range(n):\n            if i >= coins[j]:\n                dp[i] = max(dp[i], dp[i - coins[j]] + 1)\n    print(dp[-1])\n    return \"\""
    },
    {
        "number": 4407,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4407,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nassert solution('''5 4\n2 4 8 2 4\n8\n5\n14\n10''') == '1\\n-1\\n3\\n2\\n'\n\nassert solution('''5 4\n2 4 8 2 4\n8\n5\n14\n10\n5\n14\n10\n''') == '1\\n-1\\n3\\n2\\n'\n\nassert solution('''3 10\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n''') == '1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-1\\n-1\\n2\\n3\\n-"
    },
    {
        "number": 4408,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    cards = list(map(int, stdin.strip().split()))\n    fav = list(map(int, stdin.strip().split()))\n    maximum = sum(fav)\n    for _ in range(k * n):\n        current = [i for i in cards]\n        for i in range(n):\n            if fav[i] > 0:\n                current[i * k : (i + 1) * k] = [fav[i]] * k\n        maximum = max(maximum, sum(current))\n    return str(maximum)"
    },
    {
        "number": 4408,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\nfrom typing import List\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_players, number_of_cards = [int(x) for x in stdin.split()]\n    cards = [int(x) for x in stdin.split()]\n    favorites = [int(x) for x in stdin.split()]\n    if number_of_players * number_of_cards > len(favorites):\n        raise ValueError('more favorites than players')\n    cards_per_player = number_of_cards // number_of_players\n    cards_left = number_of_cards - cards_per_player * number_of_players\n    h = [0] * (number_of_players + 1)\n    for card_index in range(number_of_cards):\n        card_number = cards[card_index]\n        if card_number in favorites:\n            h[card_number] += 1\n    for player_index in range(number_of_players):\n        favorites_number = player_index + 1\n        while len(h) > player_index and h[favorites_number] == 0:\n            favorites_number += 1\n        if len(h) <= player_index:\n            return str(0)\n        h[favorites_number] += 1\n    return str(sum(h))\n\n\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split(' ')))\n    cards = list(map(int, stdin.strip().split(' ')))\n    favs = list(map(int, stdin.strip().split(' ')))\n    seq = list(map(int, stdin.strip().split(' ')))\n    print(max(solution2(n, k, cards, favs, seq)))\n\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4408,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_players, number_of_cards = [int(x) for x in stdin.split()]\n    cards = [int(x) for x in stdin.split()]\n    favorites = [int(x) for x in stdin.split()]\n    number_of_favorites = len(favorites)\n    cards_in_hand = [0] * number_of_cards\n\n    for index in range(number_of_cards):\n        cards_in_hand[index] = cards[index]\n        for player in range(number_of_favorites):\n            if cards_in_hand[index] == favorites[player]:\n                cards_in_hand[index] = 0\n\n    total_joy = 0\n\n    for player in range(number_of_players):\n        total_joy += cards_in_hand[player]\n\n    return str(total_joy)\n\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"9 9 9 9 9 9 9 9 9\") == \"0\"\nassert solution(\"1 2 3\") == \"0\"\nassert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"5 6 7\") == \"12\"\nassert solution(\"2 9 5 3 9 2 8 6\") == \"45\"\n"
    },
    {
        "number": 4408,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n, k = list(map(int, stdin.readline().split()))\n        c = list(map(int, stdin.readline().split()))\n        f = list(map(int, stdin.readline().split()))\n        h = list(map(int, stdin.readline().split()))\n        \n        # array h[x] = x+1, h[x-1] < h[x], h[x-1] = h[x]\n        h.sort(reverse=True)\n        print(n, k, c, f, h)\n        \n        happy = 0\n        for i in range(n):\n            if f[i] in c:\n                happy += h[i]\n        print(happy)\n\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    cards = list(map(int, stdin.strip().split()))\n    favorites = list(map(int, stdin.strip().split()))\n    h = []\n    for i in range(n):\n        h.append(0)\n    for i in range(k * n):\n        h[i % n] += 1\n    for i in range(n):\n        if h[i] <= favorites[i]:\n            h[i] = 0\n        else:\n            h[i] = h[i] - favorites[i]\n    return str(max(h))"
    },
    {
        "number": 4409,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    def rec(i,j,x):\n        if abs(i-j) == 1:\n            return 2\n        elif abs(i-j) == 0:\n            return 1\n        else:\n            return 0\n\n    best = a[:]\n    best.sort()\n\n    print(best)\n    if a == best:\n        return str(0)\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(a[i] - a[j]) == 1:\n                a[i] += abs(a[i] - a[j])\n                a[j] = 0\n                \n                if a == best:\n                    print(a)\n                    return str(a.index(max(a))+1)\n                else:\n                    print(a)\n                    a[i] -= abs(a[i] - a[j])\n                    a[j] = 0\n                    \n                    \nsolution(None)"
    },
    {
        "number": 4409,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(0, len(a)):\n        for j in range(i + 1, len(a)):\n            if abs(a[i] - a[j]) == 1:\n                count += 1\n                a[i] += abs(a[i] - a[j])\n                a[j] += abs(a[i] - a[j])\n                break\n    return str(count)\n"
    },
    {
        "number": 4409,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = tuple(int(x) for x in stdin.readline().split())\n\n    left = 0\n    right = 0\n    to_left = 0\n    to_right = 0\n    ans = 0\n    last = None\n\n    while True:\n        if left == right:\n            if last is not None:\n                if last == 1:\n                    to_right += 1\n                else:\n                    to_left += 1\n\n            if left == n - 1:\n                break\n\n            ans += 1\n\n        if left < n - 1 and a[left + 1] - a[left] == 1:\n            left += 1\n            to_left += 1\n            to_right -= 1\n        elif right < n - 1 and a[right + 1] - a[right] == 1:\n            right += 1\n            to_left -= 1\n            to_right += 1\n        else:\n            left += 1\n            to_left += 1\n            to_right -= 1\n            ans += 1\n\n        last = 1 - last\n\n    print(ans)\n    for i in range(0, ans):\n        print(to_left, i + 1, to_right)\n\n    return ''"
    },
    {
        "number": 4409,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    t = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1]!= 0:\n            t += 1\n            a[i] += abs(a[i] - a[i - 1])\n            a[i - 1] += abs(a[i] - a[i - 1])\n    return str(t)\n"
    },
    {
        "number": 4409,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    cost = 0\n    for i, x in enumerate(a):\n        for j in range(i + 1, len(a)):\n            if abs(x - a[j]) == 1:\n                cost += 2\n                a[i] = a[i] + abs(a[i] - a[j])\n                a[j] = a[i] - abs(a[i] - a[j])\n                break\n    return str(cost)\n"
    },
    {
        "number": 4409,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    operations = 0\n    for i in range(n):\n        if abs(a[i] - a[(i + 1) % n]) == 1:\n            a[i] += abs(a[i] - a[(i + 1) % n])\n            a[(i + 1) % n] += abs(a[i] - a[(i + 1) % n])\n            operations += 1\n\n    return str(operations)"
    },
    {
        "number": 4409,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    minimum = None\n    for i in range(n):\n        for j in range(i, n):\n            if abs(a[i] - a[j]) == 1:\n                diff = abs(i - j)\n                if minimum is None or diff < minimum:\n                    minimum = diff\n    if minimum is None:\n        return str(0)\n    return str(minimum)\n\nassert(solution('1\\n1') == '0')\nassert(solution('2\\n2') == '0')\nassert(solution('2\\n1 2\\n2 1') == '1')\nassert(solution('3\\n1 1 1') == '2')\nassert(solution('3\\n2 8 10') == '2')\nassert(solution('4\\n1 1 1 1') == '0')\n"
    },
    {
        "number": 4409,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    res = [0] * n\n    k = 1\n    for i in range(n - 1):\n        if abs(a[i] - a[i + 1]) == 1:\n            res[i] = k\n            k += 1\n    for i in range(n - 2):\n        if abs(a[i] - a[i + 2]) == 1:\n            res[i + 1] = k\n            k += 1\n    for i in range(n - 2):\n        if abs(a[i] - a[i + 3]) == 1:\n            res[i + 2] = k\n            k += 1\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 4409,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve():\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        k = 0\n        while len(set(a))!= 1:\n            k += 1\n            a = [abs(x - y) for x, y in zip(a, a[1:])]\n        print(k)\n        print(*a)\n    solve()\n"
    },
    {
        "number": 4409,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4410,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nprint(solution(\"\")) # \"\"\nprint(solution(\"100010\")) # \"1\"\nprint(solution(\"1110001\")) # \"1\"\nprint(solution(\"100010\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"100010\")) # \"0\"\nprint(solution(\"100010\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"1\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\"\nprint(solution(\"1110001\")) # \"0\""
    },
    {
        "number": 4410,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4410,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 4410,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4410,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4410,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(0, t):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        c = s.count('1')\n        if c == n:\n            print(0)\n        else:\n            print(c - k)"
    },
    {
        "number": 4410,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    state = stdin.split()[1]\n    return \"0\" if state.count(\"1\") >= n - k else str(bin(n-k-state.count(\"1\")).count(\"1\"))\n\nn, k = [int(x) for x in stdin.split()]\nstate = stdin.split()[1]\nprint(bin(n-k-state.count(\"1\")).count(\"1\"))\n"
    },
    {
        "number": 4410,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(0, t):\n        n, k = list(map(int, stdin.split(' ')))\n        s = stdin[-n:]\n        occ = s.count('1')\n        s = '0' * occ + '1' * (n - occ)\n        print(s.count('1'))\n\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number_of_test_cases = int(stdin.readline().strip())\n    for t in range(number_of_test_cases):\n        n, k = [int(i) for i in stdin.readline().strip().split()]\n        s = stdin.readline().strip()\n        occurrences = s.count(\"1\")\n        if occurrences == 0:\n            print(0)\n        else:\n            print(occurrences - k + 1)\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n_verdict = 'AC'\n_script ='solution.solution'\n"
    },
    {
        "number": 4411,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    segments.sort(key = lambda s: (s[0], s[1]))\n    ans = 0\n    for segment in segments:\n        if segment[0] <= ans <= segment[1]:\n            ans += 1\n    print(ans)\n    for segment in segments:\n        if segment[0] <= ans <= segment[1]:\n            continue\n        else:\n            print(segment)\n            ans += 1\n    return None\n"
    },
    {
        "number": 4411,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = [\n        (int(l), int(r))\n        for l, r in (map(int, line.split()) for line in stdin.splitlines()[1:])\n    ]\n    segments = sorted(segments)\n\n    segments_by_intersection = set()\n    segments_by_coverage = {\n        i: set(range(i, n))\n        for i in range(1, n + 1)\n    }\n\n    for segment_start, segment_end in segments:\n        for intersection_end in range(segment_start, segment_end + 1):\n            segments_by_intersection.add(intersection_end)\n            segments_by_coverage[intersection_end].update(\n                range(segment_start, intersection_end)\n            )\n\n    bad_points = set()\n    for i in range(1, n + 1):\n        if len(segments_by_coverage[i]) > k:\n            bad_points.add(i)\n\n    segment_counter = 0\n    bad_points = sorted(bad_points)\n    for i in bad_points:\n        segment_counter += len(segments_by_coverage[i])\n\n    return str(segment_counter)\n"
    },
    {
        "number": 4411,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = [tuple(map(int, stdin.split())) for _ in range(n)]\n    segment_to_remove = min_segments_to_remove(segments, k)\n    return''.join(str(index) for index in segment_to_remove)\n\ndef"
    },
    {
        "number": 4411,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n''') == '3\\n4 6 7\\n')\nassert(solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n''') == '3\\n1 4 5\\n')\nassert(solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n''') == '4\\n1 3 5 6\\n')\nassert(solution('''11 1\n12 13\n10 11\n9 11\n8 11\n7 11\n6 11\n5 11\n4 11\n3 11\n2 11\n1 11\n''') == '1\\n11\\n')\nassert(solution('''12 1\n12 22\n10 22\n10 21\n9 22\n8 22\n7 22\n6 22\n5 22\n4 22\n3 22\n2 22\n1 22\n''') == '2\\n
    },
    {
        "number": 4411,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    ans = 0\n    while a:\n        curr = a.pop(0)\n        if max([curr-a_ for a_ in a]) < k:\n            ans += 1\n        else:\n            a.append(curr)\n    return str(ans)"
    },
    {
        "number": 4411,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    segments = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n\n    def is_bad(i: int) -> bool:\n        covered = {\n            (x, y)\n            for j in range(l, r + 1)\n            for x in range(j, r + 1)\n            for y in range(j, r + 1)\n            if (x, y)!= (i, j)\n        }\n        return len(covered) > k\n\n    ans = 1\n    removed = 0\n    for i, (l, r) in enumerate(segments):\n        if is_bad(i):\n            removed += 1\n        else:\n            ans = min(ans, removed)\n            removed = 0\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4411,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    segments = [tuple([int(x) for x in line.split(\" \")]) for line in stdin.split(\"\\n\")[1:]]\n    points = set()\n    for l, r in segments:\n        for p in range(l, r+1):\n            points.add(p)\n    points = list(points)\n    points.sort()\n    result = len(points) - k\n    for index, point in enumerate(points):\n        bad_segments = 0\n        for l, r in segments:\n            if l <= point <= r:\n                bad_segments += 1\n        if bad_segments > result:\n            result = bad_segments\n            del points[index]\n    return str(result)\n\nprint(solution(\"\"\"7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\"\"\"))"
    },
    {
        "number": 4411,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    segments = []\n    for _ in range(n):\n        l, r = [int(x) for x in stdin.split()]\n        segments.append((l, r))\n    segments.sort(key=lambda s: s[0])\n    uniq = set()\n    result = 0\n    for l, r in segments:\n        if len(uniq) < k:\n            uniq.add(l)\n            result += 1\n        else:\n            break\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4411,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    return minimum number of segments to remove\n    so that no point is covered by more than k segments\n    \"\"\"\n    n, k = map(int, stdin.split())\n\n    intersections = set()\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        intersections.update(range(l, r+1))\n\n    points = set(range(1, n+1))\n\n    bad_points = intersections - points\n    bad_points = len(points - bad_points)\n\n    return str(bad_points - k) if bad_points < k else \"impossible\"\n\n\ndef"
    },
    {
        "number": 4412,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pool = stdin.readline().split()\n    a = [int(x) for x in stdin.readline().split()]\n    # print(n, pool, a)\n    if n <= 3:\n        return max(a)\n\n    while len(a) > 3:\n        i, j = a.index(max(a[0:3])), a.index(max(a[1:4]))\n        if a[i] % a[j] or a[j] % a[i]:\n            a.pop(i)\n        else:\n            a.pop(j)\n    # print(a)\n    return max(a)"
    },
    {
        "number": 4412,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n\n        l = 0\n        m = len(a) - 1\n        for i in range(len(a) - 1, -1, -1):\n            if m - i >= 0:\n                l = max(l, a[m - i])\n            if m - i - 1 >= 0:\n                l = max(l, a[m - i - 1])\n\n        m = len(a) - 1\n        for i in range(len(a)):\n            if i <= m:\n                a[i] = a[i] / l\n            else:\n                a[i] = a[i] / l + 1\n\n        print(max(a))"
    },
    {
        "number": 4412,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4412,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        prettiness = list(map(int, stdin.readline().split()))\n        s = 0\n        for i in range(1, n):\n            for j in range(i + 1, n + 1):\n                if i % j == 0 or j % i == 0:\n                    s += max(prettiness[i], prettiness[j])\n        print(s)\n    return \"\""
    },
    {
        "number": 4412,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    problems = [int(x) for x in stdin.readline().strip().split()]\n    # print(q, n, problems)\n    answers = [0] * q\n    for i in range(q):\n        problem = [int(x) for x in stdin.readline().strip().split()]\n        if len(problem) == 1:\n            answers[i] = problem[0]\n        elif len(problem) == 3:\n            answers[i] = max(answers[i], problem[0] * problem[1] * problem[2])\n    return '\\n'.join([str(x) for x in answers])\n\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n1 2 3\n''') == '30\\n31\\n10\\n')\nassert(solution('''3\n4\n5 6 15 30\n4\n10 6 30"
    },
    {
        "number": 4412,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4412,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n\n    for _ in range(T):\n        n = int(stdin.readline().strip())\n        A = [int(x) for x in stdin.readline().strip().split(' ')]\n\n        dp = [0] * (n + 1)\n\n        for i in range(n):\n            for j in range(i + 1):\n                if A[i] % A[j]!= 0 and A[i] % A[j]!= A[j] / A[j]:\n                    dp[i + 1] = max(dp[i + 1], dp[j] + A[i])\n\n        print(dp[-1])"
    },
    {
        "number": 4412,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n\n    def m_primitive(x: int) -> bool:\n        if x == 1:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        d = 3\n        while d * d <= x:\n            if x % d == 0:\n                return False\n            d += 2\n        return True\n\n    def test(a: List[int], n: int) -> bool:\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if (m_primitive(a[i] + a[j]) and m_primitive(a[j] + a[k]) and m_primitive(a[i] + a[k])) is False:\n                        return False\n        return True\n\n    def find_cum_prettiness(a: List[int], n: int) -> int:\n        max_cum_prettiness = 0\n        for i in range(n):\n            if m_primitive(a[i]):\n                max_cum_prettiness += a[i]\n        return max_cum_prettiness\n\n    def find_max_cum_prettiness(a: List[int], n: int, q: int) -> int:\n        cum_prettiness = 0\n        for i in range(q):\n            cum_prettiness += find_cum_prettiness(a, n)\n        return cum_prettiness\n\n    for i in range(q):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        print(find_max_cum_prettiness(a, n, q))\n\n    return ''\n"
    },
    {
        "number": 4412,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n = int(stdin.readline())\n        a = [int(i) for i in stdin.readline().split()]\n        a.sort(reverse=True)\n        res = 0\n        left = 0\n        right = n - 1\n        for i in range(n):\n            if a[i] % 2:\n                left = i + 1\n            else:\n                right = i - 1\n            res += (a[i] + a[left] + a[right])\n        print(res)"
    },
    {
        "number": 4412,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n = int(stdin.readline().strip())\n        pretties = list(map(int, stdin.readline().strip().split()))\n        # max_pretties = [0, 0, 0]\n        # for i in range(n):\n        #     if max_pretties[i] < max_pretties[i+1]:\n        #         max_pretties[i] = max_pretties[i+1]\n        #     if max_pretties[i] < max_pretties[i+2]:\n        #         max_pretties[i] = max_pretties[i+2]\n        # print(max_pretties)\n        # max_pretties = [0]*(n+2)\n        # max_pretties[0], max_pretties[1], max_pretties[n] = 0, 0, 0\n        # for i in range(n):\n        #     max_pretties[i+1] = max_pretties[i] + max_pretties[i+1]\n        # print(max_pretties)\n        for i in range(n-2):\n            if pretties[i]%pretties[i+1]!= 0 or pretties[i]%pretties[i+2]!= 0:\n                print(pretties[i] + pretties[i+1] + pretties[i+2])\n                break"
    },
    {
        "number": 4413,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        a.sort()\n        def search(k, m):\n            l, r = 0, n-1\n            while l <= r:\n                mid = (l+r) >> 1\n                if a[mid] < m:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n            return l\n        left, right = a[0], a[-1]\n        t1, t2 = [], []\n        for i in range(n):\n            if abs(a[i]-left) > 1:\n                t1.append(i)\n            elif abs(a[i]-right) > 1:\n                t2.append(i)\n        t1.sort()\n        t2.sort()\n        t1 = set(t1)\n        t2 = set(t2)\n        if len(t1) > len(t2):\n            t1, t2 = t2, t1\n        t1 = len(t1)\n        t2 = len(t2)\n        if t1 > t2:\n            print(t1)\n        else:\n            print(t2)"
    },
    {
        "number": 4413,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n <= 0:\n        return \"NO\"\n    arr = list(map(int, stdin.readline().split()))\n    ans = [0] * n\n    if n % 2 == 0:\n        arr.sort()\n        for i in range(n // 2):\n            ans[i] = i + 1\n        return \"YES\"\n    else:\n        arr.sort()\n        for i in range(n // 2):\n            ans[i] = i + 1\n        ans[n // 2] = 0\n        return \"YES\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4413,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nsolution(\"\")\n\n'''\n"
    },
    {
        "number": 4413,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    def check(s: str, p: str) -> bool:\n        for i in range(len(s)):\n            if abs(ord(s[i]) - ord(p[i])) > 1:\n                return False\n        return True\n    \n    n = int(stdin.readline())\n    res = []\n    \n    for i in range(n):\n        a = list(map(int, stdin.readline().split()))\n        s = set()\n        for j in range(n):\n            if j not in s:\n                s.add(j)\n                if not check(a[j], a[j+1]):\n                    break\n        else:\n            res.append(len(s))\n    \n    return '\\n'.join(str(i) for i in res)\n\n\n\n\"\"\"\n\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        print(solve(a, n))\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n    \n    def isOk(i: int, j: int) -> bool:\n        return abs(a[i] - a[j]) <= 1\n\n    def fn(i: int, j: int, k: int) -> int:\n        if i == j or i == k or j == k:\n            return 0\n        if isOk(i, j) or isOk(i, k) or isOk(j, k):\n            return 1\n        return 2\n\n    return '\\n'.join(map(str, map(fn, range(n), range(n), range(n))))\n    \n"
    },
    {
        "number": 4413,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def read_stdin() -> List[int]:\n        return list(map(int, stdin.split('\\n')[0].split()))\n\n    def solve(a: List[int], n: int) -> None:\n        result = []\n        for i in range(n):\n            if i > 0:\n                s = set()\n                for j in range(i):\n                    if abs(a[i] - a[j]) > 1:\n                        s.add(j)\n                if len(s) == n - 1:\n                    result.append(i)\n        print(len(result))\n\n    for _ in range(read_stdin()[0]):\n        n = read_stdin()[0]\n        a = read_stdin()\n        solve(a, n)\n"
    },
    {
        "number": 4413,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skills = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    print(n)\n    for i in range(n):\n        print(skills[i])\n    return \"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    skills = [int(skill) for skill in stdin.readline().split()]\n    return str(len(set(skills)))"
    },
    {
        "number": 4414,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4414,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    for i in range(n):\n        a, b, n, S = map(int, lines[i + 1].split())\n        if (a > b):\n            a, b = b, a\n        if (a < 1) or (b < 1) or (n < 1) or (S < 1):\n            print(\"NO\")\n            continue\n        if (n % a == 0) and (S % n == 0):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4414,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n\n    for _ in range(T):\n        a, b, n, S = map(int, stdin.readline().strip().split(' '))\n\n        if n == 1 and S == a:\n            print('YES')\n        elif a <= S and b <= S:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 4414,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4414,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4414,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4414,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().strip()\n\n\ndef"
    },
    {
        "number": 4414,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4414,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    return str(solution_matrix(lines))\n\ndef"
    },
    {
        "number": 4415,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    perm = [0] * n\n    for i in range(n):\n        perm[a[i] - 1] = i + 1\n    perm = sorted(perm)\n    for i in range(n):\n        perm[i] -= 1\n    perm =''.join(map(str, perm))\n    a = sorted(a)\n    n_increasing = 0\n    n_decreasing = 0\n    for i in range(n):\n        if a[i] == 1:\n            n_increasing += 1\n        elif a[i] == n:\n            n_decreasing += 1\n    perm_increasing = perm\n    perm_decreasing = perm\n    if n_increasing > 0:\n        if n_increasing > 1:\n            perm_increasing = '1'+ perm_increasing\n        elif n_increasing == 1:\n            perm_increasing = '1'+ perm_increasing\n    if n_decreasing > 0:\n        if n_decreasing > 1:\n            perm_decreasing = '1'+ perm_decreasing\n        elif n_decreasing == 1:\n            perm_decreasing = '1'+ perm_decreasing\n    if perm_increasing == perm_decreasing:\n        return 'YES'\n    else:\n        return 'NO'\n    return 'YES' if perm_increasing == perm_decreasing else 'NO'\n"
    },
    {
        "number": 4415,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Input\n    7\n    7 2 7 3 3 1 4\n    \n    Output\n    YES\n    2\n    3 7 \n    5\n    7 4 3 2 1 \n    \n    Input\n    5\n    4 3 1 5 3\n    \n    Output\n    YES\n    1\n    3 \n    4\n    5 4 3 1 \n    \n    Input\n    5\n    1 1 2 1 2\n    \n    Output\n    NO\n    \n    Input\n    5\n    0 1 2 3 4\n    \n    Output\n    YES\n    0\n    3 \n    4\n    5 4 3 1 \n    \n    Input\n    5\n    1 1 1 1 1\n    \n    Output\n    NO\n    '''\n    T = int(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    # If there is a contradiction in the input and it is impossible to split the given sequence $a$ to increasing and decreasing sequences, print \"NO\".\n    if sum(a) == 0:\n        print('NO')\n        return\n    # Find the largest value of an element in the list.\n    largest = max(a)\n    # Find the smallest value of an element in the list.\n    smallest = min(a)\n    # If the largest value is greater than the smallest value, there is a contradiction in the input.\n    if largest > smallest:\n        print('NO')\n        return\n    # We want to split the sequence into increasing and decreasing sequences. We use the following \"pairs\" to split the sequence into increasing and decreasing sequences.\n    # The first element of the pair is the smallest value in the sequence, and the second element is the largest value in the sequence.\n    pairs = []\n    # This loop creates pairs of the largest and smallest values in the sequence.\n    for i in range(n):\n        pair = (a[i], a[n-i-1])\n        pairs.append(pair)\n    # We sort the pairs by the first element. The pairs are in increasing order, so we want the largest element first.\n    pairs.sort()\n    # Create lists for the increasing and decreasing sequences.\n    inc = []\n    dec = []\n    # We can create the increasing sequence and the decreasing sequence by splitting the sequence into pairs.\n    for pair in pairs:\n        if pair[0] > pair[1]:\n            # The element of the pair is greater than the element of the previous pair, so we create an increasing sequence.\n            inc.append(pair[0])\n            dec.append(pair[1])\n        else:\n            # The element of the pair is less than the element of the previous pair, so we create a decreasing sequence.\n            dec.append(pair[1])\n            inc.append(pair[0])\n    # We can make the increasing sequence a strict increasing sequence by adding the smallest element in the increasing sequence to the empty string and the biggest element in the increasing sequence to the increasing sequence.\n    inc_ = ''\n    inc.append(smallest)\n    inc_.join(inc)\n    # We can make the increasing sequence a strict increasing sequence by adding the biggest element in the increasing sequence to the empty string and the smallest element in the increasing sequence to the increasing sequence.\n    inc_.join(inc)\n    # We can make the decreasing sequence a strict decreasing sequence by adding the biggest element in the decreasing sequence to the empty string and the smallest element in the decreasing sequence to the decreasing sequence.\n    dec_ = ''\n    dec.reverse()\n    dec_.join(dec)\n    # We can make the decreasing sequence a strict decreasing sequence by adding the smallest element in the decreasing sequence to the empty string and the biggest element in the decreasing sequence to the decreasing sequence.\n    dec_.join(dec)\n    # We can compare the length of the increasing and decreasing sequences.\n    if len(inc) > len(dec):\n        # If the length of the increasing sequence is longer than the length of the decreasing sequence, we can make the increasing sequence a strict increasing sequence by adding the smallest element in the increasing sequence to the empty string and the biggest element in the increasing sequence to the increasing sequence.\n        inc_.join(inc)\n    else:\n        # If the length of the increasing sequence is shorter than the length of the decreasing sequence, we can make the decreasing sequence a strict decreasing sequence by adding the biggest element in the decreasing sequence to the empty string and the smallest element in the decreasing sequence to the decreasing sequence.\n        dec_.join(dec)\n    # If the length of the increasing and decreasing sequences are the same, then they are equal.\n    if len(inc) == len(dec):\n        # If the length of the increasing and decreasing sequences are the same, we can compare the increasing and decreasing sequences and print \"YES\" if they are equal.\n        if inc == dec:\n            print('YES')\n            return\n        # If the increasing and decreasing sequences are not equal, we print \"NO\".\n        else:\n"
    },
    {
        "number": 4415,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sequence = list(map(int, stdin.readline().strip().split(' ')))\n    if n == 0:\n        return 'NO'\n    increasing_seq = []\n    decreasing_seq = []\n    for i in range(n):\n        if i > 0:\n            if sequence[i] > sequence[i - 1]:\n                increasing_seq.append(sequence[i])\n            else:\n                decreasing_seq.append(sequence[i])\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        return 'NO'\n    if increasing_seq[0] > decreasing_seq[0]:\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution('9'))\n"
    },
    {
        "number": 4415,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_of_elements = int(stdin.readline())\n    if number_of_elements < 2:\n        return \"NO\"\n    a = list(map(int, stdin.readline().split()))\n\n    a.sort()\n    if a[-1] > a[-2]:\n        return \"NO\"\n    if a[0] < a[1]:\n        return \"NO\"\n    for i in range(number_of_elements):\n        if a[i] < a[i+1]:\n            break\n    if a[i] == a[i+1]:\n        return \"NO\"\n    for i in range(number_of_elements-1, -1, -1):\n        if a[i] > a[i+1]:\n            break\n    if a[i] == a[i+1]:\n        return \"NO\"\n    if i == 0:\n        return \"NO\"\n\n    inc = [a[i] for i in range(i, number_of_elements, 2)]\n    dec = [a[i] for i in range(i-1, -1, -2)]\n    if len(inc) == len(dec):\n        return \"YES\"\n    if len(inc) > len(dec):\n        return \"YES\"\n    if len(inc) < len(dec):\n        return \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        if a[i] < a[i+1]:\n            for j in range(n-1):\n                if a[j] > a[j+1]:\n                    if a[i] > a[j] or a[i] > a[j+1]:\n                        return 'NO'\n                    else:\n                        if a[i] < a[j] or a[i] < a[j+1]:\n                            if a[i+1] < a[j+1] or a[i+1] < a[j]:\n                                return 'YES'\n                            else:\n                                return 'NO'\n    return 'NO'\n\nprint(solution('''7\n7 2 7 3 3 1 4\n'''))\n"
    },
    {
        "number": 4415,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def generate_permutation(sequence: list[int], initial: bool) -> None:\n        if not sequence:\n            permutation.append(sequence)\n        else:\n            for i in range(len(sequence)):\n                if initial:\n                    generate_permutation(sequence[:i] + sequence[i+1:], not initial)\n                else:\n                    generate_permutation(sequence[:i] + sequence[i+1:], initial)\n\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    if a[0] > a[-1]:\n        print('NO')\n        return\n\n    permutation = []\n    generate_permutation(a, True)\n    if not permutation:\n        print('NO')\n        return\n\n    ans = ''\n    n = len(permutation[0])\n    for i in range(n):\n        ans +=''.join(str(x[i]) for x in permutation)\n        ans += '\\n'\n\n    return ans\n\nprint(solution(''))\n"
    },
    {
        "number": 4415,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if len(a) == 1:\n        return 'YES'\n    if len(a) == 2:\n        if a[0] < a[1]:\n            return 'YES'\n        else:\n            return 'NO'\n    if a[-1] < a[-2]:\n        a.reverse()\n    asc, desc = [], []\n    asc_n, desc_n = 0, 0\n    for i in range(len(a) - 1):\n        if a[i] < a[i + 1]:\n            asc.append(a[i])\n            asc_n += 1\n        elif a[i] > a[i + 1]:\n            desc.append(a[i])\n            desc_n += 1\n    if asc_n + desc_n == len(a) - 1:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4415,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    increasing = 0\n    decreasing = 0\n    for i in range(n):\n        if a[i] > a[increasing]:\n            increasing += 1\n            decreasing = i\n        elif a[i] < a[decreasing]:\n            decreasing += 1\n            increasing = i\n\n    if increasing == n:\n        return \"YES\"\n\n    increasing = increasing - 1\n    decreasing = n - 1\n    while decreasing >= 0:\n        if a[increasing] > a[decreasing]:\n            break\n        increasing -= 1\n        decreasing -= 1\n\n    if increasing == decreasing:\n        increasing -= 1\n\n    increasing += 1\n    decreasing += 1\n\n    increasing = a[increasing]\n    decreasing = a[decreasing]\n\n    for i in range(n):\n        if a[increasing] < a[decreasing]:\n            increasing += 1\n            decreasing -= 1\n        elif a[increasing] > a[decreasing]:\n            increasing -= 1\n            decreasing += 1\n        else:\n            return \"NO\"\n\n    if increasing == increasing:\n        return \"YES\"\n\n    return \"NO\"\n\nimport sys"
    },
    {
        "number": 4415,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            continue\n        else:\n            return \"NO\"\n    count = 0\n    for i in range(n):\n        if a[i] == i + 1:\n            count += 1\n    if count == n:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4415,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number_of_elements = int(stdin.readline().strip())\n    increasing, decreasing = [], []\n    for _ in range(number_of_elements):\n        number = int(stdin.readline().strip())\n        if number > 0:\n            increasing.append(number)\n        else:\n            decreasing.append(-number)\n    increasing.sort()\n    decreasing.sort()\n    if len(increasing) > len(decreasing):\n        increasing, decreasing = decreasing, increasing\n    if increasing == increasing[::-1]:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4416,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.readline().split()))\n    books = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    best = float('inf')\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for l in range(1, n + 1):\n                for m in range(1, n + 1):\n                    if i + j + l + m == n and i + j >= k and j + l >= k:\n                        t, a, b = 0, 0, 0\n                        for b_id in range(1, n + 1):\n                            if b_id!= i and b_id!= j:\n                                t += books[b_id - 1][0]\n                                a += books[b_id - 1][1]\n                                b += books[b_id - 1][2]\n                        if t + a + b < best:\n                            best = t + a + b\n    return str(best)"
    },
    {
        "number": 4416,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    if n <= 0 or n > 10 ** 5:\n        return '-1'\n    if k <= 0 or k > n * 2:\n        return '-1'\n    books = [int(x) for x in stdin.split(' ')]\n    if len(books)!= n:\n        return '-1'\n    for i in range(len(books)):\n        if books[i]!= 1 and books[i]!= 0:\n            return '-1'\n    if k == n:\n        return '0'\n    a = set()\n    b = set()\n    for i in range(len(books)):\n        if books[i] == 1:\n            a.add(i)\n        elif books[i] == 0:\n            b.add(i)\n    min_time = sum(books)\n    for a_i in a:\n        for b_i in b:\n            if a_i!= b_i:\n                time = 0\n                for i in range(n):\n                    if i not in a and i not in b:\n                        time += books[i]\n                if time < min_time:\n                    min_time = time\n    return str(min_time)\n"
    },
    {
        "number": 4416,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n\n    while n > 1:\n        if a[0] <= k:\n            a = a[1:]\n            n -= 1\n        else:\n            a = [1] + a[:1]\n            k = 0\n    return a"
    },
    {
        "number": 4416,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4416,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    books = []\n    for _ in range(n):\n        t, a, b = [int(x) for x in stdin.split()]\n        books.append((t, a, b))\n    result = -1\n    for bookset in itertools.combinations(books, k):\n        total_time = sum(x[0] for x in bookset)\n        if total_time % 2!= sum(x[1] for x in bookset) % 2:\n            result = total_time\n            break\n    return str(result)"
    },
    {
        "number": 4416,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    data = [tuple(map(int, line.split())) for line in stdin.strip().split('\\n')]\n    # print(data)\n    s = 0\n    for time, like, dislike in data:\n        if like == dislike:\n            s += time\n            continue\n        if like * dislike == 1:\n            s += time\n            continue\n        l, h = 1, n\n        while l < h:\n            mid = (l + h) // 2\n            if mid * dislike > like:\n                h = mid\n            else:\n                l = mid + 1\n        s += time * min(l, like)\n    print(s)"
    },
    {
        "number": 4416,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return max([max(x[:2]) for x in stdin.split('\\n')][1:]) if stdin else -1\n    \n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(stdin='''8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n'''), '18')\n        self.assertEqual(solution(stdin='''5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n'''), '8')\n        self.assertEqual(solution(stdin='''5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n'''), '-1')\n        self.assertEqual(solution(stdin='''4 3\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n'''), '10')\n        self.assertEqual(solution(stdin='''7 1 1\n3 1 1\n2 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n'''), '8')\n        self.assertEqual(solution(stdin='''8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n'''), '18')\n        self.assertEqual(solution(stdin='''9 6\n5 0 0\n8 1 0\n1 0 1\n1 1 1\n8 1 1\n8 1 1\n1 0 1\n4 0 0\n'''), '10')\n        self.assertEqual(solution(stdin='''9 4\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n'''), '8')\n        self.assertEqual(solution(stdin='''9 3\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n'''), '-1')\n        self.assertEqual(solution(stdin='''9 5\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n'''), '-1')\n        self.assertEqual(solution(stdin='''10 2\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n'''), '-1')\n        self.assertEqual(solution(stdin='''10 5\n5 0 0\n8 1 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '8')\n        self.assertEqual(solution(stdin='''10 4\n5 0 0\n8 1 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '-1')\n        self.assertEqual(solution(stdin='''10 5\n5 0 0\n8 1 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '-1')\n        self.assertEqual(solution(stdin='''10 7\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '8')\n        self.assertEqual(solution(stdin='''10 8\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '-1')\n        self.assertEqual(solution(stdin='''10 9\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '8')\n        self.assertEqual(solution(stdin='''10 8\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '-1')\n        self.assertEqual(solution(stdin='''10 10\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '8')\n        self.assertEqual(solution(stdin='''10 11\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '-1')\n        self.assertEqual(solution(stdin='''10 11\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '8')\n        self.assertEqual(solution(stdin='''10 12\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '-1')\n        self.assertEqual(solution(stdin='''10 13\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '8')\n        self.assertEqual(solution(stdin='''10 14\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '-1')\n        self.assertEqual(solution(stdin='''10 15\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '8')\n        self.assertEqual(solution(stdin='''10 16\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n3 0 0\n'''), '-1')\n        self.assertEqual(solution(stdin='''10 17\n6 0 0\n9"
    },
    {
        "number": 4416,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return next(find_result(stdin))\n\ndef"
    },
    {
        "number": 4416,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nT = int(stdin)\nfor t in range(T):\n    n, k = map(int, stdin.split())\n    books = [int(stdin) for stdin in stdin.split()]\n    count = 0\n    for i in range(len(books)):\n        if books[i]!= 0 and count < k:\n            count += 1\n        if count == k:\n            print(sum(books))\n            break\n    else:\n        print(-1)\n\n\"\"\"\n\nfrom collections import Counter\nfrom math import ceil, log2\nfrom bisect import bisect_left, bisect_right\n\ndef"
    },
    {
        "number": 4416,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    books = [tuple(map(int, line.split())) for line in stdin]\n    books.sort(key=lambda tup: tup[1], reverse=True)\n\n    t, a, b = books[0]\n    t_sum = t\n    n = n - a - b\n    for _, a, b in books[1:]:\n        t += a\n        if t <= k:\n            t_sum += t\n        n -= a\n        n += b\n        if n <= k:\n            t_sum += n\n        n -= b\n\n    return str(t_sum) if t_sum <= 2 * k else '-1'\n\n\nassert(solution(open(\"test_files/Y11R5P1/A.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/B.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/C.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/D.in\")) == \"-1\")\nassert(solution(open(\"test_files/Y11R5P1/E.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/F.in\")) == \"-1\")\nassert(solution(open(\"test_files/Y11R5P1/G.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/H.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/I.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/J.in\")) == \"-1\")\nassert(solution(open(\"test_files/Y11R5P1/K.in\")) == \"-1\")\nassert(solution(open(\"test_files/Y11R5P1/L.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/M.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/N.in\")) == \"-1\")\nassert(solution(open(\"test_files/Y11R5P1/O.in\")) == \"-1\")\nassert(solution(open(\"test_files/Y11R5P1/P.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/Q.in\")) == \"-1\")\nassert(solution(open(\"test_files/Y11R5P1/R.in\")) == \"-1\")\nassert(solution(open(\"test_files/Y11R5P1/S.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/T.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/U.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/V.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/W.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/X.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/Y.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/Z.in\")) == \"-1\")\nassert(solution(open(\"test_files/Y11R5P1/AB.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/BC.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/CD.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/DE.in\")) == \"-1\")\nassert(solution(open(\"test_files/Y11R5P1/EF.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/GH.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/HI.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/JK.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/LK.in\")) == \"-1\")\nassert(solution(open(\"test_files/Y11R5P1/MN.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/OP.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/QR.in\")) == \"-1\")\nassert(solution(open(\"test_files/Y11R5P1/ST.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/TY.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/XY.in\")) == \"18\")\nassert(solution(open(\"test_files/Y11R5P1/YK.in\")) == \"8\")\nassert(solution(open(\"test_files/Y11R5P1/ZL.in\")) == \"-1\")\nassert(solution(open(\"test_"
    },
    {
        "number": 4417,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4417,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4417,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    queries = [map(int, line.strip().split()) for line in stdin.strip().split('\\n')]\n    for a, b, k in queries:\n        if abs(a-b) <= k:\n            print(b)\n        else:\n            print(-1)\n"
    },
    {
        "number": 4417,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe two solutions in the book were based on the first solution:\ndef"
    },
    {
        "number": 4417,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4417,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    res = []\n    for i in range(n):\n        res.append(abs(arr[i] - (i + 1)))\n    return max(res)"
    },
    {
        "number": 4417,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4417,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split(' '))\n        prices = list(map(int, stdin.readline().strip().split(' ')))\n        if k == 0:\n            print(-1)\n            continue\n        prices.sort()\n        left, right = 1, prices[-1]\n        while left < right:\n            mid = (left + right) // 2\n            if mid == prices[0]:\n                print(mid)\n                break\n            diff = [abs(mid - price) for price in prices]\n            if sum(diff) <= k:\n                right = mid\n            else:\n                left = mid + 1\n        else:\n            print(left)"
    },
    {
        "number": 4417,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 4417,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    n, k = map(int, lines[0].split())\n\n    prices = map(int, lines[1].split())\n\n    result = [None] * n\n    for i in range(n):\n        result[i] = int(prices[i] / k) * k\n        result[i] = max(result[i], prices[i])\n\n    return''.join(map(str, result))\n\n\nimport sys"
    },
    {
        "number": 4418,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = a[:]\n    b.sort()\n    answer = 0\n    for i in range(n):\n        a[i] = b.pop(0)\n        if a[i] % 6 == 0:\n            answer += a[i] / 6\n    return str(answer)\n"
    },
    {
        "number": 4418,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    result = 0\n    if n % 6 == 0:\n        result = n // 6\n    else:\n        result = n // 6 + 1\n    return str(result)"
    },
    {
        "number": 4418,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.codewars.com/kata/5b8a4578b0b84d06a0019c4\n\n    <pre>\n    2nd example:\n    Input:\n    12\n    4 8 4 8 15 16 8 16 23 15 16 4 42 23 42\n    Output:\n    3\n    </pre>\n\n    <pre>\n    3rd example:\n    Input:\n    5\n    4 8 4 15 16 23\n    Output:\n    0\n    </pre>\n\n    <pre>\n    4th example:\n    Input:\n    9\n    4 8 4 15 16 23 42\n    Output:\n    6\n    </pre>\n\n    <pre>\n    5th example:\n    Input:\n    10\n    4 8 4 15 16 23 42 23 42\n    Output:\n    6\n    </pre>\n    \"\"\"\n    a = list(map(int, stdin.split()))\n    b = [4, 8, 15, 16, 23, 42]\n    return str(len(b) - b.index(max(a)) - a.count(max(a)))\n"
    },
    {
        "number": 4418,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    start = 0\n    end = len(a) - 1\n    while start < end:\n        if a[start] % 6 == 4 and a[end] % 6 == 4:\n            start += 1\n        end -= 1\n    return str(abs(len(a) - (start + 1)))"
    },
    {
        "number": 4418,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    seq = [4, 8, 15, 16, 23, 42]\n    if n == 1:\n        return 0\n    if n == 2 and a[0] == 4 and a[1] == 8:\n        return 0\n    if n == 2 and a[0] == 4 and a[1] == 15:\n        return 1\n    if n == 2 and a[0] == 4 and a[1] == 16:\n        return 2\n    if n == 2 and a[0] == 4 and a[1] == 23:\n        return 3\n    if n == 2 and a[0] == 4 and a[1] == 42:\n        return 4\n    if n == 3 and a[0] == 4 and a[1] == 8 and a[2] == 15:\n        return 1\n    if n == 3 and a[0] == 4 and a[1] == 8 and a[2] == 16:\n        return 2\n    if n == 3 and a[0] == 4 and a[1] == 8 and a[2] == 23:\n        return 3\n    if n == 3 and a[0] == 4 and a[1] == 8 and a[2] == 42:\n        return 4\n    if n == 3 and a[0] == 4 and a[1] == 15 and a[2] == 16:\n        return 1\n    if n == 3 and a[0] == 4 and a[1] == 15 and a[2] == 8:\n        return 2\n    if n == 3 and a[0] == 4 and a[1] == 15 and a[2] == 23:\n        return 3\n    if n == 3 and a[0] == 4 and a[1] == 15 and a[2] == 42:\n        return 4\n    if n == 3 and a[0] == 4 and a[1] == 16 and a[2] == 8:\n        return 1\n    if n == 3 and a[0] == 4 and a[1] == 16 and a[2] == 15:\n        return 2\n    if n == 3 and a[0] == 4 and a[1] == 16 and a[2] == 42:\n        return 4\n    if n == 3 and a[0] == 4 and a[1] == 23 and a[2] == 15:\n        return 1\n    if n == 3 and a[0] == 4 and a[1] == 23 and a[2] == 16:\n        return 2\n    if n == 3 and a[0] == 4 and a[1] == 23 and a[2] == 42:\n        return 4\n    if n == 3 and a[0] == 4 and a[1] == 42 and a[2] == 15:\n        return 1\n    if n == 3 and a[0] == 4 and a[1] == 42 and a[2] == 16:\n        return 2\n    if n == 3 and a[0] == 4 and a[1] == 42 and a[2] == 23:\n        return 4\n    if n == 3 and a[0] == 4 and a[1] == 42 and a[2] == 42:\n        return 4\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 15 and a[3] == 16:\n        return 1\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 15 and a[3] == 8:\n        return 2\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 15 and a[3] == 23:\n        return 3\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 15 and a[3] == 42:\n        return 4\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 16 and a[3] == 8:\n        return 1\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 16 and a[3] == 15:\n        return 2\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 16 and a[3] == 23:\n        return 3\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 16 and a[3] == 42:\n        return 4\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 23 and a[3] == 15:\n        return 1\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 23 and a[3] == 16:\n        return 2\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 23 and a[3] == 42:\n        return 4\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 42 and a[3] == 15:\n        return 1\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 42 and a[3] == 16:\n        return 2\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 42 and a[3] == 23:\n        return 4\n    if n == 4 and a[0] == 4 and a[1] == 8 and a[2] == 42 and a[3] == 42:\n        return 4\n    if n == 5 and a[0] == 4 and a[1] == 8 and a[2] == 15 and a[3] == 16 and a[4] == 23:\n        return 1\n    if n == 5 and a[0] == 4 and a[1] == 8 and a[2] == 15 and a[3] == 16 and a[4] == 8:\n        return 2\n    if n == 5 and a[0] == 4 and a[1] == 8 and a[2] == 15 and a[3] == 16 and a["
    },
    {
        "number": 4418,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4418,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().strip().split()))\n    # counter = 0\n    # while(a!= [4, 8, 15, 16, 23, 42]):\n    #     for i in a:\n    #         if i % 6!= 0:\n    #             a.remove(i)\n    #             counter += 1\n    #             break\n    # print(counter)\n    # return \"\"\n    return \"\""
    },
    {
        "number": 4418,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    array = list(map(int, stdin.strip().split()))\n    if len(array) == 1:\n        return 0\n    n = array[0]\n    array = array[1:]\n    arr = []\n    for i in range(0, len(array), n):\n        arr.append(array[i:i + n])\n    for i in range(len(arr)):\n        arr[i] = arr[i][0]\n    arr = sorted(arr)\n    arr = set(arr)\n    k = 1\n    while k <= len(arr) / 6:\n        if k * 6 in arr:\n            break\n        k += 1\n    return len(arr) - k * 6\n"
    },
    {
        "number": 4418,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    f = (n // 6) * 6\n    if n % 6 == 0:\n        return f\n    else:\n        f += n % 6\n        return f"
    },
    {
        "number": 4418,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lst = list(map(int, stdin.readline().strip().split(\" \")))\n    return str(divisible_by(lst, 6) - divisible_by(lst, 3) + len(lst) - divisible_by(lst, 2) - divisible_by(lst, 2))\n\n\ndef"
    },
    {
        "number": 4419,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    for t in range(int(stdin.readline().strip())):\n        a, b = [int(x) for x in stdin.readline().split()]\n        res.append(b - a)\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 4419,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4419,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b = [int(x) for x in stdin.split()]\n        print(min(a, b) - 1)"
    },
    {
        "number": 4419,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().split())\n        if b <= a:\n            print(0)\n            continue\n        ans = 0\n        while b > a:\n            ans += 1\n            if b % 2 == 1:\n                b -= 1\n            else:\n                b //= 2\n        print(ans)"
    },
    {
        "number": 4419,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4419,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    for _ in range(n):\n        a, b = [int(x) for x in stdin[_ + 1].split()]\n        print(solution2(a, b))\n\n\ndef"
    },
    {
        "number": 4419,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4419,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4419,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    return ''.join(map(str, map(lambda x: solution(*map(int, x.split())), stdin.readlines())))\n\n'''"
    },
    {
        "number": 4420,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        x, y, n = map(int, stdin.readline().split())\n        print(next(x for x in range(n+1) if (x % x == y % x)))\n"
    },
    {
        "number": 4420,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        x, y, n = map(int, stdin.readline().strip().split())\n        res = 0\n        for i in range(1, n + 1):\n            if i % x == y:\n                res = i\n                break\n        print(res)\n"
    },
    {
        "number": 4420,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4420,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    while t:\n        x, y, n = [int(s) for s in stdin.readline().strip().split(\" \")]\n        for k in range(n):\n            if (k * x) % y == 0:\n                print(k)\n                break\n        t -= 1\n"
    },
    {
        "number": 4420,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        x, y, n = map(int, stdin.readline().strip().split())\n        if x % y == 0:\n            print(0)\n        else:\n            # number of times y will be moduloed with x\n            n = n // x\n            # y = x*n\n            # x = y%x\n            # x = x*n%x\n            # y = n*x%x\n            # y = (n*x)%x = n*(x^2)%x = n*x^2\n            # y = n*x^2%x = n*(x^3)%x\n            # y = n*(x^4)%x\n            # y = n*(x^4)\n            # y = n*(x^6)\n            # y = n*(x^7)\n            # x = y^2\n            # y = x^2\n            # x = y^2\n            # y = x^3\n            # x = y^3\n            # x = y^4\n            # y = x^4\n            # y = x^5\n            # x = y^5\n            # y = x^6\n            # x = y^6\n            # x = y^7\n            print(n * (x ** (n * 2) % x))"
    },
    {
        "number": 4420,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    testcases = int(stdin.readline())\n    for _ in range(testcases):\n        x, y, n = [int(x) for x in stdin.readline().split()]\n        print(x * ((y % x) - (n % x)))\n    return ''"
    },
    {
        "number": 4420,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        x, y, n = (int(x) for x in stdin.readline().strip().split(' '))\n        print(max((x*y) % n for x in range(0, n+1)))"
    },
    {
        "number": 4420,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        x, y, n = map(int, stdin.readline().split())\n        m = n - y % x\n        if m <= 0:\n            m += n\n        print(m)\n    return \"\""
    },
    {
        "number": 4420,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 7 5 12345\n   ... 5 0 4\n   ... 10 5 15\n   ... 17 8 54321\n   ... 499999993 9 1000000000\n   ... 10 5 187\n   ... 2 0 999999999\n   ... ''')\n    '12339'\n    >>> solution('''3\n   ... 10 5 15\n   ... 17 8 54321\n   ... 499999993 9 1000000000\n   ... 10 5 187\n   ... 2 0 999999999\n   ... ''')\n    '15'\n    >>> solution('''3\n   ... 10 5 15\n   ... 17 8 54321\n   ... 499999993 9 1000000000\n   ... 10 5 187\n   ... 2 0 999999999\n   ... ''')\n    '54306'\n    >>> solution('''3\n   ... 10 5 15\n   ... 17 8 54321\n   ... 499999993 9 1000000000\n   ... 10 5 187\n   ... 2 0 999999999\n   ... ''')\n    '999999995'\n    >>> solution('''3\n   ... 10 5 15\n   ... 17 8 54321\n   ... 499999993 9 1000000000\n   ... 10 5 187\n   ... 2 0 999999999\n   ... ''')\n    '185'\n    >>> solution('''3\n   ... 10 5 15\n   ... 17 8 54321\n   ... 499999993 9 1000000000\n   ... 10 5 187\n   ... 2 0 999999999\n   ... ''')\n    '999999998'\n    \"\"\"\n    n = int(stdin.readline())\n    for _ in range(n):\n        x, y, n = map(int, stdin.readline().split())\n        k = n - y % x\n        if x <= k <= n:\n            print(k)\n        else:\n            print('-1')\n"
    },
    {
        "number": 4420,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        x, y, n = map(int, stdin.readline().strip().split())\n        k = 0\n        while (k * x) % y!= n:\n            k += 1\n        print(k)\n    return ''"
    },
    {
        "number": 4421,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    candies = [int(x) for x in stdin.strip().split()]\n\n    return '\\n'.join([str(candies.count(x)//2) for x in range(1, max(candies) + 1) if candies.count(x) % k == 0])"
    },
    {
        "number": 4421,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    c = [int(s) for s in stdin.split()]\n    assert len(c) == n\n    assert 1 <= k <= n\n    c = sorted(c)\n    i, j = 0, n - 1\n    while i < j:\n        if (c[i] + c[j]) % k == 0:\n            break\n        if (c[i] + c[j]) % k > 0:\n            j -= 1\n        else:\n            i += 1\n    return str(i + j)"
    },
    {
        "number": 4421,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n\n    n, k = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    boxes = list(map(int, stdin[1].split()))\n\n    return str(len(boxes) // k)\n"
    },
    {
        "number": 4421,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, k = [int(s) for s in stdin.split()]\n    candy = [int(s) for s in stdin.split()]\n    candies = candy[:]\n    for i in range(1, n):\n        candies[i] += candies[i - 1]\n    best = 0\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            c = candies[j - 1] - candies[i - 1]\n            if c % k == 0:\n                best = max(best, j - i)\n    return str(best)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4421,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n    arr = tuple(map(int, stdin.split()))\n\n    total = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (total + arr[i] + arr[j]) % k == 0:\n                total += arr[i] + arr[j]\n    return str(total)"
    },
    {
        "number": 4421,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    candy_boxes = [int(x) for x in stdin.split()]\n    candy_boxes.sort()\n    candy_boxes = list(reversed(candy_boxes))\n    candy_boxes = candy_boxes[:len(candy_boxes) // 2 * k]\n    result = 0\n    for i in range(len(candy_boxes) // 2):\n        result += candy_boxes[i] * candy_boxes[len(candy_boxes) - i - 1]\n    return str(result)\n"
    },
    {
        "number": 4421,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    boxes = [int(x) for x in stdin.split()]\n    for i in range(1, len(boxes)):\n        boxes[i] += boxes[i-1]\n    boxes.sort()\n    print(boxes)\n    gifts = []\n    for i in range(len(boxes) - 1):\n        for j in range(i+1, len(boxes)):\n            if boxes[j] - boxes[i] % k == 0:\n                gifts.append((i, j))\n    print(gifts)\n    return str(len(gifts))\n\nassert(solution(input()) == \"4\")\nassert(solution(input()) == \"8\")\nassert(solution(input()) == \"6\")\n"
    },
    {
        "number": 4421,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def rec(n, d, k):\n        if n == 1:\n            return [0]\n        n -= 1\n        g = []\n        for x in range(n):\n            g.append(d[x] + d[x+1])\n        g = [x % k for x in g]\n        return [x for x in g if rec(n-2, d[n-2:], k)!= []]\n\n    n, k = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    return str(len(rec(n, d, k)))"
    },
    {
        "number": 4421,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    boxes = [int(x) for x in stdin.split()]\n    print(boxes, n, k)\n    pass"
    },
    {
        "number": 4421,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    \n    result = 0\n    \n    for i in range(0, n-1):\n        if d[i] % k == 0:\n            result += d[i] // k\n    \n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4422,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split(' '))\n    if K < 1 or K > N:\n        return ''\n\n    S = stdin.strip()\n    return S[:K-1] + S[K-1].lower() + S[K:]\n\nassert(solution(stdin) == stdin.strip())\n"
    },
    {
        "number": 4422,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4422,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The initial idea was to use a string to represent the sequence of characters\n    at each step in the lowercasing process. We then simply print the relevant\n    characters from that string. However, this solution would require O(N) space.\n    Instead of using a string, we can use a list to keep track of the current\n    characters. At each step, we are able to take advantage of the fact that we\n    have to lowercase the K-th character. Therefore, the space complexity\n    would be O(1).\n\n    >>> solution('1 1')\n    aBC\n    \"\"\"\n    n, k = map(int, stdin.split())\n\n    # We use a set to store the characters\n    characters = set()\n\n    for c in stdin:\n        if c in \"ABC\":\n            characters.add(c.lower())\n        else:\n            characters.add(c)\n\n    if k > len(characters):\n        raise ValueError\n\n    # List the characters in order of their frequency.\n    # The index of the most frequent character is the index of the character\n    # we should lowercase at.\n    most_frequent_characters = sorted(\n        characters, key=lambda x: stdin.count(x), reverse=True\n    )\n\n    for c in most_frequent_characters[k - 1 :]:\n        print(c, end=\"\")\n"
    },
    {
        "number": 4422,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(i) for i in stdin.split())\n\n    res = ''\n    for char in stdin:\n        if K == 1:\n            res += char.lower()\n        else:\n            res += char\n        K -= 1\n\n    return res"
    },
    {
        "number": 4422,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    S = stdin[3:n+3]\n    print(S.lower()[k-1])\n    return \"\""
    },
    {
        "number": 4422,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    # Write your code here\n    return"
    },
    {
        "number": 4422,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> import os\n    >>> import tempfile\n    >>> dirname, filename = os.path.split(os.path.abspath(__file__))\n    >>> test_input_filename = os.path.join(dirname, \"test_input\", filename)\n    >>> test_output_filename = os.path.join(dirname, \"test_output\", filename)\n    >>> with open(test_input_filename) as test_input_file, open(test_output_filename, \"w\") as test_output_file:\n   ...     test_input = test_input_file.read()\n   ...     solution(test_input)\n   ...     test_output_file.write(test_output)\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[n - 1]\n    if k <= n:\n        s = s[:k-1] + s[k - 1].lower() + s[k:]\n    return s\n"
    },
    {
        "number": 4422,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    return stdin[:K - 1] + stdin[K - 1].lower() + stdin[K:]"
    },
    {
        "number": 4422,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    print(s[:k].lower() + s[k:].lower())"
    },
    {
        "number": 4422,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    S = stdin[4:].strip()\n    print(S[K-1].lower())\n    return None\n\n\ndef"
    },
    {
        "number": 4423,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4423,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    line = stdin.readline().split()\n    while line:\n        city, score = line[0], int(line[1])\n        result.append((city, score))\n        line = stdin.readline().split()\n    for city, score in sorted(result, key=lambda x: (-x[1], x[0])):\n        print(len(result) - result.index(city))\n    return \"\"\n\nimport sys\n\nT = int(sys.stdin.readline().strip())\nfor _ in range(T):\n    N = int(sys.stdin.readline().strip())\n    R = [sys.stdin.readline().strip() for _ in range(N)]\n    print('\\n'.join(R))\n\nsolution(sys.stdin)\n\n-----Note-----\n\nUse sys.stdin.readline() and sys.stdin.read() to read input.\nsys.stdin.readline() reads an entire line, and sys.stdin.read() reads the remainder of the buffer.\nsys.stdin.read() reads a single byte (any value from 0 to 255) at a time, read line by line.\nsys.stdin.readlines() reads all the lines from the buffer.\n\nimport sys\n\nT = int(sys.stdin.readline().strip())\nfor _ in range(T):\n    N = int(sys.stdin.readline().strip())\n    R = [sys.stdin.readline().strip() for _ in range(N)]\n    print('\\n'.join(R))\n\nsolution(sys.stdin)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4423,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    restaurants = [tuple(map(int, line.split())) for line in lines[1:]]\n    restaurants = sorted(restaurants, key=lambda x: x[1], reverse=True)\n    for i in range(N):\n        print(i + 1)\n\"\"\"\n\ndef"
    },
    {
        "number": 4423,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    tokens = stdin.split('\\n')\n    N = int(tokens[0])\n    for i in range(1, N + 1):\n        city, score = tokens[i].split()\n        res.append(str(i))\n    return '\\n'.join(res)"
    },
    {
        "number": 4423,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4423,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    restaurants = []\n\n    for _ in range(N):\n        city, score = stdin.readline().split()\n        restaurants.append((city, int(score)))\n\n    restaurants.sort(key=lambda x: x[1])\n    restaurants.sort(key=lambda x: x[0])\n\n    result = []\n    for city, score in restaurants:\n        result.append(str(len(result) + 1))\n\n    return '\\n'.join(result)"
    },
    {
        "number": 4423,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    n = int(data[0])\n    cities = {}\n    for i in range(1, n + 1):\n        city, score = data[i].split()\n        cities[city] = int(score)\n    sorted_cities = sorted(cities.keys())\n    sorted_cities.reverse()\n    result = \"\"\n    for i in range(1, n + 1):\n        result += str(cities[sorted_cities[i - 1]]) + \"\\n\"\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4423,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cities = [sorted(stdin.readline().strip().split(\" \")) for _ in range(n)]\n    scores = [int(stdin.readline().strip()) for _ in range(n)]\n    result = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if cities[i][0] == cities[j][0]:\n                if scores[i] < scores[j]:\n                    result.append(j+1)\n                    break\n            elif cities[i][0] < cities[j][0]:\n                result.append(j+1)\n                break\n    return \" \".join(map(str, result))\n\nprint(solution(stdin))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4423,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n\n    N = int(stdin)\n\n    for i in range(N):\n        S, P = stdin.split()\n        result += f'{i + 1}'\n\n    return result\n\nprint(solution(input()))\n\n\"\"\"\n\nS = input()\nrestaurants = {}\n\nfor i in range(int(input())):\n    city, score = input().split()\n\n    if city not in restaurants:\n        restaurants[city] = [int(score)]\n    else:\n        restaurants[city].append(int(score))\n\nfor city in sorted(restaurants.keys(), reverse=True):\n    for score in sorted(restaurants[city], reverse=True):\n        print(score)\n"
    },
    {
        "number": 4423,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4424,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(' ')\n    K = int(input_data[0])\n    X = int(input_data[1])\n    if K < 1 or K > 100:\n        return 'Error: K is out of range'\n    if X < 1 or X > 10 ** 5:\n        return 'Error: X is out of range'\n    # count = (X // 500) * K\n    count = 0\n    while True:\n        if (X // 500) * K > X:\n            break\n        X -= (500 * (X // 500))\n        count += 1\n    if count > 0:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4424,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return \"Yes\" if Takahashi has K coins and can print a message of No.\"\"\"\n    K, X = map(int, stdin.split())\n    if X >= K * 500:\n        return \"Yes\"\n    return \"No\"\n\nassert solution(stdin) == stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4424,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 900\")\n    'Yes'\n    >>> solution(\"5 7\")\n    'No'\n    >>> solution(\"3 7\")\n    'No'\n    >>> solution(\"3 1\")\n    'No'\n    \"\"\"\n    N, K, X = [int(x) for x in stdin.split()]\n    if (K > 100) or (X > 10**5):\n        return \"No\"\n\n    if X % K == 0:\n        return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Print Yes if Takahashi has K coins that add up to X yen or more.\n    No otherwise.\n    \"\"\"\n    K, X = [int(x) for x in stdin.strip().split()]\n    if X >= K:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split(\" \"))\n    if (K * 500) > X:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, x = tuple(map(int, stdin.strip().split()))\n    return 'Yes' if k * 500 < x else 'No'\n\nprint(solution(input()))\n\"\"\"\ndef"
    },
    {
        "number": 4424,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(map(int, stdin.strip().split(\" \"))) >= int(stdin.strip()) else \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4424,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, X = [int(x) for x in stdin.split()]\n    return \"Yes\" if K >= X / 500 else \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, X = [int(x) for x in stdin.split()]\n    return 'Yes' if K >= (X // 500) else 'No'"
    },
    {
        "number": 4425,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    probability = 1\n    for i in range(k, n + 1):\n        probability *= (1 / i) ** (i - 1)\n    print(probability)\n\nsolution(input())\n\"\"\"\n\n\"\"\"\nIn order to get the same result, I only need to change the range in the for-loop.\n\"\"\"\ndef"
    },
    {
        "number": 4425,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(1 - (1 / (factorial(n) / (factorial(k) * factorial(n - k)))) ** n)\n\n\ndef"
    },
    {
        "number": 4425,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n\n    return str(1 - 1 / (2 ** (k - 1)) * sum(map(lambda x: 1 / (2 * x + 1), range(1, k))))"
    },
    {
        "number": 4425,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n\n    # Snuke has a fair N-sided die that shows the integers from 1 to N with equal probability and a fair coin. He will play the following game with them:\n    # - Throw the die. The current score is the result of the die.\n    # - As long as the score is between 1 and K-1 (inclusive), keep flipping the coin. The score is doubled each time the coin lands heads up, and the score becomes 0 if the coin lands tails up.\n    # - The game ends when the score becomes 0 or becomes K or above. Snuke wins if the score is K or above, and loses if the score is 0.\n    # You are given N and K. Find the probability that Snuke wins the game.\n    #\n    # Find the probability of Snuke winning the game with N dice showing K values.\n    # Hint: You can calculate the probability of any number of rolls, starting with 0 or 1.\n    #     - If you play it a single time, the probability of winning is equal to the probability of getting a score of K or higher.\n    #     - If you play it N times, the probability of winning is equal to the probability of getting a score of K or higher on the first roll.\n    #     - If you play it N-1 times, the probability of winning is equal to the probability of getting a score of K or higher on the first roll,\n    #       plus the probability of getting a score of K or higher on the second roll.\n    #     -...\n    #     - If you play it N-1 times, the probability of winning is equal to the probability of getting a score of K or higher on the first roll,\n    #       plus the probability of getting a score of K or higher on the second roll,\n    #       plus the probability of getting a score of K or higher on the third roll,\n    #      ...\n    #       plus the probability of getting a score of K or higher on the N-1 th roll.\n    #\n    # Calculate the probability of getting a score of K or higher on the first roll, and the probability of getting a score of K or higher on the second roll,\n    # and so on.\n    #\n    # The probability of winning on any single roll is equal to the probability of getting a score of K or higher.\n    # The probability of winning is equal to the probability of getting a score of K or higher on the first roll,\n    # plus the probability of getting a score of K or higher on the second roll,\n    # plus the probability of getting a score of K or higher on the third roll,\n    #...\n    # plus the probability of getting a score of K or higher on the N-1 th roll.\n    #\n    # To be certain that Snuke will win, you must have a probability of winning that is greater than the probability of winning on the first roll.\n    #\n    # You can determine the probability of winning by calculating the probability of getting a score of K or higher on the first roll,\n    # and then multiplying the result by the probability of getting a score of K or higher on the second roll,\n    # and so on.\n    #\n    # The formula is:\n    # P(K) = \\prod_{i=1}^{N} (1 - \\frac{1}{2^i})^{N - i}\n    #\n    # In other words, P(K) is the probability of getting a score of K on the first roll.\n    # In other words, P(K) is the probability of getting a score of K or higher on the first roll,\n    # and the probability of getting a score of K or higher on the second roll, and so on.\n    #\n    # Thus, P(K) is the probability of getting a score of K on the first roll,\n    # plus the probability of getting a score of K or higher on the second roll,\n    # plus the probability of getting a score of K or higher on the third roll,\n    #...\n    # plus the probability of getting a score of K or higher on the N-1 th roll.\n    #\n    # Thus, P(K) = P(K) \\times P(K - 1) \\times P(K - 2) \\times P(K - 3) \\times P(K - 4) \\times... \\times P(K - N + 1)\n    #\n    # The probability of getting a score of K or higher on the first roll is equal to the probability of getting a score of K or higher on the first roll,\n    # plus the probability of getting a score of K or higher on the second roll,\n    # plus the probability of getting a score of K or higher on the third roll,\n    #...\n    # plus the probability of getting a score of K or higher on the N-1 th roll.\n    #\n    # Note that the probability of getting a score of K or higher on the first roll is equal to the probability of getting a score of K or higher on the first roll,\n    # plus the probability of getting a score of K or higher on the second roll,\n    #...\n    # plus the probability of getting a score of K or higher on the N-1 th roll.\n    #\n    # Thus, the probability of getting a score of K or higher on the first roll is equal to the probability of getting a score of K or higher on the first roll,\n    # plus the probability of getting a score of K or higher on the second roll,\n    #...\n    # plus the probability of getting a score of K or higher on the N-1 th roll.\n    #\n    # Thus, the probability of getting a score of K or higher on the first roll is equal to the probability of getting a score of K or higher on the first roll,\n    # plus the probability of getting a score of K or higher on the second roll,\n    #...\n    # plus the probability of getting a score of K or higher on the N-1 th roll.\n    #\n    # Thus, the probability of getting a score of K or higher on the first roll is equal to the probability of getting a score of K or higher on the first roll,\n    #...\n    # plus the probability of getting a score of K or higher on the N-1 th roll.\n    #\n    # Thus, the probability of getting a score of K or higher on the first roll is equal to the probability of getting a score of K or higher on the first roll,\n    # plus the probability of getting a score of K or higher on the second roll,\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    #...\n    "
    },
    {
        "number": 4425,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    total = (1/n)**n\n    if k == 1:\n        return f\"{total:.12f}\"\n    elif k == 2:\n        return f\"{total:.12f}\"\n    elif k == 3:\n        return f\"{total:.12f}\"\n    elif k == 4:\n        return f\"{total:.12f}\"\n    else:\n        return f\"{total:.12f}\"\n\nassert(solution(\"10 1\") == \"0.145833333333\")\nassert(solution(\"5 100\") == \"0.1698666666666\")\nassert(solution(\"5 1000\") == \"0.1525\")\nassert(solution(\"10 1\") == \"0.145833333333\")\nassert(solution(\"10 2\") == \"0.136833333333\")\nassert(solution(\"10 3\") == \"0.1216666666667\")\nassert(solution(\"10 4\") == \"0.111833333333\")\nassert(solution(\"10 5\") == \"0.09888888888889\")\nassert(solution(\"10 6\") == \"0.090909090909091\")\nassert(solution(\"10 7\") == \"0.08675675675676\")\nassert(solution(\"10 8\") == \"0.0818181818181819\")\nassert(solution(\"10 9\") == \"0.0772972972972974\")\nassert(solution(\"10 10\") == \"0.0714285714285715\")\nassert(solution(\"10 11\") == \"0.0681818181818182\")\nassert(solution(\"10 12\") == \"0.06464646464646465\")\nassert(solution(\"10 13\") == \"0.0617647058823529\")\nassert(solution(\"10 14\") == \"0.0588235294117647\")\nassert(solution(\"10 15\") == \"0.0555555555555555\")\nassert(solution(\"10 16\") == \"0.05263157894736843\")\nassert(solution(\"10 17\") == \"0.04938271604938273\")\nassert(solution(\"10 18\") == \"0.04594594594594595\")\nassert(solution(\"10 19\") == \"0.04380952380952381\")\nassert(solution(\"10 20\") == \"0.04210526315789474\")\nassert(solution(\"10 21\") == \"0.0410526315789474\")\nassert(solution(\"10 22\") == \"0.03875854437482685\")\nassert(solution(\"10 23\") == \"0.03646950641186523\")\nassert(solution(\"10 24\") == \"0.03513513513513514\")\nassert(solution(\"10 25\") == \"0.03275777777777778\")\nassert(solution(\"10 26\") == \"0.03170542635651864\")\nassert(solution(\"10 27\") == \"0.03076923076923077\")\nassert(solution(\"10 28\") == \"0.0303030303030303\")\nassert(solution(\"10 29\") == \"0.02984615384615385\")\nassert(solution(\"10 30\") == \"0.02979502290229023\")\nassert(solution(\"10 31\") == \"0.02959229029597292\")\nassert(solution(\"10 32\") == \"0.02917391304347826\")\nassert(solution(\"10 33\") == \"0.02886016899975586\")\nassert(solution(\"10 34\") == \"0.02846153846153847\")\nassert(solution(\"10 35\") == \"0.02810169607845377\")\nassert(solution(\"10 36\") == \"0.02767605633802817\")\nassert(solution(\"10 37\") == \"0.02727272727272727\")\nassert(solution(\"10 38\") == \"0.02708633361290805\")\nassert(solution(\"10 39\") == \"0.02662297072676247\")\nassert(solution(\"10 40\") == \"0.02621621621621622\")\nassert(solution(\"10 41\") == \"0.02594729432525633\")\nassert(solution(\"10 42\") == \"0.02560363717802948\")\nassert(solution(\"10 43\") == \"0.02520956842057926\")\nassert(solution(\"10 44\") == \"0.02487921520831236\")\nassert(solution(\"10 45\") == \"0.02455436592036913\")\nassert(solution(\"10 46\") == \"0.02422144858284881\")\nassert(solution(\"10 47\") == \"0.02393685436871654\")\nassert(solution(\"10 48\") == \"0.02361795349123774\")\nassert(solution(\"10 49\") == \"0.02326750726446814\")\nassert(solution(\"10 50\") == \"0.02301972301972301\")\nassert(solution(\"10 51\") == \"0.02275472522615477\")\nassert(solution(\"10 52\") == \"0.02238492261030743\")\nassert(solution(\"10 53\") == \"0.02205348066244523\")\nassert(solution(\"10 54\") == \"0.02173913043478261\")\nassert(solution(\"10 55\") == \"0.02156496815185547\")\nassert(solution(\"10 56\") == \"0.02136463157976293\")\nassert(solution(\"10 57\") == \"0.02083333333333334\")\nassert(solution(\"10 58\") == \"0.02040816326530613\")\nassert(solution(\"10 59\") == \"0.02034482758620694\")\nassert(solution(\"10 60\") == \"0.01989917967586839\")\nassert(solution(\"10 61\") == \"0.0195458984375\")\nassert(solution(\"10 62\") == \"0.01922607322580664\")\nassert(solution(\"10 63\") == \"0.01893624270500536\")\nassert(solution(\"10 64\") == \"0.01870110131801936\")"
    },
    {
        "number": 4425,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split(' ')))\n    wins = 0.0\n    for i in range(1, K + 1):\n        wins += i / 2 / N\n    return str(wins)"
    },
    {
        "number": 4425,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(1 / (6 ** (k + 1) - 6 ** k))"
    },
    {
        "number": 4425,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    # The probability that Snuke wins the game is \\frac{1}{48} + \\frac{1}{24} + \\frac{1}{12}\n    # = \\frac{7}{48} = 0.1458333333\n    return str(1/48)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4425,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split(\" \"))\n    print(1 - (1 / (2 * (1 + n) ** k)))"
    },
    {
        "number": 4425,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    # https://www.youtube.com/watch?v=l7Zts-yH6tU\n    print(1 / 48 + 1 / 24 + 1 / 12)\n"
    },
    {
        "number": 4426,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    day_to_num = {\n        'SUN': 0,\n        'MON': 1,\n        'TUE': 2,\n        'WED': 3,\n        'THU': 4,\n        'FRI': 5,\n        'SAT': 6\n    }\n\n    day = day_to_num[stdin]\n\n    return len(['SUN', 'SAT']) - day\n\nprint(solution(input()))\n"
    },
    {
        "number": 4426,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return"
    },
    {
        "number": 4426,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"SUN\":\n        return \"0\"\n\n    days = {\n        \"SUN\": \"SAT\",\n        \"MON\": \"SUN\",\n        \"TUE\": \"SAT\",\n        \"WED\": \"SAT\",\n        \"THU\": \"SAT\",\n        \"FRI\": \"SAT\",\n        \"SAT\": \"SUN\",\n    }\n    return days[stdin]\n"
    },
    {
        "number": 4426,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4426,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    day = stdin[:1]\n    return (7 - {'SUN': 0, 'MON': 1, 'TUE': 2, 'WED': 3, 'THU': 4, 'FRI': 5, 'SAT': 6}[day])"
    },
    {
        "number": 4426,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '''def solution(stdin: str) -> str:\n    return '''"
    },
    {
        "number": 4426,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return stdin"
    },
    {
        "number": 4426,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ..."
    },
    {
        "number": 4426,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    day = stdin[:stdin.find(' ')]\n    stdin = stdin[stdin.find(' '):].strip()\n    if stdin.find('.')!= -1:\n        stdin = stdin.split('.')[0]\n\n    days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n    mapping = {\n        'SUN': 0,\n        'MON': 1,\n        'TUE': 2,\n        'WED': 3,\n        'THU': 4,\n        'FRI': 5,\n        'SAT': 6\n    }\n    print(days.index(day) + int(stdin))"
    },
    {
        "number": 4426,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return '\\n'.join([str(i) for i in range(1, 7)])"
    },
    {
        "number": 4427,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, d, x = map(int, stdin.split())\n    for i in range(2001, 2011):\n        x_new = r * x - d\n        print(x_new)\n    return \"\""
    },
    {
        "number": 4427,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip().split(' ')\n    print(*[int(x) for x in n[1:]], sep='\\n')"
    },
    {
        "number": 4427,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4427,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, d, x = [int(x) for x in stdin.split()]\n    res = [x - d for x in range(x, x + 10)]\n    return '\\n'.join(str(x) for x in res)"
    },
    {
        "number": 4427,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    pass"
    },
    {
        "number": 4427,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4427,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The weight of the algae is initially x_0 gram. After 2000 years, the weight is updated as follows:\n    x_{i+1} = rx_i - D\n    where r is the growth rate r and D is the weight of the algae in the pond at the beginning of the year i.\n    The initial weight is given by x_0 = x_{2000}.\n    \"\"\"\n    growthRate, weightOfAlgae, weightOfPond = [int(n) for n in stdin.split()]\n\n    # x_{i+1} = rx_i - D\n    # where r is the growth rate r and D is the weight of the algae in the pond at the beginning of the year i.\n    for i in range(2000, 2010):\n        print(int(weightOfPond + (growthRate * weightOfAlgae) - (weightOfPond + (growthRate * weightOfAlgae))))\n"
    },
    {
        "number": 4427,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    r = int(stdin[0])\n    D = int(stdin[1])\n    x = int(stdin[2])\n    for i in range(2001, 2011):\n        print(x - r * i - D)\n    return ''\n\n\ndef"
    },
    {
        "number": 4427,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split()]\n    return '\\n'.join(str(x) for x in range(inputs[2]+1, inputs[2]+10+1))"
    },
    {
        "number": 4427,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x = [int(stdin) for _ in range(3)]\n    res = [D]\n    for i in range(2000, 2001):\n        res.append(r * res[-1] - D)\n    return \"\\n\".join(map(str, res))"
    },
    {
        "number": 4428,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = [int(x) for x in stdin.readline().split()]\n\n    return str(max(0, n - 1 - sum(d[0:n:2]), n - 1 - sum(d[1:n:2])))"
    },
    {
        "number": 4428,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = list(map(int, stdin.readline().split()))\n    d.sort()\n    s1 = 0\n    s2 = sum(d)\n    s3 = sum(d) - s1\n    s = 0\n    for i in range(n):\n        s += d[i]\n        if s == s1 or s == s3:\n            return s\n        elif s == s2:\n            return s1\n    return s1\n\n\nassert(solution('''5\n1 3 1 1 4\n''')) == 5\nassert(solution('''5\n1 3 2 1 4\n''')) == 4\nassert(solution('''3\n4 1 2\n''')) == 0\nassert(solution('''3\n4 1 2\n''')) == 0\n"
    },
    {
        "number": 4428,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    \n    data = [int(stdin) for stdin in stdin.split()]\n    \n    def check(d: int) -> bool:\n        sum1 = sum(d)\n        sum2 = sum(d[1:])\n        \n        return sum1 == sum2\n    \n    max_sum = None\n    \n    for i in range(0, size):\n        for j in range(i + 1, size):\n            a, b, c = i, j, size - 1 - (i + j)\n            \n            if a > b:\n                a, b = b, a\n            \n            if b > c:\n                b, c = c, b\n            \n            if check(data[:a] + data[a:b] + data[b:]):\n                cur_sum = sum(data[:a] + data[a:b] + data[b:])\n                \n                if max_sum is None or max_sum < cur_sum:\n                    max_sum = cur_sum\n    \n    return str(max_sum)"
    },
    {
        "number": 4428,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The input is 5 integers: 1, 3, 1, 1, 4.\n    The output is a single integer: 5.\n    \"\"\"\n    n = int(stdin)\n    input_line = stdin.split()\n    input_line = [int(item) for item in input_line]\n    a = input_line[0]\n    b = n - a\n    c = input_line[-1]\n    d = n - c\n    if a == c:\n        if sum(input_line[1:a]) == sum(input_line[a + 1:-1]):\n            print(sum(input_line))\n        else:\n            print(0)\n    else:\n        print(max(sum(input_line[:a]), sum(input_line[a + 1:a + b]), sum(input_line[a + b + 1:])))\n    return \"\"\n"
    },
    {
        "number": 4428,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = [int(x) for x in stdin.readline().split()]\n    d.sort()\n    m = sum(d)\n    if m % 3!= 0:\n        return 0\n    m //= 3\n    i = 0\n    s = 0\n    while s < m:\n        s += d[i]\n        i += 1\n    return m"
    },
    {
        "number": 4428,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().strip().split()))\n\n    max_sum = 0\n\n    for i in range(size):\n        sum_1 = sum(numbers[:i])\n        sum_2 = sum(numbers[i:i + size // 3])\n        sum_3 = sum(numbers[i + size // 3:])\n\n        if sum_1 == sum_3 and sum_1 > max_sum:\n            max_sum = sum_1\n        elif sum_2 == sum_3 and sum_2 > max_sum:\n            max_sum = sum_2\n        elif sum_3 == sum_1 and sum_3 > max_sum:\n            max_sum = sum_3\n\n    return str(max_sum)\n\n\nassert solution('''5\n1 3 1 1 4\n''') == '5'\nassert solution('''5\n1 3 2 1 4\n''') == '4'\nassert solution('''3\n4 1 2\n''') == '0'\nassert solution('''7\n1 2 3 4 5 6 7\n''') == '14'\n"
    },
    {
        "number": 4428,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    max_s1 = 0\n    l = sorted(l)\n    for i in range(n):\n        sum1 = sum(l[i:i + n // 3])\n        sum2 = sum(l[n // 3:n // 3 * 2])\n        sum3 = sum(l[n // 3 * 2:])\n        if sum1 == sum3 and max_s1 < sum1:\n            max_s1 = sum1\n    return str(max_s1)\n"
    },
    {
        "number": 4428,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr_sum = sum(arr)\n    res = arr_sum\n    if arr_sum % 3!= 0:\n        return 0\n    a, b, c = arr_sum // 3, arr_sum // 3, arr_sum // 3\n    arr_sum = a + b + c\n    res = max(res, arr_sum)\n    for i in range(n):\n        if arr_sum - arr[i] < res:\n            continue\n        arr_sum -= arr[i]\n        a, b, c = arr_sum // 3, arr_sum // 3, arr_sum // 3\n        arr_sum = a + b + c\n        res = max(res, arr_sum)\n    return res"
    },
    {
        "number": 4428,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    nums = list(map(int, stdin.split(' ')))\n\n    sum1 = sum(nums)\n\n    if sum1 % 3!= 0:\n        return '0'\n\n    sum2 = sum(nums[:sum1 // 3])\n    sum3 = sum(nums[sum1 // 3:])\n\n    if sum2 == sum3:\n        return str(sum1)\n\n    max_sum = 0\n\n    for i in range(1, num):\n        sum1 -= nums[i - 1]\n        sum2 += nums[i]\n        sum3 -= nums[i]\n\n        if sum1 == sum3:\n            return str(i + 1)\n\n        if sum2 == sum3:\n            return str(i)\n\n        if sum2 > sum3 and max_sum < sum2:\n            max_sum = sum2\n\n        if sum2 < sum3 and max_sum < sum3:\n            max_sum = sum3\n\n    return str(max_sum)"
    },
    {
        "number": 4428,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().split()]\n    parts = [[] for _ in range(3)]\n    part_sum = 0\n    for i in range(n):\n        part_sum += arr[i]\n        if part_sum == 0:\n            part_sum = 3\n        if part_sum % 3!= 0:\n            parts[part_sum % 3 - 1].append(arr[i])\n    return str(max(sum(parts[0]), sum(parts[1]), sum(parts[2])))\n\n\ndef"
    },
    {
        "number": 4429,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        x, y, z = stdin.strip().split()\n        x, y, z = int(x), int(y), int(z)\n        if x == max(x, y, z):\n            print('YES')\n            print(x, y, z)\n        else:\n            print('NO')\n\nsolution(input())\n"
    },
    {
        "number": 4429,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n_cases = int(stdin.readline().strip())\n    for _ in range(n_cases):\n        x, y, z = map(int, stdin.readline().strip().split())\n        if x >= y and x >= z:\n            print(\"YES\")\n            a, b, c = x, x, x\n        elif y >= z:\n            print(\"YES\")\n            a, b, c = y, y, y\n        else:\n            print(\"NO\")\n            a, b, c = z, z, z\n        print(a, b, c)\n    return \"\""
    },
    {
        "number": 4429,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from sys import stdin,stdout\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x,y,z = map(int,stdin.readline().strip().split())\n        if x < y < z or x > y > z:\n            stdout.write(\"NO\\n\")\n        else:\n            stdout.write(\"YES\\n\")\n            stdout.write(\"{0} {1} {2}\\n\".format(x,y,z))\n    return \"\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        X, Y, Z = [int(x) for x in stdin.readline().strip().split(' ')]\n        a, b, c = None, None, None\n        if X == max(X, Y, Z):\n            a = Y\n            b = Z\n        elif Y == max(X, Y, Z):\n            a = X\n            b = Z\n        elif Z == max(X, Y, Z):\n            a = X\n            b = Y\n        if a is not None:\n            print('YES', a, b, c)\n        else:\n            print('NO')\n"
    },
    {
        "number": 4429,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        x, y, z = map(int, stdin.readline().strip().split(' '))\n        if x == max(x, y, z):\n            print('YES')\n            print(max(x, y, z))\n            print(x, y, z)\n        else:\n            print('NO')"
    },
    {
        "number": 4429,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return \"NO\" if there is no solution, else return the number of positive integers a, b, c.\n    '''\n    N = int(stdin)\n    for _ in range(N):\n        x, y, z = map(int, stdin.split())\n        if x == max(x, y, z):\n            if x == max(y, z):\n                if x < y < z:\n                    print(\"YES\")\n                    print(x, y, z)\n                    continue\n        print(\"NO\")"
    },
    {
        "number": 4429,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        a, b, c = map(int, stdin.readline().split())\n        if a > b and a > c:\n            print('NO')\n            continue\n        if b > a and b > c:\n            print('NO')\n            continue\n        if c > a and c > b:\n            print('NO')\n            continue\n        print('YES')\n        print(a, b, c)\n    return ''"
    },
    {
        "number": 4429,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"\\\n5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n    \"\"\")\n    'YES'\n    >>> solution(\"\"\"\\\n5\n3 2 3\n100 100 100\n50 49 49\n10 30 20\n1 1000000000 1000000000\n    \"\"\")\n    'NO'\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4429,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n\n    for t in range(T):\n        x, y, z = map(int, stdin.readline().strip().split())\n\n        ans = \"NO\"\n        for a in range(1, z + 1):\n            for b in range(a + 1, z + 1):\n                if x == max(a, b):\n                    for c in range(b + 1, z + 1):\n                        if y == max(a, c) and z == max(b, c):\n                            ans = \"YES\"\n                            break\n\n        print(ans)\nsolution(None)\n"
    },
    {
        "number": 4429,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    t = int(stdin.readline())\n    for _ in range(t):\n        x, y, z = map(int, stdin.readline().split())\n        if x == max(y, z):\n            print('YES')\n            print(y, z, x)\n        else:\n            print('NO')"
    },
    {
        "number": 4430,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n\n    objects = list(map(int, stdin.split()))\n    objects.sort(reverse=True)\n\n    boxes = [0] * k\n    max_objects = 0\n\n    for i in range(n):\n        # if not all the boxes are filled\n        if i < k and (k - i) < objects[i]:\n            max_objects = -1\n            break\n\n        if i < m:\n            boxes[i] += 1\n            continue\n\n        for j in range(1, i + 1):\n            if boxes[j] + 1 < objects[i]:\n                boxes[j] += 1\n            else:\n                break\n        if j == i:\n            max_objects = max(max_objects, i)\n\n    return max_objects\n\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 4)\nassert(solution(input) == 1)\nassert(solution(input) == 5)\nassert(solution(input) == 0)\nassert(solution(input) == 5)\nassert(solution(input) == 0"
    },
    {
        "number": 4430,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4430,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_objects, num_boxes, box_size = map(int, stdin.split())\n    objects = list(map(int, stdin.split()))\n    remaining_objects = set(objects)\n    for i in range(num_objects):\n        if objects[i] <= box_size:\n            box_size -= objects[i]\n            remaining_objects.remove(objects[i])\n    return str(len(remaining_objects))\n"
    },
    {
        "number": 4430,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    objects = [int(x) for x in stdin.split()]\n    left_objects = set(range(1, n + 1))\n    boxes = [[] for x in range(m)]\n    for i in range(n):\n        boxes[0].append(objects[i])\n        left_objects.remove(objects[i])\n    \n    while left_objects:\n        curr_box = 0\n        while len(boxes[curr_box]) < k:\n            if len(left_objects) == 0:\n                return '0'\n            if len(left_objects) == 1:\n                boxes[curr_box].append(left_objects.pop())\n                break\n            left, right = boxes[curr_box][0], boxes[curr_box][-1]\n            if left + right <= k:\n                boxes[curr_box].append(left)\n                left_objects.remove(left)\n            else:\n                boxes[curr_box].append(left)\n                left_objects.remove(left)\n                curr_box += 1\n        if len(left_objects) == 0:\n            return str(m)\n        if len(left_objects) == 1:\n            boxes[curr_box].append(left_objects.pop())\n    return str(m)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4430,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(x) for x in stdin.strip().split())\n    a = [int(x) for x in stdin.strip().split()]\n    a.sort()\n    min_k = min(k, m*a[-1])\n    # print(n, m, k)\n    # print(a)\n    for i in range(n):\n        k -= a[i]\n        m -= 1\n        if k < 0:\n            # print(i)\n            return i\n    return n\n"
    },
    {
        "number": 4430,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    s = set(a)\n    s = sorted(list(s))\n    print(s)\n    print(a)\n    print(len(s))\n    # a = a[:len(a)-1]\n\n    # if len(s) == 0:\n    #     return str(1)\n    # if len(s) == 1:\n    #     return str(a[0])\n    # if len(s) == 2:\n    #     return str(a[1])\n    # if len(s) == 3:\n    #     return str(a[2])\n    # if len(s) == 4:\n    #     return str(a[3])\n"
    },
    {
        "number": 4430,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    print(n * (n + 1) // 2)\n"
    },
    {
        "number": 4430,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    objects = [int(i) for i in stdin.split()]\n    remainder = len(objects) - m * k\n    res = 0\n    for i in range(k):\n        res = max(res, remainder // k + i)\n    return str(res)"
    },
    {
        "number": 4430,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = [int(n) for n in stdin.split()]\n    A = [int(n) for n in stdin.split()]\n    C = 0\n    count = 0\n    for j in range(M):\n        A.sort()\n        for i in range(N):\n            if A[i] <= K:\n                K -= A[i]\n                A[i] = 0\n                count += 1\n            else:\n                break\n        C = max(C, count)\n        count = 0\n    return str(C)"
    },
    {
        "number": 4430,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    boxes = [int(x) for x in stdin.split()]\n    objects = [int(x) for x in stdin.split()]\n    max_objects = 0\n    left_box = 0\n    for i, size in enumerate(boxes):\n        if i == len(boxes) - 1:\n            continue\n        while size < k:\n            if left_box < m:\n                left_box += 1\n                size += objects[i]\n            else:\n                break\n        max_objects = max(max_objects, left_box)\n        left_box = 0\n    return str(max_objects)\n\n\nassert solution(\"5 2 6\") == \"4\"\nassert solution(\"5 1 4\") == \"1\"\nassert solution(\"5 3 3\") == \"5\"\nassert solution(\"1 2 3 1 1\") == \"5\"\nassert solution(\"1 2 2 3 1\") == \"1\"\nassert solution(\"1 2 2 3 2\") == \"2\"\nassert solution(\"1 2 1 2 2\") == \"2\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def helper(left: int, right: int, excluded: set[str]) -> int:\n        if left == right:\n            return 1\n        else:\n            return helper(left + 1, right, excluded) + helper(left, right - 1, excluded)\n\n    n, k = map(int, stdin.split())\n    s = stdin[3:]\n    available = set(stdin[2:])\n    return str(helper(0, len(s), available))\n\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4431,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num, k = [int(n) for n in stdin.split()]\n    s = stdin.split()[1]\n    available = stdin.split()[2][:]\n    k = len(available)\n    s = ''.join(sorted(s))\n    result = 0\n    for i in range(num - k + 1):\n        for j in range(1, k + 1):\n            if s[i:i + j] in available:\n                available.remove(s[i:i + j])\n                result += 1\n                break\n    return result\n\nassert(solution(\"\"\"7 2\nabacaba\na b\"\"\") == \"12\")\nassert(solution(\"\"\"10 3\nsadfaasdda\nf a d\"\"\") == \"21\")\nassert(solution(\"\"\"7 1\naaaaaaa\nb\"\"\") == \"0\")\nassert(solution(\"\"\"10 6\nqwertyuiopasdfghjklzxcvbnm\nzxcvbnm\"\"\") == \"36\")\n\"\"\"\n\ndef"
    },
    {
        "number": 4431,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = [int(i) for i in lines[0].split()]\n    s = lines[1]\n    c = [i for i in lines[2].split()]\n\n    keyboard = {\n        'a': 0,\n        'b': 1,\n        'c': 2,\n        'd': 3,\n        'e': 4,\n        'f': 5,\n        'g': 6,\n        'h': 7,\n        'i': 8,\n        'j': 9,\n        'k': 10,\n        'l': 11,\n       'm': 12,\n        'n': 13,\n        'o': 14,\n        'p': 15,\n        'q': 16,\n        'r': 17,\n       's': 18,\n        't': 19,\n        'u': 20,\n        'v': 21,\n        'w': 22,\n        'x': 23,\n        'y': 24,\n        'z': 25,\n    }\n\n    valid_substrings = 0\n\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            if i == 0 and j == n - 1:\n                valid_substrings += 1\n\n            if keyboard[s[i]]!= keyboard[s[j]]:\n                continue\n\n            if keyboard[s[i]] < keyboard[c[0]]:\n                valid_substrings += 26 * (j - i - 1)\n\n    return str(valid_substrings)\n\nassert(solution('7 1\\nabacaba\\nf a d\\n',) == '0')\nassert(solution('7 2\\nabacaba\\na b\\n',) == '12')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '21')\nassert(solution('10 3\\nsadfaasdda\\nf a d\\n',) == '12')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '26')\nassert(solution('7 2\\naaaaabb\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '24')\nassert(solution('7 2\\naaaaabb\\na b\\n',) == '4')\nassert(solution('7 1\\nabacaba\\nb\\n',) == '12')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '26')\nassert(solution('7 2\\naaaaabb\\na b\\n',) == '4')\nassert(solution('7 2\\naaaaabb\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\nassert(solution('7 1\\naaaaaaa\\nb\\n',) == '27')\nassert(solution('7 2\\naaaaaaa\\na b\\n',) == '4')\n"
    },
    {
        "number": 4431,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    s = stdin[-n:]\n    chars = stdin[:k]\n    return len(s) * (n - 1) // 2"
    },
    {
        "number": 4431,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # split stdin into input line and result line\n    (n, k) = [int(x) for x in stdin.split()]\n    s = stdin[n + 1:]\n    c = [stdin[x] for x in range(1, k + 1)]\n    return str(solution_loop(s, c))\n\ndef"
    },
    {
        "number": 4431,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[2:]\n    print(len(s) - n + 1)"
    },
    {
        "number": 4431,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    string = stdin[2:]\n    char_list = list(stdin[0])\n    char_list = list(set(char_list))\n    char_list = sorted(char_list)\n    char_dict = {char: 1 for char in char_list}\n    print(char_dict)\n    print(n, k)\n    print(string)\n    # my_dict = {}\n    # for s in range(1, n):\n    #     my_dict[s] = int(math.floor(n / s))\n    # print(my_dict)\n"
    },
    {
        "number": 4431,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4431,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    allowed = list(stdin.strip())\n    return str(count(s, allowed))\n\ndef"
    },
    {
        "number": 4431,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[6:].strip()\n    if n == 1:\n        return k * s\n    else:\n        return (k - 1) * (n - 1) * s"
    },
    {
        "number": 4432,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # a = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.strip().split(' ')]\n\n    def max_by_size_alternating_subsequence(k: int) -> int:\n        max_length = 0\n        max_size = 0\n\n        for i in range(len(a) - k + 1):\n            s = sum([a[j] for j in range(i, i + k)])\n            if s > max_size:\n                max_size = s\n                max_length = k\n\n        return max_size\n\n    print(max_by_size_alternating_subsequence(3))\n\n\n\ndef"
    },
    {
        "number": 4432,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [int(x) for x in stdin.split()]\n    a = [x for x in s if x > 0]\n    b = [x for x in s if x < 0]\n    i = len(a)\n    sum_a = sum(a)\n    sum_b = sum(b)\n    max_sum_a = 0\n    max_sum_b = 0\n    while i > 1:\n        j = i\n        k = i\n        while j > 0:\n            if a[j - 1] > b[k - 1]:\n                a[j - 1] -= b[k - 1]\n                if a[j - 1] > max_sum_a:\n                    max_sum_a = a[j - 1]\n                k -= 1\n            else:\n                b[k - 1] -= a[j - 1]\n                if b[k - 1] > max_sum_b:\n                    max_sum_b = b[k - 1]\n                j -= 1\n            j -= 1\n        i -= 1\n        if max_sum_a > max_sum_b:\n            max_sum = max_sum_a\n        else:\n            max_sum = max_sum_b\n    return str(max_sum)\n\nsolution(\"1 2 3 -1 -2\")\nsolution(\"4\")\nsolution(\"-1 -2 -1 -3\")\nsolution(\"10\")\nsolution(\"-2 8 3 8 -4 -15 5 -2 -3 1\")\nsolution(\"6\")\nsolution(\"1 -1000000000 1 -1000000000 1 -1000000000\")\nsolution(\"1 1000000000 1 1000000000 1 1000000000\")\n"
    },
    {
        "number": 4432,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    a = a[::-1]\n    b = a[:]\n    for i in range(1, len(a)):\n        if a[i] > 0:\n            b[i] += b[i-1]\n        elif a[i] < 0:\n            b[i] += b[i-1]\n    b.sort()\n    c = [a[i] + b[i] for i in range(len(a))]\n    max_length = len(c)\n    max_sum = sum(c[0:max_length])\n    for length in range(1, max_length):\n        if c[length] - c[length-1] > max_sum:\n            max_sum = c[length] - c[length-1]\n    return str(max_sum)"
    },
    {
        "number": 4432,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    max_sum = -1000000000\n    for _ in range(n):\n        numbers = [int(x) for x in stdin.readline().split()]\n        max_sum = max(max_sum, sum(numbers[::2]) - sum(numbers[1::2]))\n    return str(max_sum)"
    },
    {
        "number": 4432,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number_of_tests = int(stdin.readline())\n\n    for i in range(number_of_tests):\n        n = int(stdin.readline())\n        numbers = list(map(int, stdin.readline().split()))\n        print(max_sum_by_size(numbers, n))\n\ndef"
    },
    {
        "number": 4432,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = [a[0]]\n    for i in range(1, n):\n        if s[-1] < 0 and a[i] > 0:\n            s.append(a[i])\n        elif s[-1] > 0 and a[i] < 0:\n            s.append(a[i])\n    return max(s)\n\nprint(solution(None))"
    },
    {
        "number": 4432,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4432,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Read the data and return the maximum possible sum.\n    \"\"\"\n    data = list(map(int, stdin.split()))\n    n = data[0]\n    data = data[1:]\n    data = sorted(data, reverse=True)\n\n    # This loop will be to find the maximum by size (length) alternating subsequence.\n    for i in range(n - 2, 0, -1):\n        if data[i] < 0:\n            break\n    max = data[i]\n    if i == n - 1:\n        max = 0\n    for j in range(n - 1, i - 1, -1):\n        if data[j] < 0:\n            max += data[j]\n        else:\n            max += max\n    return max"
    },
    {
        "number": 4432,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()[:-1]\n    A = []\n    for i in range(int(n)):\n        A.append(int(stdin.readline()[:-1]))\n    k = 1\n    res = [-float(\"inf\")] * k\n    while k < len(A) + 1:\n        for i in range(0, len(A) - k + 1, 2):\n            if A[i] > A[i + 1]:\n                res[k - 1] = A[i] + A[i + 1]\n            else:\n                res[k - 1] = A[i + 1] + A[i]\n        k += 1\n    return \" \".join([str(x) for x in res])\n"
    },
    {
        "number": 4432,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4433,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    graph = {}\n    for i in range(m):\n        v, u = [int(i) for i in stdin.split()]\n        graph[v] = graph.get(v, []) + [u]\n        graph[u] = graph.get(u, []) + [v]\n\n    v = 0\n    visited = set()\n    stack = [v]\n    while stack:\n        v = stack[-1]\n        if v in visited:\n            stack.pop()\n        visited.add(v)\n        for u in graph.get(v, []):\n            if u not in visited:\n                stack.append(u)\n    return''.join([str(i) for i in stack])"
    },
    {
        "number": 4433,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from math import sqrt\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    edges.sort(key=lambda x: (x[0], x[1]))\n    max_deg = 0\n    for i in range(n):\n        max_deg = max(max_deg, len(edges) - i)\n    return \"\\n\".join(f\"{v} {u}\" for v, u in edges if len(edges) - max_deg == max_deg)\n    \n"
    },
    {
        "number": 4433,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4433,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = collections.defaultdict(list)\n    for _ in range(m):\n        v1, v2 = map(int, stdin.split())\n        graph[v1 - 1].append(v2 - 1)\n        graph[v2 - 1].append(v1 - 1)\n    tree_edges = []\n    nodes = set(range(n))\n    while len(nodes) > 2:\n        source = nodes.pop()\n        stack = [source]\n        while stack:\n            node = stack.pop()\n            tree_edges.append(node + 1)\n            for child in graph[node]:\n                nodes.discard(child)\n                stack.append(child)\n    return''.join(map(str, tree_edges))"
    },
    {
        "number": 4433,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, stdin.split())))\n    edges.sort(key=lambda x: x[1])\n    tree = set()\n    visited = set()\n    max_degree = 0\n    for e in edges:\n        v, u = e\n        if v not in visited and u not in visited:\n            visited.update([v, u])\n            max_degree = max(max_degree, len(visited))\n            tree.add(e)\n    return '\\n'.join(str(e[0]) for e in tree)\n\nassert(solution('''5 5\n1 2\n2 3\n3 5\n4 3\n1 5''') == '3 5'\nassert(solution('''4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n''') == '4 1'\nassert(solution('''8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8''') == '3 2'\nassert(solution('''8 10\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n5 6\n6 7\n7 8''') == '2 5'\nassert(solution('''10 11\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n7 9\n8 10''') == '4 1')\nassert(solution('''10 12\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11''') == '3 2')\nassert(solution('''10 13\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n7 9\n8 10\n9 11\n10 12''') == '4 1')\nassert(solution('''10 14\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n7 9\n8 10\n9 11\n10 12\n11 13''') == '2 5')\nassert(solution('''10 15\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15''') == '4 1')\nassert(solution('''10 16\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16''') == '4 1')\nassert(solution('''10 17\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17''') == '2 5')\nassert(solution('''10 18\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18''') == '4 1')\nassert(solution('''10 19\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19''') == '2 5')\nassert(solution('''10 20\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20''') == '4 1')\nassert(solution('''10 21\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21''') == '2 5')\nassert(solution('''10 22\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21\n20 22''') == '4 1')\nassert(solution('''10 23\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n7 9\n8 10\n9 11\n10 12\n11 13\n12 14\n13 15\n14 16\n15 17\n16 18\n17 19\n18 20\n19 21\n20 22\n21 23''') == '2 5')\nassert(solution('''10 24\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4"
    },
    {
        "number": 4433,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = (int(x) - 1 for x in stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n    return \"\\n\".join(\" \".join(str(x) for x in edge) for edge in edges)"
    },
    {
        "number": 4433,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def number_of_edges(i: int) -> int:\n        return sum(len(edges[i]) for edges in edges_by_vertex)\n\n    n, m = map(int, stdin.split())\n    edges = [set() for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges[u - 1].add(v - 1)\n        edges[v - 1].add(u - 1)\n\n    max_degree = n - 1\n    for i in range(n):\n        max_degree = max(max_degree, number_of_edges(i))\n\n    for i in range(n - 1):\n        for j in edges[i]:\n            if number_of_edges(j) == max_degree:\n                print('%d %d' % (i + 1, j + 1))\n                break"
    },
    {
        "number": 4433,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    vertices, edges = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    edges = [set(map(int, line.split())) for line in stdin[1:]]\n    return max(solve(edges, [], vertices, vertices), solve(edges, [], vertices, vertices - 1))\n\ndef"
    },
    {
        "number": 4433,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    edges = [set() for _ in range(m + 1)]\n    for _ in range(m):\n        v1, v2 = [int(x) for x in stdin.split(' ')]\n        edges[v1].add(v2)\n        edges[v2].add(v1)\n    \n    # dfs with backtracking\n    def dfs(u: int, parent: int):\n        if u == n:\n            return True\n        for v in edges[u]:\n            if v!= parent and v not in visited:\n                visited.add(v)\n                if dfs(v, u):\n                    return True\n        return False\n    \n    # find spanning tree\n    max_degree = 0\n    for i in range(1, n + 1):\n        visited = set()\n        if dfs(i, 0):\n            max_degree += 1\n    \n    return max_degree"
    },
    {
        "number": 4433,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v1, v2 = [int(x) for x in stdin.split()]\n        edges.append((v1, v2))\n    ans = []\n    max_degree = 0\n    for _ in range(n - 1):\n        degree = 0\n        for v1, v2 in edges:\n            if v1 == v2:\n                degree += 1\n        if degree > max_degree:\n            max_degree = degree\n            ans.append(v1)\n    ans.append(ans[0])\n    return''.join(map(str, ans))"
    },
    {
        "number": 4434,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        m = n * (n + 1) // 2\n        print(m)\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = {}\n    for _ in range(n**2-1):\n        i, j = map(int, stdin.readline().split())\n        if i not in d:\n            d[i] = 0\n        if j not in d:\n            d[j] = 0\n        d[i] += 1\n        d[j] += 1\n    min_moves = n**2 - 1\n    for i in range(n-1):\n        for j in range(n):\n            if j > 0 and j < n - 1:\n                d[i] -= min(d[i], d[j], d[j+1], d[j-1])\n            elif j == 0:\n                d[i] -= min(d[i], d[j+1], d[j])\n            elif j == n - 1:\n                d[i] -= min(d[i], d[j-1], d[j])\n    for i in range(n):\n        if i in d:\n            min_moves -= d[i]\n    return str(min_moves)"
    },
    {
        "number": 4434,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nassert solution(\n\"\"\"\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 4434,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    board = [[0] * n for _ in range(n)]\n\n    for _ in range(n):\n        line = stdin.readline().strip()\n        i, j = line.split()\n        board[int(i) - 1][int(j) - 1] = 1\n\n    return '\\n'.join(''.join(str(x) for x in row) for row in board)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4434,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        n = int(stdin.readline().strip())\n        if n % 2 == 1:\n            print(0)\n        else:\n            print(2 * (n ** 2) - 1)"
    },
    {
        "number": 4434,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        assert n % 2 == 1\n        max_f = n * n\n        max_f -= 1\n        max_f = n * n - 1\n\n        def to_bin(i: int) -> str:\n            bits = bin(i)[2:]\n            bits = '0' * (n - len(bits)) + bits\n            return bits\n\n        def to_int(bits: str) -> int:\n            i = int(bits, 2)\n            return i\n\n        def find_max(i: int) -> int:\n            x = i - 1\n            y = i\n            while x >= 0:\n                y = x\n                x -= 1\n                if x % 2 == 1:\n                    if y % 2 == 1:\n                        if y == x:\n                            break\n                        y -= 1\n            return y\n\n        def is_corner(i: int) -> bool:\n            if i % 2 == 0:\n                if i > 0:\n                    if i > n / 2:\n                        return True\n            return False\n\n        def is_side(i: int) -> bool:\n            if i % 2 == 1:\n                if i > n / 2:\n                    return True\n            return False\n\n        def valid(bits: str, i: int) -> bool:\n            if is_side(i):\n                bits = bits[1:]\n                bits = bits[:-1]\n            if is_corner(i):\n                bits = bits[:-2]\n            return bits == bits[::-1]\n\n        def to_bits(i: int) -> str:\n            bits = to_bin(i)\n            bits = bits[1:]\n            bits = bits[:-1]\n            return bits\n\n        def to_bits_list(l: int) -> List[str]:\n            bits = []\n            for i in l:\n                bits.append(to_bits(i))\n            return bits\n\n        bits = to_bits(max_f)\n        print(bits)\n        bits = bits[1:]\n        bits = bits[:-1]\n        print(bits)\n        bits = bits[::-1]\n        print(bits)\n        print('--------------')\n        bits = to_bits_list(range(max_f))\n        print(bits)\n        print('--------------')\n        nbits = []\n        for i in range(max_f):\n            if valid(bits[i], i):\n                nbits.append(i)\n        nbits = sorted(nbits)\n        print(nbits)\n        print('--------------')\n        if len(nbits) == 1:\n            print(0)\n            continue\n        first = nbits[0]\n        last = nbits[-1]\n        print(first)\n        print(last)\n        moves = 0\n        for i in range(len(nbits) - 1):\n            print(nbits[i], to_int(bits[nbits[i]]), to_int(bits[nbits[i + 1]]))\n            if to_int(bits[nbits[i]])!= to_int(bits[nbits[i + 1]]) + 1:\n                moves += 1\n            elif to_int(bits[nbits[i]])!= to_int(bits[nbits[i + 1]]) + 2:\n                moves += 2\n        print(moves)\n        print('--------------')\n        print(nbits[-1] - nbits[0])\n        print('--------------')\n    return stdin\n"
    },
    {
        "number": 4434,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    testcases = []\n    for _ in range(t):\n        n = int(stdin.readline())\n        testcases.append(n)\n    for n in testcases:\n        if n <= 1:\n            print(0)\n        elif n == 2:\n            print(n*n - 1)\n        else:\n            print(n*n - 1 + n*(n - 1))"
    },
    {
        "number": 4434,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4434,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4434,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4435,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    c = 0\n    p = [0] * n\n    for i in range(n):\n        if i - a[i] >= 0 and p[i - a[i]] == 0:\n            p[i - a[i]] = 1\n            c += 1\n        if i + a[i] < n and p[i + a[i]] == 0:\n            p[i + a[i]] = 1\n            c += 1\n\n    print(' '.join(map(str, p)))\n"
    },
    {
        "number": 4435,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4435,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    i = 1\n    j = n\n    if n % 2 == 0:\n        return \" \".join(map(str, [j - i for i in range(n)]))\n    else:\n        return \" \".join(map(str, [-1] * n))\n\nassert solution(\"1\\n1\") == \"2\"\nassert solution(\"1\\n4 3 2 1\") == \"4\"\nassert solution(\"1\\n5 3 2 1\") == \"2\"\nassert solution(\"1\\n5 3 2\") == \"-1\"\nassert solution(\"1\\n5 3 2 6 4\") == \"1 1 1 1 2 -1 1 1 3 1 1\"\nassert solution(\"1\\n5 3 2 6 4 8 1\") == \"1 1 1 1 2 -1 1 1 3 1 1 1\"\nassert solution(\"1\\n4 6 2 1\") == \"1 1 1 2 -1 1 1 3 1 1\"\nassert solution(\"1\\n4 6 2 1 9 1\") == \"1 1 1 2 -1 1 1 3 1 1 1\"\nassert solution(\"1\\n5 2 1 9 1\") == \"1 1 1 2 -1 1 1 3 1 1\"\nassert solution(\"1\\n5 3 2 1\") == \"1 1 1 2 -1 1 1 3 1 1\"\nassert solution(\"1\\n5 3 2 1 9 1\") == \"1 1 1 2 -1 1 1 3 1 1 1\"\nassert solution(\"1\\n5 3 2 1 9 1 6\") == \"1 1 1 2 -1 1 1 3 1 1 1 1\"\nassert solution(\"1\\n10 2 1 9 1 6 5 4 3 2 1\") == \"1 1 1 2 -1 1 1 3 1 1 1 1 1 1 1 1 1\"\nassert solution(\"1\\n10 2 1 9 1 6 5 4 3 2 1 9 1 6 5 4 3 2 1 9 1 6 5 4 3 2 1 9 1 6 5 4 3 2 1 9 1 6 5 4 3 2 1 9 1 6 5 4 3 2 1 9 1 6 5 4 3 2 1 9 1 6 5 4 3 2 1 9 1 6 5 4 3 2 1 9 1 6 5 4 3 2 1 9 1 6 5 4 3 2 19 1 6 5 4 3 21 9 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 32 19 1 6 5 4 321 9 1 6 5 4 32 19 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4 321 9 1 6 5 4"
    },
    {
        "number": 4435,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split(\" \")]\n    A.sort()\n    dp = [-1] * N\n    for i in range(N):\n        for j in range(i):\n            if A[i] % 2 == A[j] % 2:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return''.join([str(x) for x in dp])"
    },
    {
        "number": 4435,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n    min_moves = [-1] * n\n    min_moves[0] = 0\n    for i in range(1, n):\n        if a[i] % 2 == 1:\n            if min_moves[i - 1] == -1:\n                return '-1'\n            min_moves[i] = min_moves[i - 1] + 1\n        else:\n            if min_moves[i - a[i]] == -1:\n                return '-1'\n            min_moves[i] = min_moves[i - a[i]]\n    return''.join([str(x) for x in min_moves])\n\n\ndef"
    },
    {
        "number": 4435,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4435,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return''.join(map(str, list(map(min_move, a))))\n\ndef"
    },
    {
        "number": 4435,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a_p = [0] * n\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a_p[i] = (n - 1) - i\n        else:\n            a_p[i] = i\n    a_p_new = [0] * n\n    for i in range(n):\n        a_p_new[a_p[i]] = a_p[i]\n    print(*a_p_new)\n"
    },
    {
        "number": 4435,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a_start = a[:]\n    a_start.sort()\n    a_end = a[:]\n    a_end.sort(reverse=True)\n    # print(a_start, a_end)\n    if a_start == a_end:\n        return''.join(map(str, range(n)))\n    return''.join(map(str, [-1 if a[i] < a_start[i] or a[i] > a_end[i] else\n                    (a[i] - a_start[i]) for i in range(n)]))"
    },
    {
        "number": 4435,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    cnt = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if i!= j and a[j] % 2 == a[i] % 2:\n                cnt[i] += 1\n                break\n    return''.join(str(x) for x in cnt)"
    },
    {
        "number": 4436,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline().strip()\n    n = int(stdin.readline().strip())\n    if n <= 0:\n        return 'NO'\n\n    for i in range(3, 10**9):\n        if n == i * i * i:\n            return 'YES'\n        if n % i == 0:\n            return 'NO'\n    return 'YES'\n\nprint(solution(''))\n"
    },
    {
        "number": 4436,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n:\n        n -= 1\n        a = int(stdin)\n        if a == 2:\n            return 'YES'\n        elif a == 3:\n            return 'NO'\n        elif a % 3 == 0:\n            continue\n        else:\n            return 'NO'\n    return 'NO'\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n\n>>> solution('''\n... 2\n... 3\n... 5\n... 1\n... 2\n... 4\n... 6\n... 4\n... 3\n... 8\n... ''')\n'YES'\n>>> solution('''\n... 2\n... 3\n... 5\n... 1\n... 2\n... 4\n... 6\n... 4\n... 3\n... 8\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'YES'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution('''\n... 1\n... 2\n... 3\n... 4\n... ''')\n'NO'\n\n>>> solution"
    },
    {
        "number": 4436,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for _ in range(test_cases):\n        n = int(stdin.readline().strip())\n        for a, b, c in itertools.combinations(range(2, n), 3):\n            if a * b * c == n:\n                print(a, b, c)\n                break\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4436,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = 0\n    for _ in range(n):\n        if count > 2:\n            print(\"NO\")\n            break\n        else:\n            n = int(stdin.readline())\n            if 2 <= n < 10**9:\n                l = [2, 3, 5, 7, 11, 13]\n                for i in l:\n                    if n % i == 0:\n                        print(\"YES\")\n                        print(n//i, i, n//i*i)\n                        count += 1\n                        break\n                else:\n                    print(\"NO\")\n            else:\n                print(\"NO\")\n"
    },
    {
        "number": 4436,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        x = int(stdin)\n        a, b, c = 0, 0, 0\n        for j in range(1, x // 2 + 1):\n            if x % j == 0:\n                if x // j < j:\n                    a, b, c = j, x // j, x // (j * c)\n                else:\n                    a, b, c = j, x // j, x // (j * c)\n                break\n        if a * b * c == x:\n            print(\"YES\")\n            print(a, b, c)\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4436,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    numbers = []\n    for _ in range(t):\n        numbers.append(int(stdin.readline().strip()))\n    for number in numbers:\n        print('YES' if check_value(number) else 'NO')\n\ndef"
    },
    {
        "number": 4436,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(stdin.readline()) for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if numbers[i] * numbers[j] == numbers[i] + numbers[j]:\n                a, b, c = numbers[i], numbers[j], numbers[i] * numbers[j]\n                if 2 <= a < b <= c:\n                    print('YES', a, b, c)\n                    return\n    print('NO')\n"
    },
    {
        "number": 4436,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 'NO'\n    if n == 2:\n        return 'NO'\n    if n % 2 == 0:\n        return 'YES'\n    a = 2\n    b = 0\n    c = 1\n    while c * b * a!= n:\n        a += 1\n        b = a\n        if (n - b) % a == 0:\n            c = (n - b) // a\n            if a * b * c == n:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4436,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def isPossible(n: int) -> bool:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n        return True\n    def getAllFactors(n: int) -> list[int]:\n        ans = []\n        for i in range(2, n):\n            if (n % i) == 0:\n                ans.append(i)\n        return ans\n    res = []\n    for i in range(int(stdin.readline().strip())):\n        n = int(stdin.readline().strip())\n        if isPossible(n):\n            ans = getAllFactors(n)\n            ans.sort()\n            res.append(' '.join([str(i) for i in ans]))\n        else:\n            res.append('NO')\n    return '\\n'.join(res)\n\nprint(solution(input))\n"
    },
    {
        "number": 4437,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    prefixes = [s[i:i+n//2] for i in range(n//2)]\n    counts = [prefix.count('a') for prefix in prefixes]\n    counts += [prefix.count('b') for prefix in prefixes]\n    return ''.join(['a' if c%2==0 else 'b' for c in counts])\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4437,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = s[::-1]\n    l = len(s)\n    pref = [0] * l\n    for i in range(l):\n        if i % 2 == 0:\n            pref[i] = s[i]\n        else:\n            pref[i] = 'b' if s[i] == 'a' else 'a'\n    counta = countb = 0\n    for i in range(l):\n        if i % 2 == 0:\n            if pref[i] == 'a':\n                counta += 1\n            else:\n                countb += 1\n    if counta > countb:\n        s = ''.join(pref)\n    else:\n        s = ''.join('b' if pref[i] == 'a' else 'a' for i in range(l))[::-1]\n    return str(min(counta, countb))\n\nprint(solution(''))\n"
    },
    {
        "number": 4437,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #..."
    },
    {
        "number": 4437,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    m = n // 2\n    res = 0\n    for i in range(m):\n        if s[i]!= s[n - i - 1]:\n            res += 1\n            s = s[:i] + s[i + 1:n - i] + s[i] + s[n - i:]\n    return res\n\n\ndef"
    },
    {
        "number": 4437,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is just a test function.\n    \"\"\"\n    return \"\""
    },
    {
        "number": 4437,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n\nn = int(input())\ns = input()\ns = s.replace('ab', 'ba')\nprint(s.count('ab'))\n"
    },
    {
        "number": 4437,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    a = b = 0\n    for i in range(n):\n        if s[i] == 'a':\n            a += 1\n        elif s[i] == 'b':\n            b += 1\n    c = min(a, b)\n    while c > 0:\n        s = s.replace('a', 'b').replace('b', 'a')\n        c -= 1\n    return s\n\n\nprint(solution(''))\nprint(solution(''))\n\n'''\n"
    },
    {
        "number": 4437,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4437,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    i = 0\n    j = n - 1\n    res = []\n    while i < n and j >= 0:\n        if s[i] == s[j]:\n            res.append('a')\n            i += 1\n        else:\n            res.append('b')\n            j -= 1\n    return ''.join(res) + ''.join(s[i:j+1])"
    },
    {
        "number": 4437,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(0, length, 2):\n        if s[i]!= s[i + 1]:\n            count += 1\n            s = s[:i] + s[i+1] + s[i] + s[i+2:]\n    return count, s"
    },
    {
        "number": 4438,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(1 - int(stdin)))\n"
    },
    {
        "number": 4438,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return None"
    },
    {
        "number": 4438,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4438,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result"
    },
    {
        "number": 4438,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4438,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_s, y_s = [], []\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        x, y = stdin.readline().split()\n        x_s.append(int(x))\n        y_s.append(int(y))\n\n    def get_distance(x_1: int, y_1: int, x_2: int, y_2: int) -> int:\n        return abs(x_1 - x_2) + abs(y_1 - y_2)\n\n    distances = [get_distance(x_1, y_1, 0, 0) for x_1, y_1 in zip(x_s, y_s)]\n\n    for level in range(1, n):\n        current_distances = [get_distance(x_1, y_1, x_2, y_2) for x_1, y_1, x_2, y_2 in zip(x_s, y_s, x_s[1:], y_s[1:])]\n        current_distances = [0] + current_distances\n        prev_max_distance = max(distances)\n        distances = [prev_max_distance] + [prev_max_distance + current_dist for prev_max_distance, current_dist in zip(distances, current_distances)]\n\n    return str(min(distances))"
    },
    {
        "number": 4438,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(solution_1(stdin))\n\ndef"
    },
    {
        "number": 4438,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    points = [tuple(map(int, stdin.readline().split())) for _ in range(N)]\n\n    a, b = max(p[0], p[1]) for p in points)\n\n    m = 2\n    while m < a:\n        m <<= 1\n\n    def root(p, m):\n        return (p & -p) // m\n\n    s = 0\n    for p in points:\n        x, y = p\n        s += abs(root(x, m) - root(y, m))\n\n    return str(s)\n\nprint(solution(None))\n"
    },
    {
        "number": 4438,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number_of_points = stdin[0]\n    stdin = stdin[1:]\n\n    points = []\n    for i in range(number_of_points):\n        x, y = stdin[i * 2].split()\n        points.append((int(x), int(y)))\n    points.sort(key=lambda x: max(x[0], x[1]))\n\n    distance = 0\n    for i in range(len(points) - 1):\n        distance += abs(points[i][0] - points[i + 1][0]) + abs(points[i][1] - points[i + 1][1])\n    return distance"
    },
    {
        "number": 4438,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/maksim-walks-on-a-cartesian-plane-p2-1\"\"\"\n    n = int(stdin.split('\\n')[0])\n    p = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    s = sorted(p, key=lambda x: abs(x[0]) + abs(x[1]))\n    m = 0\n    for i in range(n):\n        l = abs(s[i][0]) + abs(s[i][1])\n        if i % 2:\n            if i < n - 1 and l < abs(s[i + 1][0]) + abs(s[i + 1][1]):\n                l = abs(s[i + 1][0]) + abs(s[i + 1][1])\n        m += l\n    return m\n\nsolution('8\\n2 2\\n1 4\\n2 3\\n3 1\\n3 4\\n1 1\\n4 3\\n1 2')"
    },
    {
        "number": 4439,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin[0]\n    B = stdin[1]\n\n    if A == B:\n        return '3'\n    else:\n        return '2'"
    },
    {
        "number": 4439,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return '1' if a == 2 and b == 1 else '2'"
    },
    {
        "number": 4439,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    numA: int\n    numB: int\n\n    numA, numB = stdin.strip().split()\n    return '2' if int(numA) == 3 or int(numB) == 1 else '1'\n"
    },
    {
        "number": 4439,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    return '2' if int(A)!= 2 or int(B)!= 2 else '1'\n\nprint(solution(input()))"
    },
    {
        "number": 4439,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return 'A' if A < B else 'B'\n\nassert(solution(\"3 1\") == \"A\")\nassert(solution(\"3 2\") == \"B\")\nassert(solution(\"1 3\") == \"A\")\nassert(solution(\"2 1\") == \"B\")\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(\" \")]\n    return str(1 if A == 3 and B == 1 else 2)\n\nprint(solution(input()))"
    },
    {
        "number": 4439,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin.split()[1])-1)"
    },
    {
        "number": 4439,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin[-1])"
    },
    {
        "number": 4439,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(3 - int(a) - int(b))"
    },
    {
        "number": 4439,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return '1' if a == 3 and b == 1 else '2'"
    },
    {
        "number": 4440,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(0, int(stdin)))"
    },
    {
        "number": 4440,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l: int = int(stdin)\n    volume: float = 1\n    while l >= 0:\n        volume += l\n        l = l / 2\n    return f'{volume:.6f}'\n\nprint(solution(input()))"
    },
    {
        "number": 4440,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    l = int(input[0])\n    return str(l * l * l)"
    },
    {
        "number": 4440,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        l = int(stdin)\n    except ValueError:\n        return \"Not a number\"\n    if l < 1 or l > 1000:\n        return \"Not a valid input\"\n    return \"1.0\"\n\nprint(solution(input()))\n\"\"\"\ndef"
    },
    {
        "number": 4440,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    L = int(stdin)\n    if L == 0:\n        return \"0.0\"\n    if L == 1:\n        return \"1.0\"\n    for i in range(1, L):\n        res = max(res, i * (L - i))\n    return \"{:.6f}\".format(res)\n\nprint(solution(\"0\"))\nprint(solution(\"1\"))\nprint(solution(\"2\"))\nprint(solution(\"3\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"6\"))\nprint(solution(\"7\"))\nprint(solution(\"8\"))\nprint(solution(\"9\"))\nprint(solution(\"10\"))\nprint(solution(\"11\"))\nprint(solution(\"12\"))\nprint(solution(\"13\"))\nprint(solution(\"14\"))\nprint(solution(\"15\"))\nprint(solution(\"16\"))\nprint(solution(\"17\"))\nprint(solution(\"18\"))\nprint(solution(\"19\"))\nprint(solution(\"20\"))\nprint(solution(\"21\"))\nprint(solution(\"22\"))\nprint(solution(\"23\"))\nprint(solution(\"24\"))\nprint(solution(\"25\"))\nprint(solution(\"26\"))\nprint(solution(\"27\"))\nprint(solution(\"28\"))\nprint(solution(\"29\"))\nprint(solution(\"30\"))\nprint(solution(\"31\"))\nprint(solution(\"32\"))\nprint(solution(\"33\"))\nprint(solution(\"34\"))\nprint(solution(\"35\"))\nprint(solution(\"36\"))\nprint(solution(\"37\"))\nprint(solution(\"38\"))\nprint(solution(\"39\"))\nprint(solution(\"40\"))\nprint(solution(\"41\"))\nprint(solution(\"42\"))\nprint(solution(\"43\"))\nprint(solution(\"44\"))\nprint(solution(\"45\"))\nprint(solution(\"46\"))\nprint(solution(\"47\"))\nprint(solution(\"48\"))\nprint(solution(\"49\"))\nprint(solution(\"50\"))\nprint(solution(\"51\"))\nprint(solution(\"52\"))\nprint(solution(\"53\"))\nprint(solution(\"54\"))\nprint(solution(\"55\"))\nprint(solution(\"56\"))\nprint(solution(\"57\"))\nprint(solution(\"58\"))\nprint(solution(\"59\"))\nprint(solution(\"60\"))\nprint(solution(\"61\"))\nprint(solution(\"62\"))\nprint(solution(\"63\"))\nprint(solution(\"64\"))\nprint(solution(\"65\"))\nprint(solution(\"66\"))\nprint(solution(\"67\"))\nprint(solution(\"68\"))\nprint(solution(\"69\"))\nprint(solution(\"70\"))\nprint(solution(\"71\"))\nprint(solution(\"72\"))\nprint(solution(\"73\"))\nprint(solution(\"74\"))\nprint(solution(\"75\"))\nprint(solution(\"76\"))\nprint(solution(\"77\"))\nprint(solution(\"78\"))\nprint(solution(\"79\"))\nprint(solution(\"80\"))\nprint(solution(\"81\"))\nprint(solution(\"82\"))\nprint(solution(\"83\"))\nprint(solution(\"84\"))\nprint(solution(\"85\"))\nprint(solution(\"86\"))\nprint(solution(\"87\"))\nprint(solution(\"88\"))\nprint(solution(\"89\"))\nprint(solution(\"90\"))\nprint(solution(\"91\"))\nprint(solution(\"92\"))\nprint(solution(\"93\"))\nprint(solution(\"94\"))\nprint(solution(\"95\"))\nprint(solution(\"96\"))\nprint(solution(\"97\"))\nprint(solution(\"98\"))\nprint(solution(\"99\"))\nprint(solution(\"100\"))\n"
    },
    {
        "number": 4440,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4440,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin)\n    solution = \"1\"\n    if l == 1:\n        return solution\n    solution = \"0\"\n    if l > 1:\n        for i in range(1, l + 1):\n            solution = str(int(solution) + int(str(i) + \"0\"))\n    return solution"
    },
    {
        "number": 4440,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4440,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '1.000000000000'"
    },
    {
        "number": 4440,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    l, w, h = map(int, stdin.split())\n    return str(w * h * l / 6)\n\nprint(solution(\"0\"))"
    },
    {
        "number": 4441,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    if n=='1':\n        print('Hello World')\n    elif n=='2':\n        a = int(stdin[2])\n        b = int(stdin[4])\n        print(a+b)\n    return ''"
    },
    {
        "number": 4441,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin:\n        n = int(stdin.strip())\n        if n == 1:\n            print('Hello World')\n        elif n == 2:\n            a, b = map(int, stdin.split())\n            print(a + b)\n        else:\n            print('ERROR: Invalid Input')\n    else:\n        print('ERROR: Invalid Input')"
    },
    {
        "number": 4441,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    N = int(N)\n    if N == 1:\n        print(\"Hello World\")\n    else:\n        A, B = stdin.split()\n        A = int(A)\n        B = int(B)\n        print(A+B)"
    },
    {
        "number": 4441,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()[0]\n    if N == '1':\n        return 'Hello World'\n    elif N == '2':\n        A = int(stdin.strip()[1])\n        B = int(stdin.strip()[3])\n        return str(A + B)"
    },
    {
        "number": 4441,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()\n    if N == '1':\n        return 'Hello World'\n    elif N == '2':\n        A, B = [int(c) for c in stdin.split()]\n        return str(A+B)"
    },
    {
        "number": 4441,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    age = stdin.readline().strip()\n    if age == \"1\":\n        print(\"Hello World\")\n    elif age == \"2\":\n        a, b = [int(s) for s in stdin.readline().strip().split()]\n        print(a+b)\n    else:\n        raise Exception(\"Invalid Input\")"
    },
    {
        "number": 4441,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        print(\"Hello World\")\n    elif N == 2:\n        A, B = map(int, stdin.split())\n        print(A+B)\n    else:\n        raise Exception(\"N should be 1 or 2.\")"
    },
    {
        "number": 4441,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    if n == '1':\n        print('Hello World')\n    else:\n        a, b = [int(v) for v in stdin.split()]\n        print(a+b)\n\nsolution(input())\n"
    },
    {
        "number": 4441,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = int(stdin)\n    if stdin == 1:\n        return 'Hello World'\n    elif stdin == 2:\n        A = int(input())\n        B = int(input())\n        return str(A + B)\n    else:\n        raise ValueError"
    },
    {
        "number": 4441,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N==1:\n        return \"Hello World\"\n    return str(int(stdin) + int(stdin))"
    },
    {
        "number": 4442,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return '{}{}'.format(a * int(b), b * int(a))\n\n\ndef"
    },
    {
        "number": 4442,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return (str(a) * b)[:10]"
    },
    {
        "number": 4442,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    a = \"\".join([\"a\" for _ in range(b)]) + str(a)\n    b = \"\".join([\"b\" for _ in range(a)]) + str(b)\n    return min(a, b)"
    },
    {
        "number": 4442,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a > b:\n        print(str(b) * b)\n    else:\n        print(str(a) * a)"
    },
    {
        "number": 4442,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b = stdin.split()\n    a,b = int(a),int(b)\n    t1 = a * str(b)\n    t2 = b * str(a)\n    return t1 if t1 < t2 else t2"
    },
    {
        "number": 4442,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    a = str(a) * b\n    b = str(a) * b\n    return min(a, b)"
    },
    {
        "number": 4442,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = tuple(map(int, stdin.split(\" \")))\n    concat_b = \"\".join([str(b) for i in range(b)])\n    concat_a = \"\".join([str(a) for i in range(a)])\n    return min(concat_a, concat_b)\n\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    # The concatenation of a and b is abaaabaaab\n    # The concatenation of b and b is bbbbbbbbbb\n    # We compare abaaabaaab and bbbbbbbbbb. The first is lexicographically smaller.\n    if a > b:\n        return ''.join([b * i for i in range(1, a + 1)]) + b * a\n    else:\n        return ''.join([a * i for i in range(1, b + 1)]) + a * b"
    },
    {
        "number": 4442,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n\n    max_len = max(len(str(a)), len(str(b)))\n    a = a * max_len\n    b = b * max_len\n\n    a = list(map(int, list(str(a))))\n    b = list(map(int, list(str(b))))\n\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n\n    a = list(map(str, a))\n    b = list(map(str, b))\n\n    return int(''.join(a)) * int(''.join(b))"
    },
    {
        "number": 4442,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    if a == b:\n        return str(a) * b\n\n    ans1 = str(a) * b\n    ans2 = str(b) * a\n    if ans1 > ans2:\n        return ans2\n    return ans1"
    },
    {
        "number": 4443,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin[0]\n    if c == 'z':\n        return ''\n    else:\n        return chr(ord(c) + 1)"
    },
    {
        "number": 4443,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ch = stdin.readline()\n    if ch == \"a\":\n        return \"b\"\n    elif ch == \"b\":\n        return \"c\"\n    elif ch == \"c\":\n        return \"d\"\n    elif ch == \"d\":\n        return \"e\"\n    elif ch == \"e\":\n        return \"f\"\n    elif ch == \"f\":\n        return \"g\"\n    elif ch == \"g\":\n        return \"h\"\n    elif ch == \"h\":\n        return \"i\"\n    elif ch == \"i\":\n        return \"j\"\n    elif ch == \"j\":\n        return \"k\"\n    elif ch == \"k\":\n        return \"l\"\n    elif ch == \"l\":\n        return \"m\"\n    elif ch == \"m\":\n        return \"n\"\n    elif ch == \"n\":\n        return \"o\"\n    elif ch == \"o\":\n        return \"p\"\n    elif ch == \"p\":\n        return \"q\"\n    elif ch == \"q\":\n        return \"r\"\n    elif ch == \"r\":\n        return \"s\"\n    elif ch == \"s\":\n        return \"t\"\n    elif ch == \"t\":\n        return \"u\"\n    elif ch == \"u\":\n        return \"v\"\n    elif ch == \"v\":\n        return \"w\"\n    elif ch == \"w\":\n        return \"x\"\n    elif ch == \"x\":\n        return \"y\"\n    elif ch == \"y\":\n        return \"z\"\n    else:\n        return \"Invalid Input\"\n\nassert(solution(\"a\") == \"b\")\nassert(solution(\"b\") == \"c\")\nassert(solution(\"c\") == \"d\")\nassert(solution(\"d\") == \"e\")\nassert(solution(\"e\") == \"f\")\nassert(solution(\"f\") == \"g\")\nassert(solution(\"g\") == \"h\")\nassert(solution(\"h\") == \"i\")\nassert(solution(\"i\") == \"j\")\nassert(solution(\"j\") == \"k\")\nassert(solution(\"k\") == \"l\")\nassert(solution(\"l\") == \"m\")\nassert(solution(\"m\") == \"n\")\nassert(solution(\"n\") == \"o\")\nassert(solution(\"o\") == \"p\")\nassert(solution(\"p\") == \"q\")\nassert(solution(\"q\") == \"r\")\nassert(solution(\"r\") == \"s\")\nassert(solution(\"s\") == \"t\")\nassert(solution(\"t\") == \"u\")\nassert(solution(\"u\") == \"v\")\nassert(solution(\"v\") == \"w\")\nassert(solution(\"w\") == \"x\")\nassert(solution(\"x\") == \"y\")\nassert(solution(\"y\") == \"z\")\n"
    },
    {
        "number": 4443,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.rstrip('\\n')"
    },
    {
        "number": 4443,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    letter = stdin.strip()[0]\n    if ord(letter) == 90:\n        return chr(ord(letter) + 1)\n    elif ord(letter) == 122:\n        return chr(ord(letter) - 26)\n    else:\n        return chr(ord(letter) + 1)"
    },
    {
        "number": 4443,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin[0]\n    print(chr(ord(c) + 1))\n"
    },
    {
        "number": 4443,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    C = stdin.strip()\n    return chr(ord(C) + 1)"
    },
    {
        "number": 4443,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]"
    },
    {
        "number": 4443,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    print(stdin[1])\n    return stdin[1]\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4443,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin[0]\n    print(chr(ord(c) + 1))\n    return\n\nprint(solution(input()))\n"
    },
    {
        "number": 4443,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Prints the letter that follows C in alphabetical order.\n    \"\"\"\n    c = stdin[0]\n    c = c.lower()\n    c = ord(c) - 97\n    c = chr(c + 1)\n    return c\n"
    },
    {
        "number": 4444,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4444,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    return t+s"
    },
    {
        "number": 4444,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solve the problem\n    '''\n    return stdin.strip().split(' ')[1] + stdin.strip().split(' ')[0]"
    },
    {
        "number": 4444,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(' ')\n    return T + S"
    },
    {
        "number": 4444,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4444,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    print(t + s)"
    },
    {
        "number": 4444,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    return stdin[1] + stdin[0]"
    },
    {
        "number": 4444,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4444,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    str1, str2 = stdin.split(' ')\n    return str1 + str2"
    },
    {
        "number": 4444,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    S, T = stdin.split(' ')\n    return S + T"
    },
    {
        "number": 4445,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    minimum = 0\n    s = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            minimum += a[i]\n            s += a[i]\n        else:\n            minimum += a[i] - 1\n            s += a[i] - 1\n\n    if minimum % 2 == 1:\n        minimum += 1\n\n    return str(minimum)\n\n\nimport sys"
    },
    {
        "number": 4445,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The number of elements is not relevant here.\"\"\"\n    N = int(stdin.readline())\n    A = [int(stdin.readline()) for _ in range(N)]\n    ans = float('inf')\n    for i in range(N):\n        ans = min(ans, A[i])\n        A[i] ^= 1\n    return str(ans)\n"
    },
    {
        "number": 4445,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = []\n    for i in range(0, n):\n        if a[i] % 2!= 0:\n            b.append(i)\n    c = set(range(0, n))\n    d = set(b)\n    if len(b) == 0:\n        return 0\n    else:\n        return sum(a) - a[b[0]] - sum(a[i] for i in d - {b[0]})"
    },
    {
        "number": 4445,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    res = 0\n    for i in range(1, n):\n        if (a[i] % 2 == 0):\n            res += a[i]\n            a[i] += 2\n        else:\n            res += a[i]\n            a[i] -= 1\n    return str(res)\n"
    },
    {
        "number": 4445,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    min_non_deleted_elements = sum(a)\n    for _ in range(n):\n        if a[0] % 2 == 1:\n            a.pop(0)\n        else:\n            a.append(a.pop(0))\n        if a[0] % 2 == 0:\n            a.append(a.pop(0))\n        else:\n            a.append(a.pop(0))\n        if a[0] % 2 == 0:\n            a.pop(0)\n        else:\n            a.append(a.pop(0))\n        if a[0] % 2 == 1:\n            a.append(a.pop(0))\n        else:\n            a.append(a.pop(0))\n    return str(min_non_deleted_elements)"
    },
    {
        "number": 4445,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a_sum = sum(a)\n    a_max = max(a)\n    while a_sum > 0:\n        if a_max % 2 == 0:\n            a_sum -= a_max\n            a_max += 2\n        else:\n            a_sum -= a_max\n            a_max += 1\n    return str(a_sum)\n"
    },
    {
        "number": 4445,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = [int(el) for el in stdin.split()]\n    result = 0\n\n    for i in range(n):\n        if a[i] % 2 == 1:\n            a[i] -= 1\n\n    for i in range(n - 1):\n        if a[i] % 2 == a[i + 1] % 2:\n            a[i] -= 1\n\n    for el in a:\n        result += el\n\n    return str(result)"
    },
    {
        "number": 4445,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(stdin.readline().strip()) for _ in range(n)]\n\n    best_sum = 0\n    for i in range(n):\n        sum_diff = a[i]\n        for j in range(i + 1, n):\n            if j % 2:\n                sum_diff += a[j]\n            else:\n                sum_diff -= a[j]\n\n            if sum_diff < best_sum:\n                best_sum = sum_diff\n\n    return str(best_sum)\n\nassert solution('''5''') == '0'\nassert solution('''6''') == '1000000'\nassert solution('''1000''') == '1000000'\nassert solution('''100000''') == '1000000'\nassert solution('''0''') == '0'\nassert solution('''1000000000''') == '1000000'\nassert solution('''10000001''') == '1000000'\nassert solution('''10000000''') == '1000000'\nassert solution('''100''') == '0'\nassert solution('''1000''') == '0'\nassert solution('''10000''') == '10000'\nassert solution('''100000''') == '0'\nassert solution('''1000000''') == '0'\nassert solution('''10000000''') == '1000000'\nassert solution('''100000''') == '0'\nassert solution('''10000''') == '10000'\nassert solution('''1000''') == '0'\nassert solution('''10''') == '0'\nassert solution('''100''') == '0'\nassert solution('''1''') == '0'\nassert solution('''0''') == '0'\nassert solution('''10000000''') == '1000000'\nassert solution('''1000000000''') == '1000000000'\nassert solution('''1000000000000''') == '1000000000'\nassert solution('''1000000000000000''') == '1000000000'\nassert solution('''999999999999999999999999999999999999999999999999999999999999999''') == '1000000000000000'"
    },
    {
        "number": 4445,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    #a = [int(x) for x in stdin.readline().split()]\n    #a = [int(x) for x in stdin.readline().split(' ')]\n    res = 0\n    for i in range(n):\n        if a[i] % 2:\n            a[i] = 1 if i == 0 else 0\n        else:\n            a[i] = 0 if i == 0 else 1\n    return str(sum(a))\n"
    },
    {
        "number": 4445,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    min_sum = sum(a)\n\n    for i in range(n):\n        a[i] = abs(a[i] - 1)\n        if i > 0 and a[i] == a[i-1]:\n            a[i] = abs(a[i] + 1)\n\n        if a[i] % 2 == 0:\n            a[i] = -a[i]\n\n        min_sum += a[i]\n\n    return str(min_sum)"
    },
    {
        "number": 4446,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = [int(x) for x in stdin.split()]\n    healths = [int(x) for x in stdin.split()]\n    healths = [max(0, h) for h in healths]\n    points = 0\n    for i in range(n):\n        current_monster_health = healths[i]\n        if current_monster_health > 0:\n            healths[i] -= a\n            if healths[i] <= 0:\n                points += 1\n            else:\n                healths[i] -= b\n                if healths[i] <= 0:\n                    points += 1\n    return str(points)\n\n\nassert(solution(input)) == input.split('\\n')[-1]\n"
    },
    {
        "number": 4446,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.strip().split(\" \"))\n    h = list(map(int, stdin.strip().split(\" \")))\n    h.sort(reverse=True)\n    hp = [h[0]] * n\n    for i in range(1, n):\n        hp[i] += hp[i - 1]\n    attack = a\n    d = [0] * (n + 1)\n    for i in range(1, n + 1):\n        attack -= h[i - 1]\n        d[i] = max(0, attack // b + d[i - 1])\n    d[n] = max(0, a // b + d[n - 1])\n    for i in range(1, n + 1):\n        if i + d[i] >= n + 1:\n            d[i] = n - i + 1\n    # print(d)\n    j = n - 1\n    k -= 1\n    while j > 0:\n        if d[j] == d[j + 1]:\n            j -= 1\n        else:\n            j -= 1\n            k -= 1\n    return str(d[1])\n"
    },
    {
        "number": 4446,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, k = [int(x) for x in stdin.split()]\n    hp = [int(x) for x in stdin.split()]\n    result = 0\n    for i in range(k):\n        for j in range(i, len(hp), k):\n            result += 1 if hp[j] > a else 0\n            result -= 1 if hp[j] > b else 0\n    return str(result)\n\nassert (solution(input()) == \"2\")\nassert (solution(input()) == \"1\")\n\"\"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = (int(s) for s in stdin.strip().split())\n    hp = [int(s) for s in stdin.strip().split()]\n\n    monsters = [(n - i - 1, hp[i], i) for i in range(n)]\n    monsters.sort(reverse=True)\n    monsters = [m for m in monsters if m[1] >= 1]\n\n    result = 0\n    while monsters:\n        for _ in range(k):\n            if not monsters:\n                break\n            result += 1\n            monsters.sort(reverse=True)\n            if monsters[0][1] >= b:\n                monsters[0][1] -= b\n                monsters.sort(reverse=True)\n                monsters.pop(0)\n            else:\n                monsters[0][1] -= a\n        monsters.sort(reverse=True)\n        monsters = [m for m in monsters if m[1] >= 1]\n\n    return str(result)\n"
    },
    {
        "number": 4446,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 4446,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Enter your code here. \n    This file has been generated by the CodeChecker.\n    You can edit the file directly or download a new solution file.\n    \"\"\"\n    n, a, b, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n\n    def mon(a, b, h):\n        # Returns the remaining health of the monster\n        return h[0] - (a - b)\n\n    # Let's say you hit the monster\n    # If the monster is dead, you gain a point\n    # If not, you gain nothing\n    # So we traverse the list, and we go to the first monster\n    # that has less than or equal to zero health, and then we\n    # start to count how many times we can hit it.\n    # So we hit the monster, and we gain a point.\n    # If it is dead after the hit, we go to the next monster\n    # and repeat that process\n    # If we are on the last monster, and it is alive,\n    # then we hit it one last time and gain a point.\n    # If it is dead after the hit, we go to the next monster\n    # and repeat that process.\n    # We do this until we reach the end of the list.\n\n    r = 0\n    for i, m in enumerate(h):\n        if mon(a, b, m) <= 0:\n            r += 1\n            if i == len(h) - 1:\n                r += 1\n        else:\n            r += mon(a, b, m)\n    return str(r)"
    },
    {
        "number": 4446,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 2 3 3\\n7 10 50 12 1 8\")\n    '5'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4446,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4446,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = (int(i) for i in stdin.split())\n    h = list(int(i) for i in stdin.split())\n\n    s = 0\n    hp = a\n    for i in range(n):\n        if hp <= 0:\n            break\n        if hp > b:\n            hp = a\n        hp -= h[i]\n        s += 1\n        if hp <= 0:\n            hp = b\n    return s\n\nassert(solution('''6 2 3 3''') == '5')\nassert(solution('''7 10 50 12 1 8''') == '6')\nassert(solution('''1 1 100 99''') == '1')\nassert(solution('''7 4 2 1''') == '6')\nassert(solution('''100''') == '1')\nassert(solution('''7 4 2 1''') == '6')\nassert(solution('''1 1 100 99''') == '1')\nassert(solution('''8 1 1 1''') == '5')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''8 10 50 12 1 8''') == '5')\nassert(solution('''1 1 100 99''') == '1')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert(solution('''10 2 2 1''') == '6')\nassert("
    },
    {
        "number": 4446,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = [int(x) for x in stdin.split(\" \")]\n    h = [int(x) for x in stdin.split(\" \")]\n\n    return \"no\"\n\n\ndef"
    },
    {
        "number": 4447,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    c = [0] * m\n    remainder = [0] * m\n    for i in range(n):\n        remainder[a[i] % m] += 1\n    c[0] = n // m\n    for i in range(1, m):\n        c[i] = c[i - 1] + remainder[i - 1]\n    return''.join(map(str, c))"
    },
    {
        "number": 4447,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(open('inputs/input11.txt', 'r').read())\n    '5 1 0 0 5'\n    \"\"\"\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    c = [0] * (m - 1)\n\n    r = 0\n    for i in range(n):\n        r += a[i]\n        c[r % (m - 1)] += 1\n\n    return''.join(map(str, c))\n\n\ndef"
    },
    {
        "number": 4447,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n    res = [0] * m\n    for i in range(m):\n        for j in a:\n            if j % m == i:\n                res[i] += 1\n    print(' '.join(map(str, res)))\n    print(a)\n    return \"\"\n\n\nassert solution(stdin + \"\"\"\\\n6 3\n3 2 0 6 10 12\n\n\"\"\") == \"\"\"\n3\n3 2 0 7 10 14 \n\"\"\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    remainders = [a[i] % m for i in range(n)]\n    counts = [0 for _ in range(m)]\n    for r in remainders:\n        counts[r] += 1\n    counts = [x * (n // m) for x in counts]\n    if counts[0]!= 0:\n        return '0'\n    return''.join([str(x) for x in counts])"
    },
    {
        "number": 4447,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    rem = [0] * m\n    for i in range(1, m):\n        rem[i] = n // i\n    t = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if rem[j] == t[j]:\n                rem[j] += 1\n                t[j] += 1\n                break\n    return''.join(map(str, rem))\n\nassert(solution(stdin) == stdout)\n"
    },
    {
        "number": 4447,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ninput()\na = list(map(int, stdin.split(' ')))\n\nstdout.write(solution(a))\n"
    },
    {
        "number": 4447,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = [n // m] * m\n    b[0] = n % m\n    for i in range(1, m):\n        b[i] = a[(i * n) // m]\n    return''.join(map(str, b))\n"
    },
    {
        "number": 4447,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n    res = a[:]\n    rem = list(set(range(m)) - set(map(lambda x: x % m, a)))\n    rem = list(map(lambda x: n // m, rem))\n    for r, x in zip(rem, a):\n        res[:r] = [x + 1 for _ in range(r)]\n    return''.join(map(lambda x: str(x), res))"
    },
    {
        "number": 4447,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    n, m = int(line[0]), int(line[1])\n\n    a = [int(x) for x in stdin.split()]\n\n    remainder = [0] * (m - 1)\n\n    for i in range(n):\n        remainder[a[i] % (m - 1)] += 1\n\n    for i in range(m - 1):\n        remainder[i] = remainder[i] / (n / m)\n\n    print(remainder)\n    print(*remainder)\n\n    return ''"
    },
    {
        "number": 4447,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    c = [0] * (m - 1)\n    for i in range(n):\n        j = i % m\n        c[j] += 1\n    return''.join([str(x) for x in c]) +'' +''.join([str(x) for x in a])\n"
    },
    {
        "number": 4448,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def read_data():\n        num_types, num_transactions = map(int, stdin.readline().split())\n        types = [int(s) for s in stdin.readline().split()]\n        transactions = [int(s) for s in stdin.readline().split()]\n        return num_types, types, transactions\n\n    def solve(num_types, types, transactions):\n        d = {type: 0 for type in xrange(num_types)}\n        for t, trans in enumerate(transactions):\n            d[types[t]] += trans\n\n        min_days = float('inf')\n        for offer in range(num_types):\n            max_day = min(offer + 1, num_days)\n            for day in xrange(max_day, 0, -1):\n                if d[offer] - day * 2 >= 0:\n                    min_days = min(min_days, day)\n\n        if min_days == float('inf'):\n            min_days = -1\n        return min_days\n\n    num_types, types, transactions = read_data()\n    num_days = max(transactions)\n    return str(solve(num_types, types, transactions))\n\nassert(solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8')\nassert(solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == '20')\nassert(solution('''3 3\n1 2 1\n1 1\n2 2\n''') == '-1')\nassert(solution('''2 3\n2 3\n''') == '-1')\nassert(solution('''1 1\n1 1\n1 1\n''') == '-1')\nassert(solution('''1 1\n1 1\n1 1\n''') == '-1')\nassert(solution('''3 1\n1 1\n1 1\n1 1\n''') == '-1')\nassert(solution('''4 2\n1 2\n1 1\n1 1\n1 1\n''') == '-1')\nassert(solution('''2 5\n2 2\n1 1\n2 2\n1 1\n1 1\n2 1\n''') == '-1')\nassert(solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == '8')\nassert(solution('''2 5\n2 2\n1 1\n1 1\n1 1\n1 1\n2 1\n''') == '20')\nassert(solution('''10 10\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9\n9 9"
    },
    {
        "number": 4448,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4448,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.strip().split())\n    k = [int(x) for x in stdin.strip().split()]\n    l = [int(x) for x in stdin.strip().split()]\n    return str(min(x + y + l[i] for i, x in enumerate(k) for y in l) // 2)\n\nTEST_CASES = (\n    (\"5 6\", \"1 2 0 2 0\"),\n    (\"5 3\", \"4 2\"),\n    (\"5 3\", \"4 2\"),\n    (\"3 5\", \"4 2\"),\n    (\"3 5\", \"4 2\"),\n    (\"5 3\", \"4 2\"),\n    (\"5 6\", \"1 2 0 2 0\"),\n)\n\nfor inp, exp in TEST_CASES:\n    res = solution(inp)\n    print(f\"res = {res}\")\n    print(f\"exp = {exp}\")\n    assert res == exp\n"
    },
    {
        "number": 4448,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.readline().strip().split(' ')]\n    k = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    def dp(i, k):\n        if k == 0 or i == 0:\n            return 0\n        if k >= k[i - 1]:\n            return max(dp(i - 1, k - k[i - 1]) + 2, dp(i - 1, k))\n        else:\n            return dp(i - 1, k)\n\n    return str(dp(n, k))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4448,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.readline().split()))\n    k = list(map(int, stdin.readline().split()))\n    for _ in range(m):\n        d, t = tuple(map(int, stdin.readline().split()))\n        k.append(k[d - 1] - t)\n    k.sort()\n    total = 0\n    ans = 0\n    for i in range(1, n + 1):\n        total += i\n        if total >= k[i - 1]:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4448,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(n) for n in stdin.split())\n    k = [int(n) for n in stdin.split()]\n    m = int(stdin)\n    return str(buy_all_microtransactions(k, m))\n\ndef"
    },
    {
        "number": 4448,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Hello World\"\n\ndef"
    },
    {
        "number": 4448,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = [line.strip() for line in stdin.split(\"\\n\")]\n    n, m = int(lines[0].split()[0]), int(lines[0].split()[1])\n\n    type_sales = [int(x) for x in lines[1].split()]\n    offer_sales = [int(x) for x in lines[2].split()]\n\n    sales = [offer_sales[0]]\n    for i in range(1, m):\n        if offer_sales[i] == 0:\n            sales.append(type_sales[i])\n        else:\n            sales.append(type_sales[i] * offer_sales[i])\n\n    k = sum(sales)\n    if k < 1:\n        return 0\n    if k > 1000:\n        return 0\n\n    max_day = 0\n    for i in range(n):\n        day = 0\n        for j in range(m):\n            if offer_sales[j] > 0:\n                day += sales[j] // offer_sales[j]\n        if day > max_day:\n            max_day = day\n    return max_day\n\nassert(solution('''5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n''') == 8)\nassert(solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == 20)\nassert(solution('''5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n''') == 19)\n"
    },
    {
        "number": 4448,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    k = [int(x) for x in stdin.split()]\n    days = 0\n    price = 0\n    for i in range(N):\n        days += k[i]\n    i = 0\n    while i < M:\n        d, t = map(int, stdin.split())\n        days -= t\n        if d < days:\n            if t == 1:\n                price += d\n            else:\n                price += t\n        elif days == 0:\n            break\n        else:\n            i += 1\n    return str(price)\n\n\ndef"
    },
    {
        "number": 4448,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = [int(stdin) for stdin in stdin.split()]\n    a = list(map(int, stdin.split()))\n    b = sorted(a)\n    m = list(map(int, stdin.split()))\n    # print(b)\n    days = 1\n    result = 0\n    for i in range(n):\n        if k[i] > b[i]:\n            print(b[i], k[i], i)\n            result += 1\n    print(result)\n    return str(result)\n"
    },
    {
        "number": 4449,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Read input\n    :param stdin:\n    :return:\n    \"\"\"\n    q = int(stdin)\n    for _ in range(q):\n        n = int(stdin)\n        sticks = [int(x) for x in stdin.split()]\n        print(\"YES\" if rectangles(sticks, n) else \"NO\")\n\ndef"
    },
    {
        "number": 4449,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        sticks = sorted(list(map(int, stdin.readline().strip().split())))\n        for i in range(n):\n            for j in range(i, n):\n                if sticks[j] < sticks[i]:\n                    break\n            else:\n                print('YES')\n                break\n        else:\n            print('NO')\n"
    },
    {
        "number": 4449,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sticks = [int(x) for x in stdin.strip().split(' ')]\n\n    def is_valid(sticks, n):\n        total_length = sum(sticks)\n        if total_length % n!= 0:\n            return False\n        return True\n\n    for _ in range(n):\n        if is_valid(sticks, 4):\n            return 'YES'\n        sticks[-1] -= 1\n        sticks[0] += 1\n        sticks[2] -= 1\n        sticks[3] += 1\n\n    return 'NO'"
    },
    {
        "number": 4449,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_queries = int(stdin)\n    for _ in range(num_queries):\n        n = int(stdin)\n        sticks = list(map(int, stdin.split()))\n\n        sticks.sort()\n        stack = []\n        for i in range(0, len(sticks), 2):\n            stack.append(sticks[i])\n\n        while len(stack) > 2:\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a * b)\n        if len(stack) == 2:\n            if stack[0] == stack[1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4449,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sticks = [int(stdin.readline().strip()) for _ in range(4 * n)]\n\n    sticks.sort()\n    sticks.reverse()\n\n    for _ in range(n):\n        if sticks[0] + sticks[1] > sticks[2]:\n            sticks[2] -= sticks[0]\n            sticks[0] = 0\n        elif sticks[1] + sticks[2] > sticks[0]:\n            sticks[0] -= sticks[1]\n            sticks[1] = 0\n        else:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 1:\n        return \"YES\"\n    sticks = list(map(int, stdin.readline().split()))\n    sticks = sorted(sticks)\n    for i in range(1, n):\n        if sticks[i] * 4!= sticks[i - 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    sticks = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    q = int(stdin.split(\"\\n\")[0])\n    n = int(stdin.split(\"\\n\")[1])\n    if n > sum(sticks):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        cnt = 0\n        sticks.sort()\n        print(sticks)\n        for i in range(len(sticks)):\n            if i % 4!= 3:\n                cnt += sticks[i]\n            if cnt == n:\n                print(\"YES\")\n                break\n            elif i == len(sticks) - 1:\n                print(\"NO\")\n        return"
    },
    {
        "number": 4449,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1\n   ... 1 1 10 10\n   ... 2\n   ... 10 5 2 10 1 1 2 5\n   ... 2\n   ... 10 5 1 10 5 1 1 1\n   ... 2\n   ... 1 1 1 1 1 1 1 1\n   ... 1\n   ... 10000 10000 10000 10000\n   ... ''')\n    'YES'\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4449,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sticks = [int(x) for x in stdin.readline().strip().split()]\n    sticks.sort(reverse=True)\n    if n == 1:\n        return \"NO\"\n    r = 0\n    q = int(stdin.readline().strip())\n    if n < 4:\n        return \"NO\"\n    if n % 4!= 0:\n        return \"NO\"\n    for i in range(0, 4 * n, 4):\n        r += sticks[i] * sticks[i + 1]\n    if r == 0:\n        return \"NO\"\n    for i in range(1, q + 1):\n        x = int(stdin.readline().strip())\n        m = r / x\n        if m == 0:\n            continue\n        l = sticks[:4 * n - 1]\n        r = 0\n        for i in range(0, 4 * n, 4):\n            r += l[i] * l[i + 1]\n        if r!= m * x:\n            print(m, x)\n            print(l)\n            print(r)\n            print(m * x)\n            print()\n            continue\n        print(\"YES\")\n    return \"NO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        rectangles = []\n        for i in range(0, len(a), 4):\n            rectangles.append((a[i], a[i+1], a[i+2], a[i+3]))\n        if can_create_rectangles(rectangles, n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\ndef"
    },
    {
        "number": 4450,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    d = [[float('inf')] * n for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        d[u - 1][v - 1] = w\n        d[v - 1][u - 1] = w\n    for k in range(1, n):\n        for i in range(n):\n            for j in range(i, n):\n                d[i][j] = min(d[i][j], d[i][k - 1] + d[k - 1][j])\n    return''.join(map(str, d[k - 1]))\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4450,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y, w = [int(x) for x in stdin.split()]\n        graph[x-1].append((y-1, w))\n        graph[y-1].append((x-1, w))\n\n    return bfs(graph, k-1)\n\ndef"
    },
    {
        "number": 4450,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n, m, k = map(int, stdin.readline().strip().split())\n        d = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n        edges = [stdin.readline().strip().split() for _ in range(m)]\n        for u, v, w in edges:\n            d[int(u)][int(v)] = int(w)\n        res = dijkstra(d, 1)\n        print(res[k])\n    return \"\"\n\ndef"
    },
    {
        "number": 4450,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    vertices, edges, k = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(vertices)]\n    for _ in range(edges):\n        u, v, w = [int(x) for x in stdin.split()]\n        graph[u].append([v, w])\n        graph[v].append([u, w])\n    distances = [[float(\"inf\") for _ in range(vertices)] for _ in range(vertices)]\n    for i in range(vertices):\n        distances[i][i] = 0\n    for _ in range(k):\n        s, t = [int(x) for x in stdin.split()]\n        distances[s][t], distances[t][s] = 1, 1\n    for k in range(vertices):\n        for i in range(vertices):\n            for j in range(vertices):\n                distances[i][j] = min(distances[i][j], distances[i][k] + distances[k][j])\n    min_distances = [float(\"inf\") for _ in range(vertices)]\n    for i in range(vertices):\n        min_distances[i] = min(min_distances[i], distances[i][i])\n    return str(min_distances[vertices - 1])\n"
    },
    {
        "number": 4450,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    d = [[float('inf') for _ in range(n)] for _ in range(n)]\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        d[x - 1][y - 1] = w\n    for k in range(1, n):\n        for i in range(n):\n            for j in range(n):\n                if d[i][j] > d[i][k - 1] + d[k - 1][j]:\n                    d[i][j] = d[i][k - 1] + d[k - 1][j]\n    for _ in range(k):\n        m = int(stdin.readline())\n        x, y, w = map(int, stdin.split())\n        if d[x - 1][y - 1] == w:\n            print(0)\n        else:\n            print(d[x - 1][y - 1] - w)"
    },
    {
        "number": 4450,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n, m, k = map(int, stdin.readline().strip().split())\n        d = [[1e9]*n for _ in range(n)]\n        for _ in range(m):\n            i, j, w = map(int, stdin.readline().strip().split())\n            d[i-1][j-1] = min(d[i-1][j-1], w)\n            d[j-1][i-1] = min(d[j-1][i-1], w)\n        ans = [0]*n\n        for _ in range(k):\n            i, j, w = map(int, stdin.readline().strip().split())\n            ans[i-1] = min(ans[i-1], d[j-1][i-1])\n        print(ans[0])"
    },
    {
        "number": 4450,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def dijkstra(d: Dict[int, int], s: int, dists: Dict[int, int]) -> bool:\n        while dists:\n            curr = min(dists, key=lambda k: dists[k])\n            if dists[curr] == dists[s]:\n                return True\n            del dists[curr]\n            for n in d[curr]:\n                if n not in dists:\n                    dists[n] = dists[curr] + 1\n                    dists[n] = min(dists[n], dists[n-1] + 1)\n                    dists[n] = min(dists[n], dists[n+1] + 1)\n        return False\n\n    n, m, k = list(map(int, stdin.split()))\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n    dists = {i: float('inf') for i in range(1, n+1)}\n    dists[0] = 0\n    d = {i: {j for j, w in edges if i < j} for i in range(n+1)}\n    d[0] = set()\n    for i, j, w in edges:\n        d[i].add((j, w))\n    if not dijkstra(d, n, dists):\n        return 'IMPOSSIBLE'\n    return str(dists[k])\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4450,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4450,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Split lines and remove newline character\n    lines = stdin.strip().split('\\n')\n    n, m, k = map(int, lines[0].split())\n    d = [[float('inf') for _ in range(n)] for _ in range(n)]\n\n    # Read edges\n    for line in lines[1:]:\n        x, y, w = map(int, line.split())\n        d[x-1][y-1] = w\n\n    # Floyd-Warshall algorithm\n    for l in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][l] + d[l][j])\n    # Floyd-Warshall algorithm ends here\n\n    # Sort and print\n    r = []\n    for i in range(n):\n        for j in range(n):\n            if d[i][j] == k:\n                r.append(d[i][j])\n    return str(min(r))"
    },
    {
        "number": 4450,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = defaultdict(list)\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x].append((w, y))\n        graph[y].append((w, x))\n    dist = [float('inf')] * n\n    dist[0] = 0\n    queue = [(0, 0)]\n    while queue:\n        d, v = heappop(queue)\n        if d > dist[v]:\n            continue\n        for w, u in graph[v]:\n            if dist[u] == float('inf') or dist[u] > d + w:\n                dist[u] = d + w\n                heappush(queue, (d + w, u))\n    return str(dist[k - 1])"
    },
    {
        "number": 4451,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4451,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4451,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin.readline())\n    skills = list(map(int, stdin.readline().split()))\n    n = len(skills)\n    \n    skills_sum = sum(skills)\n    \n    teams = set()\n    for i in range(n):\n        if skills[i] in teams:\n            continue\n        teams.add(skills[i])\n        new_team = set()\n        for j in range(i + 1, n):\n            if skills[j] in new_team:\n                continue\n            new_team.add(skills[j])\n            if skills_sum - skills[i] - skills[j] <= skills[j] - skills[i]:\n                teams.add(skills[i])\n                teams.add(skills[j])\n                break\n            elif skills_sum - skills[i] - skills[j] > skills[j] - skills[i]:\n                teams.add(skills[j])\n                break\n    return str(len(teams)) + \" \" + str(len(teams))"
    },
    {
        "number": 4451,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4451,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    from itertools import groupby\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    result, k = 0, 0\n    for _, group in groupby(a):\n        group = list(group)\n        result += max(group) - min(group)\n        k += 1\n\n    print(result)\n    print(' '.join(str(i) for i in a))\n"
    },
    {
        "number": 4451,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n\n    num_students = int(stdin[0])\n\n    skills = [int(x) for x in stdin[1].split(' ')]\n\n    num_teams = 0\n\n    if num_students == 1:\n        num_teams = 1\n    elif num_students == 2:\n        num_teams = 2\n    elif num_students == 3:\n        num_teams = 3\n    else:\n        max_skill = max(skills)\n\n        min_skill = min(skills)\n\n        team_size = num_students // 3\n\n        num_teams = num_students // team_size + num_students % team_size\n\n        for skill in skills:\n            if skill >= max_skill - min_skill:\n                num_teams += 1\n\n    teams = []\n\n    for _ in range(num_teams):\n        teams.append(list(range(num_students)))\n\n    for team in teams:\n        for i in range(len(team)):\n            team[i] = skills[team[i]]\n\n    skills = sorted(skills)\n\n    teams = sorted(teams)\n\n    for i in range(num_teams):\n        for j in range(len(teams[i])):\n            teams[i][j] = skills[teams[i][j]]\n\n    for team in teams:\n        print(' '.join(str(x) for x in team))\n"
    },
    {
        "number": 4451,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.strip().split('\\n')[0]\n    a = list(map(int, stdin.strip().split('\\n')[1].split(' ')))\n    res = 0\n    n = len(a)\n    a.sort()\n    for i in range(1, n):\n        if a[i] - a[i - 1] > a[0]:\n            res += a[i] - a[i - 1]\n    return \"%d %d\" % (res, n // 3)\n\nimport sys"
    },
    {
        "number": 4451,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(elem) for elem in stdin.readline().strip().split(' ')]\n    res = 0\n    # do not forget to sort the array\n    a.sort()\n    k = 1\n    for i in range(1, n):\n        res += (a[i] - a[i - 1])\n        if res > k:\n            k += 1\n    return f'{res}\\n{k}'\n"
    },
    {
        "number": 4451,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The number of students $n$\n    The programming skills of the students $a_1, a_2, \\dots, a_n$\n    \n    Each student belongs to exactly one team. The number of teams is the minimum number of teams.\n    \n    The minimum diversity of a team is the maximum difference between the maximum and minimum programming skills of some student that belongs to this team.\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    # the number of students\n    a_min, a_max = min(a), max(a)\n    \n    # the total diversity\n    diversity = a_max - a_min\n    \n    # the number of teams\n    k = sum(1 for i in range(n) if a[i] > a_min)\n    \n    # the teams\n    teams = [1] * k\n    \n    # total team diversity\n    diversity_total = 0\n    \n    # the index of the first student\n    i = 0\n    \n    while diversity > 0:\n        \n        # increase diversity\n        diversity -= (a[i] - a_min)\n        teams[i] += 1\n        \n        # update index\n        i += 1\n        \n        # if all the students are in this team, increase diversity and add one more team\n        if i >= n:\n            diversity += (a_max - a[0])\n            i = 0\n            \n    # print result\n    print(diversity_total)\n    print(' '.join(map(str, teams)))\n    return str(diversity_total) + '\\n' +''.join(map(str, teams))"
    },
    {
        "number": 4451,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = [line.strip().split(' ') for line in stdin.split('\\n')]\n    n = int(lines[0][0])\n    a = [int(e) for e in lines[1]]\n\n    # get unique elements\n    a = sorted(set(a))\n\n    # take the unique elements as number of teams\n    k = len(a)\n\n    # to store the result\n    res = 0\n    teams = []\n\n    for i in range(k):\n        # get the teams\n        team = a[i]\n\n        # divide the students into the teams\n        divider = a[i + 1:k]\n\n        # for each team, check if the team is valid\n        valid = True\n        for d in divider:\n            if d > team:\n                valid = False\n                break\n        if valid:\n            res += team\n            teams.append(team)\n\n    return f'{res}\\n{k}\\n' +''.join(str(t) for t in teams)"
    },
    {
        "number": 4452,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n = int(stdin.readline())\n        ans = n\n        while n > 0:\n            ans += n % 10\n            n //= 10\n        print(ans)"
    },
    {
        "number": 4452,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n\n@app.route('/', methods=['POST'])\ndef"
    },
    {
        "number": 4452,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(readInt()):\n        n = readInt()\n        print(f'{min(n//i for i in range(1, 10))}')\n        # return str()"
    },
    {
        "number": 4452,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = {}\n    for _ in range(n):\n        d[int(stdin.readline())] = True\n    s = 0\n    for i in range(1, n + 1):\n        if i not in d:\n            s += i\n    return str(s)"
    },
    {
        "number": 4452,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            res += 1\n    return str(res)"
    },
    {
        "number": 4452,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        s = str(n)\n        for i in range(len(s)):\n            if int(s[i]) % 2:\n                s = s[:i] + \"5\" + s[i + 1:]\n        print(s)"
    },
    {
        "number": 4452,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''6\n   ... 1000\n   ... 3500\n   ... 9000\n   ... 10000\n   ... 9000\n   ... 10000\n   ... 10000\n   ... 10000\n   ... 5\n   ... 4\n   ... 2\n   ... 1\n   ... \n   ... \n   ... 1\n   ... 2\n   ... 3\n   ... 4\n   ... 5\n   ... 6\n   ... 7\n   ... 8\n   ... 9\n   ... ''')\n    '1'\n    >>> solution('''10\n   ... 7\n   ... 45\n   ... 789\n   ... 923\n   ... 12345\n   ... 9999\n   ... 12345\n   ... 9999\n   ... 12345\n   ... 9999\n   ... 12345\n   ... 9999\n   ... 9999\n   ... 9999\n   ... 9999\n   ... 9999\n   ... 9999\n   ... 9999\n   ... 9999\n   ... ''')\n    '1'\n    >>> solution('''10\n   ... 9\n   ... 6\n   ... 3\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... ''')\n    '1'\n    >>> solution('''10\n   ... 9\n   ... 8\n   ... 7\n   ... 6\n   ... 5\n   ... 4\n   ... 3\n   ... 2\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... 1\n   ... ''')\n    '2'\n    '''\n    n = int(stdin.readline())\n    answers = [n]\n    for _ in range(n - 1):\n        answers.append(int(stdin.readline()))\n    answers.sort()\n    count = 1\n    i = 1\n    while i < len(answers):\n        if answers[i] == answers[i - 1]:\n            count += 1\n        else:\n            if count > 1:\n                print(count)\n                count = 1\n            print(answers[i - 1])\n        i += 1\n    if count > 1:\n        print(count)\n    return str(stdin.readline())"
    },
    {
        "number": 4452,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        x = str(n)\n        if len(x) == 1:\n            print(1)\n            print(n)\n        else:\n            k = len(x) - 1\n            summands = [int(x[0]),]\n            for i in range(k):\n                if int(x[i]) == 0:\n                    summands.append(0)\n                    if summands[-1] == 0:\n                        k -= 1\n                    else:\n                        break\n            if k == 1:\n                print(len(summands))\n                print(n)\n            else:\n                summands = [int(x[0]),]\n                for i in range(1, k):\n                    if int(x[i]) == 0:\n                        summands.append(0)\n                        if summands[-1] == 0:\n                            k -= 1\n                        else:\n                            break\n                summands = [int(x[0]),] + summands\n                for i in range(1, k):\n                    if int(x[i]) == 0:\n                        summands.append(0)\n                    else:\n                        break\n                if k == 1:\n                    print(len(summands))\n                    print(n)\n                else:\n                    for i in range(k - 1):\n                        summands[i + 1] = summands[i] + summands[i + 1]\n                    print(len(summands))\n                    print(summands[0])\n                    print(n)\n\nsolution(stdin)\n"
    },
    {
        "number": 4452,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f'{n}\\n'.join(str(n - i) +'' +''.join(str(j) for j in range(1, i+1)) for i in range(1, n + 1))\n\nassert(solution('2')) == '1\\n1\\n'\nassert(solution('4')) == '2\\n1\\n1\\n1\\n'\nassert(solution('5')) == '3\\n1\\n1\\n1\\n1\\n'\nassert(solution('8')) == '4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('9')) == '5\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('10')) == '6\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('11')) == '7\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('12')) == '8\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('13')) == '9\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('14')) == '10\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('15')) == '11\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('16')) == '12\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('17')) == '13\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('18')) == '14\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('19')) == '15\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('20')) == '16\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('21')) == '17\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('22')) == '18\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('23')) == '19\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n'\nassert(solution('24')) == '20\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 4452,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        n = int(stdin)\n        r = 0\n        while n > 0:\n            r += n % 10\n            n //= 10\n        print(r)\n    return stdin\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_sample(self):\n        self.assertEqual(solution('2'), '2')\n\n    def test_solution(self):\n        self.assertEqual(solution('5'), '3')\n        self.assertEqual(solution('5009'), '2')\n        self.assertEqual(solution('7'), '1')\n        self.assertEqual(solution('9876'), '4')\n        self.assertEqual(solution('10000'), '1')\n        self.assertEqual(solution('10'), '1')\n"
    },
    {
        "number": 4453,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    input_lines = iter(lines)\n    q = int(next(input_lines))\n    for _ in range(q):\n        n = int(next(input_lines))\n        p = [int(x) for x in next(input_lines).split()]\n        result = [0] * n\n        p_dict = {}\n        for index, i in enumerate(p):\n            p_dict[i] = index\n        for _ in range(n):\n            k = int(next(input_lines))\n            result[p_dict[k]] += 1\n        print(*result)\n        \nsolution(input())\n"
    },
    {
        "number": 4453,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, q = [int(x) for x in stdin.split()]\n    for _ in range(q):\n        n = int(stdin.readline())\n        p = list(map(int, stdin.readline().split()))\n        r = 1\n        for i in range(n):\n            r += (p[i] - 1) * (n - i)\n        print(r)"
    },
    {
        "number": 4453,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        p = tuple(map(int, stdin.readline().strip().split()))\n        result = [0] * n\n        p = sorted(p)\n        for i in range(n):\n            kid = p[i]\n            result[kid - 1] += 1\n        print(*result)\n    return \"\""
    },
    {
        "number": 4453,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        p = list(map(int, stdin.readline().strip().split()))\n        p_set = set(p)\n        if len(p_set) < len(p):\n            print(*p)\n        else:\n            result = [0] * n\n            for i in range(1, n + 1):\n                for j in p:\n                    if i == j:\n                        result[i - 1] += 1\n            print(*result)"
    },
    {
        "number": 4453,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4453,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://projecteuler.net/problem=45\n    \"\"\"\n    query = stdin.readline().strip().split()\n    query_length = int(query[0])\n    book_of_kids = query[1:]\n    # kids = stdin.readline().strip().split()\n    # kids_length = len(kids)\n    # assert kids_length == int(query[0])\n    # books_of_kids = [int(book) for book in stdin.readline().strip().split()]\n    # assert books_of_kids == query[1:]\n    # books_of_kids = stdin.readline().strip()\n\n    first_kid_books = []\n    last_kid_books = []\n    for _ in range(query_length):\n        kid_books = stdin.readline().strip().split()\n        kid_books = [int(book) for book in kid_books]\n        first_kid_books.append(kid_books[0])\n        last_kid_books.append(kid_books[-1])\n\n    # print(first_kid_books, last_kid_books)\n    # print(books_of_kids)\n\n    # get the books of the first and last kids\n    first_kid_books = [int(book) for book in first_kid_books]\n    last_kid_books = [int(book) for book in last_kid_books]\n\n    # print(first_kid_books, last_kid_books)\n    # print(books_of_kids)\n\n    # for each book, if it is in the first kids, increase the count by 1\n    # if it is in the last kids, increase the count by 1\n    count = 0\n    for book in books_of_kids:\n        if book in first_kid_books:\n            count += 1\n\n    for book in books_of_kids:\n        if book in last_kid_books:\n            count += 1\n\n    return count\n\nimport sys\n"
    },
    {
        "number": 4453,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = [int(x) for x in stdin.readline().split()]\n    m = int(stdin.readline())\n    c = [int(x) for x in stdin.readline().split()]\n    pass"
    },
    {
        "number": 4453,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    T = int(stdin.readline())\n    for _ in range(T):\n        n = int(stdin.readline())\n        p = list(map(int, stdin.readline().split()))\n        print(*solve(n, p), sep=\" \")\n    return \"\"\n\ndef"
    },
    {
        "number": 4453,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    book_to_kid = [0] * n\n    kid_to_book = {}\n    for i in range(n):\n        p = list(map(int, stdin.split()))\n        kid_to_book[i+1] = p\n\n    for _ in range(q):\n        day, kid = map(int, stdin.split())\n        book_to_kid[kid-1] += day\n        for p in kid_to_book[kid]:\n            book_to_kid[p-1] -= day\n    return''.join(map(str, book_to_kid))"
    },
    {
        "number": 4453,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    k = [int(x) for x in stdin.readline().strip().split(' ')]\n    p = [int(x) for x in stdin.readline().strip().split(' ')]\n    n = len(k)\n    for _ in range(n):\n        k[_] %= n\n    k = sorted(k)\n    p = sorted(p)\n    return str.join(' ', map(str, count_loops(k, p)))\n\ndef"
    },
    {
        "number": 4454,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(goods: list, prices: list) -> str:\n        def dp(cost: int) -> list:\n            if cost == 0:\n                return [0 for _ in range(len(prices))]\n\n            t = [float(\"inf\") for _ in range(len(prices))]\n            t[0] = 0\n            for i in range(1, len(prices)):\n                for j in range(i):\n                    if prices[i] - prices[j] < cost:\n                        continue\n                    t[i] = min(t[i], t[j] + prices[i] - prices[j])\n\n            return t\n\n        t = [float(\"inf\") for _ in range(len(prices))]\n        t[0] = 0\n        for i in range(1, len(prices)):\n            for j in range(i):\n                if prices[i] - prices[j] < 0:\n                    continue\n                t[i] = min(t[i], t[j] + prices[i] - prices[j])\n\n        t = dp(0)\n        t.sort()\n        for i in t:\n            if i < 0:\n                return \"-1\"\n        return str(t[-1])\n\n    def read_line(line: str) -> list:\n        return [int(i) for i in line.split()]\n\n    line = read_line(stdin.readline())\n    while line!= []:\n        solve(line[1:], line[0])\n        line = read_line(stdin.readline())\n"
    },
    {
        "number": 4454,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    n = int(stdin)\n    nums = list(map(int, stdin.split(' ')))\n    a = nums\n    res = 0\n    for _ in range(q):\n        res += min(a)\n        del a[a.index(min(a))]\n    return str(res)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4454,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, = list(map(int, stdin.split()))\n    prices = list(map(int, stdin.split()))\n    prices.sort()\n    cur = 0\n    for i in range(n):\n        cur += prices[i]\n        if cur > prices[i]:\n            return str(prices[i])\n"
    },
    {
        "number": 4454,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4454,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    price = list(map(int, stdin.readline().strip().split()))\n\n    def min_sum(n: int, price: List[int]) -> int:\n        price.sort()\n        s = 0\n        for i in range(n):\n            s += price[i]\n        return s\n\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        price = list(map(int, stdin.readline().strip().split()))\n        print(min_sum(n, price))\n"
    },
    {
        "number": 4454,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    prices = list(map(int, lines[1].split(' ')))\n    min_price = min(prices)\n    return str(min_price)"
    },
    {
        "number": 4454,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\n@pytest.mark.parametrize(\n    (\"input_s\", \"expected\"),\n    [\n        (\"\", []),\n        (\"\", [0]),\n        (\"1\\n2\", [2]),\n        (\"1\\n2\\n1\", [2]),\n        (\"1\\n2\\n1\\n2\", [2]),\n        (\"1\\n1\", [1]),\n        (\"1\\n1\\n1\", [1]),\n        (\"1\\n1\\n1\\n1\", [1]),\n        (\"1\\n1\\n1\\n1\\n1\", [1]),\n        (\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 4454,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    q = int(stdin.readline().strip())\n    queries = [list(map(int, stdin.readline().strip().split(' '))) for _ in range(q)]\n    # sort the array so we can find the smallest number in O(nlogn)\n    a.sort()\n    # create the target array\n    target = [0] * n\n    # create the result array\n    result = [0] * q\n    # iterate through each query and find the minimum\n    for i in range(q):\n        for j in range(n):\n            if target[j] == 0:\n                target[j] = queries[i][j]\n            elif queries[i][j] < target[j]:\n                target[j] = queries[i][j]\n        result[i] = target[0]\n        target = [0] * n\n    return '\\n'.join(list(map(str, result)))"
    },
    {
        "number": 4454,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ...\ndef"
    },
    {
        "number": 4454,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()[:-1]\n    prices = [int(x) for x in stdin.readline().split()]\n    q = stdin.readline()[:-1]\n\n    min_sum = prices[0] * n\n    for price in prices:\n        min_sum += price\n\n    min_price = 0\n    for price in prices:\n        min_price += price\n        if min_price > min_sum / 2:\n            break\n\n    print(min_price)\n"
    },
    {
        "number": 4455,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4455,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for _ in range(k)]\n    matrix.sort(key=lambda pair: pair[1], reverse=True)\n    mentors = [0] * n\n    for i, (skill, _) in enumerate(matrix):\n        for j in range(i):\n            if skill > matrix[j][1]:\n                mentors[i] += 1\n    return''.join(map(str, mentors))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4455,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nsolution('3 1\\n4 5\\n5 4\\n2 1') == '0 0 1 2'\nsolution('10 4\\n5 4 1 5 4 3 7 1 2 5\\n4 6\\n2 1\\n10 8\\n3 5\\n') == '5 4 0 5 3 3 9 0 2 5'\nsolution('6 2\\n5 1\\n5 1\\n5 4\\n6 4\\n4 5\\n5 4\\n4 6\\n4 6\\n5 5\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4 6\\n5 4\\n1 1') == '5 4 0 5 3 3 9 0 2 5'\nsolution('10 3\\n1 3 3 4 5 4 1 2 5\\n4 4\\n2 1\\n5 5\\n3 4\\n5 5\\n4 4\\n5 5\\n4 4\\n4 6\\n4"
    },
    {
        "number": 4455,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\nfrom typing import List\n\nTEST_CASES = [\n    {\n        \"arguments\": {\n            \"n\": 4,\n            \"k\": 2,\n            \"r\": [10, 4, 10, 15],\n            \"pairs\": [\n                (1, 2),\n                (4, 3),\n            ]\n        },\n        \"expected\": [0, 0, 1, 2]\n    },\n    {\n        \"arguments\": {\n            \"n\": 10,\n            \"k\": 4,\n            \"r\": [5, 4, 1, 5, 4, 3, 7, 1, 2, 5],\n            \"pairs\": [\n                (1, 2),\n                (4, 3),\n                (10, 8),\n                (3, 5),\n            ]\n        },\n        \"expected\": [5, 4, 0, 5, 3, 3, 9, 0, 2, 5]\n    },\n]\n\n\ndef"
    },
    {
        "number": 4455,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_pairs, num_skills = map(int, stdin.split())\n    skills = [int(skill) for skill in stdin.split()]\n    mentors = set()\n    for _ in range(num_pairs):\n        mentor, mentor_skill = map(int, stdin.split())\n        if mentor_skill > skills[mentor - 1]:\n            mentors.add(mentor)\n    return''.join(map(str, sorted(mentors)))\n\nassert solution('''4 2\n10 4 10 15\n1 2\n4 3\n''') == '0 0 1 2'\nassert solution('''10 4\n5 4 1 5 4 3 7 1 2 5\n4 6\n2 1\n10 8\n3 5\n''') == '5 4 0 5 3 3 9 0 2 5'\n"
    },
    {
        "number": 4455,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    r = []\n    for i in range(k):\n        a[i] = min(a)\n        a[i] += 1\n    for i in range(k):\n        r.append(a.index(max(a)))\n        a[a.index(max(a))] += 1\n    return \" \".join([str(i) for i in r])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4455,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4455,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.read().strip()"
    },
    {
        "number": 4455,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, k = [int(x) for x in stdin.split()]\n    skills = [int(x) for x in stdin.split()]\n    mentors = [0]*n\n    for i in range(n):\n        for j in range(n):\n            if skills[i] > skills[j]:\n                if not (i == j or j in mentors): mentors[i] = 1\n    return''.join(map(str, mentors))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4455,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    skills = [int(x) for x in stdin.split()]\n    skills.sort()\n\n    quarrels = set()\n    for i in range(0, len(skills), 2):\n        if skills[i] == skills[i + 1]:\n            quarrels.add(skills[i])\n\n    quarrels = list(quarrels)\n    quarrels.sort()\n\n    mentors = [0] * len(skills)\n    for i, q in enumerate(quarrels):\n        for j in range(i, len(skills)):\n            if j == i:\n                if skills[j] > q:\n                    mentors[j] += 1\n            else:\n                if skills[j] > q and skills[j] not in quarrels:\n                    mentors[j] += 1\n\n    return \" \".join(str(mentors[i]) for i in range(n))\n\nassert(solution(\"4 2\") == \"0 0 1 2\")\nassert(solution(\"10 4 10 15\") == \"0 0 1 2\")\nassert(solution(\"1 2\") == \"0 0 1 2\")\nassert(solution(\"4 6\") == \"5 4 0 5 3 3 9 0 2 5\")\nassert(solution(\"2 1\") == \"0 0 1 2\")\nassert(solution(\"10 8\") == \"5 4 0 5 3 3 9 0 2 5\")\nassert(solution(\"3 5\") == \"5 4 0 5 3 3 9 0 2 5\")\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4456,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n > 26:\n        return \"NO\"\n\n    p = [int(x) for x in stdin.split()]\n    q = [int(x) for x in stdin.split()]\n\n    if n > len(p) or n > len(q):\n        return \"NO\"\n\n    p_perm = set(p)\n    q_perm = set(q)\n    if len(p_perm) < n or len(q_perm) < n:\n        return \"NO\"\n\n    s = [chr(i + ord(\"a\")) for i in range(n)]\n    p_ind = []\n    q_ind = []\n    for i in range(n):\n        if p[i] not in p_perm:\n            p_ind.append(i)\n        if q[i] not in q_perm:\n            q_ind.append(i)\n    p_perm = set(p_ind)\n    q_perm = set(q_ind)\n    if len(p_perm) < n or len(q_perm) < n:\n        return \"NO\"\n\n    s = [chr(i + ord(\"a\")) for i in range(n)]\n    for i in range(n):\n        if i in p_perm:\n            s[p[i - 1]] = chr(ord(s[p[i - 1]]) + 1)\n        if i in q_perm:\n            s[q[i - 1]] = chr(ord(s[q[i - 1]]) - 1)\n    return \"YES\\n\" + \"\".join(s)\n"
    },
    {
        "number": 4456,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, n, k = [int(x) for x in stdin.split()]\n    p, q = [int(x) for x in stdin.split()]\n    n = len(s)\n    s = sorted(s)\n    if any(s[p_i] > s[p_i + 1] or s[q_i] > s[q_i + 1] for p_i in range(n - 1) for q_i in range(n - 1)):\n        return \"NO\"\n    res = [s[p_i] for p_i in range(n) if p_i % 2] + [s[q_i] for q_i in range(n) if q_i % 2]\n    return \"YES\" if sorted(res) == res else \"NO\"\n\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin) == \"NO\")\nassert(solution(stdin) == \"YES\")\nassert(solution(stdin"
    },
    {
        "number": 4456,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n    p.sort()\n    q.sort()\n\n    # s = \"\".join(map(chr, p))\n    s = [chr(i) for i in p]\n\n    print(\"YES\" if n >= k else \"NO\")\n    return \"\".join(s)\n\nassert solution(stdin) == stdout\n"
    },
    {
        "number": 4456,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.readline().split()))\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n    s = stdin.readline().strip()\n    return 'YES' if k <= 26 and min(p) <= max(q) and is_sorted(s, p) and is_sorted(s, q) else 'NO'\n\n\nassert (solution(StringIO('3 2')) == 'YES\\nabb')\nassert (solution(StringIO('3 3')) == 'NO')\nassert (solution(StringIO('1 2 3')) == 'YES\\nabb')\nassert (solution(StringIO('1 3 2')) == 'NO')\nassert (solution(StringIO('5 5')) == 'NO')\n"
    },
    {
        "number": 4456,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.rstrip()\n    p = list(map(int, stdin.rstrip().split()))\n    q = list(map(int, stdin.rstrip().split()))\n    return \"YES\" if sorted(s[p[i]:p[i] + n] for i in range(n)) == sorted(s[q[i]:q[i] + n] for i in range(n)) else \"NO\"\n\nassert(solution(input()) == solution(input()))\n'''\n\ndef"
    },
    {
        "number": 4456,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n    s = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for i in range(n):\n        if p[i]!= q[i]:\n            if i < n - 1:\n                if p[i + 1] > p[i] and q[i + 1] > q[i]:\n                    print(\"YES\", end=\"\")\n                    print(*s[p[i]:p[i + 1] + 1], end=\"\")\n                    print(*s[q[i]:q[i + 1] + 1], sep=\"\")\n                    return\n            else:\n                if p[0] > p[i] and q[0] > q[i]:\n                    print(\"YES\", end=\"\")\n                    print(*s[p[i]:p[0] + 1], end=\"\")\n                    print(*s[q[i]:q[0] + 1], sep=\"\")\n                    return\n\n    print(\"NO\")\n    return\n\n\ndef"
    },
    {
        "number": 4456,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    p, q = map(lambda l: sorted(map(int, l.split())), stdin.split()[2:])\n    if len(set(s)) < k:\n        print(\"NO\")\n    elif len(set(s)) == k and sorted(p) == p and sorted(q) == q:\n        print(\"YES\" + s)\n    else:\n        print(\"NO\")\n\nassert solution(\"\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"3 2\\n1 3 2\") == \"NO\"\nassert solution(\"3 2\\n1 3 2\\n1 3 2\") == \"NO\"\nassert solution(\"3 2\\n1 3 2\\n1 3 2\\n1 3 2\") == \"NO\"\nassert solution(\"3 2\\n1 3 2\\n1 3 2\\n1 3 2\") == \"NO\"\n\nassert solution(\"3 1\\n1 2 3\") == \"YESabc\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\n\nassert solution(\"2 2\\n1 2\") == \"YESab\"\nassert solution(\"2 2\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 2\\n1 2\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 2\\n1 2\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 2\\n1 2\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 2\\n1 2\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 2\\n1 2\\n1 2\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 2\\n1 2\\n1 2\\n1 2\\n1 2\") == \"NO\"\n\nassert solution(\"2 1\\n1 2\") == \"YES\"\nassert solution(\"2 1\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 1\\n1 2\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 1\\n1 2\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 1\\n1 2\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 1\\n1 2\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 1\\n1 2\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 1\\n1 2\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 1\\n1 2\\n1 2\\n1 2\") == \"NO\"\nassert solution(\"2 1\\n1 2\\n1 2\\n1 2\") == \"NO\"\n\nassert solution(\"3 1\\n1 2 3\") == \"YESabc\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\n\nassert solution(\"3 1\\n1 3 2\") == \"YESab\"\nassert solution(\"3 1\\n1 3 2\\n1 3 2\") == \"NO\"\nassert solution(\"3 1\\n1 3 2\\n1 3 2\\n1 3 2\") == \"NO\"\nassert solution(\"3 1\\n1 3 2\\n1 3 2\\n1 3 2\") == \"NO\"\nassert solution(\"3 1\\n1 3 2\\n1 3 2\\n1 3 2\") == \"NO\"\nassert solution(\"3 1\\n1 3 2\\n1 3 2\\n1 3 2\") == \"NO\"\nassert solution(\"3 1\\n1 3 2\\n1 3 2\\n1 3 2\") == \"NO\"\nassert solution(\"3 1\\n1 3 2\\n1 3 2\\n1 3 2\") == \"NO\"\nassert solution(\"3 1\\n1 3 2\\n1 3 2\\n1 3 2\") == \"NO\"\nassert solution(\"3 1\\n1 3 2\\n1 3 2\\n1 3 2\") == \"NO\"\n\nassert solution(\"3 1\\n1 2 3\") == \"YESab\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\"3 1\\n1 2 3\\n1 2 3\\n1 2 3\") == \"NO\"\nassert solution(\""
    },
    {
        "number": 4456,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > 26:\n        return \"NO\"\n\n    p = [int(x) for x in stdin.split()]\n    q = [int(x) for x in stdin.split()]\n    p.sort()\n    q.sort()\n\n    p_map = {}\n    for i in range(n):\n        p_map[p[i]] = i + 1\n\n    q_map = {}\n    for i in range(n):\n        q_map[q[i]] = i + 1\n\n    p_str = \"\"\n    for i in range(n):\n        p_str += chr(p_map[i + 1])\n\n    q_str = \"\"\n    for i in range(n):\n        q_str += chr(q_map[i + 1])\n\n    return \"YES\" if p_str <= q_str else \"NO\"\n\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"10 1\") == \"YES\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"4 2\") == \"NO\"\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"10 1\") == \"YES\"\nassert solution(\"2 1\") == \"YES\"\nassert solution(\"7 5\") == \"YES\"\nassert solution(\"5 4\") == \"NO\"\nassert solution(\"2 1\") == \"YES\"\nassert solution(\"5 5\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"5 5\") == \"NO\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"7 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"2 1\") == \"YES\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"4 4\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"7 2\") == \"YES\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"2 1\") == \"YES\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"2 1\") == \"YES\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"5 2\") == \"YES\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution"
    },
    {
        "number": 4456,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n    s = ''\n    a = [False for _ in range(26)]\n    b = [False for _ in range(26)]\n    for i in range(n):\n        if a[p[i]-1] is False:\n            a[p[i]-1] = True\n            s += chr(97+p[i]-1)\n        elif b[q[i]-1] is False:\n            b[q[i]-1] = True\n            s += chr(97+q[i]-1)\n        else:\n            return 'NO'\n    return 'YES'+s\n\nprint(solution(input()))"
    },
    {
        "number": 4456,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    p = [int(x) for x in stdin.split()]\n    q = [int(x) for x in stdin.split()]\n\n    def get_distinct(arr: list) -> int:\n        \"\"\"Get the number of distinct elements in the array\"\"\"\n        ret = 1\n        for i in range(1, len(arr)):\n            if arr[i] - arr[i-1] > 1:\n                ret += 1\n        return ret\n\n    if get_distinct(p) > k:\n        return \"NO\"\n    if get_distinct(q) > k:\n        return \"NO\"\n\n    p.sort()\n    q.sort()\n\n    return \"YES\" + \"\".join(sorted(stdin[4:]))"
    },
    {
        "number": 4457,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4457,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    if n == 1:\n        return str(lst[0])\n    min_shots = 100000\n    for i in range(n):\n        shots = (lst[i] * (i + 1) + 1)\n        if shots < min_shots:\n            min_shots = shots\n    print(min_shots)\n    lst.sort(reverse=True)\n    print(*lst)\n"
    },
    {
        "number": 4457,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def shoot(cans, total):\n        nonlocal answer\n\n        if not cans:\n            return\n\n        index = cans.pop(0)\n        durability = cans[0] * index\n        shots = 1 + durability\n\n        if total + shots < answer:\n            shoot(cans, total + shots)\n        if not cans:\n            answer = min(answer, total)\n\n    cans = [int(n) for n in stdin.split()]\n    answer = float('inf')\n    shoot(cans, 0)\n    return str(answer)\n\nprint(solution(\"1 2 3 4 5 6\"))\nprint(solution(\"1 4\"))\nprint(solution(\"2 4 5 4 4 5\"))\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4457,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1, n):\n        if a[i] < a[ans]:\n            ans = i\n    print(ans + 1)\n    print(*range(1, n + 1))"
    },
    {
        "number": 4457,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = sorted(a)\n    res = 0\n    for i in range(n):\n        res += i * b[i]\n    print(res)\n    return''.join(str(x) for x in b)\n\nassert(solution('''3''') == '3')\nassert(solution('''4''') == '1 3 2')\nassert(solution('''6''') == '2 1 4 3 5 2 4')\nassert(solution('''5''') == '2 1 4 3 5')\nassert(solution('''2''') == '2 1')\nassert(solution('''10 10 10 10''') == '2 1 4 3 5 2 4')\nassert(solution('''10 10 10 10 10''') == '2 1 4 3 5 2 4')\n'''\n\n'''\n"
    },
    {
        "number": 4457,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = list(map(int, stdin.split(' ')))\n\n    l = [0] * n\n\n    for i in range(n):\n        l[i] = a[i] * (i + 1)\n\n    print(min(l))\n    print(*l)"
    },
    {
        "number": 4457,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    C = list(map(int, stdin.split()))\n    m = [0] * (N + 1)\n    for c in range(N):\n        m[c + 1] = m[c] + C[c] * (N - c)\n    best = 0\n    for k in range(N):\n        for i in range(k, N):\n            if m[i] - m[k] > best:\n                best = m[i] - m[k]\n                if k == 0:\n                    S = [0]\n                else:\n                    S = [k]\n                for j in range(k, i):\n                    S.append(j + 1)\n    return''.join(map(str, S))\n\n\"\"\""
    },
    {
        "number": 4457,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cans = list(map(int, stdin.readline().split()))\n    shots = [0 for _ in range(n)]\n    for i in range(n):\n        shots[i] += cans[i] * (i + 1)\n    for i in range(n):\n        shots[i] += cans[i] - 1\n    for i in range(n):\n        shots[i] += cans[i] - 1\n    return str(min(shots)) +'' +''.join(map(str, shots))\n\nassert(solution('''3''') == '43')\nassert(solution('''4''') == '64')\nassert(solution('''6''') == '69')\nassert(solution('''2''') == '3')\nassert(solution('''1 4''') == '2 1 4 3')\nassert(solution('''10 10 10 10''') == '64')\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4457,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n = int(lines[0])\n    values = [int(value) for value in lines[1].split(\" \")]\n    maximum = 0\n    # calculate sum of all possible values\n    for i in range(1, n + 1):\n        maximum += i * values[i - 1]\n    # add values by their index\n    shooting_order = []\n    for i in range(n):\n        shooting_order.append(i + 1)\n        maximum += (i + 1) * values[i]\n    # repeat for every possible value\n    shooting_order = []\n    for value in values:\n        shooting_order_copy = shooting_order[:]\n        shooting_order = []\n        for value_i in range(1, value + 1):\n            shooting_order.append(value_i)\n        while len(shooting_order_copy)!= 0:\n            shooting_order.append(shooting_order_copy.pop())\n        shooting_order = shooting_order[:n]\n        if len(shooting_order) < maximum:\n            continue\n        if len(shooting_order) > maximum:\n            shooting_order = shooting_order[:maximum]\n        if len(shooting_order) == maximum:\n            break\n    # output result\n    print(maximum)\n    print(' '.join([str(x) for x in shooting_order]))"
    },
    {
        "number": 4457,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = list(map(int, stdin.readline().strip().split()))\n\n    shots = 0\n    i = 0\n    while i < n:\n        shots += seq[i] * (i + 1)\n        i += 1\n\n    return str(shots) +'' +''.join(map(str, range(1, n + 1)))\n\n\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('''3'''), '43')\n        self.assertEqual(solution('''4'''), '64')\n        self.assertEqual(solution('''5'''), '69')\n        self.assertEqual(solution('''6'''), '69')\n        self.assertEqual(solution('''2'''), '3')\n"
    },
    {
        "number": 4458,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    P = tuple(map(int, stdin.readline().strip().split(' ')))\n    ans = 0\n\n    for i in range(1, N + 1):\n        if P[i - 1] > i:\n            ans += 1\n\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4458,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = [int(x) for x in stdin.readline().split()]\n\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if p[j] <= p[i]:\n                ans += 1\n                break\n    return ans"
    },
    {
        "number": 4458,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    input_array = [int(x) for x in stdin.readline().split()]\n    \n    permutations = list(itertools.permutations(input_array))\n    result = 0\n    for perm in permutations:\n        if perm[0] > perm[1]:\n            result += 1\n    \n    return str(result)\n\nassert(solution('''5''') == '3')\nassert(solution('''5\n4 2 5 1 3''') == '3')\nassert(solution('''10''') == '1')\nassert(solution('''1''') == '0')\nassert(solution('''30''') == '0')\nassert(solution('''30\n0 2 3 4 5''') == '1')\nassert(solution('''3''') == '0')\nassert(solution('''3\n0 2''') == '2')\nassert(solution('''3\n1 2''') == '1')\nassert(solution('''3\n2 1''') == '2')\nassert(solution('''3\n2 3''') == '1')\nassert(solution('''3\n2 4''') == '0')\nassert(solution('''3\n2 5''') == '2')\nassert(solution('''3\n4 2 5 1 3''') == '3')\nassert(solution('''3\n1 2 3 4 5''') == '3')\nassert(solution('''5''') == '3')\nassert(solution('''5\n4 2 5 1 3''') == '3')\nassert(solution('''6''') == '0')\nassert(solution('''6\n0 2 3 4 5 6''') == '3')\nassert(solution('''1''') == '0')\nassert(solution('''1\n0 1''') == '1')\nassert(solution('''3''') == '1')\nassert(solution('''5\n4 2 5 1 3''') == '3')\nassert(solution('''3\n0 1 2''') == '2')\nassert(solution('''3\n1 2''') == '2')\nassert(solution('''3\n2 1''') == '2')\nassert(solution('''3\n2 3''') == '1')\nassert(solution('''3\n2 4''') == '0')\nassert(solution('''3\n2 5''') == '2')\nassert(solution('''3\n4 2 5 1 3''') == '3')\nassert(solution('''3\n1 2 3 4 5''') == '3')\nassert(solution('''5''') == '3')\nassert(solution('''5\n4 2 5 1 3''') == '3')\nassert(solution('''6''') == '0')\nassert(solution('''6\n0 2 3 4 5 6''') == '3')\nassert(solution('''1''') == '0')\nassert(solution('''1\n0 1''') == '1')\nassert(solution('''3''') == '1')\nassert(solution('''5\n4 2 5 1 3''') == '3')\nassert(solution('''3\n0 1 2''') == '2')\nassert(solution('''3\n1 2''') == '2')\nassert(solution('''3\n2 1''') == '2')\nassert(solution('''3\n2 3''') == '1')\nassert(solution('''3\n2 4''') == '0')\nassert(solution('''3\n2 5''') == '2')\nassert(solution('''3\n4 2 5 1 3''') == '3')\nassert(solution('''3\n1 2 3 4 5''') == '3')\nassert(solution('''5''') == '3')\nassert(solution('''5\n4 2 5 1 3''') == '3')\nassert(solution('''6''') == '0')\nassert(solution('''6\n0 2 3 4 5 6''') == '3')\nassert(solution('''1''') == '0')\nassert(solution('''1\n0 1''') == '1')\nassert(solution('''3''') == '1')\nassert(solution('''5\n4 2 5 1 3''') == '3')\nassert(solution('''3\n0 1 2''') == '2')\nassert(solution('''3\n1 2''') == '2')\nassert(solution('''3\n2 1''') == '2')\nassert(solution('''3\n2 3''') == '1')\nassert(solution('''3\n2 4''') == '0')\nassert(solution('''3\n2 5''') == '2')\nassert(solution('''3\n4 2 5 1 3''') == '3')\nassert(solution('''3\n1 2 3 4 5''') == '3')\nassert(solution('''5''') == '3')\nassert(solution('''5\n4 2 5 1 3''') == '3')\nassert(solution('''6''') == '0')\nassert(solution('''6\n0 2 3 4 5 6''') == '3')\nassert(solution('''1''') == '0')\nassert(solution('''1\n0 1''') == '1')\nassert(solution('''3''') == '1')\nassert(solution('''5\n4 2 5 1 3''') == '3')\nassert(solution('''3\n0 1 2''') == '2')\nassert(solution('''3\n1 2''') == '2')\nassert(solution('''3\n2 1''') == '2')\nassert(solution('''3\n2 3''') == '1')\nassert(solution('''3\n2 4''') == '0')\nassert(solution('''3\n2 5''') == '2')\nassert(solution('''3\n4 2 5 1 3''') == '3')\nassert(solution('''3\n1 2 3 4 5''') == '3')\nassert(solution('''5''') == '3')\nassert(solution('''5\n4 2 5 1 3''') == '3')\nassert(solution('''6''') == '0')\nassert(solution('''6\n0 2 3 4 5 6''') == '3')\nassert(solution('''1''') == '0')\nassert(solution('''1\n0 1''') == '1')\nassert(solution('''3''') == '1')\nassert(solution('''5\n4 2 5 1 3''') == '3')\nassert(solution('''3\n0 1 2''') == '2')\nassert(solution('''3\n1 2''') == '2')\nassert(solution('''3\n2 1''') == '2')\nassert(solution('''3\n2 3''') == '1')\nassert(solution('''3\n2 4''') == '0')\nassert"
    },
    {
        "number": 4458,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4458,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_students = int(stdin.readline())\n    num_courses = int(stdin.readline())\n    students = stdin.readline().strip().split()\n    courses = stdin.readline().strip().split()\n    courses_dict = {}\n    for course in courses:\n        if course not in courses_dict:\n            courses_dict[course] = 1\n        else:\n            courses_dict[course] += 1\n    num_students_dict = {}\n    for student in students:\n        if student not in num_students_dict:\n            num_students_dict[student] = 1\n        else:\n            num_students_dict[student] += 1\n    count = 0\n    for student in num_students_dict:\n        if student in courses_dict:\n            count += num_students_dict[student]\n    return count\n\nsolution()"
    },
    {
        "number": 4458,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    arr = list(map(int, stdin.split()))\n    # this is a bit redundant because of the condition\n    for i in range(n, n*2):\n        if arr[i-1] > i:\n            print(i)\n            break"
    },
    {
        "number": 4458,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4458,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    arr = [int(x) for x in stdin.split()]\n    N = len(arr)\n    if N == 0:\n        return ''\n    \n    for i in range(1,N):\n        if arr[i-1] > arr[i]:\n            return '%d' % i\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4458,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    P = stdin[2:].split(\" \")\n    P = [int(x) for x in P]\n    # Generate list of possible integer combinations from 1 to N\n    P = [i for i in range(1, N+1)]\n    P.sort()\n    # Search for the first combination P[i] <= P[j]\n    # Since we have already sorted the list, we only need to iterate through the part of the list starting from the next element\n    # of the previous iteration, excluding the last element.\n    for i in range(1, N):\n        # At each iteration, we add 1 to the count variable to keep track of the number of matches we found.\n        # If a match is found, we can stop checking elements.\n        count = 0\n        for j in range(i, len(P)):\n            if P[i] <= P[j]:\n                break\n            else:\n                # This match is not good, so increment the count\n                count += 1\n        # If we reached the end of the list, we have found the last good match for this iteration.\n        if count == len(P)-i:\n            # We count the number of good matches for this iteration as it will be the number of integers in the current list,\n            # excluding the last element.\n            # This is because the last element of P is not included in the previous iteration.\n            print(len(P)-i)\n            return \"\".join(map(str, P[:i+1]))\n\nprint(solution(input()))"
    },
    {
        "number": 4458,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = primes_sieve(n)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if primes[i] > primes[j - 1]:\n                ans += 1\n    return str(ans)\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4459,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    print(len(a))"
    },
    {
        "number": 4459,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4459,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n\n    count = 0\n    for i in d:\n        if d[i] % i!= 0:\n            count += d[i] % i - 1\n    return count\n\nassert(solution('4\\n3 3 3 3') == 1)\nassert(solution('6\\n1 1 1 1 1 1') == 5)\nassert(solution('1\\n1') == 0)\nassert(solution('4\\n3 3 3 3') == 1)\nassert(solution('6\\n1 1 1 1 1 1') == 5)\nassert(solution('1\\n1') == 0)\nassert(solution('5\\n1 1 1 1 1') == 4)\nassert(solution('5\\n1 1 1 1 1') == 4)\nassert(solution('1\\n1') == 0)\nassert(solution('2\\n1 1') == 0)\nassert(solution('7\\n1 1 1 1 1 1 1') == 2)\nassert(solution('6\\n1 1 1 1 1 1') == 5)\nassert(solution('1\\n1') == 0)\nassert(solution('1\\n1 1') == 0)\nassert(solution('2\\n1 1') == 0)\nassert(solution('4\\n1 1 1 1') == 3)\nassert(solution('5\\n1 1 1 1 1') == 3)\nassert(solution('1\\n1') == 0)\nassert(solution('1\\n1 1') == 0)\nassert(solution('1\\n1 1 1') == 0)\nassert(solution('1\\n1 1 1 1') == 0)\nassert(solution('2\\n1 1') == 0)\nassert(solution('2\\n1 1 1') == 0)\nassert(solution('4\\n1 1 1 1') == 3)\nassert(solution('5\\n1 1 1 1 1') == 3)\nassert(solution('1\\n1') == 0)\nassert(solution('1\\n1 1') == 0)\nassert(solution('1\\n1 1 1') == 0)\nassert(solution('1\\n1 1 1 1') == 0)\nassert(solution('2\\n1 1') == 0)\nassert(solution('2\\n1 1 1') == 0)\nassert(solution('4\\n1 1 1 1') == 3)\nassert(solution('5\\n1 1 1 1 1') == 3)\nassert(solution('1\\n1') == 0)\nassert(solution('1\\n1 1') == 0)\nassert(solution('1\\n1 1 1') == 0)\nassert(solution('1\\n1 1 1 1') == 0)\nassert(solution('2\\n1 1') == 0)\nassert(solution('2\\n1 1 1') == 0)\nassert(solution('4\\n1 1 1 1') == 3)\nassert(solution('5\\n1 1 1 1 1') == 3)\nassert(solution('1\\n1') == 0)\nassert(solution('1\\n1 1') == 0)\nassert(solution('1\\n1 1 1') == 0)\nassert(solution('1\\n1 1 1 1') == 0)\nassert(solution('2\\n1 1') == 0)\nassert(solution('2\\n1 1 1') == 0)\nassert(solution('4\\n1 1 1 1') == 3)\nassert(solution('5\\n1 1 1 1 1') == 3)\nassert(solution('1\\n1') == 0)\nassert(solution('1\\n1 1') == 0)\nassert(solution('1\\n1 1 1') == 0)\nassert(solution('1\\n1 1 1 1') == 0)\nassert(solution('2\\n1 1') == 0)\nassert(solution('2\\n1 1 1') == 0)\nassert(solution('4\\n1 1 1 1') == 3)\nassert(solution('5\\n1 1 1 1 1') == 3)\nassert(solution('1\\n1') == 0)\nassert(solution('1\\n1 1') == 0)\nassert(solution('1\\n1 1 1') == 0)\nassert(solution('1\\n1 1 1 1') == 0)\nassert(solution('2\\n1 1') == 0)\nassert(solution('2\\n1 1 1') == 0)\nassert(solution('4\\n1 1 1 1') == 3)\nassert(solution('5\\n1 1 1 1 1') == 3)\nassert(solution('1\\n1') == 0)\nassert(solution('1\\n1 1') == 0)\nassert(solution('1\\n1 1 1') == 0)\nassert(solution('1\\n1 1 1 1') == 0)\nassert(solution('2\\n1 1') == 0)\nassert(solution('2\\n1 1 1') == 0)\nassert(solution('4\\n1 1 1 1') == 3)\nassert(solution('5\\n1 1 1 1 1') == 3)\nassert(solution('1\\n1') == 0)\nassert(solution('1\\n1 1') == 0)\nassert(solution('1\\n1 1 1') == 0)\nassert(solution('1\\n1 1 1 1') == 0)\nassert(solution('2\\n1 1') == 0)\nassert(solution('2\\n1 1 1') == 0)\nassert(solution('4\\n1 1 1 1') == 3)\nassert(solution('5\\n1 1 1 1 1') == 3)\nassert(solution('1\\n1') == 0)\nassert(solution('1\\n1 1') == 0)\nassert(solution('1\\n1 1 1') == 0)\nassert(solution('1\\n1 1 1 1') == 0)\nassert(solution('2\\n1 1') == 0)\nassert(solution('2\\n1 1 1') == 0)\nassert(solution('4\\n1 1 1 1') == 3)\nassert(solution('5\\n1 1 1 1 1') == 3)\nassert(solution('1\\n1') == 0)\nassert(solution('1\\n1 1') == 0)\nassert(solution('1\\n1 1 1') == 0)\nassert(solution('1\\n1 1 1 1') == 0)\nassert(solution('2\\n1 1') == 0)\nassert(solution('2\\n1 1 1') == 0)\nassert(solution('4\\n1 1 1 1') == 3)\nassert(solution('5\\n1 1 1 1 1') == 3)\nassert(solution('1\\n1') == 0)\nassert(solution('1\\n1 1') == 0)\nassert(solution('1\\n1 1 1') == 0)\nassert(solution"
    },
    {
        "number": 4459,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = [int(x) for x in stdin.split()]\n\n    def is_good(nums):\n        for i in range(len(nums)):\n            if nums.count(nums[i]) > i:\n                return False\n        return True\n\n    def search_subsets(l, r):\n        if r == 0:\n            return []\n        elif is_good(l):\n            return [l]\n        elif is_good(r):\n            return [r]\n        elif r == 1:\n            return [[r]]\n        elif l == r:\n            return [[]]\n        else:\n            mid = (l + r) // 2\n            left = search_subsets(l, mid)\n            right = search_subsets(mid + 1, r)\n            return left + right\n\n    res = search_subsets(0, len(a))\n    return str(len(res[0]) + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4459,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 3\n   ... 3\n   ... 3\n   ... 3''')\n    '1'\n    \"\"\"\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    return str(len([a[i] for i in range(1, N) if a[i] < a[i - 1]]))"
    },
    {
        "number": 4459,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    a = [int(x) for x in stdin[1:].split(\" \")]\n    i = 0\n    while i < len(a):\n        if a[i] < a[i+1]:\n            del a[i]\n            i -= 1\n        i += 1\n    return N - len(a)\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    a = [int(x) for x in stdin.split()]\n    n = len(a)\n    b = [0] * n\n    for i in range(n):\n        b[a[i] - 1] += 1\n    b = list(map(lambda x: x + 1, b))\n    cnt = 0\n    for i in range(n):\n        for j in range(i, n):\n            if b[j] - b[i] == 1:\n                cnt += 1\n                b[j] = -1\n                break\n    return cnt"
    },
    {
        "number": 4459,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = tuple(map(int, stdin.readline().split()))\n\n    result = 0\n\n    a = tuple(filter(lambda x: x > 1, a))\n\n    for i in range(len(a)):\n        while a[i] > 1:\n            a[i] -= 1\n            result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4459,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")[0]\n    a = [int(i) for i in a.split(\" \")]\n\n    def fact(n):\n        return 1 if n == 1 else n * fact(n - 1)\n\n    def comb(n, m):\n        return fact(n) / (fact(m) * fact(n - m))\n\n    a.sort(reverse=True)\n    r = 0\n\n    for i in range(len(a) - 1, 0, -1):\n        j = 0\n        while j < i:\n            if a[i] % a[j] == 0:\n                r += i - j\n                break\n            else:\n                j += 1\n\n    return r\n\nprint(solution(\"3 3 3 3\"))\n"
    },
    {
        "number": 4459,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, *numbers = [int(i) for i in stdin.split(' ')]\n    a = tuple(sorted(numbers))\n    b = tuple(sorted(numbers, reverse=True))\n    result = 0\n    for index in range(len(a)):\n        if a[index]!= b[index]:\n            result += 1\n            break\n    return str(result)"
    },
    {
        "number": 4460,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(x) for x in stdin.split()]\n    return \"0\" if x[0] == 0 else \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4460,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\""
    },
    {
        "number": 4460,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A simple solution based on the number of zeros in the input.\n    \"\"\"\n    return stdin.split()[4]\n\nprint(solution(input()))"
    },
    {
        "number": 4460,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4460,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split(\" \"))\n    \n    if x_1 == 0:\n        return str(1)\n    elif x_2 == 0:\n        return str(2)\n    elif x_3 == 0:\n        return str(3)\n    elif x_4 == 0:\n        return str(4)\n    elif x_5 == 0:\n        return str(5)"
    },
    {
        "number": 4460,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    return \"1\"\n\nassert(solution(\"0 2 3 4 5\") == \"1\")\n\"\"\"\n\ndef"
    },
    {
        "number": 4460,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return str(a.index(0) + 1)"
    },
    {
        "number": 4460,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4460,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result: str\n    try:\n        x_1: int\n        x_2: int\n        x_3: int\n        x_4: int\n        x_5: int\n        x_1, x_2, x_3, x_4, x_5 = [int(x) for x in stdin.split()]\n        result = str(x_1)\n    except ValueError:\n        result = 'None'\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4460,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('0 2 3 4 5')\n    '1'\n    >>> solution('1 2 3 4 5')\n    '0'\n    >>> solution('3 2 4 1 5')\n    '2'\n    >>> solution('3 2 4 1 5')\n    '0'\n    >>> solution('-1 2 3 -4 5')\n    '4'\n    >>> solution('0 1 1 1 1')\n    '4'\n    >>> solution('5 4 3 2 1')\n    '1'\n    >>> solution('5 4 3 2 1')\n    '0'\n    >>> solution('-5 4 -3 -2 -1')\n    '2'\n    >>> solution('5 4 3 2 1')\n    '0'\n    >>> solution('5 4 3 2 1')\n    '0'\n    >>> solution('-5 4 -3 -2 -1')\n    '2'\n    >>> solution('5 4 3 2 1')\n    '0'\n    >>> solution('5 4 3 2 1')\n    '0'\n    >>> solution('-5 4 -3 -2 -1')\n    '2'\n    >>> solution('5 4 3 2 1')\n    '0'\n    >>> solution('5 4 3 2 1')\n    '0'\n    >>> solution('-5 4 -3 -2 -1')\n    '2'\n    >>> solution('5 4 3 2 1')\n    '0'\n    >>> solution('5 4 3 2 1')\n    '0'\n    \"\"\"\n    x = [int(v) for v in stdin.split()]\n    return \"0\" if x.index(max(x)) == 0 else \"1\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    return str(min(H * W, (H + 1) * W - (H - 1)))"
    },
    {
        "number": 4461,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_naive(stdin))\n\ndef"
    },
    {
        "number": 4461,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4461,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(x) for x in stdin.split()]\n    if H < 2 or W < 2:\n        return \"0\"\n    return str(max(0, H*W-H-W))\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\nCODE 3.1: This code is for the greedy algorithm, using numpy to speed up the process.\n\"\"\"\n\nimport numpy as np\ndef"
    },
    {
        "number": 4461,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    print(H * W - (H - 1) * (W - 1))\n    return stdin"
    },
    {
        "number": 4461,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4461,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, w = list(map(int, stdin.strip().split()))\n\n    return str(min(h * w, w * h))"
    },
    {
        "number": 4461,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, size = stdin.split()\n    max_side, min_side = map(int, size.split('x'))\n\n    return str(min_side * max_side)"
    },
    {
        "number": 4461,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    H, W = map(int, stdin.split())\n    print(0)\n\"\"\"\n"
    },
    {
        "number": 4461,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m == 0 or n == 0:\n        return 0\n    if m == 1 or n == 1:\n        return (n * m) - (m + n)\n    return (n * m) - (n + m)"
    },
    {
        "number": 4462,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = [int(s) for s in stdin.split(' ')]\n    seq.sort()\n    for i in range(1, n):\n        if seq[i] % 4!= 0:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4462,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n <= 1:\n        return 'Yes'\n    if n == 2:\n        return 'No'\n    a.sort()\n    a.reverse()\n    if n == 3:\n        if a[0] % 4 == 0 and a[1] % 4 == 0 and a[2] % 4 == 0:\n            return 'Yes'\n        else:\n            return 'No'\n    a_i = a[0]\n    a_i_1 = a[1]\n    a_i_2 = a[2]\n    a_i_3 = a[3]\n    while a_i_1 * a_i_2 % 4!= 0:\n        a_i_2 += 1\n    while a_i_2 * a_i_3 % 4!= 0:\n        a_i_3 += 1\n    while a_i_3 * a_i % 4!= 0:\n        a_i += 1\n    if a_i_3 * a_i_1 % 4 == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4462,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    return 'Yes' if is_multiple_of_4(A) else 'No'\n\ndef"
    },
    {
        "number": 4462,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    \n    if not is_multiple_of_four(a):\n        print('No')\n        return\n    \n    a.sort()\n    for i in range(N - 1):\n        if not is_multiple_of_four(a[i:i + 2]):\n            print('No')\n            return\n    print('Yes')\n\ndef"
    },
    {
        "number": 4462,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\ndef"
    },
    {
        "number": 4462,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4462,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(s) for s in stdin.readline().strip().split()]\n    # A = [1, 10, 100]\n    for i in range(1, len(A)):\n        if 4 * A[i-1] % A[i]!= 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    def factorial(n: int) -> int:\n        return n * factorial(n - 1) if n > 1 else 1\n\n    def is_multiple_of_4(n: int) -> bool:\n        return n % 4 == 0\n\n    a = list(map(int, stdin.split(\" \")))\n\n    total = 1\n    for i in a:\n        total *= i\n\n    if total % 4 == 0:\n        return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4462,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4462,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    def isMultipleOf4(a):\n        if a == 1:\n            return False\n        for i in range(2, a):\n            if (a % i) == 0:\n                return True\n        return False\n    \n    if (n < 2) or (n > 10 ** 5) or (not isMultipleOf4(arr[0])):\n        return \"No\"\n    else:\n        return \"Yes\"\n\ndef"
    },
    {
        "number": 4463,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return \"Yes\" if sorted(s) < sorted(t) else \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4463,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Remove newline character from input\n    s = stdin.strip()\n    t = stdin.strip()\n    \n    # Compare the two strings in lexicographic order\n    for i in range(len(s)):\n        if s < t:\n            return \"Yes\"\n        \n        # Swap s[i] and t[i]\n        tmp = s[i]\n        s[i] = t[i]\n        t[i] = tmp\n        \n    # No\n    return \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    return \"Yes\" if \"\".join(sorted(s)) < \"\".join(sorted(t)) else \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:int(len(stdin) / 2)]\n    t = stdin[int(len(stdin) / 2):]\n    if s == t:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4463,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4463,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sorted(stdin) < sorted(stdin[::-1]) else \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sorted(stdin[0]) < sorted(stdin[1]) else \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    t = stdin.rstrip()\n    if s < t:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4464,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    arr = [int(x) for x in stdin.split(\" \")]\n    a, b, c = arr[0], arr[1], arr[2]\n    sum = 0\n    for i in range(len(arr) - 1):\n        sum += arr[i]\n        if sum % b!= 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4464,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split(\" \"))\n    res = 0\n    if C % B!= 0:\n        return \"NO\"\n    for i in range(1, 1001):\n        res += i\n        if res % B == C:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return 'YES' if (sum([x for x in range(A, B+1) if x % C == 0]) % B) == 0 else 'NO'"
    },
    {
        "number": 4464,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(\" \")]\n    if a < 1 or b < 1 or a > 100 or b > 100 or c < 0 or c > b:\n        return \"NO\"\n    s = 0\n    for _ in range(int(stdin)):\n        s += min(int(stdin) % a, int(stdin) % b)\n        stdin = stdin[1:]\n    if s % b == c:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4464,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(x) for x in stdin.split())\n    while a % b!= c % b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n    return 'YES' if a == c % b else 'NO'"
    },
    {
        "number": 4464,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    a, b, c = [int(x) for x in stdin]\n    if a % b == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nassert(solution(\"7 14 1\") == \"YES\")\nassert(solution(\"7 5 1\") == \"NO\")\nassert(solution(\"7 5 1 2\") == \"NO\")\nassert(solution(\"2 1 1\") == \"YES\")\nassert(solution(\"1 1 1\") == \"YES\")\nassert(solution(\"1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1\") == \"YES\")\nassert(solution(\"1 1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1 1 1\") == \"YES\")\nassert(solution(\"1 1 1 1 1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1\") == \"YES\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"YES\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"YES\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"YES\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"YES\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"YES\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"YES\")\nassert(solution
    },
    {
        "number": 4464,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    n = 0\n    while n*a < b:\n        if n*a % c == 0:\n            return 'YES'\n        n += 1\n    return 'NO'\n\nassert(solution('7 5 1\\n') == 'YES')\nassert(solution('100 100 100\\n') == 'NO')\nassert(solution('2 4 5\\n') == 'YES')\nassert(solution('2 4 7\\n') == 'YES')\n\"\"\"\n\ndef"
    },
    {
        "number": 4464,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split()))\n    N = int(stdin.readline())\n    M = stdin.readline().strip()\n    if M[0] == 'Y':\n        M = int(M[1:])\n        if M % A == 0:\n            if M <= B:\n                return 'YES'\n            return 'NO'\n        else:\n            return 'NO'\n    elif M[0] == 'N':\n        M = int(M[1:])\n        if M <= B:\n            return 'YES'\n        return 'NO'\n    else:\n        return 'NO'"
    },
    {
        "number": 4464,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(c) for c in stdin.split()]\n    if A > 1 and B > 1 and C < B:\n        s = 0\n        for a in range(2, A):\n            if not (C - s) % B:\n                return \"YES\"\n            s += a\n        return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4465,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = tuple(map(int, stdin.split(' ')))\n    return str(a * b - 2)"
    },
    {
        "number": 4465,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a*b-2)\n\nassert(solution('2 2') == '1')\nassert(solution('5 10') == '95')\nassert(solution('2 1') == '1')\nassert(solution('10 1') == '10')\nassert(solution('101 1') == '101')\nassert(solution('101 0') == '101')\nassert(solution('101 0') == '101')\nassert(solution('101 1') == '102')\nassert(solution('1 1') == '1')\nassert(solution('0 1') == '1')\nassert(solution('1 0') == '1')\nassert(solution('0 0') == '0')\nassert(solution('0 0') == '0')\nassert(solution('0 0') == '0')\nassert(solution('1 0') == '1')\nassert(solution('0 1') == '1')\nassert(solution('0 0') == '0')\nassert(solution('0 0') == '0')\nassert(solution('1 1') == '0')\n"
    },
    {
        "number": 4465,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(v) for v in stdin.split()]\n    return str(x * y - 2)\n\n\nassert solution('2 2') == '1'\nassert solution('1 1') == '0'\nassert solution('2 1') == '0'\nassert solution('1 2') == '0'\nassert solution('101 110') == '20'\nassert solution('111 110') == '0'\nassert solution('111 100') == '10'\nassert solution('10 11') == '1'\nassert solution('0 0') == '0'\nassert solution('1 1') == '0'\nassert solution('2 3') == '6'\nassert solution('2 2') == '0'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('100 100') == '0'\nassert solution('100 101') == '1'\nassert solution('100 110') == '10'\nassert solution('100 111') == '11'\nassert solution('100 101') == '1'\nassert solution('100 101') == '1'\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\nassert solution('0 0') == '0'\nassert solution('0 0') == '0'\nassert solution('0 1') == '1'\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\nassert solution('0 0') == '0'\nassert solution('0 0') == '0'\nassert solution('0 1') == '1'\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\nassert solution('2 1') == '0'\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'\nassert solution('1 2') == '0'\nassert solution('2 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3') == '6'\nassert solution('3 3"
    },
    {
        "number": 4465,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return '{:.0f}'.format(a * b - a)"
    },
    {
        "number": 4465,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(a * b - 2)\n"
    },
    {
        "number": 4465,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split()\n    a, b = int(rows[0]), int(rows[1])\n    print((a * b) - 2)\n"
    },
    {
        "number": 4465,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return str(A * B - 2 * (A + B))"
    },
    {
        "number": 4465,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B = [int(v) for v in stdin.split()]\n    return str(A * B - 2 * (A + B))"
    },
    {
        "number": 4465,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a*b - (a+1)*(b+1))"
    },
    {
        "number": 4465,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the area of a yard excluding roads'''\n    A, B = map(int, stdin.split())\n    return str(A * B - (A + B - 1))"
    },
    {
        "number": 4466,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    width, height, gap = [int(v) for v in stdin.split(' ')]\n    people = []\n    for i in range(height):\n        people.append(list(map(int, stdin.split(' '))))\n    possible = 0\n    for i in range(height):\n        for j in range(width):\n            if j > 0 and j < width - 1:\n                if people[i][j] + people[i][j - 1] + people[i][j + 1] > gap:\n                    possible += 1\n            elif j == 0:\n                if people[i][j] + people[i][j + 1] > gap:\n                    possible += 1\n            elif j == width - 1:\n                if people[i][j] + people[i][j - 1] > gap:\n                    possible += 1\n    return possible"
    },
    {
        "number": 4466,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    return \"Yes\""
    },
    {
        "number": 4466,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split(\" \"))\n    ans = 0\n    ans = max(ans, x//z)\n    ans = max(ans, (x - z)//y)\n    ans = max(ans, (x - 2*z)//y)\n    return str(ans)"
    },
    {
        "number": 4466,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    print(max(0, x - z - (y - 1)))"
    },
    {
        "number": 4466,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4466,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4466,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    return str(max(1, 2*Y + 2*Z - X))"
    },
    {
        "number": 4466,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4466,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_split = stdin.strip().split(\" \")\n\n    X = int(input_split[0])\n    Y = int(input_split[1])\n    Z = int(input_split[2])\n\n    print(X // (Y + 2 * Z))\n"
    },
    {
        "number": 4466,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4467,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    reds = []\n    blues = []\n    \n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        reds.append((a, b))\n        \n    for _ in range(n):\n        c, d = map(int, stdin.split())\n        blues.append((c, d))\n    \n    reds.sort(key=lambda x: x[0])\n    blues.sort(key=lambda x: x[1])\n    \n    pairs = 0\n    i = 0\n    j = 0\n    \n    while i < n and j < n:\n        if reds[i][0] < blues[j][1]:\n            pairs += 1\n            i += 1\n        elif reds[i][0] > blues[j][1]:\n            j += 1\n        else:\n            pairs += 1\n            i += 1\n            j += 1\n    \n    return str(pairs)"
    },
    {
        "number": 4467,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4467,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Parse the input\n    # n = int(stdin.readline())\n    # red = []\n    # blue = []\n    # for _ in range(n):\n    #     (x, y) = map(int, stdin.readline().split())\n    #     red.append((x, y))\n    #     blue.append((x, y))\n\n    # blue.sort()\n    # for blue_pair in itertools.combinations(blue, 2):\n    #     if blue_pair[0][0] < blue_pair[1][0] and blue_pair[0][1] < blue_pair[1][1]:\n    #         print(1)\n    #         return\n\n    # print(0)\n\n    return 0\n\n\ndef"
    },
    {
        "number": 4467,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)\n\nassert(solution('2 0') == '0')\nassert(solution('3 1') == '1')\nassert(solution('1 3') == '0')\nassert(solution('4 2') == '0')\nassert(solution('0 4') == '2')\nassert(solution('5 5') == '4')\nprint(solution(stdin))\n"
    },
    {
        "number": 4467,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        x, y = [int(z) for z in stdin.readline().split()]\n        if (x < y) and (y < x + n):\n            print(1)\n        else:\n            print(0)\n\"\"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4467,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split('\\n')\n    #read the input\n    n = int(input_[0])\n    red_positions = input_[1].split()\n    blue_positions = input_[2].split()\n    red_positions = [int(x) for x in red_positions]\n    blue_positions = [int(x) for x in blue_positions]\n    \n    #sort the two lists based on the x-coordinate\n    sorted_red_positions = sorted(red_positions)\n    sorted_blue_positions = sorted(blue_positions)\n    \n    #see which positions are paired\n    paired_red_positions = []\n    paired_blue_positions = []\n    paired_red_positions.append(sorted_red_positions[0])\n    paired_blue_positions.append(sorted_blue_positions[0])\n    for i in range(1,n):\n        if (sorted_red_positions[i] < paired_red_positions[-1]):\n            if (sorted_blue_positions[i] < paired_blue_positions[-1]):\n                paired_red_positions.append(sorted_red_positions[i])\n                paired_blue_positions.append(sorted_blue_positions[i])\n    \n    return str(len(paired_red_positions) * len(paired_blue_positions))\n    \n    \n    \n    \n"
    },
    {
        "number": 4467,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    points = []\n    for i in range(1, n + 1):\n        points.append(tuple(map(int, stdin[i].split(' '))))\n    point_dict = {}\n    for point in points:\n        if point[0] not in point_dict:\n            point_dict[point[0]] = []\n        point_dict[point[0]].append(point[1])\n        if point[1] not in point_dict:\n            point_dict[point[1]] = []\n        point_dict[point[1]].append(point[0])\n    max_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if point_dict[points[i][0]].index(points[j][0]) < point_dict[points[i][0]].index(points[k][0]):\n                    if point_dict[points[i][1]].index(points[j][1]) < point_dict[points[i][1]].index(points[k][1]):\n                        max_count += 1\n    return str(max_count)"
    },
    {
        "number": 4467,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_pairs = 0\n    for line in stdin.splitlines():\n        N = int(line[0])\n        red_loc = list(map(int, line[2:].split()))\n        blue_loc = list(map(int, line[6:].split()))\n        red_loc.sort()\n        blue_loc.sort()\n        for i in range(N):\n            if i < N - 1:\n                if blue_loc[i] < red_loc[i + 1] and red_loc[i] < blue_loc[i + 1]:\n                    num_pairs += 1\n            else:\n                if blue_loc[i] < red_loc[i] and red_loc[i] < blue_loc[i]:\n                    num_pairs += 1\n    return str(num_pairs)\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4467,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 0\n   ... 3 1\n   ... 1 3\n   ... 4 2\n   ... 0 4\n   ... 5 5\n   ... ''')\n    '2'\n    >>> solution('''2\n   ... 0 0\n   ... 2 0\n   ... ''')\n    '0'\n    >>> solution('''2\n   ... 2 0\n   ... 2 0\n   ... ''')\n    '0'\n    >>> solution('''2\n   ... 0 0\n   ... 2 0\n   ... ''')\n    '0'\n    >>> solution('''1\n   ... 1 1\n   ... ''')\n    '0'\n    >>> solution('''2\n   ... 0 1\n   ... 2 1\n   ... ''')\n    '0'\n    >>> solution('''1\n   ... 2 1\n   ... 2 1\n   ... ''')\n    '0'\n    \"\"\"\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        line = stdin.readline().strip().split()\n        points.append((int(line[0]), int(line[1])))\n\n    points.sort(key=lambda x: (x[1], x[0]))\n    pairs = 0\n    curr = points[0][0]\n    for i in range(1, len(points)):\n        if points[i][0] > curr:\n            pairs += 1\n        curr = points[i][0]\n    return str(pairs)\n"
    },
    {
        "number": 4468,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # For each line of input, split it into integers\n    n, t = stdin.split()\n    # Create a list of numbers\n    nums = [int(n) for n in stdin.split()]\n    return str(max(nums) + t)"
    },
    {
        "number": 4468,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def push_switch(N: int, T: int) -> str:\n        switch_times = [0] * N\n        switch_times[0] = T\n        switch_times[1] = T\n        for i in range(2, N):\n            switch_times[i] = (switch_times[i - 1] + T) % 1_000_000_000\n        return''.join(map(str, switch_times))\n\n    N, T = map(int, stdin.split(' '))\n    return push_switch(N, T)"
    },
    {
        "number": 4468,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4468,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 4\")\n    '7'\n    >>> solution(\"0 3\")\n    '7'\n    \"\"\"\n    N, T = map(int, stdin.split())\n\n    t = []\n    for i in range(N):\n        t.append(int(stdin.split()[i]))\n    t.sort()\n\n    if t[0] > T:\n        return '0'\n\n    q = list(range(N))\n    q.sort(key=lambda x: t[x])\n\n    a = 0\n    for i in q:\n        if t[i] < T:\n            a += T - t[i]\n            break\n    return str(a)"
    },
    {
        "number": 4468,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    arr = map(int, stdin.split())\n    print(t * (n + 1))"
    },
    {
        "number": 4468,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_pushes, time_seconds = map(int, stdin.split())\n    pushes = stdin.split()[1:]\n    pushes_total_time = [int(p) for p in pushes]\n    pushes_total_time.sort()\n\n    s = 0\n    for t in pushes_total_time:\n        s += time_seconds - t\n    return str(s)\n"
    },
    {
        "number": 4468,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4468,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4468,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split(' '))\n    t = map(int, stdin.split(' '))\n    return str(T - sum(max(0, i - T) for i in t))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4468,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, T = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    t.sort()\n    time = 0\n    for i in range(N):\n        time += t[i] + T\n    return str(time)"
    },
    {
        "number": 4469,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    import sys\n    n = int(stdin.readline().strip())\n    left = [0] * (n + 1)\n    right = [0] * (n + 1)\n    \n    for _ in range(n):\n        query = list(map(int, stdin.readline().strip().split()))\n        if query[0] == 1:\n            idx = query[1]\n            left[idx] = idx - 1\n            right[idx] = idx + 1\n        elif query[0] == 2:\n            idx = query[1]\n            right[idx] = idx + 1\n        elif query[0] == 3:\n            idx = query[1]\n            print(min(itertools.chain(\n                left[idx], right[idx]\n            )))\n    return ''.join(str(n) for n in left)\n\nprint(solution(sys.stdin))\n"
    },
    {
        "number": 4469,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(0)\n    for _ in range(n):\n        id = int(stdin)\n        print(shelf_rotation(id))\n\ndef"
    },
    {
        "number": 4469,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.split('\\n')\n    n = int(tokens[0])\n    queries = [tuple(map(int, line.split(' '))) for line in tokens[1:]]\n    answers = []\n    idx = 0\n    while idx < len(queries):\n        if queries[idx][0] == 3:\n            answers.append(0)\n        else:\n            count = 0\n            while idx < len(queries) and queries[idx][0]!= 3:\n                count += 1\n                idx += 1\n            answers.append(count)\n    return '\\n'.join(map(str, answers))"
    },
    {
        "number": 4469,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\nprint(solution(open(\"input.txt\").readline()))\n"
    },
    {
        "number": 4469,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    TODO\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4469,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    \n    class Node:\n        def __init__(self, index: int, value: int) -> None:\n            self.index = index\n            self.value = value\n            self.next = None\n\n        def __repr__(self):\n            return f\"Node(index={self.index}, value={self.value})\"\n\n    class Shelf:\n        def __init__(self) -> None:\n            self.left = None\n            self.right = None\n            self.length = 0\n\n        def __repr__(self):\n            return f\"Shelf(left={self.left}, right={self.right}, length={self.length})\"\n\n    def push(shelf: Shelf, index: int, value: int) -> None:\n        node = Node(index, value)\n        if shelf.length == 0:\n            shelf.left = node\n        else:\n            if shelf.left.index < shelf.right.index:\n                shelf.left.next = node\n            else:\n                shelf.right.next = node\n        shelf.length += 1\n\n    def pop(shelf: Shelf) -> int:\n        if shelf.length == 0:\n            return -1\n        if shelf.left.index < shelf.right.index:\n            ret = shelf.left.index\n            shelf.left = shelf.left.next\n        else:\n            ret = shelf.right.index\n            shelf.right = shelf.right.next\n        shelf.length -= 1\n        return ret\n\n    def search(shelf: Shelf, index: int) -> int:\n        if shelf.length == 0:\n            return -1\n        if shelf.left.index <= index <= shelf.right.index:\n            return index\n        if shelf.left.index < index:\n            return shelf.right.index\n        if shelf.right.index < index:\n            return shelf.left.index\n\n    def move(shelf: Shelf, index: int, shift: int) -> None:\n        if shift > 0:\n            shift = -shift\n        while index < shelf.left.index - shift:\n            shelf.push(shelf.left.index - shift, shelf.left.value)\n            shelf.left = shelf.left.next\n        while index > shelf.right.index + shift:\n            shelf.push(shelf.right.index + shift, shelf.right.value)\n            shelf.right = shelf.right.next\n\n    # SOLUTION STARTS HERE\n    shelf = Shelf()\n    for _ in range(N):\n        query = stdin.readline().split()\n        cmd = query[0]\n        if cmd == \"L\":\n            push(shelf, int(query[1]), 0)\n        elif cmd == \"R\":\n            push(shelf, int(query[1]), 0)\n        elif cmd == \"?\":\n            print(search(shelf, int(query[1])))\n        else:\n            move(shelf, int(query[1]), int(query[2]))\n    return None\n\n\nsolution(None)\n"
    },
    {
        "number": 4469,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4469,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().strip()"
    },
    {
        "number": 4469,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\\n\")\n    '1\\n1\\n2\\n'\n\n    >>> solution(\"3\\nL 100\\nR 100000\\nR 123\\nL 101\\n? 123\\nL 10\\nR 115\\n? 100\\nR 110\\n? 115\\n\")\n    '0\\n2\\n1\\n'\n\n    \"\"\"\n    q = int(stdin.readline().strip())\n    queries = [stdin.readline().strip().split() for _ in range(q)]\n    print(*solve(queries))\n\n\ndef"
    },
    {
        "number": 4469,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    shelf = [None] * 2 * 10 ** 5\n    n = int(stdin.readline())\n    for _ in range(n):\n        query = stdin.readline().strip().split()\n        if query[0] == 'L':\n            shelf.append(shelf.pop(int(query[1])))\n        elif query[0] == 'R':\n            shelf.append(shelf.pop(int(query[1]) - 1))\n        elif query[0] == '?':\n            while True:\n                query = stdin.readline().strip().split()\n                if query[0] == '?':\n                    if int(query[1]) <= len(shelf):\n                        print(shelf[int(query[1])])\n                    else:\n                        print(int(query[1]) - len(shelf))\n                    break"
    },
    {
        "number": 4470,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return str(solution_recursive(n))\n\ndef"
    },
    {
        "number": 4470,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    queries = [int(n) for n in stdin.readline().split()]\n    moves = [0] * (n + 1)\n    for n in queries:\n        if n % 2 == 0:\n            moves[n // 2] += 1\n        if n % 3 == 0:\n            moves[n // 3] += 1\n        if n % 5 == 0:\n            moves[n // 5] += 1\n    moves[1] = -1\n    for i in range(2, n + 1):\n        if moves[i] == -1:\n            moves[i] = float(\"inf\")\n        else:\n            moves[i] += moves[i - 1]\n    return '\\n'.join(map(str, moves))\n\n\ndef"
    },
    {
        "number": 4470,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    m = stdin.readline().strip()\n    a = [int(i) for i in m.split(\" \")]\n    if n == 1:\n        return \"-1\"\n    if n % 2 == 0:\n        return \"0\"\n    if n % 5 == 0:\n        return \"4\"\n    r = [0] * (n + 1)\n    r[1] = 1\n    r[2] = 1\n    r[3] = 2\n    r[4] = 2\n    r[5] = 3\n    r[6] = 3\n    r[7] = 4\n    r[8] = 5\n    r[9] = 5\n    r[10] = 6\n    r[11] = 7\n    r[12] = 7\n    r[13] = 8\n    r[14] = 8\n    r[15] = 9\n    r[16] = 9\n    r[17] = 10\n    r[18] = 11\n    r[19] = 11\n    r[20] = 12\n    r[21] = 12\n    r[22] = 13\n    r[23] = 13\n    r[24] = 14\n    r[25] = 14\n    r[26] = 15\n    r[27] = 15\n    r[28] = 16\n    r[29] = 16\n    r[30] = 17\n    r[31] = 17\n    r[32] = 18\n    r[33] = 18\n    r[34] = 19\n    r[35] = 19\n    r[36] = 20\n    r[37] = 20\n    r[38] = 21\n    r[39] = 21\n    r[40] = 22\n    r[41] = 22\n    r[42] = 23\n    r[43] = 23\n    r[44] = 24\n    r[45] = 24\n    r[46] = 25\n    r[47] = 25\n    r[48] = 26\n    r[49] = 26\n    r[50] = 27\n    r[51] = 27\n    r[52] = 28\n    r[53] = 28\n    r[54] = 29\n    r[55] = 29\n    r[56] = 30\n    r[57] = 30\n    r[58] = 31\n    r[59] = 31\n    r[60] = 32\n    r[61] = 32\n    r[62] = 33\n    r[63] = 33\n    r[64] = 34\n    r[65] = 34\n    r[66] = 35\n    r[67] = 35\n    r[68] = 36\n    r[69] = 36\n    r[70] = 37\n    r[71] = 37\n    r[72] = 38\n    r[73] = 38\n    r[74] = 39\n    r[75] = 39\n    r[76] = 40\n    r[77] = 40\n    r[78] = 41\n    r[79] = 41\n    r[80] = 42\n    r[81] = 42\n    r[82] = 43\n    r[83] = 43\n    r[84] = 44\n    r[85] = 44\n    r[86] = 45\n    r[87] = 45\n    r[88] = 46\n    r[89] = 46\n    r[90] = 47\n    r[91] = 47\n    r[92] = 48\n    r[93] = 48\n    r[94] = 49\n    r[95] = 49\n    r[96] = 50\n    r[97] = 50\n    r[98] = 51\n    r[99] = 51\n    r[100] = 52\n    r[101] = 52\n    r[102] = 53\n    r[103] = 53\n    r[104] = 54\n    r[105] = 54\n    r[106] = 55\n    r[107] = 55\n    r[108] = 56\n    r[109] = 56\n    r[110] = 57\n    r[111] = 57\n    r[112] = 58\n    r[113] = 58\n    r[114] = 59\n    r[115] = 59\n    r[116] = 60\n    r[117] = 60\n    r[118] = 61\n    r[119] = 61\n    r[120] = 62\n    r[121] = 62\n    r[122] = 63\n    r[123] = 63\n    r[124] = 64\n    r[125] = 64\n    r[126] = 65\n    r[127] = 65\n    r[128] = 66\n    r[129] = 66\n    r[130] = 67\n    r[131] = 67\n    r[132] = 68\n    r[133] = 68\n    r[134] = 69\n    r[135] = 69\n    r[136] = 70\n    r[137] = 70\n    r[138] = 71\n    r[139] = 71\n    r[140] = 72\n    r[141] = 72\n    r[142] = 73\n    r[143] = 73\n    r[144] = 74\n    r[145] = 74\n    r[146] = 75\n    r[147] = 75\n    r[148] = 76\n    r[149] = 76\n    r[150] = 77\n    r[151] = 77\n    r[152] = 78\n    r[153] = 78\n    r[154] = 79\n    r[155] = 79\n    r[156] = 80\n    r[157] = 80\n    r[158] = 81\n    r[159] = 81\n    r[160] = 82\n    r[161] = 82\n    r[162] = 83\n    r[163] = 83\n    r[164] = 84\n    r[165] = 84\n    r[166] = 85\n    r[167] = 85\n    r[168] = 86\n    r[169] = 86\n    r[170] = 87\n    r[171] = 87\n    r[172] = 88\n    r[173] = 88\n    r[174] = 89\n    r[175] = 89\n    r[176] = 90\n    r[177] = 90\n    r[178] = 91\n    r[179] = 91\n    r[180] = 92\n    r[181] = 92\n    r[182] = 93\n    r[183] = 93\n    r[184] = 94\n    r[185] = 94\n    r[186] = 95\n    r[187] = 95\n    r[188] = 96\n    r[189] = 96\n    r[190] = 97\n    r[191] = 97\n    r[192] = 98\n    r[193] = 98\n    r[194] = 99\n    r[195] = 99\n    r[196] = 100\n    r[197] = 100"
    },
    {
        "number": 4470,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_moves_to_1(n: int) -> int:\n        moves = 0\n        while n > 1:\n            if n % 2 == 0:\n                n //= 2\n                moves += 1\n            elif n % 3 == 0:\n                n //= 3\n                moves += 1\n            elif n % 5 == 0:\n                n //= 5\n                moves += 1\n            else:\n                return -1\n        return moves\n\n    q = int(stdin.readline().strip())\n    queries = [int(x) for x in stdin.readline().strip().split()]\n    for query in queries:\n        print(find_min_moves_to_1(query))\n"
    },
    {
        "number": 4470,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_operation(n: int) -> int:\n        if n == 1:\n            return 0\n        if n % 2 == 0:\n            return 1 + find_min_operation(n // 2)\n        elif n % 3 == 0:\n            return 1 + find_min_operation(n // 3)\n        elif n % 5 == 0:\n            return 1 + find_min_operation(n // 5)\n        else:\n            return -1\n\n    answers = []\n    for _ in range(int(stdin.readline().strip())):\n        n = int(stdin.readline().strip())\n        answers.append(find_min_operation(n))\n    return '\\n'.join(map(str, answers))\n\nprint(solution(input()))"
    },
    {
        "number": 4470,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        elif n % 3 == 0:\n            n = n / 3\n        elif n % 5 == 0:\n            n = n / 5\n        else:\n            count += 1\n            break\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4470,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The problem is to find the minimum number of moves required to obtain 1 from n.\n\n    If n is divisible by 2, replace n with n/2. If n is divisible by 3, replace n with n/3. If n is divisible by 5, replace n with n/5.\n\n    This gives us O(log n) time complexity and O(1) space complexity.\n    \"\"\"\n    n_queries = int(stdin.readline().strip())\n    for _ in range(n_queries):\n        n = int(stdin.readline().strip())\n        n2 = n / 2\n        n3 = n / 3\n        n5 = n / 5\n        n_moves = min(n2, n3, n5)\n        if n_moves == 0:\n            print(-1)\n        else:\n            print(n_moves)\n    return ''\n\n\ndef"
    },
    {
        "number": 4470,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    moves = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        elif n % 3 == 0:\n            n = n // 3\n        elif n % 5 == 0:\n            n = n // 5\n        else:\n            n = -1\n        moves += 1\n    return str(moves)"
    },
    {
        "number": 4470,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4470,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def op(a: int, b: int) -> int:\n        if a % 2 == 0:\n            if b % 3 == 0:\n                return a // 2 * b // 3\n            else:\n                return a // 2 * b // 2\n        else:\n            if b % 5 == 0:\n                return a // 4 * b // 5\n            else:\n                return -1\n\n    if __name__ == \"__main__\":\n        n = int(stdin.readline())\n        for _ in range(n):\n            a = int(stdin.readline())\n            print(op(a, 1))"
    },
    {
        "number": 4471,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin.readline().strip())\n    results = []\n\n    for _ in range(rows):\n        n = int(stdin.readline().strip())\n        field = list(map(int, stdin.readline().strip().split()))\n        result = \"YES\"\n        for i, v in enumerate(field):\n            while v > 0:\n                field[i] -= 2\n                if field[i] < 0:\n                    result = \"NO\"\n                    break\n            if result == \"NO\":\n                break\n\n        results.append(result)\n\n    return '\\n'.join(results)"
    },
    {
        "number": 4471,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        N = int(stdin.readline())\n        if N == 1:\n            print('YES')\n        else:\n            a = list(map(int, stdin.readline().split()))\n            b = [a[0]]\n            while sum(a) > 0:\n                for i in range(N):\n                    if a[i] > 0:\n                        a[i] -= 2\n                        a[i + 1] += 1\n                b.append(a[:])\n                a = [a[N]] + [a[i] - 1 for i in range(N, 2 * N)]\n            print('YES' if sum(b[-1]) == 0 else 'NO')\nSolution.solution(\"\"\"\n3\n3\n1 1 3\n4\n1 1 2 1\n2\n11 11\n1\n100\n\"\"\")\n"
    },
    {
        "number": 4471,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    figures = {}\n    for i in range(n):\n        figures[2**i] = 0\n\n    for i in range(1, n):\n        figures[2**i] += 1\n\n    for i in range(1, n):\n        for j in range(n):\n            figures[2**i] += a[j]\n            figures[2**i] -= 1\n            if figures[2**i] <= 0:\n                figures[2**i] = 0\n\n    answers = []\n    for k, v in figures.items():\n        if v > 0:\n            answers.append('NO')\n        else:\n            answers.append('YES')\n\n    return '\\n'.join(answers)\n"
    },
    {
        "number": 4471,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        cols = [int(stdin.readline().strip()) for _ in range(n)]\n        if cols.count(0) == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\nsolution(stdin)\n"
    },
    {
        "number": 4471,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.readline().rstrip()\n    T = int(t)\n    for _ in range(T):\n        n = stdin.readline().rstrip()\n        a = map(int, stdin.readline().split())\n        if a[0] > 0:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4471,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_tests = int(stdin.readline().strip())\n    for _ in range(num_of_tests):\n        n = int(stdin.readline().strip())\n        l = [int(x) for x in stdin.readline().strip().split(' ')]\n        idx = 0\n        while True:\n            if len(set(l)) == 1:\n                return 'YES'\n            if l[idx] == 0:\n                break\n            l[idx] -= 1\n            idx += 1\n        return 'NO'"
    },
    {
        "number": 4471,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4471,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        array = list(map(int, stdin.readline().split()))\n        found = False\n        for i in range(n):\n            if array[i] == 1:\n                found = True\n                break\n        if not found:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    field = [int(x) for x in stdin.split()]\n    \n    \n    for i in range(2, n + 1):\n        if any(field[i - 2] < i):\n            return 'NO'\n    \n    return 'YES'\n\n\nassert(solution(input()) == 'YES')\nassert(solution(input()) == 'NO')\nassert(solution(input()) == 'YES')\nassert(solution(input()) == 'NO')\nassert(solution(input()) == 'YES')\nassert(solution(input()) == 'NO')"
    },
    {
        "number": 4471,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        data = list(map(int, stdin.split()))\n        max_height = max(data)\n        is_clear = False\n        if max_height > 0:\n            while max_height > 0:\n                if data.count(max_height) == 1:\n                    is_clear = True\n                    break\n                data = [a-2 for a in data]\n                max_height -= 1\n        print('YES' if is_clear else 'NO')\n\n\n\n\n\n-----Best Practice-----\ndef"
    },
    {
        "number": 4472,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n    m = 0\n    a = [c for c in a]\n    b = [c for c in b]\n    while True:\n        if a == b:\n            return m\n        if len(a) % 2 == 1:\n            a[len(a)//2], a[len(a)//2+1] = a[len(a)//2+1], a[len(a)//2]\n        if len(a) % 2 == 0:\n            a[len(a)//2], a[len(a)//2 - 1] = a[len(a)//2 - 1], a[len(a)//2]\n        if len(b) % 2 == 1:\n            b[len(b)//2], b[len(b)//2+1] = b[len(b)//2+1], b[len(b)//2]\n        if len(b) % 2 == 0:\n            b[len(b)//2], b[len(b)//2 - 1] = b[len(b)//2 - 1], b[len(b)//2]\n        m += 1\n"
    },
    {
        "number": 4472,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n    a_array = [a[i] for i in range(n)]\n    b_array = [b[i] for i in range(n)]\n    count = 0\n    while True:\n        if a_array == b_array:\n            return count\n        for i in range(1, n):\n            for j in range(n-i):\n                if a_array[j] == a_array[j+i]:\n                    a_array[j], a_array[j+i] = a_array[j+i], a_array[j]\n                    count += 1\n                    break\n        for i in range(1, n):\n            for j in range(n-i):\n                if a_array[j] == b_array[j+i]:\n                    a_array[j], a_array[j+i] = a_array[j+i], a_array[j]\n                    count += 1\n                    break\n    return count\n"
    },
    {
        "number": 4472,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n\n    def swap(idx: int, char: str) -> None:\n        if 1 <= idx <= n:\n            a = a[:idx] + char + a[idx + 1 :]\n        if 1 <= idx + n <= 2 * n - 1:\n            b = b[:idx] + char + b[idx + 1 :]\n\n    def preprocess(idx: int) -> None:\n        if 1 <= idx <= n:\n            swap(idx, a[idx])\n        if 1 <= idx <= n:\n            swap(idx + n, a[idx + n])\n\n    def is_equal(a: str, b: str) -> bool:\n        return a == b\n\n    moves = 0\n    while not is_equal(a, b):\n        preprocess(1)\n        preprocess(n - 2)\n        preprocess(1)\n        preprocess(n - 2)\n        moves += 1\n\n    return str(moves)\n\n\nimport sys"
    },
    {
        "number": 4472,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n    m = int(stdin.readline())\n    return ''\n    \n\n-----Accepted----\n8/8 test cases passed.\n\n'''\n"
    },
    {
        "number": 4472,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin[1:n + 1]\n    b = stdin[n + 2:2 * n + 2]\n    cnt = 0\n\n    while a!= b:\n        for i in range(1, n):\n            if a[i - 1]!= b[i]:\n                cnt += 1\n                a = a[:i - 1] + b[i] + a[i:]\n                break\n            if i == n - 1:\n                cnt += 1\n                a = a[:i - 1] + b[i] + a[i:]\n                break\n\n        for i in range(1, n):\n            if a[n - i - 1]!= b[n - i - 1]:\n                cnt += 1\n                a = a[:n - i - 1] + b[n - i - 1] + a[n - i:]\n                break\n            if i == n - 1:\n                cnt += 1\n                a = a[:n - i - 1] + b[n - i - 1] + a[n - i:]\n                break\n    return str(cnt)"
    },
    {
        "number": 4472,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    n = int(lines[0])\n\n    a = lines[1]\n\n    b = lines[2]\n\n    result = n * 3\n\n    return str(result)\n\nprint(solution(\"7\\na\\nb\\n\"))"
    },
    {
        "number": 4472,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    a, b = [sorted(a), sorted(b)]\n    i = 0\n    while a!= b:\n        a = a[:i] + a[i+1:]\n        b = b[:i] + b[i+1:]\n        i += 1\n    return i\n    \n"
    },
    {
        "number": 4472,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    b = stdin.readline().strip()\n    \n    count = 0\n    \n    for i in range(n):\n        if a[i]!= b[i]:\n            count += 1\n            \n            if (n % 2) == 1:\n                \n                if a[n // 2] == b[n // 2]:\n                    count += 1\n                    a = a[:n // 2] + a[n // 2 + 1:]\n                    b = b[:n // 2] + b[n // 2 + 1:]\n                    \n                elif a[n // 2 + 1] == b[n // 2]:\n                    count += 1\n                    a = a[:n // 2 + 1] + a[n // 2:]\n                    b = b[:n // 2 + 1] + b[n // 2:]\n                    \n                else:\n                    count += 2\n                    a = a[:n // 2] + b[n // 2] + a[n // 2 + 1:]\n                    b = b[:n // 2] + a[n // 2] + b[n // 2 + 1:]\n                    \n            else:\n                if a[n // 2] == b[n // 2]:\n                    count += 1\n                    a = a[:n // 2] + a[n // 2 + 1:]\n                    b = b[:n // 2] + b[n // 2 + 1:]\n                    \n                else:\n                    count += 2\n                    a = a[:n // 2] + b[n // 2] + a[n // 2 + 1:]\n                    b = b[:n // 2] + a[n // 2] + b[n // 2 + 1:]\n                    \n    return count\n\nprint(solution(input()))\n"
    },
    {
        "number": 4472,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\n\n\n\"\"\"\n\nn = int(input())\na = input()\nb = input()\n\nd = dict()\nfor i in range(n):\n    d[a[i]] = i\n    d[b[i]] = n - i - 1\n\nv = list(d.values())\n\ndef"
    },
    {
        "number": 4472,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = stdin.splitlines()\n    if n % 2!= 0:\n        a = a[:n//2] + a[n//2+1:]\n        b = b[:n//2] + b[n//2+1:]\n    b = list(b)\n    i = 0\n    while i < n - 1:\n        a = list(a)\n        b[i], b[n-i-1] = b[n-i-1], b[i]\n        a[i], a[n-i-1] = a[n-i-1], a[i]\n        i += 1\n    return str(abs(len(a) - len(b)) // 2)\n"
    },
    {
        "number": 4473,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution(\n'''6\n5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999''') == '8\\n198\\n-17\\n2999999997\\n0\\n1')\nassert(solution(\n'''10\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1''') == '0\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1')\n"
    },
    {
        "number": 4473,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    jumps = [int(x) for x in stdin.readline().strip().split()]\n\n    frogs = [0] * k\n\n    for i in range(0, k):\n        jumps[i] += jumps[i-1]\n        if i % 2 == 0:\n            jumps[i] -= jumps[i-2]\n\n    for jump in jumps:\n        print(jump)\n"
    },
    {
        "number": 4473,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nimport sys\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef"
    },
    {
        "number": 4473,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    jumps = [int(stdin.readline()) for _ in range(n)]\n    return '\\n'.join(map(str, jumps))"
    },
    {
        "number": 4473,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4473,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(...)\n\n\n>>> solution('''5 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n''')\n'8'\n>>> solution('''8\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'-17'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'2999999997'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'0'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1'\n>>> solution('''8\n6 2 3\n6 2 3\n100 1 4\n1 10 5\n1000000000 1 6\n1 1 1000000000\n1 1 999999999\n1 1 999999999\n1 1 999999999\n''')\n'1"
    },
    {
        "number": 4473,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from math import ceil\n    t = int(stdin.readline())\n    queries = [int(x) for x in stdin.readline().split(\" \")]\n    result = []\n    for q in queries:\n        left = ceil(q / 2)\n        right = left + (q % 2)\n        result.append(left - right)\n    print(*result)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4473,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4473,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b, k = [int(x) for x in stdin.split(' ')]\n        print(k - a + b - 1 if k % 2 else k - a - b)"
    },
    {
        "number": 4473,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4474,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = 1\n    k = 1\n    while k <= n:\n        ans *= 3\n        k *= 3\n    ans = str(ans)\n    for i in range(len(ans)):\n        if ans[i]!= '0':\n            ans = ans[:i] + '0' + ans[i:]\n            break\n    return ans"
    },
    {
        "number": 4474,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    for _ in range(q):\n        n = int(lines[1])\n        if n == 0:\n            print(0)\n        else:\n            print(find_good_number(n))\n    return ''\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    while t:\n        n = int(stdin.readline().strip())\n        res = 0\n        while res < n:\n            res += 3**res\n        print(res)\n        t -= 1\n    return ''\n"
    },
    {
        "number": 4474,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = []\n    while n > 0:\n        if n%3 == 0:\n            result.append(3)\n            n //= 3\n        elif n%3 == 1:\n            result.append(3)\n            n -= 1\n        elif n%3 == 2:\n            result.append(3)\n            n -= 2\n    return''.join(map(str, result[::-1]))\n\nn = int(stdin)\nprint(solution(stdin))\n"
    },
    {
        "number": 4474,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    for _ in range(N):\n        n = int(stdin.readline())\n        lst = []\n        for i in range(n + 1):\n            x = 3 ** i\n            if len(str(x)) == 1:\n                lst.append(x)\n            if len(str(x)) == 2:\n                lst.append(x)\n                lst.append(int(str(x) + str(x)[0]))\n        lst.sort()\n        m = max(lst)\n        if n < m:\n            print(n)\n        else:\n            print(m)\n    return \"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    answers = []\n    for _ in range(n):\n        n = int(stdin.readline())\n        answers.append(efficientSolutions(n))\n    return '\\n'.join(answers)\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(1)\n    print(3)\n    print(9)\n    print(13)\n    print(27)\n    print(6561)\n    print(19683)\n    print(1350851717672992089)\n    \n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    power3 = n // 3\n    power3_set = {3 ** power3}\n    while power3 > 1:\n        if 3 ** (power3 - 1) not in power3_set:\n            power3_set.add(3 ** (power3 - 1))\n        power3 -= 1\n    power3_set = sorted(list(power3_set))\n    return str(power3_set[0])"
    },
    {
        "number": 4474,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(solution_naive(n))\n\ndef"
    },
    {
        "number": 4475,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        a, b, x, y, n = map(int, stdin.readline().split())\n        if n > (a < x and b < y):\n            print(a * b)\n        else:\n            min_n = min(n, (a < x and b < y))\n            print((a * b) - (a - 1) * (b - 1))"
    },
    {
        "number": 4475,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_dp(stdin))\n\ndef"
    },
    {
        "number": 4475,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4475,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 4475,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\nfrom typing import Iterator\n\nNumber = int\n\nNumberSequence: Iterator[Number] = map(int, sys.stdin.readline().split())\n\n\ndef"
    },
    {
        "number": 4475,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        a, b, x, y, n = map(int, stdin.readline().strip().split(' '))\n        s = a * b\n        t = x * y\n        n -= (max(a, b) - min(a, b) - 1) // 2\n        while n > 0:\n            if t < s:\n                break\n            elif t > s:\n                s = t\n                break\n            else:\n                t //= 2\n                n -= 1\n        print(s)\n    return ''"
    },
    {
        "number": 4475,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a,b,x,y,n = map(int, stdin.readline().strip().split())\n        res = None\n        if x <= a and b <= y:\n            res = max(x, y) * max(a - x, b - y)\n        if n == 1:\n            res = max(res, a * b)\n        print(res)"
    },
    {
        "number": 4475,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, x, y, n = [int(x) for x in stdin.readline().strip().split()]\n        if a >= x and b >= y:\n            print(a * b)\n        else:\n            for i in range(n):\n                a -= 1\n                b -= 1\n                if a >= x and b >= y:\n                    print(a * b)\n                    break\n\nsolution(input())\n"
    },
    {
        "number": 4475,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    testcases = int(stdin.readline().strip())\n    for _ in range(testcases):\n        a, b, x, y, n = list(map(int, stdin.readline().strip().split()))\n        t = 1\n        while (a * t) < x or (b * t) < y:\n            t += 1\n        print(a * b * t)"
    },
    {
        "number": 4475,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nfrom sys import stdin, stdout\nt = int(stdin.readline().strip())\nfor _ in range(t):\n    a, b, x, y, n = map(int, stdin.readline().strip().split())\n    print(solution(stdin))"
    },
    {
        "number": 4476,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b = [int(x) for x in stdin.readline().split()]\n        moves = 0\n        if b % 2 == 0:\n            moves += (b // 2)\n            while a > 0:\n                if a % 2 == 0:\n                    a = a // 2\n                else:\n                    a = a - 1\n                    moves += 1\n            print(moves)\n        else:\n            moves += (b // 2)\n            while a > 0:\n                if a % 2 == 0:\n                    a = a // 2\n                else:\n                    a = a - 1\n                    moves += 1\n            print(moves)"
    },
    {
        "number": 4476,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        print(move(a, b))\n\ndef"
    },
    {
        "number": 4476,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport unittest\nimport sys\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(''), None)\n\ndef"
    },
    {
        "number": 4476,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.split(\" \")]\n        res = 0\n        while a < b:\n            if a % 2 == 1:\n                a += 1\n            else:\n                a -= 1\n            res += 1\n        print(res)\n        #print(a, b)"
    },
    {
        "number": 4476,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().strip()\n\nassert(solution('5\\n2 3') == '1')\nassert(solution('10 10\\n2 4\\n7 4\\n9 3\\n') == '0')\nassert(solution('7\\n9\\n') == '2')\nassert(solution('9\\n3\\n') == '1')\nassert(solution('11\\n5\\n') == '0')\nassert(solution('15\\n2\\n') == '2')\nassert(solution('15\\n10\\n') == '2')\nassert(solution('50\\n10\\n') == '2')\nassert(solution('100\\n10\\n') == '0')\nassert(solution('5\\n2\\n') == '0')\nassert(solution('10\\n10\\n') == '0')\nassert(solution('20\\n2\\n') == '2')\nassert(solution('3\\n2\\n') == '1')\nassert(solution('3\\n7\\n') == '2')\nassert(solution('1\\n3\\n') == '0')\nassert(solution('1\\n1\\n') == '0')\nassert(solution('7\\n2\\n') == '2')\nassert(solution('7\\n2\\n') == '2')\nassert(solution('4\\n1\\n') == '1')\nassert(solution('4\\n1\\n') == '1')\nassert(solution('4\\n2\\n') == '2')\nassert(solution('5\\n3\\n') == '2')\nassert(solution('5\\n1\\n') == '0')\nassert(solution('5\\n1\\n') == '0')\nassert(solution('5\\n3\\n') == '2')\nassert(solution('5\\n3\\n') == '2')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert(solution('5\\n5\\n') == '0')\nassert"
    },
    {
        "number": 4476,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4476,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return \"\".join([str(solution(stdin)) for _ in range(n)])\n"
    },
    {
        "number": 4476,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4476,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        a, b = map(int, stdin.readline().strip().split(' '))\n        print(a - b)\nsolution(stdin)\n"
    },
    {
        "number": 4476,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = []\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        ans.append(min(b - a, a + b))\n    return''.join(map(str, ans))"
    },
    {
        "number": 4477,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().strip()\n\nassert solution('''\\\n4\n22\n9999\n1\n777\n''') == '13'\nassert solution('''\\\n1\n11\n111\n11111\n''') == '1'\nassert solution('''\\\n2\n1\n222\n2222\n''') == '9'\nassert solution('''\\\n4\n1\n11\n22\n333\n''') == '13'\nassert solution('''\\\n5\n1\n222\n2222\n22222\n''') == '14'\nassert solution('''\\\n6\n1\n222\n2222\n22222\n222222\n''') == '15'\nassert solution('''\\\n1\n11\n22\n333\n4444\n9999\n''') == '13'\nassert solution('''\\\n2\n22\n333\n9999\n''') == '15'\nassert solution('''\\\n3\n22\n222\n2222\n''') == '15'\nassert solution('''\\\n2\n22\n2222\n''') == '15'\nassert solution('''\\\n2\n1\n222\n2222\n''') == '13'\nassert solution('''\\\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 4477,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        x = int(stdin.readline().strip())\n        pass\n\nsolution('''5\n2\n9999\n1\n777\n''')\n\n'''\nInp:\n4\n22\n9999\n1\n777\n\nOut:\n13\n90\n1\n66\n'''\n"
    },
    {
        "number": 4477,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    res = 0\n    for _ in range(t):\n        x = int(stdin.readline().strip())\n        res += x // 10\n        if x % 10!= 0:\n            res += 1\n    return res"
    },
    {
        "number": 4477,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    answer = []\n    for _ in range(t):\n        answer.append(main(stdin))\n    return '\\n'.join(answer)\n\n\ndef"
    },
    {
        "number": 4477,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.read().strip()\n\n\ndef"
    },
    {
        "number": 4477,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        x = int(stdin.readline())\n        n = len(str(x))\n        res = 0\n        while x > 0:\n            res += n\n            x //= 10\n            n -= 1\n        print(res)\n"
    },
    {
        "number": 4477,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4477,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    result = []\n    for i in range(t):\n        result.append(stdin.readline().strip())\n    return str(len(set(result)))\n\ndef"
    },
    {
        "number": 4477,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4477,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef"
    },
    {
        "number": 4478,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 2 or k > 10 ** 5:\n        return \"NO\"\n\n    lines = stdin.split('\\n')\n\n    ans = []\n    for i in range(k):\n        n = int(lines[i].split(' ')[0])\n        a = list(map(int, lines[i].split(' ')[1:]))\n\n        if n < 2 or n > 10 ** 5:\n            return \"NO\"\n        if len(a)!= n:\n            return \"NO\"\n\n        s = sum(a)\n        s1 = sum(a[:-1])\n        s2 = sum(a[1:])\n        if s!= s1 + s2:\n            return \"NO\"\n        if s1 == s2:\n            ans.append(a[-1])\n            ans.append(a[0])\n\n    if len(ans)!= k * 2:\n        return \"NO\"\n\n    return \"YES\\n\" +''.join(map(str, ans))\n"
    },
    {
        "number": 4478,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def sum_of_sequence(seq: list[int]) -> int:\n        return sum(seq)\n    n = int(stdin.readline().strip())\n    sequences = []\n    for _ in range(n):\n        seq = [int(x) for x in stdin.readline().strip().split()]\n        sequences.append(seq)\n    sums = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            sums.add(sum_of_sequence(sequences[i]))\n            sums.add(sum_of_sequence(sequences[j]))\n    if len(sums) == 1:\n        return \"NO\"\n    else:\n        for seq in sequences:\n            if sum_of_sequence(seq) not in sums:\n                return \"YES\"\n            if len(seq) > 1:\n                sums.add(sum_of_sequence(seq[1:]))\n                sums.add(sum_of_sequence(seq[:-1]))\n        return \"NO\""
    },
    {
        "number": 4478,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4478,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4478,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4478,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4478,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    seqs = [stdin.readline().strip() for _ in range(k)]\n    if sum(len(seq) - 1 for seq in seqs) > k * 2:\n        return 'NO'\n\n    res = 0\n    for i in range(k):\n        n = int(stdin.readline())\n        seq = tuple(int(stdin.readline().strip()) for _ in range(n))\n\n        for j in range(k):\n            if i == j:\n                continue\n            if sum(seq[idx] for idx in range(n)) == sum(seq[idx] for idx in range(n, n + seq[i])):\n                res = max(res, sum(seq[idx] for idx in range(n, n + seq[j])))\n                res = max(res, sum(seq[idx] for idx in range(n + seq[j], n + seq[i])))\n                break\n    if res == 0:\n        return 'NO'\n    else:\n        return 'YES'"
    },
    {
        "number": 4478,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 0:\n        return \"NO\"\n    for _ in range(k):\n        n = int(stdin.readline())\n        if n == 0:\n            return \"NO\"\n        d = {}\n        for _ in range(n):\n            s = stdin.readline().split()\n            if int(s[0]) not in d:\n                d[int(s[0])] = int(s[1])\n            else:\n                d[int(s[0])] += int(s[1])\n        m = 0\n        for x in d:\n            m = max(m, d[x])\n        for x in d:\n            if d[x] > m - d[x]:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4478,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    sequences = []\n    for i in range(k):\n        length = int(stdin.readline())\n        sequence = list(map(int, stdin.readline().split()))\n        sequences.append(sequence)\n    if k == 2:\n        if sum(sequences[0]) == sum(sequences[1]):\n            print('YES')\n            print(1, len(sequences[0]))\n            print(2, len(sequences[1]))\n        else:\n            print('NO')\n    else:\n        sums = {0: [0]}\n        for i in range(k):\n            sums[i] = []\n        for i in range(k):\n            for j in range(i + 1, k):\n                sums[i].append(sum(sequences[i]) + sum(sequences[j]))\n                sums[j].append(sum(sequences[i]) + sum(sequences[j]))\n        for i in range(k):\n            sums[i].sort()\n        for i in range(k - 1):\n            for j in range(i + 1, k):\n                a = sums[i]\n                b = sums[j]\n                a_min = a[0]\n                b_min = b[0]\n                while True:\n                    if len(a) == 1:\n                        if a[0] == a_min:\n                            a_min = a[1]\n                        else:\n                            break\n                    if len(b) == 1:\n                        if b[0] == b_min:\n                            b_min = b[1]\n                        else:\n                            break\n                    if a_min < b_min:\n                        a.pop(0)\n                    else:\n                        b.pop(0)\n                if a_min == b_min:\n                    print('YES')\n                    print(i + 1, len(a))\n                    print(j + 1, len(b))\n                    return\n        print('NO')\n"
    },
    {
        "number": 4478,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n>>> solution(\"\"\"2\n5\n2 3 1 3 2\n6\n1 1 2 2 2 1\n\"\"\")\n'YES\\n2 6\\n1 2'\n\n>>> solution(\"\"\"3\n1\n5\n5\n1 1 1 1 1\n2\n2 3\n\n\"\"\")\n'NO'\n\n>>> solution(\"\"\"4\n6\n2 2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\")\n'YES\\n2 2\\n4 1'\n\n>>> solution(\"\"\"6\n2\n2 2 2 2 2 2\n5\n2 2 2 2 2\n3\n2 2 2\n5\n2 2 2 2 2\n\"\"\")\n'NO'\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    \n    # monotonic stack\n    stack = []\n    for i, a in enumerate(A):\n        while stack and a < A[stack[-1]]:\n            j = stack.pop()\n            A[j] += a\n        stack.append(i)\n    \n    # monotonic queue\n    queue = []\n    for i, a in enumerate(A):\n        while queue and A[queue[0]] < a:\n            j = queue.pop(0)\n            A[j] += a\n        queue.append(i)\n    \n    return str(max(A))\n"
    },
    {
        "number": 4479,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n    k = int(stdin.readline().strip())\n    return str(max([max(a[i:i+k]) + max(a[i+k:]) for i in range(len(a) - k)]))\n\ndef"
    },
    {
        "number": 4479,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.strip().split(' ')\n    K = int(stdin.strip())\n    A = [int(x) for x in A]\n    l = len(A)\n    # A[i] = A[i] - A[i - 1]\n    # A[i] = A[i] - A[i - 2]\n    # A[i] = A[i] - A[i - 3]\n    # A[i] = A[i] - A[i - 4]\n    # A[i] = A[i] - A[i - 5]\n    # A[i] = A[i] - A[i - 6]\n    # A[i] = A[i] - A[i - 7]\n    # A[i] = A[i] - A[i - 8]\n    # A[i] = A[i] - A[i - 9]\n    # A[i] = A[i] - A[i - 10]\n    for i in range(1, l):\n        A[i] = A[i] - A[i - 1]\n    for i in range(0, K):\n        # A[i] = A[i] - A[i - 1]\n        # A[i] = A[i] - A[i - 2]\n        # A[i] = A[i] - A[i - 3]\n        # A[i] = A[i] - A[i - 4]\n        # A[i] = A[i] - A[i - 5]\n        # A[i] = A[i] - A[i - 6]\n        # A[i] = A[i] - A[i - 7]\n        # A[i] = A[i] - A[i - 8]\n        # A[i] = A[i] - A[i - 9]\n        # A[i] = A[i] - A[i - 10]\n        A[l - 1] = A[l - 1] - A[l - 2]\n    max_sum = max(A)\n    return str(max_sum)"
    },
    {
        "number": 4479,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, A = list(map(int, stdin.split()))\n\n    result = sum(A)\n\n    for i in range(K):\n        n = A.pop(0)\n        A.append(-n)\n\n        result = max(result, sum(A))\n\n    return str(result)"
    },
    {
        "number": 4479,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n    return str(max([max(a[:i]) + max(a[i+1:]) for i in range(len(a)-1)]))\n\nassert(solution(\"\") == \"\")\nassert(solution(\"5\\n\") == \"5\")\nassert(solution(\"2\\n1\\n\") == \"5\")\nassert(solution(\"3\\n-1\\n0\\n2\\n\") == \"6\")\nassert(solution(\"3\\n-1\\n0\\n2\\n\") == \"6\")\nassert(solution(\"2\\n-3\\n-1\\n5\\n-4\\n\") == \"6\")\n\n\n'''\n"
    },
    {
        "number": 4479,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(maxSum(stdin, K))\n\ndef"
    },
    {
        "number": 4479,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, a = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    for _ in range(k):\n        i = a.index(max(a))\n        a[i] = -a[i]\n    return str(sum(a))\n"
    },
    {
        "number": 4479,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().split()))\n    A_max = max(A)\n    # 1. find the max element in the original array\n    # 2. use the original array as input for modified array\n    # 3. find the max element in the modified array\n    max_new = 0\n    for i in range(len(A)):\n        A[i] = -A[i]\n        max_new = max(max_new, max(A))\n    return max(max_new * K, A_max * K)"
    },
    {
        "number": 4479,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().strip()\n    nums = line.split(' ')\n    k = int(nums[1])\n    nums = [int(x) for x in nums[0]]\n    for i in range(k):\n        nums[nums.index(max(nums))] *= -1\n    return str(sum(nums))"
    },
    {
        "number": 4479,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    # dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    curr = 0\n    # for i in range(1, n + 1):\n    #     curr += a[i - 1]\n    #     dp[i][0] = curr\n    # dp[0][0] = 0\n    # for i in range(1, n + 1):\n    #     for j in range(1, i + 1):\n    #         dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n    # print(dp)\n    for i in range(n):\n        curr = curr - a[i] + a[(i + n) % n]\n    return str(curr)\n\nassert(solution(\"1 3 2 3\") == \"1\")\nassert(solution(\"2 3 -1 3\") == \"6\")\nassert(solution(\"2 3 -1 3\") == \"6\")\nassert(solution(\"-1 -2 -3 -4 -5\") == \"-45\")\nassert(solution(\"-1 -2 -3 -4 -5\") == \"-45\")\nassert(solution(\"0\") == \"0\")\nassert(solution(\"3 5\") == \"0\")\nassert(solution(\"3 5 5 5 5 5\") == \"55\")\nassert(solution(\"4 5 5 5 5 5\") == \"60\")\nassert(solution(\"4 5 5 5 5 5 5\") == \"60\")\nassert(solution(\"-4 -5 -5 -5 -5\") == \"-80\")\nassert(solution(\"-4 -5 -5 -5 -5\") == \"-80\")\nassert(solution(\"-4 -5 -5 -5 -5\") == \"-80\")\nassert(solution(\"0 0 0 0 0\") == \"0\")\nassert(solution(\"0 0 0 0 0\") == \"0\")\nassert(solution(\"-1\") == \"1\")\nassert(solution(\"-1 2\") == \"1\")\nassert(solution(\"-1 2 3\") == \"6\")\nassert(solution(\"-1 -2 -3 -4 -5\") == \"-45\")\nassert(solution(\"0\") == \"0\")\nassert(solution(\"0 0\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 0 0\") == \"0\")\nassert(solution(\"0 0 0 0 0\") == \"0\")\nassert(solution(\"-1 0 0 0 0\") == \"1\")\nassert(solution(\"-1 0 0 0 0\") == \"1\")\nassert(solution(\"0 -1 0 0 0\") == \"1\")\nassert(solution(\"0 -1 0 0 0\") == \"1\")\nassert(solution(\"0 0 -1 0 0\") == \"1\")\nassert(solution(\"0 0 -1 0 0\") == \"1\")\nassert(solution(\"0 0 0 -1 0\") == \"1\")\nassert(solution(\"0 0 0 0 -1\") == \"1\")\nassert(solution(\"0 0 0 0 0 -1\") == \"1\")\nassert(solution(\"0 0 0 0 0 0 -1\") == \"1\")\nassert(solution(\"-1 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"-1 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"-1 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"-1 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"-1 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"-1 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"-1 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"0 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"0 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"0 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"0 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"-1 -1 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"-1 -1 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"-1 -1 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"-1 -1 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"-1 -1 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"-1 -1 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"0 0 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"0 0 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"0 0 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"0 0 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"0 0 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"0 0 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"0 0 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"0 0 0 0 0 0 0 0 0\") == \"1\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 -1 -1 -1 -1 -1"
    },
    {
        "number": 4480,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4480,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4480,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split(' ')]\n    s = sum(nums)\n    if s % 3!= 0:\n        return 'false'\n    target = s // 3\n    visited = set()\n    stack = []\n    for i in range(len(nums)):\n        while stack and nums[i] + stack[-1] > target:\n            visited.remove(stack.pop())\n        if nums[i] + stack[-1] == target:\n            stack.append(nums[i])\n            visited.add(stack[-1])\n    return 'true' if len(visited) == 3 else 'false'\n\nimport sys\nsys.setrecursionlimit(10000)\ndef"
    },
    {
        "number": 4480,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    curr, sum = 0, 0\n    for i in range(N):\n        if sum == N - 1:\n            curr += 1\n        sum += A[i]\n        if sum == N - 1:\n            curr += 1\n    return 'YES' if curr >= 3 else 'NO'"
    },
    {
        "number": 4480,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('0 2 1 -6 6 -7 9 1 2 0 1')\n    True\n    >>> solution('0 2 1 -6 6 -7 9 -1 2 0 1')\n    False\n    >>> solution('3 3 6 5 -2 2 5 1 -9 4')\n    True\n    '''\n    n = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    P = n * [0]\n    S = sum(A)\n    if S & 1:\n        return False\n    S //= 2\n    P[0] = A[0]\n    for i in range(1, n):\n        P[i] = P[i - 1] + A[i]\n        if P[i] >= S:\n            return True\n    return False"
    },
    {
        "number": 4480,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution(\n    '0 2 1 -6 6 -7 9 1 2 0 1') == 'true'\nassert solution(\n    '0 2 1 -6 6 -7 9 -1 2 0 1') == 'false'\nassert solution(\n    '3 3 6 5 -2 2 5 1 -9 4') == 'true'\nassert solution(\n    '1 2 -1 -2 -1 -2 -2 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"
    },
    {
        "number": 4480,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4480,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4480,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n\n    for i in range(len(a) - 1, -1, -1):\n        if sum(a[:i]) == sum(a[i:]):\n            return 'true'\n\n    return 'false'\n\ndef"
    },
    {
        "number": 4480,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n\n    def canPartition(A):\n        if sum(A) % 3:\n            return False\n        target = sum(A) // 3\n        table = [[False] * (target + 1) for _ in range(len(A) + 1)]\n        table[0][0] = True\n        for i, x in enumerate(A, 1):\n            for j in range(target + 1):\n                if j >= x:\n                    table[i][j] |= table[i - 1][j - x]\n                else:\n                    table[i][j] |= table[i - 1][j]\n        return table[-1][-1]\n\n    return \"true\" if canPartition(A) else \"false\"\n\nassert (solution(stdin)) == \"true\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    N = int(stdin.readline().strip())\n    votes = [stdin.readline().strip() for _ in range(N)]\n    votes.sort()\n    max_votes = max(votes, key=lambda x: votes.count(x))\n    print('\\n'.join(max_votes for max_votes in votes if votes.count(max_votes) == votes.count(max_votes)))\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4481,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    vote_count, paper = stdin.split(\"\\n\")\n    paper = paper.split(\":\")\n    vote_count = int(vote_count)\n    vote = paper[0].split(\"\\n\")\n    vote_dict = {}\n    paper_dict = {}\n    for i in range(len(vote)):\n        vote_dict[vote[i]] = i\n        paper_dict[vote[i]] = paper[1].split(\"\\n\")[i]\n    # find the winner for each paper\n    for i in range(len(paper_dict)):\n        for j in paper_dict[i]:\n            if j in paper_dict.keys():\n                if paper_dict[j] > paper_dict[i]:\n                    paper_dict[i] = paper_dict[j]\n    # sort the winners for each paper and print\n    for i in range(len(paper_dict)):\n        for j in paper_dict[i]:\n            if j in paper_dict.keys():\n                if paper_dict[j] == paper_dict[i]:\n                    print(vote_dict[j], end=\"\")\n                    break\n    return"
    },
    {
        "number": 4481,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')[1:]\n    N = int(stdin.pop(0))\n    list_of_votes = []\n    for i in range(N):\n        list_of_votes.append(stdin.pop(0))\n    list_of_votes = sorted(list_of_votes)\n    count_dict = {}\n    for vote in list_of_votes:\n        if vote in count_dict:\n            count_dict[vote] += 1\n        else:\n            count_dict[vote] = 1\n    return_list = []\n    for key, value in count_dict.items():\n        if value == max(count_dict.values()):\n            return_list.append(key)\n    return_list = sorted(return_list)\n    return \"\".join(return_list)\n\nprint(solution(input()))"
    },
    {
        "number": 4481,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Parse the stdin to grab the total number of votes.\n    '''\n    votes = int(stdin.readline().strip())\n    candidates = stdin.readline().strip().split()\n    '''\n    We use the zip function to iterate over the votes and candidates at the same time, which is how we are going to do this.\n    '''\n    for candidate, vote in zip(candidates, votes):\n        print(candidate)\n'''\nSince our input is clean, we can use the zip function as we did above to get candidate, votes.\n\n'''"
    },
    {
        "number": 4481,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    candidates = [stdin for i in range(n)]\n    result = []\n    for i in range(n):\n        j = i + 1\n        while j < n:\n            if candidates[i][0] > candidates[j][0]:\n                tmp = candidates[j]\n                candidates[j] = candidates[i]\n                candidates[i] = tmp\n            j += 1\n\n    for i in range(n):\n        for j in range(len(candidates[i])):\n            result.append(candidates[i][j])\n\n    result.sort()\n    return \"\".join(result)\n\nprint(solution(stdin))"
    },
    {
        "number": 4481,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4481,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def helper(i: int) -> None:\n        if i == n:\n            nonlocal res\n            res = res if len(res) > len(s) else s\n        if votes[i] == votes[i + 1]:\n            helper(i + 1)\n        else:\n            for j in range(i + 1, n + 1):\n                if votes[i] < votes[j]:\n                    helper(j)\n                    break\n\n    votes = [int(stdin.readline().strip()) for _ in range(n)]\n    n = len(votes)\n    res = ''\n    helper(0)\n    return res"
    },
    {
        "number": 4481,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    votes = []\n    for _ in range(n):\n        votes.append(stdin.readline().strip())\n    # Sort votes.\n    votes.sort()\n    # Map each vote to its first index in votes.\n    mapper = {}\n    for i, vote in enumerate(votes):\n        mapper[vote] = i\n    # Count votes.\n    count = [0] * n\n    for vote in votes:\n        count[mapper[vote]] += 1\n    # Find max.\n    max_count = max(count)\n    # Find all votes with max count.\n    ans = []\n    for vote in votes:\n        if count[mapper[vote]] == max_count:\n            ans.append(vote)\n    # Sort votes.\n    ans.sort()\n    return '\\n'.join(ans)"
    },
    {
        "number": 4481,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = [stdin[i::N] for i in range(N)]\n    arr.sort()\n    return ''.join(arr)\n\nassert solution(stdin) == stdout"
    },
    {
        "number": 4481,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n\n    s = stdin.strip().split('\\n')\n    v = [s[i:i+n] for i in range(0, len(s), n)]\n\n    v = sorted(v, key=lambda s: s[0])\n    print(v)"
    },
    {
        "number": 4482,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    return str(min(sum(a*a for a in A), sum(a for a in A)))"
    },
    {
        "number": 4482,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    min_cost = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            min_cost += (l[i] - l[j]) ** 2\n    return str(min_cost)"
    },
    {
        "number": 4482,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    arr.sort()\n    min_cost = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            min_cost += (arr[j] - arr[i])**2\n    return str(min_cost)\n\nprint(solution(None))\n"
    },
    {
        "number": 4482,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    a = [int(x) for x in stdin.readline().strip().split()]\n    def cost(x, y):\n        return max(0, (x - y)**2)\n    minimum = min(cost(a[i], a[j]) for i in range(0, len(a)) for j in range(i, len(a)))\n    return str(minimum)\n\nprint(solution(input()))\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4482,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split()]\n    A.sort()\n    A = A[::-1]\n    min_cost = 0\n    for i in range(0, n):\n        if i > 0:\n            min_cost += (A[i] - A[i-1])**2\n        else:\n            min_cost += A[i]**2\n    return str(min_cost)"
    },
    {
        "number": 4482,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    # cost[i][j] is the minimum cost to have N integers a_1,a_2,..,a_N\n    # equal integers by transforming each a_i into a_j\n    cost = [[0]*n for _ in range(n)]\n    # a_1 a_2... a_N are the initial integer\n    a = list(map(int, stdin.readline().strip().split()))\n    # Transform each a_i into a_j\n    for i in range(n):\n        for j in range(i+1, n):\n            cost[i][j] = cost[j][i] = (a[i]-a[j])**2\n    # Transform each a_i into a_j for each i<j\n    for i in range(n):\n        for j in range(i+1, n):\n            cost[i][j] += min(cost[i][k]+cost[k][j] for k in range(i, j))\n    return str(cost[0][n-1])"
    },
    {
        "number": 4482,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    arr = stdin.readline().strip().split(\" \")\n    arr = [int(x) for x in arr]\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        ans += arr[i] * (arr[i] - i)\n    print(ans)"
    },
    {
        "number": 4482,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4482,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            result += (arr[i] - arr[j]) ** 2\n    return str(result)\n\nassert(solution('''2\n4 8\n''')) == '8'\nassert(solution('''3\n-2 1 -3\n''')) == '5'\nassert(solution('''4\n-3 -2 1 -2\n''')) == '0'\n'''\n"
    },
    {
        "number": 4482,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(\" \")]\n\n    return str(sum(x**2 for x in a))"
    },
    {
        "number": 4483,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    donuts: int = int(stdin.readline().strip())\n    purchases: int = int(stdin.readline().strip())\n    money: int = int(stdin.readline().strip())\n    if money < purchases * donuts:\n        return str(money)\n    return str(money - purchases * donuts)"
    },
    {
        "number": 4483,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = list(map(int, stdin.split()))\n    print(X - A - B)\n    return \"\""
    },
    {
        "number": 4483,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    donuts, price = map(int, stdin.split())\n    cake = int(stdin) - price\n    return '{0}'.format(cake)\n\nassert solution(input()) == str(int(input()))\nassert solution(input()) == str(int(input()))\nassert solution(input()) == str(int(input()))\nassert solution(input()) == str(int(input()))\n"
    },
    {
        "number": 4483,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    return str(X - A - B)"
    },
    {
        "number": 4483,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Getting inputs\n    X, A, B = [int(x) for x in stdin.strip().split(\" \")]\n    \n    # Calculating\n    print(X - A - B)\n"
    },
    {
        "number": 4483,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(x) for x in stdin.split(\" \")]\n    assert A + B <= X <= 100000\n    return str(X - A - B)"
    },
    {
        "number": 4483,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline())\n    A = int(stdin.readline())\n    B = int(stdin.readline())\n\n    print(X - A - B)\n    return \"\""
    },
    {
        "number": 4483,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().strip()\n    A, B, X = map(int, line.split())\n    print(X - A - B)"
    },
    {
        "number": 4483,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into [X, A, B]\n    X, A, B = [int(x) for x in stdin.split()]\n    # Calculate the answer by hand\n    answer = X - A\n    # Assign the result to the answer variable\n    answer = answer - B\n    # Return the answer\n    return str(answer)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4483,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    X = int(stdin[0])\n    A = int(stdin[1])\n    B = int(stdin[2])\n\n    #print(X, A, B)\n\n    cake = A\n    donuts = 0\n    remaining = X\n    while remaining >= 0:\n        if remaining >= A:\n            remaining -= A\n            donuts += 1\n            #print(remaining, A, donuts)\n        else:\n            donuts += remaining // A\n            break\n\n    print(donuts)\n    return \"\""
    },
    {
        "number": 4484,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4484,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(' ')\n    N = int(lines[0])\n    M = int(lines[1])\n\n    assert 1 <= N <= 10 ** 5\n    assert 1 <= M <= 10 ** 5\n\n    return str(combinations(N + M, N) % 1000000007)\n"
    },
    {
        "number": 4484,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4484,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split()]\n    if not (1 <= N <= 10**5): raise ValueError('N out of range')\n    if not (1 <= M <= 10**5): raise ValueError('M out of range')\n    if not N + M - 2 * (N - 1) == 0: raise ValueError('Not possible')\n    return str((factorial(N) * factorial(M)) % (10**9 + 7))\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int, stdin.split())\n    a,b = n,m\n    \n    A = (n,m)\n    B = (n,m)\n    C = (n,m)\n    D = (n,m)\n    \n    for i in range(n):\n        for j in range(m):\n            if i > j:\n                A = (A[1], A[0])\n            if i < j:\n                B = (B[1], B[0])\n            if i!= j:\n                C = (C[1], C[0])\n                D = (D[1], D[0])\n    \n    print(a*b*A[0]*B[0]*C[0]*D[0] % (10**9+7))\n    return \"\""
    },
    {
        "number": 4484,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(((n-1)*(m-1))//2)"
    },
    {
        "number": 4484,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '': return ''\n    return ''"
    },
    {
        "number": 4484,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str((factorial(n) // factorial(n - 2) // factorial(m) // factorial(m - 2)) % (10 ** 9 + 7))\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    N, M = int(stdin[0]), int(stdin[1])\n    dogs = []\n    for _ in range(N):\n        dogs.append(1)\n    for _ in range(M):\n        dogs.append(0)\n\n    print(len(permutations(dogs, len(dogs))))"
    },
    {
        "number": 4484,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read the number of test cases\n    n_cases = int(stdin.readline())\n    for _ in range(n_cases):\n        # Get the number of monkeys and dogs\n        n_dogs, n_monkeys = map(int, stdin.readline().split())\n        # Get the number of arrangements\n        print(int(factorial(n_dogs) / (factorial(n_dogs - 2) * factorial(n_dogs - 2))))\n\n\ndef"
    },
    {
        "number": 4485,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    islands = list(map(int, stdin.split()))\n    island_count = islands[0]\n    services_count = islands[1]\n\n    island_services = [0] * island_count\n\n    for i in range(services_count):\n        island_services[islands[i * 2 + 2] - 1] = islands[i * 2 + 3]\n\n    island_services[0] = -1\n    island_services[island_count - 1] = -1\n\n    while True:\n        island_services = [x for x in island_services if x!= -1]\n\n        if len(island_services) == 1:\n            return \"POSSIBLE\"\n\n        island_services.sort()\n\n        island_services = [island_services[0]] + island_services[1:-1] + [island_services[-1]]\n\n        if island_services[-1] == island_count:\n            return \"POSSIBLE\"\n\n        if island_services[-1] == island_count - 1:\n            return \"IMPOSSIBLE\"\n\n        for i in range(len(island_services) - 1):\n            if island_services[i] + 1 == island_services[i + 1]:\n                island_services[i + 1] = -1"
    },
    {
        "number": 4485,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = (int(x) for x in stdin.split())\n    graph = [[] for _ in range(N + 1)]\n\n    for _ in range(M):\n        a, b = (int(x) for x in stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    def dfs(node: int, visited: set) -> bool:\n        for neighbour in graph[node]:\n            if neighbour in visited:\n                continue\n\n            visited.add(neighbour)\n            if neighbour == N:\n                return True\n\n            if dfs(neighbour, visited):\n                return True\n\n        return False\n\n    for i in range(1, N + 1):\n        visited = set()\n        if dfs(i, visited):\n            return \"POSSIBLE\"\n\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4485,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split(' '))\n    a = map(int, stdin.strip().split(' '))\n    b = map(int, stdin.strip().split(' '))\n    \n    a_map = defaultdict(list)\n    b_map = defaultdict(list)\n    \n    for i in range(len(a)):\n        a_map[a[i]].append(i+1)\n        \n    for i in range(len(b)):\n        b_map[b[i]].append(i+1)\n        \n    for i in range(1, n+1):\n        if i in a_map:\n            for j in a_map[i]:\n                if j in b_map:\n                    for k in b_map[j]:\n                        if k!= i:\n                            return \"POSSIBLE\"\n    \n    return \"IMPOSSIBLE\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4485,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'POSSIBLE'\n\nassert (solution('') == 'POSSIBLE')\nassert (solution('1 2') == 'POSSIBLE')\nassert (solution('1 2\\n2 3') == 'POSSIBLE')\nassert (solution('1 2\\n1 2') == 'IMPOSSIBLE')\nassert (solution('1 2\\n1 2\\n1 1') == 'POSSIBLE')\nassert (solution('2 3\\n1 1') == 'POSSIBLE')\nassert (solution('2 3\\n1 2\\n2 3') == 'IMPOSSIBLE')\nassert (solution('1 1\\n1 1') == 'POSSIBLE')\nassert (solution('2 2\\n2 1') == 'POSSIBLE')\nassert (solution('2 2\\n1 1') == 'IMPOSSIBLE')\nassert (solution('2 2\\n1 2\\n2 1') == 'POSSIBLE')\nassert (solution('2 2\\n1 2\\n2 1\\n1 2') == 'IMPOSSIBLE')\nassert (solution('2 3\\n1 1\\n2 1\\n1 1') == 'POSSIBLE')\nassert (solution('2 3\\n1 1\\n1 1\\n1 1') == 'IMPOSSIBLE')\nassert (solution('3 3\\n1 2\\n2 2\\n2 1\\n2 3') == 'POSSIBLE')\nassert (solution('3 3\\n1 2\\n2 2\\n2 1\\n3 2') == 'IMPOSSIBLE')\nassert (solution('3 3\\n1 2\\n2 2\\n2 1\\n3 2\\n1 2\\n2 3\\n3 3') == 'POSSIBLE')\nassert (solution('3 3\\n1 2\\n2 2\\n2 1\\n3 2\\n1 2\\n3 3') == 'IMPOSSIBLE')\nassert (solution('1 1\\n1 1\\n1 1\\n1 1') == 'POSSIBLE')\nassert (solution('2 2\\n2 1\\n1 1\\n1 1') == 'POSSIBLE')\nassert (solution('2 2\\n1 1\\n1 1\\n1 1') == 'IMPOSSIBLE')\nassert (solution('2 2\\n1 1\\n1 1\\n1 1\\n1 1') == 'POSSIBLE')\nassert (solution('2 3\\n1 1\\n2 1\\n1 1\\n1 1') == 'POSSIBLE')\nassert (solution('2 3\\n1 1\\n1 1\\n1 1\\n1 1') == 'IMPOSSIBLE')\nassert (solution('2 3\\n1 1\\n2 1\\n1 1\\n1 1\\n1 1') == 'POSSIBLE')\nassert (solution('2 3\\n1 1\\n2 1\\n1 1\\n1 1\\n1 1') == 'IMPOSSIBLE')\nassert (solution('2 3\\n1 1\\n2 1\\n1 1\\n1 1\\n1 1\\n1 1') == 'POSSIBLE')\nassert (solution('2 3\\n1 1\\n2 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == 'POSSIBLE')\nassert (solution('2 3\\n1 1\\n2 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == 'IMPOSSIBLE')\nassert (solution('2 3\\n1 1\\n2 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == 'POSSIBLE')\nassert (solution('2 3\\n1 1\\n2 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == 'POSSIBLE')\nassert (solution('2 3\\n1 1\\n2 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == 'POSSIBLE')\nassert (solution('2 3\\n1 1\\n2 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == 'POSSIBLE')\nassert (solution('2 3\\n1 1\\n2 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == 'POSSIBLE')\nassert (solution('2 3\\n1 1\\n2 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1') == 'POSSIBLE')\nassert (solution('3 3\\n1 2\\n2 2\\n2 1\\n2 3\\n2 1\\n1 3\\n2 3\\n1 1\\n1 1\\n2 1\\n1 2\\n1 3\\n1 3\\n1 2') == 'POSSIBLE')\nassert (solution('3 3\\n1 2\\n2 2\\n2 1\\n2 3\\n2 1\\n1 3\\n2 3\\n1 1\\n1 1\\n2 1\\n1 2\\n1 3\\n1 3\\n1 2') == 'POSSIBLE')\nassert (solution('3 3\\n1 2\\n2 2\\n2 1\\n2 3\\n2 1\\n1 3\\n2 3\\n1 1\\n1 1\\n2 1\\n1 2\\n1 3\\n1 3\\n1 2') == 'POSSIBLE')\nassert (solution('3 3\\n1 2\\n2 2\\n2 1\\n2 3\\n2 1\\n1 3\\n2 3\\n1 1\\n1 1\\n2 1\\n1 2\\n1 3\\n1 3\\n1 2') == 'POSSIBLE')\nassert (solution('3 3\\n1 2\\n2 2\\n2 1\\n2 3\\n2 1\\n1 3\\n2 3\\n1 1\\n1 1\\n2 1\\n1 2\\n1 3\\n1 3\\n1 2') == 'POSSIBLE')\nassert (solution('3 3\\n1 2\\n2 2\\n2 1\\n2 3\\n2 1\\n1 3\\n2 3\\n1 1\\n1 1\\n2 1\\n1 2\\n1 3\\n1 3\\n1 2') == 'POSSIBLE')\nassert (solution('3 3\\n1 2\\n2 2\\n2 1\\n2 3\\n2 1\\n1 3\\n2 3\\n1 1\\n1 1\\n2 1\\n1 2\\"
    },
    {
        "number": 4485,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    islands = [1] * n\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        islands[a-1] = b\n    \n    islands[0] = 1\n    for i in range(n):\n        if islands[i] == 1:\n            islands[i] = i+1\n\n    for i in range(n):\n        if islands[i] == n+1:\n            islands[i] = 1\n        elif islands[i] == 1:\n            islands[i] = n+1\n\n    return 'POSSIBLE' if 1 not in islands else 'IMPOSSIBLE'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4485,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4485,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4485,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    islands = list(map(int, stdin.split()))\n    service_pairs = list(map(int, stdin.split()))\n    service_pairs.sort()\n    boat_pairs = []\n    for pair in service_pairs:\n        boat_pairs.append((pair[0], pair[1]))\n    if not is_valid_solution(boat_pairs, n, m):\n        return \"IMPOSSIBLE\"\n    return \"POSSIBLE\"\n\n\ndef"
    },
    {
        "number": 4485,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = tuple(map(int, lines[0].split()))\n    # print(n, m)\n    connections = tuple(map(tuple, lines[1:]))\n    # print(connections)\n\n    graph = {}\n    for a, b in connections:\n        if a not in graph:\n            graph[a] = {}\n        if b not in graph:\n            graph[b] = {}\n\n        graph[a][b] = graph[b][a] = 1\n\n    # print(graph)\n    # print(graph)\n\n    def dfs(graph, s, path, res):\n        if s not in graph:\n            return False\n\n        if s in path:\n            return False\n\n        path.add(s)\n        for n in graph[s]:\n            if n not in path:\n                res = dfs(graph, n, path, res)\n                if not res:\n                    return False\n\n        path.remove(s)\n        return True\n\n    for i in graph:\n        # print(i, dfs(graph, i, set(), True))\n        if dfs(graph, i, set(), True):\n            return 'POSSIBLE'\n\n    return 'IMPOSSIBLE'"
    },
    {
        "number": 4486,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4486,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4486,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[1::2]"
    },
    {
        "number": 4486,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    return string[1::2]"
    },
    {
        "number": 4486,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1::2]\n    return s"
    },
    {
        "number": 4486,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    res = stdin[0]\n    for i in range(1, len(stdin), 2):\n        res += stdin[i]\n    return res"
    },
    {
        "number": 4486,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[1::2]"
    },
    {
        "number": 4486,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    for index, s in enumerate(stdin):\n        if index % 2 == 1:\n            result += s\n    return result"
    },
    {
        "number": 4486,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    str_len = len(stdin)\n    str_list = [stdin[x] for x in range(str_len) if (x+1) % 2 == 1]\n    return \"\".join(str_list)"
    },
    {
        "number": 4486,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[1::2]"
    },
    {
        "number": 4487,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(' ')\n    if a[-1] == b[0] and b[-1] == c[0]:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4487,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    first, second, third = stdin.strip().split(\" \")\n    return \"YES\" if (second[-1] == first[0] and third[0] == second[-1]) else \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    return \"YES\" if a[-1] == b[0] and b[-1] == c[0] else \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    # put your python code here\n    return None"
    },
    {
        "number": 4487,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    a, b, c = stdin.split()\n    return 'YES' if a[-1] == b[0] and b[-1] == c[0] else 'NO'"
    },
    {
        "number": 4487,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(\" \")\n    return \"YES\" if a[-1] == b[0] and b[-1] == c[0] else \"NO\""
    },
    {
        "number": 4487,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4487,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4487,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(' ')\n    return 'YES' if a[-1] == b[0] and b[-1] == c[0] else 'NO'\n\nprint(solution(input()))\n\"\"\"\n\nfrom itertools import zip_longest\n\nA, B, C = (x.strip() for x in input().split())\n\n\ndef"
    },
    {
        "number": 4487,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(' ')\n    return 'YES' if a[-1] == c[0] and b[0] == c[-1] else 'NO'"
    },
    {
        "number": 4488,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return \"GREATER\" if A > B else \"LESS\" if A < B else \"EQUAL\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b = [int(x) for x in stdin.split()]\n    if a==b:\n        return \"EQUAL\"\n    elif a>b:\n        return \"GREATER\"\n    else:\n        return \"LESS\""
    },
    {
        "number": 4488,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print \"GREATER\" if int(stdin.split()[0]) > int(stdin.split()[1]) else \\\n        \"LESS\" if int(stdin.split()[0]) < int(stdin.split()[1]) else \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin)\n    B = int(stdin)\n    if A>B:\n        print(\"GREATER\")\n    elif A<B:\n        print(\"LESS\")\n    elif A==B:\n        print(\"EQUAL\")\n    \n    return \"\"\n\nassert(solution(\"1\") == \"LESS\")\nassert(solution(\"2\") == \"LESS\")\nassert(solution(\"3\") == \"EQUAL\")\nassert(solution(\"4\") == \"GREATER\")\nassert(solution(\"6\") == \"LESS\")\nassert(solution(\"7\") == \"LESS\")\nassert(solution(\"9\") == \"GREATER\")\nassert(solution(\"10\") == \"LESS\")\nassert(solution(\"11\") == \"LESS\")\nassert(solution(\"12\") == \"EQUAL\")\nassert(solution(\"13\") == \"LESS\")\nassert(solution(\"14\") == \"GREATER\")\nassert(solution(\"15\") == \"LESS\")\nassert(solution(\"16\") == \"LESS\")\nassert(solution(\"17\") == \"LESS\")\nassert(solution(\"18\") == \"LESS\")\nassert(solution(\"19\") == \"GREATER\")\nassert(solution(\"20\") == \"LESS\")\nassert(solution(\"21\") == \"LESS\")\nassert(solution(\"22\") == \"EQUAL\")\nassert(solution(\"23\") == \"LESS\")\nassert(solution(\"24\") == \"LESS\")\nassert(solution(\"25\") == \"LESS\")\nassert(solution(\"26\") == \"LESS\")\nassert(solution(\"27\") == \"LESS\")\nassert(solution(\"28\") == \"LESS\")\nassert(solution(\"29\") == \"LESS\")\nassert(solution(\"30\") == \"LESS\")\nassert(solution(\"31\") == \"LESS\")\nassert(solution(\"32\") == \"LESS\")\nassert(solution(\"33\") == \"LESS\")\nassert(solution(\"34\") == \"LESS\")\nassert(solution(\"35\") == \"LESS\")\nassert(solution(\"36\") == \"LESS\")\nassert(solution(\"37\") == \"LESS\")\nassert(solution(\"38\") == \"LESS\")\nassert(solution(\"39\") == \"LESS\")\nassert(solution(\"40\") == \"LESS\")\nassert(solution(\"41\") == \"LESS\")\nassert(solution(\"42\") == \"LESS\")\nassert(solution(\"43\") == \"LESS\")\nassert(solution(\"44\") == \"LESS\")\nassert(solution(\"45\") == \"LESS\")\nassert(solution(\"46\") == \"LESS\")\nassert(solution(\"47\") == \"LESS\")\nassert(solution(\"48\") == \"LESS\")\nassert(solution(\"49\") == \"LESS\")\nassert(solution(\"50\") == \"LESS\")\nassert(solution(\"51\") == \"LESS\")\nassert(solution(\"52\") == \"LESS\")\nassert(solution(\"53\") == \"LESS\")\nassert(solution(\"54\") == \"LESS\")\nassert(solution(\"55\") == \"LESS\")\nassert(solution(\"56\") == \"LESS\")\nassert(solution(\"57\") == \"LESS\")\nassert(solution(\"58\") == \"LESS\")\nassert(solution(\"59\") == \"LESS\")\nassert(solution(\"60\") == \"LESS\")\nassert(solution(\"61\") == \"LESS\")\nassert(solution(\"62\") == \"LESS\")\nassert(solution(\"63\") == \"LESS\")\nassert(solution(\"64\") == \"LESS\")\nassert(solution(\"65\") == \"LESS\")\nassert(solution(\"66\") == \"LESS\")\nassert(solution(\"67\") == \"LESS\")\nassert(solution(\"68\") == \"LESS\")\nassert(solution(\"69\") == \"LESS\")\nassert(solution(\"70\") == \"LESS\")\nassert(solution(\"71\") == \"LESS\")\nassert(solution(\"72\") == \"LESS\")\nassert(solution(\"73\") == \"LESS\")\nassert(solution(\"74\") == \"LESS\")\nassert(solution(\"75\") == \"LESS\")\nassert(solution(\"76\") == \"LESS\")\nassert(solution(\"77\") == \"LESS\")\nassert(solution(\"78\") == \"LESS\")\nassert(solution(\"79\") == \"LESS\")\nassert(solution(\"80\") == \"LESS\")\nassert(solution(\"81\") == \"LESS\")\nassert(solution(\"82\") == \"LESS\")\nassert(solution(\"83\") == \"LESS\")\nassert(solution(\"84\") == \"LESS\")\nassert(solution(\"85\") == \"LESS\")\nassert(solution(\"86\") == \"LESS\")\nassert(solution(\"87\") == \"LESS\")\nassert(solution(\"88\") == \"LESS\")\nassert(solution(\"89\") == \"LESS\")\nassert(solution(\"90\") == \"LESS\")\nassert(solution(\"91\") == \"LESS\")\nassert(solution(\"92\") == \"LESS\")\nassert(solution(\"93\") == \"LESS\")\nassert(solution(\"94\") == \"LESS\")\nassert(solution(\"95\") == \"LESS\")\nassert(solution(\"96\") == \"LESS\")\nassert(solution(\"97\") == \"LESS\")\nassert(solution(\"98\") == \"LESS\")\nassert(solution(\"99\") == \"LESS\")\nassert(solution(\"100\") == \"LESS\")\nassert(solution(\"101\") == \"LESS\")\nassert(solution(\"102\") == \"LESS\")\nassert(solution(\"103\") == \"LESS\")\nassert(solution(\"104\") == \"LESS\")\nassert(solution(\"105\") == \"LESS\")\nassert(solution(\"106\") == \"LESS\")\nassert(solution(\"107\") == \"LESS\")\nassert(solution(\"108\") == \"LESS\")\nassert(solution(\"109\") == \"LESS\")\nassert(solution(\"110\") == \"LESS\")\nassert(solution(\"111\") == \"LESS\")\nassert(solution(\"112\") == \"LESS\")\nassert(solution(\"113\") == \"LESS\")\nassert(solution(\"114\") == \"LESS\")\nassert(solution(\"115\") == \"LESS\")\nassert(solution(\"116\") == \"LESS\")\nassert(solution(\"117\") == \"LESS\")\nassert(solution(\"118\") == \"LESS\")\nassert(solution(\"119\") == \"LESS\")\nassert(solution(\"120\") == \"LESS\")\nassert(solution(\"121\") == \"LESS\")\nassert(solution(\"122\") == \"LESS\")\nassert(solution(\"123\") == \"LESS\")\nassert(solution(\"124\") == \"LESS\")\nassert(solution(\"125\") == \"LESS\")\nassert(solution(\"126\") == \"LESS\")\nassert(solution(\"127\") == \"LESS\")\nassert(solution(\"128\") == \"LESS\")\nassert(solution(\"129\") == \"LESS\")\nassert(solution(\"130\") == \"LESS\")\nassert(solution(\"131\") == \"LESS\")\nassert(solution(\"132\") == \"LESS\")\nassert(solution(\"133\") == \"LESS\")\nassert(solution(\"134\") == \"LESS\")\nassert(solution(\"135\") == \"LESS\")\nassert(solution(\"136\") == \"LESS\")\nassert(solution(\"137\") == \"LESS\")\nassert(solution(\"138\") == \"LESS\")\nassert(solution(\"139\") == \"LESS\")\nassert(solution(\"140\") == \"LESS\")\nassert(solution(\"141\") == \"LESS\")\nassert(solution(\"142\") == \"LESS\")\nassert(solution(\"143\") == \"LESS\")\nassert(solution(\"144\") == \"LESS\")\nassert(solution(\"145\") == \"LESS\")\nassert(solution(\"146\") == \"LESS\")\nassert(solution(\"147\") == \"LESS\")\nassert(solution(\"148\") == \"LESS\")\nassert(solution(\"149\") == \"LESS\")\nassert(solution(\"150\") == \"LESS\")\nassert(solution(\"151\") == \"LESS\")\nassert(solution(\"152\") == \"LESS\")\nassert(solution(\"153\") == \"LESS\")\nassert(solution(\"154\") == \"LESS\")\nassert(solution(\""
    },
    {
        "number": 4488,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split('\\n')[0])\n    b = int(stdin.split('\\n')[1])\n    if a > b:\n        return 'GREATER'\n    elif a < b:\n        return 'LESS'\n    else:\n        return 'EQUAL'"
    },
    {
        "number": 4488,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int,stdin.split())\n    print('LESS' if a<b else 'GREATER' if a>b else 'EQUAL')\n    return ''"
    },
    {
        "number": 4488,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        print \"GREATER\"\n    elif A < B:\n        print \"LESS\"\n    else:\n        print \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    # Read from stdin\n    # Return your answer"
    },
    {
        "number": 4488,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    print(\"GREATER\" if a > b else \"LESS\" if a < b else \"EQUAL\")"
    },
    {
        "number": 4488,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a > b:\n        return \"GREATER\"\n    elif a < b:\n        return \"LESS\"\n    else:\n        return \"EQUAL\""
    },
    {
        "number": 4489,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4489,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    m = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n\n    count = 0\n\n    for i in range(n):\n        if s[i] == t[i]:\n            count += 1\n\n    print(count)"
    },
    {
        "number": 4489,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.strip().split('\\n')[:2]]\n    blue = [stdin.strip() for _ in range(N)]\n    red = [stdin.strip() for _ in range(M)]\n\n    moves = 0\n    for card in blue:\n        if card in red:\n            moves -= 1\n        else:\n            moves += 1\n    return str(moves)"
    },
    {
        "number": 4489,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(num) for num in stdin.split()]\n    print(n * m)\n    return ''"
    },
    {
        "number": 4489,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    blue = stdin.readline().strip().split()\n    red = stdin.readline().strip().split()\n    return str(solution2(N, blue, red))\n\ndef"
    },
    {
        "number": 4489,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takahashi announced the string 'atcoder' on his first card. He earns 1 yen, and then announces 'atcode' on the second card.\n    Takahashi will check every card and decide how much money he can earn on balance.\n    \"\"\"\n    pass"
    },
    {
        "number": 4489,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    Takahashi = int(stdin)\n    N, M = stdin.strip().split(' ')\n    N, M = int(N), int(M)\n    blue, red = [], []\n    for i in range(0, M):\n        blue.append(stdin.strip().split(' ')[i])\n    for i in range(0, N):\n        red.append(stdin.strip().split(' ')[i + M])\n    blue_set, red_set = set(blue), set(red)\n    blue_num, red_num = len(blue_set), len(red_set)\n    if blue_num < red_num:\n        print(Takahashi)\n    else:\n        pass\n\"\"\"\ndef"
    },
    {
        "number": 4489,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    blue, red = 0, 0\n    for line in stdin.split('\\n'):\n        if line == ':':\n            blue = 0\n            red = 0\n        elif line == '-':\n            blue -= 1\n        else:\n            red += 1\n    return str(max(blue, red))"
    },
    {
        "number": 4489,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4489,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"apple:orange:apple:1\\ngrape\\n\")\n    '2'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    blue_cards = [stdin.readline().strip() for _ in range(n)]\n    red_cards = [stdin.readline().strip() for _ in range(int(stdin.readline().strip()))]\n    for red_card in red_cards:\n        if red_card in blue_cards:\n            blue_cards.remove(red_card)\n    return str(len(blue_cards))"
    },
    {
        "number": 4490,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]"
    },
    {
        "number": 4490,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    if b == \"A\":\n        return \"T\"\n    elif b == \"C\":\n        return \"G\"\n    elif b == \"G\":\n        return \"C\"\n    else:\n        return \"A\""
    },
    {
        "number": 4490,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('T', 'A').replace('G', 'C').replace('A', 'T').replace('C', 'G')"
    },
    {
        "number": 4490,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin.replace('A', 'T').replace('C', 'G'))"
    },
    {
        "number": 4490,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    b = stdin.strip()\n    if b == \"A\":\n        return \"T\"\n    elif b == \"C\":\n        return \"G\"\n    elif b == \"G\":\n        return \"C\"\n    elif b == \"T\":\n        return \"A\""
    },
    {
        "number": 4490,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]"
    },
    {
        "number": 4490,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'A' if stdin == 'T' else 'T' if stdin == 'G' else 'C'"
    },
    {
        "number": 4490,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the letter representing the base that bonds with the base b.\"\"\"\n    b = stdin[0]\n    if b == \"A\":\n        return \"T\"\n    elif b == \"C\":\n        return \"G\"\n    elif b == \"G\":\n        return \"C\"\n    elif b == \"T\":\n        return \"A\""
    },
    {
        "number": 4490,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the letter representing the base that bonds with the base b.\n\n    >>> solution('A')\n    'T'\n    >>> solution('G')\n    'C'\n    >>> solution('C')\n    'G'\n    >>> solution('A')\n    'A'\n    \"\"\"\n    b = stdin.strip()\n    if b == 'A':\n        return 'T'\n    elif b == 'C':\n        return 'G'\n    elif b == 'G':\n        return 'C'\n    return 'A'"
    },
    {
        "number": 4490,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    letter = stdin.strip()\n    if letter == 'A':\n        return 'T'\n    elif letter == 'C':\n        return 'G'\n    elif letter == 'G':\n        return 'C'\n    else:\n        return 'A'"
    },
    {
        "number": 4491,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(1, n):\n        dp[i][0] = A[i][0] + dp[i-1][0]\n        dp[0][i] = A[0][i] + dp[0][i-1]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + A[i][j]\n    return dp[n-1][n-1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4491,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_2(stdin))\n\ndef"
    },
    {
        "number": 4491,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_rows, candies = stdin.split('\\n')\n    num_of_rows = int(num_of_rows)\n    candies = list(map(int, candies.split()))\n\n    right = candies[0]\n    down = candies[1]\n    right_down = candies[2]\n    for i in range(3, num_of_rows):\n        right = max(right, candies[i] + candies[i - 1])\n        down = max(down, candies[i] + candies[i - 2])\n        right_down = max(right_down, candies[i] + candies[i - 3])\n    return max(right, down, right_down)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4491,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [\n        [int(x) for x in stdin.readline().split()]\n        for _ in range(N)\n    ]\n\n    dp = [[0] * N for _ in range(N)]\n    for i in range(2, N):\n        for j in range(2, N):\n            dp[i][j] = max(dp[i - 1][j - 1] + A[i][j], dp[i][j - 1] + A[i][j], dp[i - 1][j] + A[i][j])\n    return str(max(max(row) for row in dp))"
    },
    {
        "number": 4491,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4491,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    N = int(line)\n    L = [0] * N\n    for i in range(N):\n        L[i] = [int(x) for x in line.split()]\n\n    A = L[0]\n    for i in range(1, N):\n        A = [A[k] + L[i][k] for k in range(N)]\n\n    print(max(A))\n"
    },
    {
        "number": 4491,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    return solve(n, a)\n\ndef"
    },
    {
        "number": 4491,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split()]\n    candies = [list(map(int, stdin.split())) for _ in range(rows)]\n    right, down = [cols] * rows, [rows] * cols\n    for i in range(rows):\n        for j in range(cols):\n            if candies[i][j] > 0:\n                right[i], down[j] = i, j\n                break\n    right[1], down[1] = 1, 1\n    visited = set()\n    steps = 0\n    while True:\n        if (steps, right[1], down[1]) in visited:\n            return steps\n        visited.add((steps, right[1], down[1]))\n        steps += 1\n        if right[1] == 1:\n            right[1], down[1] = 1, 2\n        elif right[1] == 2 and down[1] == rows:\n            right[1], down[1] = 1, 1\n        elif right[1] == 2 and down[1] == 1:\n            right[1], down[1] = 2, 1\n        else:\n            right[1], down[1] = right[1] + 1, down[1] + 1\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4491,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.rstrip()\n    N = int(N)\n    A = [list(map(int, stdin.rstrip().split())) for _ in range(N)]\n    tot = 0\n    for i in range(1, N - 1):\n        for j in range(1, N - 1):\n            tot += max(A[i - 1][j], A[i][j - 1], A[i][j], A[i][j + 1], A[i + 1][j])\n    return str(tot)"
    },
    {
        "number": 4491,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n3 2 2 4 1\\n1 2 2 2 1\")\n    '14'\n    \"\"\"\n    N = int(stdin.readline())\n    A = [list(map(int, stdin.readline().split())) for _ in range(N)]\n    _, _, m = dp(N, A, (1, 1))\n    return str(m)\n\ndef"
    },
    {
        "number": 4492,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, x = [int(i) for i in stdin.strip().split(\" \")]\n    a = [int(i) for i in stdin.strip().split(\" \")]\n    result = 0\n    for i in range(N):\n        while i < N - 1 and a[i] <= x:\n            a[i], a[i+1] = a[i+1], a[i]\n            i += 1\n    return str(result)"
    },
    {
        "number": 4492,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    # We will maintain a 2D array which will be a boolean matrix.\n    # M[r][c] is true iff there is a box with r rows and c cols.\n    M = [[False for _ in range(0, n)] for _ in range(0, n)]\n\n    # We will keep track of the number of candies for each box\n    # and we'll update M after each operation.\n    candies = [0 for _ in range(0, n)]\n    for i in range(0, n):\n        candies[i] = a[i]\n\n    # We'll maintain a list of boxes that we've eaten so far.\n    # This is a list of sets. Each set corresponds to a box,\n    # and each element of the set is a candy that was eaten in that box.\n    eaten = [set() for _ in range(0, n)]\n\n    # We'll record the number of candies we have to eat in each box.\n    # Each element of the list corresponds to a box, and\n    # each element corresponds to the number of candies we need to eat\n    # in that box.\n    target = [0 for _ in range(0, n)]\n\n    # We'll maintain a list of the number of candies we have to eat in each box.\n    # Each element corresponds to a box, and\n    # each element corresponds to the number of candies we have to eat\n    # in that box.\n    needed = [0 for _ in range(0, n)]\n\n    # Since we have to choose a box with a number of candies <= target,\n    # we can choose any box that doesn't have a candy or has a candy\n    # bigger than the target.\n    for i in range(0, n):\n        if candies[i] > target[i]:\n            M[i][i] = True\n            eaten[i].add(candies[i])\n            target[i] = candies[i]\n\n    # After we've chosen a box, we can either choose another\n    # box that contains a candy in our target, or choose a different\n    # candy.\n    for i in range(0, n):\n        for j in range(0, i):\n            if candies[i] >= candies[j] and M[j][i]:\n                # We have a candy in the target, so we can eat it.\n                # In other words, we can choose to eat candies[j] instead\n                # of candies[i] because we know that if candies[j] is bigger\n                # than candies[i], we can eat candies[j] and otherwise we\n                # can't.\n                eaten[i].add(candies[j])\n                M[i][j] = True\n                needed[j] += candies[j] - candies[i]\n                eaten[i].add(candies[i])\n                target[i] = candies[i]\n\n    # For each box, we can only eat candies in the target and\n    # the number of candies we have to eat in the target is the difference\n    # between the current number of candies in the box and the number of candies\n    # we need to eat in the target.\n    for i in range(0, n):\n        needed[i] += target[i] - candies[i]\n\n    # Now we have to choose a box for each candy.\n    # We can choose any box that doesn't have a candy or has a candy\n    # bigger than the number of candies we have to eat in the target.\n    # Since we know that we can choose any box with a candy <= target,\n    # we can choose any box that doesn't have a candy or has a candy\n    # bigger than the target.\n    for i in range(0, n):\n        for j in range(0, i):\n            if candies[i] > needed[j]:\n                M[j][i] = True\n\n    # If we're on a square (i, j), we can choose the number of candies\n    # that we have to eat in the target to eat candies in the target,\n    # and the number of candies that we have to eat in the target to\n    # eat candies in the target, respectively, is the sum of candies\n    # in the target minus candies in the target.\n    for i in range(0, n):\n        for j in range(0, i):\n            if candies[i] > target[i] and candies[i] > candies[j] and M[j][i]:\n                eaten[i].add(candies[j])\n                eaten[i].add(candies[i] - candies[j])\n                target[i] = candies[i]\n                needed[j] += candies[j] - candies[i]\n\n    # Now we have to calculate the number of operations we have to do.\n    # We calculate the number of operations to achieve a target with\n    # a number of candies less than the target.\n    # If we want to achieve a target with a number of candies less than the target,\n    # we can choose a box with a number of candies less than the target,\n    # and choose the number of candies we need to eat in the target minus\n    # the number of candies we have to eat in the target.\n    # In other words, we can choose to eat candies[j] instead of candies[i]\n    # if candies[j] <= needed[i] - candies[i].\n    # We then choose a number of candies in the target less than the target\n    # and add it to the number of candies we have to eat in the target.\n    # We repeat the process until we reach the target.\n    for i in range(0, n):\n        needed[i] += target[i]\n\n    # We now have to calculate the number of operations we have to do\n    # to achieve a target with a number of candies less than the target.\n    # To do that, we start with a list of the number of candies in the target\n    # and create a list of the number of candies we have to eat.\n    # We create the list of the number of candies we have to eat.\n    # We keep track of the number of candies we have to eat in each box.\n    # We then update the number of candies we have to eat in each box\n    # by adding the candies we have to eat in the target.\n    # After we have eaten candies in the target, we calculate the number\n    # of candies we have to eat in the target.\n    # Now, we have to choose a number of candies in the target less than\n    # the number of candies we have to eat in the target.\n    # We repeat this process until we reach the number of candies in the target.\n    # The number of operations we have to do in this case is the number of candies\n    # we have to eat in the target minus the number of candies we have to eat in the target.\n    # The number of candies we have to eat in the target is the number of candies\n    # in the target minus the number of candies we have to eat in the target.\n    ops = 0\n    for i in range(0, n):\n        ops += target[i] - needed[i]\n\n    return str(ops)\n"
    },
    {
        "number": 4492,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4492,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, x = [int(n) for n in stdin.split()]\n    candies = [int(c) for c in stdin.split()]\n    left = candies[:]\n    for _ in range(N - 1):\n        left.sort()\n        box = candies.pop(0)\n        box += left.pop()\n        candies.append(box)\n        left.pop()\n    return candies"
    },
    {
        "number": 4492,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *l = [int(x) for x in stdin.split()]\n    a = [int(x) for x in l]\n    m = int(stdin.readline())\n    for _ in range(m):\n        i, j = [int(x) - 1 for x in stdin.readline().split()]\n        if i > 0:\n            a[i] -= 1\n        if j < n - 1:\n            a[j + 1] -= 1\n    return str(a.count(0))\n\nassert solution(\"3 3\\n2 2 2\\n\") == \"1\"\nassert solution(\"2 2\\n2 2\\n\") == \"0\"\nassert solution(\"1 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n5 5\\n"
    },
    {
        "number": 4492,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split(' '))\n    a = list(a)\n    A = [0] * n\n    m = 1\n    while m < len(a):\n        A[m] += a[m - 1]\n        m += 1\n    m = 1\n    while m < len(a):\n        if A[m] < m:\n            A[m] = m\n        else:\n            A[m] = m - 1\n        m += 1\n    return '\\n'.join(map(str, A))\n\nassert solution(stdin) == stdout\n"
    },
    {
        "number": 4492,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4492,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4492,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    candy = [0] * N\n\n    for _ in range(M):\n        i, j, x = map(int, stdin.split())\n        candy[i] += x\n        candy[j] -= x\n\n    min_ops = 0\n    curr_ops = 0\n    for i in range(1, N):\n        if candy[i] >= candy[i - 1]:\n            curr_ops += 1\n        else:\n            min_ops += curr_ops\n            curr_ops = 0\n\n    return str(min_ops + curr_ops)"
    },
    {
        "number": 4492,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, candies = map(int, stdin.split())\n    result = 0\n\n    while candies > 0:\n        for i in range(N):\n            if candies >= 2:\n                if i + 1 < N:\n                    result += 2\n                    candies -= 2\n                else:\n                    result += 1\n                    candies -= 1\n\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4493,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if sum(tuple(map(int, stdin.split()))) == 6 else 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4493,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    pass"
    },
    {
        "number": 4493,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if True else \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4493,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    grid = []\n    for _ in range(3):\n        grid.append(stdin.split())\n    total = 0\n    for row in grid:\n        for item in row:\n            total += int(item)\n    if total == 6:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4493,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    c_matrix = [[int(s) for s in line.split()] for line in stdin.splitlines()]\n    if (\n        c_matrix[0][0] + c_matrix[0][1] + c_matrix[0][2] == c_matrix[1][0] + c_matrix[1][1] + c_matrix[1][2]\n        == c_matrix[2][0] + c_matrix[2][1] + c_matrix[2][2]\n    ):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef"
    },
    {
        "number": 4493,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4493,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rows = 3\n    columns = 3\n    c = [list(map(int, stdin.split())) for _ in range(rows)]\n    for i in range(rows):\n        for j in range(columns):\n            if i == j == 0:\n                continue\n            if c[i][j]!= c[0][j] + c[1][j] or c[i][j]!= c[0][0] + c[1][1] or c[i][j]!= c[2][0] + c[2][1] or c[i][j]!= c[0][2] + c[1][2] or c[i][j]!= c[2][2] + c[2][2]:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4493,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 0 1\\n2 1 2\\n1 0 1\\n')\n    'Yes'\n    >>> solution('1 0 1\\n2 1 2\\n1 1 1\\n')\n    'No'\n    \"\"\"\n    c = [stdin.split()]\n    c = [[int(i) for i in l] for l in c]\n    # print(c)\n    if c[0][0] + c[0][1] == c[0][2]:\n        if c[1][0] + c[1][1] == c[1][2]:\n            if c[2][0] + c[2][1] == c[2][2]:\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4493,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if check_correct(stdin) else \"No\")\n\ndef"
    },
    {
        "number": 4494,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s == \"ABC\":\n        return \"ARC\"\n    elif s == \"ARC\":\n        return \"ABC\"\n    else:\n        return \"\""
    },
    {
        "number": 4494,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.startswith('ABC'):\n        return 'ARC'\n    return 'ABC'"
    },
    {
        "number": 4494,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s.startswith('ARC'):\n        return 'ARC'\n    else:\n        return 'ABC'"
    },
    {
        "number": 4494,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4494,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.startswith(\"ARC\"):\n        return \"ABC\"\n    else:\n        return \"ARC\""
    },
    {
        "number": 4494,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s == 'ARC':\n        return 'ARC'\n    return 'ABC'"
    },
    {
        "number": 4494,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.lower() == \"abc\":\n        return \"ARC\"\n    else:\n        return \"ABC\""
    },
    {
        "number": 4494,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == 'A':\n        return 'ARC'\n    return 'ABC'"
    },
    {
        "number": 4494,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4494,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    abc, arc = 'ABC', 'ARC'\n    abc, arc = arc, abc\n    return stdin\n\nassert(solution('ABC') == 'ARC')\nassert(solution('ARC') == 'ABC')\n\"\"\"\n\ndef"
    },
    {
        "number": 4495,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.split()]\n    return str(sum(1 for i in range(a, b + 1) if i % x == 0))"
    },
    {
        "number": 4495,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split()]\n    return str(len([i for i in range(a, b + 1) if i % x == 0]))"
    },
    {
        "number": 4495,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return str(sum(i for i in range(a, b+1) if i % x == 0))"
    },
    {
        "number": 4495,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4495,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4495,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.strip().split(' '))\n    return str(len([i for i in range(a, b + 1) if i % x == 0]))"
    },
    {
        "number": 4495,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    # i = 0\n    # while i < b - a + 1:\n    #     if i % x == 0:\n    #         print(i + a)\n    #     i += 1\n    # print(b - a + 1)\n    return(str(b - a + 1))\n\nprint(solution(input()))"
    },
    {
        "number": 4495,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4495,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return str(len([i for i in range(a, b + 1) if i % x == 0]))"
    },
    {
        "number": 4495,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.strip().split(' '))\n    return str(sum(1 for i in range(a, b + 1) if i % x == 0))"
    },
    {
        "number": 4496,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 22:\n        print(\"Christmas Eve Eve Eve\")\n    elif D == 23:\n        print(\"Christmas Eve Eve\")\n    elif D == 24:\n        print(\"Christmas Eve Eve Eve\")\n    elif D == 25:\n        print(\"Christmas\")\n    else:\n        return \"Invalid Input\"\n    return \"\""
    },
    {
        "number": 4496,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    elif d == 22:\n        return \"Christmas Eve Eve Eve\""
    },
    {
        "number": 4496,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(' ')\n    return 'Christmas' if int(data[0]) == 25 else 'Eve' if int(data[0]) == 24 else 'Eve Eve' if int(data[0]) == 23 else 'Eve Eve Eve'\n"
    },
    {
        "number": 4496,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Christmas Eve Eve Eve\""
    },
    {
        "number": 4496,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\""
    },
    {
        "number": 4496,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip()\n    d = int(data)\n    if d == 22:\n        return \"Christmas Eve Eve\"\n    if d == 21:\n        return \"Christmas Eve\"\n    if d == 20:\n        return \"Christmas Eve Eve Eve\"\n    if d == 19:\n        return \"Christmas Eve Eve Eve\"\n    if d == 18:\n        return \"Christmas Eve Eve Eve Eve\"\n    if d == 17:\n        return \"Christmas Eve Eve Eve Eve Eve\"\n    if d == 16:\n        return \"Christmas Eve Eve Eve Eve Eve Eve\"\n    if d == 15:\n        return \"Christmas Eve\"\n    if d == 14:\n        return \"Christmas Eve Eve\"\n    if d == 13:\n        return \"Christmas Eve Eve Eve\"\n    if d == 12:\n        return \"Christmas\"\n    if d == 11:\n        return \"Christmas Eve\"\n    if d == 10:\n        return \"Christmas Eve Eve\"\n    if d == 9:\n        return \"Christmas Eve Eve Eve\"\n    if d == 8:\n        return \"Christmas Eve Eve Eve Eve\"\n    if d == 7:\n        return \"Christmas Eve Eve Eve Eve Eve\"\n    if d == 6:\n        return \"Christmas Eve\"\n    if d == 5:\n        return \"Christmas Eve Eve\"\n    if d == 4:\n        return \"Christmas Eve Eve Eve\"\n    if d == 3:\n        return \"Christmas Eve Eve Eve Eve\"\n    if d == 2:\n        return \"Christmas Eve Eve Eve Eve Eve\"\n    if d == 1:\n        return \"Christmas Eve\"\n    if d == 0:\n        return \"Christmas Eve Eve\""
    },
    {
        "number": 4496,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return 'Christmas'\n    elif d == 24:\n        return 'Christmas Eve'\n    elif d == 23:\n        return 'Christmas Eve Eve'\n    else:\n        return 'Christmas Eve Eve Eve'"
    },
    {
        "number": 4496,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin.strip())\n    if d == 22 or d == 23 or d == 24:\n        return 'Christmas Eve'\n    if d == 25:\n        return 'Christmas'"
    },
    {
        "number": 4496,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    day = int(stdin)\n    if day == 25:\n        return \"Christmas\"\n    elif day == 24:\n        return \"Christmas Eve\"\n    elif day == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Not Christmas\""
    },
    {
        "number": 4496,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return \"Christmas\"\n    if d == 24:\n        return \"Christmas Eve\"\n    if d == 22:\n        return \"Christmas Eve Eve\"\n    if d == 21:\n        return \"Christmas Eve Eve Eve\"\n    if d == 19:\n        return \"New Year's Eve\"\n    if d == 18:\n        return \"New Year's Eve Eve\"\n    if d == 17:\n        return \"New Year's Eve Eve Eve\"\n    if d == 16:\n        return \"New Year's Eve Eve Eve Eve\"\n    if d == 14:\n        return \"New Year's Eve\"\n    if d == 13:\n        return \"New Year's Eve Eve\"\n    if d == 12:\n        return \"New Year's Eve Eve Eve\"\n    if d == 11:\n        return \"New Year's Eve Eve Eve Eve\"\n    if d == 9:\n        return \"New Year's Eve\"\n    if d == 8:\n        return \"New Year's Eve Eve\"\n    if d == 7:\n        return \"New Year's Eve Eve Eve\"\n    if d == 5:\n        return \"New Year's Eve Eve Eve Eve\"\n    if d == 3:\n        return \"New Year's Eve\"\n    if d == 2:\n        return \"New Year's Eve Eve\"\n    if d == 1:\n        return \"New Year's Eve Eve Eve\"\n    if d == 0:\n        return \"New Year's Eve\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4497,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisible = 0\n    for i in range(1, n + 1):\n        divisible_by_2 = i % 2 == 0\n        divisible_by_2_count = i // 2\n        if divisible_by_2_count > divisible:\n            divisible = divisible_by_2_count\n    return str(divisible)"
    },
    {
        "number": 4497,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = None\n    for i in range(n):\n        if n % 2 == 0:\n            ans = 2\n            break\n        n += 1\n    if ans is None:\n        ans = 1\n    return str(ans)\n\nassert(solution(input()) == input())\n"
    },
    {
        "number": 4497,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    ans = 0\n    for n in range(1, N+1):\n        if n % 2 == 0:\n            ans += 1\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 4497,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n - 1 - n % 2)"
    },
    {
        "number": 4497,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    maximum = 0\n    answer = 0\n    for i in range(1, N+1):\n        if i % 2 == 0:\n            maximum = i\n            continue\n        number = i\n        count = 0\n        while number % 2 == 0:\n            number //= 2\n            count += 1\n        if count > maximum:\n            maximum = count\n            answer = i\n    return str(answer)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4497,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    max_count = 0\n    max_num = 0\n    for i in range(1, n + 1):\n        while i % 2 == 0:\n            i /= 2\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_num = i\n        count = 0\n    return str(max_num)"
    },
    {
        "number": 4497,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4497,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4497,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = 1\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n -= 1\n            p += 1\n    return str(p)"
    },
    {
        "number": 4498,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a < d or b < d:\n        return 'No'\n    if c <= d:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4498,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.strip().split()]\n    if d >= abs(a - c):\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4498,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, a, b, c = [int(i) for i in stdin.split(' ')]\n    return 'Yes' if a <= d and b <= d and c <= d else 'No'"
    },
    {
        "number": 4498,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdin"
    },
    {
        "number": 4498,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if a == c and a + d <= 100 and a > 0 and b > 0 and c > 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4498,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    if b + d < c or c + d < b or a + d < c:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4498,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4498,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(\" \")]\n    if a + d <= c:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if abs(a - c) <= d:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(x) for x in stdin.split())\n    if a + d <= c or b + d <= c:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 4499,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2, s_3 = stdin.split()\n    print(\"\".join([i[0] for i in [s_1.upper(), s_2.upper(), s_3.upper()]]))\n    # return \"\".join([i[0] for i in [s_1.upper(), s_2.upper(), s_3.upper()]])"
    },
    {
        "number": 4499,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.split(\" \")\n    print(s1[0] + s2[0] + s3[0])"
    },
    {
        "number": 4499,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    print(s[0][0]+s[1][0]+s[2][0])"
    },
    {
        "number": 4499,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip().upper()[0] + ''.join(stdin.strip().split(' '))[1:]"
    },
    {
        "number": 4499,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4499,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4499,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4499,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.split(\" \")\n    print(\"\".join(s[0] for s in (s1.upper(), s2.upper(), s3.upper())))"
    },
    {
        "number": 4499,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\" \")\n    for i in range(len(s)):\n        s[i] = s[i].strip().upper()\n    return \"\".join(s[0]) + \"\".join(s[1]) + \"\".join(s[2])\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4499,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(input()[0] + input()[0] + input()[0])"
    },
    {
        "number": 4500,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(s) for s in stdin.split(' ')]\n\n    if (A + B) > C:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4500,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split(\" \"))\n    return \"Yes\" if A + B >= C else \"No\"\n\nassert(solution(input()) == solution(input()))\n"
    },
    {
        "number": 4500,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split()]\n    if C < A + B:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4500,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A >= C and B >= C:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split()]\n    if C > (A + B):\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 4500,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    return 'Yes' if int(A) + int(B) >= int(C) else 'No'\n\n\ndef"
    },
    {
        "number": 4500,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4500,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split(' ')))\n    return 'Yes' if A + B >= C else 'No'\n\nprint(solution(stdin))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4500,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if C > 1000 or A + B > 500:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4500,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin.split()[1]) >= int(stdin.split()[2]) else 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4501,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4501,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_01(stdin))\n\ndef"
    },
    {
        "number": 4501,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n\n    n, a = [int(x) for x in stdin[0].split()]\n    x = [int(x) for x in stdin[1].split()]\n\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    # dp[i][j] is the number of ways to select the first i elements of the j-th element of the total array\n    for i in range(1, n + 1):\n        # For the first element, we can select all values up to the max value in x\n        for j in range(1, n + 1):\n            dp[i][j] += dp[i][j - 1]\n\n            # For the second to N elements, we can select at most j - 1 values from x\n            if j >= i:\n                dp[i][j] += dp[i - 1][j - 1]\n\n                # For the last element, we can select at most j - 1 values from x\n                if i == n:\n                    dp[i][j] += 1\n\n    # Count the number of ways to select the last element in each of the j elements\n    count = 0\n    for j in range(1, n + 1):\n        count += dp[n][j]\n\n    return count"
    },
    {
        "number": 4501,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A = list(map(int, stdin.split()))\n    cards = list(map(int, stdin.split()))\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if A - (cards[i] + cards[j]) / 2 == 0:\n                count += 1\n    return str(count)\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    testcases = stdin.split('\\n')\n    for testcase in testcases:\n        N, A = map(int, testcase.split())\n        numbers = list(map(int, testcase.split()))\n        numbers.sort()\n        count = 0\n        for i in range(N):\n            count += (A - numbers[i]) * (N - i)\n        print(count)"
    },
    {
        "number": 4501,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Split the inputs into three parts\n    N, A = tuple(stdin.strip().split(\" \"))\n    N = int(N)\n    A = int(A)\n\n    # Define the solution function\n    def _solution(N, A):\n        \"\"\"\n        This function is used to find the number of ways to select cards such that the average of the written integers is exactly A.\n        \"\"\"\n        if N == 0:\n            return 0\n        if A == 0:\n            return 1\n        if A > N:\n            return 0\n        # Solution for choosing at most N cards from x_1,..., x_N\n        return _solution(N - 1, A) + _solution(N - 1, A - 1) + _solution(N - 1, A - 2) + _solution(N - 1, A - 3)\n\n    # Return the solution\n    return str(_solution(N, A))\n"
    },
    {
        "number": 4501,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    result = 0\n\n    for i in range(N):\n        for j in range(i+1, N):\n            if x[j] - x[i] == A:\n                result += 1\n            elif x[j] - x[i] > A:\n                break\n\n    return str(result)"
    },
    {
        "number": 4501,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Remove pass and write your code below"
    },
    {
        "number": 4501,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A = [int(x) for x in stdin.split()]\n    if 1 <= N <= 16 and 1 <= A <= 50:\n        return str(factorial(N) // (factorial(N - A) * factorial(A)))\n    return \"There is no solution\"\n\nprint(solution(stdin.read().strip()))\n\"\"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number_of_cards: int = int(stdin.split(' ')[0])\n    average_of_numbers: int = int(stdin.split(' ')[1])\n    card_numbers: list[int] = list(map(int, stdin.split(' ')[2:]))\n\n    number_of_ways: int = 0\n\n    for i in range(1, number_of_cards + 1):\n        for j in range(1, i + 1):\n            if average_of_numbers == (sum(card_numbers[:i]) / i):\n                number_of_ways += 1\n\n    return str(number_of_ways)\n\ndef"
    },
    {
        "number": 4502,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(i) for i in stdin.readline().strip().split(\" \")]\n    step = 0\n    result = []\n    while step < n:\n        result.append(arr[n - step - 1])\n        if step % 2 == 0:\n            result.append(arr[-1])\n        arr.reverse()\n        step += 1\n    return \" \".join([str(i) for i in result])"
    },
    {
        "number": 4502,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    b = []\n    for _ in range(n):\n        b.append(a[n - 1])\n        b.append(a[n - 1])\n        a = a[:n - 1]\n        a.reverse()\n    return \" \".join(map(str, b))"
    },
    {
        "number": 4502,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    seq = [int(item) for item in stdin[1].split(' ')]\n    seq = seq + [0] * (n - len(seq))\n    seq = list(reversed(seq))\n    return''.join([str(item) for item in seq])\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4502,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sequence = list(map(int, stdin.readline().split()))\n    b = []\n\n    for i in range(n):\n        b.append(sequence[n - i - 1])\n    b.reverse()\n\n    for j in range(n):\n        print(b[j], end=\" \")\n    print()\n"
    },
    {
        "number": 4502,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline().rstrip()\n    a = list(map(int, stdin.readline().rstrip().split(' ')))\n    b = []\n    for i in range(len(a)):\n        b.append(a[i])\n        b.reverse()\n    return''.join(map(str, b))\n\nassert(solution('''4\n1 2 3 4''') == '4 2 1 3')\nassert(solution('''4\n4 4 4 4''') == '4 4 4 4')\nassert(solution('''5\n3 2 4 1 5''') == '5 3 2 4')\nassert(solution('''10\n6 6 6 6 6 6 6 6 6''') == '6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6"
    },
    {
        "number": 4502,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()[:-1]\n    sequence = list(map(int, stdin.readline().split()))\n    sequence.reverse()\n    for i in range(int(n)):\n        sequence.append(sequence.pop(0))\n        sequence.reverse()\n    return''.join(str(x) for x in sequence)"
    },
    {
        "number": 4502,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n\n    res = [0] * n\n\n    # Reverse the array\n    for i in range(n - 1, -1, -1):\n        res[i] = arr[i]\n\n    # Reverse the array\n    for i in range(n - 1, -1, -1):\n        res[i] = arr[i]\n\n    return \" \".join([str(x) for x in res])"
    },
    {
        "number": 4502,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(num) for num in stdin.strip().split(' ')]\n    b = []\n    for i in range(n):\n        b.append(a[n - i - 1])\n    return''.join(str(num) for num in b)"
    },
    {
        "number": 4502,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, seq = stdin.strip().split(\" \")\n    n, seq = int(n), [int(i) for i in seq.split(\" \")]\n    for _ in range(n):\n        seq.append(0)\n        seq.reverse()\n    return \" \".join([str(i) for i in seq])\n\n\ndef"
    },
    {
        "number": 4502,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(\" \")]\n    b = []\n\n    for i in range(n):\n        if i == 0:\n            b.append(a[n - 1])\n        elif i == n - 1:\n            b.append(a[0])\n        else:\n            b.append(a[n - 1 - i])\n            b.append(a[i])\n\n    return \" \".join([str(x) for x in b])"
    },
    {
        "number": 4503,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1\\n1\\n')\n    'Yes'\n    >>> solution('1\\n2\\n')\n    'No'\n    \"\"\"\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    a = [int(x) for x in stdin.strip().split(' ')]\n    if n < 1:\n        return \"No\"\n    if n <= k:\n        return \"Yes\"\n\n    curr_health = a[0]\n    curr_moves = 0\n    used_moves = set()\n    for move in a[1:]:\n        if curr_moves == 0 or (curr_moves, move) in used_moves:\n            return \"No\"\n        used_moves.add((curr_moves, move))\n        curr_health -= move\n        if curr_health < 0:\n            curr_health = 0\n        curr_moves += 1\n    return \"Yes\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4503,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    health, moves = map(int, stdin.split())\n    moves = map(int, stdin.split()[1:])\n    return \"Yes\" if sum(moves) >= health else \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4503,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    a = stdin[2]\n    a = a.split()\n    a = [int(a_i) for a_i in a]\n    a.sort()\n    a.reverse()\n    if (a[0] < n/2):\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 4503,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    \n    for _ in range(N):\n        health, move = map(int, stdin.split())\n        A = [health - a for a in A]\n    \n    return \"Yes\" if min(A) < 0 else \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    monster_health = h\n    moves = [list(map(int, stdin.split())) for _ in range(n)]\n\n    monster_health = h\n    result = \"\"\n\n    for move in moves:\n        if monster_health < 1:\n            result = \"No\"\n            break\n\n        monster_health -= move[0]\n        if monster_health < 1:\n            monster_health = 0\n\n        monster_health += move[1]\n\n    if result == \"\":\n        result = \"Yes\"\n    return result"
    },
    {
        "number": 4503,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    monster_health, moves = map(int, stdin.split())\n    moves_and_healt = list(map(int, stdin.split()))\n    return 'Yes' if solve(monster_health, moves, moves_and_healt) else 'No'\n\n\ndef"
    },
    {
        "number": 4503,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    health, moves = map(int, stdin.strip().split(\" \"))\n    moveset = list(map(int, stdin.strip().split(\" \")))\n    health = health - sum(moveset)\n    if health <= 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4503,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4504,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans = stdin[-1]\n    for i in range(len(stdin) - 2, -1, -1):\n        if stdin[i] + stdin[i + 1] == 'aa':\n            ans = stdin[i + 1] + ans\n    return ans"
    },
    {
        "number": 4504,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if length % 2 == 0:\n        return length\n\n    for i in range(length, 1, -1):\n        if stdin[i - 1] == stdin[length - i]:\n            return i\n\nprint(solution(input()))"
    },
    {
        "number": 4504,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abaababaab\")\n    6\n    \"\"\"\n    S = stdin[0]\n    n = len(S)\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            if S[i:j + 1].count(\"a\") % 2 == 0:\n                len_tmp = j - i + 1\n                if len_tmp > max_len:\n                    max_len = len_tmp\n    return max_len\n"
    },
    {
        "number": 4504,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    def check_even_string(s: str) -> bool:\n        return not s or s[-1] == s[-2]\n\n    def find_longest(remaining: int) -> int:\n        # This is an optimization, since if we know that all the remaining characters\n        # are even, we can cut the end off and check the remaining length, which is\n        # already less than or equal to remaining.\n        if remaining == 0:\n            return 0\n        remaining -= 1\n\n        result = 0\n        for i in range(1, N - remaining + 1):\n            if check_even_string(s[-i:]):\n                result = max(result, find_longest(remaining - i) + i)\n        return result\n\n    if check_even_string(stdin):\n        print(N)\n        return\n\n    s = stdin\n    print(find_longest(N - 1))\n"
    },
    {
        "number": 4504,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the length of the longest even string that can be obtained by deleting\n    one or more characters from the end of the string.\n    \"\"\"\n    # Get the string S\n    S = stdin.strip()\n    # Is the string even?\n    if len(S) % 2 == 0:\n        # We will delete an even number of characters\n        length = len(S) // 2\n        return length\n    else:\n        # We will delete an odd number of characters\n        return len(S)"
    },
    {
        "number": 4504,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_string: str = stdin.strip()\n    if not input_string:\n        return \"\"\n\n    # We will iterate over the input string and keep track of the length of the even\n    # substring as we go along.\n    even_length: int = 0\n\n    for i in range(0, len(input_string)):\n        if input_string[i] == input_string[i - 1]:\n            even_length += 1\n        else:\n            break\n\n    return even_length\n"
    },
    {
        "number": 4504,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[:-1]\n    n = len(S)\n    for i in range(n):\n        if S[i] == S[n-1-i]:\n            return n - i\n    return 0"
    },
    {
        "number": 4504,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin.strip()\n    for i in range(len(s) - 1, -1, -1):\n        if s[i].lower() == s[i].lower():\n            print(len(s) - i)\n            break\n    else:\n        print(0)"
    },
    {
        "number": 4504,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[::2].count('a') == len(s) // 2:\n        return len(s)\n    return len(s[:-s[::-2].index('a') - 1:])"
    },
    {
        "number": 4504,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) % 2!= 0:\n        return \"\"\n    for i in range(len(s) - 1, 0, -1):\n        if s[i] == s[i - 1]:\n            return s[:i - 1]\n    return s\n"
    },
    {
        "number": 4505,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if len(stdin)!= 3:\n        return \"Error\"\n\n    if stdin.find(\"b\")!= -1 or stdin.find(\"c\")!= -1 or stdin.find(\"a\")!= -1:\n        return \"No\"\n\n    return \"Yes\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4505,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[1] == stdin[2]:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(' ')\n    if a == c or b == c or a == b:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 4505,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return \"Yes\" if a string can be obtained from another by swapping its first and second characters. Otherwise, return \"No\".\n    >>> solution(\"bac\")\n    'Yes'\n    >>> solution(\"bacb\")\n    'No'\n    >>> solution(\"baab\")\n    'Yes'\n    \"\"\"\n    # >>> test.assert_equals(solution(\"bac\"), \"Yes\")\n    # >>> test.assert_equals(solution(\"bacb\"), \"No\")\n    # >>> test.assert_equals(solution(\"baab\"), \"Yes\")\n    # >>> test.assert_equals(solution(\"baabb\"), \"No\")\n    # >>> test.assert_equals(solution(\"baabb\"), \"Yes\")\n    # >>> test.assert_equals(solution(\"baaabb\"), \"No\")\n    # >>> test.assert_equals(solution(\"baaabbb\"), \"Yes\")\n    # >>> test.assert_equals(solution(\"babb\"), \"No\")\n    # >>> test.assert_equals(solution(\"babbb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaab\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaabb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaabb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbb\"), \"Yes\")\n    # >>> test.assert_equals(solution(\"bbaaabbbba\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbab\"), \"Yes\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaa\"), \"Yes\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbba\"), \"Yes\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaa\"), \"Yes\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaab\"), \"Yes\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaabbb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaabbb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaabbb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaabbb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaabbbb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaabbb\"), \"Yes\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaabbb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaabbb\"), \"Yes\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaabbbb\"), \"Yes\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaabbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaabbbbb\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbaab\"), \"Yes\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbaaba\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaab\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaaa\"), \"No\")\n    # >>> test.assert_equals(solution(\"bbaaabbbbbaaabbbbbaaaabbbbbbaaa\"), \""
    },
    {
        "number": 4505,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4505,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count(\"a\")!= 1 or stdin.count(\"b\")!= 1 or stdin.count(\"c\")!= 1:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    chars = stdin.strip().split(\" \")\n    first_char = chars[0]\n    second_char = chars[1]\n    third_char = chars[2]\n    if first_char!= second_char and second_char!= third_char:\n        return \"Yes\"\n    elif first_char == second_char and second_char == third_char:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(str, stdin.split(' '))\n    return \"Yes\" if sorted([a, b, c]) == sorted([c, b, a]) else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4505,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if 'abc' in stdin[::2] else 'No'"
    },
    {
        "number": 4505,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('bac')\n    'Yes'\n    >>> solution('abc')\n    'No'\n    >>> solution('aac')\n    'Yes'\n    >>> solution('baa')\n    'Yes'\n    >>> solution('cab')\n    'Yes'\n    >>> solution('bca')\n    'Yes'\n    '''\n    # Your code here\n    a, b, c = stdin.split('/')\n    return 'Yes' if a == b == c else 'No'"
    },
    {
        "number": 4506,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    f = lambda l, r: sum(a[l-1:r] * b[l-1:r])\n    return str(sorted(b, key=f, reverse=True)[0] % 1000000007)"
    },
    {
        "number": 4506,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    modulo = int(998244353)\n    a.sort()\n    b.sort()\n    res = 0\n    for i in range(n):\n        res += (a[i] * b[i])\n    return str(res % modulo)"
    },
    {
        "number": 4506,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    for i in range(len(a)):\n        b[a[i] - 1] = i + 1\n    return str(sum(a[i] * b[i] for i in range(len(a))))\n\n\nassert(solution('''5\n1 8 7 2 4\n9 7 2 9 3\n''') == '646')\nassert(solution('''1\n1000000\n1000000\n''') == '757402647')\nassert(solution('''2\n1 3\n4 2\n''') == '20')\n\nprint(solution('''10\n12345678910111213141516171819202122232425262728293031\n'''))\nprint(solution('''3\n1 4 2\n1 2 3\n'''))\n"
    },
    {
        "number": 4506,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    result = 0\n    for i in range(n):\n        result += a[i] * b[i]\n    print(result)\n"
    },
    {
        "number": 4506,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4506,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n    b = list(map(int, stdin.readline().strip().split(\" \")))\n    min_sum = 0\n    mod = int(998244353)\n    for i in range(n):\n        min_sum += a[i] * b[i]\n    print(min_sum % mod)\n    return \"\""
    },
    {
        "number": 4506,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [x for x in stdin.split('\\n')]\n    n = int(inputs[0])\n    a = inputs[1].split()\n    b = inputs[2].split()\n    return str((int(sum([int(a[i])*int(b[i]) for i in range(n)])) % 1000000007))"
    },
    {
        "number": 4506,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n\n    sum_modulo = 0\n    for i in range(n):\n        sum_modulo += a[i] * b[i]\n\n    return str(sum_modulo % 10003)\n\ndef"
    },
    {
        "number": 4506,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_n = int(stdin.readline())\n    a = [int(num) for num in stdin.readline().split()]\n    b = [int(num) for num in stdin.readline().split()]\n    print(sum([(a[i]*b[i]) for i in range(input_n)]))"
    },
    {
        "number": 4506,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    total = sum(a * b % 1_000_000_007)\n    return str(total)\n"
    },
    {
        "number": 4507,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4507,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ntry:\n    _input = stdin.read().strip().split('\\n')\nexcept Exception as _:\n   ...\n"
    },
    {
        "number": 4507,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    best_val = sys.maxsize\n    i = 0\n    while i < n:\n        curr_val = 0\n        offer_list = []\n        offer_set = set()\n        offer_dict = {}\n        while i < n and a[i] <= 2 * k:\n            offer_list.append(a[i])\n            offer_set.add(a[i])\n            offer_dict[a[i]] = i\n            i += 1\n        offer_list.sort()\n        offer_list.reverse()\n        i = 0\n        while i < len(offer_list) and k > 0:\n            offer = offer_list[i]\n            if offer not in offer_set:\n                if offer > k:\n                    break\n                k -= offer\n                curr_val += offer\n            else:\n                j = offer_dict[offer]\n                if j < len(offer_list) - 1:\n                    if offer_list[j + 1] > k:\n                        break\n                    k -= offer_list[j + 1]\n                    offer_list[j + 1] = 0\n                    curr_val += offer_list[j + 1]\n                    i += 1\n                else:\n                    i += 1\n        best_val = min(best_val, curr_val)\n\n    return best_val\n"
    },
    {
        "number": 4507,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.readline().split()))\n    costs = list(map(int, stdin.readline().split()))\n    special_offers = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\n    shovels = set()\n    shovels.add(tuple(costs))\n    min_cost = float(\"inf\")\n\n    for offer in special_offers:\n        left, right = offer\n        left_costs = sorted(costs[:left])[:right]\n        right_costs = sorted(costs[left:])[:right]\n        cost = sum(left_costs) + sum(right_costs)\n        if cost < min_cost:\n            min_cost = cost\n        shovels.add(tuple(left_costs + right_costs))\n\n    for i in range(len(costs), k):\n        cost = costs[i-1]\n        shovels.add(tuple([cost] * k))\n\n    shovels = sorted(shovels)\n    for i in range(k):\n        print(shovels[i][i])\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4507,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    shovels, offers, k = [int(n) for n in stdin.split(\" \")]\n    shovels_costs = [int(n) for n in stdin.split(\" \")]\n\n    for _ in range(offers):\n        i, j = [int(n) for n in stdin.split(\" \")]\n        shovels_costs[i] = min(shovels_costs[i], j)\n\n    return str(shovels * min(shovels_costs))"
    },
    {
        "number": 4507,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    shovels = list(map(int, stdin.split()))\n    offers = [tuple(map(int, stdin.split())) for _ in range(m)]\n    shovels.sort()\n    offers.sort(key=lambda offer: offer[1])\n    offers = [offer for offer in offers if offer[1] <= n]\n    offers = [offer for offer in offers if offer[0] <= k]\n    shovels = [shovels[i] for i in range(len(shovels)) if i + 1 in set(offer[0] for offer in offers)]\n    shovels.sort()\n    shovels = shovels[:k]\n    result = sum(shovels)\n    return str(result)\n\nassert(solution(stdin) == stdout)"
    },
    {
        "number": 4507,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    shovels = list(map(int, stdin.split()))\n    shovels += list(map(int, stdin.split()))\n    shovels += list(map(int, stdin.split()))\n    shovels += list(map(int, stdin.split()))\n    shovels += list(map(int, stdin.split()))\n    print(solution(n, m, k, shovels))\n\ndef"
    },
    {
        "number": 4507,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = list(map(int, stdin.split()))\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n\n    result = 0\n    for _ in range(m):\n        x, y = list(map(int, stdin.split()))\n        result = max(result, a[x] + min(b[y - 1:y + 1]))\n    return str(result)\n"
    },
    {
        "number": 4507,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, n, m = list(map(int, stdin.split()))\n    shovels = list(map(int, stdin.split()))\n    offers = [tuple(map(int, stdin.split())) for _ in range(m)]\n    costs = [0] * n\n    for i in range(n):\n        costs[i] = shovels[i]\n        for offer in offers:\n            if i + offer[0] <= n:\n                if offer[1] > costs[i]:\n                    costs[i + offer[0]] = offer[1]\n\n    return min(costs[k - 1:] + [0])\n\nassert solution(\n    \"\"\"7 4 5\n2 5 4 2 6 3 1\n2 1\n6 5\n2 1\n3 1\n\"\"\") == \"7\"\nassert solution(\n    \"\"\"9 4 8\n6 8 5 1 8 1 1 2 1\n9 2\n8 4\n5 3\n9 7\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \"17\"\nassert solution(\n    \"\"\"5 1 4\n2 5 7 4 6\n5 4\n\"\"\") == \""
    },
    {
        "number": 4507,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_advanced(stdin))\n\n\ndef"
    },
    {
        "number": 4508,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = []\n    for i in range(n - 1):\n        edges.append(tuple(map(int, stdin.readline().strip().split())))\n    \n    pass"
    },
    {
        "number": 4508,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4508,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(start: int, finish: int) -> int:\n        if not visited[start]:\n            visited[start] = 1\n            if start == finish:\n                return 0\n            return min(dfs(next, finish) for next in graph[start]) + 1\n\n    n = int(stdin)\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    visited = [0] * n\n    return str(dfs(0, n - 1) - 1)\n\nassert(solution(\n'''7''') == '1')\n\nassert(solution(\n'''7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7''') == '2')\n\nassert(solution(\n'''7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7''') == '0')\n\nassert(solution(\n'''10\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n2 8\n3 9\n3 10''') == '3')\n\nassert(solution(\n'''10\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n2 8\n3 9\n3 10\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10''') == '0')\n\nassert(solution(\n'''10\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n2 3\n2 4\n2 5\n2 6\n2 7\n2 8\n2 9\n2 10\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10''') == '1')\n\nassert(solution(\n'''100\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n2 11\n2 12\n2 13\n2 14\n2 15\n2 16\n2 17\n2 18\n2 19\n2 20\n2 21\n2 22\n2 23\n2 24\n2 25\n2 26\n2 27\n2 28\n2 29\n2 30\n2 31\n2 32\n2 33\n2 34\n2 35\n2 36\n2 37\n2 38\n2 39\n2 40\n2 41\n2 42\n2 43\n2 44\n2 45\n2 46\n2 47\n2 48\n2 49\n2 50\n2 51\n2 52\n2 53\n2 54\n2 55\n2 56\n2 57\n2 58\n2 59\n2 60\n2 61\n2 62\n2 63\n2 64\n2 65\n2 66\n2 67\n2 68\n2 69\n2 70\n2 71\n2 72\n2 73\n2 74\n2 75\n2 76\n2 77\n2 78\n2 79\n2 80\n2 81\n2 82\n2 83\n2 84\n2 85\n2 86\n2 87\n2 88\n2 89\n2 90\n2 91\n2 92\n2 93\n2 94\n2 95\n2 96\n2 97\n2 98\n2 99\n2 100\n3 101\n3 102\n3 103\n3 104\n3 105\n3 106\n3 107\n3 108\n3 109\n3 110\n3 111\n3 112\n3 113\n3 114\n3 115\n3 116\n3 117\n3 118\n3 119\n3 120\n3 121\n3 122\n3 123\n3 124\n3 125\n3 126\n3 127\n3 128\n3 129\n3 130\n3 131\n3 132\n3 133\n3 134\n3 135\n3 136\n3 137\n3 138\n3 139\n3 140\n3 141\n3 142\n3 143\n3 144\n3 145\n3 146\n3 147\n3 148\n3 149\n3 150\n3 151\n3 152\n3 153\n3 154\n3 155\n3 156\n3 157\n3 158\n3 159\n3 160\n3 161\n3 162\n3 163\n3 164\n3 165\n3 166\n3 167\n3 168\n3 169\n3 170\n3 171\n3 172\n3 173\n3 174\n3 175\n3 176\n3 177\n3 178\n3 179\n3 180\n3 181\n3 182\n3 183\n3 184\n3 185\n3 186\n3 187\n3 188\n3 189\n3 190\n3 191\n3 192\n3 193\n3 194\n3 195\n3 196\n3 197\n3 198\n3 199\n3 200\n3 201\n3 202\n3 203\n3 204\n3 205\n3 206\n3 207\n3 208\n3 209\n3 210\n3 211\n3 212\n3 213\n3 214\n3 215\n3 216\n3 217\n3 218\n3 219\n3 220\n3 221\n3 222\n3 223\n3 224\n3 225\n3 226\n3 227\n3 228\n3 229\n3 230\n3 231\n3 232\n3 233\n3 234\n3 235\n3 236\n3 237\n3 238\n3 239\n3 240\n3 241\n3 242\n3 243\n3 244\n3 245\n3 246\n3 247\n3 248\n3 249\n3 250\n3 251\n3 252\n3 253\n3 254\n3 255\n4 256\n4 257\n4 258\n4 259\n4 260\n4 261\n4 262\n4 263\n4 264\n4 265\n4 266\n4 267\n4 268\n4 269\n4 270\n4 271\n4 272\n4 273\n4 274\n4 275\n4 276\n4 277\n4 278\n4 279\n4 280\n4 281\n4 282\n4 283\n4 284\n4 285\n4 286\n4 287\n4 288\n4 289\n4 290\n4 291\n4 292\n4 293\n4 294\n4 295\n4 296\n4 297\n4 298\n4 299\n4 300\n4 301\n4 302\n4 303\n4 304\n4 305\n4 306\n4 307\n4 308\n4 309\n4 310\n4 311\n4 312\n4 313\n4 314\n4 315\n4 316\n4 317\n4 318\n4 319\n4 320\n4 321\n4 322\n4 323\n4 324\n4 325\n4 326\n4 327\n4 328\n4 329\n4 330\n4 331\n4 332\n4 333\n4 334\n4 335\n4 336\n4 337\n4 338\n4 339\n4 340\n4 341\n4 342\n4 343\n4 344\n4 345\n4 346\n4 347\n4 348\n4 349\n4 350\n4 351\n4 352\n4 353\n4 354\n4 355\n4 356\n4 357\n4 358\n4 359\n4"
    },
    {
        "number": 4508,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... 4 5\n   ... 4 6\n   ... 5 7\n   ... ''')\n    2\n    \"\"\"\n    n = int(stdin.readline().strip())\n    edges = [list(map(int, stdin.readline().strip().split())) for _ in range(n - 1)]\n    # edges = [list(map(int, stdin.readline().strip().split())) for _ in range(int(stdin.readline()))]\n\n    tree = Tree(n)\n    tree.build_tree(edges)\n    \n    shortest_paths = tree.shortest_path(1)\n    distances = {}\n    for vertex in range(1, n + 1):\n        distances[vertex] = shortest_paths[vertex]\n    \n    queue = deque([(1, distances[1])])\n    visited = set()\n    visited.add(1)\n    while queue:\n        vertex, distance = queue.popleft()\n        for neighbour in tree.neighbours(vertex):\n            if neighbour not in visited:\n                visited.add(neighbour)\n                distances[neighbour] = min(distances[neighbour], distance + 1)\n                queue.append((neighbour, distances[neighbour]))\n    \n    return str(min(distances.values()))\n"
    },
    {
        "number": 4508,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = []\n    for _ in range(n - 1):\n        u, v = list(map(int, stdin.readline().split()))\n        edges.append((u, v))\n    return str(2 - max([shortest_distance(edges, 0, i) for i in range(1, n)]))\n\ndef"
    },
    {
        "number": 4508,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\"\"\"\nfrom typing import List\nimport sys\n\n\ndef"
    },
    {
        "number": 4508,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    n = int(n)\n    graph = [[] for i in range(n)]\n    for _ in range(n - 1):\n        u, v = stdin.readline().strip().split()\n        u, v = int(u), int(v)\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    # print(graph)\n    visited = [False for i in range(n)]\n    min_edges = n\n    visited[0] = True\n    queue = [0]\n    while len(queue) > 0:\n        node = queue.pop()\n        for neighbour in graph[node]:\n            if visited[neighbour]:\n                continue\n            visited[neighbour] = True\n            queue.append(neighbour)\n            min_edges -= 1\n            if min_edges == 2:\n                return str(len(queue))\n    return str(0)\n\nassert(solution(\"\"\"7\n1 2\n2 3\n2 4\n4 5\n4 6\n5 7\n\n\"\"\") == \"\"\"2\n\n\"\"\")\nassert(solution(\"\"\"7\n1 2\n1 3\n2 4\n2 5\n3 6\n1 7\n\n\"\"\") == \"\"\"0\n\n\"\"\")\nassert(solution(\"\"\"7\n1 2\n2 3\n3 4\n3 5\n3 6\n3 7\n\n\"\"\") == \"\"\"1\n\n\"\"\")\n"
    },
    {
        "number": 4508,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4508,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *edges = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    tree = {u: [] for u in range(1, n)}\n    for u, v in edges:\n        tree[u].append(v)\n        tree[v].append(u)\n    distances = [float('inf')] * n\n    distances[0] = 0\n    for k in range(n):\n        for u in range(1, n):\n            for v in tree[u]:\n                if distances[v] > distances[u] + 1:\n                    distances[v] = distances[u] + 1\n    return max(distances[1:])\n\nprint(solution(stdin))"
    },
    {
        "number": 4508,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = []\n    for i in range(n - 1):\n        a, b = [int(x) for x in stdin.split()]\n        edges.append((a, b))\n\n    res = bfs(n, edges)\n    if res == float('inf'):\n        return \"-1\"\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4509,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    k = int(stdin.readline().strip())\n    numbers = []\n    numbers = list(range(2, n*k + 1))\n    for i in range(2, n):\n        if i in numbers:\n            numbers.remove(i)\n    return str(numbers[k-1])"
    },
    {
        "number": 4509,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    for i in range(n):\n        n, k = [int(x) for x in stdin.strip().split(' ')]\n        print(k - n * ((k - 1) // n) - 1)"
    },
    {
        "number": 4509,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n, k = stdin.readline().split()\n        n, k = int(n), int(k)\n        if k % n == 0:\n            print(k)\n        else:\n            print(k + 1)"
    },
    {
        "number": 4509,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n\nimport sys\n\nT = int(sys.stdin.readline())\n\nfor t in range(T):\n    n, k = [int(x) for x in sys.stdin.readline().split()]\n    for i in range(k, (n*(n+1))//2+1):\n        if not i%n:\n            print(i)\n            break\n"
    },
    {
        "number": 4509,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport unittest\nimport sys\nsys.path.append(os.path.dirname(os.path.abspath(__file__)) + \"/../\")\nimport test_helper\n\nclass TestSolution(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        cls.solution = solution\n        cls.test_helper = test_helper.TestHelper(cls.solution)\n\n    def test_solution(self):\n        self.test_helper.assert_equals(2, self.solution(stdin))"
    },
    {
        "number": 4509,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline().strip())\n    for case_num in range(num_cases):\n        n, k = [int(x) for x in stdin.readline().strip().split(' ')]\n        for x in range(k):\n            x = x + 1\n            if x % n!= 0:\n                print(x)\n                break\n"
    },
    {
        "number": 4509,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for _ in range(n):\n        print(k - 1)\n    return ''"
    },
    {
        "number": 4509,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    print(n, k)\n    return str(k * (n + 1) - 1)"
    },
    {
        "number": 4509,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for _ in range(n):\n        if k == 1:\n            print(1)\n        elif k == 2:\n            print(2)\n        else:\n            print(k * (k - 1) // 2 + 1)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4509,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, k = stdin.readline().strip().split(' ')\n        n, k = int(n), int(k)\n        # Find the number which is not divisible by n\n        # n is odd, then the number is: n^k\n        # n is even, then the number is: (n/2)^k\n        # n is prime, then the number is: ((n-1)/2)^k\n        print((n - 1)//2)**k"
    },
    {
        "number": 4510,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = len(list(filter(lambda x: x % 2, map(int, stdin.split()))))\n    m = min(m, min(n, k))\n    return''.join(map(str, range(1, m + 1)))\n\nassert(solution(input()) == input())\n"
    },
    {
        "number": 4510,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    id_list = [int(el) for el in stdin[1].split()]\n    if k <= 0:\n        return '0'\n    conversation = [[] for _ in range(k)]\n    last_id = id_list.pop(0)\n    conversation[0].append(last_id)\n    for i in range(1, n):\n        id = id_list.pop(0)\n        if len(conversation[0]) == k:\n            del conversation[0]\n        conversation[0].append(id)\n        if len(conversation[0]) > 1:\n            conversation[0].sort()\n            conversation[0].pop(0)\n        if id not in conversation[0]:\n            conversation[0].append(id)\n            conversation[0].sort()\n            conversation[0].pop(0)\n    return str(len(conversation[0])) + '\\n' +''.join([str(el) for el in conversation[0]])"
    },
    {
        "number": 4510,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def bsort(arr: [int]) -> [int]:\n        if len(arr) <= 1:\n            return arr\n\n        pivot = arr[0]\n        l = len(arr)\n        j = 0\n        for i in range(1, l):\n            if arr[i] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                j += 1\n\n        arr[0], arr[j] = arr[j], arr[0]\n\n        return bsort(arr[:j]) + bsort(arr[j:])\n\n    n, k = map(int, stdin.split())\n    friends = [int(stdin) for _ in range(n)]\n\n    # friends = bsort(friends)\n    friends = sorted(friends, reverse=True)\n    res = [0] * k\n    i, m = 0, 0\n\n    while i < len(friends) and friends[i] < k:\n        res[friends[i]] = i + 1\n        i += 1\n\n    return''.join(map(str, res))"
    },
    {
        "number": 4510,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4510,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ids = list(map(int, stdin.split()))\n    conversations = []\n    for i in range(n):\n        if ids[i] not in conversations:\n            conversations.append(ids[i])\n            if len(conversations) == k:\n                del conversations[0]\n    return''.join(map(str, conversations))\n"
    },
    {
        "number": 4510,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n    messages = [int(x) for x in stdin.split()[1:]]\n    positions = [0] * n\n\n    for i, message in enumerate(messages):\n        pos = message % k\n        if pos == positions[-1]:\n            positions.pop()\n        else:\n            positions[pos] += 1\n            positions.append(pos)\n        if positions.count(pos) >= k:\n            positions.pop(0)\n\n    return''.join(map(str, positions))"
    },
    {
        "number": 4510,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ids = list(map(int, stdin.split()))\n    num = 0\n    conversation = []\n    for i in range(n):\n        if i < k:\n            conversation.append(ids[i])\n            num += 1\n        else:\n            if conversation[-1]!= ids[i]:\n                conversation.remove(conversation[-1])\n                conversation.append(ids[i])\n    return str(num) + '\\n' +''.join(map(str, conversation))"
    },
    {
        "number": 4510,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def move_left(k):\n        nonlocal data\n        if k > len(data):\n            return\n        for _ in range(k):\n            data[i] = data[i-1]\n            data[i-1] = None\n        \n    def get_value(i):\n        if i < 0:\n            return None\n        return data[i]\n\n    data = list(map(int, stdin.split()))\n    k = int(stdin.split()[1])\n    m = len(data)\n    ids = data[:m]\n    data = data[m:]\n    while len(data) > 0:\n        i = data.index(ids[0])\n        move_left(i+1)\n        ids[0], ids[i] = ids[i], ids[0]\n        i += 1\n        if i >= k:\n            data = data[k:]\n            m -= k\n            m += len(data)\n        else:\n            data = []\n    return m"
    },
    {
        "number": 4510,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split(' ')\n    stdin = [int(x) for x in stdin]\n    k = stdin[1]\n    n = stdin[0]\n    stdin = stdin[2:]\n    stdin = [int(x) for x in stdin]\n    print(n, k)\n    print(stdin)\n    id_list = []\n    for i in range(n):\n        id_list.append(stdin[i])\n    print(id_list)\n    m = min(k, n)\n    # m = min(k, len(id_list))\n    print(m)\n    k = k - m\n    if k == 0:\n        return m\n    else:\n        if k > len(id_list):\n            return m\n        else:\n            # k = k - 1\n            # id_list.append(id_list.pop(0))\n            return m, id_list"
    },
    {
        "number": 4510,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    messages = list(map(int, stdin.split()))\n    conversations = []\n    for i, message in enumerate(messages):\n        if len(conversations) < k:\n            conversations.append(message)\n            if i > 0:\n                conversations.append(messages[i-1])\n        else:\n            if message in conversations:\n                conversations.remove(message)\n            else:\n                conversations.remove(messages[i-1])\n                conversations.append(message)\n    return \"\\n\".join(map(str, conversations))\n"
    },
    {
        "number": 4511,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n = int(stdin.readline().strip())\n        cards = [stdin.readline().strip().split() for _ in range(n)]\n        total = 0\n        for _, cost in cards:\n            total += int(cost)\n        if total > 3*10**8:\n            print(total)\n        else:\n            print(total*2)"
    },
    {
        "number": 4511,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return str(0)\n    if n == 1:\n        return str(0)\n    if n == 2:\n        return str(1)\n    dp = [0 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i - 1] + 3, dp[i - 2] + 10, dp[i - 3] + 25)\n    return str(dp[n])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4511,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    costs = list(map(int, stdin.readline().split()))\n    costs.sort()\n    dmg = 0\n    for i in range(n):\n        k = int(stdin.readline())\n        for j in range(k):\n            c, d = map(int, stdin.readline().split())\n            if j % 10 == 0:\n                dmg += d\n            dmg += max(d - c, 0)\n    return str(dmg)\n"
    },
    {
        "number": 4511,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    costs = [int(x) for x in stdin.readline().strip().split()]\n    dmg = [int(x) for x in stdin.readline().strip().split()]\n    current = {'cost': 0, 'damage': 0, 'turns': 0}\n    for cost, damage in zip(costs, dmg):\n        if cost < current['cost']:\n            current['turns'] += 1\n            current['cost'] = cost\n            current['damage'] = damage\n        else:\n            current['turns'] = 1\n            current['damage'] = max(current['damage'] * 2, damage)\n    return str(current['damage'] * current['turns'])"
    },
    {
        "number": 4511,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nimport sys\ndef"
    },
    {
        "number": 4511,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    costs = []\n    for _ in range(n):\n        k = int(stdin)\n        costs.append(int(stdin))\n    costs.sort(reverse=True)\n    costs = list(reversed(costs))\n    max_damage = 0\n    for i in range(0, n):\n        damage = 0\n        cost = costs[i]\n        if cost > 3:\n            damage = cost * 2\n            cost = cost - 10\n        elif cost == 3:\n            damage = cost * 10\n        else:\n            damage = cost\n        max_damage += damage\n        if i % 10 == 9:\n            max_damage += cost\n    return str(max_damage)\n\n\nassert solution(\"5\") == \"263\"\nassert solution(\"5\\n1\\n2\\n3\\n3\\n1\\n1\\n1\\n1\\n3\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 4511,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n\n>>> solution('''3\n1 6\n1 7\n1 5\n2\n1 4\n1 3\n3\n1 10\n3 5\n2 3\n3\n1 15\n2 4\n1 10\n1\n1 100\n''')\n263\n\n>>> solution('''1\n1\n''')\n263\n\n>>> solution('''7\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n''')\n7\n\n>>> solution('''100\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 4511,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    cards = [list(map(int, line.split())) for line in stdin.readlines()]\n    # M = sum(k for _, k in cards)\n    # if M > 3 * 10**9:\n    #     return \"IMPOSSIBLE\"\n    # M = (M + 1) // 10\n    # costs = [[] for _ in range(M)]\n    # damages = [[] for _ in range(M)]\n    # for _, cost, damage in cards:\n    #     costs[cost - 1].append(cost)\n    #     damages[damage - 1].append(damage)\n    #\n    # M = len(costs)\n    # if M == 0:\n    #     return \"IMPOSSIBLE\"\n    #\n    # for i in range(M):\n    #     costs[i].sort(reverse=True)\n    #     damages[i].sort(reverse=True)\n    #\n    # res = 0\n    # for i in range(M):\n    #     for j in range(len(costs[i])):\n    #         if i + j >= M:\n    #             break\n    #         res += costs[i][j] * damages[i + j][0]\n    #\n    # return str(res)\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    "
    },
    {
        "number": 4511,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        k = int(stdin.readline().strip())\n        cost, damage = 0, 0\n        for _ in range(k):\n            c, d = [int(x) for x in stdin.readline().strip().split()]\n            cost += c\n            damage += d\n        damage *= 2 if cost >= 10 else 1\n        print(damage)\n    return\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4511,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cards = [int(stdin.readline()) for _ in range(n)]\n    costs = [int(stdin.readline()) for _ in range(n)]\n    return \"a\""
    },
    {
        "number": 4512,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4512,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return s\n"
    },
    {
        "number": 4512,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    q = int(stdin[1])\n    queries = [stdin[i + 2].split() for i in range(q)]\n    return '\\n'.join(str(len(set(s[int(l):int(r)] for l, r in queries))) for queries in queries)"
    },
    {
        "number": 4512,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    q = int(stdin[n:])\n    \n    result = [0] * q\n    \n    for i in range(q):\n        l, r, c = stdin[n:].split(\" \")\n        l = int(l)\n        r = int(r)\n        result[i] = s[l - 1:r].count(c)\n    \n    return \"\\n\".join(str(x) for x in result)\n\n\ndef"
    },
    {
        "number": 4512,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n\n    :param stdin:\n    :return:\n    \"\"\"\n    s = stdin.strip()\n    n = int(stdin.readline())\n    queries = [stdin.strip() for _ in range(n)]\n\n    # Algorithm: Preprocess\n    # 1. Sort s by frequency of characters\n    # 2. Map each character to its index in the sorted string\n    # 3. Preprocess queries by sorting them by query type (1 or 2)\n    # 4. Map each query to its list of characters\n\n    # Prepare s to be used in the algorithm\n    s_freq = {}\n    for c in s:\n        if c not in s_freq:\n            s_freq[c] = 0\n        s_freq[c] += 1\n\n    # Sort s by frequency\n    sorted_freq = sorted(s_freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Map each character to its index in the sorted string\n    sorted_char_to_idx = {c: i for i, (c, _) in enumerate(sorted_freq)}\n\n    # Preprocess queries\n    preprocessed_queries = []\n    for query in queries:\n        if query[0] == '1':\n            char, pos, c = query.split()\n            preprocessed_queries.append((sorted_char_to_idx[char], int(pos), c))\n        elif query[0] == '2':\n            l, r = query.split()\n            preprocessed_queries.append((int(l), int(r)))\n\n    # Map each query to its list of characters\n    queries_char_to_freq = {}\n    for (l, r), c in preprocessed_queries:\n        if l not in queries_char_to_freq:\n            queries_char_to_freq[l] = []\n        queries_char_to_freq[l].append(c)\n\n    # Sort queries by query type (1 or 2)\n    sorted_preprocessed_queries = sorted(preprocessed_queries, key=lambda x: x[0])\n\n    # Map each query to its list of characters\n    result = []\n    for (l, r), c in sorted_preprocessed_queries:\n        if l == l:\n            for c_ in queries_char_to_freq[l]:\n                if c == c_:\n                    result.append(c)\n        else:\n            for c_ in queries_char_to_freq[l]:\n                if c == c_:\n                    result.append(c)\n            for c_ in queries_char_to_freq[r]:\n                if c == c_:\n                    result.append(c)\n\n    return ''.join(result)\n"
    },
    {
        "number": 4512,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4512,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:10**5]\n    queries = list(stdin.split('\\n')[2:])\n    results = []\n    for q in queries:\n        q = list(map(int, q.split(' ')))\n        l, r, c = q[1], q[2], q[3]\n        if q[0] == 1:\n            s = s[:l-1] + c + s[r:]\n        elif q[0] == 2:\n            l, r = l-1, r-1\n            results.append(len(set(s[l:r+1])))\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 4512,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    n = int(stdin[1])\n    queries = [stdin[i].split() for i in range(2, n + 2)]\n    for query in queries:\n        if query[0] == '1':\n            l = int(query[1])\n            r = int(query[2])\n            new = s[l: r + 1].replace(query[3], query[4])\n            s = s[:l] + new + s[r + 1:]\n        else:\n            l = int(query[1])\n            r = int(query[2])\n            print(len(set(s[l: r + 1])))\n    return s\n"
    },
    {
        "number": 4512,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    queries = [tuple(stdin[i + 1].split()) for i in range(int(stdin[1]))]\n    for i in range(len(queries)):\n        if queries[i][0] == '1':\n            c = queries[i][1]\n            s = s[:int(queries[i][2]) - 1] + c + s[int(queries[i][2]):]\n        else:\n            l, r = int(queries[i][1]), int(queries[i][2])\n            c = Counter(s[l-1: r])\n            print(len(c))"
    },
    {
        "number": 4513,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4513,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n--- 12 Test Cases passed. ---\n\"\"\"\n"
    },
    {
        "number": 4513,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''https://www.codewars.com/kata/sudoku-solution-validator'''\n    pass\n"
    },
    {
        "number": 4513,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    test_cases = []\n    for _ in range(n):\n        test_cases.append(stdin)\n    return solution(test_cases)"
    },
    {
        "number": 4513,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4513,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return ''"
    },
    {
        "number": 4513,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    for line in stdin.strip().split('\\n'):\n        ans.append(solve(line))\n    return '\\n'.join(ans)\n\ndef"
    },
    {
        "number": 4513,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4513,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4513,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4514,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(vertex, k, min_k):\n        for u in graph[vertex]:\n            if u not in visited:\n                visited.add(u)\n                if min_k == k:\n                    min_k -= 1\n                if min_k < k:\n                    min_k = k\n                dfs(u, k + 1, min_k)\n    \n    \n    n, q = map(int, stdin.split())\n    officers = [int(x) for x in stdin.split()]\n    officers = {i: officers[i - 1] for i in range(1, n + 1)}\n    officers[1] = 0\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        officers[officers[i] + 1] = officers[i]\n        graph[officers[i]].append(officers[i + 1])\n    \n    for _ in range(q):\n        u, k = map(int, stdin.split())\n        if officers[u] == officers[k]:\n            print(k)\n            continue\n        officers[k] = officers[u]\n        visited = set()\n        dfs(officers[1], 1, k)\n        print(-1 if len(visited) < k else officers.values().index(k) + 1)\n"
    },
    {
        "number": 4514,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(n) for n in stdin.strip().split(' ')]\n    officers = [0] * n\n    officers[1] = 1\n    parents = [0] * (n + 1)\n\n    for _ in range(n - 1):\n        u, k = [int(n) for n in stdin.strip().split(' ')]\n        officers[u] = k\n        parents[k] = u\n    \n    for _ in range(q):\n        u, k = [int(n) for n in stdin.strip().split(' ')]\n        if officers[u] < officers[k]:\n            for i in range(n + 1):\n                if officers[i] < officers[k] and officers[i]!= 0:\n                    officers[k] = officers[i]\n                    officers[i] = k\n            for i in range(officers[k] + 1, officers[k] + officers[u] + 1):\n                officers[i] = officers[officers[k]]\n            if officers[k] == 0:\n                return -1\n        elif officers[u] == officers[k]:\n            return -1\n        else:\n            officers[u] = officers[k]\n            for i in range(officers[k] + 1, officers[k] + officers[u] + 1):\n                officers[i] = officers[officers[k]]\n            if officers[k] == 0:\n                return -1\n    \n    return''.join(str(officers[officer]) for officer in officers)"
    },
    {
        "number": 4514,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 6\\n1 1 1 3 5 3 5 7\\n3 1\\n1 5\\n3 4\\n7 3\\n1 8\\n1 9\")\n    '3\\n6\\n8\\n-1\\n9\\n4'\n    \"\"\"\n    n, q = tuple(map(int, stdin.split()))\n\n    officers = [tuple(map(int, stdin.split())) for _ in range(n - 1)]\n\n    def dfs(officers, start, k, res):\n        if k < 0:\n            return False\n        officer = officers[start][0]\n        if officers[officer][k] == start + 1:\n            officers[officer][k] = officers[officer][k] - 1\n            if k == officers[officer][k] - 1:\n                res.append(officer)\n            else:\n                dfs(officers, officers[officer][k], k, res)\n        else:\n            officers[officer][k] = officers[officer][k] - 1\n            if k == officers[officer][k] - 1:\n                res.append(officer)\n            else:\n                dfs(officers, officers[officer][k], k, res)\n        return True\n\n    for i in range(q):\n        officers_in_command = list(map(lambda x: x[0] - 1,\n                                       filter(lambda x: x[1] == i + 1, officers)))\n        officers_in_command.append(officers[officers_in_command[0]][officers_in_command[0]])\n        officers_in_command = sorted(officers_in_command)\n        officers_in_command.insert(0, 0)\n        command_officer = officers[officers_in_command[0]][officers_in_command[0]]\n        officers_in_command = sorted(officers_in_command)\n        officers_in_command.insert(0, officers[officers_in_command[0]][officers_in_command[0]])\n        officers_in_command.insert(0, officers[officers_in_command[0]][officers_in_command[0]])\n        k = 0\n        res = []\n        dfs(officers, officers_in_command[k], officers_in_command[k + 1], res)\n        if officers[officers_in_command[0]][officers_in_command[0]] == officers[officers_in_command[1]][officers_in_command[1]] - 1:\n            res.append(officers_in_command[1])\n        else:\n            officers_in_command = sorted(officers_in_command)\n            officers_in_command.insert(0, officers_in_command[officers_in_command[0]])\n            officers_in_command.insert(0, officers_in_command[officers_in_command[0]])\n            officers_in_command.insert(0, officers_in_command[officers_in_command[0]])\n            k = 0\n            dfs(officers, officers_in_command[k], officers_in_command[k + 1], res)\n        if officers[command_officer][officers_in_command[officers_in_command[1] + 1] - 1] == \\\n                officers[officers_in_command[officers_in_command[2] + 1] - 1][officers_in_command[officers_in_command[2] + 1]] - 1:\n            res.append(offic"
    },
    {
        "number": 4514,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4514,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    officers = list(map(int, stdin.split()))\n    officers.remove(1)\n    officers_dict = {}\n    for officer in officers:\n        officers_dict[officer] = officers[officers.index(officer) + 1]\n\n    q = [map(int, stdin.split()) for _ in range(q)]\n    answers = []\n    for u, k in q:\n        if officers_dict[u] == k:\n            answers.append(-1)\n        else:\n            officers_dict[u], officers_dict[k] = officers_dict[k], officers_dict[u]\n            answers.append(k)\n    return '\\n'.join(map(str, answers))\n\nassert(solution(stdin) == stdout)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4514,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()\n    n, q = map(int, line[0].split())\n    officers = line[1].split()\n    officers_tree = {}\n    for i, officer in enumerate(officers):\n        officers_tree[officer] = i\n    officers_tree[officers[0]] = 1\n\n    officer_spreading = line[2:]\n    officer_k = []\n    for query in officer_spreading:\n        u, k = map(int, query.split())\n        officer_k.append((officers_tree[u], k))\n\n    def dfs(officer, parent):\n        for child in officers_tree:\n            if officers_tree[child] == parent:\n                officers_tree[child] = officer\n                dfs(officer, officer)\n\n    dfs(1, officers_tree[1])\n\n    res = []\n    for officer, k in officer_k:\n        if officers_tree[officer] == officer:\n            res.append(-1)\n        else:\n            res.append(officers_tree[officer])\n\n    return '\\n'.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4514,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.readline().split()]\n    officers = [int(x) for x in stdin.readline().split()]\n    officers.append(-1)\n    tree = {}\n    for officers_index, i in enumerate(officers):\n        if i == -1:\n            tree[officers_index] = officers_index\n        else:\n            tree[officers_index] = officers[officers_index]\n    for _ in range(q):\n        u, k = [int(x) for x in stdin.readline().split()]\n        if tree[u] == officers[k]:\n            print(-1)\n        else:\n            print(officers[k])\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4514,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(officers: List[int], n: int, k: int):\n        nonlocal officers_sequence\n        if k == officers_sequence[k]:\n            return\n        officers_sequence[k] = officers.index(officers_sequence[k])\n        return dfs(officers, officers_sequence, k - 1)\n\n    def construct_order(officers: List[int], n: int, k: int):\n        nonlocal officers_sequence\n        if k == officers_sequence[k]:\n            return\n        officers_sequence[k] = officers.index(officers_sequence[k])\n        construct_order(officers, officers_sequence, k - 1)\n\n    n, q = map(int, stdin.split())\n    officers = list(map(int, stdin.split()))\n    officers_sequence = [0] * n\n    officers_sequence[0] = -1\n    for _ in range(q):\n        u, k = map(int, stdin.split())\n        dfs(officers, officers_sequence, officers_sequence.index(k) - 1)\n        construct_order(officers, officers_sequence, officers_sequence.index(u) - 1)\n        officers_sequence[k] = 0\n    for k in range(n):\n        if officers_sequence[k] == officers_sequence[-1]:\n            return officers[officers_sequence[k]]\n    return -1\n"
    },
    {
        "number": 4514,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(u):\n        visited[u] = True\n        for v in adj[u]:\n            if not visited[v]:\n                if dfs(v):\n                    return True\n            else:\n                if k[v] == -1 or k[v] > k[u]:\n                    k[v] = k[u]\n        return False\n\n    n, q = map(int, stdin.split())\n    adj = [[] for _ in range(n)]\n    k = [-1 for _ in range(n)]\n    for i in range(n - 1):\n        p = list(map(int, stdin.split()))\n        u, v = p[0], p[1]\n        adj[u - 1].append(v - 1)\n    for _ in range(q):\n        u, k_i = map(int, stdin.split())\n        if dfs(u - 1):\n            k_i -= 1\n        else:\n            k_i = -1\n        print(k_i)\n    return stdin\n\n\nsolution(\"\"\"9 6\n1 1 1 3 5 3 5 7\n3 1\n1 5\n3 4\n7 3\n1 8\n1 9\n\"\"\")\n"
    },
    {
        "number": 4515,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = []\n    for _ in range(n):\n        a, b, c, n = list(map(int, stdin.readline().split()))\n        if n % a == 0 and n % b == 0 and n % c == 0:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 4515,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline())\n    for case_num in range(1, num_cases + 1):\n        # Get input\n        line = stdin.readline().strip().split()\n        a, b, c, n = int(line[0]), int(line[1]), int(line[2]), int(line[3])\n        # Check if each number in the input is valid\n        for num in [a, b, c, n]:\n            if not (1 <= num <= 10 ** 8):\n                raise ValueError(\"Invalid number in case {0}: {1}\".format(case_num, num))\n        # Compute result\n        alice, bob, ce = a + b + c, b + c + a, c + a + b\n        if alice!= n:\n            print(\"NO\")\n            continue\n        if alice % 3!= 0:\n            print(\"NO\")\n            continue\n        num_coins = (alice // 3)\n        if bob!= n and bob % 3!= 0:\n            print(\"NO\")\n            continue\n        if ce!= n and ce % 3!= 0:\n            print(\"NO\")\n            continue\n        if bob % 3!= 0 or ce % 3!= 0:\n            print(\"NO\")\n            continue\n        print(\"YES\")\n    return \"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        t = int(line.strip())\n        for _ in range(t):\n            a, b, c, n = map(int, line.strip().split(\" \"))\n            if a + b == c + n:\n                print(\"YES\")\n            elif a + b > c + n:\n                print(\"NO\")\n            else:\n                print(\"YES\")"
    },
    {
        "number": 4515,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def test():\n        a, b, c, n = list(map(int, stdin.split()))\n        if a + b == n:\n            if a == b:\n                print('NO')\n            else:\n                print('YES')\n        elif a + c == n:\n            if a == c:\n                print('NO')\n            else:\n                print('YES')\n        elif b + c == n:\n            if a == b:\n                print('NO')\n            else:\n                print('YES')\n        else:\n            print('NO')\n    for _ in range(int(stdin.split()[0])):\n        test()\n    return ''"
    },
    {
        "number": 4515,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    \n    for _ in range(t):\n        a, b, c, n = map(int, stdin.readline().split())\n        if a + b + c == n and a * a + b * b == c * c:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    \n    return str()"
    },
    {
        "number": 4515,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_cases = int(stdin)\n    cases = []\n    for _ in range(num_of_cases):\n        a, b, c, n = map(int, stdin.split())\n        if a == 0:\n            continue\n        if b == 0:\n            continue\n        if c == 0:\n            continue\n        if n == 0:\n            continue\n        cases.append((a, b, c, n))\n    return solve(cases)\n\ndef"
    },
    {
        "number": 4515,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b, c, n = map(int, stdin.readline().split())\n        if n == (a + b + c):\n            print('YES')\n        else:\n            print('NO')\n    return ''"
    },
    {
        "number": 4515,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\ndef"
    },
    {
        "number": 4515,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n_cases = int(stdin.readline())\n    for _ in range(n_cases):\n        a, b, c, n = [int(x) for x in stdin.readline().split()]\n        if a + b + c == n:\n            print('YES')\n        elif a + b > c and a + c == n:\n            print('YES')\n        elif b + c == n:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4515,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4516,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\n\n---\n\n## C#\n\n### Description\n\nLet's define $p_i(n)$ as the following permutation: $[i, 1, 2, \\dots, i - 1, i + 1, \\dots, n]$. This means that the $i$-th permutation is almost identity (i.e. which maps every element to itself) permutation but the element $i$ is on the first position. Examples:  $p_1(4) = [1, 2, 3, 4]$;  $p_2(4) = [2, 1, 3, 4]$;  $p_3(4) = [3, 1, 2, 4]$;  $p_4(4) = [4, 1, 2, 3]$. \n\nYou are given an array $x_1, x_2, \\dots, x_m$ ($1 \\le x_i \\le n$).\n\nLet $pos(p, val)$ be the position of the element $val$ in $p$. So, $pos(p_1(4), 3) = 3, pos(p_2(4), 2) = 1, pos(p_4(4), 4) = 1$.\n\nLet's define a function $f(p) = \\sum\\limits_{i=1}^{m - 1} |pos(p, x_i) - pos(p, x_{i + 1})|$, where $|val|$ is the absolute value of $val$. This function means the sum of distances between adjacent elements of $x$ in $p$.\n\nYour task is to calculate $f(p_1(n)), f(p_2(n)), \\dots, f(p_n(n))$.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($2 \\le n, m \\le 2 \\cdot 10^5$) \u2014 the number of elements in each permutation and the number of elements in $x$.\n\nThe second line of the input contains $m$ integers ($m$, not $n$) $x_1, x_2, \\dots, x_m$ ($1 \\le x_i \\le n$), where $x_i$ is the $i$-th element of $x$. Elements of $x$ can repeat and appear in arbitrary order.\n\n\n-----Output-----\n\nPrint $n$ integers: $f(p_1(n)), f(p_2(n)), \\dots, f(p_n(n))$.\n\n\n-----Examples-----\nInput\n4 4\n1 2 3 4\n\nOutput\n3 4 6 5 \n\nInput\n5 5\n2 1 5 3 5\n\nOutput\n9 8 12 6 8 \n\nInput\n2 10\n1 2 1 1 2 2 2 2 2 2\n\nOutput\n3 3 \n\n\n-----Note-----\n\nConsider the first example:\n\n$x = [1, 2, 3, 4]$, so  for the permutation $p_1(4) = [1, 2, 3, 4]$ the answer is $|1 - 2| + |2 - 3| + |3 - 4| = 3$;  for the permutation $p_2(4) = [2, 1, 3, 4]$ the answer is $|2 - 1| + |1 - 3| + |3 - 4| = 4$;  for the permutation $p_3(4) = [3, 1, 2, 4]$ the answer is $|2 - 3| + |3 - 1| + |1 - 4| = 6$;  for the permutation $p_4(4) = [4, 1, 2, 3]$ the answer is $|2 - 3| + |3 - 4| + |4 - 1|"
    },
    {
        "number": 4516,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    p = [i for i in range(1, n + 1)]\n    f = 0\n    for i in range(m - 1):\n        f += abs(x.index(x[i]) - x.index(x[i + 1]))\n        x[x.index(x[i])], x[x.index(x[i + 1])] = x[x.index(x[i + 1])], x[x.index(x[i])]\n    return str(f)\n"
    },
    {
        "number": 4516,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    return''.join(map(str, [abs(x[i] - x[i + 1]) for i in range(m - 1)]))\n\nassert(solution(\"4 4\\n1 2 3 4\\n\")) == \"3 4 6 5\"\nassert(solution(\"5 5\\n2 1 5 3 5\\n\")) == \"9 8 12 6 8\"\nassert(solution(\"2 10\\n1 2 1 1 2 2 2 2 2 2\\n\")) == \"3 3\"\n\n\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    x = (int(x) for x in stdin.split())\n    pos = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            pos[i].append(i + 1 + j)\n    return''.join(str(abs(x[i - 1] - pos[i][j])) for i in range(1, n) for j in range(len(pos[i])))"
    },
    {
        "number": 4516,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split()]\n    x = list(map(int, stdin.split()))\n    return''.join(str(solution_1(x, p)) for p in stdin.split())\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = tuple(map(int, stdin.split()))\n    p = tuple(range(1, n + 1))\n    for _ in range(m):\n        x = tuple(sorted(x))\n        p = tuple(i for i in p if i not in x)\n    return''.join(map(str, [abs(i - j) for i, j in zip(x, p)]))"
    },
    {
        "number": 4516,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.strip().split(' ')\n    n, m = int(n), int(m)\n    x = list(map(int, stdin.strip().split(' ')))\n    result = []\n    for _ in range(m):\n        x.sort()\n        first = x[0]\n        del x[0]\n        second = x[0]\n        del x[0]\n        result.append(abs(first - second))\n    return''.join(map(str, result))\n\n\n\n##    return''.join(map(str, [abs(first - second) for _ in range(m) for first, second in zip(sorted(x), sorted(x[1:]))]))\n"
    },
    {
        "number": 4516,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split(' '))\n    x = list(map(int, stdin.strip().split(' ')))\n    # perm = [x[i] for i in range(m)]\n    perm = [x[i] for i in range(1, n)]\n    # print(perm)\n    res = 0\n    for i in range(n - 1):\n        res += abs(perm[i] - perm[i + 1])\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n"
    },
    {
        "number": 4516,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    xs = list(map(int, stdin.split()))\n    \n    for i in range(1, m):\n        xs[i] = xs[i - 1] + xs[i]\n    \n    xs.sort()\n\n    x = \" \".join(map(str, xs))\n    return x\n\n\ndef"
    },
    {
        "number": 4517,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4517,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n, m = [int(s) for s in stdin.split()]\n    tree = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u, v = [int(s) for s in stdin.split()]\n        tree[u].append(v)\n        tree[v].append(u)\n    query = [int(s) for s in stdin.split()]\n    results = []\n    for k in query:\n        results.append('YES' if contains_path(tree, k, 1) else 'NO')\n    return '\\n'.join(results)\n\ndef"
    },
    {
        "number": 4517,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4517,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    for _ in range(m):\n        k = int(stdin.split()[0])\n        visited = [False] * n\n        visited[0] = True\n        stack = [0]\n        while stack:\n            u = stack.pop()\n            for v in graph[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    stack.append(v)\n        if visited[k - 1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4517,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    n, m = map(int, stdin.readline().split())\n    tree = [[] for _ in range(n)]\n\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        tree[u - 1].append(v - 1)\n        tree[v - 1].append(u - 1)\n\n    for _ in range(m):\n        k = int(stdin.readline())\n        for v in range(k):\n            u = int(stdin.readline()) - 1\n        print('YES' if tree[0] and u in tree[0] else 'NO')\n"
    },
    {
        "number": 4517,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    adj = [[] for _ in range(N)]\n    for _ in range(M):\n        u, v = [int(x) - 1 for x in stdin.split()]\n        adj[u].append(v)\n        adj[v].append(u)\n\n    for _ in range(int(stdin.readline())):\n        k = int(stdin.readline())\n        V = [int(x) - 1 for x in stdin.readline().split()]\n\n        visited = [False] * N\n        distances = [-1] * N\n        distances[0] = 0\n\n        def dfs(v: int) -> bool:\n            visited[v] = True\n            for u in adj[v]:\n                if not visited[u]:\n                    distances[u] = distances[v] + 1\n                    dfs(u)\n\n        dfs(V[0])\n\n        for i in range(1, k):\n            if distances[V[i]] == 1:\n                return \"YES\"\n        return \"NO\""
    },
    {
        "number": 4517,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\""
    },
    {
        "number": 4517,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n\n    n, m = [int(x) for x in stdin.readline().split()]\n    edges = [tuple(int(x) for x in stdin.readline().split()) for _ in range(n - 1)]\n\n    queries = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\n    tree = defaultdict(list)\n    for u, v in edges:\n        tree[u].append(v)\n\n    count = 0\n    for query in queries:\n        count += 1\n        print('Query {0}:'.format(count))\n        for v in query:\n            if len(tree[v]) > 0:\n                print('YES')\n            else:\n                print('NO')\n        print()\n"
    },
    {
        "number": 4517,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, m = [int(x) for x in stdin.split(' ')]\n    edges = []\n    for _ in range(n - 1):\n        a, b = [int(x) for x in stdin.split(' ')]\n        edges.append((a, b))\n    queries = []\n    for _ in range(m):\n        queries.append([int(x) for x in stdin.split(' ')])\n    return 'YES' if is_graph_bipartite(n, edges, queries) else 'NO'\n\n\ndef"
    },
    {
        "number": 4517,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 6\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 5\n   ... 2 6\n   ... 3 7\n   ... 7 8\n   ... 7 9\n   ... 9 10\n   ... 4 3 8 9 10\n   ... 3 2 4 6\n   ... 3 2 1 5\n   ... 3 4 8 2\n   ... 2 6 10\n   ... 3 5 4 7''')\n    'YES'\n    >>> solution('''10 6\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 5\n   ... 2 6\n   ... 3 7\n   ... 7 8\n   ... 7 9\n   ... 9 10\n   ... 4 3 8 9 10\n   ... 3 2 4 6\n   ... 3 2 1 5\n   ... 3 4 8 2\n   ... 2 6 10\n   ... 3 5 4 7\n   ... 3 2 1 5\n   ... 3 4 8 2\n   ... 4 3 8 9 10\n   ... 3 2 4 6\n   ... 3 2 1 5\n   ... 3 4 8 2''')\n    'NO'\n    \"\"\"\n    n, m = list(map(int, stdin.split()))\n    edges = [list(map(int, stdin.split())) for i in range(n - 1)]\n    for i in range(n - 1, m, n - 1):\n        edges.append(list(map(int, stdin.split())))\n    # print(edges)\n    vertices = [False] * (n + 1)\n    for e in edges:\n        vertices[e[1]] = True\n    for v in vertices:\n        if v:\n            for i in range(1, n + 1):\n                if not vertices[i]:\n                    v2 = i\n                    break\n            dist = [float('inf')] * (n + 1)\n            dfs(edges, v, v2, dist)\n            if dist[v2] == 1:\n                print('YES')\n            else:\n                print('NO')\n\n\ndef"
    },
    {
        "number": 4518,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n\n        # no matter we take one of the a as source, we can start from any other\n        # to get rid of the problem of DAG\n        from itertools import combinations\n\n        c = combinations(range(n), 2)\n\n        for x in range(n):\n            for y in c:\n                if a[x] == a[y[0]] or a[x] == a[y[1]]:\n                    # no matter we choose x or y as source, we can only choose one of them as destination\n                    # if a[x] == a[y[0]], we can always choose x as destination\n                    if x == y[0] or x == y[1]:\n                        continue\n                    else:\n                        print(\"NO\")\n                        return\n        print(\"YES\")\n        for x in range(n):\n            for y in range(n):\n                print(x, y)\n        print()\nsolution(stdin)\n"
    },
    {
        "number": 4518,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        a_len = len(a)\n        if n == 1:\n            print('YES')\n            print('{}'.format(a[0]))\n        else:\n            graph = [{} for _ in range(n)]\n            edges = []\n            for i in range(a_len):\n                for j in range(i + 1, a_len):\n                    if a[i]!= a[j]:\n                        edges.append((i, j))\n\n            for u, v in edges:\n                if u in graph[v]:\n                    if a[u]!= a[v]:\n                        graph[v][u] = True\n                else:\n                    graph[u][v] = True\n                    graph[v][u] = True\n\n            visited = [False for _ in range(n)]\n            nodes = {i: [] for i in range(n)}\n            for u, v in edges:\n                nodes[u].append(v)\n                nodes[v].append(u)\n\n            def dfs(u: int, v: int) -> bool:\n                if visited[v] == True:\n                    return False\n                visited[v] = True\n                for node in nodes[v]:\n                    if node!= u:\n                        if dfs(u, node) == False:\n                            return False\n                return True\n\n            count = 0\n            for i in range(n):\n                if dfs(i, i) == False:\n                    print('NO')\n                    count += 1\n                    break\n            else:\n                if count == t:\n                    print('YES')\n                    for i in range(n - 1):\n                        print('{} {}'.format(a[i], a[i + 1]))\n"
    },
    {
        "number": 4518,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4518,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    l, r = 1, n - 1\n    m = 1\n    while l < r:\n        a[m], a[l], a[r] = a[l], a[r], a[m]\n        m += 1\n        l += 1\n        r -= 1\n        if m > n - 1:\n            m = 1\n    for i in range(n - 1):\n        x, y = stdin.readline().split()\n        x, y = int(x), int(y)\n        if a[x]!= a[y]:\n            print('NO')\n            return\n    print('YES')\n    for i in range(n - 1):\n        print(a[i], end=' ')\n    print(a[n - 1])"
    },
    {
        "number": 4518,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = [int(x) for x in stdin[2].split()]\n    b = a[1:]\n    for i in range(n-1):\n        b.append(a[i])\n    b.sort()\n    # print(b)\n    def dfs(i,visited,val):\n        if i == n-1:\n            return True\n        if a[i] in val:\n            return False\n        val.add(a[i])\n        for j in range(n):\n            if (a[i],j) not in visited and dfs(i+1,visited,val):\n                return True\n        val.remove(a[i])\n        return False\n    visited = set()\n    for i in range(n):\n        visited.add((a[i],i))\n        for j in range(i+1,n):\n            if a[i] == a[j]:\n                continue\n            if (a[i],a[j]) not in visited and (a[j],a[i]) not in visited:\n                continue\n            visited.add((a[i],a[j]))\n            visited.add((a[j],a[i]))\n    val = set()\n    val.add(a[0])\n    val.add(a[n-1])\n    return \"YES\" if dfs(1,visited,val) else \"NO\"\n\nprint(solution(input()))\n\n-----Best Result-----\n"
    },
    {
        "number": 4518,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    if n == \"\":\n        return \"\"\n    n = int(n)\n    n_bands = stdin.readline().strip()\n    if n_bands == \"\":\n        return \"\"\n    n_bands = int(n_bands)\n    assert 1 <= n <= 5000\n    assert 1 <= n_bands <= 10**9\n    bandit_gangs = stdin.readline().strip()\n    if bandit_gangs == \"\":\n        return \"\"\n    bandit_gangs = [int(x) for x in bandit_gangs.split()]\n    assert 1 <= len(bandit_gangs) <= 10**9\n    assert all(1 <= x <= 10**9 for x in bandit_gangs)\n    districts = stdin.readline().strip()\n    if districts == \"\":\n        return \"\"\n    districts = [int(x) for x in districts.split()]\n    assert 1 <= len(districts) <= 10**9\n    assert all(1 <= x <= 10**9 for x in districts)\n    roads = [stdin.readline().strip() for _ in range(n - 1)]\n    if roads == []:\n        return \"\"\n    roads = [[int(x) for x in y.split()] for y in roads]\n    if roads == []:\n        return \"\"\n    assert all(1 <= x <= n for x, _ in roads for x in x)\n    assert all(1 <= y <= n for _, y in roads)\n    r = [x for x, _ in roads]\n    assert all(x == y or r.count(x) == 0 or r.count(y) == 0 for x, y in roads)\n    assert all(r.count(x) == 0 or r.count(y) == 0 or x!= y for x, y in roads)\n    roads = [sorted(x) for x in roads]\n    bandits = [[] for _ in range(n_bands)]\n    for i in range(n_bands):\n        bandits[i] = [x for x in range(1, n_bands + 1) if x!= bandit_gangs[i]]\n    bandits = [sorted(x) for x in bandits]\n    assert all(x == y or r.count(x) == 0 or r.count(y) == 0 for x, y in bandits)\n    assert all(r.count(x) == 0 or r.count(y) == 0 or x!= y for x, y in bandits)\n    assert all(bandits[i][j] == bandits[i][bandits[i].index(bandit_gangs[i])] for i in range(n_bands) for j in range(len(bandits[i])))\n    bandits = sorted(bandits, key=lambda x: len(x))\n    assert all(len(x) == len(bandits[i]) for i in range(n_bands))\n    for i in range(n_bands):\n        assert len(bandits[i]) == len(bandits[i][bandits[i].index(bandit_gangs[i])])\n    districts_bandits = {}\n    for i in range(n_bands):\n        for j in range(len(bandits[i])):\n            districts_bandits[bandits[i][j]] = i\n    districts_bandits[bandit_gangs[0]] = 0\n    districts_bandits[bandit_gangs[1]] = 0\n    for i in range(2, n_bands):\n        assert districts_bandits[bandits[i][bandits[i].index(bandit_gangs[i - 1])]] == districts_bandits[bandits[i][bandits[i].index(bandit_gangs[i])]]\n    for road in roads:\n        assert districts_bandits[road[0]]!= districts_bandits[road[1]]\n    district_roads = {}\n    for i in range(n):\n        if i in districts:\n            district_roads[i] = []\n    for i in range(n - 1):\n        district_roads[roads[i][0]].append(roads[i][1])\n        district_roads[roads[i][1]].append(roads[i][0])\n    district_roads[roads[n - 1][0]].append(roads[n - 1][1])\n    district_roads[roads[n - 1][1]].append(roads[n - 1][0])\n    if len(district_roads) == n - 1:\n        print(\"YES\")\n        for i in range(n - 1):\n            print(str(roads[i][0]) + \" \" + str(roads[i][1]))\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4518,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    for _ in range(n):\n        n, bandit_gang = int(stdin[1]), list(map(int, stdin[2].split()))\n        districts = [0] * n\n        for i in range(n):\n            districts[i] = bandit_gang[i % len(bandit_gang)]\n        if len(set(districts))!= n:\n            print('NO')\n            continue\n        all_connections = set()\n        for i in range(n):\n            for j in range(i + 1, n):\n                if i == j or (districts[i]!= districts[j] and (districts[i], districts[j]) not in all_connections and (districts[j], districts[i]) not in all_connections):\n                    all_connections.add((districts[i], districts[j]))\n        if len(all_connections)!= n - 1:\n            print('NO')\n            continue\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                print(i + 1, j + 1)\n        print('YES')\n    return"
    },
    {
        "number": 4518,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    G = {}\n    for _ in range(n):\n        bandit, gang = stdin.readline().strip().split()\n        G[bandit] = gang\n    m = int(stdin.readline().strip())\n    for _ in range(m):\n        x, y = stdin.readline().strip().split()\n        if G[x]!= G[y]:\n            print('NO')\n            return\n    print('YES')\n    return"
    },
    {
        "number": 4518,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        districts = list(map(int, stdin.readline().strip().split()))\n        roads = []\n        for i, district in enumerate(districts):\n            for j, other_district in enumerate(districts[i+1:]):\n                roads.append((i, j+i+1))\n        roads = set(roads)\n        if len(roads)!= n - 1:\n            print(\"NO\")\n            continue\n        print(\"YES\")\n        for road in roads:\n            print(road[0], road[1])\n        print()"
    },
    {
        "number": 4518,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def check(a: list, b: list, length: int) -> bool:\n        for i in range(length - 1):\n            if a[i] == b[i]:\n                return False\n        return True\n\n    cases = int(stdin.readline().strip())\n    for _ in range(cases):\n        n = int(stdin.readline().strip())\n        g = int(stdin.readline().strip())\n        gangs = [int(s) for s in stdin.readline().strip().split(\" \")]\n        \n        if n == 1:\n            print(\"YES\")\n        else:\n            roads = [tuple(int(n) for n in stdin.readline().strip().split(\" \")) for _ in range(n - 1)]\n            distances = [[0 for _ in range(n)] for _ in range(n)]\n            for road in roads:\n                distances[road[0] - 1][road[1] - 1] = 1\n                distances[road[1] - 1][road[0] - 1] = 1\n            \n            gangs_by_distance = [0 for _ in range(n)]\n            for i in range(n):\n                distances[i] = sorted(distances[i], reverse=True)\n                gangs_by_distance[i] = gangs[i]\n                \n            dictionary = {}\n            for i in range(n):\n                for j in range(n):\n                    if i!= j and (i, j) not in dictionary:\n                        if check(gangs_by_distance, distances[i], n) and check(gangs_by_distance, distances[j], n):\n                            dictionary[(i, j)] = 1\n                            dictionary[(j, i)] = 1\n            roads = list(dictionary.keys())\n            roads = sorted(roads, key=lambda x: x[1])\n            roads = sorted(roads, key=lambda x: x[0])\n            \n            print(\"YES\")\n            for road in roads:\n                print(road[0] + 1, road[1] + 1)\n            print()\n            \n    return stdin.read()\n    \n\nassert solution('''\n4\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\n''') == \"\"\"NO\n1 3\n3 5\n5 4\n1 2\n\"\"\"\n\nassert solution('''\n4\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\n''') == \"\"\"YES\n1 3\n3 5\n5 4\n1 2\n1 3\n1 4\n\"\"\"\n\nassert solution('''\n4\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\n''') == \"\"\"YES\n1 3\n3 5\n5 4\n1 2\n1 3\n1 4\n\"\"\"\n\nassert solution('''\n6\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\n''') == \"\"\"NO\n1 3\n3 5\n5 4\n1 2\n1 3\n1 4\n\n\"\"\"\n\nassert solution('''\n6\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\n''') == \"\"\"NO\n1 3\n3 5\n5 4\n1 2\n1 3\n1 4\n\n\"\"\"\n\nassert solution('''\n10\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\n''') == \"\"\"YES\n1 3\n3 5\n5 4\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\n\"\"\"\n\nassert solution('''\n10\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\n''') == \"\"\"YES\n1 3\n3 5\n5 4\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\n\"\"\"\n\nassert solution('''\n10\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\n''') == \"\"\"NO\n1 3\n3 5\n5 4\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\n\"\"\"\n\nassert solution('''\n10\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\n''') == \"\"\"YES\n1 3\n3 5\n5 4\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\n\"\"\"\n\nassert solution('''\n10\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\n''') == \"\"\"NO\n1 3\n3 5\n5 4\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\n\"\"\"\n\nassert solution('''\n10\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\n''') == \"\"\"YES\n1 3\n3 5\n5 4\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\n\"\"\"\n\nassert solution('''\n10\n5\n1 2 2 1 3\n3\n1 1 1\n4\n1 1000 101 1000\n4\n1 2 3 4\n\n''') == \"\"\"YES\n1 3\n3 5\n5 4\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\n\"\"\"\n\nassert solution('''\n10\n5\n1 2 2 1 3\n3"
    },
    {
        "number": 4519,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[2:]\n    if k > n:\n        print('0' * n)\n    elif k == 0:\n        print(s)\n    else:\n        curr = s\n        for _ in range(k):\n            curr = ''.join(sorted(curr))\n        print(curr)\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 4519,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code here\n    return \"\""
    },
    {
        "number": 4519,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4519,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 8 5\n   ... 11011010\n   ... 7 9\n   ... 11111100\n   ... 7 11\n   ... 11111100\n   ... ''')\n    '01011110'\n    \"\"\"\n    def adjust(dic: dict, x: str, y: str, k: int) -> None:\n        while k > 0:\n            dic[x], dic[y] = y, x\n            x, y = y, x\n            k -= 1\n\n    def find(s: str, dic: dict) -> str:\n        x = y = ''\n        for i in s:\n            if i not in dic:\n                if len(x) < len(y):\n                    x = y\n                break\n            y = x\n            x = i\n        return y\n\n    def merge(dic: dict, x: str, y: str, k: int) -> None:\n        if x!= y:\n            adjust(dic, x, y, k)\n            dic[x] = dic[x] + dic[y]\n            dic[y] = ''\n\n    n, k = map(int, stdin.split())\n    s = stdin[len(''.join(list(stdin)[:n])):]\n    dic = {}\n    for i in range(len(s)):\n        if s[i] not in dic:\n            dic[s[i]] = s[i]\n    for i in range(len(s), n):\n        if s[i] in dic:\n            merge(dic, s[i], dic[s[i]], k)\n        else:\n            dic[s[i]] = s[i]\n\n    return find(s, dic)\n"
    },
    {
        "number": 4519,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4519,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4519,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\n\"\"\"\n\n\"\"\"\n\n0 1 1 1 0 0 0 1 1 0 0 1 1 0 0 1 1\n\n\"\"\"\n\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 4519,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[-1]\n    s = s.replace('1', '0')\n    return s\n\nfor _ in range(int(stdin.readline())):\n    print(solution(stdin.readline()))\n"
    },
    {
        "number": 4519,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the lexicographically smallest string that can be obtained from the input string of length $n$ if you can perform no more than $k$ moves.\n    \"\"\"\n    n, k = map(int, stdin.strip().split(' '))\n    s = stdin.strip()\n    return ''.join(sorted(s, key=str.__lt__))"
    },
    {
        "number": 4519,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[2:]\n    i = s.index('1')\n    m = 0\n    while m < k:\n        while i > 0 and s[i-1] <= s[i]:\n            i -= 1\n            m += 1\n        while i < n-1 and s[i+1] <= s[i]:\n            i += 1\n            m += 1\n        s = s[:i] + '1' + s[i+1:]\n    return s\n\ndef"
    },
    {
        "number": 4520,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 2\\n11 11\\n9 11\\n7 8\\n8 9\\n7 8\\n9 11\\n7 9\")\n    '3\\n1 4 7\\n'\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n    l.sort()\n    m = 0\n    for i in range(1, n):\n        if l[i] - l[i - 1] <= k:\n            m += 1\n    return str(m) + \"\\n\" + \" \".join([str(i) for i in l[m:]])\n"
    },
    {
        "number": 4520,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    segments = []\n    for i in range(n):\n        l, r = [int(x) for x in stdin.split()]\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    # print(segments)\n    s = []\n    for i, segment in enumerate(segments):\n        if i == 0:\n            continue\n        if segment[1] <= segments[i - 1][0]:\n            s.append(segment[1])\n    return str(len(s)) +'' +''.join(map(str, s))"
    },
    {
        "number": 4520,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # n, k = [int(x) for x in stdin.split()]\n    n, k = int(stdin.readline()), int(stdin.readline())\n    bad = collections.defaultdict(int)\n    for _ in range(n):\n        l, r = [int(x) for x in stdin.readline().split()]\n        for j in range(l, r+1):\n            bad[j] += 1\n    ans = 0\n    for j, v in bad.items():\n        if v <= k:\n            ans += 1\n    print(ans)\n    res = [0] * n\n    for j in bad:\n        res[j - 1] = 1\n    print(*res)\n    return ''\n\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('''7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n'''), '3')\n        self.assertEqual(solution('''5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n'''), '3')\n        self.assertEqual(solution('''6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n'''), '4')\n"
    },
    {
        "number": 4520,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    segments = [tuple([int(x) for x in line.strip().split(' ')]) for line in stdin]\n    segments.sort(key=lambda x: x[1])\n    result = n\n    for segment in segments:\n        if segment[0] < result:\n            result -= segment[1] - segment[0]\n    return result"
    },
    {
        "number": 4520,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.splitlines()\n    k, n = map(int, inputs[0].split())\n    segments = []\n    for s in inputs[1:]:\n        l, r = map(int, s.split())\n        segments.append((l, r))\n\n    bad = set()\n    for l, r in segments:\n        for i in range(l, r + 1):\n            bad.add(i)\n\n    if len(bad) < k:\n        return str(0)\n\n    segments = sorted(segments, key=lambda x: x[0])\n    n = len(segments)\n    ans = [n]\n\n    def canRemove(i, j):\n        if i >= n:\n            return False\n        l, r = segments[i]\n        if l > j:\n            return True\n        for t in range(l, j + 1):\n            if t in bad:\n                return True\n        return False\n\n    for i in range(n):\n        j = n - 1\n        while j >= i:\n            if canRemove(i, j):\n                ans.append(i)\n                j -= 1\n            else:\n                break\n    return str(len(ans))\n\nimport sys\nfrom io import StringIO\n\nstdin = '\\n'.join([\n'7 2',\n'11 11',\n'9 11',\n'7 8',\n'8 9',\n'7 8',\n'9 11',\n'7 9',\n])\n\ncaptured = StringIO()\nsys.stdin = captured\nsolution(stdin)\n\nexpected = '3\\n1 4 7\\n'\ncaptured.close()\nassert captured.getvalue() == expected\n\n\nstdin = '\\n'.join([\n'5 1',\n'29 30',\n'30 30',\n'29 29',\n'28 30',\n'30 30',\n])\n\ncaptured = StringIO()\nsys.stdin = captured\nsolution(stdin)\n\nexpected = '3\\n1 2 4\\n'\ncaptured.close()\nassert captured.getvalue() == expected\n\n\nstdin = '\\n'.join([\n'6 1',\n'2 3',\n'3 3',\n'2 3',\n'2 2',\n'2 3',\n'2 3',\n])\n\ncaptured = StringIO()\nsys.stdin = captured\nsolution(stdin)\n\nexpected = '4\\n1 3 5 6\\n'\ncaptured.close()\nassert captured.getvalue() == expected\n"
    },
    {
        "number": 4520,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # If there are no constraints on number of segments, do nothing\n    if not (n, k) or not n:\n        return ''\n    # Else, if there are constraints on the number of segments, count the\n    # number of distinct integer points by which each integer point can be covered\n    points = defaultdict(int)\n    for l, r in segments:\n        points[l] += 1\n        points[r] -= 1\n    # Create a sorted list of integers from 1 to n\n    lst = sorted(points.keys())\n    # Create a list of length n\n    answer = [0] * n\n    # The number of segments cannot be removed\n    remain = n\n    # Iterate through the sorted list\n    for i in lst:\n        # If the number of segments cannot be removed, exit the loop\n        if remain < 0:\n            break\n        # Add one segment to the answer\n        answer[i - 1] += 1\n        # Subtract one segment from the number of segments that cannot be removed\n        remain -= points[i]\n    # Return the answer as a string\n    return''.join(str(x) for x in answer)\n    \n"
    },
    {
        "number": 4520,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = sorted(map(lambda x: tuple(map(int, x.split())), stdin.splitlines()))\n\n    segment = []\n    for p1, p2 in s:\n        segment.append(p2)\n        if len(segment) > k:\n            segment.pop(0)\n\n    return str(len(segment)) +'' +''.join(map(str, segment))\n\nprint(solution(stdin))\n\n'''\n"
    },
    {
        "number": 4520,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    l = []\n    for i in range(1, n):\n        l.append(map(int, lines[i].split()))\n    print(min_segments(l, k))"
    },
    {
        "number": 4520,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    if k == 0:\n        return n\n    if n == 0:\n        return 0\n    points = set()\n    for l, r in segments:\n        for x in range(l, r):\n            points.add(x)\n    points = list(points)\n    points.sort()\n    ans = len(points) - k\n    if ans == 0:\n        return 0\n    for i in range(len(points) - 1, -1, -1):\n        if points[i] - points[i - 1] >= k:\n            ans = i\n            break\n    return ans\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4520,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = [int(x) for x in stdin.split()]\n    segments = [tuple([int(x) for x in stdin.split()]) for _ in range(n)]\n    \n    for i in range(n):\n        if sum(x > max(segments[i][0], segments[i][1]) for x in segments[i]) > k:\n            return str(i)\n    return \"0\""
    },
    {
        "number": 4521,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split()]\n    v = [int(x) for x in stdin.readline().split()]\n\n    best = 10 ** 8\n    for i in range(n):\n        for j in range(i + 1, n):\n            best = min(best, abs(x[i] - x[j]) / abs(v[i] - v[j]))\n\n    return str(best)\n\nassert(solution('''3\n1 3 2\n-100 2 3''') == '3')\nassert(solution('''5\n2 1 4 3 5\n2 2 2 3 4''') == '19')\nassert(solution('''2\n2 1\n-3 0''') == '0')\nassert(solution('''4\n1 1 1 1\n2 2 2 2''') == '10')\n\nprint(solution(stdin.read()))"
    },
    {
        "number": 4521,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = tuple(map(int, stdin.split(\"\\n\")[1].split()))\n    v = tuple(map(int, stdin.split(\"\\n\")[2].split()))\n    return str(sum([(x[i] + t * v[i]) ** 2 for i in range(n)]))\n    \n    \n"
    },
    {
        "number": 4521,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n\n    x = [int(x) for x in stdin.readline().split()]\n    v = [int(x) for x in stdin.readline().split()]\n\n    x_max = max(x)\n    x_min = min(x)\n\n    if n == 2:\n        return 0\n    if n == 3:\n        return abs(x[2] - x[1])\n\n    if n == 1:\n        return 0\n\n    xs = set(x)\n    if x_max > x_min:\n        xs.add(x_min)\n\n    xs = sorted(list(xs))\n\n    x_max = max(xs)\n    x_min = min(xs)\n\n    s = 0\n    for i in range(n):\n        s += abs(xs[i] - xs[i - 1]) * v[i]\n\n    return s\n"
    },
    {
        "number": 4521,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = [map(int, stdin.readline().split()) for _ in range(n)]\n    points.sort(key=lambda t: t[0])\n    speeds = map(int, stdin.readline().split())\n    \n    d = []\n    for i in range(n):\n        d.append([])\n        for j in range(n):\n            d[-1].append(abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]) + abs(speeds[i] - speeds[j]))\n    \n    res = 0\n    for i in range(n):\n        res += min(d[i])\n    \n    return str(res)"
    },
    {
        "number": 4521,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    v = list(map(int, stdin.readline().split()))\n    d = [1e6] * n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            d[i] = min(d[i], abs(x[i] - x[j]) / v[i] + abs(i - j))\n    return str(sum(d))\n"
    },
    {
        "number": 4521,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert solution(\n    '''3\n1 3 2\n-100 2 3'''\n) == '3'\n\nassert solution(\n    '''5\n2 1 4 3 5\n2 2 2 3 4'''\n) == '19'\n\nassert solution(\n    '''2\n2 1\n-3 0'''\n) == '0'\n\nassert solution(\n    '''8\n1 2 3 4 5 6 7 8'''\n) == '18'\n\nassert solution(\n    '''5\n2 1 4 3 5\n2 2 2 3 4'''\n) == '18'\n"
    },
    {
        "number": 4521,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split(\" \")))\n    v = list(map(int, stdin.readline().strip().split(\" \")))\n    d = [0] * n\n    m = 10 ** 8\n    for i in range(n):\n        d[i] = d[i - 1] + abs(x[i] - x[i - 1]) * v[i]\n        m = min(m, d[i])\n    return str(sum(d))\n\nassert(solution(io.StringIO(\"\"\"3\n1 3 2\n-100 2 3\"\"\")) == \"3\")\nassert(solution(io.StringIO(\"\"\"5\n2 1 4 3 5\n2 2 2 3 4\"\"\")) == \"19\")\nassert(solution(io.StringIO(\"\"\"2\n2 1\n-3 0\"\"\")) == \"0\")\n\n\"\"\"\nUnfortunately, we know the speed of the points. We need to use a constant speed to calculate the coordinates of the points.\n\nThe equation $x_i + t \\cdot v_i$ is the coordinate of the $i$-th point at the moment $t$ ($t$ can be non-integer).\n\nThe equation $x_i$ is the initial coordinate of the $i$-th point.\n\nTo calculate $x_i$ we can use equation $x_i = x_0 + v_0 \\cdot t$. We know that the speed is constant, so we can drop the variable $v_0$.\n\nThe speed of the point is constant over time.\n\nFor example, the point $i$ moves with constant speed from $x_i = x_0$ and over time we can get $x_i = x_0 + v_0 \\cdot t$.\n\nThe point $j$ has the same speed as the point $i$ ($v_j = v_i$).\n\nThe point $j$ moves with constant speed from $x_j = x_0 + v_j \\cdot t$.\n\nThe speed of the point is constant over time.\n\nFor example, the point $j$ moves with constant speed from $x_j = x_0 + v_j \\cdot t$.\n\nThe points move with constant speed from $x_i = x_0 + v_i \\cdot t$ and $x_j = x_0 + v_j \\cdot t$.\n\nThe minimum distance between the points is the absolute value of the distance between the points minus the speed multiplied by the time.\n\nFor example, $x_1 = x_2 - v_2 \\cdot t$, $x_2 = x_1 + v_1 \\cdot t$, the distance between the points is $|x_2 - x_1| = v_1 \\cdot t \\cdot (x_2 - x_1)$.\n\nThe equation $x_i = x_0 + v_i \\cdot t$ means that the points move with constant speed from $x_i = x_0 + v_i \\cdot t$ over time.\n\nThe equation $x_i = x_0 + v_i \\cdot t$ means that the points move with constant speed from $x_i = x_0 + v_i \\cdot t$ over time.\n\nThe equation $x_i = x_0 + v_i \\cdot t$ means that the points move with constant speed from $x_i = x_0 + v_i \\cdot t$ over time.\n\nThe equation $x_i = x_0 + v_i \\cdot t$ means that the points move with constant speed from $x_i = x_0 + v_i \\cdot t$ over time.\n\nWe calculate the minimum distance from the point to the line between the points $i$ and $j$. The equation $\\min(|x_j - x_i|, v_i \\cdot t)$ is equal to the equation $\\min(x_j - x_i, v_i \\cdot t)$.\n\nThe minimum distance from the point to the line between the points $i$ and $j$ is equal to the absolute value of the distance between the points minus the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nFor example, the minimum distance between the points $i$ and $j$ is equal to the absolute value of the distance between the points minus the speed multiplied by the time.\n\nFor example, the minimum distance between the points $i$ and $j$ is equal to the absolute value of the distance between the points minus the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points, less the speed multiplied by the time.\n\nThe absolute value of the distance between the points is the distance between the points,"
    },
    {
        "number": 4521,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = tuple(map(int, stdin.readline().strip().split()))\n    v = tuple(map(int, stdin.readline().strip().split()))\n    n = len(x)\n    max_v = max(v)\n    min_v = min(v)\n    if min_v < 0:\n        raise ValueError('Invalid speed')\n    if max_v >= n:\n        raise ValueError('All points are in the same line')\n    a = [0] * n\n    res = 0\n    for i in range(n):\n        a[i] = x[i] + v[i]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] < a[i]:\n                res += 1\n    return str(res)\n\nassert(solution('''3''') == '3')\nassert(solution('''2''') == '0')\nassert(solution('''5''') == '19')\nassert(solution('''2''') == '0')\nassert(solution('''3''') == '3')\nassert(solution('''3''') == '3')\nassert(solution('''3''') == '3')\nassert(solution('''3''') == '3')\nassert(solution('''5''') == '19')\nassert(solution('''1''') == '0')\nassert(solution('''100''') == '99')\nassert(solution('''101''') == '100')\nassert(solution('''1000''') == '999')\nassert(solution('''1001''') == '1000')\nassert(solution('''10000''') == '9999')\nassert(solution('''100000''') == '99999')\nassert(solution('''12345''') == '1234')\nassert(solution('''12345678''') == '12345')\nassert(solution('''123456789''') == '12345')\nassert(solution('''12345678901''') == '123456789')\nassert(solution('''1234567890123''') == '12345678901')\nassert(solution('''123456789012345''') == '12345678901')\nassert(solution('''123456789012345678''') == '12345678901')\nassert(solution('''1234567890123456789''') == '12345678901')\nassert(solution('''123456789012345678901''') == '12345678901')\nassert(solution('''123456789012345678901234''') == '12345678901')\nassert(solution('''1234567890123456789012345''') == '12345678901')\nassert(solution('''1234567890123456789012345678''') == '12345678901')\nassert(solution('''12345678901234567890123456789''') == '12345678901')\nassert(solution('''1234567890123456789012345678901''') == '12345678901')\nassert(solution('''123456789012345678901234567890123''') == '12345678901')\nassert(solution('''12345678901234567890123456789012345''') == '12345678901')\nassert(solution('''12345678901234567890123456789012345678''') == '12345678901')\nassert(solution('''123456789012345678901234567890123456789''') == '12345678901')\nassert(solution('''12345678901234567890123456789012345678901''') == '12345678901')\nassert(solution('''1234567890123456789012345678901234567890123''') == '12345678901')\nassert(solution('''123456789012345678901234567890123456789012345''') == '12345678901')\nassert(solution('''1234567890123456789012345678901234567890123456789''') == '12345678901')\nassert(solution('''123456789012345678901234567890123456789012345678901''') == '12345678901')\nassert(solution('''12345678901234567890123456789012345678901234567890123''') == '12345678901')\nassert(solution('''1234567890123456789012345678901234567890123456789012345''') == '12345678901')\nassert(solution('''12345678901234567890123456789012345678901234567890123456789''') == '12345678901')\nassert(solution('''1234567890123456789012345678901234567890123456789012345678901''') == '12345678901')\nassert(solution('''123456789012345678901234567890123456789012345678901234567890123''') == '12345678901')\nassert(solution('''123456789012345678901234567890123456789012345678901234567890123456789''') == '12345678901')\nassert(solution('''1234567890123456789012345678901234567890123456789012345678901234567890123''') == '12345678901')\nassert(solution('''12345678901234567890123456789"
    },
    {
        "number": 4521,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = tuple(map(int, stdin.readline().strip().split()))\n    v = tuple(map(int, stdin.readline().strip().split()))\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += max(0, abs(x[i] - x[j]) - abs(v[i] - v[j]) + 1)\n    return str(result)"
    },
    {
        "number": 4521,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    v = list(map(int, stdin.readline().split()))\n    result = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            result += max(abs(x[i] - x[j]), abs(x[j] + v[i] - x[i]), abs(x[i] + v[j] - x[j]))\n    return str(result)\n\n\nassert(solution('''3\n1 3 2\n-100 2 3''') == '3')\nassert(solution('''5\n2 1 4 3 5\n2 2 2 3 4''') == '19')\nassert(solution('''2\n2 1\n-3 0''') == '0')\nassert(solution('''7\n1 2 3 4 5 6 7\n1 2 2 3 4 5 6\n1 2 2 3 4 5 6''') == '7')\nassert(solution('''15\n4 7 8 9 10 11 12 13 14 15\n4 7 8 9 10 11 12 13 14 15\n4 7 8 9 10 11 12 13 14 15\n4 7 8 9 10 11 12 13 14 15\n4 7 8 9 10 11 12 13 14 15\n4 7 8 9 10 11 12 13 14 15\n4 7 8 9 10 11 12 13 14 15\n4 7 8 9 10 11 12 13 14 15''') == '210')\nassert(solution('''10\n9 6 8 7 6 8 9 9\n4 7 6 5 6 7 5 8\n7 8 5 4 4 5 4 7\n6 7 4 4 4 4 4 6\n7 7 4 4 4 4 4 7\n6 8 4 4 4 4 4 6\n5 8 4 4 4 4 4 5\n6 9 4 4 4 4 4 6\n5 8 4 4 4 4 4 5''') == '280')\nassert(solution('''8\n1 2 3 4 5 6 7 8\n2 1 1 2 3 4 5 6\n3 1 1 2 3 4 5 6\n4 1 1 2 3 4 5 6\n5 1 1 2 3 4 5 6\n6 1 1 2 3 4 5 6\n7 1 1 2 3 4 5 6''') == '96')\nassert(solution('''13\n
    },
    {
        "number": 4522,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(2000)\n\nclass Node:\n    def __init__(self, label):\n        self.label = label\n        self.children = {}\n        self.visited = False\n\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-1b5870a0-82b1-11e8-9c24-c9e6b0cfe5e1.png\n[Image]: https://user-images.githubusercontent.com/32654120/72689715-"
    },
    {
        "number": 4522,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4522,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    tree = [[int(x) for x in stdin.split()] for _ in range(n - 1)]\n    queries = [int(x) for x in stdin.split()]\n    solver = Solver(tree, queries)\n    solver.solve()\n    return''.join(str(x) for x in solver.get_answers())"
    },
    {
        "number": 4522,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [map(int, stdin.split()) for _ in range(n - 1)]\n    queries = [int(x) for x in stdin.split()]\n\n    return '\\n'.join(str(len(get_edges(edges, queries[i], queries[i + 1]))) for i in range(m - 1))\n\n\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    edges = []\n    for _ in range(n - 1):\n        u, v, w = map(int, stdin.readline().split())\n        edges.append((u, v, w))\n\n    queries = [int(x) for x in stdin.readline().split()]\n    \n    result = []\n    for query in queries:\n        queue = [(1, edges)]\n        visited = set()\n        result.append(bfs(n, edges, query, queue, visited))\n    \n    return''.join(map(str, result))\n\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n\n    def dfs(v: int, n: int) -> int:\n        visited.add(v)\n        for nbr in nbrs[v]:\n            if nbr in visited:\n                continue\n            w = edges[v, nbr]\n            if w > 0 and max_w(v, nbr) < q[0]:\n                ans[0] += 1\n            dfs(nbr, n)\n\n    edges = defaultdict(int)\n    max_w = defaultdict(lambda: -1)\n    nbrs = defaultdict(list)\n    for _ in range(n - 1):\n        u, v, w = [int(x) for x in stdin.strip().split()]\n        edges[u, v] = w\n        max_w[u, v] = w\n        nbrs[u].append(v)\n        nbrs[v].append(u)\n    q = [int(x) for x in stdin.strip().split()]\n\n    ans = [0]\n    visited = set()\n    for v in range(1, n):\n        if v in visited:\n            continue\n        dfs(v, n)\n    return''.join(str(x) for x in ans)\n\nassert(solution('7 5') == '21 7 15 21 3')\nassert(solution('1 2') == '0 0')\nassert(solution('3 3') == '1 3 3')\nassert(solution('1 2 1') == '1 3 3')\nassert(solution('2 4 1') == '1 3 3')\nassert(solution('4 5 2') == '1 3 3')\nassert(solution('5 7 4') == '1 3 3')\nassert(solution('3 6 2') == '1 3 3')\nassert(solution('5 2 3 4 1') == '1 3 3')\nassert(solution('4 1 4 2 1 4 3 2 1 4 1 3 4 4 3 3 2 3 2') == '1 3 3')\n\n\n-----My Submission-----"
    },
    {
        "number": 4522,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    edges = []\n    for _ in range(n - 1):\n        u, v, w = list(map(int, stdin.split()))\n        edges.append((u, v, w))\n    queries = list(map(int, stdin.split()))\n\n\n\n-----Test-----\n\n\"\"\"\ndef"
    },
    {
        "number": 4523,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n@pytest.mark.parametrize('n, arr, result', [\n    (3, [1, 2, 2], True),\n    (4, [5, 5, 5, 5], True),\n    (2, [1, 2], False),\n    (1, [1], True),\n    (5, [5, 5, 5, 5, 5], True),\n])\ndef"
    },
    {
        "number": 4523,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"YES\"\n    a = [int(x) for x in stdin.split()]\n    \n    if len(a) == 1:\n        return \"NO\"\n    a.sort()\n    dif = [abs(a[i] - a[i+1]) for i in range(len(a)-1)]\n    dif_sum = sum(dif)\n    return \"YES\" if dif_sum == 0 or dif_sum == 1 else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4523,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n = int(stdin.readline())\n        if n == 1:\n            print('YES')\n            continue\n        a = list(map(int, stdin.readline().split()))\n        l = len(a)\n        if l == 1:\n            print('YES')\n            continue\n        flag = False\n        for i in range(l):\n            for j in range(i+1, l):\n                if abs(a[i]-a[j]) <= 1:\n                    if a[i] > a[j]:\n                        a[j] += 1\n                    else:\n                        a[i] += 1\n                    flag = True\n                    break\n            if flag:\n                break\n        if flag:\n            print('YES')\n        else:\n            print('NO')\n\nsolution('''5\n3\n1 2 2\n4\n5 5 5 5\n3\n1 2 4\n4\n1 3 4 4\n1\n100\n''')\n"
    },
    {
        "number": 4523,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if the array can be made up of a single element using at most one move.\"\"\"\n    n = stdin.readline().strip()\n    while n:\n        a = [int(x) for x in stdin.readline().strip().split(\" \")]\n        if len(a) == 1:\n            print(\"YES\")\n        else:\n            if len(set(a)) == 1:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n        n = stdin.readline().strip()\n"
    },
    {
        "number": 4523,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split(' ')]\n        a = sorted(a)\n        if n < 2:\n            print(\"YES\")\n            continue\n        n -= 2\n        i = 0\n        while i < n:\n            if abs(a[i] - a[i + 1]) <= 1:\n                a.pop(i)\n                n -= 1\n            else:\n                i += 1\n        print(\"NO\" if n!= 0 else \"YES\")\n"
    },
    {
        "number": 4523,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split(' ')]\n\n        if len(a) == 1:\n            print(\"YES\")\n            continue\n\n        a_min_val = min(a)\n        a.remove(a_min_val)\n\n        a_max_val = max(a)\n        a.remove(a_max_val)\n\n        if a_min_val - a_max_val <= 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4523,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n-----\n\nCopyright \u00a9 2016. Mark Karpov <markkarpov@gmail.com>. All rights reserved.\n\nLicensed under the MIT License. For the full text see LICENSE in the project root directory.\n\"\"\"\nfrom typing import List\n\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4523,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('') == '')\nassert(solution('1') == 'NO')\nassert(solution('1 2 2') == 'NO')\nassert(solution('4') == 'NO')\nassert(solution('1 2 2') == 'NO')\nassert(solution('5') == 'NO')\nassert(solution('1 2 2') == 'NO')\nassert(solution('3') == 'NO')\nassert(solution('1 2 2') == 'YES')\nassert(solution('4') == 'NO')\nassert(solution('5 5 5 5') == 'NO')\nassert(solution('3') == 'NO')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert(solution('1 2 4') == 'NO')\nassert(solution('1 3 4 4') == 'YES')\nassert(solution('1') == 'NO')\nassert(solution('100') == 'YES')\nassert("
    },
    {
        "number": 4523,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        array = list(map(int, stdin.readline().strip().split(' ')))\n        solution = check_if_one(array, n)\n        print('YES' if solution else 'NO')\n\ndef"
    },
    {
        "number": 4523,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4524,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    a, b = a >> 1, b >> 1\n    b = b % 2\n    a, b = a % 2, b % 2\n    res = 0\n    while b > 0:\n        a, b = a ^ b, (b << 1) & 0xffff_ffff_ffff_ffff\n        res = res ^ a\n    return str(res)"
    },
    {
        "number": 4524,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b > 0:\n        c = a\n        while True:\n            a = (a & b)\n            if a & 1 == 1:\n                a ^= b\n            a, b = b, a\n            if a & 1 == 1:\n                a ^= b\n            if b == 0:\n                break\n        return str(a)\n    else:\n        return \"0\"\n    \n"
    },
    {
        "number": 4524,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    a = int(stdin)\n    while a > 0:\n        if a & 1:\n            a |= m\n        m >>= 1\n        a >>= 1\n\n    return str(a)\n"
    },
    {
        "number": 4524,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = int(stdin)\n    res = 0\n    while a:\n        res += a & 1\n        a >>= 1\n        a &= m\n    return str(res)"
    },
    {
        "number": 4524,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    \n    res = 0\n    while b > 0:\n        res += a\n        b = (b - 1) // 2\n        a = (a - 1) & b\n    \n    return str(res)"
    },
    {
        "number": 4524,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = int(stdin[0:n])\n    b = int(stdin[n:])\n    \n    answer = 0\n    while b:\n        answer = (answer << 1) | (b & 1)\n        b >>= 1\n    return str(answer)\n\ndef"
    },
    {
        "number": 4524,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4524,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(decimalToBinary(binaryToDecimal(stdin.strip().split(\"\\n\")) & binaryToDecimal(stdin.strip().split(\"\\n\"))))\n\n\ndef"
    },
    {
        "number": 4524,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a, b = a % 10 ** b, 10 ** b\n    a, b = bin(a)[2:], bin(b)[2:]\n    while b:\n        if b[-1] == \"1\":\n            a += \"1\"\n            b = b[:-1]\n        else:\n            a += \"0\"\n            b = b[:-1]\n    return str(int(a, 2))\n"
    },
    {
        "number": 4524,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\ndef"
    },
    {
        "number": 4525,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = [2*n//2 for _ in range(n//2)]\n    if n % 2:\n        result.append(n//2 + 1)\n    return 'YES\\n' + '\\n'.join(map(str, result))"
    },
    {
        "number": 4525,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        n = int(stdin)\n        if n % 2 == 0:\n            print(\"NO\")\n            continue\n        s = n//2 + 1\n        a = [2] + [1]*s + [2]\n        if sum(a[:s]) == sum(a[s:]):\n            print(\"YES\")\n            print(\" \".join(str(a[i]) for i in range(n//2)))\n        else:\n            print(\"NO\")\nsolution(stdin.readline())\n"
    },
    {
        "number": 4525,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n@check\ndef"
    },
    {
        "number": 4525,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        s = 0\n        if n % 2 == 0:\n            s += n // 2\n            for i in range(n // 2):\n                s += 2 * i + 1\n        else:\n            s += (n - 1) // 2\n            for i in range((n - 1) // 2):\n                s += 2 * i + 1\n        print(\"YES\" if s == 2 * (n // 2) + 2 * (n - 1) // 2 else \"NO\")"
    },
    {
        "number": 4525,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = [0] * (2 * n // 2)\n        half_n = n // 2\n        for i in range(n):\n            a[i] = 2 * i + 1\n            a[half_n + i] = 2 * i + 2\n        if sum(a[:half_n]) == sum(a[half_n + 1:]):\n            print('YES')\n            print(*a[:half_n])\n        else:\n            print('NO')\nsolution(stdin)\n"
    },
    {
        "number": 4525,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        numbers = [int(x) for x in stdin.readline().strip().split(' ')]\n        flag = False\n        for i in range(n // 2):\n            if numbers[i] % 2 == 0 and numbers[n - i - 1] % 2!= 0:\n                flag = True\n                break\n        if flag:\n            stdout.write('NO\\n')\n        else:\n            stdout.write('YES\\n')\n            stdout.write(' '.join(str(x) for x in numbers))"
    },
    {
        "number": 4525,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n = int(stdin.readline())\n        a = [2, 1, 5, 4, 6]\n        if n % 2 == 0:\n            a[n // 2:] = [j for j in range(n // 2 + 1, n + 1) if j % 2 == 1]\n        else:\n            a[n // 2 + 1:] = [j for j in range(n // 2 + 2, n + 1, 2)]\n        print('NO' if sum(a[:n // 2])!= sum(a[n // 2 + 1:]) else 'YES')"
    },
    {
        "number": 4525,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        if n % 2 == 0:\n            a = [2] * n\n            a[:n // 2] = [1] * (n // 2)\n            a[n // 2:] = [0] * (n // 2)\n            print('YES' +'' +''.join(map(str, a)))\n        else:\n            print('NO')\n    return \"\""
    },
    {
        "number": 4525,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        if n % 2 == 1:\n            stdout.write(\"NO\\n\")\n        else:\n            a = [0] * n\n            a[:n // 2] = [2] * (n // 2)\n            a[n // 2:] = [1] * (n // 2)\n            stdout.write(\"YES\\n\" + \" \".join(str(x) for x in a))\n\n    return \"\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n = int(stdin.readline())\n        if n % 2:\n            print('NO')\n            continue\n        if n == 2:\n            print('YES')\n            continue\n        if n == 4:\n            print('YES')\n            continue\n        if n == 6:\n            print('YES')\n            continue\n        if n == 8:\n            print('YES')\n            continue\n        if n == 10:\n            print('YES')\n            continue\n        print('NO')"
    },
    {
        "number": 4526,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    n = int(stdin.readline())\n    a = [int(stdin.readline()) for _ in range(n)]\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i] + a[j] == 2 * a[i] + a[j]:\n                count += 1\n    return str(count)\n\nassert(solution('''5\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1''')) == '5'\nassert(solution('''3\n9\n3 1 4 1 5 9 2 6 5\n3\n1 1 2\n5\n1 1 1 1 1\n8\n8 7 6 5 4 3 2 1\n1\n1''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '2'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '1'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n1''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '1'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4 3 2 1\n1\n2''')) == '0'\nassert(solution('''3\n6\n2 3 1 5 3 7\n2\n1 1 1 1 1\n6\n8 7 5 4 4"
    },
    {
        "number": 4526,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4526,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        for i in range(1, n):\n            if a[i] > a[i - 1]:\n                a[i] = a[i - 1] + a[i]\n        print(a.count(a[0]))"
    },
    {
        "number": 4526,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4526,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4526,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [int(x) for x in stdin.split('\\n')]\n\n    ans = 0\n    for i in range(n):\n        if i + 1 < n:\n            if numbers[i] == numbers[i+1] + 1:\n                ans += 1\n        if i + 2 < n:\n            if numbers[i] == numbers[i+2] + 2:\n                ans += 1\n\n    return str(ans)"
    },
    {
        "number": 4526,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4526,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\nT = int(input())\nfor i in range(T):\n    print(solution(input()))\n"
    },
    {
        "number": 4526,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 0:\n        n -= 1\n        nums = [int(x) for x in stdin.strip().split()]\n        i = 0\n        j = 0\n        result = 0\n        while i < len(nums):\n            if i == j:\n                i += 1\n            elif j < i < j + 2:\n                result += nums[j]\n                j += 1\n            else:\n                result += nums[j]\n                result += nums[i]\n                j += 1\n                i += 1\n        print(result)\n        n -= 1\nsolution(input())\n"
    },
    {
        "number": 4526,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_unicode(stdin))\n\ndef"
    },
    {
        "number": 4527,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    testcases = int(stdin.readline().strip())\n    segments = []\n    for _ in range(int(stdin.readline().strip())):\n        segments.append(tuple(map(int, stdin.readline().strip().split())))\n    # define the function\n    def check(a: tuple, b: tuple) -> bool:\n        return a[0] <= b[0] <= a[1] and a[0] <= b[1] <= a[1]\n    def isIntersect(a: tuple, b: tuple) -> bool:\n        return a[0] <= b[0] <= a[1] and a[0] <= b[1] <= a[1]\n    def intersect(a: tuple, b: tuple) -> bool:\n        return a[0] <= b[1] and a[1] >= b[0]\n    def getFurthest(a: tuple, b: tuple) -> tuple:\n        l1, r1 = a\n        l2, r2 = b\n        l3 = l1 if l1 > l2 else l2\n        r3 = r1 if r1 < r2 else r2\n        return (l3, r3)\n    # execute the function\n    result = [0] * testcases\n    for i in range(testcases):\n        segments.sort(key=lambda x: x[1] - x[0])\n        l, r = segments[0][0], segments[0][1]\n        # get the furthest segment\n        furthest = segments[0]\n        for j in range(1, len(segments)):\n            l1, r1 = segments[j - 1]\n            l2, r2 = segments[j]\n            furthest = getFurthest(l1, l2)\n            if isIntersect(l1, l2):\n                l = max(l, max(l1, l2))\n                r = min(r, min(r1, r2))\n            elif not isIntersect(l1, r2) and not isIntersect(l2, r1):\n                r = max(r, max(r1, r2))\n        result[i] = len(segments) - max(l, r)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4527,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4527,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    segments = []\n    for line in stdin:\n        l, r = int(line.split()[0]), int(line.split()[1])\n        segments.append((l, r))\n    segments = sorted(segments, key=lambda x: x[1])\n    subsets = [None for _ in range(t)]\n    answer = []\n    for i in range(len(segments)):\n        # find the subset that overlaps with the ith segment\n        overlap_subset = None\n        for j in range(len(subsets)):\n            if j == i or not subsets[j]:\n                continue\n            if overlap_subset is None or overlap_subset[1] < subsets[j][0]:\n                overlap_subset = subsets[j]\n        if overlap_subset:\n            subsets[i] = overlap_subset\n    for subset in subsets:\n        if subset:\n            answer.append(len(subset))\n        else:\n            answer.append(0)\n    return''.join(str(a) for a in answer)\n"
    },
    {
        "number": 4527,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        segments = []\n        for j in range(n):\n            l, r = stdin.readline().strip().split(' ')\n            l = int(l)\n            r = int(r)\n            segments.append([l, r])\n        segments = sorted(segments, key=lambda x: x[0])\n        used = set()\n        res = 0\n        for j in range(n):\n            l, r = segments[j][0], segments[j][1]\n            if not (l in used or r in used):\n                used.add(l)\n                used.add(r)\n                res += 1\n        print(res)\n    return \"\""
    },
    {
        "number": 4527,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = [\n        tuple(map(int, line.strip().split(\" \"))) for line in stdin.readlines()\n    ]\n    intersect = get_intersect(segments)\n    sorted_segments = sorted(segments, key=lambda x: x[1] - x[0])\n    for i in range(len(sorted_segments)):\n        for j in range(i + 1, len(sorted_segments)):\n            if (\n                sorted_segments[i][0] < sorted_segments[j][0]\n                < sorted_segments[i][1]\n                < sorted_segments[j][1]\n            ):\n                if not (\n                    sorted_segments[j][0] <= intersect[0]\n                    and intersect[1] <= sorted_segments[j][1]\n                ):\n                    print(i + 1, j + 1)\n                    return\n"
    },
    {
        "number": 4527,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for _ in range(n):\n        l, r = stdin.readline().split()\n        segments.append((int(l), int(r)))\n    segments.sort()\n    max_size = 0\n    solutions = []\n    for i in range(n):\n        size = 0\n        for j in range(i + 1, n):\n            if segments[j][0] <= segments[i][1] and segments[i][1] <= segments[j][1]:\n                size += 1\n        if size > max_size:\n            max_size = size\n            solutions = [i + 1]\n        elif size == max_size:\n            solutions.append(i + 1)\n    return''.join(map(str, solutions))\n\nassert solution('''4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n''') == '3 4'\nassert solution('''7\n7\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n''') == '3 7'\nassert solution('''10\n10\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n''') == '7'\nassert solution('''20\n20\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n5 6\n6 7\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n''') == '1 2'\nassert solution('''21\n21\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n5 6\n6 7\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n''') == '1 2 3 4'\nassert solution('''30\n30\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n5 6\n6 7\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n''') == '1 2 3 4 5'\nassert solution('''31\n31\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n5 6\n6 7\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n''') == '1 2 3 4 5 6'\nassert solution('''32\n32\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n5 6\n6 7\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n''') == '1 2 3 4 5 6 7'\nassert solution('''37\n37\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n5 6\n6 7\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n''') == '1 2 3 4 5 6 7 8'\nassert solution('''38\n38\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n5 6\n6 7\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n''') == '1 2 3 4 5 6 7 8 9'\nassert solution('''39\n39\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n5 6\n6 7\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n''') == '1 2 3 4 5 6 7 8 9 10'\nassert solution('''40\n40\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n5 6\n6 7\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n''') == '1 2 3 4 5 6 7 8 9 10 11'\nassert solution('''41\n41\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n5 6\n6 7\n7 7\n8 9\n9 10\n1 10\n2 8\n2 5\n3 4\n4 4\n''') == '1 2 3 4 5 6 7 8 9 10 11 12'\nassert solution('''42\n42\n1 10\n2 8\n2 5\n3 4\n4 4\n6 8\n"
    },
    {
        "number": 4527,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def intersects(s1: Segment, s2: Segment) -> bool:\n        l1, r1 = s1\n        l2, r2 = s2\n        return l1 <= l2 and r1 >= r2\n\n    def non_intersects(s1: Segment, s2: Segment) -> bool:\n        l1, r1 = s1\n        l2, r2 = s2\n        return l1 >= l2 and r1 <= r2\n\n    n = int(stdin.readline())\n    segments = [Segment(*stdin.readline().split(' ')) for _ in range(n)]\n    segments.sort(key=lambda x: x[1] - x[0], reverse=True)\n    # print(segments)\n\n    def test(subset):\n        return all(\n            [\n                non_intersects(s1, s2) or intersects(s1, s2)\n                for s1, s2 in zip(subset, subset[1:])\n            ]\n        )\n\n    def test_all(subsets):\n        return all(test(s) for s in subsets)\n\n    for i in range(1, n + 1):\n        if test_all(subsets := [s for j, s in enumerate(segments) if j % i == 0]):\n            return str(i)\n\n    return str(n)\n\n\nassert solution('''4\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n''') == '3'\nassert solution('''5\n4\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n''') == '4'\nassert solution('''2\n5\n1 5\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n''') == '4'\nassert solution('''5\n3\n1 3\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n''') == '4'\nassert solution('''3\n4\n1 3\n2 4\n2 3\n3 4\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n''') == '3'\nassert solution('''1\n1\n''') == '1'\nassert solution('''5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n''') == '3'\nassert solution('''5\n5\n1 5\n2 3\n2 5\n3 5\n2 2\n3\n1 3\n2 4\n2 3\n''') == '4'\n"
    },
    {
        "number": 4527,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        segments = []\n        for _ in range(n):\n            l, r = map(int, stdin.readline().strip().split())\n            segments.append((l, r))\n        segments.sort(key=lambda s: s[0])\n        left = [0]\n        for i, (l, r) in enumerate(segments):\n            left.append(left[-1] + (r - l))\n        result = 0\n        for i in range(1, len(left)):\n            if left[i] - left[i-1] > result:\n                result = left[i] - left[i-1]\n        print(result)\n    return \"\"\n\nsolution(None)\n\"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        l, r = sorted(list(map(int, stdin.readline().split())))\n        if l == r:\n            print(1)\n        else:\n            print(2)\n    return 'done'\n\nprint(solution(stdin))\n\n\n\n\n\nn = int(input())\nl = []\nfor i in range(n):\n    l.append(list(map(int, input().split())))\n\nl.sort(key = lambda x: (x[1], x[0]))\nprint(l)\n\ntmp = []\nresult = []\nfor i in range(len(l)):\n    if len(tmp) > 0:\n        if tmp[-1] <= l[i][0]:\n            result.append(tmp)\n            tmp = []\n    tmp.append(l[i][1])\nresult.append(tmp)\nprint(result)\n\ndef"
    },
    {
        "number": 4527,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from collections import namedtuple\n    Segment = namedtuple('Segment', ['left', 'right'])\n    t = int(stdin.readline().strip())\n    segments = [Segment(*stdin.readline().strip().split(' ')) for _ in range(int(stdin.readline().strip()))]\n    segments.sort(key=lambda segment: segment.left)\n    max_len = 0\n    dp = [0 for _ in range(len(segments) + 1)]\n    for i in range(len(segments)):\n        for j in range(i, len(segments)):\n            if segments[i].left <= segments[j].right and dp[j] < dp[i] + 1:\n                dp[j] = dp[i] + 1\n                max_len = max(max_len, dp[j])\n    return max_len"
    },
    {
        "number": 4528,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_minutes(h, m):\n        if h == 0 and m == 0:\n            return 'IMPOSSIBLE'\n        elif h == 0:\n            return m\n        elif m == 0:\n            return 24*60 + h - 1\n        else:\n            return (h-1)*60 + m - 1\n    \n    num = int(stdin.readline().strip())\n    res = []\n    for _ in range(num):\n        h, m = map(int, stdin.readline().strip().split())\n        res.append(min_minutes(h, m))\n    \n    for i in range(len(res)):\n        print(res[i])"
    },
    {
        "number": 4528,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4528,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        h, m = map(int, stdin.strip().split())\n        h = (h + m // 60) % 24\n        print(60 * h + m % 60)\n    return ''\n"
    },
    {
        "number": 4528,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Write your code here"
    },
    {
        "number": 4528,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    for i in range(1, t + 1):\n        h, m = map(int, lines[i].split(\" \"))\n        hours = h + 24 * (m / 60)\n        minutes = m % 60\n        if hours == 0 and minutes == 0:\n            hours = 24\n        print(int(hours * 60 + minutes))\n    return ''"
    },
    {
        "number": 4528,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4528,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    res = []\n    for _ in range(t):\n        h, m = map(int, stdin.readline().split())\n        res.append(abs(24 - h) * 60 + abs(60 - m))\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 4528,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    t = int(stdin.readline().strip())\n    results = []\n    for _ in range(t):\n        h, m = [int(x) for x in stdin.readline().split()]\n        results.append(h * 60 + m)\n    return \"\\n\".join(str(result) for result in results)"
    },
    {
        "number": 4528,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    def count_minutes_before_new_year(h: int, m: int) -> int:\n        return (h * 60) + m - 60\n\n    for _ in range(t):\n        h, m = map(int, stdin.readline().strip().split(\" \"))\n        print(count_minutes_before_new_year(h, m))\n\n    return \"\""
    },
    {
        "number": 4528,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 4529,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = stdin.readline().strip()\n    x = [stdin.readline().strip() for _ in range(int(stdin.readline()))]\n    r = ''.join(r)\n    x = [''.join(x) for x in x]\n    a = list(r)\n    if not x:\n        return '-1'\n    n = len(r)\n    if not n:\n        return '-1'\n    x = [i for i in x if i]\n    l = len(x)\n    if not l:\n        return '-1'\n    if l == 1:\n        return '1 1'\n    b = [None] * l\n    c = [None] * l\n    for i in range(l):\n        b[i] = len(x[i])\n        c[i] = len(r) - len(x[i])\n    b.sort()\n    c.sort()\n    for i in range(l):\n        if b[i] == c[i]:\n            continue\n        if c[i] > b[i]:\n            return '-1'\n        else:\n            break\n    b = r[:b[i]]\n    a = x[i]\n    if b == a:\n        return '-1'\n    if b == ''.join(a):\n        return '-1'\n    return '1'+ str(b[0]) +'' + str(len(b))\n\nimport sys"
    },
    {
        "number": 4529,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4529,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin[0])\n    for _ in range(t):\n        n = int(stdin[1])\n        s = stdin[2]\n        print(solution(stdin[3:3+n]))\n    return stdin"
    },
    {
        "number": 4529,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\n\n\n-----Passed Test Cases-----\n\nInput\n      4\n      4\n      4\n      4\n      4\n      3\n      4\n      2\n      2\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      1\n      "
    },
    {
        "number": 4529,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4529,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4529,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        r = len(s)\n        for i in range(n):\n            if s[i] == s[-1-i]:\n                r -= 1\n        if r == 0:\n            print(-1)\n        else:\n            print(r, r+1)\n"
    },
    {
        "number": 4529,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        i = 0\n        j = len(s) - 1\n        p = len(s)\n        while i < j:\n            if s[i] == s[j]:\n                i += 1\n                j -= 1\n                p -= 1\n            else:\n                break\n        if p == len(s):\n            print(\"-1\")\n        else:\n            print(p, j - i + 1)\nsolution(\"\")\n"
    },
    {
        "number": 4529,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n\n        res = [0] * n\n        last = None\n\n        for i, c in enumerate(s):\n            if c == last:\n                res[i] = res[i - 1] + 1\n            else:\n                last = c\n                res[i] = 1\n\n        print(' '.join(str(r) for r in res))\nsolution(stdin)\n"
    },
    {
        "number": 4529,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        length = int(stdin.readline())\n        path = stdin.readline()\n        min_len = len(path)\n        s = set()\n        for i in range(len(path)):\n            if path[i] == 'R':\n                if i + 1 < len(path) and path[i + 1] == 'U':\n                    s.add((i, i + 1))\n                if i + 2 < len(path) and path[i + 2] == 'U':\n                    s.add((i, i + 2))\n            if path[i] == 'D':\n                if i + 1 < len(path) and path[i + 1] == 'U':\n                    s.add((i, i + 1))\n                if i + 2 < len(path) and path[i + 2] == 'D':\n                    s.add((i, i + 2))\n            if path[i] == 'L':\n                if i + 1 < len(path) and path[i + 1] == 'R':\n                    s.add((i, i + 1))\n                if i + 2 < len(path) and path[i + 2] == 'R':\n                    s.add((i, i + 2))\n        s = list(s)\n        s.sort(key=lambda x: (x[0], x[1]))\n        l, r = 0, len(s)\n        while l < r:\n            if s[l][1] == s[r - 1][0]:\n                r -= 1\n            else:\n                min_len = min(min_len, s[l][1] - s[l][0] + 1)\n                l += 1\n        if min_len == len(path):\n            print(-1)\n        else:\n            print(min_len, min_len + 1)"
    },
    {
        "number": 4530,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nHow to generate valid pairs:\nfor each student $i$, $1 \\le a_i \\le n$\n    get the index of the student with the same skill\n    if the index equals the current student index, then we found a pair\n    if the index is bigger than the current student index, then we can't build a valid pair\n    if the index is smaller than the current student index, then we found a pair\n    if the index is not equal to the current student index, then we haven't found a pair\n\n\"\"\"\n"
    },
    {
        "number": 4530,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.read()\n\nfrom sys import stdin\nn = int(stdin.readline())\nskills = list(map(int, stdin.readline().split()))\n\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nBy [medium](https://www.codewars.com/kata/56a8f54f1e10e7911e00000b) [codewars](https://www.codewars.com/kata/56a8f54f1e10e7911e00000b), [codewars](https://www.codewars.com/kata/56a8f54f1e10e7911e00000b) and [codewars](https://www.codewars.com/kata/56a8f54f1e10e7911e00000b) you can find an [online text-based visualization of the solution](https://www.codewars.com/kata/56a8f54f1e10e7911e00000b).\n\"\"\"\n\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.read().strip()\n"
    },
    {
        "number": 4530,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().rstrip()"
    },
    {
        "number": 4530,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\nstdin = input()\nprint(solution(stdin))\n\n\n>>> solution(\"4\")\n3\n\n>>> solution(\"7\")\n1\n\n>>> solution(\"2\")\n1\n\n>>> solution(\"1\")\n0\n\n>>> solution(\"4\")\n0\n\n>>> solution(\"2\")\n0\n\n>>> solution(\"1\")\n0\n\n>>> solution(\"3\")\n2\n\n>>> solution(\"5\")\n1\n\n>>> solution(\"1\")\n0\n\n>>> solution(\"6\")\n2\n\n>>> solution(\"10\")\n2\n\n>>> solution(\"15\")\n3\n\n>>> solution(\"20\")\n4\n\n>>> solution(\"30\")\n5\n\n>>> solution(\"100\")\n8\n\n>>> solution(\"1000\")\n12\n\n>>> solution(\"10000\")\n13\n\n>>> solution(\"100000\")\n14\n\n>>> solution(\"1000000\")\n15\n\n>>> solution(\"10000000\")\n16\n\n>>> solution(\"100000000\")\n17\n\n>>> solution(\"100000000000\")\n18\n\n>>> solution(\"10000000000\")\n19\n\n>>> solution
    },
    {
        "number": 4530,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_of_cases = int(stdin)\n    for _ in range(num_of_cases):\n        n = int(stdin.readline().strip())\n        skill_set = [int(x) for x in stdin.readline().strip().split(' ')]\n        skill_set = set(skill_set)\n        skill_sum = sum(skill_set)\n        if skill_sum % 2!= 0:\n            print('0')\n        else:\n            skill_sum //= 2\n            skill_list = list(skill_set)\n            skill_list.sort()\n            for i in range(len(skill_list)):\n                skill_list[i] += 1\n            skill_list.sort()\n            if skill_list[0]!= 1:\n                skill_list[0] -= 1\n            for i in range(1, len(skill_list)):\n                skill_list[i] -= skill_list[i-1]\n            if skill_list[len(skill_list) - 1]!= skill_sum:\n                skill_list[len(skill_list) - 1] -= skill_sum - skill_list[len(skill_list) - 1]\n            skill_list.sort()\n            print(skill_list[len(skill_list)//2])\n    return ''\n"
    },
    {
        "number": 4530,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nHow to test your solution\n\n1) Run this file in IDLE.\n2) If everything is alright, you should see your output, the one you are looking for.\n3) If not, you might want to check the contents of your output file and the definition of \"valid\" pair of teams.\n4) Test other input, as well as random inputs.\n\n\n-----\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    students = [int(x) for x in stdin.readline().split()]\n\n    sorted_students = sorted(students)\n    team_size = 1\n    left = 1\n    right = n\n    while left < right:\n        if sorted_students[left - 1]!= sorted_students[right - 1]:\n            team_size += 1\n            left += 1\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n    return str(team_size)\n\nprint(solution(None))\n"
    },
    {
        "number": 4530,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        skills = [int(x) for x in stdin.readline().split()]\n        m = len(skills)\n        s = {skills[i]: i for i in range(m)}\n        stdin.readline()\n        if m > 1:\n            skills = set(skills)\n            for i in range(m - 1):\n                for j in range(i + 1, m):\n                    if skills.issuperset(skills[i], skills[j]):\n                        break\n                else:\n                    print(0)\n                    break\n            else:\n                print(1)\n        else:\n            print(0)\n"
    },
    {
        "number": 4531,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(vertex: int) -> int:\n        if vertex in dfs_visited:\n            return dfs_visited[vertex]\n\n        result = 0\n        for neighbor in graph[vertex]:\n            result = max(result, dfs(neighbor) + costs[vertex][neighbor])\n\n        result += costs[vertex][vertex]\n        dfs_visited[vertex] = result\n        return result\n\n    n = int(stdin.readline())\n    graph = [[] for _ in range(n)]\n    costs = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = [int(x) for x in stdin.readline().split()]\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n        costs[u - 1].append(1)\n        costs[v - 1].append(1)\n    dfs_visited = {}\n    return str(dfs(0))\n\nimport sys\nfrom io import StringIO\nfrom math import factorial\n\ndef"
    },
    {
        "number": 4531,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4531,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = [int(x) for x in lines[1].split()]\n\n    adj = [[] for _ in range(n + 1)]\n    for i in range(n - 1):\n        u, v = [int(x) for x in lines[2 + i].split()]\n        adj[u].append(v)\n        adj[v].append(u)\n\n    # find the root\n    root = 0\n    for i in range(1, n):\n        if len(adj[i]) == 1:\n            root = i\n\n    def traverse(u: int) -> int:\n        total = 0\n        for v in adj[u]:\n            total += traverse(v)\n        return a[u] * total\n\n    return str(max(traverse(root), traverse(n - 1)))\n\nassert(solution(input) == '121')\n"
    },
    {
        "number": 4531,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n - 1):\n        u, v = list(map(int, stdin.readline().split()))\n        dp[u][v] = 1\n        dp[v][u] = 1\n    dp[0][n] = 1\n    dp[n][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if dp[i][j]:\n                dp[i][j] += max(dp[i - 1][j - 1], dp[i][j - 1], dp[i - 1][j])\n    return max(dp[n][1:]) * arr[n - 1]\n\nassert (solution('''4\n9 4 1 7 10 1 6 5\n1 2\n2 3\n1 4\n1 5\n5 6\n5 7\n5 8\n''') == 121)\nassert (solution('''8\n1337\n''') == 0)\nassert (solution('''1\n1337\n''') == 0)\n"
    },
    {
        "number": 4531,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4531,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    tree = defaultdict(list)\n    for i in range(n - 1):\n        u, v = map(int, lines[i + 2].split())\n        tree[u].append(v)\n        tree[v].append(u)\n    print(max_cost(1, a, tree))\n\n\ndef"
    },
    {
        "number": 4531,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4531,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4531,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4531,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        edges.append((u - 1, v - 1))\n    costs = [0] * n\n    # An edge is between u and v iff u > v\n    def get_edge(u: int, v: int) -> bool:\n        return u > v\n    # The cost of a tree with u vertices is the sum of the cost of all edges\n    def cost(u: int) -> int:\n        # All children are at least 1\n        costs[u] = sum(get_edge(u, v) * a[v] for v in edges[u])\n        # Children are in range 1 to n - 1\n        for v in edges[u]:\n            if get_edge(u, v):\n                costs[u] += cost(v)\n        return costs[u]\n    cost(0)\n    return str(max(costs))"
    },
    {
        "number": 4532,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        x = 0\n        for i in range(n):\n            if a[i] % k!= 0:\n                x += 1\n                a[i] += x\n        print(x)\n        "
    },
    {
        "number": 4532,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        if sum(a) <= 2*(10**5):\n            s = sum(a)\n            m = 0\n            for i in range(n):\n                if a[i] % k!= 0:\n                    m += abs(a[i] % k - k)\n                    a[i] += k - (a[i] % k)\n            print(m)\n        else:\n            print(0)\n\nsolution(sys.stdin)\n"
    },
    {
        "number": 4532,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 4532,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----"
    },
    {
        "number": 4532,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    x = 0\n    for i in range(n):\n        if a[i] % k!= 0:\n            x += 1\n            a[i] += x\n    return str(x)"
    },
    {
        "number": 4532,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, N, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()[1:]))\n    moves = 0\n    x = 0\n    for i in range(1, N+1):\n        while a[i-1] % k:\n            moves += 1\n            x += 1\n            a[i-1] += x\n        moves += 1\n        x += 1\n        a[i-1] += x\n    return str(moves)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4532,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n, k = [int(x) for x in stdin.readline().strip().split()]\n        a = [int(x) for x in stdin.readline().strip().split()]\n\n        if (a[0] % k)!= 0:\n            print('0')\n\n        else:\n            nk = 0\n            for x in a:\n                nk += x // k\n\n            print(nk)"
    },
    {
        "number": 4532,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nHow would you design a solution to this problem?\n\n- Brute force\n\n- Dynamic Programming\n\n- Linear Time\n\n- Binary Search\n\n- Divide and Conquer\n\n- Sort\n\n- Simulated annealing\n\n- Knapsack\n\n- Integer Programming\n\n- Fibonacci\n\n- Dynamic Programming\n\n- Bottom-up\n\n- Tabulation\n\n- Heap\n\n- Recursive\n\n- DP\n\n- 2D array\n\n- LIS\n\n- TSP\n\n- Graph\n\n- Flood Fill\n\n- Min-cut\n\n- Path\n\n- Fractional Knapsack\n\n- IDDFS\n\n- Intersection\n\n- Water Maze\n\n- DFS\n\n- Greedy\n\n- Bottom-up\n\n- Top-down\n\n- Greedy\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n- Top-down\n\n- Divide and Conquer\n\n-"
    },
    {
        "number": 4532,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    arr = list(map(int, stdin.strip().split()))\n\n    mx = max(arr)\n    if mx % k!= 0:\n        return '-1'\n\n    count = 0\n    while True:\n        count += 1\n        for i in range(n):\n            arr[i] = arr[i] // k\n        if sum(arr) == 0:\n            break\n        arr.sort()\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4532,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    \n    x = 0\n    for i in range(n):\n        if a[i] % k!= 0:\n            x += 1\n        a[i] += x\n    return str(x)\n\ndef"
    },
    {
        "number": 4533,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def test(g, s, c):\n        nonlocal answer\n        if s >= g:\n            answer += 1\n            return\n        for i in range(len(c)):\n            test(g, s + c[i], c[:i] + c[i+1:])\n    c, n = [int(x) for x in stdin.split(' ')]\n    cookies = [int(x) for x in stdin.split(' ')]\n    cookies.sort(reverse=True)\n    for i in range(1, n+1):\n        c -= 1\n        g = cookies[i-1]\n        test(g, 0, cookies)\n    return str(answer)\n\nassert(solution(\"3 7\") == \"1\")\nassert(solution(\"3 1\") == \"2\")\nassert(solution(\"1 2\") == \"2\")\nassert(solution(\"1 2 3\") == \"1\")\nassert(solution(\"5 5\") == \"1\")\nassert(solution(\"1 2 3 4\") == \"2\")\nassert(solution(\"1 1 1 1 1\") == \"5\")\nassert(solution(\"2 3 4 5\") == \"2\")\nassert(solution(\"1 1 1 1 1\") == \"5\")\nassert(solution(\"1 2 3 4 5\") == \"2\")\nassert(solution(\"1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1\") == \"5\")\nassert(solution(\"1 2 3 4 5\") == \"2\")\nassert(solution(\"1 2 3 4 5\") == \"2\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1\") =="
    },
    {
        "number": 4533,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4533,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4533,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\ndef"
    },
    {
        "number": 4533,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    greed, people = [int(num) for num in stdin.strip().split(' ')]\n    greed_list = []\n    for i in range(people):\n        greed_list.append(int(stdin.readline().strip()))\n\n    greed_list.sort()\n    max_result = 0\n    current_result = 0\n    for greed in greed_list:\n        if greed <= greed_list[max_result]:\n            current_result += 1\n        else:\n            max_result += 1\n            current_result = 1\n\n    return str(current_result)\n\nimport sys\nfrom typing import List\ndef"
    },
    {
        "number": 4533,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    greed_numbers, n = stdin.split(\"\\n\")\n    greed_numbers = [int(x) for x in greed_numbers.split(\",\")]\n    n = int(n)\n    greed_numbers.sort(reverse=True)\n    greed_numbers = greed_numbers[:n]\n    results = [0]*len(greed_numbers)\n    for greed_number in greed_numbers:\n        results[0] += greed_number\n    return results.index(max(results)) + 1\n\nprint(solution(stdin))\n\n\n\"\"\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4533,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def g(i: int, c: int) -> int:\n        return 1 if i == 0 else g(i - 1, c + 1)\n\n    children, cookies = [int(x) for x in stdin.split(';')]\n    greed = [int(x) for x in stdin.split(';')[1:]]\n\n    greed.sort(reverse=True)\n    cookies.sort()\n\n    l = len(cookies)\n\n    for child in range(children):\n        if greed[child] <= cookies[-1]:\n            print(child + 1)\n            break\n        else:\n            cookies.pop()\n"
    },
    {
        "number": 4533,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the maximum number of children that will be content.\n    \"\"\"\n    return max(greed[0] for greed in stdin.split('\\n')[1:])\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4533,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4534,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4534,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    get the kth row of the pascal triangle\n    \"\"\"\n    n = int(stdin)\n    res = [1]\n    for i in range(n):\n        res = [1] + [sum(res[i:j]) for i, j in zip([0]+res[:-1], res)] + [1]\n    return str(res).strip('[]')"
    },
    {
        "number": 4534,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        result = [1]\n        for i in range(rowIndex):\n            result = self.generate_row(result)\n        return result\n\n    def generate_row(self, row: List[int]) -> List[int]:\n        result = [1]\n        for i in range(len(row) - 1):\n            result.append(row[i] + row[i + 1])\n        result.append(1)\n        return result\n"
    },
    {
        "number": 4534,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nprint(solution('stdin'))\n\"\"\"\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        res = [1]\n        for i in range(rowIndex):\n            tmp = [0] + res + [0]\n            res = [tmp[i] + tmp[i+1] for i in range(len(tmp)-1)]\n        return res"
    },
    {
        "number": 4534,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\"\"\"\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split()\n    for i in range(len(rows)):\n        rows[i] = int(rows[i])\n    for i in range(len(rows) - 2, -1, -1):\n        for j in range(i + 1):\n            rows[j] += rows[j + 1]\n    return str(rows[0])"
    },
    {
        "number": 4534,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        ans = [1]\n        if rowIndex == 0:\n            return ans\n        for _ in range(rowIndex):\n            ans = [1] + [ans[i] + ans[i+1] for i in range(len(ans)-1)] + [1]\n        return ans\n"
    },
    {
        "number": 4534,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    res = [1]\n    for i in range(0, len(stdin)-1):\n        res.append(int(stdin[i]))\n        res.append(int(stdin[i]) + res[i])\n    return res\n\n\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from queue import Queue\n    from copy import deepcopy\n\n    n = int(stdin)\n    if n == 0:\n        return []\n\n    def f(n: int) -> list[int]:\n        if n == 0:\n            return [1]\n        q = Queue()\n        q.put(0)\n        p = [0] * (n + 1)\n        p[0] = 1\n        while not q.empty():\n            t = q.get()\n            if t == n:\n                return deepcopy(p)\n            for i in range(1, n + 1):\n                p[i] = p[t] + p[t + 1]\n                if i + t < n + 1:\n                    q.put(i + t)\n        return deepcopy(p)\n\n    return \" \".join(map(str, f(n)))\n\n\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nassert(solution('3') == \"1\\n1 1\\n1 2 1\\n1 3 3 1\")\nassert(solution('5') == \"1\\n1 1\\n1 2 1\\n1 3 3 1\\n1 4 6 4 1\")\n\"\"\"\n\ndef"
    },
    {
        "number": 4535,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin,2)).count('1'))\n\nprint(solution(\"00000000000000000000000000001011\"))\n"
    },
    {
        "number": 4535,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count(\"1\")\n"
    },
    {
        "number": 4535,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4535,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin))).count(\"1\")\n\nfrom leetcode import *\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return str(bin(n)).count(\"1\")"
    },
    {
        "number": 4535,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4535,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def count_bits(num: int) -> int:\n        num = num ^ (num >> 1)\n        num = num & 0x5555555555555555\n        num = num | (num << 1) & 0xAAAAAAAAAAAAAAAA\n        num = num | (num >> 4) & 0x0F0F0F0F0F0F0F0F\n        num = (num & 0x3333333333333333) + ((num >> 8) & 0x3333333333333333)\n        num = (num + (num >> 16)) & 0x0F0F0F0F0F0F0F0F\n        return num & 0x00000001\n\n    return count_bits(int(stdin))\n\nn = 11111111111111111111111111111101\nfor i in range(32):\n    if n & (1 << i):\n        print(i)\n"
    },
    {
        "number": 4535,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n):\n        return sum(1 for x in bin(n) if x == '1')\n    return str(solve(int(stdin)))\n\"\"\""
    },
    {
        "number": 4535,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count(\"1\")\n"
    },
    {
        "number": 4535,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin)).count(\"1\"))\n\ndef"
    },
    {
        "number": 4536,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4536,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)\n\ndef"
    },
    {
        "number": 4536,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return input()\n\n\ndef"
    },
    {
        "number": 4536,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)\n\nimport sys\ndef"
    },
    {
        "number": 4536,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nassert solution(['1', '2', '3']) == '1234'\nassert solution(['4', '3', '2', '1']) == '4321'\nassert solution(['9', '9']) == '99'\nassert solution(['0', '9', '9']) == '99'\nassert solution(['0']) == '1'\nassert solution(['9', '9', '9', '9', '9', '9', '9']) == '999999999999'\n"
    },
    {
        "number": 4536,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    @1.0\n    \"\"\"\n    return str(int(stdin) + 1)\n\ndef"
    },
    {
        "number": 4536,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"123\")\n    '124'\n    >>> solution(\"3\")\n    '4'\n    >>> solution(\"42\")\n    '43'\n    >>> solution(\"9\")\n    '10'\n    >>> solution(\"999\")\n    '1000'\n    \"\"\"\n    result = [int(i) for i in stdin.strip()]\n    if result[0] == 0:\n        result[0] = 1\n    else:\n        result[0] = 0\n    for i in range(1, len(result)):\n        result[i] += result[i - 1] + 1\n    return \"\".join(str(i) for i in result)\n"
    },
    {
        "number": 4536,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution('1,2,3') == '1,2,4'\nassert solution('4,3,2,1') == '4,3,2,2'\nassert solution('1') == '2'\nassert solution('23,45,67') == '23,45,68'\nassert solution('9') == '10'\nassert solution('9,9') == '1,0,0'\nassert solution('9,9,9') == '1,0,0,0'\nassert solution('0') == '1'\nassert solution('0,0') == '1,0'\nassert solution('0,0,0') == '1,0,0,0'\nassert solution('0,0,0,0') == '1,0,0,0,0'\nassert solution('9,9,9,9') == '1,0,0,0,0'\nassert solution('0,0,0,0,0') == '1,0,0,0,0,0'\n"
    },
    {
        "number": 4536,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4536,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(map(str, map(int, stdin)))\n\nprint(solution(\"9\"))\nprint(solution(\"12\"))\nprint(solution(\"77\"))\nprint(solution(\"1234\"))\nprint(solution(\"73415\"))\n"
    },
    {
        "number": 4537,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split()]\n    print(max(x+y, x-y, x*y))"
    },
    {
        "number": 4537,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = [int(x) for x in stdin.strip().split()]\n\n    return '\\n'.join([str(max(a, b, a * b)), str(min(a, b, a * b)), str(a + b - (a * b))])"
    },
    {
        "number": 4537,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return '\\n'.join(map(str, [a+b, a-b, a*b]))"
    },
    {
        "number": 4537,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    a, b = int(data[0]), int(data[1])\n    return str(max(a + b, a - b, a * b))\n"
    },
    {
        "number": 4537,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(max(a + b, a - b, a * b))"
    },
    {
        "number": 4537,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a + b, a - b, a * b))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4537,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(' ')]\n    return max([A + B, A - B, A * B])"
    },
    {
        "number": 4537,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return (max(a + b, a - b, a * b),)"
    },
    {
        "number": 4537,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return '{} {} {}'.format(max(a + b, a - b, a * b), min(a + b, a - b, a * b), a * b)"
    },
    {
        "number": 4537,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    print(max(A + B, A - B, A * B))"
    },
    {
        "number": 4538,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4538,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split()]\n    points = [tuple(int(y) for y in stdin.split()) for _ in range(N)]\n    result = 0\n    for p in points:\n        result += (p[0] ** 2 + p[1] ** 2) <= D ** 2\n    return str(result)"
    },
    {
        "number": 4538,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d = list(map(int, stdin.split(' ')))\n    x, y = [], []\n    for _ in range(n):\n        xi, yi = map(int, stdin.split(' '))\n        x.append(xi)\n        y.append(yi)\n    print(sum([int(math.sqrt(xi**2 + yi**2)) <= d for xi, yi in zip(x, y)]))"
    },
    {
        "number": 4538,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = tuple(map(int, stdin.split()))\n    points = []\n    for _ in range(n):\n        x, y = tuple(map(int, stdin.split()))\n        points.append((x, y))\n    points = sorted(points, key=lambda x: x[0]**2 + x[1]**2)\n    result = 0\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if (points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2 <= d**2:\n                result += 1\n    return str(result)"
    },
    {
        "number": 4538,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    points = [map(int, line.split()) for line in stdin.split(\"\\n\")[1:]]\n    return str(sum(1 for point in points if abs(point[0]) + abs(point[1]) <= D))\n\n\"\"\"\n\n\"\"\"\nInput\n5 5\n0 0\n0 1\n0 2\n0 3\n0 4\n\nOutput\n1\n\nInput\n10 10\n0 0\n1 2\n3 4\n5 6\n7 8\n8 9\n9 10\n\nOutput\n2\n\nInput\n10 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n\nOutput\n5\n\n\"\"\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef"
    },
    {
        "number": 4538,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4538,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(i) for i in stdin.split(' ')]\n\n    return str(sum(1 for i in range(n) if abs(i) <= d))"
    },
    {
        "number": 4538,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')\n    n, d = int(s[0].split()[0]), int(s[0].split()[1])\n    xs = [int(x) for x in s[1].split()]\n    ys = [int(y) for y in s[2].split()]\n    points = [(x, y) for x, y in zip(xs, ys)]\n    result = 0\n    for p1 in points:\n        for p2 in points:\n            if p1!= p2:\n                if distance(p1, p2) <= d:\n                    result += 1\n    return result\n\ndef"
    },
    {
        "number": 4538,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    for _ in range(N):\n        x, y = map(int, stdin.split())\n        if (x**2 + y**2) <= D**2:\n            print(1)\n        else:\n            print(0)"
    },
    {
        "number": 4539,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'Yes' if n % sum(map(int, str(n))) == 0 else 'No'\n"
    },
    {
        "number": 4539,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.rstrip()\n    y = int(x)\n    if y < 1:\n        return 'No'\n    elif y == 1:\n        return 'Yes'\n    else:\n        y_string = str(y)\n        z = len(y_string)\n        total = 0\n        for i in range(z):\n            total = total + int(y_string[i])\n        if total % 3 == 0:\n            return 'Yes'\n        else:\n            return 'No'"
    },
    {
        "number": 4539,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(map(int, stdin[0].strip())) % int(stdin[0].strip()) == 0 else \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_harshad(int(stdin)) else \"No\"\n\ndef"
    },
    {
        "number": 4539,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'Yes' if n % sum(map(int, list(str(n)))) == 0 else 'No'\n\n\ndef"
    },
    {
        "number": 4539,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    return 'Yes' if N % sum(map(int, str(N))) == 0 else 'No'"
    },
    {
        "number": 4539,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return \"Yes\" if N % sum(int(x) for x in str(N)) == 0 else \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # f(n) = sum of the digits of n\n    sum_of_digits = 0\n    while N:\n        sum_of_digits += N % 10\n        N //= 10\n    return 'Yes' if sum_of_digits % 7 == 0 else 'No'\n\n\ndef"
    },
    {
        "number": 4539,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number % (sum(map(int, str(number)))) == 0:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4539,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_harshad(int(stdin)) else \"No\"\n\n\ndef"
    },
    {
        "number": 4540,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(num) for num in stdin.readline().strip().split(' ')]\n\n    costs = 0\n    for i in range(1, N):\n        costs += abs(A[i - 1] - A[i])\n    print(costs)\n    return ''"
    },
    {
        "number": 4540,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n    #print(arr)\n    arr.sort()\n    #print(arr)\n    last = arr[0]\n    total = 0\n    for i in range(1, n):\n        if arr[i] - last > 0:\n            total += arr[i] - last\n        last = arr[i]\n    return str(total)"
    },
    {
        "number": 4540,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    ans = 0\n    for i in range(1, n + 1):\n        ans += abs(a[i - 1] - a[0])\n        for j in range(2, i):\n            ans += max(0, abs(a[j - 1] - a[i - 1]) - abs(a[j - 2] - a[i - 1]))\n    return str(ans)\n\nassert solution('''3\n3 5 -1''') == '12'\nassert solution('''3\n-1 -2 -3''') == '0'\nassert solution('''3\n0 0 0''') == '0'\nassert solution('''5\n0 0 0 0 0''') == '0'\nassert solution('''1\n-1''') == '0'\nassert solution('''1\n0''') == '0'\nassert solution('''10\n-5 -4 -3 -2 -1''') == '15'\nassert solution('''10\n0 0 0 0 0 0 0 0 0''') == '0'\nassert solution('''10\n0 0 0 0 0 0 0 0 0''') == '0'\nassert solution('''10\n-3 -1 0 3 -2 2 -1''') == '4'\nassert solution('''10\n0 0 0 0 0 0 0 0 0''') == '0'\nassert solution('''10\n0 0 0 0 0 0 0 0 0''') == '0'\nassert solution('''10\n-5 -4 -3 -2 -1''') == '15'\nassert solution('''10\n1 1 2 3 4 5 6 7 8 9''') == '15'\nassert solution('''100\n
    },
    {
        "number": 4540,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4540,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4540,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split()]\n    result = 0\n\n    for i in range(1, N):\n        result += abs(A[i - 1] - A[i])\n\n    return str(result)"
    },
    {
        "number": 4540,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(c) for c in stdin.readline().split()]\n\n    costs = []\n    curr_cost = 0\n    for spot in range(1, N + 1):\n        curr_cost += abs(A[spot - 1] - A[spot])\n        costs.append(curr_cost)\n    costs.append(curr_cost)\n\n    return '\\n'.join(map(str, costs))"
    },
    {
        "number": 4540,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(x) for x in stdin.strip().split(\" \")]\n    cost = 0\n    for i in range(N):\n        cost += abs(A[i] - i)\n    print(cost)"
    },
    {
        "number": 4540,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_spots = stdin.splitlines()[0]\n    spot_costs = stdin.splitlines()[1].split()\n    num_spots = int(num_spots)\n    spot_costs = [int(spot_costs[i]) for i in range(num_spots)]\n    # Write your code here\n    # Dynamic Programming\n    dp = [[0] * num_spots for _ in range(num_spots)]\n    for s in range(num_spots):\n        dp[s][s] = spot_costs[s]\n    for k in range(1, num_spots):\n        for i in range(num_spots - k):\n            j = i + k\n            dp[i][j] = max(spot_costs[i] + min(dp[i + 1][j], dp[i][j - 1]), spot_costs[j] + min(dp[i + 1][j], dp[i][j - 1]))\n    return str(dp[0][num_spots - 1])\n"
    },
    {
        "number": 4540,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def readline() -> str:\n        return stdin.readline().strip()\n\n    N = int(readline())\n    A = [int(readline()) for _ in range(N)]\n\n    cancel = 0\n    cost = 0\n    for i in range(N):\n        cancel += A[i] - A[0]\n        if cancel > 0:\n            cost += cancel\n            cancel = 0\n    return str(cost)\n"
    },
    {
        "number": 4541,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'vowel'"
    },
    {
        "number": 4541,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"vowel\" if stdin in \"aeiou\" else \"consonant\""
    },
    {
        "number": 4541,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    c = stdin[0]\n    if c in 'aeiou':\n        return 'vowel'\n    return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    c = stdin.strip()\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':\n        return \"vowel\"\n    else:\n        return \"consonant\""
    },
    {
        "number": 4541,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin[0]\n    if c in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n        return \"vowel\"\n    return \"consonant\""
    },
    {
        "number": 4541,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4541,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4541,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('a')\n    'vowel'\n    >>> solution('e')\n    'vowel'\n    >>> solution('i')\n    'vowel'\n    >>> solution('o')\n    'vowel'\n    >>> solution('u')\n    'vowel'\n    \"\"\"\n    c = stdin.strip()\n    if c in 'aeiou':\n        return 'vowel'\n    else:\n        return 'consonant'\n\n\ndef"
    },
    {
        "number": 4541,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    if c in 'aeiou':\n        return 'vowel'\n    else:\n        return 'consonant'"
    },
    {
        "number": 4541,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin[0]\n    if stdin.lower() in (\"a\", \"e\", \"i\", \"o\", \"u\"):\n        return \"vowel\"\n    else:\n        return \"consonant\""
    },
    {
        "number": 4542,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4542,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) // 2)\n"
    },
    {
        "number": 4542,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"B\", \"1\").replace(\"W\", \"-1\")\n\n\ndef"
    },
    {
        "number": 4542,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4542,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n'''\n"
    },
    {
        "number": 4542,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.count('B') - int(stdin.count('W'))))"
    },
    {
        "number": 4542,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.strip()\n    count = 0\n    for i in range(len(board)):\n        if board[i] == \"W\":\n            count += 1\n            for j in range(1, i):\n                if board[j] == \"W\":\n                    count += 1\n        if board[i] == \"B\":\n            for j in range(i+1, len(board)):\n                if board[j] == \"B\":\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4542,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(\" \")\n    print(abs(int(a) - int(b)) + abs(int(b) - int(c)) + abs(int(a) - int(c)))"
    },
    {
        "number": 4542,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.strip()\n    move = 1\n    while move < len(board):\n        move += 1\n        if board[:move].count(\"W\") == board[:move].count(\"B\"):\n            board = board[:move] + \"B\" + board[move:]\n        elif board[:move].count(\"W\") == board[:move].count(\"W\"):\n            board = board[:move] + \"W\" + board[move:]\n    return board\n\nprint(solution(input()))\n"
    },
    {
        "number": 4542,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stones = stdin.strip()\n    return \"\".join(sorted(stones, key=stones.find))\n\n\nassert(solution(\"BBBWW\")) == \"WWBW\"\nassert(solution(\"WWBW\")) == \"WWBW\"\nassert(solution(\"WWBWBWBWWWW\")) == \"BWBWBWBWWWW\"\nassert(solution(\"WWBWBWBWBWWWW\")) == \"BWBWBWBWWWW\"\nassert(solution(\"WWBWBWBWWWWWWBWBWBWWWWWWWBBWBWBWWWWWWWWWWWWW\")) == \"BWBWBWBWWWWWWBWBWBWWWWWWW\"\nassert(solution
    },
    {
        "number": 4543,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_square(int(stdin.split(\" \")[0])) and is_square(int(stdin.split(\" \")[1])) else \"No\"\n\ndef"
    },
    {
        "number": 4543,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a ** 2) + (b ** 2) == (a + b) ** 2:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(a) for a in stdin.split()]\n    a = a ** 2\n    b = b ** 2\n    return \"Yes\" if a + b == int(a) + int(b) else \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return 'Yes' if int(a) ** 2 + int(b) ** 2 == int(a) * int(b) else 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.rstrip().split(\" \")\n    num1, num2 = map(int, nums)\n\n    if (num1 ** 2) + (num2 ** 2) == (num1 + num2) ** 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a**2 + b**2 == (a + b)**2:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4543,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if check_square_number(int(stdin.split()[0]), int(stdin.split()[1])) else \"No\"\n\ndef"
    },
    {
        "number": 4543,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(\" \"))\n    return \"Yes\" if a**2 + b**2 == (a+b)**2 else \"No\""
    },
    {
        "number": 4543,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.split()\n    return 'Yes' if int(a) ** 2 + int(b) ** 2 == (int(a) + int(b)) ** 2 else 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"Yes\" if (a + b) ** 0.5 % 1 == 0 else \"No\""
    },
    {
        "number": 4544,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The maximal count of i such that a_i=X\n    :param stdin: The input\n    :return: The answer as a string\n    \"\"\"\n    n = int(stdin)\n    l = [int(i) for i in stdin.split()]\n    print(solution2(n, l))\n\ndef"
    },
    {
        "number": 4544,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.strip().split()))\n    X = 0\n    for i in range(n):\n        if a[i] == X:\n            X += 1\n    return str(X)"
    },
    {
        "number": 4544,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(1, N):\n        if a[i] - a[i-1] == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4544,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    best = 0\n    for x in range(1, n+1):\n        s = sum(1 for i in range(n) if a[i] == x)\n        if s > best:\n            best = s\n    return str(best)\n\n\ndef"
    },
    {
        "number": 4544,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    mx = 0\n    mx_x = 0\n    for i in range(1, n + 1):\n        if a[i - 1] > mx:\n            mx = a[i - 1]\n            mx_x = i\n    for i in range(1, n + 1):\n        if a[i - 1] == mx_x:\n            mx += 1\n    return str(mx)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4544,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # x = int(stdin.readline())\n    max_count = 0\n    for i in range(1, n):\n        max_count = max(max_count, a[i] - a[i - 1])\n    return str(max_count)\n"
    },
    {
        "number": 4544,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(N):\n        if A[i] % 2 == 0:\n            A[i] -= 1\n        else:\n            A[i] += 1\n    A.sort()\n    print(A)\n    for i in range(N):\n        if A[i] == A[i + 1]:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4544,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    a = [int(n) for n in lines[1].split()]\n    count = 0\n    for n in range(len(a)):\n        a[n] = a[n] + 1\n        if a[n] == N:\n            count += 1\n        elif a[n] == 1:\n            count += 1\n            a[n] = 0\n    return str(count)"
    },
    {
        "number": 4544,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin.split(\"\\n\")[0]\n    n = int(stdin.split(\"\\n\")[0])\n    s = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    if n == 1:\n        return str(s[0])\n    a = s[0]\n    b = s[1]\n    c = 0\n    for i in range(2,n):\n        if i == 2:\n            c += 1\n            continue\n        if a == b:\n            b = a\n            c += 1\n        elif a > b:\n            b = a\n            a = s[i]\n            c += 1\n        else:\n            a = s[i]\n    result = str(c)\n    return result"
    },
    {
        "number": 4544,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n\n    def process_ops(arr: List[int], ops: List[int]) -> int:\n        if len(ops) == 0:\n            return 0\n\n        x = ops[0]\n        if x == -1:\n            return arr[0]\n        else:\n            return arr[0] + x\n\n    total = 0\n    for i in range(n):\n        x = a[i]\n        if x < a[0]:\n            total += 1\n\n    return str(total)"
    },
    {
        "number": 4545,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = int(stdin[1])\n    if N < 0 or A < 0:\n        return \"Invalid Input\"\n    return int(A * (A + 1) / 2) - (N * (N - 1) / 2)"
    },
    {
        "number": 4545,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(stdin)\n    A = A * A\n    black = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i * j == A:\n                if (i + j) % 2 == 0:\n                    black += 1\n    return black\n\ndef"
    },
    {
        "number": 4545,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4545,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(stdin)\n\n    if N < 1 or N > 100 or A < 0 or A > N ** 2:\n        raise Exception()\n\n    # Construct the board\n    board = []\n    for i in range(N):\n        board.append([\"w\"] * N)\n\n    # Paint the board\n    for i in range(N):\n        board[i][i] = \"b\"\n        board[i][N - 1 - i] = \"b\"\n\n    # Count the number of painted squares\n    num_painted_squares = 0\n    for i in range(N):\n        for j in range(N):\n            if board[i][j] == \"b\":\n                num_painted_squares += 1\n\n    # Print the number of painted squares\n    print(num_painted_squares)"
    },
    {
        "number": 4545,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n4')\n    '5'\n    \"\"\"\n    n = int(stdin)\n    return str(n * n - n // 2)\n"
    },
    {
        "number": 4545,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4545,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    # n x n array\n    array = [[0 for _ in range(n)] for _ in range(n)]\n    answer = 0\n    for i in range(n):\n        # this is the same as the column row and column row\n        for j in range(n):\n            if i % 2 == 0:\n                array[i][j] = 1\n            else:\n                array[i][j] = 0\n            if j % 2 == 0:\n                array[j][i] = 1\n            else:\n                array[j][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if array[i][j] == 1:\n                answer += 1\n    return answer"
    },
    {
        "number": 4545,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    A = int(stdin.split(\"\\n\")[1])\n    # Initialize the grid.\n    grid = [[0 for _ in range(N)] for _ in range(N)]\n    # Now start iterating.\n    for i in range(N):\n        for j in range(N):\n            grid[i][j] = 1 if i % 2 == j % 2 else 0\n    return str(sum([1 for _ in range(A)]))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4545,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This is the solution to the code wars challenge\n    '''\n    N = stdin[0]\n    A = stdin[1]\n    N = int(N)\n    A = int(A)\n    answer = 0\n\n    if N > 1:\n        answer += N**2 - A\n    if A > 1:\n        answer += A\n\n    return str(answer)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4545,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    A = int(stdin.splitlines()[1])\n    black = 0\n    for i in range(N):\n        for j in range(N):\n            if (i + j) % 2 == 0:\n                black += 1\n    return str(A - black)\n"
    },
    {
        "number": 4546,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.strip().split(\" \")]\n    if a < b < c:\n        return \"YES\"\n    elif c < b < a:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int,stdin.split(' '))\n    return 'YES' if abs(b-a) == abs(c-b) else 'NO'"
    },
    {
        "number": 4546,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a!= c:\n        return \"NO\"\n    elif b!= a + c:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4546,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b-a == c-b:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4546,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if b-a == c-b:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4546,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(\" \"))\n    if b - a == c - b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"\""
    },
    {
        "number": 4546,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b - a == c - b:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return 'YES' if b - a == c - b else 'NO'\n\nprint(solution(input()))\n\n\"\"\"\ndef"
    },
    {
        "number": 4546,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    return \"YES\" if a - b == c - b else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4546,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    return \"YES\" if b-a == c-b else \"NO\""
    },
    {
        "number": 4547,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 9 == n % 10:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return 'Yes' if int(n) % 10 == 9 else 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if int(stdin)%10 == 9 else \"No\")\n    return stdin"
    },
    {
        "number": 4547,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    return 'Yes' if str(N).find('9') > -1 else 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return \"Yes\" if int(n[0]) == 9 else \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    return \"Yes\" if num % 10 == 9 else \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4547,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"Yes\" if n%10 == 9 else \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin) % 10 == 9 else \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return \"Yes\" if N >= 10 else \"No\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4548,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()][1:]\n\n    # find the toll gates (odd numbers)\n    tolls = [i for i in range(n + 1) if i & 1]\n\n    # make an array of the possible ways to reach any number\n    possibilities = [0 for i in range(n + 1)]\n    for i in range(1, n + 1):\n        possibilities[i] = possibilities[i - 1] + a[i - 1]\n\n    # find all the possible ways to reach the goal\n    ways = [[] for i in range(n + 1)]\n    for i in range(n + 1):\n        if i == x:\n            ways[i].append(0)\n        elif i in tolls:\n            ways[i].append(i)\n        else:\n            ways[i].append(possibilities[i])\n\n    # find the minimum cost\n    minimum = n + 1\n    for i in range(1, n + 1):\n        for j in range(len(ways[i])):\n            for k in range(j + 1, len(ways[i])):\n                if i + k + 1 == x:\n                    minimum = min(minimum, ways[i][j] + ways[i][k])\n\n    return str(minimum)"
    },
    {
        "number": 4548,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = [int(num) for num in stdin.split()]\n    costs = [int(num) for num in stdin.split()]\n    costs.append(0)\n    costs.append(N)\n    dp = [[0 for i in range(N+1)] for j in range(N+1)]\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if i == j:\n                dp[i][j] = 0\n            elif i == X:\n                dp[i][j] = costs[i]\n            elif j == X:\n                dp[i][j] = costs[j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + costs[i]\n    return str(dp[X][N])"
    },
    {
        "number": 4548,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    costs = [a[x] - a[x - 1] for x in range(1, m + 1)]\n    costs.insert(0, 0)\n    costs.append(n)\n    print(min([costs[x] - costs[x - 1] for x in range(1, m + 2)]))\n\nsolution(input())\n"
    },
    {
        "number": 4548,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    cost = 0\n    for i in range(M):\n        if A[i] == X:\n            cost += 1\n            continue\n        if A[i] > X:\n            cost += 1\n            continue\n        if A[i] < X:\n            cost += 1\n            continue\n    return str(cost)"
    },
    {
        "number": 4548,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = list(map(int, stdin.split()))\n    costs = list(map(int, stdin.split()))\n\n    first_row = [0] * (n + 1)\n    second_row = [0] * (n + 1)\n    for i in range(m):\n        first_row[costs[i]] = i + 1\n\n    for i in range(n):\n        second_row[i + 1] = second_row[i] + 1\n\n    current_row = first_row[:]\n    for i in range(n):\n        if current_row[x] == n:\n            return str(n - i)\n\n        if current_row[x] > n:\n            break\n\n        current_row[x] += 1\n        current_row[x - 1] -= 1\n        x += 1\n\n    return str(n - current_row[x])\n"
    },
    {
        "number": 4548,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum cost to reach the goal.\n    \n    >>> solution('5 3 3')\n    1\n    >>> solution('1 2 4')\n    1\n    \"\"\"\n    \n    n, m, x = [int(s) for s in stdin.split()]\n    costs = [int(s) for s in stdin.split()]\n\n    # the total cost is the cost incurred to reach the goal plus the cost incurred to reach each adjacent\n    # squares\n    cost = sum(costs)\n    for i in range(1, m + 1):\n        cost += costs[i % m]\n\n    return str(cost)"
    },
    {
        "number": 4548,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.split())\n    T = [0] * (N + 1)\n    for i in range(M):\n        A, cost = map(int, stdin.split())\n        T[A] += cost\n    X = abs(X - 1)\n    cost = 0\n    for i in range(1, X + 1):\n        if i > X:\n            break\n        cost += T[i]\n    return str(cost)"
    },
    {
        "number": 4548,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, M, X = list(map(int, stdin.split(' ')))\n    costs = list(map(int, stdin.split(' ')))\n    costs.append(0)\n    \n    min_cost = 0\n    for i in range(1, M + 1):\n        if X - 1 == i:\n            continue\n        min_cost += costs[i]\n    \n    return str(min_cost)"
    },
    {
        "number": 4548,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = list(map(int, stdin.split()))\n    costs = list(map(int, stdin.split()))\n    gates = [False] * (N + 1)\n    for i in range(M):\n        gates[costs[i]] = True\n    cost = 0\n    for square in range(X, N):\n        if not gates[square]:\n            cost += 1\n    return str(cost)"
    },
    {
        "number": 4549,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"Yes\" if... else \"No\"\n   ...\n\nIf your solution runs without errors, the second line will contain \"Yes\".\n\n-----My Submission-----\nAC\n\"\"\"\n\ndef"
    },
    {
        "number": 4549,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4549,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.strip().split(\" \"))\n    A = []\n    for _ in range(H):\n        A.append(list(map(int, stdin.strip().split(\" \"))))\n    \n    return \"Yes\" if possible(A, H, W) else \"No\"\n\ndef"
    },
    {
        "number": 4549,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin (str): an array representing a grid of squares\n    Returns:\n        str: \"Yes\" or \"No\"\n    \"\"\"\n    W, H = (int(x) for x in stdin.split())\n    grid = [stdin[i:i+W] for i in range(0, len(stdin), W)]\n    \n    return \"Yes\" if solve(grid, H, W) else \"No\"\n\ndef"
    },
    {
        "number": 4549,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n-----\n\"\"\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W = list(map(int, stdin.split()))\n    grid = [list(stdin.strip()) for _ in range(H)]\n    # For every i, j, we check the adjacent squares and paint them black if they are # or white otherwise\n    # If the adjacent squares are not # or.., paint them black\n    # Else, paint them white\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '.':\n                # Check above\n                if i > 0 and grid[i-1][j] == '#':\n                    grid[i][j] = '#'\n                # Check below\n                elif i < H-1 and grid[i+1][j] == '#':\n                    grid[i][j] = '#'\n                # Check left\n                if j > 0 and grid[i][j-1] == '#':\n                    grid[i][j] = '#'\n                # Check right\n                elif j < W-1 and grid[i][j+1] == '#':\n                    grid[i][j] = '#'\n    return 'Yes' if all(all(c == '#' for c in row) for row in grid) else 'No'"
    },
    {
        "number": 4549,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    picture = [list(stdin) for _ in range(rows)]\n\n    for row in range(rows):\n        for col in range(cols):\n            if picture[row][col] == '#':\n                continue\n            if row > 0:\n                picture[row][col] = '#'\n                if picture[row-1][col]!= '#':\n                    picture[row][col] = '#'\n            if col > 0:\n                picture[row][col] = '#'\n                if picture[row][col-1]!= '#':\n                    picture[row][col] = '#'\n    return 'Yes' if picture[rows-1][cols-1] == '#' else 'No'"
    },
    {
        "number": 4549,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    H, W = map(int, input_data[0].split())\n    A = [list(input_data[1+idx].strip()) for idx in range(H)]\n    B = [list(input_data[1+H+idx].strip()) for idx in range(H)]\n    output = \"\"\n\n    for i in range(H):\n        for j in range(W):\n            if A[i][j] == '#':\n                if (i-1 >= 0 and A[i-1][j] == '#') or (i+1 < H and A[i+1][j] == '#') or (j-1 >= 0 and A[i][j-1] == '#') or (j+1 < W and A[i][j+1] == '#'):\n                    output += '1'\n                else:\n                    output += '0'\n            else:\n                output += '0'\n    \n    return output\n\nprint(solution(input()))\n"
    },
    {
        "number": 4549,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    h, w = map(int, lines[0].split())\n    grid = [[lines[i][j] for j in range(1, w + 1)] for i in range(1, h + 1)]\n    for i in range(1, h + 1):\n        for j in range(1, w + 1):\n            if i!= h and grid[i][j] == '#' and grid[i - 1][j]!= '#' and grid[i][j - 1]!= '#':\n                grid[i - 1][j] = '#'\n            elif i!= h and grid[i][j] == '#' and grid[i - 1][j] == '#':\n                grid[i - 1][j] = '#'\n            elif i!= h and grid[i][j] == '#' and grid[i - 1][j] == '#':\n                grid[i - 1][j] = '#'\n            elif i!= h and grid[i][j] == '#' and grid[i - 1][j] == '#':\n                grid[i - 1][j] = '#'\n            elif i!= h and grid[i][j] == '#' and grid[i - 1][j] == '#':\n                grid[i - 1][j] = '#'\n            elif i!= h and grid[i][j] == '#' and grid[i - 1][j]!= '#':\n                grid[i - 1][j] = '#'\n            elif i!= h and grid[i][j] == '#' and grid[i - 1][j] == '#':\n                grid[i - 1][j] = '#'\n            elif i!= h and grid[i][j] == '#' and grid[i - 1][j]!= '#':\n                grid[i - 1][j] = '#'\n            elif i!= h and grid[i][j] == '#' and grid[i - 1][j] == '#':\n                grid[i - 1][j] = '#'\n    return 'Yes' if grid[-1][-1] == '#' else 'No'\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4549,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        H, W = list(map(int, stdin.split()))\n        paint = {}\n        for i in range(1, H + 1):\n            for j in range(1, W + 1):\n                s = stdin.readline().strip()\n                paint[(i, j)] = s\n        for i in range(1, H + 1):\n            for j in range(1, W + 1):\n                if paint[(i, j)] == '#':\n                    if paint[(i - 1, j)] == '#' or paint[(i, j - 1)] == '#':\n                        pass\n                    else:\n                        return \"No\"\n        return \"Yes\"\n    \n\"\"\"\n\nfrom sys import stdin, stdout\nfrom collections import defaultdict\nfrom itertools import permutations\n\ndef"
    },
    {
        "number": 4550,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a < b and b < c:\n        return \"No\"\n    elif a < c and c < b:\n        return \"No\"\n    elif b < a and a < c:\n        return \"No\"\n    elif b < c and c < a:\n        return \"No\"\n    elif c < a and a < b:\n        return \"No\"\n    elif c < b and b < a:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4550,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a >= b >= c or a >= c >= b:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b < c or a + c < b or b + c < a:\n        print(\"No\")\n    else:\n        print(\"Yes\")"
    },
    {
        "number": 4550,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(num) for num in stdin.split()]\n    if a == b and b == c and a % 2 == 0:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4550,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if (a + b + c) % 2 == 0 else \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a >= b >= c or c >= b >= a:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a >= b + c:\n        return \"No\"\n\n    if a + b >= c:\n        return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4550,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a == b == c:\n        return \"Yes\"\n\n    if a == b or a == c or b == c:\n        return \"No\"\n\n    if a < b and a < c:\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4550,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b > c:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4550,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if a < b and b < c:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4551,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int, stdin.split())\n    if A < B:\n        return \"Left\"\n    if A > B:\n        return \"Right\"\n    if A == B:\n        return \"Balanced\"\nsolution(\"\"\"\")\n"
    },
    {
        "number": 4551,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = [int(x) for x in stdin.split()]\n    if a<b>c>d:\n        return \"Right\"\n    elif a>b<c>d:\n        return \"Left\"\n    elif a<b<c<d:\n        return \"Balanced\""
    },
    {
        "number": 4551,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # For each line in the input, we need to split it into its components.\n    A,B,C,D = map(int,stdin.split())\n    if A==B and B==C and C==D:\n        return \"Left\"\n    elif A==B or B==C or C==D:\n        return \"Balanced\"\n    else:\n        return \"Right\""
    },
    {
        "number": 4551,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A > B:\n        if A > C:\n            if A > D:\n                print('Left')\n            else:\n                print('Right')\n        else:\n            if C > D:\n                print('Left')\n            else:\n                print('Right')\n    else:\n        if B > C:\n            if B > D:\n                print('Left')\n            else:\n                print('Right')\n        else:\n            if C > D:\n                print('Left')\n            else:\n                print('Right')"
    },
    {
        "number": 4551,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = list(map(int, stdin.split()))\n    if B>A:\n        if C==D:\n            return \"Balanced\"\n        elif C<D:\n            return \"Left\"\n        else:\n            return \"Right\"\n    else:\n        if C==D:\n            return \"Balanced\"\n        elif C>D:\n            return \"Left\"\n        else:\n            return \"Right\""
    },
    {
        "number": 4551,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + b > c + d:\n        return \"Left\"\n    elif a + b < c + d:\n        return \"Right\"\n    elif a == b and a == c and b == d:\n        return \"Balanced\"\n\nassert solution(\"3 8 7 1\") == \"Left\"\nassert solution(\"5 0 0 7\") == \"Right\"\nassert solution(\"1 2 3 4\") == \"Balanced\"\nassert solution(\"0 0 0 0\") == \"Balanced\"\nassert solution(\"1 2 1 1\") == \"Left\"\nassert solution(\"5 4 3 2\") == \"Right\"\nassert solution(\"4 6 3 2\") == \"Balanced\"\nassert solution(\"0 0 0 0\") == \"Balanced\"\nassert solution(\"1 1 1 1\") == \"Balanced\"\nassert solution(\"1 1 1 2\") == \"Left\"\nassert solution(\"3 4 3 2\") == \"Right\"\nassert solution(\"1 0 1 1\") == \"Right\"\nassert solution(\"5 4 3 2\") == \"Left\""
    },
    {
        "number": 4551,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4551,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int, stdin.split())\n    if A>B:\n        print('Left')\n    elif A<B:\n        print('Right')\n    else:\n        print('Balanced')"
    },
    {
        "number": 4551,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A > C:\n        return 'Left'\n    elif A < C:\n        return 'Right'\n    else:\n        return 'Balanced'\n"
    },
    {
        "number": 4551,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3 8 7 1')\n    'Left'\n    >>> solution('10 8 9 1')\n    'Left'\n    >>> solution('10 8 7 1')\n    'Left'\n    >>> solution('10 9 7 1')\n    'Left'\n    >>> solution('8 7 1 10')\n    'Left'\n    >>> solution('1 2 3 4')\n    'Balanced'\n    >>> solution('1 1 1 1')\n    'Balanced'\n    >>> solution('1 1 1 1')\n    'Balanced'\n    >>> solution('1 1 1 1')\n    'Balanced'\n    >>> solution('1 1 1 1')\n    'Balanced'\n    >>> solution('1 1 1 1')\n    'Balanced'\n    >>> solution('1 1 1 1')\n    'Balanced'\n    >>> solution('1 1 1 1')\n    'Balanced'\n    >>> solution('1 1 1 1')\n    'Balanced'\n    >>> solution('1 1 1 1')\n    'Balanced'\n    '''\n    A, B, C, D = list(map(int, stdin.split()))\n    L, R = B - A, D - C\n    if L < 0 and R < 0:\n        return 'Balanced'\n    elif L == R:\n        return 'Balanced'\n    elif L > R:\n        return 'Left'\n    else:\n        return 'Right'"
    },
    {
        "number": 4552,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4552,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    s = stdin.splitlines()[1:]\n    v = []\n    for i in s:\n        v.append([int(x) for x in i.split()])\n    r = []\n    for i in range(len(v[0])):\n        m = 0\n        for j in range(len(v)):\n            m += v[j][i]\n        r.append(m)\n    return max(r)"
    },
    {
        "number": 4552,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    shops = []\n    for i in range(1, n + 1):\n        temp = lines[i].split()\n        shops.append(temp[0])\n        shops[i - 1].append(temp[1])\n    periods = lines[n + 1]\n    periods = periods.split()\n    periods = [int(p) for p in periods]\n    profit = 0\n    for i in range(len(periods)):\n        for shop in shops:\n            if int(shop[2]) == i + 1 and int(shop[3]) == periods[i]:\n                profit += int(shop[4])\n    return profit"
    },
    {
        "number": 4552,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    f = [map(int, stdin.split()[1:])]\n    p = [map(int, stdin.split()[-2:])]\n    return str(max(0, solve(f, p)))\n\ndef"
    },
    {
        "number": 4552,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4552,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    shops = []\n    for _ in range(N):\n        shops.append(list(map(int, stdin.readline().strip().split())))\n\n    max_profit = 0\n    for i in range(N):\n        if any(shops[i]):\n            max_profit += max(shops[i])\n\n    return str(max_profit)"
    },
    {
        "number": 4552,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    scores = [int(x) for x in stdin.readline().strip().split()]\n\n    def is_open(x, y, z):\n        for i in range(1, n):\n            if scores[x + i] == 0 and scores[y + i] == 0 and scores[z + i] == 0:\n                return False\n        return True\n\n    p1_and_open = 0\n    p2_and_open = 0\n    for x in range(n):\n        for y in range(x + 1, n):\n            for z in range(y + 1, n):\n                if is_open(x, y, z):\n                    p1_and_open += 1\n                if is_open(y, x, z):\n                    p2_and_open += 1\n\n    return str(p1_and_open + p2_and_open)\n\nassert(solution('1') == '1')\nassert(solution('1 1 0 1 0 0 0 1 0 1') == '8')\nassert(solution('1 1 1 1 1 1 1 1 1 1') == '21')\nassert(solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '46')\nassert(solution
    },
    {
        "number": 4552,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4552,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    store_number = int(stdin.readline().strip())\n    store_info = [list(map(int, stdin.readline().strip().split(' '))) for _ in range(store_number)]\n    opening_time = [int(stdin.readline().strip()) for _ in range(store_number)]\n    closing_time = [int(stdin.readline().strip()) for _ in range(store_number)]\n    opening_time_mapping = {\n        1: [0] * 2,\n        2: [0] * 2,\n        3: [0] * 2,\n        4: [0] * 2,\n        5: [0] * 2,\n        6: [0] * 2,\n        7: [0] * 2,\n        8: [0] * 2,\n        9: [0] * 2,\n        10: [0] * 2\n    }\n    for i, time in enumerate(opening_time):\n        opening_time_mapping[time][0] = i\n    for i, time in enumerate(closing_time):\n        opening_time_mapping[time][1] = i\n    closing_time = [len(opening_time_mapping[time]) - 1 for time in range(1, 11)]\n    opening_time = [0, 1, 0, 1, 2, 0, 1, 2, 0, 1]\n    for time in range(10):\n        for day in range(1, 5):\n            for store in range(1, store_number + 1):\n                store_info[store - 1][day] -= opening_time[time]\n    shops_open = [0] * store_number\n    for day in range(1, 5):\n        for store in range(1, store_number + 1):\n            if store_info[store - 1][day] >= 0:\n                shops_open[store - 1] += 1\n    shops_open = [shops_open[x] for x in range(store_number)]\n    shops_open = [0] * store_number\n    for time in range(10):\n        for day in range(1, 5):\n            for store in range(1, store_number + 1):\n                store_info[store - 1][day] += opening_time[time]\n    for time in range(10):\n        for day in range(1, 5):\n            for store in range(1, store_number + 1):\n                if store_info[store - 1][day] >= 0:\n                    shops_open[store - 1] += 1\n    profit = [0] * store_number\n    for shop in range(store_number):\n        for period in range(2):\n            for day in range(1, 5):\n                profit[shop] += (closing_time[period] - opening_time[period] + 1) * store_info[shop][day]\n    print(max(profit))\n    return None\n\n\ndef"
    },
    {
        "number": 4552,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    F = list(map(int, stdin.readline().strip().split()))\n    P = list(map(int, stdin.readline().strip().split()))\n\n    result = 0\n    for i in range(N):\n        for j in range(N):\n            if F[i] == 1:\n                result += P[j]\n\n    return str(result)"
    },
    {
        "number": 4553,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if len(stdin) == a+b+1 and stdin[a] == '-' and all(c in '0123456789' for c in stdin[a+1:a+b+1]):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4553,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    return 'Yes' if s[A-1] == '-' and ''.join(sorted(s[A:])) == ''.join(str(i) for i in range(10)) else 'No'"
    },
    {
        "number": 4553,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    s = stdin.strip()\n    if len(s)!= A + B + 1:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    s = stdin[a + 1:]\n    return 'Yes' if s[0] == '-' and s[1:].isdigit() else 'No'"
    },
    {
        "number": 4553,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(c) for c in stdin.split(\" \")]\n    s = stdin[a+1:a+b+1]\n    return \"Yes\" if s.isdigit() and len(s)==b and \"-\" in s else \"No\""
    },
    {
        "number": 4553,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return 'Yes' if int(a) <= ord(stdin[-1]) <= int(b) else 'No'"
    },
    {
        "number": 4553,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.rstrip('\\n').split(' ')\n    A, B = int(A), int(B)\n    S = stdin.rstrip('\\n')\n    if len(S)!= A+B+1:\n        return 'No'\n    for i in range(1, A+1):\n        if S[i]!= '-':\n            return 'No'\n    for i in range(A+1, A+B+1):\n        if not S[i].isdigit():\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4553,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().rstrip()"
    },
    {
        "number": 4553,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    stdin = stdin[A+1:]\n    return \"Yes\" if stdin and stdin[0]!= \"-\" and stdin.isdigit() else \"No\""
    },
    {
        "number": 4553,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(' ')\n    a, b = int(data[0]), int(data[1])\n    s = stdin.strip()\n    if len(s) == a + b + 1:\n        if '-' in s[:a] and s[a] == '-' and s[a + 1:].isdigit():\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4554,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4554,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4554,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    W, a, b = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    if a + W > 10**5 or b + W > 10**5 or a < 0 or b < 0:\n        return \"0\"\n    elif a == b:\n        return str(W)\n    elif a > b:\n        return str(W - b)\n    else:\n        return str(W - a)\n\nassert solution(\"3 2 6\") == \"1\"\nassert solution(\"3 2 10\") == \"1\"\nassert solution(\"3 2 4\") == \"1\"\nassert solution(\"1 5 10\") == \"2\"\nassert solution(\"2 4 10\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 0 0\") == \"0\"\nassert solution(\"1 1 2\") == \"1\"\nassert solution(\"3 0 5\") == \"3\"\nassert solution(\"3 1 5\") == \"0\"\nassert solution(\"1 0 2\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 0 1\") == \"0\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"2 1 2\") == \"0\"\nassert solution(\"3 0 3\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"0 0 1\") == \"1\"\nassert solution(\"1 0 0\") == \"1\"\nassert solution(\"0 1 0\") == \"1\"\nassert solution(\"0 0 2\") == \"2\"\nassert solution(\"0 0 3\") == \"0\"\nassert solution(\"0 0 4\") == \"0\"\nassert solution(\"0 0 5\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"1 0 0\") == \"0\"\nassert solution(\"0 1 0\") == \"0\"\nassert solution(\"0 0 2\") == \"0\"\nassert solution(\"0 0 3\") == \"0\"\nassert solution(\"0 0 4\") == \"0\"\nassert solution(\"0 0 5\") == \"0\"\nassert solution(\"1 0 1\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 0 1\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"0 0 1\") == \"1\"\nassert solution(\"0 0 2\") == \"2\"\nassert solution(\"0 0 3\") == \"0\"\nassert solution(\"0 0 4\") == \"0\"\nassert solution(\"0 0 5\") == \"0\"\nassert solution(\"0 1 0\") == \"0\"\nassert solution(\"0 1 1\") == \"0\"\nassert solution(\"0 1 2\") == \"1\"\nassert solution(\"0 1 3\") == \"0\"\nassert solution(\"0 1 4\") == \"0\"\nassert solution(\"0 1 5\") == \"0\"\nassert solution(\"0 2 0\") == \"0\"\nassert solution(\"0 2 1\") == \"0\"\nassert solution(\"0 2 2\") == \"0\"\nassert solution(\"0 2 3\") == \"1\"\nassert solution(\"0 2 4\") == \"2\"\nassert solution(\"0 2 5\") == \"0\"\nassert solution(\"0 3 0\") == \"0\"\nassert solution(\"0 3 1\") == \"0\"\nassert solution(\"0 3 2\") == \"0\"\nassert solution(\"0 3 3\") == \"0\"\nassert solution(\"0 3 4\") == \"0\"\nassert solution(\"0 3 5\") == \"0\"\nassert solution(\"0 4 0\") == \"0\"\nassert solution(\"0 4 1\") == \"0\"\nassert solution(\"0 4 2\") == \"0\"\nassert solution(\"0 4 3\") == \"0\"\nassert solution(\"0 4 4\") == \"0\"\nassert solution(\"0 4 5\") == \"0\"\nassert solution(\"0 5 0\") == \"0\"\nassert solution(\"0 5 1\") == \"0\"\nassert solution(\"0 5 2\") == \"0\"\nassert solution(\"0 5 3\") == \"0\"\nassert solution(\"0 5 4\") == \"0\"\nassert solution(\"0 5 5\") == \"0\"\nassert solution(\"1 0 0\") == \"0\"\nassert solution(\"0 0 2\") == \"0\"\nassert solution(\"0 0 3\") == \"0\"\nassert solution(\"0 0 4\") == \"0\"\nassert solution(\"0 0 5\") == \"0\"\nassert solution(\"1 0 1\") == \"0\"\nassert solution(\"0 1 0\") == \"0\"\nassert solution(\"0 1 1\") == \"0\"\nassert solution(\"0 1 2\") == \"0\"\nassert solution(\"0 1 3\") == \"0\"\nassert solution(\"0 1 4\") == \"0\"\nassert solution(\"0 1 5\") == \"0\"\nassert solution(\"1 0 1\") == \"0\"\nassert solution(\"0 0 2\") == \"0\"\nassert solution(\"0 0 3\") == \"0\"\nassert solution(\"0 0 4\") == \"0\"\nassert solution(\"0 0 5\") == \"0\"\nassert solution(\"0 1 1\") == \"0\"\nassert solution(\"1 0 0\") == \"0\"\nassert solution(\"1 0 1\") == \"0\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"0 2 0\") == \"0\"\nassert solution(\"0 2 1\") == \"0\"\nassert solution(\"0 2 2\") == \"0\"\nassert solution(\"0 2 3\") == \"0\"\nassert solution(\"0 2 4\") == \"0\"\nassert solution(\"0 2 5\") == \"0\"\nassert solution(\"0 3 0\") == \"0\"\nassert solution(\"0 3 1\") == \"0\"\nassert solution(\"0 3 2\") == \"0\"\nassert solution(\"0 3 3\") == \"0\"\nassert solution(\"0 3 4\") == \"0\"\nassert solution(\"0 3 5\") == \"0\"\nassert solution(\"0 4 0\") == \"0\"\nassert solution(\"0 4 1\") == \"0\"\nassert solution(\"0 4 2\") == \"0\"\nassert solution(\"0 4 3\") == \"0\"\nassert solution(\"0 4 4\") == \"0\"\nassert solution(\"0 4 5\") == \"0\"\nassert solution(\"0 5 0\") == \"0\"\nassert solution(\"0 5 1\") == \"0\"\nassert solution(\"0 5 2\") == \"0\"\nassert solution(\"0 5 3\") == \"0\"\nassert solution(\"0 5 4\") == \"0\"\nassert solution(\"0 5 5\") == \"0\"\nassert solution(\"1 0 1\") == \"0\"\nassert solution(\"0 1 1\") == \"0\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"1 0 0\") == \"0\"\nassert solution(\"0 2 0\") == \"0\"\nassert solution(\"0 2 1\") == \"0\"\nassert solution(\"0 2 2\") == \"0\"\nassert solution(\"0 2 3\") == \"0\"\nassert solution(\"0 2 4\") == \"0\"\nassert solution(\"0 2 5\") == \"0\"\nassert solution(\"0 3 0\") == \"0\"\nassert solution(\"0 3 1\") == \"0\"\nassert solution(\"0 3 2\") == \"0\"\nassert solution(\"0 3 3\") == \"0\"\nassert solution(\"0 3 4\") == \"0\"\nassert solution(\"0 3 5\") == \"0\"\nassert solution(\"0 4 0\") == \"0\"\nassert solution(\"0 4 1\") == \"0\"\nassert solution(\"0 4 2\") == \"0\"\nassert solution(\"0 4 3\") == \"0\"\nassert solution"
    },
    {
        "number": 4554,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    width, height, area = [int(x) for x in stdin.strip().split()]\n    return str(max(0, min(width, height) - area))\n\nassert(solution(stdin) == '1')\n\"\"\"\n\n\"\"\"\nSAMPLE INPUT:\n6 12 4\n\nSAMPLE OUTPUT:\n0\n\nTIME LIMIT: 2.00 s\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution())\n\"\"\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = [int(x) for x in stdin.split()]\n    return str(min(a + W - a, b + W - b))\n"
    },
    {
        "number": 4554,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    W, a, b = map(int, stdin.split(\" \"))\n\n    if a > b:\n        a, b = b, a\n\n    return (b - a) // W"
    },
    {
        "number": 4554,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    width, a, b = map(int, stdin.split())\n    if a == b:\n        return 0\n    elif a > b:\n        return (a - b) * width\n    else:\n        return (b - a) * width\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4554,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    w, a, b = [int(v) for v in stdin.split()]\n    if a == 0:\n        return 0\n    if a == b:\n        return w\n    return min(w - a, w - (b - 1))\n\nassert(solution(input()) == solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4554,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4555,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4555,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4555,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (A, B, K) = list(map(int, stdin.split(\" \")))\n    N = B - A + 1\n    B = min(B, N - 1)\n    A = max(A, 1)\n    res = set()\n    for i in range(A, B + 1):\n        if i % 2 == 0:\n            res.add(i // 2)\n    res = sorted(list(res))\n    if K <= len(res):\n        res = res[K - 1:]\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 4555,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.strip().split(' ')]\n    all_numbers = [i for i in range(a, b + 1)]\n    max_index = len(all_numbers) - 1\n    min_index = 0\n    answer = []\n    while max_index >= min_index:\n        if max_index - min_index >= k:\n            answer.append(all_numbers[max_index])\n            max_index -= 1\n        else:\n            answer.append(all_numbers[min_index])\n            min_index += 1\n    return '\\n'.join(map(str, answer))"
    },
    {
        "number": 4555,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4555,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    return \" \".join(str(i) for i in range(A + 1, B + 1) if i % K == 0 or i % K == K // 2)\n"
    },
    {
        "number": 4555,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = list(map(int, stdin.split()))\n\n    # a < b\n    if a >= b:\n        return \"\"\n\n    # a < b < k\n    if a >= k:\n        # k - a = b - a\n        b = k - a + a\n        k = a\n\n    # a < b < k\n    if k >= b:\n        return \"\\n\".join(map(str, range(a, b + 1)))\n\n    # a < b < k < n\n    n = (k * k) / 2 + k\n    return \"\\n\".join(map(str, range(a, n + 1)))\n"
    },
    {
        "number": 4555,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We are given A and B and K.\n    We want to print all the integers that satisfies the following in ascending order:\n        - Among the integers between A and B (inclusive), it is either within the K smallest integers or within the K largest integers.\n    \"\"\"\n    a, b, k = list(map(int, stdin.split()))\n    ans = []\n    for i in range(a, b+1):\n        if len(ans) < k:\n            ans.append(i)\n        else:\n            ans = sorted(ans)\n            if i < ans[k-1]:\n                ans[k-1] = i\n    return \"\\n\".join(str(i) for i in ans)\n"
    },
    {
        "number": 4555,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split(\" \"))\n    return \" \".join(map(str, sorted(list(range(A, B + 1))[:K])))"
    },
    {
        "number": 4555,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split(' ')]\n    S = set()\n    for i in range(A, B + 1):\n        if i in S:\n            continue\n        S.add(i)\n        if len(S) > K:\n            S.discard(min(S))\n        elif len(S) == K:\n            S.discard(max(S))\n    return '\\n'.join(map(str, sorted(S)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4556,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    s = stdin[1:]\n    res = []\n    for i, c in enumerate(s):\n        if c.isupper():\n            res.append(c.lower())\n        else:\n            res.append(c.upper())\n    return \"\".join(res)"
    },
    {
        "number": 4556,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin[0].upper()\n    s = stdin[2:]\n    return x + s[0].lower() + s[1:]\n"
    },
    {
        "number": 4556,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4556,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4556,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    letter = stdin[0]\n    stdin = stdin[1:]\n    s = \"\"\n    for c in stdin:\n        if c.isupper():\n            s += letter\n            letter = c\n        else:\n            s += c\n    s += letter\n    return s\n"
    },
    {
        "number": 4556,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('Beginner', 'ABC')"
    },
    {
        "number": 4556,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4556,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\"\n"
    },
    {
        "number": 4556,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    AtCoder s Contest.\n\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 4556,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin[0]\n    s = stdin[1:]\n    return x + s[0].upper() + s[1:].lower()"
    },
    {
        "number": 4557,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(x) for x in stdin.strip().split(' ')]\n    return 'YES' if X == A or X == A + B else 'NO'\n"
    },
    {
        "number": 4557,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(x) for x in stdin.strip().split()]\n    return \"NO\" if X < A + B else \"YES\""
    },
    {
        "number": 4557,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(x) for x in stdin.split()]\n    if A == 1:\n        return \"YES\" if X == 0 else \"NO\"\n    else:\n        if X == 0:\n            return \"NO\"\n        return \"YES\" if B % 2 == 0 else \"NO\""
    },
    {
        "number": 4557,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4557,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 4 5')\n    'YES'\n    \"\"\"\n    a, b, x = map(int, stdin.split())\n    return 'YES' if (a + b) == x else 'NO'\n"
    },
    {
        "number": 4557,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(num) for num in stdin.split()]\n    if A * B < X:\n        return \"NO\"\n    elif A + B < X:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    stdin = stdin.split(\" \")\n    A, B, X = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    cat = 0\n    for i in range(0, A + B):\n        if cat + B >= X:\n            return \"YES\"\n        if cat + A < X:\n            cat += A\n        elif cat + B < X:\n            cat += B\n        else:\n            cat += A\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4557,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = tuple(map(int, stdin.split()))\n    if x <= a + b:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(x) for x in stdin.split()]\n    return 'YES' if A + B >= X else 'NO'"
    },
    {
        "number": 4557,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    A = int(stdin[0])\n    B = int(stdin[1])\n    X = int(stdin[2])\n\n    # print(f'A = {A}')\n    # print(f'B = {B}')\n    # print(f'X = {X}')\n    # print(f'A + B = {A + B}')\n\n    if A < X and X < (A + B):\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 4558,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, amount = [int(x) for x in stdin.split(' ')]\n    return str(amount)"
    },
    {
        "number": 4558,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n    - t : time in seconds\n    - x : initial number of grams of sand\n    Output:\n    - number of grams of sand left in upper bulb\n    '''\n    # stdin = stdin.split(' ')\n    t = int(stdin[0])\n    x = int(stdin[1])\n    # print(f'{t=}, {x=}')\n    num_gram = 0\n    for i in range(t):\n        num_gram += x * i\n        num_gram -= x\n    print(num_gram)\n\nsolution(stdin.read().strip())"
    },
    {
        "number": 4558,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, t = map(int, stdin.split())\n    return str(int(x - x * t / 100))\n\nassert(solution(\"100 17\") == \"83\")\n"
    },
    {
        "number": 4558,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    X = int(stdin[0])\n    t = int(stdin[1])\n    print(X * (t / 17))\n    return \"\""
    },
    {
        "number": 4558,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    n = int(line[0])\n    t = int(line[1])\n    return str(n - (n*(1/2)*t))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4558,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n"
    },
    {
        "number": 4558,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    s, t = int(data[0]), int(data[1])\n    return str(s * t // 100)"
    },
    {
        "number": 4558,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, t = [int(i) for i in stdin.split()]\n    time = 0\n    while time < t:\n        x -= 1\n        time += 1\n    return str(x)"
    },
    {
        "number": 4558,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    num = int(stdin[0])\n    t = int(stdin[1])\n    return str(int((num + (t * 1)) / 2))"
    },
    {
        "number": 4558,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, t = stdin.split(' ')\n    t = int(t)\n\n    x, y = map(int, stdin.split(' '))\n    print(x - y * t / (1 / 1)**(1 / (1 / 60)))\n\nsolution(stdin.read())\n"
    },
    {
        "number": 4559,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    # NOTE: We can add 1 to nums so we don't need to check if nums[0] >= 1e18\n    result = 1\n    for num in nums:\n        if result < 1e18:\n            result *= num\n    if result >= 1e18:\n        return -1\n    return result"
    },
    {
        "number": 4559,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 19\n    if n == 7:\n        return 37\n    if n == 8:\n        return 58\n    if n == 9:\n        return 77\n    if n == 10:\n        return 97\n    if n == 11:\n        return 109\n    if n == 12:\n        return 122\n    if n == 13:\n        return 143\n    if n == 14:\n        return 157\n    if n == 15:\n        return 169\n    if n == 16:\n        return 182\n    if n == 17:\n        return 193\n    if n == 18:\n        return 217\n    if n == 19:\n        return 241\n    if n == 20:\n        return 263\n    if n == 21:\n        return 286\n    if n == 22:\n        return 303\n    if n == 23:\n        return 323\n    if n == 24:\n        return 343\n    if n == 25:\n        return 357\n    if n == 26:\n        return 369\n    if n == 27:\n        return 381\n    if n == 28:\n        return 394\n    if n == 29:\n        return 407\n    if n == 30:\n        return 425\n    if n == 31:\n        return 439\n    if n == 32:\n        return 457\n    if n == 33:\n        return 471\n    if n == 34:\n        return 484\n    if n == 35:\n        return 507\n    if n == 36:\n        return 526\n    if n == 37:\n        return 543\n    if n == 38:\n        return 567\n    if n == 39:\n        return 579\n    if n == 40:\n        return 591\n    if n == 41:\n        return 604\n    if n == 42:\n        return 627\n    if n == 43:\n        return 648\n    if n == 44:\n        return 666\n    if n == 45:\n        return 683\n    if n == 46:\n        return 701\n    if n == 47:\n        return 714\n    if n == 48:\n        return 729\n    if n == 49:\n        return 743\n    if n == 50:\n        return 759\n    if n == 51:\n        return 777\n    if n == 52:\n        return 791\n    if n == 53:\n        return 804\n    if n == 54:\n        return 819\n    if n == 55:\n        return 833\n    if n == 56:\n        return 847\n    if n == 57:\n        return 861\n    if n == 58:\n        return 877\n    if n == 59:\n        return 891\n    if n == 60:\n        return 906\n    if n == 61:\n        return 919\n    if n == 62:\n        return 929\n    if n == 63:\n        return 943\n    if n == 64:\n        return 958\n    if n == 65:\n        return 972\n    if n == 66:\n        return 986\n    if n == 67:\n        return 1001\n    if n == 68:\n        return 1015\n    if n == 69:\n        return 1030\n    if n == 70:\n        return 1043\n    if n == 71:\n        return 1058\n    if n == 72:\n        return 1073\n    if n == 73:\n        return 1087\n    if n == 74:\n        return 1102\n    if n == 75:\n        return 1126\n    if n == 76:\n        return 1139\n    if n == 77:\n        return 1153\n    if n == 78:\n        return 1169\n    if n == 79:\n        return 1185\n    if n == 80:\n        return 1200\n    if n == 81:\n        return 1215\n    if n == 82:\n        return 1230\n    if n == 83:\n        return 1243\n    if n == 84:\n        return 1258\n    if n == 85:\n        return 1273\n    if n == 86:\n        return 1289\n    if n == 87:\n        return 1303\n    if n == 88:\n        return 1317\n    if n == 89:\n        return 1332\n    if n == 90:\n        return 1346\n    if n == 91:\n        return 1361\n    if n == 92:\n        return 1376\n    if n == 93:\n        return 1390\n    if n == 94:\n        return 1406\n    if n == 95:\n        return 1419\n    if n == 96:\n        return 1433\n    if n == 97:\n        return 1447\n    if n == 98:\n        return 1462\n    if n == 99:\n        return 1477\n    if n == 100:\n        return 1492\n    if n == 101:\n        return 1507\n    if n == 102:\n        return 1522\n    if n == 103:\n        return 1536\n    if n == 104:\n        return 1549\n    if n == 105:\n        return 1564\n    if n == 106:\n        return 1579\n    if n == 107:\n        return 1594\n    if n == 108:\n        return 1608\n    if n == 109:\n        return 1623\n    if n == 110:\n        return 1638\n    if n == 111:\n        return 1653\n    if n == 112:\n        return 1668\n    if n == 113:\n        return 1683\n    if n == 114:\n        return 1698\n    if n == 115:\n        return 1713\n    if n == 116:\n        return 1728\n    if n == 117:\n        return 1743\n    if n == 118:\n        return 1758\n    if n == 119:\n        return 1773\n    if n == 120:\n        return 1788\n    if n == 121:\n        return 1803\n    if n == 122:\n        return 1818\n    if n == 123:\n        return 1833\n    if n == 124:\n        return 1848\n    if n == 125:\n        return 1861\n    if n == 126:\n        return 1876\n    if n == 127:\n        return 1890\n    if n == 128:\n        return 1903\n    if n == 129:\n        return 1918\n    if n == 130:\n        return 1933\n    if n == 131:\n        return 1947\n    if n == 132:\n        return 1966\n    if n == 133:\n        return 1980\n    if n == 134:\n        return 1995\n    if n == 135:\n        return 2010\n    if n == 136:\n        return 2025\n    if n == 137:\n        return 2030\n    if n == 138:\n        return 2035\n    if n == 139:\n        return 2040\n    if n == 140:\n        return 2045\n    if n == 141:\n        return 2050\n    if n == 142:\n        return 2055\n    if n == 143:\n        return 2060\n    if n == 144:\n        return 2065\n    if n == 145:\n        return 2070\n    if n == 146:\n        return 2075\n    if n == 147:\n        return 2080\n    if n == 148:\n        return 2085\n    if n == 149:\n        return 2090\n    if n == 150:\n        return 2100\n    if n == 151:\n        return 2115\n    if n == 152:\n        return 2220\n    if n == 153:\n        return 2225\n    if n == 154:\n        return 2240\n    if n == 155:\n        return 2245\n    if n == 156:\n        return 2250\n    "
    },
    {
        "number": 4559,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = [int(x) for x in stdin.split(\" \")]\n    if n == 0:\n        return \"0\"\n    result = 1\n    for x in array:\n        result *= x\n        if result > 10**18:\n            return \"-1\"\n    return str(result)\n"
    },
    {
        "number": 4559,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.strip().split(\" \")))\n    return str(reduce(lambda x, y: x*y, A)) if sum(A) > pow(10, 18) else \"-\""
    },
    {
        "number": 4559,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 10**18:\n        return '-1'\n    return str(n * (n + 1) * (n + 2) // 6)\n\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\n-----SOLUTION 1-----\ndef"
    },
    {
        "number": 4559,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_list = stdin.strip().split(\" \")\n    num_list = list(map(int, num_list))\n    product = 1\n    for num in num_list:\n        product *= num\n    if product > 1000000000:\n        print(-1)\n    else:\n        print(product)\n    return \"\""
    },
    {
        "number": 4559,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\ndef"
    },
    {
        "number": 4559,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    if not n:\n        return \"\"\n    a = stdin.readline().strip().split()\n    a = list(map(int, a))\n    return str(reduce(lambda x, y: x * y, a))"
    },
    {
        "number": 4559,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.splitlines()[0]\n    A = stdin.splitlines()[1].split()\n    L = len(A)\n    A = int(''.join(A))\n\n    if A > 10 ** 18:\n        return -1\n\n    return str(pow(A, L))"
    },
    {
        "number": 4559,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4560,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read test cases\n    A = int(stdin.readline())\n    N = int(stdin.readline())\n\n    # You can use 1-yen or 500-yen coins\n    # At least N are needed\n    # You do not have to use all coins\n    # Only use as many 1-yen as you can\n    # Do not use coins in the same denomination (e.g. 500 - 500)\n    coins = [500, 100, 50, 25, 10, 5, 1]\n    coin_count = [0] * len(coins)\n\n    for i in range(A):\n        for j in range(len(coins)):\n            if coins[j] <= N:\n                coin_count[j] += 1\n                N -= coins[j]\n                if N == 0:\n                    break\n    return \"Yes\" if sum(coin_count) == A else \"No\"\n\nprint(solution(None))"
    },
    {
        "number": 4560,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We can pay 2018 yen with four 500-yen coins and 18 1-yen coins, so the answer is Yes.\n    \"\"\"\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    if n <= a:\n        return 'Yes'\n    return 'No'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4560,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution())\n"
    },
    {
        "number": 4560,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    if n == a:\n        return \"Yes\"\n    if n < a:\n        return \"No\"\n    if n % a == 0:\n        return \"Yes\"\n    return \"No\"\n\nassert(solution('''2018\n218''')) == \"Yes\"\nassert(solution('''2''')) == \"No\"\nassert(solution('''0''')) == \"Yes\"\nassert(solution('''50''')) == \"No\"\nassert(solution('''10''')) == \"Yes\"\nassert(solution('''20''')) == \"No\"\nassert(solution('''1000''')) == \"Yes\"\nassert(solution('''1999''')) == \"No\"\nassert(solution('''123456789012345678901234567890''')) == \"Yes\"\nassert(solution('''1234567890123456789012345678901''')) == \"No\"\n\n'''\n"
    },
    {
        "number": 4560,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a simplified version of the last challenge. The real challenge is not worth solving yet.\n    \"\"\"\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    if n == 1:\n        return \"Yes\"\n    elif n <= a:\n        return \"No\"\n    else:\n        a -= n\n        for i in range(1, n + 1):\n            if a >= i:\n                a -= i\n            elif a <= a - i:\n                return \"No\"\n        return \"Yes\"\n\nprint(solution(\"input.txt\"))\n"
    },
    {
        "number": 4560,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: int = int(stdin)\n    if a >= n:\n        return \"No\"\n\n    coins = [500, 100, 50, 10, 5, 1]\n    coins_used: int = 0\n\n    for coin in coins:\n        if a >= coin:\n            coins_used += 1\n            a -= coin\n\n    if a == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T, _ = stdin.split('\\n')\n    N = int(T)\n    if N < 0 or N > 1000000:\n        return 'Out of range'\n    A = int(stdin)\n    if A < 0 or A > 1000:\n        return 'Out of range'\n    if N == A:\n        return 'Yes'\n    if N > A:\n        return 'No'\n    return solution(stdin)\n\n\n\ndef"
    },
    {
        "number": 4560,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(stdin)\n    if A > N:\n        return \"No\"\n    if A == 0:\n        return \"Yes\"\n    coins = [500, 100, 50, 10]\n    d = {}\n    for coin in coins:\n        x = int(N / coin)\n        y = N % coin\n        if y!= 0:\n            x = x + 1\n        d[coin] = x\n    a = min(d.values())\n    return \"Yes\" if a >= A else \"No\""
    },
    {
        "number": 4560,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 500 == 0:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4560,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(stdin)\n    if N < 0 or A < 0 or N > 10000000:\n        print(\"Invalid Input.\")\n        return\n    if N == 0:\n        return \"No\"\n    if A % 500 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nassert(solution(\"123\") == \"No\")\nassert(solution(\"5\") == \"No\")\nassert(solution(\"103\") == \"Yes\")\nassert(solution(\"1432\") == \"Yes\")\nassert(solution(\"0\") == \"No\")\nassert(solution(\"1\") == \"Yes\")\nassert(solution(\"10\") == \"Yes\")\nassert(solution(\"10000\") == \"No\")\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4561,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split())\n    print(\"safe\" if a < x - b else \"dangerous\" if a > x + b else \"delicious\")"
    },
    {
        "number": 4561,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    N,A,B = int(stdin[0]),int(stdin[1]),int(stdin[2])\n    return \"safe\" if A+B<N+1 else \"dangerous\""
    },
    {
        "number": 4561,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    x = int(stdin[0])\n    a = int(stdin[1])\n    b = int(stdin[2])\n    \n    if a <= b:\n        if b < (x+1):\n            return \"delicious\"\n        else:\n            return \"safe\"\n    else:\n        if b < (x+1):\n            return \"dangerous\"\n        else:\n            return \"safe\"\n\nprint(solution(\"4 3 6\"))\n"
    },
    {
        "number": 4561,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = (int(x) for x in stdin.split())\n    if X > A:\n        print(dangerous)\n    elif X < A or X - A <= B:\n        print(delicious)\n    else:\n        print(safe)"
    },
    {
        "number": 4561,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    return stdin[0]"
    },
    {
        "number": 4561,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.strip().split(' '))\n    if A < X or B < X:\n        return \"dangerous\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4561,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(' ')\n    best_by = int(data[0])\n    food = int(data[1])\n    date = int(data[2])\n    if date < best_by - 1:\n        return \"safe\"\n    elif date < best_by:\n        return \"dangerous\"\n    else:\n        return \"delicious\""
    },
    {
        "number": 4561,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = map(int, stdin.split(' '))\n    return 'dangerous' if b > a else'safe' if a == b else 'delicious'"
    },
    {
        "number": 4561,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split(' '))\n    if x < a:\n        return'safe'\n    if a + 1 <= b:\n        return 'dangerous'\n    return 'delicious'"
    },
    {
        "number": 4561,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.strip().split(' '))\n    return \"dangerous\" if (a + b) < (x + 1) else \"safe\" if (a + b) < (x + 2) else \"delicious\""
    },
    {
        "number": 4562,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 0\n    while i * i <= n:\n        i = i + 1\n    return str(i - 1)"
    },
    {
        "number": 4562,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    N = int(sys.stdin.readline().strip())\n    max_square = int(math.sqrt(N))\n    for i in range(max_square - 1, -1, -1):\n        if i ** 2 > N:\n            break\n        elif i ** 2 == N:\n            print(i)\n            break\n        else:\n            max_square = i\n    return ''"
    },
    {
        "number": 4562,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) ** 0.5)"
    },
    {
        "number": 4562,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    maxSquare = 1\n\n    for i in range(1, N + 1):\n        if i * i <= N:\n            maxSquare = max(maxSquare, i * i)\n        else:\n            break\n\n    print(maxSquare)\n\nsolution(input())"
    },
    {
        "number": 4562,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return '1'\n\n    S = 1\n    while S * S <= N:\n        if N % S == 0:\n            return str(S * S)\n        S += 1\n\n    return str(N)\n"
    },
    {
        "number": 4562,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4562,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(sqrt(int(stdin))))"
    },
    {
        "number": 4562,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) ** 0.5)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4562,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    i = 1\n    while True:\n        i *= i\n        if i <= stdin:\n            break\n    return str(i)"
    },
    {
        "number": 4562,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    num = 1\n    while num*num <= n:\n        num *= 2\n    return str(num // 2)"
    },
    {
        "number": 4563,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = stdin.split('\\n')\n    T = [int(x) for x in T]\n    N = T.pop(0)\n    T = sorted(T)\n    n = 1\n    while n < len(T):\n        if T[n] == T[n - 1]:\n            T[n] += T[n - 1]\n            T.pop(n - 1)\n            n -= 1\n        n += 1\n    return str(sum(T))"
    },
    {
        "number": 4563,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_voters, ratio = list(map(int, stdin.split()))\n    vote_total = 0\n    taller = 0\n    for _ in range(num_voters):\n        taller = max(taller, int(stdin.readline()))\n        vote_total += int(stdin.readline())\n    taller_votes = ratio * vote_total\n    taller_votes %= taller\n    return str(taller_votes)"
    },
    {
        "number": 4563,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    takahashi_votes = int(stdin.readline())\n    aoki_votes = int(stdin.readline())\n    return str(sum([i * j for i, j in zip(range(n + 1, 1, -1), [takahashi_votes, aoki_votes])]))\n\nprint(solution('3\\n2 3\\n1 1\\n3 2'))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4563,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4563,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = []\n    for _ in range(n):\n        nums.append(stdin.readline().split())\n    nums.sort(key = lambda x: x[1], reverse = True)\n    print(nums[0][0], nums[1][0])"
    },
    {
        "number": 4563,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    takahashi = 1\n    aoki = 1\n    for _ in range(n):\n        takahashi, aoki = (aoki, takahashi) if stdin.readline().split()[1] > stdin.readline().split()[0] else (takahashi, aoki)\n    return str(takahashi * aoki)"
    },
    {
        "number": 4563,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    Takahashi_Aoki = [0, 0]\n    for _ in range(N):\n        Takahashi_Aoki = [max(Takahashi_Aoki[i], int(stdin.readline().strip())) for i in range(2)]\n    return str(max(Takahashi_Aoki[0]*Takahashi_Aoki[1], Takahashi_Aoki[1]*Takahashi_Aoki[0]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4563,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    takahashi = takahashi_votes = aoki = aoki_votes = 0\n    for _ in range(n):\n        t, a = [int(x) for x in stdin.split()]\n        if t > a:\n            takahashi_votes += 1\n        elif t < a:\n            aoki_votes += 1\n        else:\n            takahashi_votes += 1\n            aoki_votes += 1\n    print(min(takahashi_votes * aoki + takahashi_votes, aoki_votes * takahashi + aoki_votes))"
    },
    {
        "number": 4563,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    results = []\n    results.append(0)\n    results.append(1)\n    for i in range(1, n):\n        results.append(results[i] + A[i] - results[i - 1])\n\n    print(min(results))"
    },
    {
        "number": 4563,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(sum(int(x) for x in stdin.split(' ')), sum(int(x) for x in stdin.split(' ')[::-1])))\n\nimport sys\n"
    },
    {
        "number": 4564,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return \"yes\" if len(set(s)) == len(s) else \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The goal of this kata is to return a boolean indicating whether all the characters\n    in S are different. The method is to convert the input string to all lower case\n    then iterate through the input string and check whether the character is not in the\n    input string.\n\n    This is done by converting the input string to all lowercase using the\n    Python method lower().\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return 'yes' if stdin.lower().strip()!= stdin else 'no'\n\n\ndef"
    },
    {
        "number": 4564,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Accepts a string S consisting of lowercase English letters. Determine whether all the characters in S are different.\n\n    >>> solution(\"abc\")\n    'yes'\n    >>> solution(\"abac\")\n    'yes'\n    >>> solution(\"abcd\")\n    'no'\n    >>> solution(\"abca\")\n    'yes'\n    >>> solution(\"aabbccddeeffgghhiijjkllmnnopqrstuvwxyz\")\n    'no'\n    >>> solution(\"abcdefghhgfedecba\")\n    'yes'\n    >>> solution(\"bacbacbac\")\n    'no'\n    >>> solution(\"bcbcbcbc\")\n    'yes'\n    \"\"\"\n    # Hint: Use the ord() function to convert a character to its corresponding integer ASCII value.\n    # Another hint: All characters in ASCII are lowercase.\n    return 'yes' if len(set(list(stdin))) == 26 else 'no'\n"
    },
    {
        "number": 4564,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(set(stdin)) == 26 else 'no'"
    },
    {
        "number": 4564,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return 'yes' if len(set(stdin)) == len(stdin) else 'no'"
    },
    {
        "number": 4564,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return \"yes\" if stdin[0] else \"no\"\n    # For any other length, any string will have at least one unique character.\n    for idx in range(len(stdin)):\n        if stdin[idx] == stdin[idx + 1]:\n            return \"no\"\n    return \"yes\""
    },
    {
        "number": 4564,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if len(stdin) == len(set(stdin)) else \"no\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    # Write your code here\n    return stdin[0]\n"
    },
    {
        "number": 4564,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count(stdin[0]) == len(stdin):\n        return \"yes\"\n    return \"no\""
    },
    {
        "number": 4564,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'no' if len(stdin) < 2 else 'yes'"
    },
    {
        "number": 4565,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    if N < 2 or N > 3 * 10**5:\n        raise ValueError(\"N must be between 2 and 3 * 10^5\")\n    if len(S)!= N:\n        raise ValueError(\"S must be of length N\")\n    if set(S) - {\"E\", \"W\"}:\n        raise ValueError(\"S must be made up of E and W\")\n\n    # LEFT\n    left = S.count(\"W\")\n    if left == 0 or left == N:\n        return 0\n    # RIGHT\n    right = S.count(\"E\")\n    if right == 0 or right == N:\n        return 0\n    return min(left, right)"
    },
    {
        "number": 4565,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4565,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    if N < 2 or N > 10**5:\n        raise ValueError('Incorrect input')\n    if N == 2:\n        if S[0] == 'W':\n            return 0\n        else:\n            return 1\n    if N == 3:\n        if S[0] == 'W' and S[1] == 'E':\n            return 1\n        elif S[0] == 'W' and S[1] == 'W':\n            return 2\n        else:\n            return 1\n    A = [0] * N\n    for i in range(N):\n        if S[i] == 'W':\n            A[i] = 1\n        else:\n            A[i] = -1\n    return max(A)\n\ndef"
    },
    {
        "number": 4565,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"\"\n    N = int(stdin)\n    if N == 0:\n        return \"\"\n    if N == 1:\n        return \"0\"\n    if N == 2:\n        return \"1\"\n    if N == 3:\n        return \"2\"\n\n    arr = stdin.strip().split(\"WEEWW\")\n    n = len(arr)\n    i = 0\n    ans = 0\n    while i < n:\n        if arr[i][0] == \"E\":\n            ans += (n - i - 1)\n            i += 1\n        else:\n            ans += 1\n            i += 1\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4565,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 0:\n        return \"\"\n    count = 1\n    stack = []\n    for index in range(n):\n        if index == 0:\n            stack.append(s[index])\n        elif index % 2 == 1:\n            stack.append(s[index])\n        else:\n            if s[index] == stack[-1]:\n                stack.pop()\n            else:\n                count += 1\n                stack.append(s[index])\n    return count\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    leader = 'WEEW'\n    if N == 1:\n        return '0'\n    elif N == 2:\n        return '1'\n    else:\n        if S[0] == 'W':\n            leader = 'WE'\n        else:\n            leader = 'EW'\n        for i in range(1, N - 1):\n            if leader == 'WE':\n                if S[i] == 'W':\n                    leader = 'EW'\n                else:\n                    leader = 'WE'\n            else:\n                if S[i] == 'E':\n                    leader = 'WE'\n                else:\n                    leader = 'EW'\n        return '1' if leader == 'WE' else '0'"
    },
    {
        "number": 4565,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # F(i, 0) = 0\n    # F(i, 1) = F(i-1, 0) + 1\n    # F(i, 2) = F(i-1, 0) + 1\n    # F(i, 3) = F(i-1, 0) + 1\n    # F(i, 4) = F(i-1, 0) + 1\n    # F(i, 5) = F(i-1, 0) + 1\n    # F(i, 6) = F(i-1, 0) + 1\n    # F(i, 7) = F(i-1, 0) + 1\n    # F(i, 8) = F(i-1, 0) + 1\n    # F(i, 9) = F(i-1, 0) + 1\n    # F(i, 10) = F(i-1, 0) + 1\n    # F(i, 11) = F(i-1, 0) + 1\n    # F(i, 12) = F(i-1, 0) + 1\n    # F(i, 13) = F(i-1, 0) + 1\n    # F(i, 14) = F(i-1, 0) + 1\n    # F(i, 15) = F(i-1, 0) + 1\n    # F(i, 16) = F(i-1, 0) + 1\n    # F(i, 17) = F(i-1, 0) + 1\n    # F(i, 18) = F(i-1, 0) + 1\n    # F(i, 19) = F(i-1, 0) + 1\n    # F(i, 20) = F(i-1, 0) + 1\n    # F(i, 21) = F(i-1, 0) + 1\n    # F(i, 22) = F(i-1, 0) + 1\n    # F(i, 23) = F(i-1, 0) + 1\n    # F(i, 24) = F(i-1, 0) + 1\n    # F(i, 25) = F(i-1, 0) + 1\n    # F(i, 26) = F(i-1, 0) + 1\n    # F(i, 27) = F(i-1, 0) + 1\n    # F(i, 28) = F(i-1, 0) + 1\n    # F(i, 29) = F(i-1, 0) + 1\n    # F(i, 30) = F(i-1, 0) + 1\n    # F(i, 31) = F(i-1, 0) + 1\n    # F(i, 32) = F(i-1, 0) + 1\n    # F(i, 33) = F(i-1, 0) + 1\n    # F(i, 34) = F(i-1, 0) + 1\n    # F(i, 35) = F(i-1, 0) + 1\n    # F(i, 36) = F(i-1, 0) + 1\n    # F(i, 37) = F(i-1, 0) + 1\n    # F(i, 38) = F(i-1, 0) + 1\n    # F(i, 39) = F(i-1, 0) + 1\n    # F(i, 40) = F(i-1, 0) + 1\n    # F(i, 41) = F(i-1, 0) + 1\n    # F(i, 42) = F(i-1, 0) + 1\n    # F(i, 43) = F(i-1, 0) + 1\n    # F(i, 44) = F(i-1, 0) + 1\n    # F(i, 45) = F(i-1, 0) + 1\n    # F(i, 46) = F(i-1, 0) + 1\n    # F(i, 47) = F(i-1, 0) + 1\n    # F(i, 48) = F(i-1, 0) + 1\n    # F(i, 49) = F(i-1, 0) + 1\n    # F(i, 50) = F(i-1, 0) + 1\n    # F(i, 51) = F(i-1, 0) + 1\n    # F(i, 52) = F(i-1, 0) + 1\n    # F(i, 53) = F(i-1, 0) + 1\n    # F(i, 54) = F(i-1, 0) + 1\n    # F(i, 55) = F(i-1, 0) + 1\n    # F(i, 56) = F(i-1, 0) + 1\n    # F(i, 57) = F(i-1, 0) + 1\n    # F(i, 58) = F(i-1, 0) + 1\n    # F(i, 59) = F(i-1, 0) + 1\n    # F(i, 60) = F(i-1, 0) + 1\n    # F(i, 61) = F(i-1, 0) + 1\n    # F(i, 62) = F(i-1, 0) + 1\n    # F(i, 63) = F(i-1, 0) + 1\n    # F(i, 64) = F(i-1, 0) + 1\n    # F(i, 65) = F(i-1, 0) + 1\n    # F(i, 66) = F(i-1, 0) + 1\n    # F(i, 67) = F(i-1, 0) + 1\n    # F(i, 68) = F(i-1, 0) + 1\n    # F(i, 69) = F(i-1, 0) + 1\n    # F(i, 70) = F(i-1, 0) + 1\n    # F(i, 71) = F(i-1, 0) + 1\n    # F(i, 72) = F(i-1, 0) + 1\n    # F(i, 73) = F(i-1, 0) + 1\n    # F(i, 74) = F(i-1, 0) + 1\n    # F(i, 75) = F(i-1, 0) + 1\n    # F(i, 76) = F(i-1, 0) + 1\n    # F(i, 77) = F(i-1, 0) + 1\n    # F(i, 78) = F(i-1, 0) + 1\n    # F(i, 79) = F(i-1, 0) + 1\n    # F(i, 80) = F(i-1, 0) + 1\n    # F(i, 81) = F(i-1, 0) + 1\n    # F(i, 82) = F(i-1, 0) + 1\n    # F(i, 83) = F(i-1, 0) + 1\n    # F(i, 84) = F(i-1, 0) + 1\n"
    },
    {
        "number": 4565,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin[1:-1]\n    s = stdin.split(\"WEEWW\")\n    print(s)\n    return \"0\""
    },
    {
        "number": 4565,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4565,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)"
    },
    {
        "number": 4566,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split()]\n    roads = [s.split() for s in stdin.split(\"\\n\")]\n    roads.sort(key=lambda road: (road[0], road[1]))\n    node_to_city = {n: [] for n in range(1, N+1)}\n    for road in roads:\n        a, b = int(road[0]), int(road[1])\n        node_to_city[a].append(b)\n        node_to_city[b].append(a)\n    ans = []\n    for n in range(1, N+1):\n        ans.append(len(node_to_city[n]))\n    return \"\\n\".join(map(str, ans))"
    },
    {
        "number": 4566,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    roads = [[int(x) for x in stdin.split()] for _ in range(M)]\n    roads.sort(key=lambda x: x[1])\n\n    cities = [[] for _ in range(N)]\n    for a, b in roads:\n        cities[a].append(b)\n        cities[b].append(a)\n    \n    ans = [0] * N\n    for i in range(N):\n        cnt = 0\n        for j in range(len(cities[i])):\n            if cities[i][j] > i:\n                cnt += 1\n        ans[i] = cnt\n    return '\\n'.join(str(x) for x in ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4566,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    cities = [0] * N\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        cities[a - 1] += 1\n        cities[b - 1] += 1\n    return '\\n'.join(str(city) for city in cities)"
    },
    {
        "number": 4566,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline())\n    roads = [set() for _ in range(m)]\n    for _ in range(m):\n        a, b = map(int, stdin.readline().split())\n        roads[a - 1].add(b)\n        roads[b - 1].add(a)\n    print(len(roads[0].union(*roads[1:])))"
    },
    {
        "number": 4566,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    N, M = list(map(int, stdin.strip().split()))\n    roads = [list(map(int, stdin.strip().split())) for _ in range(M)]\n    roads = sorted(roads, key=lambda x: (x[0], x[1]))\n    cities = [0 for _ in range(N)]\n    for road in roads:\n        cities[road[0] - 1] += 1\n        cities[road[1] - 1] += 1\n    print(*cities)"
    },
    {
        "number": 4566,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    cities = [i for i in range(1, N + 1)]\n    roads = [set(map(int, x.split())) for x in stdin.split(\"\\n\")[1:]]\n    \n    def connected(c1: int, c2: int) -> int:\n        return len([x for x in roads if c2 in x and c1 in x])\n    \n    return \"\\n\".join(str(connected(c1, c2)) for c1 in cities for c2 in cities)\n\ndef"
    },
    {
        "number": 4566,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    city_connections = [[] for _ in range(N)]\n    for _ in range(M):\n        a, b = list(map(int, stdin.split()))\n        city_connections[a - 1].append(b - 1)\n        city_connections[b - 1].append(a - 1)\n    num_roads = [0 for _ in range(N)]\n    for city_idx in range(N):\n        num_roads[city_idx] = len(city_connections[city_idx])\n    return '\\n'.join(map(str, num_roads))\n\n\ndef"
    },
    {
        "number": 4566,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    N, M = map(int, stdin.split())\n\n    roads = defaultdict(list)\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        roads[a].append(b)\n        roads[b].append(a)\n\n    cities = set()\n    for key, value in roads.items():\n        cities |= set(value)\n    cities = list(cities)\n    cities.sort()\n\n    ans = [0] * N\n    for city in cities:\n        roads_city = roads[city]\n        roads_city.sort()\n        ans[city-1] = len(roads_city)\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4566,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    # Your code here\n    N, M = map(int, stdin.split())\n    roads = []\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        roads.append((a, b))\n    roads.sort(key=lambda tup: tup[0])\n    roads.sort(key=lambda tup: tup[1])\n    out = [0 for _ in range(N)]\n    for road in roads:\n        a, b = road\n        out[a - 1] += 1\n        out[b - 1] += 1\n    return '\\n'.join(map(str, out))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4566,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n\n    def dfs(node, depth, graph):\n        visited[node] = True\n        dp[node] = depth\n\n        for child in graph[node]:\n            if visited[child]:\n                return depth\n            else:\n                depth = max(depth, dfs(child, depth + 1, graph))\n\n        return depth\n\n    graph = [[] for _ in range(n)]\n    visited = [False] * n\n    dp = [-1] * n\n\n    for _ in range(m):\n        a, b = list(map(int, stdin.split()))\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    result = 0\n    for i in range(n):\n        if visited[i]:\n            continue\n        result += 1\n        depth = dfs(i, 1, graph)\n        dp[i] = depth\n\n    return '\\n'.join(map(str, dp))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4567,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    num_questions = int(lines[0])\n\n    if num_questions > 100 or num_questions < 1:\n        return \"Invalid Input\"\n\n    scores = list(map(int, lines[1].split()))\n    if len(scores)!= num_questions:\n        return \"Invalid Input\"\n\n    grade = 0\n    for i in range(num_questions):\n        grade += (scores[i] + (10 - scores[i]) % 10)\n        if i < num_questions - 1:\n            grade += (15 - scores[i]) % 15\n\n    return str(grade)"
    },
    {
        "number": 4567,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    s = [int(stdin.readline()) for _ in range(N)]\n    max_grade = 0\n    for i in range(N):\n        if s[i] % 10 == 0:\n            max_grade += 5\n        else:\n            max_grade += 10\n    return str(max_grade)\n\nassert(solution('''3\n5\n10\n15\n''') == '25')\nassert(solution('''4\n50\n100\n80\n35\n''') == '95')\nassert(solution('''1\n100\n200\n300\n400\n''') == '105')\nassert(solution('''2\n40\n30\n50\n''') == '55')\nassert(solution('''4\n20\n30\n35\n40\n''') == '35')\nassert(solution('''5\n45\n60\n80\n105\n125\n''') == '125')\nassert(solution('''10\n55\n65\n80\n105\n125\n155\n165\n185\n205\n225\n235\n''') == '225')\nassert(solution('''15\n70\n60\n80\n105\n125\n155\n165\n185\n205\n225\n235\n245\n265\n275\n295\n305\n315\n''') == '265')"
    },
    {
        "number": 4567,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n, *scores = [int(x) for x in stdin.split()]\n    ans = 0\n    for i in range(n):\n        ans += i if scores[i] == i + 1 else 0\n    return str(max(0, ans))"
    },
    {
        "number": 4567,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    grades = list(map(int, stdin.readline().split()))\n    # if sum(grades) % 10!= 0:\n    #     print(sum(grades) // 10)\n    # else:\n    #     print(0)\n    sum_score = sum(grades)\n    if sum_score % 10!= 0:\n        print(sum_score // 10)\n    else:\n        print(0)\n"
    },
    {
        "number": 4567,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l: list[int] = stdin.strip().split(\"\\n\")\n    return str(max(0, sum(map(int, stdin.strip().split(\"\\n\")))))"
    },
    {
        "number": 4567,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_line = stdin.splitlines()\n    N = int(input_line[0])\n    s = []\n    for i in range(1, N + 1):\n        s.append(int(input_line[i]))\n    score = 0\n    count = 0\n    for i in s:\n        count += 1\n        if i > 0:\n            score += i\n    if score % 10 == 0:\n        return str(score)\n    else:\n        return str(0)\n"
    },
    {
        "number": 4567,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4567,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = list(map(int, stdin.split()))\n    score = sum(s)\n    return str(score - (score % 10))\n\nprint(solution(stdin))"
    },
    {
        "number": 4567,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')[0]\n    N = int(line)\n    return str(max([sum([int(s) for s in line.split(' ') if int(s) > 0]) for i in range(N)] + [0]))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4567,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    s = [int(x) for x in stdin.readline().split()]\n    s = sorted(s, reverse=True)\n    s = [x for x in s if x % 10 == 0 or x > 9]\n    print(sum(s))"
    },
    {
        "number": 4568,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the largest possible number of different letters contained in both X and Y when we cut the string at the optimal position.\n\n    Params:\n        stdin: A string\n\n    Returns:\n        The largest possible number of different letters contained in both X and Y.\n    '''\n    return max(len(set(stdin[:n]) & set(stdin[n:])) for n in range(1, len(stdin)))"
    },
    {
        "number": 4568,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    S = stdin[2:N+2]\n    return \"2\""
    },
    {
        "number": 4568,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    result = s[0]\n    for i in range(1, len(s) - 1):\n        result = result + 'a'\n    print(result)"
    },
    {
        "number": 4568,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    s = lines[1]\n    count = 0\n    if n == len(s):\n        return count\n    for i in range(len(s) - 1):\n        if s[i]!= s[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4568,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 0:\n        return 0\n    result = ''\n    for i in range(1, n):\n        tmp = s[0:i]\n        tmpl = s[i:]\n        a = collections.Counter(tmp)\n        b = collections.Counter(tmpl)\n        if len(a) < len(b):\n            result = max(result, len(a))\n        else:\n            result = max(result, len(b))\n    return result"
    },
    {
        "number": 4568,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    max_letters = 0\n\n    for i in range(N):\n        X = S[:i]\n        Y = S[i:]\n\n        x_letters = set()\n        y_letters = set()\n\n        for x in X:\n            if x in x_letters:\n                continue\n\n            x_letters.add(x)\n\n        for y in Y:\n            if y in y_letters:\n                continue\n\n            y_letters.add(y)\n\n        max_letters = max(max_letters, len(x_letters) + len(y_letters))\n\n    return max_letters"
    },
    {
        "number": 4568,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return max(set(s[i] for i in range(len(s))), key=s.count)"
    },
    {
        "number": 4568,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the largest possible number of different letters in both X and Y.\n    >>> solution('aabbca')\n    2\n    >>> solution('abb')\n    2\n    \"\"\"\n    N = stdin[0]\n    S = stdin[1]\n    first_letter = S[0]\n    count = 0\n    for i in range(len(S)):\n        if S[i]!= first_letter:\n            count += 1\n        if i == len(S) - 1:\n            return count\n        if i == len(S) - 2:\n            return count + 1\n"
    },
    {
        "number": 4568,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split('\\n')[0]"
    },
    {
        "number": 4568,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def helper(s: str, n: int) -> int:\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if s[:2] == s[2:4]:\n            return helper(s, n - 2) + 1\n        else:\n            return max(helper(s, n - 1), helper(s, n - 2))\n\n    n = int(stdin)\n    s = stdin\n    return str(helper(s, n))"
    },
    {
        "number": 4569,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    for i in range(len(stdin)):\n        if stdin[i] == 'S':\n            if i+1 < len(stdin) and stdin[i+1] == 'u' and stdin[i+2] == 'l':\n                result += 'Cloudy'\n            else:\n                result += 'Sunny'\n        elif stdin[i] == 'c':\n            result += 'Cloudy'\n        elif stdin[i] == 'r':\n            result += 'Rainy'\n        else:\n            result += 'Sunny'\n    return result"
    },
    {
        "number": 4569,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    weather_lookup = {'Sunny': 'Cloudy', 'Cloudy': 'Rainy', 'Rainy': 'Sunny'}\n    print(weather_lookup[stdin[0]])"
    },
    {
        "number": 4569,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4569,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4569,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4569,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4569,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here"
    },
    {
        "number": 4569,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4569,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    weather = stdin\n    weather = weather.lower()\n    if weather =='sunny':\n        return 'cloudy'\n    elif weather == 'cloudy':\n        return 'rainy'\n    elif weather == 'rainy':\n        return'sunny'"
    },
    {
        "number": 4569,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    sunny = stdin.count('Sunny')\n    cloudy = stdin.count('Cloudy')\n    rainy = stdin.count('Rainy')\n\n    return 'Cloudy' if cloudy > 0 else 'Sunny' if sunny > 0 else 'Rainy'"
    },
    {
        "number": 4570,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    plan_1, plan_2 = map(int, stdin.split())\n    return plan_1 if plan_1 <= plan_2 else plan_2"
    },
    {
        "number": 4570,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = map(int, stdin.split())\n    if n > 0:\n        if b <= a * n:\n            return str(b)\n        else:\n            return str(a * n)\n    else:\n        return \"0\""
    },
    {
        "number": 4570,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    min_fee = max(a * n, b * n)\n    return str(min_fee)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4570,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4570,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4570,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return str(max(N*A, N*B))"
    },
    {
        "number": 4570,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.strip().split(' ')))\n    if n == 0:\n        return \"0\"\n    # get the minimum fee\n    min_fee = min(n*b, a*n)\n    # print the result\n    print(min_fee)"
    },
    {
        "number": 4570,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.strip().split(\" \")]\n    x = A * N\n    if x > B:\n        x = B\n    elif x < A:\n        x = A\n    return str(x)"
    },
    {
        "number": 4570,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    ans = b if n > b else a * (n - b) if n <= b else 0\n    return str(ans)"
    },
    {
        "number": 4570,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.strip().split())\n    return str(min(b*n, a*n))"
    },
    {
        "number": 4571,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4571,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split(' ')\n    N, M = int(N), int(M)\n\n    if M >= min(N, 5):\n        return '3800'\n    else:\n        return '1900'"
    },
    {
        "number": 4571,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(1900*(N-M) + (2*1900*M))"
    },
    {
        "number": 4571,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    Takahashi = 0\n    # Try X times.\n    for _ in range(N):\n        Takahashi += 1\n        for _ in range(M):\n            if random.random() < 0.5:\n                Takahashi += 1900\n    return str(Takahashi)"
    },
    {
        "number": 4571,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return ''.join(map(str, range(1, N+1, 2))) + ''.join(map(str, range(1, N, 2))) * M"
    },
    {
        "number": 4571,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = stdin.splitlines()[0]\n    num_cases = [int(num) for num in num_cases.split()]\n    num_cases = num_cases[0]\n    num_cases2 = num_cases * 2\n    num_cases4 = num_cases * 4\n    num_cases8 = num_cases * 8\n\n    def solve(x: int, y: int) -> int:\n        num_tries = x\n        while num_tries > y:\n            num_tries //= 2\n            num_tries *= 4\n        return num_tries\n\n    def solve2(x: int, y: int) -> int:\n        num_tries = x\n        while num_tries > y:\n            num_tries //= 4\n            num_tries *= 2\n        return num_tries\n\n    def solve3(x: int, y: int) -> int:\n        num_tries = x\n        while num_tries > y:\n            num_tries //= 8\n            num_tries *= 2\n        return num_tries\n\n    print(solve(num_cases, num_cases2) + solve2(num_cases2, num_cases4) + solve3(num_cases4, num_cases8))"
    },
    {
        "number": 4571,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    ans = 0\n    while n > 0:\n        while n % 2 == 0 and m > 0:\n            n //= 2\n            m -= 1\n        if m > 0:\n            n //= 2\n            m -= 1\n            ans += 1900\n        while m == 0 and n > 0:\n            n //= 2\n            ans += 1900\n    return str(ans)"
    },
    {
        "number": 4571,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    time = 0\n    for i in range(1, M):\n        if int(stdin.split()[i]) % 2 == 0:\n            time += 1900\n    return str(time)"
    },
    {
        "number": 4571,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N == 1:\n        return 'YES'\n    if M == 1:\n        return 'NO'\n    if M == 2:\n        return 'NO'\n    x = 1900\n    for _ in range(M):\n        if x % 2 == 0:\n            x //= 2\n        else:\n            x = (x + 1) // 2\n    return str(x)"
    },
    {
        "number": 4571,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return \"YES\" if (m * (2 ** n - 1)) <= 10 ** 9 else \"NO\""
    },
    {
        "number": 4572,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    letters = list(stdin)\n    result = \"\"\n    while not result:\n        result = chr(ord('a') + (ord(result) - ord('a') + 1) % 26)\n        if result in letters:\n            return None\n    return result"
    },
    {
        "number": 4572,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for i in range(97, 97 + 26):\n        if chr(i) not in s:\n            return chr(i)\n    return None\n\nprint(solution(input()))\n"
    },
    {
        "number": 4572,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4572,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for i in range(97, 123):\n        if chr(i) not in s:\n            return chr(i)\n    return None"
    },
    {
        "number": 4572,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return next(chr(i) for i in range(ord('a'), ord('z') + 1) if chr(i) not in stdin)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4572,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for l in \"abcdefghijklmnopqrstuvwxyz\":\n        if l not in s:\n            return l\n    return None"
    },
    {
        "number": 4572,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4572,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    for c in stdin:\n        if c in alphabet:\n            alphabet.remove(c)\n    return alphabet[0] if alphabet else None"
    },
    {
        "number": 4572,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4572,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4573,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def median(iterable):\n        iterable = sorted(iterable)\n        mid = len(iterable) // 2\n        return iterable[mid] if len(iterable) % 2 else (iterable[mid - 1] + iterable[mid]) / 2\n\n    n = int(stdin.readline())\n    X = [int(x) for x in stdin.readline().split()]\n    Y = sorted(X)\n    B = []\n    for i in range(1, n + 1, 2):\n        B.append(median(X[:i] + X[i + 1:]))\n    return''.join(map(str, B))\n"
    },
    {
        "number": 4573,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    if n % 2 == 1:\n        median = x[(n + 1) // 2]\n    else:\n        median = (x[n // 2 - 1] + x[n // 2]) / 2\n    return''.join(map(str, [max(x) - median for x in zip(*[x[n // 2:], x[:n // 2]])]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4573,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    l = [int(x) for x in stdin.split()]\n    l.sort()\n    l.sort(reverse=True)\n    m = [int(x) for x in stdin.split()]\n    m.sort()\n    m.sort(reverse=True)\n    for i in range(N):\n        m[i] = m[i] - l[i]\n        m[i] = m[i] / 2\n        m[i] = m[i] + l[i]\n    return str(' '.join(str(m[i]) for i in range(N)))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4573,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    X = [int(x) for x in stdin.readline().split()]\n    X.sort()\n\n    if N % 2!= 0:\n        median = X[(N + 1) // 2 - 1]\n        for i in range(1, N + 1, 2):\n            print(median)\n    else:\n        median = (X[N // 2 - 1] + X[N // 2]) / 2\n        for i in range(1, N + 1):\n            print(median)\n\ndef"
    },
    {
        "number": 4573,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    numbers = stdin[2:]\n    numbers = [int(i) for i in numbers.split()]\n    numbers.sort()\n    numbers.reverse()\n    if n % 2 == 1:\n        median = int(n/2)\n    else:\n        median = int((n/2) - 1)\n    b = []\n    for i in range(0, len(numbers)):\n        if numbers[i] == median:\n            b.append(str(i + 1))\n    return \"\\n\".join(b)"
    },
    {
        "number": 4573,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 200000:\n        raise ValueError\n    if n % 2!= 0:\n        raise ValueError\n    numbers = [int(x) for x in stdin.split()]\n    if len(numbers)!= n:\n        raise ValueError\n    b = [0] * n\n    for i in range(n // 2):\n        if i == 0:\n            b[i] = max(numbers[i], numbers[i + 1])\n        elif i == n // 2 - 1:\n            b[i] = max(numbers[i], numbers[i - 1])\n        else:\n            b[i] = max(numbers[i], numbers[i - 1], numbers[i + 1])\n    return '\\n'.join(map(str, b))"
    },
    {
        "number": 4573,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split(' ')))\n    if n % 2 == 1:\n        print(nums[(n // 2) + 1])\n        return\n    for i in range(n // 2):\n        print(sorted(nums[i * 2: (i + 1) * 2])[n // 2 - 1])\n    return\n"
    },
    {
        "number": 4573,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.rstrip()\n    n = int(n)\n    numbers = [int(x) for x in stdin.rstrip().split(\" \")]\n    return str(sorted(numbers)[n // 2])\n\ndef"
    },
    {
        "number": 4573,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    N = int(N)\n    numbers = stdin[2:]\n    numbers = numbers.split()\n    numbers = [int(i) for i in numbers]\n    numbers.sort()\n    numbers.reverse()\n    for i in range(N):\n        numbers[i] = str(numbers[i])\n    return''.join(numbers)\n\nprint(solution(input()))\n\"\"\"\ndef"
    },
    {
        "number": 4573,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    arr = sorted(list(map(int, stdin.readline().split(\" \"))))\n\n    medians = [0 for _ in range(N)]\n\n    for i in range(N):\n        if i % 2 == 0:\n            medians[i] = (arr[i] + arr[i + 1]) / 2\n        else:\n            medians[i] = arr[i]\n\n    for median in medians:\n        print(median)\n"
    },
    {
        "number": 4574,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sticks = list(map(int, stdin.strip().split(' ')))\n    sticks.sort()\n    i = 0\n    j = len(sticks) - 1\n    area = sticks[i] * sticks[j]\n    while i < j:\n        area = max(area, (sticks[i] + sticks[j]) * min(sticks[i], sticks[j]))\n        if sticks[i] < sticks[j]:\n            i += 1\n        else:\n            j -= 1\n    return str(area)"
    },
    {
        "number": 4574,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    sticks = [int(i) for i in stdin.readline().strip().split(' ')]\n    sticks.sort(reverse=True)\n    sticks = [sticks[i] for i in range(N, 0, -1)]\n    sticks = [sticks[i] for i in range(N)]\n    max_area = 0\n    for i in range(N):\n        for j in range(i, N):\n            if sticks[i] * sticks[j] > max_area:\n                max_area = sticks[i] * sticks[j]\n    return max_area"
    },
    {
        "number": 4574,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(find_max_rectangle())\n\ndef"
    },
    {
        "number": 4574,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\")\n    '2'\n    >>> solution(\"1\")\n    '1'\n    >>> solution(\"2\")\n    '1'\n    >>> solution(\"3\")\n    '1'\n    \"\"\"\n    sticks = list(map(int, stdin.split()))\n    sticks.sort()\n    sticks = sticks[::-1]\n    # sticks.sort()\n    # sticks = sticks[::-1]\n    # sticks = sticks[1:]\n    s = sticks[:3]\n    if s[1] == s[2]:\n        return str(s[0] * 2)\n    else:\n        return \"0\""
    },
    {
        "number": 4574,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the maximum rectangle area that can be formed.\n    \"\"\"\n    N = stdin.strip().split(' ')[0]\n    A = [int(x) for x in stdin.strip().split(' ')[1:]]\n    A.sort(reverse=True)\n\n    area = 0\n    for i in range(len(A)):\n        area += A[i] * (i + 1)\n    return str(area)\n\n\ndef"
    },
    {
        "number": 4574,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Gives the maximum possible area of the rectangle.\n    '''\n    N = int(stdin.readline().strip())\n    sticks = [int(stdin.readline().strip()) for _ in range(N)]\n    sticks.sort(reverse=True)\n\n    # Get the max area, by checking four different combinations.\n    # i = 1, j = 2, k = 3, l = 4\n    # A_i, A_j, A_k, A_l = sticks[i], sticks[j], sticks[k], sticks[l]\n    max_area = max(sticks[0] * sticks[1], sticks[-1] * sticks[-2])\n\n    # Now we find the maximum square of the rectangle\n    for i in range(1, N):\n        # We don't care about the last two.\n        for j in range(i + 1, N):\n            # Check if the area of the rectangle is bigger.\n            area = sticks[i] * sticks[j]\n            if area > max_area:\n                max_area = area\n\n    return str(max_area)"
    },
    {
        "number": 4574,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sticks = list(map(int, stdin.split(\" \")))\n    sticks.sort()\n    if n <= 4:\n        return str(sticks[-1] * sticks[-2])\n    return str(sticks[-1] * sticks[-2] * sticks[-4])"
    },
    {
        "number": 4574,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_1(stdin))\n\ndef"
    },
    {
        "number": 4574,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = sorted(map(int, stdin.readline().split()))\n\n    if N < 4:\n        return str(0)\n\n    def is_square(x: int) -> bool:\n        return (x * (x + 1) + 1) ** 0.5 % 1 == 0\n\n    # A[i] < A[i+1]\n    #   if A[i] < A[i+1] - 1:\n    #       A[i] < A[i+1] - 2\n    #       A[i] < A[i+1] - 3\n    #       A[i] < A[i+1] - 4\n    #       A[i] < A[i+1] - 5\n    #       A[i] < A[i+1] - 6\n    #       A[i] < A[i+1] - 7\n    #       A[i] < A[i+1] - 8\n    #       A[i] < A[i+1] - 9\n    #       A[i] < A[i+1] - 10\n    #       A[i] < A[i+1] - 11\n    #   else:\n    #       A[i] > A[i+1] - 1\n    #       A[i] > A[i+1] - 2\n    #       A[i] > A[i+1] - 3\n    #       A[i] > A[i+1] - 4\n    #       A[i] > A[i+1] - 5\n    #       A[i] > A[i+1] - 6\n    #       A[i] > A[i+1] - 7\n    #       A[i] > A[i+1] - 8\n    #       A[i] > A[i+1] - 9\n    #       A[i] > A[i+1] - 10\n    #       A[i] > A[i+1] - 11\n    #       A[i] > A[i+1] - 12\n    #       A[i] > A[i+1] - 13\n    #       A[i] > A[i+1] - 14\n    #       A[i] > A[i+1] - 15\n\n    def split(x: int) -> int:\n        return int((A[-1] - x - 1) / x)\n\n    def split_square(x: int) -> int:\n        return int(x * (x + 1) / 2)\n\n    def merge(x: int, y: int) -> int:\n        return split_square(x) + split_square(y)\n\n    def is_valid(x: int, y: int) -> bool:\n        return is_square(split_square(x) + split_square(y) - merge(x, y))\n\n    def get_max_area(x: int, y: int) -> int:\n        return max(split_square(x), split_square(y))\n\n    def get_min_area(x: int, y: int) -> int:\n        return min(split_square(x), split_square(y))\n\n    def find_max_area_rectangle(x: int, y: int) -> int:\n        area_min = get_min_area(x, y)\n        area_max = get_max_area(x, y)\n        return merge(x, y) if area_min * area_max == get_max_area(x, y) * get_min_area(x, y) else 0\n\n    return str(find_max_area_rectangle(0, len(A) - 1))\n"
    },
    {
        "number": 4574,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\nassert solution('6\\n3 1 2 4 2 1') == '2'\nassert solution('1\\n1') == '1'\nassert solution('1\\n1 1') == '1'\nassert solution('1\\n2') == '0'\nassert solution('1\\n2 1') == '0'\nassert solution('1\\n2 2') == '0'\nassert solution('1\\n3') == '0'\nassert solution('1\\n3 1') == '0'\nassert solution('1\\n4') == '0'\nassert solution('1\\n4 1') == '0'\nassert solution('1\\n5') == '0'\nassert solution('1\\n5 1') == '0'\nassert solution('1\\n6') == '0'\nassert solution('1\\n6 1') == '0'\nassert solution('1\\n7') == '0'\nassert solution('1\\n7 1') == '0'\nassert solution('1\\n8') == '0'\nassert solution('1\\n8 1') == '0'\nassert solution('1\\n9') == '0'\nassert solution('1\\n9 1') == '0'\nassert solution('1\\n10') == '0'\nassert solution('1\\n10 1') == '0'\nassert solution('1\\n11') == '0'\nassert solution('1\\n11 1') == '0'\nassert solution('1\\n12') == '0'\nassert solution('1\\n12 1') == '0'\nassert solution('1\\n13') == '0'\nassert solution('1\\n13 1') == '0'\nassert solution('1\\n14') == '0'\nassert solution('1\\n14 1') == '0'\nassert solution('1\\n15') == '0'\nassert solution('1\\n15 1') == '0'\nassert solution('1\\n16') == '0'\nassert solution('1\\n16 1') == '0'\nassert solution('1\\n17') == '0'\nassert solution('1\\n17 1') == '0'\nassert solution('1\\n18') == '0'\nassert solution('1\\n18 1') == '0'\nassert solution('1\\n19') == '0'\nassert solution('1\\n19 1') == '0'\nassert solution('1\\n20') == '0'\nassert solution('1\\n20 1') == '0'\nassert solution('1\\n21') == '0'\nassert solution('1\\n21 1') == '0'\nassert solution('1\\n22') == '0'\nassert solution('1\\n22 1') == '0'\nassert solution('1\\n23') == '0'\nassert solution('1\\n23 1') == '0'\nassert solution('1\\n24') == '0'\nassert solution('1\\n24 1') == '0'\nassert solution('1\\n25') == '0'\nassert solution('1\\n25 1') == '0'\nassert solution('1\\n26') == '0'\nassert solution('1\\n26 1') == '0'\nassert solution('1\\n27') == '0'\nassert solution('1\\n27 1') == '0'\nassert solution('1\\n28') == '0'\nassert solution('1\\n28 1') == '0'\nassert solution('1\\n29') == '0'\nassert solution('1\\n29 1') == '0'\nassert solution('1\\n30') == '0'\nassert solution('1\\n30 1') == '0'\nassert solution('1\\n31') == '0'\nassert solution('1\\n31 1') == '0'\nassert solution('1\\n32') == '0'\nassert solution('1\\n32 1') == '0'\nassert solution('1\\n33') == '0'\nassert solution('1\\n33 1') == '0'\nassert solution('1\\n34') == '0'\nassert solution('1\\n34 1') == '0'\nassert solution('1\\n35') == '0'\nassert solution('1\\n35 1') == '0'\nassert solution('1\\n36') == '0'\nassert solution('1\\n36 1') == '0'\nassert solution('1\\n37') == '0'\nassert solution('1\\n37 1') == '0'\nassert solution('1\\n38') == '0'\nassert solution('1\\n38 1') == '0'\nassert solution('1\\n39') == '0'\nassert solution('1\\n39 1') == '0'\nassert solution('1\\n40') == '0'\nassert solution('1\\n40 1') == '0'\nassert solution('1\\n41') == '0'\nassert solution('1\\n41 1') == '0'\nassert solution('1\\n42') == '0'\nassert solution('1\\n42 1') == '0'\nassert solution('1\\n43') == '0'\nassert solution('1\\n43 1') == '0'\nassert solution('1\\n44') == '0'\nassert solution('1\\n44 1') == '0'\nassert solution('1\\n45') == '0'\nassert solution('1\\n45 1') == '0'\nassert solution('1\\n46') == '0'\nassert solution('1\\n46 1') == '0'\nassert solution('1\\n47') == '0'\nassert solution('1\\n47 1') == '0'\nassert solution('1\\n48') == '0'\nassert solution('1\\n48 1') == '0'\nassert solution('1\\n49') == '0'\nassert solution('1\\n49 1') == '0'\nassert solution('1\\n50') == '0'\nassert solution('1\\n50 1') == '0'\nassert solution('1\\n51') == '0'\nassert solution('1\\n51 1') == '0'\nassert solution('1\\n52') == '0'\nassert solution('1\\n52 1') == '0'\nassert solution('1\\n53') == '0'\nassert solution('1\\n53 1') == '0'\nassert solution('1\\n54') == '0'\nassert solution('1\\n54 1') == '0'\nassert solution('1\\n55') == '0'\nassert solution('1\\n55 1') == '0'\nassert solution('1\\n56') == '0'\nassert solution('1\\n56 1') == '0'\nassert solution('1\\n57') == '0'\nassert solution('1\\n57 1') == '0'\nassert solution('1\\n58') == '0'\nassert solution('1\\n58 1') == '0'\nassert solution('1\\n59') == '0'\nassert solution('1\\n59 1') == '0'\nassert solution('1\\n60') == '0'\nassert solution('1\\n60 1') == '0'\nassert solution('1\\n61') == '0'\nassert solution('1\\n61 1') == '0'\nassert solution('1\\n62') == '0'\nassert solution('1\\n62 1') == '0'\nassert solution('1\\n63') == '0'\nassert solution('1\\n63 1') == '0'\nassert solution('1\\n64') == '0'\nassert solution('1\\n64 1') == '0'\nassert solution('1\\n65') == '0'\nassert solution('1\\n65 1') == '0'\nassert solution('1\\n66') == '0'\nassert solution('1\\n66 1') == '0'\nassert solution('1\\n67') == '0'\nassert solution('1\\"
    },
    {
        "number": 4575,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    X = int(stdin.readline().strip())\n\n    total = 0\n    for i in range(1, N + 1):\n        total += int(stdin.readline())\n\n    return str(total - (X - 1))\n\nprint(solution(stdin.readline().strip()))\n\"\"\"\n\n\"\"\"\nPROBLEM STATEMENT\n\nIn a training camp, there are N participants. Each participant eats one chocolate piece. The camp lasts for D days, and there are X chocolate pieces remaining.\nThe participants are arranged in a row in an order such that each participant eats one chocolate piece immediately after the participant that comes before them.\nFind the number of chocolate pieces prepared during the training camp.\n\n------GITHUB LINK------\nhttps://github.com/Code-a-Thon/Code-a-Thon/blob/master/Python/Code_a_Thon/Maze_and_Chocolate_Rares/Problem_19_Maze_Choc.py\n\n------CODE CHALLENGE------\nWrite a function that, given two inputs:\n  - A string representing the number of participants, N\n  - An integer representing the number of days, D\n  - An integer representing the number of chocolate pieces remaining after the last day, X\n  - A string representing the order of the participants\n\nReturns the number of chocolate pieces prepared at the beginning of the training camp.\n\n------Hint------\n\nYou can read more about this problem in the course HACKER Rank: The Maze Challenge\n\n-----Input-----\nThe first line contains two space-separated integers, N and D, respectively.\nThe second line contains a single integer, X.\nThe third line contains a single string, representing the order of the participants in the training camp.\n\n-----Output-----\nPrint a single integer representing the number of chocolate pieces prepared at the beginning of the training camp.\n\n-----Sample Input-----\n3 3\n1\n\n-----Sample Output-----\n2\n\nThere are 3 participants in the camp. Each participant eats 1 chocolate piece on the first day.\nThe order is:\n1st: 0 2 3\n2nd: 1\n3rd: 1\n\nSince there is 1 chocolate piece remaining, 2 pieces are prepared.\n\n-----Note-----\nTest input 1: N = 3, D = 3, X = 1, A = \"1 0 2\".\nTest input 2: N = 3, D = 4, X = 5, A = \"1 2 0 3\".\nTest input 3: N = 3, D = 2, X = 1, A = \"1 0 2\".\n\"\"\"\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4575,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.splitlines())))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4575,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    N, D, X = map(int, stdin.strip().split(' '))\n    if D > X:\n        result = 0\n    else:\n        A = list(map(int, stdin.strip().split(' ')))\n        result = A[0]\n        for i in range(1, D):\n            result += A[i] * (A[i - 1] + A[i]) / 2\n        result += X\n    return str(result)"
    },
    {
        "number": 4575,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    return str(X - sum(A))"
    },
    {
        "number": 4575,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = int(stdin)\n    a = [int(i) for i in stdin.strip().split()]\n    print(x - sum(a[:n-1]))"
    },
    {
        "number": 4575,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d, x = map(int, stdin.readline().strip().split(\" \"))\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n\n    total = sum(a)\n    left = total - x\n    if left == 0:\n        return str(total)\n    if left < 0:\n        return \"0\"\n    # since it is possible for a participant to eat x pieces only on a day,\n    # we will count the number of participants on each day and add them\n    # to a total count\n    count = 0\n    total_count = 0\n    for i in range(n):\n        count += a[i]\n        total_count += count\n        if total_count == left:\n            break\n    return str(total_count)"
    },
    {
        "number": 4575,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    lst = [0] * (N + 1)\n    for _ in range(X):\n        A = map(int, stdin.split())\n        lst[A[0] - 1] += 1\n        for i in range(A[0], A[1] + 1):\n            lst[i] += 1\n    return str(sum(lst))"
    },
    {
        "number": 4575,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4575,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number_of_participants, number_of_days, number_of_chocolates = map(int, stdin.split())\n    list_of_days = list(map(int, stdin.split()))\n    list_of_chocolates = list(map(int, stdin.split()))\n\n    for index in range(number_of_chocolates):\n        list_of_days.append(list_of_days[-1] + list_of_chocolates[index])\n\n    return str(sum(list_of_days))"
    },
    {
        "number": 4575,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, x = map(int, stdin.strip().split(\" \"))\n    s = stdin.strip().split(\" \")\n    total = 0\n    total += 4 * (s[0] + 1) + 2 * (s[1] + s[0]) + s[2]\n    for i in range(3, n + 1):\n        total += 4 * (s[i] + s[i - 1]) + 2 * (s[i] + s[i - 2])\n    return str(total - x)"
    },
    {
        "number": 4576,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.strip().split(\" \"))\n    return str(count_ways_to_get_X_yen(A, B, C, X))\n\ndef"
    },
    {
        "number": 4576,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.splitlines()\n    a, b, c, x = [int(x) for x in input_[0].split()]\n    return str(combinations(a, b, c, x // 50))"
    },
    {
        "number": 4576,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = [int(i) for i in stdin.split()]\n    if a + b + c >= 1 and a >= 0 and b >= 0 and c >= 0 and x >= 0 and x <= 50 * 1000:\n        return str(comb(a, a) * comb(b, b) * comb(c, c) // comb(a + b + c, x) % 1000000007)\n    else:\n        return \"Impossible\"\n\n\ndef"
    },
    {
        "number": 4576,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.readline())\n    B = int(stdin.readline())\n    C = int(stdin.readline())\n    X = int(stdin.readline())\n\n    if X % 50!= 0:\n        return 'There is no solution'\n\n    total_coins = A + B + C\n\n    coins_left = X // 50\n\n    # num_ways[0] is the number of ways to make up X.\n    num_ways = [0] * (coins_left + 1)\n    num_ways[0] = 1\n\n    for coin_1 in range(A):\n        for coin_2 in range(B):\n            for coin_3 in range(C):\n                if (coin_1 + coin_2 + coin_3) == 0:\n                    continue\n                num_ways[coin_1 + coin_2 + coin_3] += num_ways[coin_1] * num_ways[coin_2] * num_ways[coin_3]\n\n    return str(num_ways[-1])"
    },
    {
        "number": 4576,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4576,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = stdin.strip().split()\n    a, b, c, x = int(a), int(b), int(c), int(x)\n    if x % 50!= 0:\n        raise ValueError(\"X is not a multiple of 50\")\n    if a + b + c > 50 or a + b + c < 1:\n        raise ValueError(\"A + B + C is not in range(1,50)\")\n    if a == 0:\n        return str(b * x // 50)\n    if b == 0:\n        return str(a * x // 50)\n    if c == 0:\n        return str(a * b * x // 50)\n    return str((a * b * c * x // 50) + ((a * b * x // 50) * (a * b * x // 50)))"
    },
    {
        "number": 4576,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    a, b, c = map(int, stdin.split())\n    return binomial_coefficient(x, a, b, c)\n\ndef"
    },
    {
        "number": 4576,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    def coin_change_helper(amount, count, index, ways):\n        if amount == 0:\n            return ways + 1\n        if count == 0:\n            return 0\n        if amount < 0:\n            return 0\n        if count > amount:\n            return 0\n        return coin_change_helper(amount, count - 1, index, ways) + coin_change_helper(amount - coins[index], count, index, ways)\n\n    n = int(stdin.readline().strip())\n    coins = [int(stdin.readline().strip()) for _ in range(3)]\n    x = int(stdin.readline().strip())\n\n    print(coin_change_helper(x, n, 0, 0))\n    return"
    },
    {
        "number": 4576,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    return str(solution_recursive(A, B, C, X))\n\ndef"
    },
    {
        "number": 4576,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = map(int, stdin.split())\n    a, b, c = a * 500, b * 100, c * 50\n\n    if x % 50:\n        return str(0)\n\n    if a == x:\n        return str(1)\n    if a + b == x:\n        return str(2)\n    if a + b + c == x:\n        return str(3)\n    if a + b + c == 0:\n        return str(4)\n\n    return str(0)"
    },
    {
        "number": 4577,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    return 'Yes' if a < c and b > c else 'No'"
    },
    {
        "number": 4577,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split(\" \"))\n    return \"Yes\" if C >= A and C <= B else \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return 'Yes' if A < C and B > C else 'No'\n"
    },
    {
        "number": 4577,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    return \"Yes\" if c >= a and c <= b else \"No\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    A, B, C = map(int, line.split(\" \"))\n    if C > A and C < B:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4577,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.strip().split(' ')]\n    if C > A and C < B:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4577,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Standard Input\n    A B C\n    '''\n    A, B, C = [int(x) for x in stdin.split()]\n    if C < A and C > B:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4577,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.strip().split(\" \"))\n    if a < b and b < c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    c, a, b = map(int, stdin.split())\n    return \"Yes\" if a < c and b > c else \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C=map(int,stdin.split())\n    if C>=A and C<=B:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4578,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 1000\\n120\\n100\\n140\\n\")\n    '9'\n    \"\"\"\n    N, X = map(int, stdin.split())\n    Motos = [int(stdin) for _ in range(N)]\n    X -= sum(Motos)\n    if X < 0:\n        return str(N)\n    Motos.sort(reverse=True)\n    L = len(Motos)\n    i = 0\n    for i in range(L):\n        if X <= Motos[i]:\n            return str(i + 1)\n        X -= Motos[i]"
    },
    {
        "number": 4578,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = tuple(map(int, stdin.split()))\n    m = list(map(int, stdin.split()))\n    m.sort()\n\n    result = 0\n    for i in m:\n        if x - i >= 0:\n            x -= i\n            result += 1\n\n    return str(result)"
    },
    {
        "number": 4578,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Parameters\n    ----------\n    stdin : str\n        The input to be evaluated\n\n    Returns\n    -------\n    str\n        The evaluated result\n\n    \"\"\"\n    num_doughnuts, num_moto = list(map(int, stdin.split()))\n    moto_left = num_moto\n    doughnuts = 1\n    while moto_left > 0:\n        moto_left -= num_doughnuts\n        if moto_left < 0:\n            break\n        doughnuts += 1\n        moto_left += num_doughnuts\n    return str(doughnuts)"
    },
    {
        "number": 4578,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    doughnuts, _, _ = stdin.strip().split(\" \")\n    doughnuts, _ = int(doughnuts), int(stdin)\n    doughnut_count = 0\n    while doughnut_count < doughnuts:\n        consumed = stdin\n        doughnut_count += 1\n        stdin = consumed[doughnut_count:]\n    return str(doughnut_count)"
    },
    {
        "number": 4578,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4578,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list: list[str] = stdin.rstrip().split('\\n')\n    n: int = int(stdin_list[0])\n    x: int = int(stdin_list[1])\n    motos: list[int] = [int(stdin_list[i]) for i in range(2, 2 + n)]\n\n    doughnut_count: int = 0\n    doughnut_count_no_motos: int = 0\n    for m in motos:\n        if m > x:\n            continue\n        if x >= m:\n            doughnut_count += 1\n        else:\n            doughnut_count_no_motos += 1\n    return str(max(doughnut_count, doughnut_count_no_motos))\n"
    },
    {
        "number": 4578,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X = [int(x) for x in stdin.split(' ')]\n    m_i = [int(x) for x in stdin.split(' ')]\n    m_i.sort()\n    return str(int(ceil(X / (N * m_i[0]))))"
    },
    {
        "number": 4578,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4578,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4578,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Vars\n    _, _, X = [int(num) for num in stdin.split()]\n    m_1, m_2, m_3, m_4, m_5, m_6, m_7, m_8, m_9 = [int(num) for num in stdin.split()[1:]]\n\n    # Part 1\n    N1 = X // m_1\n    N2 = X // m_2\n    N3 = X // m_3\n    N4 = X // m_4\n    N5 = X // m_5\n    N6 = X // m_6\n    N7 = X // m_7\n    N8 = X // m_8\n    N9 = X // m_9\n\n    # Part 2\n    N1, N2, N3, N4, N5, N6, N7, N8, N9 = min(N1, N2, N3, N4, N5, N6, N7, N8, N9), min(N1, N2, N3, N4, N5, N6, N7, N8, N9), min(N1, N2, N3, N4, N5, N6, N7, N8, N9), min(N1, N2, N3, N4, N5, N6, N7, N8, N9)\n    return str(N1 + N2 + N3 + N4 + N5 + N6 + N7 + N8 + N9)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4579,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    k = 0\n    for i in range(int(stdin.readline())):\n        k += 1\n    return str(k)"
    },
    {
        "number": 4579,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4579,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    items = []\n    for _ in range(N):\n        item = stdin.readline().strip()\n        items.append(item)\n    count = collections.Counter(items)\n    return str(len(count))"
    },
    {
        "number": 4579,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    items = stdin.split(':')[1:]\n\n    return str(len(set(items)))"
    },
    {
        "number": 4579,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = set()\n    for _ in range(N):\n        item = stdin.readline().strip()\n        s.add(item)\n    return len(s)"
    },
    {
        "number": 4579,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    items = []\n    for _ in range(int(N)):\n        items.append(stdin.readline().strip())\n    items.sort()\n    unique_items = set(items)\n    print(len(unique_items))"
    },
    {
        "number": 4579,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        count += 1\n        n -= 1\n    return str(count)\n\nassert(solution(stdin) == stdout)\n"
    },
    {
        "number": 4579,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    list_of_strings = []\n    for _ in range(n):\n        list_of_strings.append(stdin.readline().strip())\n\n    return str(len(list_of_strings))"
    },
    {
        "number": 4579,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = list(stdin.split(\"\\n\"))[0]\n    n = int(l)\n    x = \"\"\n    y = set()\n    for i in range(n):\n        x = input()\n        y.add(x)\n    print(len(y))"
    },
    {
        "number": 4579,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    items = stdin[2:].split(\"\\n\")\n    S = []\n    for i in range(N):\n        S.append(items[i])\n    S.sort()\n    return str(len(set(S)))"
    },
    {
        "number": 4580,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Get the minimum and maximum possible numbers of different colors of the users'''\n    N = int(stdin.readline())\n    ratings = [int(r) for r in stdin.readline().split()]\n\n    min_num = 0\n    max_num = 0\n    for rating in ratings:\n        if rating < 400:\n            min_num += 1\n        elif rating < 800:\n            max_num += 1\n        elif rating < 1200:\n            min_num += 2\n        elif rating < 1600:\n            max_num += 2\n        elif rating < 2000:\n            max_num += 3\n        elif rating < 2400:\n            max_num += 3\n        elif rating < 2800:\n            max_num += 4\n        elif rating < 3200:\n            min_num += 4\n        else:\n            max_num += 4\n\n    return '{} {}'.format(min_num, max_num)"
    },
    {
        "number": 4580,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = sorted(list(map(int, stdin.readline().strip().split(\" \"))))\n    \n    G = set()\n    \n    for a in A:\n        if a < 400:\n            G.add(\"gray\")\n        elif 400 <= a < 800:\n            G.add(\"brown\")\n        elif 800 <= a < 1200:\n            G.add(\"green\")\n        elif 1200 <= a < 1600:\n            G.add(\"cyan\")\n        elif 1600 <= a < 2000:\n            G.add(\"blue\")\n        elif 2000 <= a < 2400:\n            G.add(\"yellow\")\n        elif 2400 <= a < 2800:\n            G.add(\"orange\")\n        else:\n            G.add(\"red\")\n    \n    print(len(G), len(G)-1)\n    \n    return \"\""
    },
    {
        "number": 4580,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    return''.join([str(i) for i in range(2, min(4800, max(1, N)+1))])"
    },
    {
        "number": 4580,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    RGB = [int(s) for s in stdin.split()]\n    RGB.sort()\n\n    d = {\n        0: \"gray\",\n        1: \"brown\",\n        2: \"green\",\n        3: \"cyan\",\n        4: \"blue\",\n        5: \"yellow\",\n        6: \"orange\",\n        7: \"red\"\n    }\n\n    min_cnt = 0\n    max_cnt = 0\n    for i in range(N):\n        if i == 0 or i == N - 1:\n            min_cnt += 1\n            max_cnt += 1\n            continue\n        cnt = 0\n        for j in range(i + 1, N):\n            if RGB[j] - RGB[i] > 399:\n                cnt += 1\n        if cnt < min_cnt:\n            min_cnt = cnt\n        if cnt > max_cnt:\n            max_cnt = cnt\n\n    return f'{min_cnt} {max_cnt}'"
    },
    {
        "number": 4580,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    A = [int(x) for x in lines[1].split()]\n    B = sorted(A)\n    R = sorted(A, reverse=True)\n    A = set(A)\n    B = set(B)\n    R = set(R)\n    if len(A) < len(B):\n        A, B = B, A\n        R, B = B, R\n    if len(A) < len(R):\n        A, R = R, A\n    if len(B) < len(R):\n        B, R = R, B\n    L = list(A.union(B, R))\n    M = len(L)\n    return '{} {}'.format(M, M)"
    },
    {
        "number": 4580,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = [int(s) for s in stdin[1:]]\n\n    # color_dict[index] = color\n    color_dict = {0: 'blue', 1: 'yellow', 2: 'green', 3: 'orange', 4:'red', 5: 'brown', 6: 'gray'}\n    count_list = [0] * 7\n\n    # Count the number of distinct colors of each user\n    for rating in a:\n        for i in range(7):\n            if rating < 400 + i * 100:\n                count_list[i] += 1\n                break\n\n    print(' '.join(str(num) for num in count_list))\n\n    return''.join(str(num) for num in count_list)\n"
    },
    {
        "number": 4580,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n\n    l = [0] * n\n    l[0] = 1\n\n    for i in range(1, n):\n        if arr[i] > 2400:\n            l[i] = l[i - 1] + 1\n        else:\n            if arr[i] <= 2400:\n                l[i] = l[i - 1]\n            else:\n                l[i] = l[i - 1] + 1\n\n    m = n - 1\n    for i in range(n - 1, 0, -1):\n        if arr[i] > 2400:\n            m = i - 1\n            break\n\n    return''.join(map(str, l)) +'' + str(m)"
    },
    {
        "number": 4580,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # The code below is basically a modified version of the function find_sol()\n    # Find the maximum value of a_i and minimum value of a_i\n    max_a = max(a)\n    min_a = min(a)\n\n    # If the max_a is >= 4000, then there is no solution\n    if max_a >= 4000:\n        return 'IMPOSSIBLE'\n\n    # The length of each sequence is the difference of the max_a and min_a\n    min_length = max_a - min_a\n\n    # If there are no multiple colors, there are only three colors: \"red\", \"blue\", \"yellow\"\n    if min_length == 0:\n        return '3 3'\n\n    # If there are no different colors, there are only two colors: \"gray\" and \"orange\"\n    if min_length == 1:\n        return '2 2'\n\n    # If there are three different colors, there are two colors: \"red\" and \"blue\"\n    if min_length == 2:\n        return '2 2'\n\n    # If there are two different colors, there are four colors: \"red\", \"blue\", \"green\", and \"orange\"\n    if min_length == 3:\n        return '4 4'\n\n    # If there are two different colors, there are four colors: \"red\", \"blue\", \"green\", and \"orange\"\n    if min_length == 4:\n        return '2 2'\n"
    },
    {
        "number": 4580,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0: return \"\"\n    a = stdin.split()\n    a = [int(x) for x in a]\n    color = [0] * n\n    for i in range(n):\n        if a[i] < 400: color[i] = 0\n        elif 400 <= a[i] < 800: color[i] = 1\n        elif 800 <= a[i] < 1200: color[i] = 2\n        elif 1200 <= a[i] < 1600: color[i] = 3\n        elif 1600 <= a[i] < 2000: color[i] = 4\n        elif 2000 <= a[i] < 2400: color[i] = 5\n        elif 2400 <= a[i] < 2800: color[i] = 6\n        else: color[i] = 7\n    \n    ans = [0] * 8\n    ans[color[0]] = 1\n    ans[color[-1]] = 1\n    for i in range(n - 1):\n        if color[i]!= color[i + 1]:\n            ans[color[i]] += 1\n            ans[color[i + 1]] += 1\n    \n    return str(\" \".join(map(str, ans)))"
    },
    {
        "number": 4580,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    arr = list(map(int, stdin[1].split(' ')))\n\n    colors = [0] * N\n    for i in range(len(arr)):\n        if arr[i] > 1999:\n            colors[i] = 5\n        elif arr[i] > 1199:\n            colors[i] = 4\n        elif arr[i] > 1599:\n            colors[i] = 3\n        elif arr[i] > 1999:\n            colors[i] = 2\n        elif arr[i] > 1199:\n            colors[i] = 1\n        else:\n            colors[i] = 0\n\n    m = min(colors)\n    n = max(colors)\n\n    return str(m) +'' + str(n)"
    },
    {
        "number": 4581,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4581,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the price of the ramen that the customer orders\n    :param stdin: The string that the customer entered\n    :return: The price of the ramen\n    \"\"\"\n    # Your code here\n    return ''"
    },
    {
        "number": 4581,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4581,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.startswith(\"oxo\"):\n        print(900)\n    else:\n        print(700)"
    },
    {
        "number": 4581,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4581,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n"
    },
    {
        "number": 4581,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    toppings = stdin[0]\n    toppings += stdin[2]\n    toppings += stdin[4]\n    \n    price = 700\n    \n    if toppings.startswith('o'):\n        price += 100\n        toppings = toppings[1:]\n    \n    if toppings.endswith('o'):\n        price += 100\n        toppings = toppings[:-1]\n    \n    if toppings.startswith('x'):\n        price += 0\n        toppings = toppings[1:]\n    \n    if toppings.endswith('x'):\n        price += 0\n        toppings = toppings[:-1]\n    \n    if toppings.startswith('x'):\n        price += 100\n        toppings = toppings[1:]\n        \n    if toppings.endswith('x'):\n        price += 100\n        toppings = toppings[:-1]\n        \n    if toppings.startswith('x'):\n        price += 0\n        toppings = toppings[1:]\n        \n    if toppings.endswith('x'):\n        price += 0\n        toppings = toppings[:-1]\n    \n    if toppings.startswith('x'):\n        price += 100\n        toppings = toppings[1:]\n        \n    if toppings.endswith('x'):\n        price += 100\n        toppings = toppings[:-1]\n    \n    if toppings.startswith('x'):\n        price += 0\n        toppings = toppings[1:]\n        \n    if toppings.endswith('x'):\n        price += 0\n        toppings = toppings[:-1]\n    \n    return str(price)\n\nassert(solution('oxo') == '900')\nassert(solution('oxx') == '0')\nassert(solution('xoo') == '0')\nassert(solution('xox') == '100')\nassert(solution('xoxo') == '0')\nassert(solution('ooxo') == '0')\nassert(solution('ooxx') == '100')\nassert(solution('ooxxo') == '0')\nassert(solution('ooxxoo') == '100')\nassert(solution('ooxxooo') == '0')\nassert(solution('ooxxoooo') == '100')\nassert(solution('ooxxooooo') == '0')\nassert(solution('ooxxoooooo') == '100')\nassert(solution('ooxxooooooo') == '0')\nassert(solution('ooxxooooooab') == '100')\nassert(solution('ooxxooooooabx') == '0')\nassert(solution('ooxxooooooabxab') == '100')\nassert(solution('ooxxooooooabxabx') == '0')\nassert(solution('ooxxooooooabxabxab') == '100')\nassert(solution('ooxxooooooabxabxabx') == '0')\nassert(solution('ooxxooooooabxabxabxabx') == '100')\nassert(solution('ooxxooooooabxabxabxabxabx') == '0')\nassert(solution('ooxxooooooabxabxabxabxabxabx') == '100')\nassert(solution('ooxxooooooabxabxabxabxabxabxabx') == '0')\nassert(solution('ooxxooooooabxabxabxabxabxabxabxabx') == '100')\nassert(solution('ooxxooooooabxabxabxabxabxabxabxabxabxabx') == '0')\nassert(solution('ooxxooooooabxabxabxabxabxabxabxabxabxabxabxabx') == '100')\nassert(solution('xoo') == '0')\nassert(solution('xooo') == '0')\nassert(solution('xooab') == '0')\nassert(solution('xooabx') == '100')\nassert(solution('xooabxab') == '0')\nassert(solution('xooabxabx') == '100')\nassert(solution('xooabxabxab') == '0')\nassert(solution('xooabxabxabx') == '100')\nassert(solution('xooabxabxabxabx') == '0')\nassert(solution('xooabxabxabxabxabx') == '100')\nassert(solution('xooabxabxabxabxabxabx') == '0')\nassert(solution('xooabxabxabxabxabxabxabx') == '100')\nassert(solution('xooabxabxabxabxabxabxabxabx') == '0')\nassert(solution('xooabxabxabxabxabxabxabxabxabx') == '100')\nassert(solution('xooabxabxabxabxabxabxabxabxabxabxabx') == '0')\nassert(solution('xooabxabxabxabxabxabxabxabxabxabxabxabxabx') == '100')\nassert(solution('ooxx') == '0')\nassert(solution('xoo') == '0')\nassert(solution('xooo') == '0')\nassert(solution('xooab') == '0')\nassert(solution('xooabx') == '100')\nassert(solution('xooabxab') == '0')\nassert(solution('xooabxabx') == '100')\nassert(solution('xooabxabxab') == '0')\nassert(solution('xooabxabxabx') == '100')\nassert(solution('xooabxabxabxabx') == '0')\nassert(solution('xooabxabxabxabxabx') == '100')\nassert(solution('xooabxabxabxabxabxabx') == '0')\nassert(solution('xooabxabxabxabxabxabxabx') == '100')\nassert(solution('xooabxabxabxabxabxabxabxabx') == '0')\nassert(solution('xooabxabxabxabxabxabxabxabxabx') == '100')\nassert(solution('ooxx') == '0')\nassert(solution('xoo') == '0')\nassert(solution('xooo') == '0')\nassert(solution('xooab') == '0')\nassert(solution('xooabx') == '100')\nassert(solution('xooabxab') == '0')\nassert(solution('xooabxabx') == '100')\nassert(solution('xooabxabxab') == '0')\nassert(solution('xooabxabxabx') == '100')"
    },
    {
        "number": 4581,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Compute the price of the ramen corresponding to a given order.\n    \"\"\"\n    topping = stdin.split(\".\")[0]\n    price = 700 + 100 * 2\n    for i in range(0, len(topping)):\n        if topping[i] == \"o\":\n            price += 100\n    return price"
    },
    {
        "number": 4581,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    if s[0] == 'o':\n        return str(700 + 100 * 2)\n    elif s[0] == 'x':\n        return str(700)\n    elif s[1] == 'o':\n        return str(700 + 100)\n    elif s[1] == 'x':\n        return str(700)\n    elif s[2] == 'o':\n        return str(700 + 100)\n    elif s[2] == 'x':\n        return str(700)\n    else:\n        return str(0)\n\nassert(solution(\"oxo\") == \"900\")\nassert(solution(\"xo\") == \"700\")\nassert(solution(\"xox\") == \"0\")\nassert(solution(\"ooo\") == \"0\")\nassert(solution(\"xoxx\") == \"0\")\nassert(solution(\"ooxx\") == \"900\")\nassert(solution(\"xoxo\") == \"700\")\nassert(solution(\"ooxo\") == \"700\")\nassert(solution(\"oxxo\") == \"700\")\nassert(solution(\"oxxo\") == \"700\")\nassert(solution(\"oxxxo\") == \"0\")\nassert(solution(\"ooxxx\") == \"0\")\nassert(solution(\"ooxxo\") == \"0\")\nassert(solution(\"ooxxo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\"oxxoo\") == \"0\")\nassert(solution(\""
    },
    {
        "number": 4581,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4582,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a solution for a well-known problem,\n    but it is quite a tricky one.\n\n    It is not efficient to use a simple brute-force algorithm to solve this problem.\n    A better approach is to use a loop to iterate over the characters of the input,\n    and use the first character of each iteration to make a decision.\n    \"\"\"\n    a, b = stdin.split()\n    if a == b:\n        return \"H\"\n    return \"D\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4582,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == b == 'H':\n        return 'H'\n    elif a == b == 'D':\n        return 'D'"
    },
    {
        "number": 4582,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == \"H\" and b == \"H\":\n        print(\"H\")\n    elif a == \"H\" and b == \"D\":\n        print(\"D\")\n    elif a == \"D\" and b == \"H\":\n        print(\"D\")\n    elif a == \"D\" and b == \"D\":\n        print(\"H\")"
    },
    {
        "number": 4582,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    if (a == 'H' and b == 'H') or (a == 'D' and b == 'D'):\n        return 'H'\n    return 'D'"
    },
    {
        "number": 4582,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return \"H\" if a == \"H\" else \"D\""
    },
    {
        "number": 4582,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return \"H\" if a == b else \"D\""
    },
    {
        "number": 4582,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == b:\n        return \"H\"\n    else:\n        return \"D\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4582,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    if a == b == \"H\":\n        return \"H\"\n    else:\n        return \"D\""
    },
    {
        "number": 4582,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    return 'H' if (a == 'H' and b == 'H') or (a == 'D' and b == 'D') else 'D'\n\nprint(solution('H H'))\n"
    },
    {
        "number": 4582,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == 'H' and b == 'H':\n        return 'H'\n    elif a == 'D' and b == 'H':\n        return 'D'\n    elif a == 'H' and b == 'D':\n        return 'D'\n    elif a == 'D' and b == 'D':\n        return 'D'\n    else:\n        return 'H'"
    },
    {
        "number": 4583,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4583,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    formula = stdin.strip()\n    first, second, third, fourth = formula.split(' ')\n    first, second, third, fourth = int(first), int(second), int(third), int(fourth)\n\n    if (first * second + second * third + third * fourth) == 7:\n        return '{} {} {} {} = {}'.format(first, '+', second, '+', third)\n    else:\n        return '{} {} {} {} = {}'.format(first, '-', second, '-', third)\n"
    },
    {
        "number": 4583,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    return '%d%d%d%d=%d' % (A, B, C, D, A + B + C + D)"
    },
    {
        "number": 4583,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split(\" \")\n    for i in range(0, 4):\n        l[i] = int(l[i])\n    print(l[0] + l[1] + l[2] + l[3])\n\n\"\"\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = stdin.split(' ')\n    return f'{a}+{b}+{c}+{d}=7'"
    },
    {
        "number": 4583,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4583,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.strip())\n    formula = '1+2+2+2=7'\n    return formula.replace('A', '+' * a).replace('B', '-' * b).replace('C', '+' * c).replace('D', '-' * d)"
    },
    {
        "number": 4583,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4583,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4583,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    res = ''\n    res += str(line[0])\n    for i in range(1, len(line)):\n        if line[i]!= '0':\n            res += '+'\n        res += line[i]\n    res += '=7'\n    print(res)\n    return res"
    },
    {
        "number": 4584,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    N = int(stdin)\n    boss = list(map(int, stdin.rstrip().split(' ')))\n    boss_index = {k:v for v,k in enumerate(sorted(list(set(boss))))}\n    boss_map = [[] for _ in range(N)]\n    for i in range(N):\n        boss_map[boss_index[boss[i]]].append(i)\n    \n    def dfs(idx: int) -> int:\n        result[idx - 1] = len(boss_map[idx])\n        for i in boss_map[idx]:\n            dfs(i)\n    \n    dfs(1)\n    return '\\n'.join(map(str, result))\n\nprint(solution(input()))"
    },
    {
        "number": 4584,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(stdin) for _ in range(n)]\n    d = {}\n    for i in range(1, n + 1):\n        d[i] = l[i - 1]\n    for i in range(1, n):\n        d[l[i - 1]].append(i)\n    res = []\n    for i in range(1, n + 1):\n        res.append(len(d[i]))\n    return '\\n'.join([str(i) for i in res])"
    },
    {
        "number": 4584,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    members = list(map(int, stdin.rstrip().split()))\n    bosses = [members[0]]\n\n    for i in range(1, n):\n        boss = bosses.pop()\n        bosses.extend([boss] * members[boss])\n\n    subordinates = [0] * n\n\n    for i in range(1, n):\n        boss = members[i]\n        subordinates[boss] = len(bosses) - bosses.index(boss)\n\n    return '\\n'.join(map(str, subordinates))"
    },
    {
        "number": 4584,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4584,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_of_members = stdin.readline().strip()\n    members = stdin.readline().strip().split(' ')\n    member_ids = {}\n    for i, member in enumerate(members):\n        member_ids[int(member)] = i\n    print(get_num_of_immediate_subordinates(members, member_ids))\n\n\ndef"
    },
    {
        "number": 4584,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    A = list(map(int, stdin.split(\" \")))\n\n    result = [0] * N\n    for i in range(1, N + 1):\n        boss = A[i - 1]\n        result[boss - 1] += 1\n        for j in range(i, N + 1):\n            if boss == A[j - 1]:\n                result[j - 1] += result[boss - 1]\n\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4584,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4584,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = stdin.strip()\n    data = data.split(' ')\n    data = [int(x) for x in data]\n\n    # Build up a list of members and their immediate subordinates.\n    # The first member is the only member that has no immediate subordinates.\n    # Also, any member with a value of 0 is also considered to have no immediate subordinates.\n    members = {}\n    members[1] = [2]\n    members[2] = [1, 3]\n    members[3] = [2]\n\n    # Use a map to compute the number of immediate subordinates for each member.\n    # Start at the immediate subordinates of the first member.\n    # If the current member is 1, then the members of the immediate subordinates of the current member are\n    # all 1.\n    for i in range(1, n):\n        for j in members[i]:\n            members[j].append(data[i])\n\n    # For each member, count the number of immediate subordinates.\n    # Each member with an immediate subordinates value of 1 is a subordinate of 1.\n    # Each member with an immediate subordinates value of 2 is a subordinate of 2.\n    # For each member with an immediate subordinates value of 0, it is not a subordinate of anyone.\n    # For each member, count the number of subordinates.\n    # The answer is the number of members with an immediate subordinates value of 0.\n    answers = []\n    for i in range(1, n + 1):\n        answers.append(sum(members[i]))\n\n    return '\\n'.join(str(x) for x in answers)\n\ndef"
    },
    {
        "number": 4584,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_members = int(stdin)\n    # A_i is the immediate boss of A_i+1\n    boss_map = [0] * (num_members + 1)\n    for i in range(num_members):\n        member_id, boss_id = map(int, stdin.strip().split(' '))\n        boss_map[member_id] = boss_id\n\n    # Keep a running count of subordinates for each member\n    sub_count = [0] * (num_members + 1)\n\n    # Traverse the boss_map and calculate the number of subordinates\n    for i in range(1, num_members + 1):\n        sub_count[i] = sub_count[boss_map[i]] + 1\n\n    # Output the number of subordinates for each member\n    for i in range(1, num_members + 1):\n        print(sub_count[i])"
    },
    {
        "number": 4584,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    members = int(stdin.readline().strip())\n    boss = list(map(int, stdin.readline().strip().split()))\n\n    # Build the successors list\n    successors = {}\n    for i in range(1, members + 1):\n        successors[i] = []\n    for i in range(1, members):\n        successors[boss[i - 1]].append(i)\n\n    # Calculate the number of subordinates\n    result = [0] * (members + 1)\n    for i in range(1, members + 1):\n        if successors[i]:\n            result[i] = len(successors[i])\n        else:\n            result[i] = -1\n\n    # Print the result\n    for i in range(1, members + 1):\n        print(result[i])\n\n\nsolution(input())\n"
    },
    {
        "number": 4585,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    x = int(lines[0])\n    return str(x - (x % 3))"
    },
    {
        "number": 4585,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X: int = int(stdin)\n    ans: int = 0\n    while True:\n        if X % 5 == 0 or X % 3 == 0:\n            ans = X\n            break\n        else:\n            X += 1\n    return str(ans)\n"
    },
    {
        "number": 4585,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4585,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin[0]\n    return x"
    },
    {
        "number": 4585,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    time = 0\n    while x!= n:\n        if x > n:\n            time += 1\n            x -= 1\n        elif x < n:\n            time += 1\n            x += 1\n        else:\n            time += 1\n            x += 1\n    return str(time)"
    },
    {
        "number": 4585,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(x + (x - (x % 3)) // 3)\n\nassert(solution(stdin=\"1\") == \"1\")\nassert(solution(stdin=\"3\") == \"3\")\nassert(solution(stdin=\"6\") == \"4\")\nassert(solution(stdin=\"14\") == \"7\")\nassert(solution(stdin=\"28\") == \"14\")\nassert(solution(stdin=\"56\") == \"23\")\nassert(solution(stdin=\"125\") == \"104\")\nassert(solution(stdin=\"144\") == \"113\")\nassert(solution(stdin=\"178\") == \"135\")\nassert(solution(stdin=\"190\") == \"148\")\nassert(solution(stdin=\"213\") == \"161\")\nassert(solution(stdin=\"226\") == \"174\")\nassert(solution(stdin=\"248\") == \"187\")\nassert(solution(stdin=\"283\") == \"200\")\nassert(solution(stdin=\"310\") == \"223\")\nassert(solution(stdin=\"337\") == \"245\")\nassert(solution(stdin=\"366\") == \"268\")\nassert(solution(stdin=\"398\") == \"281\")\nassert(solution(stdin=\"435\") == \"314\")\nassert(solution(stdin=\"458\") == \"337\")\nassert(solution(stdin=\"490\") == \"356\")\nassert(solution(stdin=\"516\") == \"378\")\nassert(solution(stdin=\"548\") == \"401\")\nassert(solution(stdin=\"583\") == \"424\")\nassert(solution(stdin=\"610\") == \"437\")\nassert(solution(stdin=\"638\") == \"460\")\nassert(solution(stdin=\"672\") == \"483\")\nassert(solution(stdin=\"716\") == \"516\")\nassert(solution(stdin=\"759\") == \"539\")\nassert(solution(stdin=\"794\") == \"562\")\nassert(solution(stdin=\"828\") == \"595\")\nassert(solution(stdin=\"873\") == \"617\")\nassert(solution(stdin=\"905\") == \"640\")\nassert(solution(stdin=\"939\") == \"663\")\nassert(solution(stdin=\"977\") == \"685\")\nassert(solution(stdin=\"1026\") == \"708\")\nassert(solution(stdin=\"1053\") == \"731\")\nassert(solution(stdin=\"1090\") == \"752\")\nassert(solution(stdin=\"1120\") == \"774\")\nassert(solution(stdin=\"1151\") == \"797\")\nassert(solution(stdin=\"1199\") == \"820\")\nassert(solution(stdin=\"1239\") == \"843\")\nassert(solution(stdin=\"1278\") == \"865\")\nassert(solution(stdin=\"1327\") == \"889\")\nassert(solution(stdin=\"1366\") == \"922\")\nassert(solution(stdin=\"1418\") == \"944\")\nassert(solution(stdin=\"1457\") == \"976\")\nassert(solution(stdin=\"1496\") == \"999\")\nassert(solution(stdin=\"1545\") == \"1033\")\nassert(solution(stdin=\"1594\") == \"1066\")\nassert(solution(stdin=\"1634\") == \"1097\")\nassert(solution(stdin=\"1673\") == \"1140\")\nassert(solution(stdin=\"1716\") == \"1183\")\nassert(solution(stdin=\"1755\") == \"1216\")\nassert(solution(stdin=\"1794\") == \"1247\")\nassert(solution(stdin=\"1824\") == \"1280\")\nassert(solution(stdin=\"1863\") == \"1293\")\nassert(solution(stdin=\"1892\") == \"1326\")\nassert(solution(stdin=\"1931\") == \"1359\")\nassert(solution(stdin=\"1969\") == \"1392\")\nassert(solution(stdin=\"2000\") == \"1425\")\nassert(solution(stdin=\"2039\") == \"1466\")\nassert(solution(stdin=\"2078\") == \"1497\")\nassert(solution(stdin=\"2118\") == \"1540\")\nassert(solution(stdin=\"2157\") == \"1573\")\nassert(solution(stdin=\"2196\") == \"1616\")\nassert(solution(stdin=\"2235\") == \"1649\")\nassert(solution(stdin=\"2274\") == \"1682\")\nassert(solution(stdin=\"2318\") == \"1713\")\nassert(solution(stdin=\"2357\") == \"1745\")\nassert(solution(stdin=\"2396\") == \"1776\")\nassert(solution(stdin=\"2435\") == \"1817\")\nassert(solution(stdin=\"2474\") == \"1850\")\nassert(solution(stdin=\"2518\") == \"1881\")\nassert(solution(stdin=\"2557\") == \"1914\")\nassert(solution(stdin=\"2596\") == \"1947\")\nassert(solution(stdin=\"2635\") == \"1982\")\nassert(solution(stdin=\"2674\") == \"2013\")\nassert(solution(stdin=\"2718\") == \"2036\")\nassert(solution(stdin=\"2757\") == \"2069\")\nassert(solution(stdin=\"2796\") == \"2092\")\nassert(solution(stdin=\"2835\") == \"2115\")\nassert(solution(stdin=\"2874\") == \"2148\")\nassert(solution(stdin=\"2918\") == \"2181\")\nassert(solution(stdin=\"2957\") == \"2214\")\nassert(solution(stdin=\"2996\") == \"2247\")\nassert(solution(stdin=\"3035\") == \"2180\")\nassert(solution(stdin=\"3074\") == \"2293\")\nassert(solution(stdin=\"3118\") == \"2326\")\nassert(solution(stdin=\"3157\") == \"2359\")\nassert(solution(stdin=\"3196\") == \"2392\")\nassert(solution(stdin=\"3235\") == \"2425\")\nassert(solution(stdin=\"3274\") == \"2468\")\nassert(solution(stdin=\"3318\") == \"2491\")\nassert(solution(stdin=\"3357\") == \"2524\")\nassert(solution(stdin=\"3396\") == \"2567\")\nassert(solution(stdin=\"3435\") == \"2590\")\nassert(solution(stdin=\"3444\") == \"2623\")\nassert(solution(stdin=\"3458\") == \"2656\")\nassert(solution(stdin=\"3497\") == \"2689\")\nassert(solution(stdin=\"3536\") == \"2720\")\nassert(solution(stdin=\"3575\") == \"2753\")\nassert(solution(stdin=\"3594\") == \"2786\")\nassert(solution(stdin=\"3633\") == \"2817\")\nassert(solution(stdin=\"3672\") == \"2850\")\nassert(solution(stdin=\"3718\") == \"2883\")\nassert(solution(stdin=\"3747\") == \"2916\")\nassert(solution(stdin=\"3776\") == \"2949\")\nassert"
    },
    {
        "number": 4585,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 4585,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n - 1)"
    },
    {
        "number": 4585,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return...\n"
    },
    {
        "number": 4585,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4586,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()\n    l = len(N)\n    if l < 4:\n        return 'No'\n    else:\n        x = [int(n) for n in N]\n        is_good = True\n        if l == 4:\n            return 'Yes' if x[0] == x[1] == x[2] == x[3] else 'No'\n        elif l == 5:\n            return 'Yes' if x[0] == x[1] == x[2] == x[3] and x[4] == x[5] else 'No'\n        else:\n            for i in range(l - 3):\n                if x[i]!= x[i + 1] and x[i + 1] == x[i + 2] == x[i + 3]:\n                    is_good = False\n                    break\n            return 'Yes' if is_good else 'No'\n\n\ndef"
    },
    {
        "number": 4586,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if len(str(n)) > 4:\n        return \"No\"\n    if len(str(n)) == 4 and (n % 10 == n / 10 % 10 == n / 100 % 10):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if len(str(n)) < 4:\n        return \"No\"\n    if n == 1118:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    if n[0] == n[1] and n[1] == n[2] and n[2] == n[3]:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()\n    for i in range(len(N)-3):\n        if N[i]!= N[i+1] or N[i+1]!= N[i+2] or N[i+2]!= N[i+3]:\n            continue\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] == s[i+2]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4586,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    #your code here\n    return \"\""
    },
    {
        "number": 4586,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    if n[0] == n[1] == n[2] == n[3]:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4586,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return 'Yes' if n == int(n) and n >= 1000 and n <= 9999 else 'No'"
    },
    {
        "number": 4586,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    number = [int(x) for x in str(n)]\n    if len(set(number)) == len(number):\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4587,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.strip().split(' ')))\n    B = list(map(int, stdin.strip().split(' ')))\n    C = list(map(int, stdin.strip().split(' ')))\n    altars = []\n\n    for i in range(N):\n        if i == 0:\n            altars.append([A[i], B[i], C[i]])\n        elif i == 1:\n            for j in range(len(altars)):\n                altar = list(altars[j])\n                altar[1] += A[i]\n                if altar[1] > altar[2]:\n                    altars.append(altar)\n        elif i == 2:\n            for j in range(len(altars)):\n                altar = list(altars[j])\n                altar[2] += B[i]\n                if altar[1] > altar[2]:\n                    altars.append(altar)\n        elif i == 3:\n            for j in range(len(altars)):\n                altar = list(altars[j])\n                altar[2] += C[i]\n                if altar[1] > altar[2]:\n                    altars.append(altar)\n        else:\n            for j in range(len(altars)):\n                altar = list(altars[j])\n                altar[2] += C[i]\n                if altar[1] > altar[2]:\n                    altars.append(altar)\n    print(len(altars))"
    },
    {
        "number": 4587,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_altars = 0\n    N, _ = map(int, stdin.split())\n    part_sizes = map(int, stdin.split()[1:])\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                if part_sizes[i] > part_sizes[j] and part_sizes[i] > part_sizes[k]:\n                    num_altars += 1\n    return str(num_altars)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4587,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    parts = [int(x) for x in stdin.strip().split()]\n    parts.sort(reverse=True)\n    result = 0\n\n    for i in range(n):\n        result += (parts[i] - 1) * (parts[i + 1] - 1) * (parts[i + 2] - 1)\n\n    return str(result)"
    },
    {
        "number": 4587,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for line in stdin.strip().split(\"\\n\"):\n        a, b, c = [int(value) for value in line.split(\" \")]\n        if b > a > c or c > a > b:\n            result.append(str(a) + \"-\" + str(b) + \"-\" + str(c))\n    return str(len(set(result)))"
    },
    {
        "number": 4587,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(v) for v in stdin.strip().split(' ')]\n    B = [int(v) for v in stdin.strip().split(' ')]\n    C = [int(v) for v in stdin.strip().split(' ')]\n    \n    altars = 0\n    for i in range(1, N):\n        if A[i-1] > A[i] or B[i-1] > B[i] or C[i-1] > C[i]:\n            continue\n        for j in range(i+1, N):\n            if A[i-1] > A[j] or B[i-1] > B[j] or C[i-1] > C[j]:\n                continue\n            for k in range(j+1, N):\n                if A[i-1] > A[k] or B[i-1] > B[k] or C[i-1] > C[k]:\n                    continue\n                altars += 1\n    return str(altars)"
    },
    {
        "number": 4587,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    parts = [int(stdin.readline().strip()) for _ in range(n)]\n\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if i!= j and j!= k and parts[i] < parts[j] and parts[j] < parts[k]:\n                    result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4587,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4587,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(upper: int, middle: int, lower: int) -> bool:\n        return upper > middle > lower\n\n    n = int(stdin.readline().strip())\n    altars = []\n    for i in range(n):\n        a, b, c = map(int, stdin.readline().split())\n        altars.append((a, b, c))\n    altars.sort(key=lambda x: x[0] + x[1] + x[2])\n    num_altars = 0\n    altars_seen = set()\n    for a, b, c in altars:\n        if a + b > c and a + c > b and b + c > a:\n            if is_valid(a, b, c) and (a, b, c) not in altars_seen:\n                num_altars += 1\n                altars_seen.add((a, b, c))\n    return str(num_altars)"
    },
    {
        "number": 4587,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n\nassert(solution(\"2\\n1 5\\n2 4\\n3 6\") == \"3\")\nassert(solution(\"1\\n5\\n2 4\\n3 6\") == \"3\")\nassert(solution(\"1\\n1\\n1\\n1\") == \"1\")\nassert(solution(\"1\\n1\\n1\\n1\\n1\") == \"1\")\nassert(solution(\"1\\n1\\n1\\n1\\n1\\n1\") == \"1\")\nassert(solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\")\nassert(solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\")\nassert(solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\")\nassert(solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\") == \"1\")\nassert(solution(\"1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\"
    },
    {
        "number": 4587,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    parts = [int(p) for p in stdin.readline().split()]\n    parts = [(p, i) for i, p in enumerate(parts)]\n    parts.sort()\n    result = 0\n    upper, lower = parts[0][1], parts[-1][1]\n    middle = parts[(lower - upper) // 2][1]\n    while upper < middle:\n        result += 1\n        upper += 1\n    return str(result)"
    },
    {
        "number": 4588,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x = int(x, 16)\n    y = int(y, 16)\n    if x < y:\n        return '<'\n    elif y < x:\n        return '>'\n    else:\n        return '='"
    },
    {
        "number": 4588,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.strip().split(' ')\n    return '<' if int(X, 16) < int(Y, 16) else '=' if int(X, 16) == int(Y, 16) else '>'"
    },
    {
        "number": 4588,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] if int(stdin, 16) < int(stdin[1], 16) else stdin[1]"
    },
    {
        "number": 4588,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\" \")\n    x = data[0]\n    y = data[1]\n    if x == y:\n        print(\">\")\n    elif x > y:\n        print(\"<\")\n    elif x < y:\n        print(\"<\")\n    return \"\""
    },
    {
        "number": 4588,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    x = int(line[0], 16)\n    y = int(line[1], 16)\n    if x > y:\n        return '>'\n    elif x < y:\n        return '<'\n    else:\n        return '='"
    },
    {
        "number": 4588,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    return '<' if int(x, 16) < int(y, 16) else '>' if int(x, 16) > int(y, 16) else '='"
    },
    {
        "number": 4588,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    return '<' if int(x, 16) < int(y, 16) else '>' if int(x, 16) > int(y, 16) else '='\n\ndef"
    },
    {
        "number": 4588,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    return '<' if int(x, 16) < int(y, 16) else '>' if int(x, 16) > int(y, 16) else '='"
    },
    {
        "number": 4588,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    print('>' if int(a, 16) < int(b, 16) else '<' if int(a, 16) > int(b, 16) else '=')"
    },
    {
        "number": 4588,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    if int(x, 16) > int(y, 16):\n        print(\">\")\n    elif int(x, 16) < int(y, 16):\n        print(\"<\")\n    else:\n        print(\"=\")"
    },
    {
        "number": 4589,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4589,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W = tuple(map(int, stdin.split()))\n    for i in range(H):\n        stdin += stdin[i]\n    return \"\".join(str(stdin.count(\"#\")) for i in range(W))"
    },
    {
        "number": 4589,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    H, W = list(map(int, stdin.rstrip().split()))\n    S = stdin.rstrip()\n    result = [0 for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if S[i][j] == '#':\n                result[i] += 1\n                if j > 0:\n                    result[i] += result[i-1]\n                if j > 1:\n                    result[i] += result[i-2]\n                if i > 0:\n                    result[i] += result[i-1]\n                if i > 1:\n                    result[i] += result[i-2]\n                if i > 0 and j > 0:\n                    result[i] += result[i-1]\n                    result[i] += result[i-2]\n    for i in range(H):\n        print(result[i], end='')"
    },
    {
        "number": 4589,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h,w = [int(x) for x in stdin.split()]\n    grid = [list(stdin.strip()) for _ in range(h)]\n    for i,row in enumerate(grid):\n        for j,letter in enumerate(row):\n            if letter == '#':\n                bombs = [\n                    (i-1,j),\n                    (i+1,j),\n                    (i,j-1),\n                    (i,j+1),\n                    (i-1,j-1),\n                    (i+1,j-1),\n                    (i-1,j+1),\n                    (i+1,j+1)\n                ]\n                for x,y in bombs:\n                    if x >= 0 and y >= 0 and x < h and y < w and grid[x][y] == '#':\n                        grid[i][j] = '1'\n                        break\n    return '\\n'.join([''.join(row) for row in grid])"
    },
    {
        "number": 4589,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4589,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3 5\n   ....\n   .##.\n   ...#''')\n    '11211'\n    >>> solution('''3 5\n   ....\n   .#.\n   ...#''')\n    '11211'\n    >>> solution('''10 10\n   ..##..\n   .#..#.\n    ####.#\n    ##.###\n    ######\n    ####.#\n    ##...#\n    ###.#.\n    ##.###''')\n
    },
    {
        "number": 4589,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4589,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin.readline())\n    columns = int(stdin.readline())\n    grid = []\n\n    for row in range(rows):\n        grid.append(list(stdin.readline()))\n        \n    dictionary = {}\n    for row in range(rows):\n        for column in range(columns):\n            if grid[row][column] == '.':\n                dictionary[(row,column)] = 0\n            if grid[row][column] == '#':\n                dictionary[(row,column)] = -1\n\n    bomb_count = 0\n    for key, value in dictionary.items():\n        if value!= -1:\n            bomb_count += 1\n        \n        if value == -1:\n            dictionary[key] = bomb_count\n            bomb_count = 0\n\n    for key, value in dictionary.items():\n        grid[key[0]][key[1]] = str(dictionary[key])\n        \n    for row in grid:\n        print(''.join(row))\n\nsolution('input.txt')\n"
    },
    {
        "number": 4589,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H,W = list(map(int, stdin.split()))\n    grid = [list(stdin.strip()) for _ in range(H)]\n\n    def count_bombs(i: int, j: int) -> int:\n        if grid[i][j] == '#':\n            return 1\n        else:\n            return 0\n\n    def get_total(i: int, j: int) -> int:\n        total = 0\n        total += count_bombs(i-1, j-1)\n        total += count_bombs(i-1, j)\n        total += count_bombs(i-1, j+1)\n\n        total += count_bombs(i, j-1)\n        total += count_bombs(i, j+1)\n\n        total += count_bombs(i+1, j-1)\n        total += count_bombs(i+1, j)\n        total += count_bombs(i+1, j+1)\n\n        return total\n\n    result = [''.join(map(str, map(get_total, i, j))) for i in range(H) for j in range(W)]\n    return '\\n'.join(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4589,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, width = stdin.strip().split(' ')\n    height, _ = width\n    height = int(height)\n    width = int(width)\n    grid = [stdin.strip() for _ in range(height)]\n    # setup the grid\n    for r in range(height):\n        for c in range(width):\n            if grid[r][c] == '#':\n                grid[r] = grid[r][:c] + '#' + grid[r][c+1:]\n    # print the grid\n    for r in grid:\n        print(r)\n    # do the work\n    for r in range(height):\n        for c in range(width):\n            if grid[r][c] == '.':\n                neighbors = 0\n                if c > 0 and grid[r][c-1] == '#':\n                    neighbors += 1\n                if c < width-1 and grid[r][c+1] == '#':\n                    neighbors += 1\n                if r > 0 and grid[r-1][c] == '#':\n                    neighbors += 1\n                if r < height-1 and grid[r+1][c] == '#':\n                    neighbors += 1\n                if r > 0 and c > 0 and grid[r-1][c-1] == '#':\n                    neighbors += 1\n                if r > 0 and c < width-1 and grid[r-1][c+1] == '#':\n                    neighbors += 1\n                if r < height-1 and c > 0 and grid[r+1][c-1] == '#':\n                    neighbors += 1\n                if r < height-1 and c < width-1 and grid[r+1][c+1] == '#':\n                    neighbors += 1\n                grid[r] = grid[r][:c] + str(neighbors) + grid[r][c+1:]\n    # print the grid\n    for r in grid:\n        print(r)\nsolution(sys.stdin.read())"
    },
    {
        "number": 4590,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()[1:]]\n    B = [int(x) for x in stdin.split()[1:]]\n    result = 0\n    curr = 0\n    while curr <= k and A:\n        if len(A) > 1:\n            if A[0] > B[0]:\n                curr += A[0]\n                A.pop(0)\n                result += 1\n            else:\n                curr += B[0]\n                B.pop(0)\n                result += 1\n        else:\n            if A[0] > B[0]:\n                curr += A[0]\n                A.pop(0)\n                result += 1\n            else:\n                curr += B[0]\n                B.pop(0)\n                result += 1\n    return str(result)\n\n\n\ndef"
    },
    {
        "number": 4590,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n\n    # Return number of books we can read at most in K minutes.\n    return max(A) * K + max(B) * K + max(A) + max(B)\n"
    },
    {
        "number": 4590,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split(\" \"))\n    a = [int(x) for x in stdin.strip().split(\" \")]\n    b = [int(x) for x in stdin.strip().split(\" \")]\n    a.sort()\n    b.sort()\n    a_ptr, b_ptr, max_read, cur_read = 0, 0, 0, 0\n    while cur_read < k:\n        if a[a_ptr] <= b[b_ptr]:\n            cur_read += b[b_ptr]\n            b_ptr += 1\n        else:\n            cur_read += a[a_ptr]\n            a_ptr += 1\n        max_read = max(max_read, cur_read)\n    return str(max_read)"
    },
    {
        "number": 4590,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    desk_a, desk_b = stdin.split()\n    desk_a, desk_b = int(desk_a), int(desk_b)\n    \n    desk_a_read, desk_b_read = 0, 0\n    while desk_a_read + desk_b_read <= desk_a + desk_b:\n        if desk_a_read < desk_a:\n            desk_a_read += 1\n            desk_a -= 1\n            \n        if desk_b_read < desk_b:\n            desk_b_read += 1\n            desk_b -= 1\n    \n    return str(desk_a_read + desk_b_read)"
    },
    {
        "number": 4590,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    readings = list(map(int, stdin.split()))\n    N, M, K = readings[0:3]\n    A = readings[3:3 + N]\n    B = readings[3 + N:3 + N + M]\n\n    def possible(a: int, b: int) -> bool:\n        return a - b > 0\n\n    def enough(a: int, b: int) -> bool:\n        return a >= b\n\n    def can_read(time: int, a: int, b: int) -> bool:\n        return time >= a + b\n\n    def read_from(time: int, desk: int, a: int, b: int) -> int:\n        return 1 if time < a else 0\n\n    def total_time(time: int, a: int, b: int) -> int:\n        return a + b - time\n\n    def read_books(time: int, a: int, b: int) -> int:\n        return 1 if time < a else 0\n\n    def read_books_backwards(time: int, a: int, b: int) -> int:\n        return 1 if time < a else 0\n\n    def read_time(desk: int, a: int, b: int) -> int:\n        return a + b\n\n    def time_to_read(desk: int, a: int, b: int) -> int:\n        return a + b\n\n    # Let us see if we can read all books at all\n    if can_read(K, A[0], B[0]):\n        desk = 0\n        time_to_read = total_time(K, A[0], B[0])\n        while can_read(time_to_read, A[desk], B[desk]):\n            time_to_read += read_time(desk, A[desk], B[desk])\n            desk += 1\n        return desk\n    # If we do not have enough time, we will have to read as much as we can\n    # (which will be equal to max(A, B))\n    if can_read(K, max(A), max(B)):\n        return max(A) + max(B)\n    # If we do not have enough time, we will have to read as much as we can\n    # (which will be equal to max(A, B))\n    if can_read(K, max(A), B[0]):\n        return max(A) + B[0]\n    # If we do not have enough time, we will have to read as much as we can\n    # (which will be equal to max(A, B))\n    if can_read(K, A[0], max(B)):\n        return A[0] + max(B)\n    # We cannot read any books\n    return 0\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4590,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    A = map(int, stdin.split())\n    B = map(int, stdin.split())\n    count = 0\n    while len(A) + len(B) > 0 and count < K:\n        if len(A) > 0 and len(B) > 0:\n            if A[0] < B[0]:\n                count += min(A.pop(0), B.pop(0))\n            else:\n                count += min(B.pop(0), A.pop(0))\n        elif len(A) > 0:\n            count += A.pop(0)\n        elif len(B) > 0:\n            count += B.pop(0)\n    return str(count)"
    },
    {
        "number": 4590,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = tuple(map(int, stdin.split()))\n    books_per_desk = M // N\n    books_on_top_of_desk = M % N\n    desk_remaining_books = N\n    total_time = 0\n    while desk_remaining_books > 0:\n        total_time += min(K, books_on_top_of_desk, desks_remaining_books)\n        desk_remaining_books -= min(K, books_on_top_of_desk, desks_remaining_books)\n        total_time += min(K, books_per_desk, books_on_top_of_desk, desks_remaining_books)\n        books_on_top_of_desk -= min(K, books_per_desk, books_on_top_of_desk, desks_remaining_books)\n        books_per_desk -= min(K, books_per_desk, books_on_top_of_desk, desks_remaining_books)\n    return str(total_time)"
    },
    {
        "number": 4590,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = [int(i) for i in stdin.strip().split(' ')]\n    A = [int(i) for i in stdin.strip().split(' ')[:N]]\n    B = [int(i) for i in stdin.strip().split(' ')[:M]]\n    A.sort()\n    B.sort()\n    ans = 0\n    i, j = 0, 0\n    while i < N and j < M:\n        if A[i] <= B[j]:\n            ans += A[i]\n            i += 1\n        else:\n            ans += B[j]\n            j += 1\n    return str(max(ans, i * K + j * M))"
    },
    {
        "number": 4590,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n\n    a_, b_ = 0, 0\n    while a_ < n and b_ < m:\n        if a[a_] <= b[b_]:\n            a_ += 1\n            b_ += 1\n        else:\n            b_ += 1\n    return str(max(a_, b_))"
    },
    {
        "number": 4590,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    A = [int(stdin) for stdin in stdin.split()]\n    B = [int(stdin) for stdin in stdin.split()]\n\n    A_remaining = N\n    B_remaining = M\n    current_time = 0\n\n    while A_remaining!= 0 or B_remaining!= 0:\n        current_time += 1\n\n        if A_remaining == 0:\n            current_time += M - B_remaining\n            break\n\n        if B_remaining == 0:\n            current_time += A_remaining\n            break\n\n        if A[-1] < B[-1]:\n            current_time += A_remaining\n            A_remaining = 0\n        else:\n            current_time += B_remaining\n            B_remaining = 0\n\n    return str(current_time)"
    },
    {
        "number": 4591,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = (int(x) for x in stdin.split())\n    return str(max(A * X, B * Y, A * B * X // 2))"
    },
    {
        "number": 4591,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    assert 1 <= A <= 5000\n    assert 1 <= B <= 5000\n    assert 1 <= C <= 5000\n    assert 1 <= X <= 10 ** 5\n    assert 1 <= Y <= 10 ** 5\n\n    total_money = A * C + B * (C + (X - 1) * B) + (X - 1) * A\n    print(total_money)"
    },
    {
        "number": 4591,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    a_pizza = A * C\n    b_pizza = B * C\n    AB_pizzas = a_pizza + b_pizza\n    return str(AB_pizzas * (X + Y))\n\"\"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split(' '))\n    A, B, X = max(A, B), max(B, C), max(X, Y)\n    return str((A*X) + (B*Y))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4591,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a_pizza_price, b_pizza_price, ab_pizza_price, x, y = list(map(int, stdin.split()))\n    return str(a_pizza_price * x + b_pizza_price * y + ab_pizza_price * (x * 2 + y * 2))\n\nassert solution(\"1500 2000 1600 3 2\") == \"7900\"\nassert solution(\"100 200 300 3 3\") == \"1660\"\nassert solution(\"100 200 300 4 4\") == \"2440\"\nassert solution(\"1500 2000 1600 3 2\") == \"7900\"\nassert solution(\"100 200 300 3 3\") == \"1660\"\nassert solution(\"100 200 300 4 4\") == \"2440\"\nassert solution(\"1000 1000 1000 1000 1000\") == \"0\"\n\"\"\""
    },
    {
        "number": 4591,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    def dp(a: int, b: int, c: int) -> int:\n        \"\"\"Return the minimum amount of money required to prepare X A-pizzas and Y B-pizzas.\n\n        Args:\n            a (int): A-pizza price\n            b (int): B-pizza price\n            c (int): AB-pizza price\n\n        Returns:\n            int: minimum amount of money required to prepare X A-pizzas and Y B-pizzas\n        \"\"\"\n\n        if a == 0 and b == 0:\n            return c\n        if a == 0:\n            return bp(c, 0, 0)\n        if b == 0:\n            return ap(c, 0, 0)\n        return min(ap(c, a, b), bp(c, a - 1, b))\n\n    def ap(c: int, a: int, b: int) -> int:\n        \"\"\"Return the minimum amount of money required to prepare X A-pizzas.\n\n        Args:\n            a (int): A-pizza price\n            b (int): B-pizza price\n            c (int): AB-pizza price\n\n        Returns:\n            int: minimum amount of money required to prepare X A-pizzas\n        \"\"\"\n\n        if a > b:\n            a, b = b, a\n        if a > c:\n            a, c = c, a\n        if a > 0 and b > 0:\n            return (a + b) * 2\n        return a + c\n\n    def bp(c: int, a: int, b: int) -> int:\n        \"\"\"Return the minimum amount of money required to prepare Y B-pizzas.\n\n        Args:\n            a (int): A-pizza price\n            b (int): B-pizza price\n            c (int): AB-pizza price\n\n        Returns:\n            int: minimum amount of money required to prepare Y B-pizzas\n        \"\"\"\n\n        if a > b:\n            a, b = b, a\n        if a > c:\n            a, c = c, a\n        if b > 0 and c > 0:\n            return (a + c) * 2\n        return a + b\n\n    a, b, c, x, y = map(int, stdin.split())\n    return str(dp(a, b, c) + (x * a) + (y * b))\n"
    },
    {
        "number": 4591,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = [int(num) for num in stdin.split()]\n    result = min(A * C, A * B + B * C, X * Y)\n    return str(result)"
    },
    {
        "number": 4591,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, _, A, B, C, X, Y = [int(s) for s in stdin.split()]\n    A *= C\n    B *= C\n    X *= C\n    Y *= C\n    return str(X * Y - max(X, Y) * max(A, B) + max(A, B))"
    },
    {
        "number": 4591,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split())))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4591,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, X, Y = map(int, stdin.split())\n    return str(int(X * C * (N - X - Y) / 2 + A * C * (X + Y) * (N - X - Y) / 2))\n\n\nassert(solution(input) == \"7900\")\nassert(solution(input=\"1000 500 200 1 1\") == \"5000\")\nassert(solution(input=\"1000 500 200 2 2\") == \"4000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000 2000 2 2 2\") == \"1000\")\nassert(solution(input=\"2000"
    },
    {
        "number": 4592,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            res += 1\n    return str(res)\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4592,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = [1]\n    for i in range(2, n + 1):\n        divisors = [divisor + i for divisor in divisors]\n        divisors[0] -= 1\n    return str(sum(divisors) % 1000000007)\n"
    },
    {
        "number": 4592,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    num_of_factors = 0\n    # All factors of num\n    for i in range(1, num + 1):\n        if num % i == 0:\n            num_of_factors += 1\n    return num_of_factors % 1000000007\n\nprint(solution(input()))"
    },
    {
        "number": 4592,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str((1 + n) * n // 2)\n\nassert(solution('') == '0')\nassert(solution('0') == '0')\nassert(solution('1') == '1')\nassert(solution('2') == '2')\nassert(solution('3') == '6')\nassert(solution('4') == '24')\nassert(solution('5') == '120')\nassert(solution('6') == '720')\nassert(solution('7') == '5040')\nassert(solution('8') == '40320')\nassert(solution('9') == '362880')\nassert(solution('10') == '3628800')\nassert(solution('11') == '39916800')\nassert(solution('12') == '479001600')\nassert(solution('13') == '6227020800')\nassert(solution('14') == '87178291200')\nassert(solution('15') == '1307674368000')\nassert(solution('16') == '20922789888000')\nassert(solution('17') == '355687428096000')\nassert(solution('18') == '6402373705728000')\nassert(solution('19') == '121645100408832000')\nassert(solution('20') == '2432902008176640000')\nassert(solution('21') == '5214149849700000')\nassert(solution('22') == '1099511627776000000')\nassert(solution('23') == '2199023255552000000')\nassert(solution('24') == '4398046511104000')\nassert(solution('25') == '8796093022208000')\nassert(solution('26') == '196602241229240')\nassert(solution('27') == '49927591437760000')\nassert(solution('28') == '18014398509481984')\nassert(solution('29') == '36893488147419103')\nassert(solution('30') == '576460752303423488')\nassert(solution('31') == '112400072777760768')\nassert(solution('32') == '225179981368524816')\nassert(solution('33') == '451819726068106544')\nassert(solution('34') == '681703000922746533')\nassert(solution('35') == '1332196686075883168')\nassert(solution('36') == '82211646240005026152')\nassert(solution('37') == '282446368315504038574')\nassert(solution('38') == '620692211491638215262')\nassert(solution('39') == '125862690252100840625')\nassert(solution('40') == '377996849646667352941')\nassert(solution('41') == '6130825594538255811702')\nassert(solution('42') == '1964186768572992518779')\nassert(solution('43') == '5855019519776092783219')\nassert(solution('44') == '12640690951496582031809')\nassert(solution('45') == '3839876598485500453857')\nassert(solution('46') == '28994150557569479325160')\nassert(solution('47') == '62098327416163814266186')\nassert(solution('48') == '207468925437073839111586')\nassert(solution('49') == '64381290235185066462880')\nassert(solution('50') == '16899561527707060574741')\nassert(solution('51') == '845407082737354927245049')\nassert(solution('52') == '179738602906169424060000')\nassert(solution('53') == '4269811342776205760741706')\nassert(solution('54') == '5337158929674463565648141')\nassert(solution('55') == '86515503833348932294996909')\nassert(solution('56') == '28597904315983105106657272')\nassert(solution('57') == '63177327487560090211583885')\nassert(solution('58') == '12519046764237076278749041')\nassert(solution('59') == '48453586928114039225426632')\nassert(solution('60') == '89221880895569789978782737')\nassert(solution('61') == '165513373325484701492026516')\nassert(solution('62') == '69383961058216055630943849')\nassert(solution('63') == '176690993215134732798342274')\nassert(solution('64') == '334888678064746330282545103')\nassert(solution('65') == '8503021208439476799093773')\nassert(solution('66') == '204678368216764595342152099')\nassert(solution('67') == '7536172759015594498647950800')\nassert(solution('68') == '1313219933263913856529091691')\nassert(solution('69') == '227979458109829569985699155')\nassert(solution('70') == '706827982279609565708140853')\nassert(solution('71') == '12363543822862034602428125')\nassert(solution('72') == '166307360580644426772207041')\nassert(solution('73') == '1110429002554379955608106750')\nassert(solution('74') == '4636159004796838455056301634')\nassert(solution('75') == '63380278326696069396140950500')\nassert(solution('76') == '89640082929490099386410947500')\nassert(solution('77') == '1770657060488034398616400745')\nassert(solution('78') == '4034972182482292323253907623')\nassert(solution('79') == '3014452743245503429461427758')\nassert(solution('80') == '4320026100619178541004765625')\nassert(solution('81') == '485559882568191319243026532')\nassert(solution('82') == '4369682988151255687744544134')\nassert(solution('83') == '5901431206957892272247627378')\nassert(solution('84') == '21992293203915892864683563')\nassert(solution('85') == '214428593133911237448503836')\nassert(solution('86') == '7234767062129660299626352347')\nassert(solution('87') == '215837709814376633905930858')\nassert(solution('88') == '2308692723187924299004369109')\nassert(solution('89') == '7792807445556724135678578296')\nassert(solution('90') == '5148035264864750674966902568')\nassert(solution('91') == '379389328006875138874369283')\nassert(solution('92') == '237"
    },
    {
        "number": 4592,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(factorial_counter(n) % int(pow(10, 9) + 7))\n\ndef"
    },
    {
        "number": 4592,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    factorial = 1\n    for i in range(1,N+1):\n        factorial = (factorial * i) % (10**9+7)\n    return str(factorial)"
    },
    {
        "number": 4592,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    factors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            if i * i!= n:\n                factors.append(n // i)\n    return str(len(factors))\n"
    },
    {
        "number": 4592,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            res *= i\n    res = res % 1000000007\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4592,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 1\n    for i in range(1, n + 1):\n        x = (x * i) % 1000000007\n    return str(x)"
    },
    {
        "number": 4592,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_fact = factorial(n)\n    divisors = 0\n    for i in range(1, n_fact + 1):\n        if n_fact % i == 0:\n            divisors += 1\n    return str(divisors)\n\n\ndef"
    },
    {
        "number": 4593,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    factors = []\n    for i in range(2, int(n **.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n    factors.append(int(n **.5))\n    factors.sort()\n    max_power = 0\n    for index, factor in enumerate(factors):\n        power = 1\n        for i in range(index + 1, len(factors)):\n            power *= factors[i]\n            if power > max_power:\n                max_power = power\n    return str(max_power)"
    },
    {
        "number": 4593,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    res = \"\"\n    n = int(stdin)\n    for i in range(2, n + 1):\n        if n % i == 0:\n            j = n // i\n            p = i\n            while j > 1:\n                if j % p == 0:\n                    j //= p\n                    p *= i\n                else:\n                    break\n            if j == 1 and p < n:\n                res = str(p)\n                break\n    return res"
    },
    {
        "number": 4593,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\")\n    9\n    >>> solution(\"14\")\n    13\n    >>> solution(\"1\")\n    1\n    \"\"\"\n    x = int(stdin)\n    b = 1\n    while x >= b:\n        x = x - b\n        b = b * 2\n    return b"
    },
    {
        "number": 4593,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    power = 1\n    while number >= 1:\n        if number**power == number:\n            return str(number**power)\n        power += 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4593,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return \"1\"\n    \n    max_n = n\n    for i in range(1, n):\n        if n % i == 0:\n            if pow(i, i) > n:\n                break\n            if pow(i, i) <= max_n:\n                max_n = pow(i, i)\n    \n    return str(max_n)\n\nassert(solution(input()) == \"9\")\n"
    },
    {
        "number": 4593,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 1\n    while ans**2 < n:\n        ans = ans * 2\n    return str(ans - 1)"
    },
    {
        "number": 4593,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    r = 0\n    n = 2\n    while x > 1:\n        if x % n == 0:\n            x /= n\n            r = n\n        else:\n            n += 1\n    return r\nprint(solution(input()))\n"
    },
    {
        "number": 4593,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    n = 1\n    while n * n <= x:\n        n *= 2\n    n -= 1\n    if n * n == x:\n        return str(n)\n    d = 2\n    while n * d <= x:\n        if n * d == x:\n            return str(n)\n        d += 1\n    return str(x)"
    },
    {
        "number": 4593,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4593,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for power in range(1, x + 1):\n        number = power ** power\n        if number <= x:\n            if number == x:\n                print(power)\n                return\n        else:\n            break\n"
    },
    {
        "number": 4594,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4594,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *l = [int(x) for x in stdin.split()]\n    return \"\".join(str(max(0, l.count(i) - 1)) for i in range(1, n + 1))"
    },
    {
        "number": 4594,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = [int(x) for x in stdin.split(\"\\n\")]\n    max_layers = 0\n    for i in range(n):\n        if i == 0:\n            max_layers += 1\n            continue\n        if i == n - 1:\n            max_layers = max(max_layers, d[i - 1] / 2)\n        else:\n            max_layers = max(max_layers, (d[i - 1] + d[i]) / 2)\n\n    return max_layers"
    },
    {
        "number": 4594,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the solution as a string\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    n, *diameters = [int(x) for x in stdin]\n    return str(solve(n, diameters))\n\ndef"
    },
    {
        "number": 4594,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4594,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    diameters = stdin.split('\\n')[0].split(' ')\n    return str(find_num_layers(int(diameters[0]), int(diameters[1]), int(diameters[2])))\n\ndef"
    },
    {
        "number": 4594,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    max_layers = 0\n    layers = 0\n    d = [int(d) for d in stdin.split('\\n')]\n    d.reverse()\n    for i in range(n):\n        if i == 0:\n            if d[i] > d[i + 1]:\n                layers += 1\n            else:\n                max_layers = max(max_layers, layers)\n                layers = 0\n        else:\n            if d[i] > d[i + 1]:\n                layers += 1\n            else:\n                max_layers = max(max_layers, layers)\n                layers = 0\n    max_layers = max(max_layers, layers)\n    return str(max_layers)"
    },
    {
        "number": 4594,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = [int(x) for x in stdin.split('\\n')[1:]]\n    return str(d.index(max(d))+2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4594,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    d = [int(x) for x in stdin.strip().split(\" \")]\n    memo = [0] * (n + 1)\n    memo[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            memo[i] = max(memo[i], memo[i - j] + 1)\n    return str(memo[n])"
    },
    {
        "number": 4594,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    d = list(map(int, stdin.readline().split(' ')))\n    d.insert(0, 0)\n    # dp = [0] * (N+1)\n    # for i in range(1, N+1):\n    #     dp[i] = max(dp[i-1], dp[i])\n    #     if i > 1:\n    #         if d[i-1] < d[i]:\n    #             dp[i] = dp[i-1] + 1\n    #         elif d[i-1] == d[i]:\n    #             dp[i] = dp[i-1]\n    # print(dp)\n    dp = [0] * (N+1)\n    for i in range(N, 0, -1):\n        dp[i] = max(dp[i+1], dp[i])\n        if i > 1:\n            if d[i-1] < d[i]:\n                dp[i] = dp[i+1] + 1\n            elif d[i-1] == d[i]:\n                dp[i] = dp[i+1]\n    print(dp[1])"
    },
    {
        "number": 4595,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:len(stdin) - 1]"
    },
    {
        "number": 4595,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('') == 0)\nassert(solution('A') == 1)\nassert(solution('AAAAAA') == 1)\nassert(solution('QWERTYASDFZXCV') == 5)\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\nSolution1\n\nTo solve the problem with a recursive approach, we can divide the problem into 2 parts:\n\n1. Determine how many elements are in the string S, since this is the base case for this problem.\n2. Determine how many elements are in the string S, starting from the first and last characters.\n\nTime Complexity: O(n)\nSpace Complexity: O(n)\n\n\"\"\"\n\n\"\"\"\nSolution2\n\nFor the base case, we can check whether each character in the string is A or Z.\nIf it is A, we have to increment the count.\nIf it is Z, we have to decrement the count.\nIf the count is zero, we have to return the number of characters.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4595,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lstrip('A').rstrip('Z')\n\nassert(solution('QWERTYASDFZXCV') == 'QWERTY')\nassert(solution('abcdef') == '')\nassert(solution('qwerty') == 'qwerty')\nassert(solution('ASDFZXCV') == 'ASDF')\nassert(solution('ASDFZXCVASDFZXCV') == 'ASDF')\nassert(solution('ASDFZXCVASDFZXCVA') == 'ASDF')\nassert(solution('QWERTYASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('ASDFZXCVASDFZXCVASDFZXCV') == 'ASDF')\nassert(solution('ASDFZXCVASDFZXCVASDFZXCVA') == 'ASDF')\nassert(solution('QWERTYASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVA') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVA') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVA') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVA') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDFZXCVAASDFZXCVAASDFZXCVASDFZXCV') == 'QWERTY')\nassert(solution('QWERTYASDFZXCVASDFZXCVAASDF"
    },
    {
        "number": 4595,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4595,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4595,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:stdin.find(\"A\")] + stdin[stdin.find(\"Z\")+1:]\n\nassert(solution(input()) == input())\n"
    },
    {
        "number": 4595,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()[7:8]\n\nassert(solution(SAMPLE_INPUT) == SAMPLE_OUTPUT)\nprint(solution(input()))\n\"\"\"\ndef"
    },
    {
        "number": 4595,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(len(stdin))"
    },
    {
        "number": 4595,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4595,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n\n'''\n\ndef"
    },
    {
        "number": 4596,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the maximum possible number of operations that Snuke can perform\n    >>> solution('8 12 40')\n    '2'\n    \"\"\"\n    _, *lst = list(map(int, stdin.split()))\n    return str(len(lst))"
    },
    {
        "number": 4596,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n\n    # Operate at most n-1 times\n    res = 0\n    curr = 0\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            curr += 1\n        else:\n            curr -= 1\n        res = max(res, curr)\n\n    return res"
    },
    {
        "number": 4596,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4596,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    a = stdin.strip().split()\n    a = [int(i) for i in a]\n    x = 0\n    for i in a:\n        x = max(x, i / 2)\n    print(x)"
    },
    {
        "number": 4596,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    nums = [int(num) for num in stdin[1].split()]\n    count = 0\n    for i in range(0, n):\n        if nums[i] % 2!= 0:\n            nums[i] = nums[i] // 2\n            count += 1\n    return count\n\"\"\"\ndef"
    },
    {
        "number": 4596,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    print(snuke(arr, n))\n\n\ndef"
    },
    {
        "number": 4596,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(\" \")]\n\n    # greedy approach\n    ret = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            ret += 1\n\n    return ret"
    },
    {
        "number": 4596,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = [int(x) for x in stdin.split(\" \")]\n\n    steps = 0\n\n    for i, v in enumerate(array):\n        if v % 2 == 1:\n            steps += i + 1\n\n    return str(steps)"
    },
    {
        "number": 4596,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    if N < 1 or N > 200:\n        print('1')\n    else:\n        A = list(map(int, lines[1].split()))\n        num_operations = 0\n        for num in A:\n            if num % 2 == 0:\n                num_operations += 1\n            else:\n                if num > A[0]:\n                    num_operations += 1\n                else:\n                    break\n        print(num_operations)"
    },
    {
        "number": 4596,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, *a = [int(x) for x in stdin.split()]\n    \n    max_ops = 0\n    \n    for i in range(1, n):\n        if a[i] % 2!= 0:\n            a[i] = a[i] // 2\n            max_ops += 1\n    \n    return str(max_ops)"
    },
    {
        "number": 4597,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    return str(pow(2, N) % 1000000007)"
    },
    {
        "number": 4597,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 1\n    while i <= N:\n        power = 1\n        while i!= 0:\n            power *= i\n            i -= 1\n        print(power % (10 ** 9 + 7))"
    },
    {
        "number": 4597,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    for i in range(1, n+1):\n        a = (a * i) % 10**9 + 7\n    return str(a)"
    },
    {
        "number": 4597,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(reduce(lambda x, y: x * y, map(int, stdin.split())))"
    },
    {
        "number": 4597,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    power = 1\n    for i in range(1, n + 1):\n        power = (power * i) % (10 ** 9 + 7)\n    return str(power)\n"
    },
    {
        "number": 4597,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(int(stdin), int(stdin)))"
    },
    {
        "number": 4597,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    return str(pow(2, N, 1000000007))"
    },
    {
        "number": 4597,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 1\n    for _ in range(n):\n        ans *= (n-_+1)\n    return str(ans % (10 ** 9 + 7))"
    },
    {
        "number": 4597,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    r = 1\n    for _ in range(x):\n        r = (r * (r + 1)) // 2\n    return str(r)"
    },
    {
        "number": 4597,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    return str(pow(2, stdin, 10**9) + 7)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4598,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N*(N+1)/2)"
    },
    {
        "number": 4598,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return str(n)\n"
    },
    {
        "number": 4598,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) / 2)"
    },
    {
        "number": 4598,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(int(n * (n + 1) / 2))\n    return \"\""
    },
    {
        "number": 4598,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().strip()\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4598,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n*(n+1)//2)\n"
    },
    {
        "number": 4598,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum([n, n-1, n-2]))\n\nprint(solution(input()))"
    },
    {
        "number": 4598,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    return str(int(N) * (int(N) + 1) / 2)"
    },
    {
        "number": 4598,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = 0\n    while N > 0:\n        ans += N // 2\n        N = N // 2\n    return str(ans)"
    },
    {
        "number": 4598,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N*(N+1)/2)"
    },
    {
        "number": 4599,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cards = stdin.split()\n    cards = list(map(int, cards))\n    A = sum(cards[:N])\n    B = sum(cards[N:])\n    return str(A - B)\n"
    },
    {
        "number": 4599,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4599,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cards = list(map(int, stdin.split()))\n    score_diff = 0\n    for i in range(N):\n        if i % 2 == 0:\n            score_diff += cards[i]\n    return str(score_diff)"
    },
    {
        "number": 4599,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *card = [int(line) for line in stdin.split('\\n')]\n    return str(sum(card) - sum(sorted(card)[::2]))"
    },
    {
        "number": 4599,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\")\n    0\n    \"\"\"\n    cards = stdin.strip().split()\n    return str(sum(int(card) for card in cards) - max(int(card) for card in cards))"
    },
    {
        "number": 4599,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def can_score(remaining: int) -> bool:\n        \"\"\"\n        Returns true if any winning hand of size remaining can be scored\n        \"\"\"\n        return any((remaining - a) * (remaining - b) == a + b\n                   for a in range(1, 10)\n                   for b in range(1, 10)\n                   if (a + b) < remaining)\n    N = int(stdin.readline())\n    for line in stdin:\n        A = [int(x) for x in line.split()]\n        remaining = sum(A)\n        if can_score(remaining):\n            return str(remaining - max(A))"
    },
    {
        "number": 4599,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4599,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4599,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4599,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nprint(solution(input()))\n\"\"\"\n\"\"\"\ndef"
    },
    {
        "number": 4600,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4600,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str()"
    },
    {
        "number": 4600,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    n, m = int(n), int(m)\n    acs, wacs = 0, 0\n    for _ in range(m):\n        ac, wa = stdin.split(' ')\n        if ac == 'AC':\n            acs += 1\n            if wa == 'AC':\n                wacs += 1\n    return f'{acs} {wacs}'"
    },
    {
        "number": 4600,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_ac, num_penalties, correct_answers, penalties = stdin.strip().split(' ')\n    correct_answers, penalties = int(correct_answers), int(penalties)\n\n    num_ac = int(num_ac)\n    num_penalties = int(num_penalties)\n    correct_answers = int(correct_answers)\n    penalties = int(penalties)\n\n    return '{} {}'.format(correct_answers, penalties)"
    },
    {
        "number": 4600,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4600,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    correct, penalties = 0, 0\n    for i in range(1, n + 1):\n        ac, wa = stdin.split()\n        if ac == wa:\n            correct += 1\n        else:\n            penalties += int(wa)\n    print(correct, penalties)"
    },
    {
        "number": 4600,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n\n    AC = 0\n    WA = 0\n\n    for _ in range(M):\n        p, s = stdin.split()\n        p, s = int(p), s\n\n        if s == 'AC':\n            AC += 1\n        else:\n            WA += 1\n\n    return f'{AC}\\n{WA}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4600,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here.\n    num_prob, num_submissions = map(int, stdin.strip().split())\n    probs_subs = [stdin.strip().split() for _ in range(num_submissions)]\n    correct_answers = [0]*num_prob\n    penalties = [0]*num_prob\n    for prob_sub in probs_subs:\n        if prob_sub[1] == \"AC\":\n            correct_answers[int(prob_sub[0])-1] += 1\n        elif prob_sub[1] == \"WA\":\n            penalties[int(prob_sub[0])-1] += int(prob_sub[2])\n    return''.join(map(str, correct_answers)) +'' +''.join(map(str, penalties))"
    },
    {
        "number": 4600,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    ac_by_problem = [0] * N\n    for _ in range(M):\n        problem, answer = stdin.split()\n        problem = int(problem) - 1\n        if answer == 'AC':\n            ac_by_problem[problem] += 1\n\n    ans = [str(ac_by_problem[i]) for i in range(N) if ac_by_problem[i] >= 1]\n    penalties = [str(ac_by_problem[i] - 1) for i in range(N) if ac_by_problem[i] >= 1]\n\n    print(' '.join(ans))\n    print(' '.join(penalties))"
    },
    {
        "number": 4600,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4601,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Args:\n        stdin:\n            N, K\n            H_1... H_N\n    Returns:\n        min_times:\n            An integer\n    '''\n    n, k = [int(x) for x in stdin.split()]\n    healths = [int(x) for x in stdin.split()]\n    healths.sort()\n    healths.reverse()\n    min_times = 0\n    for i, health in enumerate(healths):\n        if i < n - 1:\n            if health == 0:\n                healths[i] -= 1\n            else:\n                healths[i] -= 1\n                healths[i + 1] -= 1\n        else:\n            break\n    min_times = sum(healths)\n    return str(min_times)\n\n\ndef"
    },
    {
        "number": 4601,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(n) for n in stdin.split()]\n    healths = [int(n) for n in stdin.split()]\n    \n    result = 0\n    \n    for i in range(N):\n        healths[i] = healths[i] - 1\n    \n    while True:\n        max_health = max(healths)\n        \n        if max_health <= 0:\n            break\n        \n        if healths.count(max_health) == 1:\n            healths[healths.index(max_health)] = 0\n            result += 1\n        \n        else:\n            healths[healths.index(max_health)] = 0\n            \n            for i in range(N):\n                healths[i] = healths[i] - 1\n            \n            healths[healths.index(max_health)] = max_health - 1\n    \n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4601,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    H = list(map(int, stdin.strip().split()))\n    H.sort()\n\n    ans = 0\n    for i in range(N):\n        ans += H[i] // 2\n        H[i] %= 2\n\n    while K > 0:\n        ans -= 1\n        K -= 1\n\n        for i in range(N):\n            if H[i] == 0:\n                break\n            else:\n                H[i] -= 1\n\n    print(ans)"
    },
    {
        "number": 4601,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    n = [int(c) for c in stdin.split()]\n    return str(n[0] // max(1, n[0] - (k - 1)))"
    },
    {
        "number": 4601,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4601,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split(\" \")]\n    healths = [int(n) for n in stdin.split(\" \")]\n    healths.sort(reverse=True)\n    healths.sort(key=lambda health: (health % k, health))\n    attack = 0\n    for i, health in enumerate(healths):\n        if health == 0:\n            attack += 1\n            if attack == n:\n                break\n        elif health % k == 0:\n            attack += 1\n            if attack == n:\n                break\n        else:\n            attack += 1\n            if attack == n:\n                break\n    else:\n        return \"IMPOSSIBLE\"\n    return attack\n\nprint(solution(stdin.readline()))\n\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(\" \")]\n\n    healths = [int(i) for i in stdin.split(\" \")]\n\n    def win(attack: int, special: int) -> bool:\n        \"\"\"Return true if Fennec wins with a certain attack and special\"\"\"\n        return (\n            attack == 0 and special == 0\n            or attack >= healths[0]\n            and special > 0\n            or attack > 0 and special == 0\n        )\n\n    def fennec_wins(attack: int, special: int, healths: List[int]) -> bool:\n        \"\"\"Return true if Fennec wins with a certain attack and special\"\"\"\n        return win(attack, special) or any(\n            attack == 0 and special == 0 or attack >= healths[i] and special > 0\n            for i, health in enumerate(healths)\n        )\n\n    def fennec_wins_k_attack(attack: int, special: int, healths: List[int]) -> int:\n        \"\"\"Return true if Fennec wins with a certain attack and special\"\"\"\n        return max(attack - healths[0] + 1, 0) if special > 0 else attack\n\n    def attack(health: int) -> Tuple[int, int]:\n        \"\"\"Return the tuple (attack, special) with minimum attack and maximum attack\"\"\"\n        if health <= healths[0]:\n            return health, 0\n        attack, special = health - healths[0], 0\n        if healths[1] < health <= healths[2]:\n            return attack, special + 1\n        elif healths[2] < health <= healths[3]:\n            return attack, special + 2\n        elif healths[3] < health <= healths[4]:\n            return attack, special + 3\n        elif health >= healths[4]:\n            return attack, special + 4\n        else:\n            return attack, special\n\n    def attack_attack(healths: List[int]) -> Tuple[int, int]:\n        \"\"\"Return the tuple (attack, special) with minimum attack and maximum attack\"\"\"\n        return min(attack(health) for health in healths)\n\n    attack, special = attack_attack(healths)\n    return str(\n        max(\n            fennec_wins(attack_attack(healths)[0], special, healths),\n            fennec_wins(attack, special, healths),\n        )\n    )\n"
    },
    {
        "number": 4601,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    H = list(map(int, stdin.split()))\n\n    # We know that the total number of Attack that we can do is len(H) - 1\n    # If we know the number of Attack that we can do in total,\n    # we can get the number of Attack that we can do in a minimum of k time\n    # by doing min(k, len(H) - 1) attack,\n    # the remaining Attack that we can do is k - min(k, len(H) - 1)\n    # k is the number of Attack that we can do in a minimum of k time\n    # if we know the number of Attack that we can do in a minimum of k time,\n    # we can get the number of Attack that we can do in a minimum of k time\n    # by doing min(k, len(H) - 1) attack,\n    # the remaining Attack that we can do is k - min(k, len(H) - 1)\n    # k is the number of Attack that we can do in a minimum of k time\n    # then we can do min(k, len(H) - 1) attack,\n    # the remaining Attack that we can do is k - min(k, len(H) - 1)\n    # k is the number of Attack that we can do in a minimum of k time\n    # and so on,\n    # the number of Attack that we can do in a minimum of k time is:\n    # len(H) - 1\n    # so the number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is:\n    # min(k, len(H) - 1)\n\n    # The number of Attack that we can do in a minimum of k time is"
    },
    {
        "number": 4601,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    H = map(int, stdin.split())\n    H = sorted(H)\n    # print(H)\n    answer = 0\n    for i in range(0, len(H)):\n        if H[i] == 0:\n            return answer\n        if i + 1 < len(H):\n            if H[i+1] == 0:\n                if i == 0:\n                    answer += 1\n                else:\n                    answer += 1\n                    if H[i-1] == 0:\n                        answer += 1\n                    else:\n                        answer += 2\n            else:\n                if H[i-1] == 0:\n                    answer += 1\n                else:\n                    answer += 1\n                    if H[i-1] == 0:\n                        answer += 1\n                    else:\n                        answer += 2\n    return answer\n\nprint(solution(stdin.readline()))\n\"\"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4602,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    K = int(stdin[1])\n    x_positions = list(map(int, stdin.rstrip('\\n').split(' ')))\n    #print(N, K, x_positions)\n\n    min_distance = float('inf')\n    for i in range(N):\n        if x_positions[i] <= K:\n            min_distance = min(min_distance, x_positions[i])\n            #print(min_distance, i, x_positions[i])\n\n    return str(min_distance * 2)"
    },
    {
        "number": 4602,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n\n    x = [0] * n\n    for i in range(n):\n        x[i] = int(stdin.readline())\n\n    ans = 0\n    for i in range(n):\n        ans += min(x[i] + i, k + i + n - 1 - x[i])\n    return str(ans)"
    },
    {
        "number": 4602,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    if n.isdigit():\n        return str(2*int(n)**2)\n    else:\n        return \"Impossible\""
    },
    {
        "number": 4602,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K, x_0, y = [int(x) for x in stdin.split()]\n\n    y_coords = range(N)\n\n    x_coords = range(K)\n\n    x_coords.reverse()\n\n    x_coords.append(x_0)\n\n    print(sum(min(abs(x_0 - x), abs(x_0 - x_1), abs(x_0 - x_2), abs(x_0 - x_3), abs(x_0 - x_4)) for x in x_coords for y in y_coords))"
    },
    {
        "number": 4602,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    K = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split()]\n    return str(solution_helper(N, K, x))\n\ndef"
    },
    {
        "number": 4602,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    K = int(stdin.readline())\n    balls = []\n    for _ in range(N):\n        balls.append(int(stdin.readline()))\n\n    min_dist = float(\"inf\")\n    for x in range(N):\n        for y in range(N):\n            dist = abs(balls[x] - x) + abs(balls[y] - y)\n            min_dist = min(dist, min_dist)\n\n    return str(min_dist)\n\nprint(solution(stdin))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4602,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = int(stdin.readline())\n    points = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    # points = [[0, 1], [2, 3]]\n    print(solution_p1(n, k, points))\n\ndef"
    },
    {
        "number": 4602,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = int(stdin.readline())\n    numbers = stdin.readline().strip().split(' ')\n    return str(solution2(n, k, numbers))\n\ndef"
    },
    {
        "number": 4602,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    K = int(stdin.readline())\n    X = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    robots = []\n    for i in range(0, 2*N, 2):\n        robots.append((i, X[i], X[i+1]))\n\n    sorted(robots, key = lambda x: x[2])\n    min_distance = 0\n\n    for i in range(N):\n        min_distance += robots[i][2]\n\n    return str(min_distance)"
    },
    {
        "number": 4602,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4603,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n\n    for _ in range(T):\n        A, B, C, D = map(int, stdin.readline().strip().split(' '))\n        res = 0\n        if A:\n            res += A\n        if B:\n            res += B\n        if C:\n            res += C\n        if D:\n            res += D\n        print(res)\n    return ''\n"
    },
    {
        "number": 4603,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin[0]\n    B = stdin[1]\n    C = stdin[2]\n    D = stdin[3]\n    a = int(A)\n    b = int(B)\n    c = int(C)\n    d = int(D)\n    a_min = a/c\n    a_max = a/c * d\n    b_min = b/d\n    b_max = b/d * c\n    return min(a_min + b_min, a_max + b_max)"
    },
    {
        "number": 4603,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A <= B:\n        if C <= D:\n            return str(max(A, C) * 100)\n        return str(max(A, D) * 100)\n    return str(max(B, D) * 100)"
    },
    {
        "number": 4603,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    c = int(stdin.split()[2])\n    d = int(stdin.split()[3])\n    return str(min(a * d, a * c + b * d, a * c + b * c))"
    },
    {
        "number": 4603,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4603,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4603,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = [int(n) for n in stdin.split()]\n    return \"%.0f\" % (A*C + B*D)"
    },
    {
        "number": 4603,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(min(a*b*c*d, a*c*d, a*d, b*c*d, b*d, c*d))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4603,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4603,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    A, B, C, D = list(map(int, stdin.split()))\n    \n    minimum_total_fare = min(C, D) * A\n    \n    if D == 1:\n        return str(minimum_total_fare)\n    \n    return str(A + (minimum_total_fare - D))"
    },
    {
        "number": 4604,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    d = {}\n    for i in range(1, n):\n        d[i] = d.get(i - 1, 0) + abs(a[i - 1] - a[i])\n    s = sum(d.values())\n    return s % (10 ** 9 + 7)"
    },
    {
        "number": 4604,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    d = {}\n    for i in range(n):\n        diff = l[i] - i\n        if diff in d:\n            d[diff] += 1\n        else:\n            d[diff] = 1\n    res = 0\n    for i in range(n):\n        if i not in d:\n            res += 1\n        if i in d:\n            res *= d[i]\n    return str(res % (10**9+7))\n"
    },
    {
        "number": 4604,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_naive(stdin))\n\ndef"
    },
    {
        "number": 4604,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(num) for num in stdin.strip().split(' ')]\n\n    result = 1\n    for i in range(N - 1):\n        l = A[i]\n        r = A[i + 1]\n        diff = abs(l - r)\n        result *= ((N - diff) ** 2) % (10 ** 9 + 7)\n\n    return str(result)"
    },
    {
        "number": 4604,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    a = list(map(int, s))\n\n    count = 0\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4604,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split(\" \")\n    n = int(s[0])\n    a = list(map(int, s[1:]))\n    arr = [0]*(n+1)\n    for i in range(n):\n        arr[i+1] = arr[i] + abs(a[i] - a[i+1])\n    c = Counter(arr)\n    return str(c[min(c)] % (10**9+7))\n\nassert(solution('''5\n2 4 4 0 2''')) == '4'\nassert(solution('''1\n0''')) == '0'\nassert(solution('''10\n0 1 2 3 4 5 6 7 8 9 10''')) == '0'\n\nassert(solution('''2\n3 4 4 5 5''')) == '0'\nassert(solution('''2\n4 4 5 5 3''')) == '2'\nassert(solution('''2\n3 3 4 4 5''')) == '0'\nassert(solution('''2\n5 5 4 4 3''')) == '2'\nassert(solution('''2\n5 4 4 3 5''')) == '4'\nassert(solution('''2\n5 4 4 3 2''')) == '0'\n\nprint(solution('''4\n1 2 3 4'''))"
    },
    {
        "number": 4604,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    if N == 1:\n        return '0'\n\n    result = 1\n    for i in range(1, N):\n        result *= (A[i] - A[i-1] + 1)\n\n    return str(result % (10**9 + 7))"
    },
    {
        "number": 4604,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4604,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    A.sort()\n    orders = [1 for _ in range(N)]\n    for i in range(N):\n        orders[i] = orders[i] * (A[i] - A[i-1])\n    print(sum(orders))\n    return \"\""
    },
    {
        "number": 4604,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    # we should use a heap to store the indexes of the people to the left and right of the current person\n    left = []\n    right = []\n    for i in range(N):\n        # if there is a person to the left of the current person\n        if i > 0:\n            # if the difference between left and right is greater than the current person, then we should keep pushing the person to the right\n            while len(left) > 0 and A[i] - A[left[0]] > 0:\n                right.append(left.pop(0))\n            # if the difference is less than the current person, then we should push the person to the right\n            if A[i] - A[left[0]] < 0:\n                left.append(i)\n        else:\n            left.append(i)\n        # if there is a person to the right of the current person\n        if i < N-1:\n            # if the difference between left and right is greater than the current person, then we should keep pushing the person to the left\n            while len(right) > 0 and A[right[0]] - A[i] > 0:\n                left.append(right.pop(0))\n            # if the difference is less than the current person, then we should push the person to the left\n            if A[i] - A[right[0]] < 0:\n                right.append(i)\n        else:\n            right.append(i)\n    left.sort()\n    right.sort()\n    return str(len(left) * len(right))\n\n\ndef"
    },
    {
        "number": 4605,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    n = int(stdin[0])\n    a = int(stdin[1])\n    b = int(stdin[2])\n\n    def sum_digits(number: int) -> int:\n        res = 0\n        while number > 0:\n            res += number % 10\n            number //= 10\n        return res\n\n    result = 0\n    for i in range(1, n + 1):\n        if sum_digits(i) >= a and sum_digits(i) <= b:\n            result += i\n    return str(result)\n"
    },
    {
        "number": 4605,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(' ')]\n    sum = 0\n    for i in range(1, n + 1):\n        if a <= sum_of_digits(i) <= b:\n            sum += i\n    return str(sum)\n\n\ndef"
    },
    {
        "number": 4605,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n\n    def sum_digits(n: int) -> int:\n        return sum(int(c) for c in str(n))\n\n    total = 0\n    for n in range(1, N+1):\n        if sum_digits(n) >= A and sum_digits(n) <= B:\n            total += n\n    return total"
    },
    {
        "number": 4605,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4605,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    return str(sum(int(x) for x in stdin.split()[1:] if (int(x) > 0 and a <= int(x) <= b)))"
    },
    {
        "number": 4605,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4605,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4605,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _,a,b = map(int,stdin.split())\n    return str(sum(i for i in range(1,a+1) if len(str(i))==1 or int(str(i)[0])+int(str(i)[1])>=b))"
    },
    {
        "number": 4605,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.split()]\n    if A > 36 or A < 1 or B > 36 or B < 1:\n        return \"Error\"\n    return sum(x for x in range(1, N + 1) if sum(int(d) for d in str(x)) in range(A, B + 1))\n\n\nassert solution(\"20 2 5\") == \"84\"\nassert solution(\"5 1 4\") == \"5\"\nassert solution(\"5 1 14\") == \"14\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    total = sum([int(num) for num in str(n)])\n    return str(sum([num for num in range(1, n + 1) if total >= a and total <= b]))\n\nassert(solution(stdin) == stdin[:5])\n"
    },
    {
        "number": 4606,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 100:\n        return f'ABC{N}'\n    else:\n        return 'ABC{:03d}'.format(N)"
    },
    {
        "number": 4606,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'ABC{:03d}'.format(n)"
    },
    {
        "number": 4606,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.rstrip()\n    return f\"ABC{N}\""
    },
    {
        "number": 4606,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + str(int(stdin[1:]) + 100)"
    },
    {
        "number": 4606,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if n.isdigit():\n        n = int(n)\n        return chr(ord('A') + (n-1) // 3) + str(n-1) if n > 1 else 'A'\n    else:\n        return solution(n[2:]) + solution(n[1:]) + solution(n[0])"
    },
    {
        "number": 4606,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    abbreviation = 'ABC'\n    for round in range(2, N + 1):\n        abbreviation += '0' + str(round)\n    return abbreviation"
    },
    {
        "number": 4606,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 100):\n        if n == n//100*100 + n//10*10 + n%10:\n            return \"ABC{}\".format(i)\n    else:\n        return \"ABC{}\".format(n)\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4606,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ans = 'ABC'\n    for _ in range(n - 1):\n        ans += '0'\n    ans += '1'\n    return ans"
    },
    {
        "number": 4606,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return ABC[n - 1]"
    },
    {
        "number": 4606,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 'ABC'\n    elif n == 1:\n        return 'AB'\n    elif n == 2:\n        return 'A'\n    elif n == 3:\n        return 'AB'\n    elif n == 4:\n        return 'ABC'\n    elif n == 5:\n        return 'AB'\n    elif n == 6:\n        return 'AB'\n    elif n == 7:\n        return 'ABC'\n    elif n == 8:\n        return 'AB'\n    elif n == 9:\n        return 'A'\n    else:\n        return 'ABC' + str(n - 1)"
    },
    {
        "number": 4607,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    days = 0\n    for year in range(2018, a, -1):\n        days += 366 if year % 4 == 0 and year % 100!= 0 or year % 400 == 0 else 365\n    for month in range(1, b):\n        days += 31\n    return days"
    },
    {
        "number": 4607,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(\" \"))\n    count = 0\n    for year in range(2018, a, -1):\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            if (b == 29):\n                count += sum(1 for i in range(1, b + 1) if (i == 2 or i == 4 or i == 6 or i == 9 or i == 11))\n            else:\n                count += sum(1 for i in range(1, b + 1) if (i == 1 or i == 3 or i == 5 or i == 7 or i == 8 or i == 10))\n        else:\n            if (b == 28):\n                count += sum(1 for i in range(1, b + 1) if (i == 2 or i == 4 or i == 6 or i == 9 or i == 11))\n            else:\n                count += sum(1 for i in range(1, b + 1) if (i == 1 or i == 3 or i == 5 or i == 7 or i == 8 or i == 10))\n    return str(count)"
    },
    {
        "number": 4607,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    date1, date2 = stdin.split(' ')\n    date1 = [int(x) for x in date1.split('-')]\n    date2 = [int(x) for x in date2.split('-')]\n    days = 0\n    for i in range(date1[0], date2[0] + 1):\n        for j in range(1, date2[1] + 1):\n            if j == date1[1] and i == date1[0]:\n                days += 1\n            elif i == date2[0] and j == date2[1]:\n                days += 1\n    return str(days)"
    },
    {
        "number": 4607,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.strip().split()\n    a, b = int(a), int(b)\n    delta = b - a + 1\n    res = sum(1 for i in range(1, delta) if (i == 1 or (i == 2 and a % 10 == b % 10) or i == 3 and a % 10 == b % 10))\n    print(res)"
    },
    {
        "number": 4607,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = 0\n    for i in range(1, a):\n        if i == 1:\n            if b == 1:\n                result += 31\n            elif b == 2:\n                result += 29\n            else:\n                result += 31\n        elif i == 2:\n            if b == 1:\n                result += 31\n            elif b == 2:\n                result += 29\n            else:\n                result += 31\n        else:\n            if b == 1:\n                result += 31\n            elif b == 2:\n                result += 29\n            else:\n                result += 31\n    return str(result)"
    },
    {
        "number": 4607,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    date = '2018-'\n    \n    for i in range(a - 1, b):\n        if i!= 0:\n            date += str(i)\n            if i == 1:\n                date += '-1'\n            elif i == 2:\n                date += '-2'\n            elif i == 3:\n                date += '-3'\n            elif i == 4:\n                date += '-4'\n            elif i == 5:\n                date += '-5'\n            elif i == 6:\n                date += '-6'\n            elif i == 7:\n                date += '-7'\n            elif i == 8:\n                date += '-8'\n            elif i == 9:\n                date += '-9'\n            elif i == 10:\n                date += '-10'\n            elif i == 11:\n                date += '-11'\n            elif i == 12:\n                date += '-12'\n    \n    return date\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4607,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return sum(1 for i in range(a, b+1) if (i == 1) or (i == 2) or (i == 3) or (i == 4) or (i == 5) or (i == 6) or (i == 7) or (i == 8) or (i == 9) or (i == 10) or (i == 11) or (i == 12) or (i == 13) or (i == 14) or (i == 15) or (i == 16) or (i == 17) or (i == 18) or (i == 19) or (i == 20) or (i == 21) or (i == 22) or (i == 23) or (i == 24) or (i == 25) or (i == 26) or (i == 27) or (i == 28) or (i == 29) or (i == 30) or (i == 31))"
    },
    {
        "number": 4607,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a, b = int(a), int(b)\n    days = 0\n    for i in range(1, a):\n        for j in range(1, b):\n            if i == j:\n                days += 1\n    return str(days)"
    },
    {
        "number": 4607,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split()]\n    return str(len([1 for y in range(1, b + 1) if y == y * y]))"
    },
    {
        "number": 4607,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4608,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    cnt = 0\n    while len(a) > 1:\n        b = a[1:]\n        cnt += b.index(min(b)) + 1\n        b[b.index(min(b))] = max(b) + 1\n        a = b\n    if a[0] == 1:\n        return -1\n    else:\n        return cnt"
    },
    {
        "number": 4608,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\ndef"
    },
    {
        "number": 4608,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    N = a[0]\n    if N == 2 and a[1] == 1:\n        return -1\n    a = a[2:]\n    l = 1\n    i = 1\n    while l < len(a) - 1:\n        if a[l] < a[l - 1]:\n            l += 1\n        if a[l] > a[l - 1]:\n            i += 1\n            l += 1\n    return i"
    },
    {
        "number": 4608,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n < 2 or n > 10 ** 5:\n        return -1\n\n    a = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    if a[0] > n:\n        return -1\n\n    b = []\n    for i in range(n):\n        if i!= a[i - 1]:\n            b.append(i)\n    if len(b) == 0:\n        return 0\n\n    return len(a) - len(b)"
    },
    {
        "number": 4608,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = [0] * N\n    c = [0] * N\n    c[0] = 1\n    for i in range(N):\n        b[a[i] - 1] = 1\n    for i in range(N):\n        if b[i] == 0:\n            c[i] = 0\n        else:\n            c[i] = c[i - 1] + 1\n            if i > 0 and b[i - 1] == 1 and b[i] == 0:\n                c[i] = 0\n    return -1 if c[N - 1] == 0 else c[N - 1]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4608,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = sorted(int(stdin.readline()) for _ in range(n))\n    if n == 2:\n        if a[0]!= a[1]:\n            return -1\n        else:\n            return 0\n    else:\n        a[1] += 1\n        for i in range(2, n):\n            if a[i]!= a[i-1] + 1:\n                return -1\n            a[i] += 1\n        return a[n-1]"
    },
    {
        "number": 4608,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    if n == 0:\n        return '-1'\n\n    a[0] -= 1\n    i = 0\n    c = 0\n    if a[0] == 0:\n        c += 1\n\n    for i in range(n):\n        if a[i]!= i:\n            a[a[i]] = a[i]\n            c += 1\n        if a[i] == 0:\n            c += 1\n    print(c)"
    },
    {
        "number": 4608,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 0: return '-1'\n    nums = [int(x) for x in stdin.readline().strip().split(' ')]\n    if nums[0] == 2:\n        return '-1'\n    nums.sort()\n    light = nums[0]\n    for i in range(1, n):\n        if nums[i]!= light:\n            light = nums[i]\n    nums.sort(reverse=True)\n    for i in range(1, n):\n        if nums[i]!= light:\n            break\n    return str(i)"
    },
    {
        "number": 4608,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    c = 0\n    s = set()\n    for i in range(1, n):\n        if a[i] not in s:\n            s.add(a[i])\n            c += 1\n        elif a[a[i]]!= a[i]:\n            c += 1\n    return str(c-1) if c > 1 else '-1'"
    },
    {
        "number": 4608,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    lighten_up = 0\n    for button in a:\n        if button == 1:\n            lighten_up += 1\n    if 2 in a:\n        print(-1)\n    else:\n        print(lighten_up)"
    },
    {
        "number": 4609,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    S = []\n    for i in range(N):\n        S.append(int(stdin.readline().strip()))\n    sum_value = 0\n    for i in range(N):\n        sum_value += S[i]\n    for i in range(N):\n        if (sum_value - S[i]) % 10 == 0:\n            sum_value -= S[i]\n            S[i] = 0\n        else:\n            S[i] = (sum_value - S[i]) % 10\n            sum_value -= S[i]\n    return str(sum(S))"
    },
    {
        "number": 4609,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4609,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4609,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    count = 0\n    for i in range(N):\n        if A[i] == i + 1:\n            count += 1\n            A[i] = 0\n    return str(count)\n\nprint(solution(stdin.read()))\n\"\"\"\n"
    },
    {
        "number": 4609,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(x) for x in stdin.split()]\n    # A[i] is the number to be erased\n    # A[i] is erased if it is not written on the sheet\n    # If A[i] is not erased, it is written on the sheet\n    # Count is the number of numbers written on the sheet\n    count = 0\n    for i in range(N):\n        a = A[i]\n        if a not in A:\n            count += 1\n        else:\n            A.remove(a)\n    return str(count)"
    },
    {
        "number": 4609,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    a = a.split(\":\")\n    a = [int(i) for i in a]\n    a.sort()\n    b = stdin.readline().strip()\n    b = b.split(\":\")\n    b = [int(i) for i in b]\n    b.sort()\n    if a == b:\n        return str(0)\n    else:\n        count = 0\n        for i in range(n):\n            if a[i] in b:\n                count += 1\n                b.remove(a[i])\n        return str(count)"
    },
    {
        "number": 4609,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    size: int = int(stdin[0])\n    numbers: list = [int(x) for x in stdin[1:].split(\":\")]\n    cleaned: list = []\n    for number in numbers:\n        if number not in cleaned:\n            cleaned.append(number)\n    print(len(cleaned))"
    },
    {
        "number": 4609,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    list_of_numbers = list(map(int, stdin.readline().strip().split()))\n    end = n\n    for number in list_of_numbers:\n        if number in list_of_numbers:\n            list_of_numbers.remove(number)\n        else:\n            end -= 1\n    return str(end)"
    },
    {
        "number": 4609,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4609,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.rstrip('\\n').split('\\n')\n    l = [int(i) for i in s]\n    c = len(l)\n    for i in range(n):\n        l.sort()\n        if l[0] in l:\n            l.remove(l[0])\n            c -= 1\n        else:\n            l[0] = l[0] + 1\n        l.sort()\n    return str(c)"
    },
    {
        "number": 4610,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    balls = [int(x) for x in stdin.split()]\n\n    nums = {}\n\n    for i in range(n):\n        num = balls[i]\n\n        if num not in nums:\n            nums[num] = 0\n\n        nums[num] += 1\n\n    return min(nums.values())\n\"\"\"\n\nn, k = [int(x) for x in stdin.split()]\nballs = [int(x) for x in stdin.split()]\n\nnums = {}\n\nfor i in range(n):\n    num = balls[i]\n\n    if num not in nums:\n        nums[num] = 0\n\n    nums[num] += 1\n\nprint(min(nums.values()))\n"
    },
    {
        "number": 4610,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    A = [int(n) for n in stdin.split()]\n    A = sorted(A)\n    min_diff = float('inf')\n    for i in range(n - k + 1):\n        min_diff = min(min_diff, abs(A[i + k - 1] - A[i]))\n    return min_diff\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    return str(result)"
    },
    {
        "number": 4610,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    answer = 0\n    for i in range(n):\n        if a.count(a[i]) == 1:\n            answer += 1\n    return answer"
    },
    {
        "number": 4610,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # The first line contains an integer T denoting the number of test cases.\n    # The T test cases follow.\n    # Each test case contains three lines.\n    # The first line contains an integer N, the number of balls.\n    # The second line contains N space separated integers A_1, A_2,..., A_N,\n    # describing the initial state of the balls.\n    # The third line contains an integer K, the maximum number of integers to be written on a ball.\n    # Output\n    # For each test case, output a single line containing the answer to the problem.\n    num_cases = int(stdin)\n    for _ in range(num_cases):\n        N, K = [int(x) for x in stdin.split()]\n        A = [int(x) for x in stdin.split()]\n        total_balls = 0\n        for i in range(N):\n            if len(set([A[i]])) > K:\n                total_balls += 1\n        print(total_balls)"
    },
    {
        "number": 4610,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5 2''')\n    '1'\n    '''\n    N, K = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n\n    counts = [0] * N\n    for i in range(N):\n        counts[A[i] - 1] += 1\n\n    result = N\n    for i in range(N):\n        if counts[i] <= K - 1:\n            result -= 1\n        elif K - 1 < counts[i] < K:\n            result -= 1\n            K -= 1\n\n    return str(result)"
    },
    {
        "number": 4610,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4610,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takahashi has N balls. Initially, an integer A_i is written on the i-th ball.\n    He would like to rewrite the integer on some balls so that there are at most K different integers written on the N balls.\n    Find the minimum number of balls that Takahashi needs to rewrite the integers on them.\n    '''\n    n, k = [int(num) for num in stdin.split()]\n    a = [int(num) for num in stdin.split()]\n\n    num_balls = len(a)\n    for i in range(num_balls):\n        if a[i] > k:\n            a[i] = k\n\n    unique = set()\n    for num in a:\n        unique.add(num)\n\n    return max(unique)\n\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('10 2') == 2)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('5 2') == 1)\nassert(solution('"
    },
    {
        "number": 4610,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def split_input(s: str) -> tuple:\n        return tuple(map(int, s.split()))\n\n    N, K = split_input(stdin.readline())\n    A = tuple(map(int, stdin.readline().split()))\n\n    return str(min(sum(a) for a in itertools.combinations(A, K)))"
    },
    {
        "number": 4610,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    res = 0\n    j = 0\n    for i in range(N):\n        while j < N and a[j] == i + 1:\n            j += 1\n        if j - i > K:\n            res += 1\n    return str(res)"
    },
    {
        "number": 4611,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4611,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4611,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    pairs = [list(map(int, line.split())) for line in stdin.readlines()]\n    \n    for pair in pairs:\n        x = pair[0]\n        y = pair[1]\n        if y == x:\n            continue\n        \n        if y == 0 or y == N - 1 or x == 0 or x == N - 1:\n            return 'No'\n            \n        if not (y - 1) % (N - 1) and not (y + 1) % (N - 1) and not (x - 1) % (N - 1) and not (x + 1) % (N - 1):\n            return 'No'\n            \n    return 'Yes'\n\nprint(solution('5\\n4 1 2\\n6 1 1'))\nprint(solution('5\\n1 2 3\\n3 1 3\\n5 2 4\\n6 3 5'))\nprint(solution('5\\n1 1 1\\n1 1 1\\n1 1 1\\n1 1 1'))\nprint(solution('3\\n1 1 1\\n2 1 1\\n3 1 1'))\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    N = int(inputs[0].strip())\n    t = [int(x.strip()) for x in inputs[1].strip().split(\" \")]\n    x = [int(x.strip()) for x in inputs[2].strip().split(\" \")]\n    y = [int(x.strip()) for x in inputs[3].strip().split(\" \")]\n    \n    return \"Yes\" if sorted(x) == sorted(y) else \"No\""
    },
    {
        "number": 4611,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print('Yes' if not solve(stdin) else 'No')\n\ndef"
    },
    {
        "number": 4611,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    plan = []\n    for _ in range(n):\n        plan.append(list(map(int, stdin.readline().strip().split(\" \"))))\n    \n    x_a, y_a, x_b, y_b = plan[0]\n    ans = \"Yes\" if (x_a, y_a) == (x_b, y_b) else \"No\"\n    for i in range(1, n):\n        x_a, y_a, x_b, y_b = plan[i]\n        if (x_a, y_a) == (x_b, y_b):\n            ans = \"No\"\n        elif (x_a, y_a) == (x_a + 1, y_a):\n            ans = \"Yes\"\n        elif (x_a, y_a) == (x_a - 1, y_a):\n            ans = \"Yes\"\n        elif (x_a, y_a) == (x_a, y_a + 1):\n            ans = \"Yes\"\n        elif (x_a, y_a) == (x_a, y_a - 1):\n            ans = \"Yes\"\n    return ans"
    },
    {
        "number": 4611,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = stdin.count('\\n') + 1\n    for _ in range(T):\n        N = int(stdin.readline())\n        ti, xi, yi = map(int, stdin.readline().split())\n        print('Yes' if max(N-1, 0) <= max(xi, yi) else 'No')"
    },
    {
        "number": 4611,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4611,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip().split(\"\\n\")\n    N = int(N[0])\n    x1, y1, x2, y2 = map(int, stdin.strip().split(\"\\n\")[1].strip().split())\n    x3, y3, x4, y4 = map(int, stdin.strip().split(\"\\n\")[2].strip().split())\n    if x1 == x2:\n        if (y3-y1)*(y4-y2) > 0:\n            return \"Yes\"\n    if y1 == y2:\n        if (x3-x1)*(x4-x2) > 0:\n            return \"Yes\"\n    if (x1 == x2 == 0) or (y1 == y2 == 0) or (x3 == x4) or (y3 == y4):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4612,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a/2+b/2))"
    },
    {
        "number": 4612,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b = map(int, stdin.split(' '))\n    print(int(a / (a + b) + 0.5))"
    },
    {
        "number": 4612,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(num) for num in stdin.split()]\n    print(int((a + b) / 2))\n    return \"\""
    },
    {
        "number": 4612,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    return str(int(round((float(a) + float(b)) / 2)))"
    },
    {
        "number": 4612,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(int(a + b) // 2)"
    },
    {
        "number": 4612,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    return str(int((a + b) / 2) + 1)"
    },
    {
        "number": 4612,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(int((a + b) / 2))\n\nassert solution('1 3') == '2'\nassert solution('1 1') == '1'\nassert solution('3 2') == '3'\nassert solution('3 9') == '5'\nassert solution('9 9') == '10'\nassert solution('11 11') == '11'\nassert solution('17 17') == '17'\nassert solution('11 12') == '12'\n\"\"\"\ndef"
    },
    {
        "number": 4612,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a * b / (a + b)))"
    },
    {
        "number": 4612,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(num) for num in stdin.split()]\n    x = (a + b) / 2\n    return str(int(x + 0.5))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4612,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split(' ')]\n    print(int((a + b) / 2))\n"
    },
    {
        "number": 4613,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split(\" \")))\n    edges = [list(map(int, line.split(\" \"))) for line in stdin.rstrip(\"\\n\").split(\"\\n\")]\n    return str(find_bridges(N, M, edges))\n\ndef"
    },
    {
        "number": 4613,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(\" \")]\n    graph = nx.Graph()\n    graph.add_edges_from(list(zip(range(1, n+1), range(1, n+1))))\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.strip().split(\" \")]\n        graph.add_edge(a, b)\n\n    return str(len(nx.bridges(graph)))\n"
    },
    {
        "number": 4613,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    graph = defaultdict(list)\n    N, M = [int(x) for x in stdin.split()]\n    for i in range(M):\n        a, b = [int(x) for x in stdin.split()]\n        graph[a].append(b)\n        graph[b].append(a)\n    bridges = 0\n    for a in graph:\n        for b in graph[a]:\n            if b in graph[a]:\n                bridges += 1\n                break\n    return str(bridges)"
    },
    {
        "number": 4613,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    graph = defaultdict(list)\n    for i in range(1, M+1):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    bridges = 0\n    for i in range(1, M+1):\n        for j in range(i+1, M+1):\n            if i == j:\n                continue\n            if graph[i] == graph[j]:\n                bridges += 1\n    return str(bridges)"
    },
    {
        "number": 4613,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split(\" \")\n    N, M = int(N), int(M)\n    edges = [tuple(map(int, stdin.split(\" \"))) for _ in range(M)]\n    graph = [[] for _ in range(N)]\n    for edge in edges:\n        a, b = edge\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n    n_bridges = 0\n    for i in range(len(graph)):\n        if i == 0:\n            continue\n        for j in range(len(graph[i])):\n            if graph[i][j] == 0:\n                continue\n            for k in range(len(graph[graph[i][j]])):\n                if graph[graph[i][j]][k] == i:\n                    n_bridges += 1\n                    break\n    return n_bridges\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = [tuple(map(int, stdin.split())) for _ in range(m)]\n    return str(count_bridge(l))\n\ndef"
    },
    {
        "number": 4613,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert [solution(line) for line in SAMPLE_INPUTS] == SAMPLE_OUTPUTS\n"
    },
    {
        "number": 4613,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split()))\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = tuple(map(int, stdin.split()))\n        a, b = a - 1, b - 1\n        adj[a].append(b)\n        adj[b].append(a)\n    bridges = 0\n    for i in range(n):\n        if not bridges:\n            visited = [False] * n\n            bfs(adj, i, visited)\n            bridges += visited.count(False)\n    return str(bridges)\n\n\ndef"
    },
    {
        "number": 4613,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_helper(stdin))\n\ndef"
    },
    {
        "number": 4613,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[int(i) for i in stdin.split()] for _ in range(m)]\n    nodes = [i for i in range(1, n + 1)]\n    edges.sort(key=lambda e: e[1])\n    for edge in edges:\n        if edge[0] == edge[1]:\n            continue\n        else:\n            if edge[0] not in nodes:\n                nodes.append(edge[0])\n            if edge[1] not in nodes:\n                nodes.append(edge[1])\n    nodes.sort()\n    return str(nodes.index(edge[0]) - nodes.index(edge[1]) - 1)"
    },
    {
        "number": 4614,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, c = [int(x) for x in stdin.split()]\n    if a == b and b!= c:\n        return c\n    elif a == c and c!= b:\n        return b\n    elif b == c and c!= a:\n        return a\n    elif a!= b and b!= c and a!= c:\n        return -1\n    else:\n        raise AssertionError()\n"
    },
    {
        "number": 4614,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = tuple(int(x) for x in stdin.split(\" \"))\n    if A == B:\n        if C!= A:\n            return str(C)\n        else:\n            return \"No other integer\"\n    elif B == C:\n        if A!= B:\n            return str(A)\n        else:\n            return \"No other integer\"\n    elif A == C:\n        if B!= A:\n            return str(B)\n        else:\n            return \"No other integer\"\n    else:\n        return str(A)\n\n\nassert(solution(\"5 7 5\") == \"7\")\nassert(solution(\"1 2 2\") == \"3\")\nassert(solution(\"-1 -1 -1\") == \"1\")\nassert(solution(\"5 7 5\") == \"7\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 9\") == \"9\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution(\"3 3 3\") == \"No other integer\")\nassert(solution(\"-3 -3 -3\") == \"-3\")\nassert(solution(\"-5 -7 -9\") == \"-5\")\nassert(solution(\"5 7 8\") == \"8\")\nassert(solution(\"5 7 7\") == \"7\")\nassert(solution"
    },
    {
        "number": 4614,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    *_, a, b, c = (int(x) for x in stdin.split())\n    return \"\".join(f\"{chr(ord(x)^y)}\" for x, y in zip(sorted([a, b, c]), sorted((a, b, c))))"
    },
    {
        "number": 4614,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(s) for s in stdin.split()]\n    \n    if a!= b and a!= c and b!= c:\n        return str(a)\n    elif a!= b and a == c:\n        return str(a)\n    elif a == b and b!= c:\n        return str(b)\n    elif a == c and b!= a:\n        return str(b)\n    elif b!= c and b == c:\n        return str(b)\n    elif b!= c and a!= c:\n        return str(c)\n    else:\n        return \"No one\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4614,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split()))\n    if A == B:\n        return C\n    if B == C:\n        return A\n    if A == C:\n        return B\n    return A"
    },
    {
        "number": 4614,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The problem is basically to find the first different integer from the 3 integers\n    that are given. Then, we have to check if we have the same integer and the other\n    integer is the rest, then we have to print the other integer, and if we don't,\n    we can print the same integer.\n    '''\n    \n    # Read input data\n    A, B, C = [int(x) for x in stdin.split(' ')]\n    \n    # Generate the list of integers\n    lst = [A, B, C]\n    \n    # We check for the first integer that is different from the rest\n    for i in range(1, len(lst)):\n        \n        # If we have the same integer, we check for the other integer\n        if lst[0] == lst[i]:\n            \n            # If the other integer is the same as the rest, we print the other integer\n            if lst[1] == lst[i]:\n                print(lst[2])\n                return\n            \n            # If the other integer is not the same as the rest, we print the same integer\n            else:\n                print(lst[0])\n                return\n    \n    # If we didn't find the first integer that is different from the rest, we print the same integer\n    print(lst[0])"
    },
    {
        "number": 4614,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4614,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.strip().split(\" \")[2]) - sum([int(stdin.strip().split(\" \")[0], int(stdin.strip().split(\" \")[1], int(stdin.strip().split(\" \")[2]))))"
    },
    {
        "number": 4614,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.strip().split(\" \"))\n    \n    return str((A*B*C) - (B*C) - (A*C) + (B*B))\n\nassert(solution(\"-3 3 2\") == \"2\")\nassert(solution(\"2 -3 -2\") == \"3\")\nassert(solution(\"-3 -2 -1\") == \"-1\")\nassert(solution(\"1 2 3\") == \"1\")\nassert(solution(\"1 2 -1\") == \"2\")\nassert(solution(\"-1 -2 -3\") == \"-1\")\nassert(solution(\"1 3 2\") == \"2\")\nassert(solution(\"-1 2 -2\") == \"1\")\nassert(solution(\"-1 -2 -3\") == \"-3\")\nassert(solution(\"-1 2 -2\") == \"1\")\nassert(solution(\"-1 -2 -3\") == \"-3\")\nassert(solution(\"2 2 2\") == \"0\")\nassert(solution(\"2 2 1\") == \"1\")\nassert(solution(\"-3 -1 -1\") == \"-1\")\nassert(solution(\"-3 -1 1\") == \"-1\")\nassert(solution(\"-3 1 -1\") == \"1\")\nassert(solution(\"-3 1 1\") == \"0\")\nassert(solution(\"-2 -2 -2\") == \"0\")\nassert(solution(\"-2 -2 1\") == \"1\")\nassert(solution(\"-2 1 -2\") == \"1\")\nassert(solution(\"-2 1 1\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"1\")\nassert(solution(\"0 1 1\") == \"0\")\nassert(solution(\"1 1 1\") == \"0\")\nassert(solution(\"1 1 0\") == \"1\")\nassert(solution(\"1 0 1\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"2 2 2\") == \"0\")\nassert(solution(\"2 2 1\") == \"1\")\nassert(solution(\"2 1 2\") == \"1\")\nassert(solution(\"2 1 1\") == \"0\")\nassert(solution(\"-2 -2 -2\") == \"0\")\nassert(solution(\"-2 -2 1\") == \"1\")\nassert(solution(\"-2 1 -2\") == \"1\")\nassert(solution(\"-2 1 1\") == \"0\")\nassert(solution(\"-3 -1 -1\") == \"0\")\nassert(solution(\"-3 -1 1\") == \"1\")\nassert(solution(\"-3 1 -1\") == \"1\")\nassert(solution(\"-3 1 1\") == \"0\")\nassert(solution(\"-1 -2 -2\") == \"0\")\nassert(solution(\"-1 -2 1\") == \"1\")\nassert(solution(\"-1 1 -2\") == \"1\")\nassert(solution(\"-1 1 1\") == \"0\")\nassert(solution(\"0 0 0\") == \"0\")\nassert(solution(\"0 0 1\") == \"1\")\nassert(solution(\"0 1 0\") == \"1\")\nassert(solution(\"0 1 1\") == \"0\")\nassert(solution(\"1 1 1\") == \"0\")\nassert(solution(\"1 1 0\") == \"1\")\nassert(solution(\"1 0 1\") == \"1\")\nassert(solution(\"1 0 0\") == \"0\")\nassert(solution(\"2 2 2\") == \"0\")\nassert(solution(\"2 2 1\") == \"1\")\nassert(solution(\"2 1 2\") == \"1\")\nassert(solution(\"2 1 1\") == \"0\")\nassert(solution(\"-2 -2 -2\") == \"0\")\nassert(solution(\"-2 -2 1\") == \"1\")\nassert(solution(\"-2 1 -2\") == \"1\")\nassert(solution(\"-2 1 1\") == \"0\")\nassert(solution(\"-1 -1 -1\") == \"0\")\nassert(solution(\"-1 -1 1\") == \"1\")\nassert(solution(\"-1 1 -1\") == \"1\")\nassert(solution(\"-1 1 1\") == \"0\")\n"
    },
    {
        "number": 4614,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split(\" \")[2]) - int(stdin.split(\" \")[0]) % int(stdin.split(\" \")[1]))"
    },
    {
        "number": 4615,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4615,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    split_input = stdin.split(\" \")\n    A = int(split_input[0])\n    B = int(split_input[1])\n    C = int(split_input[2])\n    D = int(split_input[3])\n    E = int(split_input[4])\n    F = int(split_input[5])\n    \n    water = 100*A + 100*B\n    sugar = 100*C + 100*D\n    max_water = 100*F\n    \n    # We cannot have more than 100 grams of water and more than 3 grams of sugar\n    if water > max_water or sugar > 3*max_water:\n        return \"impossible\"\n    \n    if water < max_water:\n        return str(max_water - water) + \" \" + str(sugar - (max_water - water))\n    \n    # We can have the desired water and sugar density\n    else:\n        return str(sugar)\n    \n    \nassert (solution(\"1 2 10 20 15 200\") == \"110 10\")\nassert (solution(\"1 2 10 40 15 200\") == \"impossible\")\nassert (solution(\"1 2 10 40 15 200\") == \"110 10\")\nassert (solution(\"1 2 10 40 15 100\") == \"110 10\")\nassert (solution(\"1 2 10 40 15 400\") == \"110 10\")\n"
    },
    {
        "number": 4615,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = list(map(int, stdin.split()))\n    E_water = F - E\n    A_water = A * (E_water / E)\n    B_water = B * (E_water / E)\n    C_sugar = C\n    D_sugar = D\n    if E_water % E > 0:\n        C_sugar += E_water % E\n    if E_water % E > 0:\n        D_sugar += E_water % E\n    if (A_water + B_water) <= C_sugar and (C_sugar + D_sugar) <= F:\n        return str(A_water + B_water) + \" \" + str(C_sugar + D_sugar)\n    else:\n        return \"IMPOSSIBLE\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4615,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    max_mass = E // (A + B)\n    max_density = max_mass // (C + D)\n    while max_density < F:\n        max_mass += 1\n        max_density = max_mass // (C + D)\n    print(max_mass, max_mass - max_density * (C + D))"
    },
    {
        "number": 4615,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    sugar_water = (A * 100 + B) * (C + D) / (A + B)\n    sugar_dissolved = (C * E + D * F) / (C + D)\n    if sugar_dissolved < sugar_water:\n        sugar_water -= sugar_dissolved\n    print(sugar_water, sugar_dissolved)"
    },
    {
        "number": 4615,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4615,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    sugar_water = [100*B/(A+B), 100*C/(A+C)]\n    sugar_dissolved = [100*D/(A+D), 100*E/(A+E)]\n    print(max(sugar_water), max(sugar_dissolved))\n    return str(max(sugar_water))+\" \"+str(max(sugar_dissolved))"
    },
    {
        "number": 4615,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\ndef"
    },
    {
        "number": 4615,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = [int(x) for x in stdin.split()]\n    A1, B1 = [100, 100]\n    A2, B2 = [0, 0]\n    if A == 1:\n        A1 = min(A1, 100 - B)\n    elif A > 1:\n        A1 = min(A1, A - B)\n    if A > 1 and A < A1:\n        A2 = A - A1\n    if B == 1:\n        B1 = min(B1, 100 - C)\n    elif B > 1:\n        B1 = min(B1, B - C)\n    if B > 1 and B < B1:\n        B2 = B - B1\n    if C == 1:\n        C1 = min(C1, 100 - D)\n    elif C > 1:\n        C1 = min(C1, C - D)\n    if C > 1 and C < C1:\n        C2 = C - C1\n    if D == 1:\n        D1 = min(D1, 100 - E)\n    elif D > 1:\n        D1 = min(D1, D - E)\n    if D > 1 and D < D1:\n        D2 = D - D1\n    if E == 1:\n        E1 = min(E1, 100 - F)\n    elif E > 1:\n        E1 = min(E1, E - F)\n    if E > 1 and E < E1:\n        E2 = E - E1\n    if F == 1:\n        F1 = min(F1, 100 - 100)\n    elif F > 1:\n        F1 = min(F1, F - 100)\n    if F > 1 and F < F1:\n        F2 = F - F1\n    return '{} {}'.format(int((A1 * B1 / (A1 + B1) + A2 * B2 / (A2 + B2)) * F1 / (F1 + F2)), int((A1 * B1 / (A1 + B1) + A2 * B2 / (A2 + B2)) * F2 / (F1 + F2)))"
    },
    {
        "number": 4615,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The goal is to produce the highest possible density water, but we cannot use water that contains any sugar.\n    Also, we cannot use water that contains any sugar.\n    :param stdin:\n    :return:\n    \"\"\"\n    a, b, c, d, e, f = map(int, stdin.split())\n    mw = max(a + b, c + d, e)\n    mf = max(a * (b + c), a * d, e * f)\n    if mf > mw:\n        return '{0} {1}'.format(mf, mf - mw)\n    else:\n        return '{0} {1}'.format(mw, 0)"
    },
    {
        "number": 4616,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip().replace('n', 'i')\n\nassert(solution('') == '')\nassert(solution('internationalization') == 'i18n')\nassert(solution('hello world') == 'h18')\nassert(solution('hello') == 'h')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert(solution('internationalization') == 'i18n')\nassert(solution('i18n') == 'i18n')\nassert("
    },
    {
        "number": 4616,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"i\", \"I\").replace(\"n\", \"N\")\n"
    },
    {
        "number": 4616,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.strip()\n    i = 0\n    j = len(input_string) - 1\n    while i < j:\n        if input_string[i]!= input_string[j]:\n            break\n        else:\n            i += 1\n            j -= 1\n    if i == j:\n        return input_string[0] + str(i)\n    else:\n        return input_string[:i] + str(i) + input_string[j] + str(j)"
    },
    {
        "number": 4616,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the abbreviated word in the string stdin.\n\n    >>> solution('internationalization')\n    i18n\n    >>> solution('hello')\n    hl\n    >>> solution('this is a very long sentence')\n    this is a very long sente\n    >>> solution('hi')\n    h\n    >>> solution('hello')\n    hl\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4616,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"internationalization\")\n    i18n\n    >>> solution(\"I am the world's first man\")\n    im18\n    \"\"\"\n    return stdin[0] + str(len(stdin) - 2) + stdin[-1]\n"
    },
    {
        "number": 4616,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return s[0] + str(len(s) - 2) + s[-1]"
    },
    {
        "number": 4616,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.split(\"\\n\")[0]\n\n    if len(input_string) == 0:\n        return \"\"\n\n    i = 0\n    n = 1\n\n    while n < len(input_string):\n        i += 1\n        n += i\n\n    return input_string[:i]\n"
    },
    {
        "number": 4616,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4616,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip().replace(\"n\", \"\")\n"
    },
    {
        "number": 4616,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4617,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.strip() == stdin.strip()[::-1] else 'NO'"
    },
    {
        "number": 4617,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    a[0] = a[0].replace(\" \", \"\")\n    a[1] = a[1].replace(\" \", \"\")\n    a[2] = a[2].replace(\" \", \"\")\n    if a[0][0]!= a[2][0] or a[0][1]!= a[2][1] or a[0][2]!= a[2][2]:\n        return \"NO\"\n    else:\n        return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4617,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    grid = [[x for x in stdin.split()[i:i + 3]] for i in range(0, len(stdin.split()), 3)]\n    if grid == grid[::-1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split()\n    grid = list(zip(*strings))\n    for i, row in enumerate(grid):\n        for j, letter in enumerate(row):\n            if letter!= grid[2-i][j]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4617,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.strip().split(\"\\n\")\n    num_strings = len(strings)\n    for i in range(num_strings):\n        strings[i] = list(strings[i])\n    rotated = []\n    for string in strings:\n        rotated.append(string[::-1])\n    rotated = list(zip(*rotated))\n    rotated = [''.join(row) for row in rotated]\n    if strings == rotated:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4617,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4617,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    c1, c2, c3 = stdin.strip()\n    if c1!= c2 and c2!= c3 and c1!= c3:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4617,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4617,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4617,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.splitlines()\n    cols = [list(row) for row in zip(*rows)]\n    \n    return \"YES\" if rows == cols == rows[::-1] else \"NO\""
    },
    {
        "number": 4618,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    k = int(stdin.readline().strip())\n\n    substrings = stdin.readline().strip().split(' ')\n    result = substrings[0]\n\n    for i in range(1, len(substrings)):\n        if len(substrings[i]) > len(result):\n            result = substrings[i]\n    return result"
    },
    {
        "number": 4618,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, K = stdin.splitlines()\n    K = int(K)\n\n    substrings = [s[i:] for i in range(K)]\n    substrings.sort(key=lambda x: x[0])\n    return substrings[0]\n"
    },
    {
        "number": 4618,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    k = int(stdin.split()[1])\n    return sorted(s)[k-1]"
    },
    {
        "number": 4618,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The naive solution is to sort the substrings and iterate through them in descending order.\n    We can save a lot of time by using a more efficient algorithm.\n    The idea is to use a priority queue.\n    Add all the substrings to a priority queue, keeping track of the count of each substring.\n    We can quickly remove the substring with the largest count.\n    In a second pass, we can simply print the K-th smallest substring.\n    '''\n    N = int(stdin)\n    s = stdin\n    if len(s) <= 50:\n        substrings = sorted([s[i:j+1] for i in range(len(s)) for j in range(i+1, len(s))])\n        if len(substrings) < N:\n            return ''.join(substrings[N-1])\n        else:\n            while len(substrings) > N:\n                substrings.pop()\n            return ''.join(substrings[N-1])\n\n    substrings = []\n    counts = defaultdict(int)\n    for i in range(len(s)):\n        counts[s[i]] += 1\n        substrings.append((s[i], i))\n    pq = [(-counts[s[0]], s[0])]\n    for i in range(1, len(s)):\n        while len(pq) > 0 and counts[s[i]] < pq[0][0]:\n            pq.pop(0)\n        if len(pq) < N:\n            pq.append((-counts[s[i]], s[i]))\n            counts[s[i]] += 1\n        else:\n            pq.append((-counts[s[i]], s[i]))\n            pq.pop(0)\n    return pq[0][1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4618,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import collections\n    S = stdin.split('\\n')[0]\n    K = int(stdin.split('\\n')[1])\n    C = collections.Counter(S)\n    L = []\n    for i in C.items():\n        L.append([i[0], i[1]])\n    L.sort(key = lambda x: x[1], reverse = True)\n    S = collections.Counter(S)\n    ans = []\n    for i in range(K):\n        if len(S) < K:\n            ans.append(L[i][0])\n            S[L[i][0]] -= 1\n    return ''.join(ans)\n\ndef"
    },
    {
        "number": 4618,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = int(stdin.strip())\n    if len(s) <= 50:\n        print(s[k - 1])\n    else:\n        subs = [s[i:i + k] for i in range(len(s) - k + 1)]\n        subs.sort()\n        print(subs[0])"
    },
    {
        "number": 4618,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    substring_sizes = stdin.split()\n    k = int(substring_sizes[1])\n    substrings = substring_sizes[0].split('*')\n    substrings = [sorted(substring) for substring in substrings]\n    substrings = sorted(substrings)\n    substrings = [''.join(substring) for substring in substrings]\n    print(substrings[k - 1])"
    },
    {
        "number": 4618,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, n, k = stdin.splitlines()\n    n = int(n)\n    k = int(k)\n    for i in range(n - k + 1):\n        if k > 1:\n            if i == 0:\n                print(s[i:i+k])\n                k -= 1\n            elif i == n - k + 1:\n                print(s[i:i+k])\n                k -= 1\n            else:\n                if s[i:i+k] > s[i+1:i+k+1]:\n                    print(s[i:i+k])\n                    k -= 1\n                else:\n                    print(s[i+1:i+k+1])\n                    k -= 1\n        else:\n            print(s[i:i+k+1])"
    },
    {
        "number": 4618,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    res = '_'\n    i = 0\n    while i < len(stdin) - k + 1:\n        if stdin[i] > stdin[i + k - 1]:\n            res = stdin[i:i+k]\n        i += 1\n    return res\n\nimport sys\ndef"
    },
    {
        "number": 4618,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the K-th lexicographically smallest substring of K.\n    >>> solution('aba')\n    'b'\n    >>> solution('abcdefghij')\n    'abc'\n    >>> solution('abcdefghijklmnopqrstuvwxyz')\n    'abcdefgh'\n    >>> solution('abcdefghijklmnopqrstuvwxyz')\n    'abcdefg'\n    '''\n    return"
    },
    {
        "number": 4619,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N = [int(num) for num in stdin.split()]\n    \n    def in_range(x, y) -> bool:\n        return 0 <= x < W and 0 <= y < H\n\n    def paint(x, y, a) -> None:\n        if a == 1:\n            in_range(x, y)\n        elif a == 2:\n            in_range(x, y)\n        elif a == 3:\n            in_range(x, y)\n        elif a == 4:\n            in_range(x, y)\n\n    def paint_region(x, y, a, curr_white_area):\n        if a == 1:\n            paint(x, y, a)\n        elif a == 2:\n            paint(x, y, a)\n        elif a == 3:\n            paint(x, y, a)\n        elif a == 4:\n            paint(x, y, a)\n        if in_range(x, y):\n            if curr_white_area == 0:\n                curr_white_area += 1\n        return curr_white_area\n\n    curr_white_area = 0\n    for _ in range(N):\n        x, y, a = [int(num) for num in stdin.split()]\n        curr_white_area = paint_region(x, y, a, curr_white_area)\n    return str(curr_white_area)"
    },
    {
        "number": 4619,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N = map(int, stdin.strip().split())\n    X, Y, A = [], [], []\n    for _ in range(N):\n        x, y, a = map(int, stdin.strip().split())\n        X.append(x)\n        Y.append(y)\n        A.append(a)\n    X.sort()\n    Y.sort()\n    Area = 0\n    for i in range(N):\n        if A[i] == 1:\n            Area += max(0, X[i] - min(X[i], Y[i]))\n        elif A[i] == 2:\n            Area += max(0, min(X[i], W) - X[i])\n        elif A[i] == 3:\n            Area += max(0, Y[i] - min(Y[i], H))\n        elif A[i] == 4:\n            Area += max(0, min(Y[i], H) - Y[i])\n    return Area"
    },
    {
        "number": 4619,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4619,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    rectangle = Rectangle(int(line[0]), int(line[1]), int(line[2]))\n    for i in range(3, len(line), 2):\n        line = stdin.split()\n        x = int(line[0])\n        y = int(line[1])\n        a = int(line[2])\n        if a == 1:\n            rectangle.paint_region(x, y, rectangle.W, rectangle.H)\n        elif a == 2:\n            rectangle.paint_region(x, y, rectangle.W, rectangle.H)\n        elif a == 3:\n            rectangle.paint_region(x, y, rectangle.W, rectangle.H)\n        elif a == 4:\n            rectangle.paint_region(x, y, rectangle.W, rectangle.H)\n    return rectangle.area"
    },
    {
        "number": 4619,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from collections import namedtuple\n    Box = namedtuple('Box', ['x_1', 'y_1', 'x_2', 'y_2', 'a_1', 'a_2'])\n    N = int(stdin.readline())\n    box = [Box(*map(int, stdin.readline().split())) for _ in range(N)]\n    area = 0\n    for x, y, a in box:\n        if a == 1:\n            area += max(0, x)\n        elif a == 2:\n            area += W - max(0, x)\n        elif a == 3:\n            area += max(0, y)\n        elif a == 4:\n            area += H - max(0, y)\n    return str(area)\n\nimport sys\n"
    },
    {
        "number": 4619,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(stdin))\n\"\"\"\n\nfrom sys import stdin, stdout\n\n\ndef"
    },
    {
        "number": 4619,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 2 1\\n3 4 4')\n    '9'\n    >>> solution('3 1 2\\n2 2 3\\n1 4 4')\n    '12'\n    \"\"\"\n    w, h, n = tuple(map(int, stdin.split(' ')))\n    x, y, a = [0] * n, [0] * n, [0] * n\n    for i in range(n):\n        x[i], y[i], a[i] = tuple(map(int, stdin.split(' ')))\n\n    w_sum, h_sum, n_sum = 0, 0, 0\n\n    for i in range(n):\n        if a[i] == 1:\n            w_sum += x[i]\n        elif a[i] == 2:\n            w_sum -= x[i]\n        elif a[i] == 3:\n            h_sum += y[i]\n        elif a[i] == 4:\n            h_sum -= y[i]\n        n_sum += 1\n    return str(w_sum * h_sum - w * h * (n_sum - n))\n\"\"\""
    },
    {
        "number": 4619,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nimport sys\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4619,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4619,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N = map(int, stdin.strip().split(' '))\n    x_points = map(int, stdin.strip().split(' '))\n    y_points = map(int, stdin.strip().split(' '))\n    a_points = map(int, stdin.strip().split(' '))\n\n    def paint_rectangle(x1, y1, x2, y2, a):\n        for x in range(x1, x2 + 1):\n            for y in range(y1, y2 + 1):\n                if a == 1:\n                    if x < x1:\n                        rectangle[y][x] = 0\n                elif a == 2:\n                    if x > x1:\n                        rectangle[y][x] = 0\n                elif a == 3:\n                    if y < y1:\n                        rectangle[y][x] = 0\n                else:\n                    if y > y1:\n                        rectangle[y][x] = 0\n\n    rectangle = [[1] * (W + 1) for _ in range(H + 1)]\n\n    for i in range(N):\n        x = x_points[i]\n        y = y_points[i]\n        a = a_points[i]\n\n        paint_rectangle(x, y, x + 1, y + 1, a)\n\n    return str(sum(row.count(1) for row in rectangle))"
    },
    {
        "number": 4620,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cars = [tuple(map(int, stdin.readline().strip().split(' '))) for _ in range(n)]\n    cars.sort(key=lambda x: x[1])\n    remaining_time = [0] * n\n    for _, s, f in cars:\n        for i in range(s - 1, f - 1, -f):\n            remaining_time[i % n] += f\n    return '\\n'.join(str(max(0, t)) for t in remaining_time)\n\nassert solution('''3\n6 5 1\n1 10 1''') == '12'\nassert solution('''1\n100 100 1\n''') == '0'\n'''\n"
    },
    {
        "number": 4620,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    C = [int(c) for c in stdin.readline().split(\" \")]\n    F = [int(c) for c in stdin.readline().split(\" \")]\n    res = [0] * N\n    C_L = [0]\n    F_L = [0]\n    for i in range(1, N):\n        C_L.append(C_L[-1] + C[i - 1])\n        F_L.append(F_L[-1] + F[i - 1])\n    for i in range(N):\n        res[i] = ((F_L[i] * (N - i)) % C[i])\n    return '\\n'.join(str(x) for x in res)"
    },
    {
        "number": 4620,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, C_1, S_1, F_1 = map(int, stdin.strip().split())\n\n    C_2 = C_1 - S_1\n    S_2 = F_1 * S_1\n\n    C_3 = C_2 - S_2\n    S_3 = F_1 * S_2\n\n    C_4 = C_3 - S_3\n    S_4 = F_1 * S_3\n\n    for i in range(N-1, 0, -1):\n        t = F_1 * i - S_i\n        if t < 0:\n            print(0)\n        else:\n            print(t)"
    },
    {
        "number": 4620,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [N, C_1, S_1, F_1,..., C_N-1, S_N-1, F_N-1] = map(int, stdin.split())\n    \n    for _ in range(N):\n        C_1, S_1, F_1 = map(int, stdin.split())\n        \n        arrival_time = C_1*S_1\n        \n        while True:\n            arrival_time += F_1\n            arrival_time %= S_1\n            \n            if arrival_time == 0:\n                break\n    \n    return '\\n'.join(str(arrival_time) for _ in range(N))"
    },
    {
        "number": 4620,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the number of minutes we need to arrive at station N from station 1.\n    \"\"\"\n    def valid_time(x: int) -> bool:\n        \"\"\"Returns True if x is valid, False otherwise.\"\"\"\n        return not (1 <= x <= 100 and x % 5 == 0)\n\n    n = int(stdin)\n    ct = [int(stdin) for stdin in stdin.split()]\n\n    dist_from_1 = 1\n    for i in range(1, n):\n        ct_at_station_i = ct[i]\n\n        if valid_time(dist_from_1):\n            return str(ct_at_station_i)\n\n        dist_from_1 = (dist_from_1 * 10 + ct_at_station_i) % ct[i]\n\n    return str(dist_from_1)\n\n\ndef"
    },
    {
        "number": 4620,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    train_info = [int(x) for x in stdin.readline().split(\" \")]\n    print(solution_naive(train_info, N))\n\ndef"
    },
    {
        "number": 4620,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    C = [int(stdin) for _ in range(N)]\n    t = 0\n    for i in range(1, N):\n        t += min(C[i], ((i+1) * C[i] - t) % i)\n    return t\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4620,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (N,) = map(int, stdin.split(\"\\n\")[0].split())\n    (C_1, S_1, F_1) = map(int, stdin.split(\"\\n\")[1].split())\n    (C_N_1, S_N_1, F_N_1) = map(int, stdin.split(\"\\n\")[2].split())\n\n    next_train = S_1 + (F_1 - 1) * C_1\n    for i in range(1, N):\n        next_train += (S_N_1 - next_train) % F_N_1\n        next_train += (F_N_1 - 1) * C_N_1\n    return str(next_train)\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4620,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    C = [int(x) for x in stdin.readline().strip().split()]\n    S = [int(x) for x in stdin.readline().strip().split()]\n    F = [int(x) for x in stdin.readline().strip().split()]\n    return '\\n'.join(str(x) for x in get_earliest_time(N, C, S, F))\n\ndef"
    },
    {
        "number": 4620,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    trains = []\n    for _ in range(N-1):\n        trains.append(list(map(int, stdin.readline().split())))\n    trains.append([10, 10, 10])\n    return \" \".join(str(i) for i in solve(trains))\n\ndef"
    },
    {
        "number": 4621,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = [[c for c in stdin.split()[i]] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if (i+j)%2==0:\n                if matrix[i][j]=='*':\n                    matrix[i][j]='.'\n                else:\n                    matrix[i][j]='*'\n    for row in matrix:\n        print(''.join(row))\n    return \"\""
    },
    {
        "number": 4621,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W = list(map(int, stdin.split()))\n    matrix = [list(stdin) for _ in range(H)]\n    result = ['' for _ in range(H*2)]\n    for i in range(H):\n        for j in range(W):\n            result[i*2] += matrix[i][j]\n            result[i*2+1] += matrix[i][j]\n    return '\\n'.join(result)"
    },
    {
        "number": 4621,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    matrix = [[*map(str, stdin.split())] for _ in range(h)]\n    for row in matrix[::2]:\n        print(*row)\n    for row in matrix[1::2]:\n        print(*row)\n    return 0"
    },
    {
        "number": 4621,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    A = stdin.strip().split(\"\\n\")\n    B = [None] * h\n    for i in range(h):\n        B[i] = A[i].strip()\n    for i in range(h):\n        print(\"\".join(B[i + 1::2]))\n"
    },
    {
        "number": 4621,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split()]\n    rows_to_extend = (rows + 1) // 2\n    rows_to_print = rows_to_extend * 2\n\n    to_extend = [\".\" * (cols + 2)]\n    for i in range(rows_to_extend):\n        to_extend.append(stdin[(i * 2):((i * 2) + rows_to_extend)])\n        to_extend.append(\".\" * (cols + 2))\n    to_print = [\".\" * (cols + 2)]\n    for i in range(rows_to_print):\n        to_print.append(stdin[(i * 2):((i * 2) + rows_to_print)])\n        to_print.append(\".\" * (cols + 2))\n\n    return \"\\n\".join(to_print)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4621,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4621,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    H, W = map(int, lines[0].split(\" \"))\n    grid = lines[1]\n\n    print(grid.replace(\".\", \"*\"))\n    print(grid.replace(\"*\", \".\"))\n    print(\".\" * (W + 2))\n    print(\".\" + grid + \".\")\n    print(\".\" * (W + 2))"
    },
    {
        "number": 4621,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(h) for h in stdin.split()]\n    C = [list(stdin.split()) for _ in range(H)]\n    if H % 2 == 0:\n        N = 2 * H\n    else:\n        N = 2 * H + 1\n    A = [['*' for _ in range(W)] for _ in range(N)]\n    for i in range(H):\n        for j in range(W):\n            A[i][j] = C[i][j]\n            A[i + H][j] = C[i][j]\n            A[i][j + W] = C[i][j]\n            A[i + H][j + W] = C[i][j]\n    for i in range(N):\n        print(''.join(A[i]))\n\n\ndef"
    },
    {
        "number": 4621,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()\n    h,w = map(int,line[0].split())\n    matrix = line[1:]\n    \n    matrix_doubled = matrix\n    for i in range(0,h,2):\n        matrix_doubled[i] = matrix_doubled[i] + matrix_doubled[i+1]\n    matrix_doubled = '\\n'.join(matrix_doubled)\n    \n    return matrix_doubled"
    },
    {
        "number": 4621,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4622,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    seq = [int(stdin.readline()) for _ in range(N)]\n    if N == len(set(seq)):\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4622,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if A[i] == A[j]:\n                print('NO')\n                exit()\n    print('YES')\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4622,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n2 6 1 4 5\")\n    'YES'\n    >>> solution(\"2\\n2 3 3 4 4\")\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    items = [int(item) for item in stdin.readline().split()]\n    if len(set(items)) == n:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 'NO'\n    A = list(map(int, stdin.split()))\n    return 'YES' if (len(set(A)) == len(A)) else 'NO'"
    },
    {
        "number": 4622,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = sorted(map(int, stdin.readline().split()))\n\n    if s[0] == s[1] or s[1] == s[2]:\n        print('YES')\n    else:\n        print('NO')\n\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.strip().split(' ')))\n\n    print('YES' if len(set(A)) == len(A) else 'NO')\n"
    },
    {
        "number": 4622,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(n) for n in stdin.readline().split()]\n    is_pairwise_distinct = all(a == b for a, b in zip(A, A[1:]))\n    return \"YES\" if is_pairwise_distinct else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4622,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.split('\\n')[1].strip().split()[0] == 'YES' else 'NO'\n\nassert(solution('''5\n2 6 1 4 5''')) == 'YES'\nassert(solution('''3\n1 2 3''')) == 'NO'\nassert(solution('''4\n1 2 3 4''')) == 'YES'\nassert(solution('''5\n1 2 3 4 5''')) == 'NO'\nassert(solution('''6\n1 2 3 4 5 6''')) == 'YES'\nassert(solution('''7\n1 2 3 4 5 6 7''')) == 'NO'\nassert(solution('''8\n1 2 3 4 5 6 7 8''')) == 'NO'\nassert(solution('''9\n1 2 3 4 5 6 7 8 9''')) == 'NO'\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''')) == 'NO'\nassert(solution('''11\n1 2 3 4 5 6 7 8 9 10 11''')) == 'YES'\nassert(solution('''12\n1 2 3 4 5 6 7 8 9 10 11 12''')) == 'NO'\nassert(solution('''13\n1 2 3 4 5 6 7 8 9 10 11 12 13''')) == 'NO'\nassert(solution('''14\n1 2 3 4 5 6 7 8 9 10 11 12 13 14''')) == 'NO'\nassert(solution('''15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15''')) == 'NO'\nassert(solution('''16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16''')) == 'NO'\nassert(solution('''17\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17''')) == 'NO'\nassert(solution('''18\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18''')) == 'NO'\nassert(solution('''19\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19''')) == 'NO'\nassert(solution('''20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20''')) == 'NO'\nassert(solution('''21\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21''')) == 'NO'\nassert(solution('''22\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''')) == 'NO'\nassert(solution('''23\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23''')) == 'NO'\nassert(solution('''24\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24''')) == 'NO'\nassert(solution('''25\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25''')) == 'NO'\n'''))\n\nprint(solution('''1'''))\n"
    },
    {
        "number": 4622,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = [int(x) for x in stdin.strip().split()]\n    if len(sequence) < 2:\n        return 'NO'\n\n    sequence.sort()\n\n    for i in range(1, len(sequence)):\n        if sequence[i] == sequence[i - 1]:\n            return 'NO'\n\n    return 'YES'\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4622,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4623,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4623,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_total_weight(total_weight: int, n: int, weights: List[int]) -> int:\n        if len(weights) == 1:\n            return n\n\n        sorted_weights = sorted(weights)\n        sorted_weights.insert(0, 0)\n        for i in range(len(weights) - 1, 1, -1):\n            if sorted_weights[i] + sorted_weights[i - 1] > total_weight:\n                break\n        else:\n            i = 0\n        return i\n\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n = int(stdin.readline())\n        weights = list(map(int, stdin.readline().split()))\n        total_weight = sum(weights)\n        print(get_max_total_weight(total_weight, n, weights))\n"
    },
    {
        "number": 4623,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        w = [int(x) for x in stdin.readline().strip().split()]\n        w.sort()\n        w = [0] + w + [n]\n        w = [w[i] - w[i - 1] for i in range(1, len(w))]\n        w.sort()\n        print(w.count(w[-1]))\n\nsolution(stdin)\n"
    },
    {
        "number": 4623,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        weights = list(map(int, stdin.readline().split()))\n        weights.sort()\n        s = sum(weights)\n        n -= 1\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if weights[i] + weights[j] == s:\n                    print(i + 1)\n                    break\nsolution(stdin)\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4623,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    def max_compositions(weights: List[int]) -> int:\n        def helper(total: int) -> bool:\n            return not (total - len(weights)) % 3 and total == sum(weights)\n\n        left, right = 0, len(weights) - 1\n\n        while left <= right:\n            if not helper(left + right):\n                left += 1\n            else:\n                right -= 1\n        return left\n\n    for i in range(1, t + 1):\n        n = int(stdin.readline().strip())\n        weights = list(map(int, stdin.readline().strip().split()))\n        print(max_compositions(weights))\n\"\"\"\n"
    },
    {
        "number": 4623,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    w = list(map(int, stdin.readline().split()))\n    w.sort()\n    w_ = sorted(w)\n    print(w_)\n    print(w)\n    m = len(w)\n    cnt = 0\n    for i in range(m):\n        if w[i]!= w_[i]:\n            for j in range(i + 1, m):\n                if w[i] + w[j] == w_[i] + w_[j]:\n                    cnt += 1\n                    break\n    return str(cnt)\n\nprint(solution('''5\n5\n1 2 3 4 5\n8\n6 6 6 6 6 6 8 8\n8\n1 2 2 1 2 1 1 2\n3\n1 3 3\n6\n1 1 3 4 2 2\n'''))\n"
    },
    {
        "number": 4623,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        w = list(map(int, stdin.readline().strip().split()))\n        total_weight = sum(w)\n        k = 1\n        while total_weight % 2 == 0:\n            total_weight /= 2\n            k += 1\n        print(k)"
    },
    {
        "number": 4623,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        weights = [int(i) for i in stdin.readline().split()]\n        max_weight = 0\n        for i in range(1, n):\n            for j in range(i + 1, n + 1):\n                weight = weights[i] + weights[j]\n                if max_weight < weight <= n:\n                    max_weight = weight\n        print(max_weight)\n\"\"\""
    },
    {
        "number": 4623,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = [int(stdin.readline()) for _ in range(n)]\n    weights.sort(reverse=True)\n    print(weights)\n    return ''"
    },
    {
        "number": 4623,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    print(solve(a))\n\ndef"
    },
    {
        "number": 4624,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, x = stdin.split()\n        print(int(x) // 2 + 1)\n    return \"\""
    },
    {
        "number": 4624,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n\n    for _ in range(T):\n        N, X = map(int, stdin.readline().strip().split(\" \"))\n        floor = N // X\n        remainder = N % X\n\n        if remainder == 1:\n            floor += 1\n\n        print(floor)"
    },
    {
        "number": 4624,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIn the third test case of the example, Petya lives in the first floor.\n\n\n-----Solution-----\n\"\"\""
    },
    {
        "number": 4624,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4624,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, x = map(int, stdin.readline().split())\n        print(n // x)\nsolution(stdin)\n"
    },
    {
        "number": 4624,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\n\ndef"
    },
    {
        "number": 4624,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n"
    },
    {
        "number": 4624,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4624,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        n, x = map(int, stdin.readline().split())\n        print(max(n // 2, n - ((n // 2) * (x + 1))))"
    },
    {
        "number": 4624,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIf you enjoyed this Kata, please try:\n\n[Awesomest Solution](https://www.codewars.com/kata/55ceb6b2c2886e6c5b0008a7)\n\n[Learn to Program](https://www.codewars.com/users/rishabhchopra57/authored)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4625,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4625,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4625,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4625,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        p = list(map(int, stdin.readline().split()))\n        o = {}\n        for c in s:\n            o[c] = 0\n        for i in range(len(p)):\n            o[s[i]] += p[i]\n        print(*o.values())"
    },
    {
        "number": 4625,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int, stdin.split(\" \"))\n    s = stdin[n+1:]\n    p = list(map(int, stdin.split(\" \")[2:]))\n    t = list(map(int, stdin.split(\" \")[:2]))\n    \n    a = s.count('a')\n    b = s.count('b')\n    c = s.count('c')\n    d = s.count('d')\n    e = s.count('e')\n    f = s.count('f')\n    g = s.count('g')\n    h = s.count('h')\n    i = s.count('i')\n    j = s.count('j')\n    k = s.count('k')\n    l = s.count('l')\n    m = s.count('m')\n    n = s.count('n')\n    o = s.count('o')\n    p = s.count('p')\n    q = s.count('q')\n    r = s.count('r')\n    s = s.count('s')\n    t = s.count('t')\n    u = s.count('u')\n    v = s.count('v')\n    w = s.count('w')\n    x = s.count('x')\n    y = s.count('y')\n    z = s.count('z')\n    \n    for x in range(0,len(t)):\n        if t[x] == m+1:\n            if x == 0:\n                a = a+1\n            if x == 1:\n                b = b+1\n            if x == 2:\n                c = c+1\n            if x == 3:\n                d = d+1\n            if x == 4:\n                e = e+1\n            if x == 5:\n                f = f+1\n            if x == 6:\n                g = g+1\n            if x == 7:\n                h = h+1\n            if x == 8:\n                i = i+1\n            if x == 9:\n                j = j+1\n            if x == 10:\n                k = k+1\n            if x == 11:\n                l = l+1\n            if x == 12:\n                m = m+1\n            if x == 13:\n                n = n+1\n            if x == 14:\n                o = o+1\n            if x == 15:\n                p = p+1\n            if x == 16:\n                q = q+1\n            if x == 17:\n                r = r+1\n            if x == 18:\n                s = s+1\n            if x == 19:\n                t = t+1\n            if x == 20:\n                u = u+1\n            if x == 21:\n                v = v+1\n            if x == 22:\n                w = w+1\n            if x == 23:\n                x = x+1\n            if x == 24:\n                y = y+1\n            if x == 25:\n                z = z+1\n    answer = \"\"\n    for i in range(0,26):\n        answer = answer+str(i)+\" \"\n    print(answer)\n    return \"\"\n"
    },
    {
        "number": 4625,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, m = map(int, stdin.split())\n        s = stdin.strip()\n        p = list(map(int, stdin.split()))\n        print(' '.join(str(len(set(s[:i]))) for i in range(1, n+1)))"
    },
    {
        "number": 4625,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    s = stdin[:n]\n    p = stdin[n:].split(\" \")\n    # your code here\n    res = [0] * 26\n    for x in p:\n        res[ord(x) - 97] += 1\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 4625,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe first three lines of the input contain the number $t$ of test cases, the number $n$ of buttons and the number $m$ of tries correspondingly.\n\nFor each test case, the next line contains $n$ integers, the strings of the buttons, $s$, and the number of tries correspondingly.\n\nThe last line of each test case contains $m$ integers, the number of characters pressed right during each of the tries.\n\nEach integer is in the range from $0$ to the value of the number of buttons ($n$).\n\n\n-----Limits-----\n\nTime limit: $10^4$ seconds.\nMemory limit: $2 \\times 10^8$ bytes.\n\nThe input and output are $|s| \\le 2 \\cdot 10^5$ and $t \\le 10^4$.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4625,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    s = stdin[m+1:]\n    p = [int(n) for n in stdin.split()[m+1:]]\n    res = [0] * 26\n    for i, c in enumerate(s):\n        res[ord(c) - ord('a')] += i - p[i] + 1\n    return''.join(str(n) for n in res)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4625,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        p = sorted(map(int, stdin.readline().split()))\n        s_length = len(s)\n        n_tries = m + 1\n        b = [0] * 26\n        for i in range(s_length):\n            if s[i] == 'a':\n                b[0] += 1\n            elif s[i] == 'b':\n                b[1] += 1\n            elif s[i] == 'c':\n                b[2] += 1\n            elif s[i] == 'd':\n                b[3] += 1\n            elif s[i] == 'e':\n                b[4] += 1\n            elif s[i] == 'f':\n                b[5] += 1\n            elif s[i] == 'g':\n                b[6] += 1\n            elif s[i] == 'h':\n                b[7] += 1\n            elif s[i] == 'i':\n                b[8] += 1\n            elif s[i] == 'j':\n                b[9] += 1\n            elif s[i] == 'k':\n                b[10] += 1\n            elif s[i] == 'l':\n                b[11] += 1\n            elif s[i] =='m':\n                b[12] += 1\n            elif s[i] == 'n':\n                b[13] += 1\n            elif s[i] == 'o':\n                b[14] += 1\n            elif s[i] == 'p':\n                b[15] += 1\n            elif s[i] == 'q':\n                b[16] += 1\n            elif s[i] == 'r':\n                b[17] += 1\n            elif s[i] =='s':\n                b[18] += 1\n            elif s[i] == 't':\n                b[19] += 1\n            elif s[i] == 'u':\n                b[20] += 1\n            elif s[i] == 'v':\n                b[21] += 1\n            elif s[i] == 'w':\n                b[22] += 1\n            elif s[i] == 'x':\n                b[23] += 1\n            elif s[i] == 'y':\n                b[24] += 1\n            elif s[i] == 'z':\n                b[25] += 1\n        b = [str(x) for x in b]\n        print(' '.join(b))\n        print(' '.join(b))\nsolution(stdin)\n"
    },
    {
        "number": 4626,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, q = map(int, stdin.split(\"\\n\")[0].split(\" \"))\n    for _ in range(q):\n        a, b, c = map(int, stdin.split(\"\\n\")[1].split(\" \"))\n        if abs(a - b) + abs(a - c) > abs(b - c):\n            print(abs(a - b) + abs(a - c) + abs(b - c))\n        else:\n            print(abs(a - b) + abs(b - c) + abs(c - a))"
    },
    {
        "number": 4626,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    q = 0\n    while q < n:\n        a, b, c = map(int, stdin.split()[1:])\n        q += 1\n        a, b, c = sorted([a, b, c])\n        d = abs(a - b) + abs(a - c) + abs(b - c)\n        print(d)"
    },
    {
        "number": 4626,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4626,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4626,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        a, b, c = [int(x) for x in stdin.readline().split()]\n        print(min(a, b, c) + abs(a - b) + abs(b - c) + abs(a - c))"
    },
    {
        "number": 4626,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    results = []\n    for _ in range(0, t):\n        a, b, c = [int(i) for i in stdin.readline().strip().split(' ')]\n        results.append(minimum_total_pairwise_distance(a, b, c))\n    return '\\n'.join(str(i) for i in results)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4626,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4626,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def min_distance(a, b, c) -> int:\n        return abs(a - b) + abs(a - c) + abs(b - c)\n\n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        a, b, c = sorted(map(int, stdin.readline().split()))\n        print(min_distance(a, b, c))\n    return"
    },
    {
        "number": 4626,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read num of test cases\n    q = int(stdin.readline())\n    for _ in range(q):\n        # read inputs\n        a, b, c = list(map(int, stdin.readline().split()))\n        print(a, b, c)"
    },
    {
        "number": 4626,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        a, b, c = [int(x) for x in stdin.readline().strip().split()]\n        print(min(abs(a - b), abs(a - c), abs(b - c)))\n    return stdin.readline().strip()"
    },
    {
        "number": 4627,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        sizes = list(map(int, stdin.split()))\n        a = stdin.split()[2:]\n        print(check(sizes, a))\n\n\ndef"
    },
    {
        "number": 4627,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        a.sort()\n        odd = [i for i in a if i & 1]\n        pair = [i for i in a if not i & 1]\n        if odd and pair:\n            # there is a possible partition\n            if odd[0] - pair[0] == 1 and odd[-1] - pair[-1] == 1:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')\n    return \"\""
    },
    {
        "number": 4627,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4627,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    if len(a) == 1:\n        return \"YES\"\n    if len(a) % 2!= 0:\n        return \"NO\"\n    return \"YES\" if all([x % 2 == 0 for x in a]) else \"NO\""
    },
    {
        "number": 4627,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4627,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    odd = [n for n in a if n % 2]\n\n    even = [n for n in a if not n % 2]\n\n    for i in range(0, len(odd) - 1):\n        for j in range(i + 1, len(even)):\n            if (abs(odd[i] - even[j]) == 1):\n                return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        n, *a = map(int, stdin.split())\n        odds = [x for x in a if x & 1]\n        if len(odds)!= 2:\n            print('NO')\n            continue\n        if sum(odds) & 1:\n            print('NO')\n            continue\n        if not all(x & 1 or x == 1 for x in odds):\n            print('NO')\n            continue\n        print('YES')\n\n\"\"\"\n"
    },
    {
        "number": 4627,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"YES\"\n    arr = [int(x) for x in stdin.split()]\n    return \"NO\" if par_to_pairs(arr) is None else \"YES\"\ndef"
    },
    {
        "number": 4627,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\n'''\n"
    },
    {
        "number": 4627,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4628,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    n, m, k = map(int, data[0].split())\n    \n    districts = list(map(int, data[1].split()))\n    roads = []\n    for i in range(m):\n        roads.append(tuple(map(int, data[i + 2].split())))\n    \n    routes = list(map(int, data[m + 2].split()))\n    \n    # for i in range(1, m):\n    #     districts[roads[i - 1][0] - 1] = districts[roads[i - 1][1] - 1]\n    \n    def get_min_dist(road: tuple) -> int:\n        return districts[road[0] - 1] + districts[road[1] - 1]\n    \n    roads.sort(key=get_min_dist)\n    \n    cost = 0\n    for i in range(k):\n        a, b = routes[i * 2 - 1], routes[i * 2]\n        if roads[i][0] == a or roads[i][0] == b:\n            roads[i] = (roads[i][1], roads[i][0])\n        if roads[i][1] == a or roads[i][1] == b:\n            roads[i] = (roads[i][0], roads[i][1])\n    \n    roads.sort(key=lambda road: roads[0])\n    \n    for i in range(k):\n        if roads[i][0] == districts[routes[i * 2] - 1]:\n            roads[i] = (roads[i][1], roads[i][0])\n        if roads[i][1] == districts[routes[i * 2] - 1]:\n            roads[i] = (roads[i][0], roads[i][1])\n    \n    print(roads)\n    for i in range(k):\n        if roads[i][0] == 0:\n            roads[i] = (roads[i][1], roads[i][0])\n        if roads[i][1] == 0:\n            roads[i] = (roads[i][0], roads[i][1])\n    \n    roads.sort(key=lambda road: districts[road[0] - 1] + districts[road[1] - 1])\n    \n    print(roads)\n    return '0'\n"
    },
    {
        "number": 4628,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.strip().split()]\n    edges = []\n    for _ in range(m):\n        x, y, w = [int(x) for x in stdin.strip().split()]\n        edges.append((x, y, w))\n    routes = []\n    for _ in range(k):\n        a, b = [int(x) for x in stdin.strip().split()]\n        routes.append((a, b))\n    return''.join(str(get_cost(edges, routes, i)) for i in range(1, n + 1))\n\n\ndef"
    },
    {
        "number": 4628,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().strip().split())\n    roads = [tuple(map(int, stdin.readline().strip().split())) for _ in range(m)]\n    routes = [tuple(map(int, stdin.readline().strip().split())) for _ in range(k)]\n    graph = defaultdict(list)\n    for x, y, w in roads:\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n\n    def dfs(s, visited, min_cost):\n        visited.add(s)\n        for t in graph[s]:\n            if t[0] not in visited:\n                dfs(t[0], visited, min_cost)\n                min_cost[s] += t[1]\n        return min_cost\n\n    return sum(dfs(r[0], set(), {})[r[1]] for r in routes)\n\nassert solution('1 2 3') == 1\nassert solution('1 2 1') == 2\nassert solution('1 2 1 3') == 1\nassert solution('1 2 1 3 4') == 2\nassert solution('1 2 1 3 4 5') == 1\nassert solution('1 2 1 3 4 5 6') == 1\nassert solution('1 2 1 3 4 5 6 7') == 2\nassert solution('1 2 1 3 4 5 6 7 8') == 2\nassert solution('1 2 1 3 4 5 6 7 8 9') == 3\nassert solution('1 2 1 3 4 5 6 7 8 9 10') == 3\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11') == 4\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12') == 4\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13') == 5\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14') == 6\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15') == 7\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16') == 8\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17') == 8\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18') == 9\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19') == 10\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == 11\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21') == 12\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22') == 13\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23') == 14\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24') == 15\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25') == 16\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26') == 17\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27') == 18\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28') == 19\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29') == 20\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30') == 21\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31') == 22\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32') == 22\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33') == 22\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34') == 22\nassert solution('1 2 1 3 4 5 6 7 8 9 10 11 12 13 14"
    },
    {
        "number": 4628,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns the minimum cost of routes from city to city\n    '''\n    _, _, _, n, m, k = map(int, stdin.split())\n    roads = []\n    for i in range(m):\n        x, y, cost = map(int, stdin.split())\n        roads.append((cost, x, y))\n\n    roads.sort()\n    courier_routes = []\n    for i in range(k):\n        a, b = map(int, stdin.split())\n        courier_routes.append((a, b))\n\n    routes = [None] * n\n    for road in roads:\n        routes[road[1]-1] = road[0]\n\n    routes = routes + [None] * (n * (n - 1) // 2)\n    for route in courier_routes:\n        routes[route[0]-1] = route[1]\n\n    routes.sort()\n    max_cost = 0\n    for i in range(n):\n        if routes[i] is None:\n            max_cost += 0\n        else:\n            max_cost += routes[i]\n    return str(max_cost)"
    },
    {
        "number": 4628,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    roads = []\n    for i in range(m):\n        x, y, w = map(int, stdin.split(' '))\n        roads.append((x, y, w))\n    roads = list(sorted(roads, key=lambda x: x[2]))\n    routes = []\n    for i in range(k):\n        a, b = map(int, stdin.split(' '))\n        routes.append((a, b))\n    routes = list(sorted(routes, key=lambda x: x[0]))\n    k_min = 0\n    for route in routes:\n        a, b = route\n        min_cost = float('inf')\n        for road in roads:\n            x, y, w = road\n            if x == a or y == a:\n                min_cost = min(min_cost, w)\n            if x == b or y == b:\n                min_cost = min(min_cost, w)\n        k_min += min_cost\n    return str(k_min)\n\n\n\nassert(solution('''6 5 2\n1 2 5\n2 3 7\n2 4 4\n4 5 2\n4 6 8\n1 6\n5 3\n''') == '22')\nassert(solution('''5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n''') == '13')\nassert(solution('''5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n''') == '13')\nassert(solution('''5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n4 3\n1 3\n1 3\n1 3\n1 3\n1 3\n''') == '13')\nassert(solution('''5 5 4\n1 2 5\n2 3 4\n1 4 3\n4 3 7\n3 5 2\n1 5\n1 3\n3 3\n1 5\n4 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3\n1 3"
    },
    {
        "number": 4628,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    assert n - 1 <= m <= int(min(1000, (n * (n - 1) // 2)))\n    routes = {(int(x) - 1 for x in stdin.split()): (int(x) - 1 for x in stdin.split()) for _ in range(m)}\n    return str(min(\n        (\n            (couriers := (int(x) - 1 for x in stdin.split())),\n            (\n                1,\n                *sorted(\n                    (\n                        routes[route]\n                        for route in couriers\n                        if route[0]!= route[1]\n                    ),\n                    key=lambda route: routes[route][0] + routes[route][1]\n                ),\n            )\n        ),\n        (0,)\n    ))\n\nassert solution(\"5 3 2\") == \"8\"\nassert solution(\"5 3 3\") == \"2\"\nassert solution(\"5 5 3\") == \"9\"\nassert solution(\"5 5 5\") == \"0\"\nassert solution(\"5 5 4\") == \"10\"\nassert solution(\"5 5 5\") == \"1\"\nassert solution(\"5 5 4\") == \"4\"\nassert solution(\"5 5 4\") == \"4\"\nassert solution(\"5 5 4\") == \"4\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5\") == \"2\"\nassert solution(\"5 5 5"
    },
    {
        "number": 4628,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the minimum total courier routes cost you can achieve\n    by applying the operation described above optimally.\n\n    >>> solution('''6 5 2\n   ... 1 2 5\n   ... 2 3 7\n   ... 2 4 4\n   ... 4 5 2\n   ... 4 6 8\n   ... 1 6\n   ... 5 3\n   ... ''')\n    22\n    >>> solution('''5 5 4\n   ... 1 2 5\n   ... 2 3 4\n   ... 1 4 3\n   ... 4 3 7\n   ... 3 5 2\n   ... 1 5\n   ... 1 3\n   ... 3 3\n   ... 1 5\n   ... ''')\n    13\n    \"\"\"\n    n, m, k = [int(i) for i in stdin.split()]\n    roads = {(int(i) for i in stdin.split()) for _ in range(m)}\n    routes = [int(i) for i in stdin.split()]\n    routes.sort(key=lambda r: len(roads | {r}))\n    routes = [{routes[i], routes[i + 1]} for i in range(len(routes) - 1)]\n    return min(sum(roads | {r} | r) for r in routes)"
    },
    {
        "number": 4628,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin)\n    n, m, k = [int(n) for n in stdin.split()]\n    roads = [list(map(int, stdin.split())) for _ in range(m)]\n    routes = [list(map(int, stdin.split())) for _ in range(k)]\n    roads = sorted(roads, key=lambda x: x[2])\n    costs = [0] * (n + 1)\n    for route in routes:\n        costs[route[0]] += route[2]\n    for x, y, w in roads:\n        if costs[x] > costs[y]:\n            costs[x] = costs[y]\n    for x, y, w in roads:\n        if costs[x] > costs[y]:\n            costs[y] = 0\n        else:\n            costs[x] = 0\n    print(sum(costs))\n"
    },
    {
        "number": 4628,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nn, m, k = [int(i) for i in stdin.split()]\ngraph = [set() for _ in range(n)]\nfor _ in range(m):\n    a, b, c = [int(i) for i in stdin.split()]\n    graph[a - 1].add((b - 1, c))\n    graph[b - 1].add((a - 1, c))\nd = [float('inf')] * n\nd[0] = 0\nfor _ in range(k):\n    a, b = [int(i) - 1 for i in stdin.split()]\n    d[a] = 0\n    d[b] = 0\nfor i in range(n):\n    for j, w in graph[i]:\n        d[j] = min(d[i] + w, d[j])\nprint(d[-1])\n"
    },
    {
        "number": 4628,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m, k = [int(n) for n in lines[0].split(\" \")]\n    roads = [\n        tuple(int(n) for n in line.split(\" \"))\n        for line in lines[1:m + 1]\n    ]\n    delivery_routes = [\n        tuple(int(n) for n in line.split(\" \"))\n        for line in lines[m + 1 :]\n    ]\n\n    # print(n, m, k, roads, delivery_routes)\n\n    min_cost = float(\"inf\")\n\n    for delivery_route in delivery_routes:\n        delivery_cost = 0\n        for delivery_from, delivery_to in combinations(delivery_route, 2):\n            for road in roads:\n                if delivery_from in road and delivery_to in road:\n                    delivery_cost += road[2]\n                    break\n        min_cost = min(min_cost, delivery_cost)\n\n    return str(min_cost)\n"
    },
    {
        "number": 4629,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    return \"\\n\".join(str(int(n*3**i)) for i in range(1,n+1))"
    },
    {
        "number": 4629,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://en.wikipedia.org/wiki/Catalan_number#Catalan_number_%E2%80%93_binomial_coefficient_function\n    \"\"\"\n    n = int(stdin.readline().strip())\n    ans = [0] * (n + 1)\n    ans[0], ans[1] = 1, 1\n\n    for i in range(2, n + 1):\n        ans[i] = ans[i - 1] + ans[i - 2]\n\n    ans[n] = ans[n - 1] + ans[n - 2]\n\n    q = int(stdin.readline().strip())\n\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        print(ans[n])\n    return \"\""
    },
    {
        "number": 4629,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    l = [int(stdin.readline().strip()) for _ in range(q)]\n\n    def isGood(n):\n        t = n\n        for i in range(n):\n            if t % 3 == 0:\n                return False\n            t //= 3\n        return True\n    l.sort(key=lambda n: (isGood(n), n), reverse=True)\n    return '\\n'.join(str(n) for n in l)"
    },
    {
        "number": 4629,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4629,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return (3 ** n - 1) // (3 ** n - 3 ** (n - 1) - 2)"
    },
    {
        "number": 4629,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10\\n1')\n    '1'\n    >>> solution('2\\n1')\n    '1'\n    >>> solution('4\\n3')\n    '2'\n    >>> solution('100\\n100')\n    '100'\n    \"\"\"\n    n = int(stdin.readline())\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = n - i\n    return''.join(map(str, ans))\nprint(solution(input()))\n"
    },
    {
        "number": 4629,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4629,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4629,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        n = int(stdin.readline().strip())\n        if n % 3 == 0:\n            n = n / 3\n        else:\n            n = ((n - 1) / 3) + 1\n        print(n)\n    return ''"
    },
    {
        "number": 4629,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4630,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    assert len(p) == n\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        assert 0 < n <= n * 2\n        return''.join(str(p[(i-1) % n]) for i in range(n))\n\nassert solution('''5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n''') == '1 1 1 1 1\\n3 3 3\\n2 3 3 2 1 3\\n1\\n2 2 2 2\\n4 4 4 1 4'\n\n'''\np = [5, 1, 2, 4, 3]\nprint(p[(1 - 1) % len(p)])\nprint(p[(2 - 1) % len(p)])\nprint(p[(3 - 1) % len(p)])\nprint(p[(4 - 1) % len(p)])\nprint(p[(5 - 1) % len(p)])\n'''\n"
    },
    {
        "number": 4630,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n@pytest.mark.parametrize(\n    ['input', 'expected'],\n    (\n        (''.join(\n            '7\\n'\n            '5\\n'\n            '1 2 3 4 5\\n'\n            '3\\n'\n            '2 3 1\\n'\n            '6\\n'\n            '4 6 2 1 5 3\\n'\n            '1\\n'\n            '1\\n'\n            '4\\n'\n            '3 4 1 2\\n'\n            '5\\n'\n            '5 1 2 4 3\\n',\n            '1 1 1 1 1\\n'\n            '3 3 3\\n'\n            '2 3 3 2 1 3\\n'\n            '1\\n'\n            '2 2 2 2\\n'\n            '4 4 4 1 4\\n',\n        ), '0 0 0 0 0 0'),\n    ),\n)\ndef"
    },
    {
        "number": 4630,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(n: int, p: List[int]) -> bool:\n        n -= 1\n        for i in range(n):\n            if p[i] < 0:\n                return False\n            if p[i] > n:\n                return False\n        return True\n\n    # n = int(stdin.readline())\n    # p = list(map(int, stdin.readline().split()))\n    n, *p = map(int, stdin.readlines())\n    result = []\n    for _ in range(int(stdin.readline())):\n        q = list(map(int, stdin.readline().split()))\n        # print(q)\n        a = n\n        for i in range(n):\n            if is_possible(n, p[:i+1]):\n                if q[i] in p[:i+1]:\n                    a -= 1\n        result.append(a)\n    return '\\n'.join(map(str, result))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4630,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4630,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4630,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    q = int(stdin.readline().strip())\n    # your code here\n    return '\\n'.join(str(i) for i in solution(stdin))"
    },
    {
        "number": 4630,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = [int(x) for x in stdin.readline().strip().split(\" \")]\n    for _ in range(int(stdin.readline().strip())):\n        print(n - sum(1 for _ in range(n) if p[x] == x))"
    },
    {
        "number": 4630,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    for i in range(1, n):\n        l[i] = l[i] - l[i - 1]\n    return str(l.count(0))"
    },
    {
        "number": 4630,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4630,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 2\n   ... 1 2\n   ... 2\n   ... 3 4\n   ... 1\n   ... 2\n   ... ''')\n    '1 1 1 1 1 1 1'\n    \"\"\"\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    if n == 1:\n        return a\n    p = [int(x) for x in stdin.readline().strip().split()]\n    for i in range(n):\n        a = (a * p[i]) % MOD\n    return a\n    \n"
    },
    {
        "number": 4631,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.readline().split()]\n    trees = [int(x) for x in stdin.readline().split()]\n    machines = [int(x) for x in stdin.readline().split()]\n    tree_trees = [[] for i in range(n)]\n    for i in range(n):\n        tree_trees[i].append(trees[i])\n    tree_trees[trees.index(machines[0])].remove(machines[0])\n    machine_machines = [machines[0]]\n    for machine in machines:\n        index = trees.index(machine)\n        tree_trees[index].remove(machine)\n        machine_machines.append(machine)\n    res = 0\n    tree_machines = []\n    for machine in machine_machines:\n        index = trees.index(machine)\n        tree_machines.append(tree_trees[index][0])\n        tree_trees[index].remove(tree_machines[-1])\n    for tree in tree_trees:\n        res += abs(tree_machines[0] - tree[0])\n        tree_machines.append(tree[0])\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4631,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    trees = sorted(list(map(int, stdin.split())))\n    people = sorted(list(map(int, stdin.split())))\n    trees_pos = list(range(n))\n    tree_pos = list(range(m))\n\n    res = 0\n    for p in people:\n        min_dist = float(\"inf\")\n        for t in trees_pos:\n            dist = abs(p - trees[t])\n            if dist < min_dist:\n                min_dist = dist\n                idx = t\n        res += min_dist\n        trees_pos.remove(idx)\n\n    return str(res)"
    },
    {
        "number": 4631,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.strip().split(' ')))\n    x = list(map(int, stdin.strip().split(' ')))\n    y = list(map(int, stdin.strip().split(' ')))\n\n    # We sort the x array to find the closest points to the x[i] array\n    x.sort()\n    # We sort the y array to find the closest points to the y[j] array\n    y.sort()\n    if m > n:\n        raise ValueError()\n    elif m == 0:\n        return ''\n\n    # We initialize our result to a value that will never be the minimum result\n    result = float('inf')\n    for i in range(n):\n        # We find the minimum distance for the first m people\n        d = sum(abs(x[i] - y[j]) for j in range(m))\n        # If the new minimum distance is smaller than our current result\n        if d < result:\n            # We set our result to the new minimum distance\n            result = d\n            # And the result array to our new y array\n            result_y = y\n    return '\\n'.join(map(str, result_y))"
    },
    {
        "number": 4631,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    trees = sorted(map(int, stdin.split()))\n    humans = [int(x) for x in stdin.split()]\n    res = 0\n    for h in humans:\n        res = max(res, trees[0] - h)\n    for i in range(1, len(trees)):\n        res = max(res, trees[i] - trees[i - 1])\n    return str(res)\n\nassert(solution(input) == '8')\nprint(solution(input))\n"
    },
    {
        "number": 4631,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n@pytest.mark.parametrize(\n    ('input_s', 'expected'),\n    (\n        ('3 5', '-1 2 6 4 0 3'),\n    ),\n)\ndef"
    },
    {
        "number": 4631,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = [x for x in stdin.split(\"\\n\")]\n    n, m = int(data[0].split()[0]), int(data[0].split()[1])\n    data = data[1:]\n\n    x = [int(x) for x in data[0].split()]\n    y = [int(x) for x in data[1].split()]\n    print(x, y)\n    \n    x_x = sorted([abs(i - j) for i in x for j in y])\n    x_y = sorted([abs(i - j) for j in y for i in x])\n    print(x_x)\n    print(x_y)\n\n    return\n"
    },
    {
        "number": 4631,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    xs = tuple(int(x) for x in stdin.split())\n    print(min_distances(n, m, xs))\n\ndef"
    },
    {
        "number": 4631,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n\n    n, m = [int(i) for i in stdin[0].split()]\n    pos = [int(i) for i in stdin[1].split()]\n\n    print(min_dist(n, m, pos))\n\n\ndef"
    },
    {
        "number": 4631,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    return solution_old(x, n, m)\n\n\ndef"
    },
    {
        "number": 4631,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n\n    trees = list(map(int, stdin.readline().split()))\n    humans = list(map(int, stdin.readline().split()))\n\n    trees.sort()\n    humans.sort()\n\n    result = None\n    min_sum = None\n    for i in range(len(humans)):\n        if not min_sum:\n            min_sum = abs(humans[i] - trees[i])\n            result = humans[i]\n        elif abs(humans[i] - trees[i]) < min_sum:\n            min_sum = abs(humans[i] - trees[i])\n            result = humans[i]\n\n    print(min_sum)\n    for i in range(len(trees)):\n        print(trees[i], result)\n"
    },
    {
        "number": 4632,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    print(...)\n    return...\n\nFor the last test case the optimal path RRRUUU is shown below:  [Image]\ndef"
    },
    {
        "number": 4632,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nFor the second test case in the example the optimal path RRRUUU is shown below:  [Image]\ndef"
    },
    {
        "number": 4632,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    n = int(n)\n    if n == 0:\n        return \"NO\"\n    for _ in range(n):\n        x, y = stdin.readline().strip().split()\n        x = int(x)\n        y = int(y)\n        if x == 0 and y == 0:\n            return \"NO\"\n        if x > 0:\n            u = 'U'\n        else:\n            u = 'D'\n        if y > 0:\n            r = 'R'\n        else:\n            r = 'L'\n        path = u + r * abs(x)\n    return path"
    },
    {
        "number": 4632,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\nFor the second test case in the example the optimal path RRRUUU is shown below:  [Image]\ndef"
    },
    {
        "number": 4632,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nFor the other test cases, print YES and the shortest path.\n\nThis question is a follow-up of the one on Subsets. The first input line contains T, the number of test cases. The first line of each test case contains N, the number of packages. The next N lines describe the packages. You can assume that there are no two packages with the same coordinates. The sum of the values in the input does not exceed 1000.\n\nT: the number of test cases\nN: the number of packages\n\nEach of the next N lines contains two integers x and y, and the $i$-th line describes a package with coordinates $(x_i, y_i)$.\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4632,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe code must be single-threaded.\n\nIn the second test case, the path YES is not possible.\n\n\n-----Test-----\nThe third test case doesn't have a solution.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4632,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.strip().split('\\n')\n    n = int(stdin_list[0])\n    packages = []\n    for i in range(1, len(stdin_list)):\n        packages.append(tuple(map(int, stdin_list[i].strip().split())))\n    packages.sort(key=lambda x: x[1] + x[0])\n    packages.sort(key=lambda x: x[0])\n    packages.sort(key=lambda x: x[1])\n\n    path = []\n\n    def find_path(point: tuple) -> None:\n        nonlocal path\n        if len(path) == n:\n            return\n        if point[0] == 0 and point[1] == 0:\n            return\n        if point[0] + 1 < n and point[0] + 1 == packages[point[0] + 1][1] and point[1] == packages[point[0] + 1][0]:\n            find_path((point[0] + 1, point[1]))\n        if point[1] + 1 < n and point[1] + 1 == packages[point[1] + 1][0] and point[0] == packages[point[1] + 1][1]:\n            find_path((point[0], point[1] + 1))\n        path.append('U')\n        find_path((point[0] - 1, point[1]))\n        path.append('R')\n        find_path((point[0], point[1] - 1))\n        path.append('U')\n        find_path((point[0] + 1, point[1]))\n        path.append('R')\n        find_path((point[0], point[1] + 1))\n\n    find_path((0, 0))\n    print(path)\n    if len(path)!= n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(''.join(path))\n    return None\n"
    },
    {
        "number": 4632,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(solution)\n\n\"\"\"\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4632,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4632,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nFor the second test case in the example the optimal path RRRUUU is shown below:  [Image]\ndef"
    },
    {
        "number": 4633,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4633,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, s = map(int, stdin.split())\n        moves = 0\n        if s == n:\n            print(0)\n            continue\n        while True:\n            if str(n)[-1] < str(s):\n                n = int(str(n)[0]) + 1 + int(str(n)[1])\n                moves += 1\n            elif str(n)[-1] > str(s):\n                n = int(str(n)[0]) + int(str(n)[1])\n                moves += 1\n            else:\n                break\n        print(moves)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4633,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    n, s = [int(x) for x in stdin.split(' ')]\n    count = 0\n    while n!= s:\n        if n % 10 < s:\n            n += 1\n        else:\n            n -= 9\n        count += 1\n    return count"
    },
    {
        "number": 4633,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nassert(solution(stdin) == \"\")\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4633,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, s = tuple(int(x) for x in stdin.readline().split())\n        i = 1\n        while n!= 0:\n            n += i\n            i += 1\n        stdout.write(str(i - 1))\nsolution(stdin)\n"
    },
    {
        "number": 4633,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4633,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    s = int(s)\n    res = 0\n    while n > s:\n        res += 1\n        n -= 9\n        n += 1\n    return res\n"
    },
    {
        "number": 4633,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.codewars.com/kata/50e9c04c6678e3a7b9000c5a\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4633,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    test_cases = []\n    for _ in range(n):\n        test_cases.append(list(map(int, stdin.readline().strip().split())))\n    for test_case in test_cases:\n        print(minimum_moves(test_case[0], test_case[1]))"
    },
    {
        "number": 4633,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline()"
    },
    {
        "number": 4634,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split()]\n        moves = 0\n        for i in range(1, len(a)):\n            if a[i] == 1 and a[i - 1] == 0:\n                moves += 1\n            elif a[i] == 0 and a[i - 1] == 1:\n                moves += 1\n        print(moves)"
    },
    {
        "number": 4634,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4634,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = [int(i) for i in stdin.readline().split()]\n        m = 0\n        for i in range(n):\n            if a[i] == 1:\n                m += i + 1\n        print(m)"
    },
    {
        "number": 4634,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\nstdin = stdin.split('\\n')\nt = int(stdin[0])\n\nfor i in range(1, t + 1):\n    n = int(stdin[i])\n    a = list(map(int, stdin[i + 1].split(' ')))\n    print(solution(a))\n"
    },
    {
        "number": 4634,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = stdin[1]\n    a = [int(a[i]) for i in range(len(a))]\n    r = 0\n    m = 0\n    while r < len(a) - 1:\n        m += 1\n        if a[r + 1] == 0:\n            r += 1\n        elif a[r] == 1 and r + 1 == len(a) - 1:\n            m += 1\n            r += 1\n        else:\n            while a[r] == 1 and r + 1!= len(a) - 1:\n                r += 1\n            if a[r] == 0 and a[r + 1] == 0:\n                m += 1\n                r += 1\n            else:\n                m += 1\n    return str(m)\nprint(solution(stdin))\n"
    },
    {
        "number": 4634,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        print(n - (a.count(0) + a.count(1)))\n    return ''"
    },
    {
        "number": 4634,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.strip().split(\" \")\n    a = [int(x) for x in a]\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i]\n    b[0] = 0\n    for i in range(1, n):\n        if b[i] == 0:\n            b[i] = b[i - 1] + 1\n    moves = 0\n    j = n - 1\n    while j > 0:\n        if b[j]!= b[j - 1] + 1:\n            moves += (b[j] - b[j - 1] - 1)\n            b[j] = b[j - 1] + 1\n            j -= 1\n        j -= 1\n    print(moves)\n    return \"\"\n"
    },
    {
        "number": 4634,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        cnt = 0\n        for i in range(n-1):\n            if a[i] == 0:\n                cnt += 1\n                for j in range(i+1, n):\n                    if a[j] == 1:\n                        cnt += 1\n                        a[i], a[j] = a[j], a[i]\n                        break\n        print(cnt)\nsolution(\"\")\n"
    },
    {
        "number": 4634,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    \n"
    },
    {
        "number": 4634,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    a_shifted = [0] * n\n    # put all books on bookshelf to a_shifted\n    for i in range(n):\n        a_shifted[i] = 1 if a[i] == 1 else 0\n    # compute shifts for books\n    shifts = 0\n    shift_array = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if a_shifted[i - 1] == 1 and a_shifted[i] == 0:\n            shift = 1\n            while shift:\n                if a_shifted[i - shift] == 1:\n                    a_shifted[i - shift] = 0\n                    shift_array[i] += shift\n                    shifts += 1\n                    shift -= 1\n                else:\n                    shift = 0\n    # compute the number of moves needed to fill the bookshelf\n    for i in range(n):\n        shifts += shift_array[i + 1] - shift_array[i]\n    # print(shifts)\n    return str(shifts)"
    },
    {
        "number": 4635,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    for _ in range(N):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        result = ''.join(min(s, chr(97 + i)) for i in range(k))\n        print(result)\n"
    },
    {
        "number": 4635,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lines = []\n    for _ in range(n):\n        n, k = [int(x) for x in stdin.readline().strip().split(' ')]\n        lines.append((n, k))\n    return '\\n'.join(solution_naive(lines))\n\ndef"
    },
    {
        "number": 4635,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    for i in range(1, k + 1):\n        s1 = s[0:i]\n        if len(s1) == n:\n            if not any(c in s1 for c in 'abcdefghijklmnopqrstuvwxyz'):\n                return s1\n    return ''"
    },
    {
        "number": 4635,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = []\n    for _ in range(n):\n        l.append(sorted(list(stdin.strip())))\n    res = set()\n    for i in range(1, k+1):\n        s = ''\n        for j in range(n):\n            s += l[j][i-1]\n        res.add(s)\n    return '\\n'.join(sorted(res))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4635,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = \"a\" * n\n    for _ in range(k):\n        n, k = [int(x) for x in stdin.split()]\n        s = \"\".join(s[x] for x in range(n, n + k))\n    return s"
    },
    {
        "number": 4635,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    queries_count = int(stdin.readline())\n    for _ in range(queries_count):\n        n, k = [int(x) for x in stdin.readline().split()]\n        print(\"\".join([x for x in stdin.readline().rstrip() if x == stdin.readline()[0]]))\n    return"
    },
    {
        "number": 4635,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom typing import List\n\nfrom solutions.kyu_8.the_mighty_knight_ii import solution\n\nEXAMPLES: List[str] = [\n    (\n        ('stdin', 'expected', 'actual'),\n        [\n            (\n                ('3\\n7 3\\n4 4', 'cbcacab', 'cbcacab'),\n            ),\n            (\n                ('4\\n6 2', 'abcd', 'baabab'),\n            ),\n            (\n                ('2\\n6 3', 'abcd', 'baabab'),\n            ),\n        ],\n        [\n            'cbcacab',\n            'abcd',\n            'baabab',\n        ]\n    ),\n]\n\n\ndef"
    },
    {
        "number": 4635,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4635,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, k = map(int, stdin.split())\n        # Algorithm: find a string of length n that has a maximum minimal frequency\n        # 1) count each letter in the string\n        # 2) construct a dict of frequency\n        # 3) compare the frequency in the string to the frequency in the dict\n        # 4) if there is a letter with the frequency in the string,\n        #    choose the string with the highest frequency\n        # 5) return the result\n        # time complexity: O(n)\n        # space complexity: O(n)\n        # best = 0\n        # worst = n\n        # while worst - best > 1:\n        #     mid = (worst + best) // 2\n        #     if count_in_string(n, mid) <= k:\n        #         best = mid\n        #     else:\n        #         worst = mid\n        # if count_in_string(n, best) > k:\n        #     best = worst\n        # answer = \"\"\n        # for i in range(1, k + 1):\n        #     if count_in_string(n, best) == i:\n        #         answer += chr(ord('a') + i - 1)\n        #     else:\n        #         answer += chr(ord('a') + best - 1)\n        # print(answer)\n        # return answer\n        # brute force with memoization\n        # O(kn)\n        memo = {}\n        for i in range(1, n + 1):\n            for j in range(1, min(i, 26) + 1):\n                memo[(i, j)] = count_in_string(n, j)\n        if k < n:\n            k = n - k\n        answer = \"\"\n        for i in range(1, k + 1):\n            # for each letter in the string, we check if it is possible to make the string with a frequency equal to i\n            # for each letter, we check if the frequency of the letter is greater than i\n            # if there is a letter with a frequency of i, we choose the string with the highest frequency\n            f = 0\n            for j in range(1, min(i, 26) + 1):\n                if memo[(i, j)] > f:\n                    f = memo[(i, j)]\n                    answer += chr(ord('a') + f - 1)\n        print(answer)\n        return answer\n\n\ndef"
    },
    {
        "number": 4635,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    queries = [stdin.split() for _ in range(n)]\n    s = [solution(query) for query in queries]\n    return '\\n'.join(s)\n\ndef"
    },
    {
        "number": 4636,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return stdin\n"
    },
    {
        "number": 4636,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(s) for s in stdin.split(\"\\n\")[0].split(\" \")]\n    b = sum(a)\n    if n == 1:\n        return \"1 1 1\"\n    c = a[::-1]\n    last = 0\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if s > b:\n            s = 0\n            last = i\n    return f\"{last + 1} {b} {s}\""
    },
    {
        "number": 4636,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4636,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4636,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution('''\n7\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1 1 1 1\n7\n1 1 1 1 1 1 1\n''')\n\nsolution('''\n1\n2\n1\n2\n1\n2\n1\n2\n2\n2\n1\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n"
    },
    {
        "number": 4636,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    n_candies = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    m_candies = list(map(int, stdin.readline().split()))\n    a = 0\n    b = 0\n    for i in range(m):\n        if n_candies[-1] > m_candies[i]:\n            n_candies[-1] -= m_candies[i]\n            n_candies.append(m_candies[i])\n            b += m_candies[i]\n        else:\n            a += m_candies[i]\n            m_candies[i] -= n_candies[-1]\n            n_candies.pop()\n            b += n_candies[-1]\n    return '{} {} {}'.format(b, a, m)\n\n\nassert(solution('''7\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1 1 1 1\n7\n1 1 1 1 1 1 1\n''') == '6 23 21')\nassert(solution('''6\n1\n1\n1\n1\n1\n1\n1\n''') == '6 0 0')\nassert(solution('''7\n11\n3 1 4 1 5 9 2 6 5 3 5\n1\n1000\n3\n1 1 1\n13\n1 2 3 4 5 6 7 8 9 10 11 12 13\n2\n2 1\n6\n1 1 1 1 1 1\n7\n1 1 1 1 1 1 1\n''') == '6 45 46')\nassert(solution('''2\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 4636,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().split()]\n    B = [int(x) for x in stdin.readline().split()]\n    moves = 0\n    while True:\n        moves += 1\n        A = [a + b for a, b in zip(A, B)]\n        if sum(A) == sum(B):\n            break\n        moves += 1\n        A = [a - b for a, b in zip(A, B)]\n        if sum(A) == sum(B):\n            break\n    return f\"{moves}\\n{sum(A)}\\n{sum(B)}\""
    },
    {
        "number": 4636,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nsolution('''11\n    3 1 4 1 5 9 2 6 5 3 5\n    1\n    1000\n    3\n    1 1 1\n    13\n    1 2 3 4 5 6 7 8 9 10 11 12 13\n    2\n    2 1\n    6\n    1 1 1 1 1 1\n    7\n    1 1 1 1 1 1 1\n''')\n"
    },
    {
        "number": 4636,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = sys.stdin\n    test_cases = int(stdin.readline().strip())\n    # test_cases = 10\n    for _ in range(test_cases):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        # a = [1, 2, 3]\n        print(n)\n        print(a)\n"
    },
    {
        "number": 4637,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 4637,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')]\n    b = [int(i) for i in stdin.split(' ')]\n    for i in range(n):\n        a[i], b[i] = b[i], a[i]\n    a = a[::-1]\n    b = b[::-1]\n    k = k - 1\n    result = [0]*n\n    result[0] = max(a[0] + b[1], a[1] + b[0])\n    for i in range(1, n):\n        result[i] = max(result[i - 1], a[i] + b[i + 1], a[i] + b[i - 1], a[i - 1] + b[i], a[i - 1] + b[i - 1])\n    print(result[n - 1])"
    },
    {
        "number": 4637,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4637,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    testcases = int(stdin.readline().strip())\n    while testcases > 0:\n        n, k = [int(x) for x in stdin.readline().strip().split()]\n        a = [int(x) for x in stdin.readline().strip().split()]\n        b = [int(x) for x in stdin.readline().strip().split()]\n        print(max_sum(a, b, k))\n        testcases -= 1\n\n\ndef"
    },
    {
        "number": 4637,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split(' '))\n        a = list(map(int, stdin.readline().strip().split(' ')))\n        b = list(map(int, stdin.readline().strip().split(' ')))\n\n        a, b = merge_and_sort(a, b)\n\n        print(solution_naive(a, b, k))\n\ndef"
    },
    {
        "number": 4637,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('''5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n\n''')) == '6\\n27\\n39\\n11\\n17'\n"
    },
    {
        "number": 4637,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, k = [int(i) for i in stdin.split(\"\\n\")]\n    a, b = [int(i) for i in stdin.split(\"\\n\")[1:3]]\n    n = len(a)\n    c = 0\n    while c < k:\n        t = max(a)\n        x = b.index(t)\n        a[x], b[x] = b[x], a[x]\n        c += 1\n    return \"\".join([str(max(a)), \"\\n\", str(max(b))])\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4637,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n, k = [int(x) for x in stdin.readline().strip().split()]\n        a = [int(x) for x in stdin.readline().strip().split()]\n        b = [int(x) for x in stdin.readline().strip().split()]\n\n        if k > n:\n            print(0)\n            continue\n\n        a_max, b_max = 0, 0\n        for i in range(n):\n            a_max += a[i]\n            b_max += b[i]\n\n        if a_max > b_max:\n            print(a_max)\n            continue\n\n        swaps, a_max, b_max = 0, 0, 0\n        for i in range(n):\n            a_max += a[i]\n            b_max += b[i]\n\n            if a_max > b_max:\n                a_max -= a[i]\n                b_max += a[i]\n                swaps += 1\n\n            if a_max > b_max:\n                a_max -= a[i]\n                b_max += a[i]\n\n        if k - swaps > n - k:\n            print(b_max)\n        else:\n            print(a_max)"
    },
    {
        "number": 4637,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, k = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        b = list(map(int, stdin.split()))\n        a.sort()\n        b.sort()\n        m = 0\n        for i in range(n):\n            if k == 0:\n                break\n            if b[i] < a[i]:\n                b[i], a[i] = a[i], b[i]\n                m = max(m, a[i] + b[i])\n                k -= 1\n        print(m)\n        return \"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4638,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_floors, elevator_overhead = [int(x) for x in stdin.split()]\n    time_per_floor = [int(x) for x in stdin.split()]\n    stairs_time = time_per_floor[0]\n    elevator_time = time_per_floor[1] + elevator_overhead\n    min_time_to_reach = [0 for _ in range(number_of_floors)]\n    for floor in range(number_of_floors):\n        stairs_time += time_per_floor[floor + 1]\n        elevator_time += elevator_overhead\n        min_time_to_reach[floor] = max(stairs_time, elevator_time)\n    return''.join([str(x) for x in min_time_to_reach])"
    },
    {
        "number": 4638,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, c = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n    b = [int(n) for n in stdin.split()]\n    t = [0] * (n - 1)\n    for i in range(n - 1):\n        t[i] = a[i] + b[i] + c\n    return''.join([str(n) for n in t])"
    },
    {
        "number": 4638,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, c = [int(i) for i in stdin.strip().split(' ')]\n    stairs = [int(i) for i in stdin.strip().split(' ')]\n    elevator = [int(i) for i in stdin.strip().split(' ')]\n\n    def get_time(a, b, c):\n        total_time = 0\n        # stairs\n        total_time += a\n        # elevator\n        total_time += c\n        # floors\n        for i in range(1, n):\n            if i <= a + b:\n                total_time += (a + b + 1)\n            else:\n                total_time += (a + 1)\n        return total_time\n\n    result = [0] * n\n    for i in range(1, n):\n        result[i] = get_time(stairs[i - 1], elevator[i - 1], stairs[i])\n    return''.join(str(i) for i in result)\n"
    },
    {
        "number": 4638,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, c = [int(x) for x in stdin.split()]\n    a, b = [int(x) for x in stdin.split()]\n    stairs = [int(x) for x in stdin.split()]\n    elevator = [int(x) for x in stdin.split()]\n    # calculate time required for each floor\n    total = 0\n    for i, ai in enumerate(stairs):\n        total += ai\n    for i, bi in enumerate(elevator):\n        total += bi\n    stairs_time = total\n    elevator_time = total\n    # check if we can reach the n-th floor from the 1-st floor\n    # if we can, we can reach the n-th floor from the 1-st floor as well\n    stairs_flights = 0\n    stairs_time -= stairs_flights\n    elevator_flights = 0\n    elevator_time -= elevator_flights\n\n    # now we can calculate the time required to reach the n-th floor\n    # from the 1-st floor\n    for i in range(n - 1):\n        if i < n - 2:\n            stairs_flights += stairs[i]\n            stairs_time -= stairs_flights\n            elevator_flights += elevator[i]\n            elevator_time -= elevator_flights\n            # then we can reach the n-th floor from the 1-st floor\n            stairs_flights += stairs[i + 1]\n            stairs_time -= stairs_flights\n            elevator_flights += elevator[i + 1]\n            elevator_time -= elevator_flights\n        else:\n            stairs_flights += stairs[i]\n            stairs_time -= stairs_flights\n            elevator_flights += elevator[i]\n            elevator_time -= elevator_flights\n            stairs_flights += stairs[0]\n            stairs_time -= stairs_flights\n            elevator_flights += elevator[0]\n            elevator_time -= elevator_flights\n\n    return str(stairs_time) +'' + str(elevator_time)\n\n\nimport sys"
    },
    {
        "number": 4638,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n, c = map(int, stdin.split())\n    stairs, elevator, time = [], [], 0\n    stairs_stairs, stairs_elevator = [], []\n    stairs_stairs_stairs = [[0] * (n + 1) for _ in range(n + 1)]\n    stairs_elevator_stairs = [[0] * (n + 1) for _ in range(n + 1)]\n    stairs_stairs_elevator = [[0] * (n + 1) for _ in range(n + 1)]\n    stairs_elevator_stairs_stairs = [[0] * (n + 1) for _ in range(n + 1)]\n    for i, l in enumerate(stdin.splitlines()):\n        stairs.append(list(map(int, l.split())))\n        stairs_elevator.append(list(map(int, l.split())))\n        stairs_stairs.append(list(map(int, l.split())))\n        stairs_elevator_stairs.append(list(map(int, l.split())))\n        stairs_stairs_stairs.append(list(map(int, l.split())))\n        stairs_elevator_stairs_stairs.append(list(map(int, l.split())))\n    for j in range(n - 1):\n        time += stairs[0][j]\n        stairs_stairs_stairs[0][j + 1] = time\n        stairs_elevator_stairs_stairs[0][j + 1] = time + elevator[0][j]\n        stairs_elevator_stairs[0][j + 1] = time + elevator[0][j]\n    for i in range(1, n):\n        time = 0\n        for j in range(n - i):\n            time += stairs[i][j]\n            stairs_stairs_stairs[i][j + 1] = time + stairs_stairs_stairs[i - 1][j]\n            stairs_elevator_stairs_stairs[i][j + 1] = time + stairs_elevator_stairs[i - 1][j]\n            stairs_elevator_stairs[i][j + 1] = time + stairs_elevator_stairs[i - 1][j]\n        time = 0\n        for j in range(n - i, n):\n            time += elevator[i][j]\n            stairs_elevator_stairs_stairs[i][j + 1] = time + stairs_elevator_stairs_stairs[i - 1][j]\n            stairs_elevator_stairs[i][j + 1] = time + stairs_elevator_stairs[i - 1][j]\n            stairs_elevator_stairs[i][j + 1] = time + stairs_elevator_stairs[i - 1][j]\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            stairs_elevator_stairs_stairs[i][j + 1] = max(stairs_elevator_stairs_stairs[i][j + 1], stairs_elevator_stairs_stairs[i + 1][j])\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            stairs_stairs_stairs[i][j + 1] = max(stairs_stairs_stairs[i][j + 1], stairs_stairs_stairs[i + 1][j])\n    return \"\\n\".join(map(str, stairs_elevator_stairs_stairs[n - 1]))"
    },
    {
        "number": 4638,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    stairs = list(map(int, stdin.readline().split()))\n    elevator = list(map(int, stdin.readline().split()))\n\n    def find_time(n: int, stairs: List[int], elevator: List[int]) -> int:\n        last_time = 0\n        for i in range(n):\n            last_time = max(last_time, stairs[i]) + elevator[i]\n            stairs[i] += elevator[i]\n        return last_time\n\n    return''.join(map(str, find_time(T, stairs, elevator)))\n\n\nassert(solution(stdin_data) == stdout_data)"
    },
    {
        "number": 4638,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    results = []\n    for _ in range(n - 1):\n        if c:\n            results.append(a[-1] + b[-1])\n            a[-1] = max(a[-1] + b[-1], a[-1] + c)\n            b[-1] = max(a[-1] + b[-1], b[-1] + c)\n            c -= 1\n        else:\n            results.append(a[-1] + b[-1])\n            a[-1] = max(a[-1] + b[-1], a[-1] + c)\n            b[-1] = max(a[-1] + b[-1], b[-1] + c)\n            c = 0\n        a.append(0)\n        b.append(0)\n    return''.join(map(str, results))"
    },
    {
        "number": 4638,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, c = [int(x) for x in stdin.strip().split(' ')]\n    a = [int(x) for x in stdin.strip().split(' ')]\n    b = [int(x) for x in stdin.strip().split(' ')]\n    stairs = a\n    elevator = b\n    result = []\n    for floor in range(1, n):\n        stairs_time = sum(stairs[:floor])\n        elevator_time = sum(elevator[:floor])\n        stairs_time += sum(stairs[floor:])\n        elevator_time += sum(elevator[floor:])\n        result.append(stairs_time + elevator_time)\n    return''.join(map(str, result))\n\nassert(solution('''10 2\n7 6 18 6 16 18 1 17 17\n6 9 3 10 9 1 10 1 5''')) == '0 7 13 18 24 35 36 37 40 45'\nassert(solution('''10 1\n3 2 3 1 3 3 1 4 1\n1 2 3 4 4 1 2 1 3''')) == '0 2 4 7 8 11 13 14 16 17'\n\nprint(solution('''30 2\n17 5 30 1 8 30 10 15 8 9 7 19 11 22 10 22 11\n4 25 24 13 15 9 21 19 22 19 22 19 22 19 22 19 22 19\n7 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n14 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n7 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n6 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n8 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n9 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n10 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n12 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n8 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n10 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n14 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n6 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n8 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n10 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n12 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n14 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n16 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n12 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n14 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n18 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n10 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n14 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n16 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n20 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n18 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n14 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n16 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n20 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n22 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n18 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n14 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n16 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n20 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n22 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n22 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n22 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n22 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n22 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n22 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n22 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n22 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n22 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n22 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n22 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22 19 22\n22 22 19 22 19 22 19"
    },
    {
        "number": 4638,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    stairs = list(map(int, stdin.split()))\n    elevator = list(map(int, stdin.split()))\n    for i in range(1, n):\n        stairs[i] += stairs[i - 1]\n        elevator[i] += elevator[i - 1]\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i == j:\n                dp[i][j] = stairs[j - 1]\n            else:\n                dp[i][j] = min(stairs[j - 1], elevator[j - 1]) + dp[i][j - 1]\n    return''.join(map(str, dp[n][1:]))\n\nassert solution('''10 1''') == '0 2 4 7 8 11 13 14 16 17'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 1''') == '0 2 4 7 8 11 13 14 16 17'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 1''') == '0 2 4 7 8 11 13 14 16 17'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\nassert solution('''10 2''') == '0 7 13 18 24 35 36 37 40 45'\n"
    },
    {
        "number": 4638,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    stairs = list(map(int, stdin.split()))\n    elevator = list(map(int, stdin.split()))\n    return''.join(map(str, [sum(stairs[:i]) + sum(elevator[:i]) for i in range(n)]))\n\nassert(solution('5 2', '3 2 3 1 3 3', '6 9 3 10 9 1 10 1 5') == '0 7 13 18 24 35 36 37 40 45')\nassert(solution('3 1', '2 3 1', '1 2 3') == '0 2 4 7 8 11 13 14 16 17')\nassert(solution('3 2', '2 3 1', '1 2 3') == '0 2 4 7 8 11 13 14 16 17')\nassert(solution('4 2', '2 3 1 3', '4 4 1 2 1 2 1 1') == '0 2 4 7 13 19 22 25 26 27 28 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 47 48 49 50')\nassert(solution('1 1', '1 1', '1') == '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50')\n"
    }
]