[
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin:\n    8\n    1 2\n    2 3\n    3 4\n    4 5\n    4 6\n    3 7\n    3 8\n    \n    output:\n    5\n    1 8 6\n    '''\n    n = stdin.splitlines()[0]\n    \n    graph = {}\n    \n    for line in stdin.splitlines()[1:]:\n        a, b = line.split()\n        if a not in graph:\n            graph[a] = []\n        graph[a].append(b)\n        if b not in graph:\n            graph[b] = []\n        graph[b].append(a)\n    \n    max_edges = 0\n    \n    for a in graph:\n        for b in graph:\n            for c in graph:\n                if a == b or a == c:\n                    continue\n                path_a_to_b = set(graph[a])\n                path_b_to_c = set(graph[b])\n                path_a_to_c = set(graph[c])\n                if len(path_a_to_b.intersection(path_b_to_c)) > max_edges:\n                    max_edges = len(path_a_to_b.intersection(path_b_to_c))\n    \n    return str(max_edges)"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    tree = stdin.split('\\n')\n    tree = [[int(x) for x in line.split()] for line in tree]\n    n = len(tree)\n    edges = [[] for i in range(n)]\n    for i in range(n - 1):\n        edges[tree[i][0]].append(tree[i][1])\n        edges[tree[i][1]].append(tree[i][0])\n    for i in range(n - 1):\n        edges[tree[i][0]].sort()\n        edges[tree[i][1]].sort()\n    candidates = []\n    for i in range(n):\n        for j in range(i, n):\n            if edges[i] == edges[j]:\n                candidates.append([i, j])\n    candidates.sort(key=lambda x: len(edges[x[0]]))\n    print(len(edges[candidates[-1][0]]))\n    print(*candidates[-1])\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n_author_ = 'jake'\n_project_ = 'leetcode'"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\n>>> solution(\"4\\n4 1\\n4 2\\n4 3\\n\")\n'1 8 6'\n>>> solution(\"7\\n7 1\\n7 2\\n7 3\\n7 4\\n7 5\\n7 6\\n7 7\\n\")\n'1 6 4'\n\n>>> solution(\"1\\n1 1\\n\")\n'1'\n>>> solution(\"2\\n1 1\\n\")\n'1 1'\n>>> solution(\"8\\n8 1\\n8 2\\n8 3\\n8 4\\n8 5\\n8 6\\n8 7\\n\")\n'1 7 4'\n>>> solution(\"2\\n2 1\\n\")\n'1'\n>>> solution(\"3\\n3 1\\n3 2\\n3 3\\n\")\n'1 2 3'\n>>> solution(\"8\\n8 1\\n8 2\\n8 3\\n8 4\\n8 5\\n8 6\\n8 7\\n\")\n'1 6 4'\n>>> solution(\"2\\n2 1\\n2 2\\n2 3\\n\")\n'1'\n>>> solution(\"2\\n1 1\\n1 2\\n\")\n'1 1'\n>>> solution(\"2\\n2 1\\n2 2\\n2 3\\n\")\n'1 1'\n>>> solution(\"7\\n7 1\\n7 2\\n7 3\\n7 4\\n7 5\\n7 6\\n7 7\\n\")\n'1 6 4'\n>>> solution(\"8\\n8 1\\n8 2\\n8 3\\n8 4\\n8 5\\n8 6\\n8 7\\n\")\n'1 6 4'\n>>> solution(\"4\\n4 1\\n4 2\\n4 3\\n\")\n'1 8 6'\n>>> solution(\"7\\n7 1\\n7 2\\n7 3\\n7 4\\n7 5\\n7 6\\n7 7\\n\")\n'1 6 4'\n>>> solution(\"2\\n2 1\\n2 2\\n2 3\\n\")\n'1'\n>>> solution(\"3\\n3 1\\n3 2\\n3 3\\n\")\n'1 2 3'\n>>> solution(\"8\\n8 1\\n8 2\\n8 3\\n8 4\\n8 5\\n8 6\\n8 7\\n\")\n'1 6 4'\n>>> solution(\"2\\n2 1\\n2 2\\n2 3\\n\")\n'1'\n>>> solution(\"3\\n3 1\\n3 2\\n3 3\\n\")\n'1 2 3'\n>>> solution(\"8\\n8 1\\n8 2\\n8 3\\n8 4\\n8 5\\n8 6\\n8 7\\n\")\n'1 6 4'\n>>> solution(\"2\\n2 1\\n2 2\\n2 3\\n\")\n'1'\n>>> solution(\"3\\n3 1\\n3 2\\n3 3\\n\")\n'1 2 3'\n>>> solution(\"8\\n8 1\\n8 2\\n8 3\\n8 4\\n8 5\\n8 6\\n8 7\\n\")\n'1 6 4'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The problem can be solved using Dijkstra algorithm.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    graph = defaultdict(dict)\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        graph[a][b] = graph[b][a] = 1\n    a, b, c = map(int, stdin.readline().split())\n    distances = dijkstra(graph, a, b)\n    for c in (c, b, a):\n        if distances[c] > distances[a] + distances[b]:\n            return \"IMPOSSIBLE\"\n    return str(max(distances[a], distances[b], distances[c]))\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check(u: int, v: int) -> bool:\n        if u > v:\n            u, v = v, u\n        u_id = depth_to_id[u]\n        for e in edges[u_id]:\n            if e[0] == v:\n                return True\n        return False\n\n    n = int(stdin)\n    edges = [[] for _ in range(n)]\n    depth_to_id = [0] * (n + 1)\n    for i in range(1, n):\n        a, b = [int(j) for j in stdin.split()]\n        depth_to_id[i + 1] = depth_to_id[a] + 1\n        depth_to_id[i + 1] = depth_to_id[b] + 1\n        edges[depth_to_id[a]].append((b, i + 1))\n        edges[depth_to_id[b]].append((a, i + 1))\n    # edges = [[(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)], [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)], [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)], [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)], [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)], [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]]\n    m = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if check(i + 1, j + 1) or check(j + 1, k + 1) or check(i + 1, k + 1):\n                    m = max(m, i + 1, j + 1, k + 1)\n    return str(m)"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    a, b, c = map(int, stdin.readline().split())\n    edges = [map(int, line.split()) for line in stdin]\n    def is_path(path: List[int]) -> bool:\n        i = 0\n        while i < len(path) - 1:\n            j = i + 1\n            while j < len(path):\n                if j == len(path) - 1:\n                    return True\n                if path[i] == path[j]:\n                    return False\n                j += 1\n            i += 1\n        return True\n    def check(edges: List[List[int]]) -> int:\n        paths = []\n        for i in range(1, n):\n            for j in range(i, n):\n                if edges[i][j] == 1:\n                    paths.append(list(range(i, j + 1)))\n        max_val = 0\n        for path in paths:\n            if is_path(path):\n                max_val = max(max_val, len(path))\n        return max_val\n    return str(check(edges))"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data: List[List[int]] = list()\n    for line in stdin.strip().split('\\n'):\n        data.append(list(map(int, line.split(' '))))\n    n: int = data[0][0]\n    tree: List[List[int]] = data[1:n + 1]\n    m: int = data[n + 1][0]\n    cl: List[List[int]] = data[n + 2:]\n\n    def count_edges(edges: List[List[int]]) -> int:\n        edges_count: int = 0\n        for edge in edges:\n            if edge[0]!= edge[1]:\n                edges_count += 1\n        return edges_count\n\n    # for edge in tree:\n    #     if edge[0]!= edge[1]:\n    #         print(edge)\n\n    edges_count: int = count_edges(tree)\n    print(edges_count)\n    return ''\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    g = [[] for _ in range(n)]\n    for line in stdin.strip().split('\\n')[1:]:\n        a, b = map(int, line.split())\n        g[a - 1].append(b - 1)\n        g[b - 1].append(a - 1)\n    c = 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            for k in range(n):\n                if k == j or k == i:\n                    continue\n                p1, p2 = g[i], g[j]\n                if k in p1 and k in p2:\n                    c = max(c, len(p1) + len(p2) - 2)\n    return str(c)\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    divs: List[int] = [int(d) for d in stdin.split()]\n    divs.sort()\n    a = divs[0]\n    b = divs[len(divs) - 1]\n    while a % b!= 0:\n        a = (a + 1) // b\n        b = (b + 1) // a\n    return str(a) +'' + str(b)"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    divisors_of_x, divisors_of_y = [], []\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    for i in x:\n        if i not in divisors_of_x:\n            divisors_of_x.append(i)\n    y = list(map(int, stdin.readline().split()))\n    for i in y:\n        if i not in divisors_of_y:\n            divisors_of_y.append(i)\n    permutation = []\n    for i in divisors_of_x:\n        if i in divisors_of_y:\n            permutation.append(i)\n    if permutation:\n        x, y = permutation[0], permutation[1]\n    else:\n        for i in divisors_of_x:\n            for j in divisors_of_y:\n                if i!= j and i % j == 0 and j % i == 0:\n                    x, y = i, j\n    return str(x) + \" \" + str(y)\n\n\nassert(solution('''10\n10 2 8 1 2 4 1 20 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n10 2 8 1 2 4 1 20 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n10 2 8 1 2 4 1 20 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n10 2 8 1 2 4 1 20 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') == '20 8')\nassert(solution('''10\n1 1 2 2 3 3 4 4 5''') =="
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    divisors = [int(x) for x in stdin.readline().strip().split()]\n    x, y = 0, 0\n    for i in range(1, n):\n        if i not in divisors:\n            x += 1\n        if i % 2 not in divisors:\n            y += 1\n    return f'{x} {y}'\n\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = [int(i) for i in stdin.split()]\n    print(int(''.join(d[:n])))\n    print(int(''.join(d[n:])))\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the answer as a string. (This is a docstring also.)\n    \"\"\"\n    n = int(stdin.readline())\n    divisors_of_x = set()\n    divisors_of_y = set()\n    divisors = set()\n    for _ in range(n):\n        d = int(stdin.readline())\n        if d in divisors_of_x:\n            divisors.add(d)\n        elif d in divisors_of_y:\n            divisors.add(d)\n        else:\n            divisors_of_x.add(d)\n            divisors_of_y.add(d)\n    if len(divisors) == 0:\n        return '0 0'\n    divisors = sorted(divisors)\n    x = divisors[0]\n    y = divisors[0]\n    for d in divisors[1:]:\n        if d in divisors_of_x:\n            x *= d\n        else:\n            y *= d\n    return str(x) +'' + str(y)"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = sorted(map(int, stdin.readline().split()))\n    pairs = 0\n    for i in range(1, n):\n        if d[i] == d[i - 1]:\n            pairs += 1\n    if pairs == 0:\n        return '0 0'\n    else:\n        index = 0\n        while d[index] == d[index - 1]:\n            index += 1\n        while d[index] == d[index + 1]:\n            index += 1\n        return '{} {}'.format(d[index], d[index - 1])"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = tuple(map(int, stdin.split()))\n    d = sorted(set(int(d) for d in stdin.split()))\n    res = []\n    for i in range(len(d) // 2):\n        res.append(d[i])\n        res.append(d[len(d) - 1 - i])\n    res.append(d[len(d) // 2])\n    return''.join(str(i) for i in res)\n\n\nassert solution('''10''') == '''8'''\nassert solution('''5''') == '''10'''\nassert solution('''10 3''') == '''8'''\nassert solution('''10 1''') == '''2'''\nassert solution('''10 2''') == '''3'''\nassert solution('''10 2 5''') == '''3'''\nassert solution('''10 2 8 1 2 4 1 20 4 5''') == '''20 8'''\nassert solution('''100 10 100 1''') == '''1'''\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ninput = sys.stdin.read()\nn = int(input.split()[0])\nd = list(map(int, input.split()[1:]))\n\nx = 1\nfor i in d:\n    x = x * i\n\ny = 1\nfor i in d:\n    y = y * i"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = list(map(int, stdin.readline().split()))\n    ans = [-1, -1]\n    divisors = sorted(divisors)\n    l = len(divisors)\n    i = 0\n    j = 0\n    while i < l and j < l:\n        if divisors[i] < divisors[j]:\n            ans[0] = divisors[i]\n            i += 1\n        elif divisors[i] > divisors[j]:\n            ans[1] = divisors[j]\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return \" \".join(map(str, ans))\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.readline().strip())\n    d = [int(d) for d in stdin.readline().strip().split()]\n    d_set = set(d)\n    l = [d.count(d) for d in d_set]\n    if max(l) < 2:\n        return 'NO'\n    if len(d_set) == 1:\n        return f'{d[0]} {d[0]}'\n    m = max(l)\n    for i in range(2, 11):\n        if m == l[i-2]:\n            return f'{d[i-2]} {d[i-1]}'\n    return 'NO'\n\n\nprint(solution('''4\n1 2 4 1 2 4 1 2 2 4 1 2 2 4'''))\nprint(solution('''4\n1 2 4 1 1 4 1 1 4 1 1 2 4'''))\nprint(solution('''4\n1 2 4 1 2 2 4 1 2 1 4 1 2 2 4'''))\nprint(solution('''4\n1 2 4 1 2 1 4 1 1 2 2 2 4'''))\nprint(solution('''4\n1 2 2 2 2 1 4 1 2 4 1 2 1 4'''))\nprint(solution('''4\n1 2 2 2 2 1 4 1 2 1 4 1 1 4'''))\nprint(solution('''4\n1 2 2 1 4 1 1 2 4 1 2 1 4'''))\nprint(solution('''4\n1 2 4 1 2 1 4 1 1 2 2 4'''))\nprint(solution('''4\n1 2 4 1 2 1 4 1 1 2 1 4'''))\nprint(solution('''4\n1 2 4 1 1 1 1 1 2 1 2 1 1 1 4'''))\nprint(solution('''4\n1 2 1 1 1 1 1 2 1 2 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols, sum_divisibility = [int(x) for x in stdin.split(' ')]\n    matrix = []\n    for i in range(rows):\n        row = [int(x) for x in stdin.split(' ')]\n        matrix.append(row)\n    n = len(matrix)\n    m = len(matrix[0])\n    row_sums = [0 for x in range(n)]\n    for i in range(n):\n        row_sum = 0\n        for j in range(m):\n            row_sum += matrix[i][j]\n        row_sums[i] = row_sum\n    row_sums = [x for x in row_sums if x % sum_divisibility == 0]\n    return str(max(row_sums))"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nimport sys\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(n) for n in stdin.split()]\n    a = [[int(n) for n in stdin.split()] for _ in range(n)]\n    max_sum = 0\n    for row in range(0, len(a), 2):\n        row_sum = sum(a[row][m // 2:m // 2 + m // 2])\n        if row_sum > max_sum:\n            max_sum = row_sum\n    return str(max_sum)\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the max sum divisible by k\"\"\"\n    n, m, k = map(int, stdin.split())\n    a = [map(int, stdin.split()) for _ in range(n)]\n    # find the biggest row\n    row_sums = [sum(row) for row in a]\n    max_sum = max(row_sums)\n    # check all elements and choose the ones that sum to max_sum\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == max_sum:\n                res += max_sum\n    return str(res)\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nn, m, k = map(int, stdin.readline().split(' '))\na = [list(map(int, stdin.readline().split(' '))) for _ in range(n)]\nb = [0] * m\nfor i in range(n):\n    for j in range(m // 2):\n        b[j] = max(b[j], sum(a[i][j:j + 2]))\nprint(max(b) % k)\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols, k = map(int, stdin.split())\n    numbers = []\n    for _ in range(rows):\n        numbers.append(list(map(int, stdin.split())))\n    max_sum = 0\n    for row in numbers:\n        for i in range(cols // 2):\n            if sum(row[i:i + (cols // 2)]) % k == 0:\n                max_sum = max(max_sum, sum(row[i:i + (cols // 2)]))\n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\nTestcases\n\ninputCopy\n3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\n\noutputCopy\n24\n\ninputCopy\n5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\n\noutputCopy\n56\n\ninputCopy\n5 5 2\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\n\noutputCopy\n42\n\ninputCopy\n6 4 3\n10 1 1 1 1 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6\n\noutputCopy\n42\n\ninputCopy\n3 3 1\n1 2 4\n2 3 5\n1 2 4\n\noutputCopy\n0\n\ninputCopy\n3 3 2\n2 1 2\n2 2 2\n2 3 3\n2 4 4\n\noutputCopy\n5\n\"\"\"\nimport sys\nsys.path.append(\"../../../../master-thesis/code/\")\n\nfrom typing import List\nfrom itertools import product\nfrom math import floor\nfrom fractions import Fraction\nfrom math import gcd\nfrom itertools import permutations\nfrom functools import lru_cache\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(s) for s in stdin.split(\" \")]\n    a = [[int(s) for s in stdin.split(\" \")] for _ in range(n)]\n    sums = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if j < m / 2:\n                sums[i][j] = sum(a[i][:j + 1])\n            else:\n                sums[i][j] = sum(a[i][j - m / 2 + 1:j + 1])\n    max_sum = 0\n    for i in range(n):\n        for j in range(m):\n            if i < n / 2:\n                if j < m / 2:\n                    max_sum = max(max_sum, sums[i][j] - sums[i][j - m / 2] + k)\n                else:\n                    max_sum = max(max_sum, sums[i][j] - sums[i][j - m / 2] - k)\n            else:\n                if j < m / 2:\n                    max_sum = max(max_sum, sums[i][j] - sums[i - n / 2][j] + k)\n                else:\n                    max_sum = max(max_sum, sums[i][j] - sums[i - n / 2][j] - k)\n    return str(max_sum)\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n\n    d = {}\n\n    for _ in range(n):\n        row = [int(i) for i in stdin.split()]\n        max_sum = 0\n\n        for i in range(m):\n            if row[i] % k == 0:\n                sum_ = row[i]\n\n                if sum_ > max_sum:\n                    max_sum = sum_\n                elif sum_ in d:\n                    d[sum_] = max(d[sum_], row[i])\n\n        print(max_sum)\n\n    for val in d.values():\n        if val:\n            print(val)\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdin"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n----O(n) time, O(n) space\n----O(n) time, O(n) space\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom sys import stdin,stdout\nn=int(stdin.readline().strip())\na=list(map(int,stdin.readline().strip().split()))\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\""
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    a.sort()\n    k = 1\n    if a[0] > 0:\n        a.insert(0, 0)\n    for i in range(1, n + 1):\n        if a[i] > a[i - 1]:\n            k += 1\n        else:\n            break\n    s = ''\n    for i in range(k):\n        if i % 2 == 1:\n            s += 'R'\n        else:\n            s += 'L'\n    return s\n\nsolution(\"\"\"6\n1 2 4 3 2\n\"\"\") == \"LRRR\"\n\nsolution(\"\"\"5\n2 2 2\n\"\"\") == \"LLRR\"\n\nsolution(\"\"\"7\n1 3 5 6 5 4 2\n\"\"\") == \"LRLRRR\"\n\nsolution(\"\"\"3\n2 2 2\n\"\"\") == \"R\"\n\nsolution(\"\"\"4\n1 2 4 3\n\"\"\") == \"LLRR\"\n\nsolution(\"\"\"12\n1 2 4 3 5 6 8 7 9 10 11\n\"\"\") == \"LRLRLRLRLR\"\n\nsolution(\"\"\"100\n1 2 4 3 5 6 8 7 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n\"\"\") == \"LRLRLRLRLR\"\n\nsolution(\"\"\"1\n1\n\"\"\") == \"R\"\n\nsolution(\"\"\"1\n1\n1\n1\n1\n\"\"\") == \"R\"\n\nsolution(\"\"\"1\n2\n1\n\"\"\") == \"R\"\n\nsolution(\"\"\"1\n2\n1\n1\n\"\"\") == \"R\"\n\nsolution(\"\"\"2\n2\n1 2\n\"\"\") == \"LRL\"\n\nsolution(\"\"\"2\n2\n2 1\n\"\"\") == \"RLL\"\n\nsolution(\"\"\"2\n2\n2 1\n\"\"\") == \"RLR\"\n\nsolution(\"\"\"2\n2\n2 2\n\"\"\") == \"LRL\"\n\nsolution(\"\"\"2\n2\n2 2\n\"\"\") == \"LLR\"\n\nsolution(\"\"\"2\n2\n2 2\n\"\"\") == \"RRR\"\n\nsolution(\"\"\"2\n2\n2 1\n\"\"\") == \"RLL\"\n\nsolution(\"\"\"2\n2\n1 1\n\"\"\") == \"LRL\"\n\nsolution(\"\"\"2\n2\n1 1\n\"\"\") == \"RRL\"\n\nsolution(\"\"\"2\n2\n1 1\n\"\"\") == \"RLL\"\n\nsolution(\"\"\"2\n2\n1 1\n\"\"\") == \"RRR\"\n\nsolution(\"\"\"2\n2\n1 1\n\"\"\") == \"RLL\"\n\nsolution(\"\"\"3\n3\n1 2 3\n\"\"\") == \"LRLRR\"\n\nsolution(\"\"\"3\n3\n1 2 3\n\"\"\") == \"RRRLL\"\n\nsolution(\"\"\"3\n3\n1 3 2\n\"\"\") == \"RLLRR\"\n\nsolution(\"\"\"4\n3\n1 2 3 4\n\"\"\") == \"LRLRRR\"\n\nsolution(\"\"\"4\n4\n1 2 3 4 5\n\"\"\") == \"RRRRRR\"\n\nsolution(\"\"\"4\n4\n1 2 3 4 5\n\"\"\") == \"RRRLLR\"\n\nsolution(\"\"\"4\n4\n1 3 2 4 5\n\"\"\") == \"RLLRLR\"\n\nsolution(\"\"\"4\n4\n1 3 2 4 5\n\"\"\") == \"RRRRLR\"\n\nsolution(\"\"\"4\n4\n1 3 2 4 5\n\"\"\") == \"RRRRRR\"\n\nsolution(\"\"\"4\n4\n1 3 2 4 5\n\"\"\") == \"RRRLLR\"\n\nsolution(\"\"\"6\n6\n1 3 5 6 5 4 2\n\"\"\") == \"LRLRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 2 3 4 5 6\n\"\"\") == \"RRRRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 2 3 4 5 6\n\"\"\") == \"RRRLLRLLL\"\n\nsolution(\"\"\"6\n6\n1 3 5 6 5 4 2\n\"\"\") == \"LRLRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 3 5 6 5 4 2\n\"\"\") == \"RRRRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 3 5 6 5 4 2\n\"\"\") == \"RRRRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 2 3 4 5 6\n\"\"\") == \"RRRRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 2 3 4 5 6\n\"\"\") == \"RRRRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 2 3 4 5 6\n\"\"\") == \"RRRRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 3 5 6 5 4 2\n\"\"\") == \"LRLRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 3 5 6 5 4 2\n\"\"\") == \"RRRRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 3 5 6 5 4 2\n\"\"\") == \"RRRRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 2 3 4 5 6\n\"\"\") == \"RRRRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 2 3 4 5 6\n\"\"\") == \"RRRRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 2 3 4 5 6\n\"\"\") == \"RRRRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 3 5 6 5 4 2\n\"\"\") == \"LRLRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 3 5 6 5 4 2\n\"\"\") == \"RRRRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 3 5 6 5 4 2\n\"\"\") == \"RRRRRRLLL\"\n\nsolution(\"\"\"6\n6\n1 3 5 6 5 4 2"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----Solutions-----\n\n\"\"\"\n\nn = int(input())\nnums = list(map(int, input().split()))\n\ni = 1\nans = [0]\n\nfor i in range(1, n):\n    if nums[i] < nums[i-1]:\n        ans.append(nums[i-1])\n    else:\n        ans.append(nums[i])\n\nprint(len(ans))\nprint(''.join(['L' if x == min(ans) else 'R' for x in ans]))\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    \n    a = [int(x) for x in stdin.split()]\n    return None\n\n\nassert solution(\"1 2 4 3 2\") == \"LRLRRR\"\nassert solution(\"1 2 4 3\") == \"LRRR\"\nassert solution(\"2 2 2\") == \"R\"\nassert solution(\"3 2 2\") == \"RR\"\nassert solution(\"5 2 4 3 2\") == \"LRLRLRL\"\nassert solution(\"5 2 4 3\") == \"LRLRLR\"\nassert solution(\"7 2 4 3 2\") == \"LLRLRLR\"\nassert solution(\"7 2 4 3\") == \"LLRLR\"\nassert solution(\"5\") == \"L\"\nassert solution(\"1 2 4 3 2\") == \"LRLRLRL\"\nassert solution(\"1 2 4 3\") == \"LRLRLR\"\nassert solution(\"2 2 2\") == \"R\"\nassert solution(\"3 2 2\") == \"RR\"\nassert solution(\"5 2 4 3 2\") == \"LRLRLRL\"\nassert solution(\"5 2 4 3\") == \"LRLRLR\"\nassert solution(\"7 2 4 3 2\") == \"LLRLRLR\"\nassert solution(\"7 2 4 3\") == \"LLRLR\"\nassert solution(\"7\") == \"L\"\nassert solution(\"1 2 4 3 2\") == \"LRLRLRL\"\nassert solution(\"1 2 4 3\") == \"LRLRLR\"\nassert solution(\"2 2 2\") == \"R\"\nassert solution(\"3 2 2\") == \"RR\"\nassert solution(\"5 2 4 3 2\") == \"LRLRLRL\"\nassert solution(\"5 2 4 3\") == \"LRLRLR\"\nassert solution(\"7 2 4 3 2\") == \"LLRLRLR\"\nassert solution(\"7 2 4 3\") == \"LLRLR\"\nassert solution(\"7\") == \"L\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(' ')[1]\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The key idea is to find the smallest possible non-negative number D that will ensure all the numbers become equal\n    \"\"\"\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n\n    num = arr[0]\n    ans = -1\n    for i in range(1, n):\n        if arr[i] < 0:\n            num = -1\n            break\n        else:\n            num += arr[i]\n    if num == -1:\n        return ans\n\n    for i in range(1, n):\n        if num + arr[i] == 0:\n            ans = i\n            break\n\n    return ans\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    s = sum(a)\n\n    for d in range(1, s // 2 + 1):\n        if all(a[i] == a[i] + d or a[i] == a[i] - d for i in range(n)):\n            return d\n    return -1\n\nimport sys\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if n < 2:\n        return '-1'\n\n    a1 = a[0]\n    a2 = a[1]\n\n    m = None\n    while m!= 0:\n        m = max(a1, a2)\n        if a1 >= a2:\n            a1 -= m\n        else:\n            a2 -= m\n\n    return str(m)\n\nassert(solution('''\n6\n1 4 4 7 4 1\n''') == '3')\nassert(solution('''\n5\n2 2 5 2 5\n''') == '3')\nassert(solution('''\n4\n1 3 3 7\n''') == '-1')\nassert(solution('''\n2\n2 8\n''') == '3')\nassert(solution('''\n5\n1 1 1 1 1\n''') == '-1')\nassert(solution('''\n10\n9 9 8 8 9 9 1\n''') == '3')\nassert(solution('''\n10\n9 9 8 8 9 9 1\n''') == '-1')\nassert(solution('''\n4\n2 2 5 2 5\n''') == '3')\nassert(solution('''\n7\n1 3 3 7 7 1\n''') == '3')\nassert(solution('''\n8\n1 1 1 1 1 1 1\n''') == '3')\nassert(solution('''\n6\n1 2 1 1 1 1\n''') == '3')\nassert(solution('''\n6\n1 2 1 1 1 1\n''') == '3')\nassert(solution('''\n5\n1 1 1 1 1\n''') == '-1')\nassert(solution('''\n4\n1 2 1 1\n''') == '-1')\nassert(solution('''\n10\n9 9 8 8 9 9 1\n''') == '3')\nassert(solution('''\n10\n9 9 8 8 9 9 1\n''') == '-1')\nassert(solution('''\n5\n1 1 1 1 1\n''') == '-1')\nassert(solution('''\n5\n1 1 1 1 1\n''') == '-1')\nassert(solution('''\n1\n1\n''') == '-1')\nassert(solution('''\n1\n1\n''') == '-1')\nassert(solution('''\n2\n2\n''') == '-1')\nassert(solution('''\n5\n1 2 1 1 1\n''') == '3')\nassert(solution('''\n5\n1 2 1 1 1\n''') == '3')\nassert(solution('''\n5\n1 1 1 1 1\n''') == '-1')\nassert(solution('''\n3\n1 1 1\n''') == '-1')\nassert(solution('''\n10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    flag = False\n    for i in range(n):\n        x = a[i]\n        if x < 0:\n            flag = True\n            break\n    if not flag:\n        print(-1)\n        return\n\n    d = 1\n    a_new = [0] * n\n    for i in range(n):\n        x = a[i]\n        x_new = x + d\n        if x_new < 0:\n            d += 1\n        else:\n            a_new[i] = x_new\n    for i in range(n):\n        if a_new[i] == a[i]:\n            continue\n        else:\n            flag = False\n            break\n    if flag:\n        print(d)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    array = [int(x) for x in stdin.readline().strip().split()]\n    \n    differences = []\n    \n    for i in range(1, n):\n        differences.append(array[i] - array[i-1])\n        \n    differences.sort()\n    \n    current_difference = differences[0]\n    for i in range(1, n):\n        if current_difference == differences[i]:\n            continue\n        else:\n            if current_difference > 0:\n                current_difference -= 1\n            elif current_difference < 0:\n                current_difference += 1\n            else:\n                return -1\n    \n    if current_difference < 0:\n        return -1\n    else:\n        return current_difference\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    result = 0\n    for _ in range(n):\n        for i in range(n):\n            if a[i] < 0:\n                result += abs(a[i])\n                a[i] = -a[i]\n    if result == 0:\n        return '1'\n    else:\n        return str(result)"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    # We can take the absolute value of the elements of the array\n    # and add them to the same array.\n    # However, if we add negative elements to the array,\n    # the solution will be negative forever.\n    # So, we take absolute value of the elements and add them to the array\n    # until there is no negative elements in the array.\n    # If the array has negative elements, we should return -1\n    res = 0\n    for i in range(n):\n        if a[i] > 0:\n            res = i\n            break\n    for i in range(n):\n        res += abs(a[i])\n    if res!= 0:\n        return str(res)\n    return \"-1\""
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = stdin[1].split(\" \")\n\n    res = []\n    for i in range(n):\n        a[i] = int(a[i])\n        res.append(a[i])\n\n    if min(res) > 0:\n        return -1\n\n    if max(res) - min(res) == 0:\n        return -1\n\n    res.sort()\n    return res[0] - min(res)\n\n\nassert(solution(input) == 3)\nassert(solution(input_2) == 3)\nassert(solution(input_3) == -1)\nassert(solution(input_4) == -1)\nassert(solution(input_5) == -1)\nassert(solution(input_6) == 3)\nassert(solution(input_7) == -1)\nassert(solution(input_8) == -1)\nassert(solution(input_9) == 3)\nassert(solution(input_10) == 3)\nassert(solution(input_11) == -1)\nassert(solution(input_12) == -1)\nassert(solution(input_13) == 3)\nassert(solution(input_14) == -1)\nassert(solution(input_15) == -1)\nassert(solution(input_16) == 3)\nassert(solution(input_17) == -1)\nassert(solution(input_18) == -1)\nassert(solution(input_19) == 3)\nassert(solution(input_20) == -1)\nassert(solution(input_21) == -1)\nassert(solution(input_22) == 3)\nassert(solution(input_23) == -1)\nassert(solution(input_24) == -1)\nassert(solution(input_25) == 3)\nassert(solution(input_26) == -1)\nassert(solution(input_27) == -1)\nassert(solution(input_28) == 3)\nassert(solution(input_29) == -1)\nassert(solution(input_30) == -1)\nassert(solution(input_31) == 3)\nassert(solution(input_32) == -1)\nassert(solution(input_33) == -1)\nassert(solution(input_34) == 3)\nassert(solution(input_35) == -1)\nassert(solution(input_36) == -1)\nassert(solution(input_37) == 3)\nassert(solution(input_38) == -1)\nassert(solution(input_39) == -1)\nassert(solution(input_40) == 3)\nassert(solution(input_41) == -1)\nassert(solution(input_42) == -1)\nassert(solution(input_43) == 3)\nassert(solution(input_44) == -1)\nassert(solution(input_45) == -1)\nassert(solution(input_46) == 3)\nassert(solution(input_47) == -1)\nassert(solution(input_48) == -1)\nassert(solution(input_49) == 3)\nassert(solution(input_50) == -1)\nassert(solution(input_51) == -1)\nassert(solution(input_52) == 3)\nassert(solution(input_53) == -1)\nassert(solution(input_54) == -1)\nassert(solution(input_55) == 3)\nassert(solution(input_56) == -1)\nassert(solution(input_57) == -1)\nassert(solution(input_58) == 3)\nassert(solution(input_59) == -1)\nassert(solution(input_60) == -1)\nassert(solution(input_61) == 3)\nassert(solution(input_62) == -1)\nassert(solution(input_63) == -1)\nassert(solution(input_64) == 3)\nassert(solution(input_65) == -1)\nassert(solution(input_66) == -1)\nassert(solution(input_67) == 3)\nassert(solution(input_68) == -1)\nassert(solution(input_69) == -1)\nassert(solution(input_70) == 3)\nassert(solution(input_71) == -1)\nassert(solution(input_72) == -1)\nassert(solution(input_73) == 3)\nassert(solution(input_74) == -1)\nassert(solution(input_75) == -1)\nassert(solution(input_76) == 3)\nassert(solution(input_77) == -1)\nassert(solution(input_78) == -1)\nassert(solution(input_79) == 3)\nassert(solution(input_80) == -1)\nassert(solution(input_81) == -1)\nassert(solution(input_82) == 3)\nassert(solution(input_83) == -1)\nassert(solution(input_84) == -1)\nassert(solution(input_85) == 3)\nassert(solution(input_86) == -1)\nassert(solution(input_87) == -1)\nassert(solution(input_88) == 3)\nassert(solution(input_89) == -1)\nassert(solution(input_90) == -1)\nassert(solution(input_91) == 3)\nassert(solution(input_92) == -1)\nassert(solution(input_93) == -1)\nassert(solution(input_94) == 3)\nassert(solution(input_95) == -1)\nassert(solution(input_96) == -1)\nassert(solution(input_97) == 3)\nassert(solution(input_98) == -1)\nassert(solution(input_99)"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    if sum(a) % n == 0:\n        return str(sum(a) // n)\n    return '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.strip().split(\" \"))\n    x_3, y_3, x_4, y_4 = map(int, stdin.strip().split(\" \"))\n    x_5, y_5, x_6, y_6 = map(int, stdin.strip().split(\" \"))\n    if x_1 > x_2 or x_3 > x_4 or y_1 > y_2 or y_3 > y_4 or x_5 > x_6 or y_5 > y_6:\n        return \"NO\"\n    if x_1 < x_3 and x_3 < x_5 and y_1 < y_3 and y_3 < y_5:\n        return \"YES\"\n    if x_2 < x_3 and x_3 < x_5 and y_2 < y_3 and y_3 < y_5:\n        return \"YES\"\n    if x_4 < x_5 and x_5 < x_6 and y_4 < y_5 and y_5 < y_6:\n        return \"YES\"\n    if x_1 > x_3 and x_3 < x_5 and y_1 > y_3 and y_3 < y_5:\n        return \"YES\"\n    if x_2 > x_3 and x_3 < x_5 and y_2 > y_3 and y_3 < y_5:\n        return \"YES\"\n    if x_4 > x_5 and x_5 < x_6 and y_4 > y_5 and y_5 < y_6:\n        return \"YES\"\n    if x_1 > x_4 and x_4 < x_6 and y_1 > y_4 and y_4 < y_6:\n        return \"YES\"\n    if x_2 > x_4 and x_4 < x_6 and y_2 > y_4 and y_4 < y_6:\n        return \"YES\"\n    if x_3 > x_4 and x_4 < x_6 and y_3 > y_4 and y_4 < y_6:\n        return \"YES\"\n    if x_1 < x_4 and x_4 < x_6 and y_1 < y_4 and y_4 < y_6:\n        return \"YES\"\n    if x_2 < x_4 and x_4 < x_6 and y_2 < y_4 and y_4 < y_6:\n        return \"YES\"\n    if x_3 < x_4 and x_4 < x_6 and y_3 < y_4 and y_4 < y_6:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n    x_5, y_5, x_6, y_6 = map(int, stdin.split())\n    x_1, y_1 = x_1 - x_3, y_1 - y_3\n    x_2, y_2 = x_2 - x_4, y_2 - y_4\n    x_5, y_5 = x_5 - x_6, y_5 - y_6\n    if x_2 >= x_1:\n        if x_5 >= x_1 and x_5 <= x_2:\n            return \"YES\"\n        elif x_5 > x_2:\n            return \"NO\"\n    else:\n        if x_5 > x_2:\n            return \"NO\"\n        elif x_5 >= x_1:\n            return \"YES\"\n    if y_2 >= y_1:\n        if y_5 >= y_1 and y_5 <= y_2:\n            return \"YES\"\n        elif y_5 > y_2:\n            return \"NO\"\n    else:\n        if y_5 > y_2:\n            return \"NO\"\n        elif y_5 >= y_1:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2 4 4\")\n    'NO'\n    >>> solution(\"3 1 5 5\")\n    'YES'\n    >>> solution(\"0 0 4 6\")\n    'YES'\n    >>> solution(\"0 0 7 4\")\n    'YES'\n    >>> solution(\"0 0 1000000 1000000\")\n    'YES'\n    >>> solution(\"0 0 499999 1000000\")\n    'YES'\n    >>> solution(\"500000 0 1000000 1000000\")\n    'YES'\n    \"\"\"\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    if (x2-x1) * (y4-y3) == (x6-x5) * (y2-y1) and (x2-x1) + (y4-y3) + (x6-x5) + (y2-y1) == (x4-x3) + (y6-y5) + (x6-x3) + (y4-y3):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n    x_5, y_5, x_6, y_6 = map(int, stdin.split())\n\n    top = max(y_1, y_2, y_3, y_4)\n    left = min(x_1, x_2, x_3, x_4)\n    bottom = min(y_1, y_2, y_3, y_4)\n    right = max(x_1, x_2, x_3, x_4)\n\n    if left <= x_5 <= right and top <= y_5 <= bottom:\n        return 'YES'\n    return 'NO'\n\nassert(solution('''2 2 4 4''') == 'NO')\nassert(solution('''1 1 3 5''') == 'NO')\nassert(solution('''3 1 5 5''') == 'YES')\nassert(solution('''0 0 4 6''') == 'YES')\nassert(solution('''0 0 7 4''') == 'YES')\nassert(solution('''8 1 11 7''') == 'YES')\nassert(solution('''0 0 1000000 1000000''') == 'YES')\nassert(solution('''0 0 499999 1000000''') == 'YES')\nassert(solution('''500000 0 1000000 1000000''') == 'YES')\n'''\nassert(solution('''2 2 4 4''') == 'NO')\nassert(solution('''1 1 3 5''') == 'NO')\nassert(solution('''3 1 5 5''') == 'YES')\nassert(solution('''0 0 4 6''') == 'YES')\nassert(solution('''0 0 7 4''') == 'YES')\nassert(solution('''8 1 11 7''') == 'YES')\nassert(solution('''0 0 1000000 1000000''') == 'YES')\nassert(solution('''0 0 499999 1000000''') == 'YES')\nassert(solution('''500000 0 1000000 1000000''') == 'YES')\n'''\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 2 4 4\\n1 1 3 5\\n3 1 5 5')\n    'NO'\n    >>> solution('2 2 4 4\\n1 1 3 5\\n3 1 5 5\\n1 0 0 0\\n0 0 0 0\\n0 0 0 0\\n0 0 0 0')\n    'YES'\n    \"\"\"\n    from collections import deque\n    t = deque()\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range(4):\n        x, y = [int(x) for x in stdin.split()]\n        t.append((x, y))\n    x, y = [int(x) for x in stdin.split()]\n    t.append((x, y))\n    for _ in range"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    def f(n):\n        if n == 1:\n            return 1\n        if n%2 == 0:\n            return f(n/2)\n        else:\n            return f(3*n+1)\n    return str(f(N) - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return \"1\"\n    return str(n) + solution(n-1)\n\nassert(solution(10) == \"1098\")\nassert(solution(11) == \"1099\")\nassert(solution(15) == \"1099\")\nassert(solution(29) == \"1099\")\nassert(solution(109) == \"109000\")\nassert(solution(1000) == \"1099\")\nassert(solution(1111) == \"1\")\nassert(solution(12) == \"11\")\nassert(solution(45) == \"11\")\nassert(solution(35) == \"11\")\nassert(solution(22) == \"11\")\nassert(solution(19) == \"110\")\nassert(solution(14) == \"110\")\nassert(solution(1) == \"1\")\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(get_number_of_reachable_numbers(stdin)))\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [i for i in range(n+1)]\n    for i in range(2, n+1):\n        for j in range(i, n+1):\n            if nums[j] == j:\n                nums[j] = i\n    return str(len(nums)-1)\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [0] * (n + 1)\n    for i in range(1, n + 1):\n        nums[i] = nums[i - 1] + 1\n        while i % 10 == 0:\n            nums[i] = nums[i] + 1\n            i = i // 10\n    return str(nums[n])"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = n\n\n    while t % 10 == 0:\n        t //= 10\n\n    result = 1\n    while t > 0:\n        result *= t % 10 + 1\n        t //= 10\n\n    return str(result)"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = set()\n    for _ in range(n):\n        nums.add(int(stdin.readline().strip()))\n    #print(nums)\n    return str(len(nums))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(len(reachable_numbers(n)))\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = {}\n    def f(x):\n        while x % 10 == 0:\n            x //= 10\n        if x in d:\n            return d[x]\n        d[x] = x + 1\n        return x\n    print(f(n) - 1)"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = [int(x) for x in stdin.split()]\n    ans = [0 for _ in range(n)]\n\n    for friend in range(n):\n        if friend == 0:\n            continue\n        if friends[friend] == 0:\n            ans[friend] = 0\n            continue\n\n        ans[friend] = 1\n        for second_friend in range(n):\n            if friend == second_friend:\n                continue\n            if friends[second_friend] == 0:\n                ans[friend] += 1\n    return''.join(str(x) for x in ans)"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lst = [int(stdin.readline().strip()) for _ in range(n)]\n    for i in range(n):\n        lst[i] += (lst[i] % n == 0)\n    lst.sort()\n    print(*lst, sep='\\n')\nsolution(input)\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f = list(map(int, stdin.readline().split()))\n    m = 0\n    for i, num in enumerate(f):\n        if num > 1:\n            m = i\n    if m == 0:\n        return''.join(map(str, f))\n    if f.count(m) > 1:\n        return '-1'\n    else:\n        f[f.index(m)] = 0\n        f[f.index(m, m + 1)] = 1\n        return''.join(map(str, f))"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = list(map(int, stdin.split()))\n    # n=5\n    # friends = [5, 0, 0, 2, 4]\n    gifts = list(map(int, stdin.split()))\n    # gifts = [5, 0, 0, 2, 4]\n    # n=7\n    # friends = [7, 0, 0, 1, 4, 0, 6]\n    # gifts = [7, 0, 0, 1, 4, 0, 6]\n    # n=7\n    # friends = [7, 4, 0, 3, 0, 0, 1]\n    # gifts = [7, 4, 0, 3, 0, 0, 1]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=7\n    # friends = [7, 4, 0, 3, 0, 0, 1]\n    # gifts = [7, 4, 0, 3, 0, 0, 1]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4, 0, 3, 0]\n    # n=5\n    # friends = [5, 4, 0, 3, 0]\n    # gifts = [5, 4"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    gifts = stdin.readline().split()\n    if n == 0:\n        return \"1\" * n\n    gifts = [int(g) for g in gifts]\n    gifts.sort(reverse=True)\n    gifts = [0] + gifts + [n]\n    result = []\n    for i in range(1, len(gifts)):\n        if gifts[i] - gifts[i-1] > 1:\n            result.append(gifts[i-1])\n            gifts[i] = gifts[i] - gifts[i-1] - 1\n    result.append(gifts[-1])\n    return \" \".join(str(g) for g in result)\n\nassert(solution('''5\n5 0 0 2 4\n''') == '5 3 1 2 4')\nassert(solution('''7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''5\n2 1 0 0 0\n''') == '2 1 4 5 3')\nprint(solution('''7\n7 4 0 3 0 5 1\n'''))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We will answer the following question:\n    For each friend we know how many gifts he wants to give, we will calculate the final answer by finding\n    all values of the given friend that do not equal to his index. We will then proceed to give all possible\n    gifts, and finally take care of the last one.\n    \"\"\"\n    n = int(stdin.readline())\n    friends = [int(x) for x in stdin.readline().split()]\n    first_step = True\n    for i in range(n):\n        if friends[i]!= i and friends[i]!= 0:\n            if first_step:\n                # We know how many gifts he wants to give\n                first_step = False\n                n_gifts = friends[i]\n            else:\n                # We don't know how many gifts he wants to give, but he can give at most 1 gift\n                n_gifts = min(n_gifts, n - i)\n    # we know that he cannot give more than he wants\n    final_ans = [n_gifts] * n\n    for i in range(n):\n        if friends[i]!= i and friends[i]!= 0:\n            final_ans[i] -= 1\n    return''.join(map(str, final_ans))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    friends = list(map(int, stdin.readline().strip().split()))\n    friends = set(friends)\n    for i in friends:\n        if i == 0:\n            friends.discard(0)\n    if n == 0:\n        return '0'\n    elif len(friends) == 0:\n        return '0'\n    else:\n        return''.join(map(str, friends))\n    \n    \nassert(solution('') == '')\nassert(solution('5') == '5')\nassert(solution('5 0 0 2 4') == '5 3 1 2 4')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('7') == '7')\nassert(solution('7 4 0 3 0 5 1') == '7 4 2 3 6 5 1')\nassert(solution('7') == '7')\nassert(solution('5') == '5')\nassert(solution('2 1 0 0 0') == '2 1 4 5 3')\nassert(solution('5 0 0 0 2 4') == '5 3 1 2 4')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert(solution('5') == '5')\nassert(solution('7') == '7')\nassert(solution('7 0 0 1 4 0 6') == '7 3 2 1 4 5 6')\nassert"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    values = stdin.readline().strip().split()\n    values = list(map(int, values))\n    return''.join(str(values[values[i] - 1]) for i in range(len(values)))"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = list(map(int, stdin.readline().split()))\n    \n    result = []\n    visited = set()\n    for i in range(n):\n        if friends[i] == 0:\n            continue\n        if i in visited:\n            continue\n        visited.add(i)\n        visited.add(friends[i])\n        result.append(i)\n        \n        while len(result) > 0:\n            f = result.pop(0)\n            if f in visited:\n                continue\n            visited.add(f)\n            result.append(friends[f])\n            \n    return \" \".join(map(str, result))"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = []\n    for _ in range(n):\n        d.append(int(stdin.readline()))\n    count = 0\n    for i in range(1, n):\n        if d[i] == 0:\n            count += 1\n    print(count)\n    return ''\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return answer()\n\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if 1 <= k <= n <= 5000:\n        return 'YES' if is_valid(stdin) else 'NO'\n    return ''\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    for i in range(k):\n        if a.count(i + 1) < n:\n            print(\"NO\")\n            return\n    res = []\n    for i in range(k):\n        res.append(i + 1)\n    print(\"YES\")\n    print(\" \".join([str(x) for x in res]))"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIf you liked this kata, please try:\n\n[Show Hint]\n\n[Show Tags]\n\n[Show Similar]\n\n[Show Similar 1]\n\n[Show Similar 2]\n\n[Show Similar 3]\n\n\n\n### Notes\n\nIf you like to play a bit more, take a look at [this article](https://www.codewars.com/kata/set-of-colors).\n\nIf you are not familiar with sets, please refer to [this article](https://www.codewars.com/kata/representing-sets-of-colors-2-sets-of-colors) for more information about how to represent sets of colors."
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_valid(stdin) else \"NO\"\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n\n    if k == 1:\n        return \"YES\"\n\n    c = [0] * k\n    for n in a:\n        if c[n - 1] == 0:\n            c[n - 1] = 1\n            for i in range(k):\n                if c[i] == 1:\n                    c[i] = 0\n                    break\n        else:\n            return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    m = len(a)\n    if m == 0 or k == 0:\n        return \"NO\"\n    if k > m:\n        return \"NO\"\n    if k == 1:\n        return \"YES\"\n    if k == m:\n        for i in range(1, k + 1):\n            if len(set(a)) < k:\n                return \"NO\"\n            else:\n                return \"YES\"\n    colors = []\n    for i in range(1, k + 1):\n        colors.append([])\n    for i in range(m):\n        colors[a[i] - 1].append(i)\n    for i in range(1, k + 1):\n        if len(colors[i - 1]) < i:\n            return \"NO\"\n        for j in colors[i - 1]:\n            if j + 1 in colors[i - 1]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    a = stdin[:n]\n    b = stdin[n:]\n    m = int('1' * n, 2)\n    l = len(b)\n    for _ in range(y):\n        if b[0] == '0':\n            b = b[1:]\n        else:\n            b = b[1:] + '0'\n        m = (m * 10) % m\n    if len(b) > x:\n        return -1\n    return m * a.count('1') + a.count('0') - l\n\n\nassert 1 == solution(\n    '11 5 2'\n)\nassert 1 == solution(\n    '11 5 1'\n)\nassert 3 == solution(\n    '11 7 1'\n)\nassert -1 == solution(\n    '11 7 0'\n)\nassert 3 == solution(\n    '13 0 2'\n)\nassert -1 == solution(\n    '13 0 1'\n)\nassert 2 == solution(\n    '17 0 1'\n)\nassert 1 == solution(\n    '17 0 0'\n)\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n\n    y = (y + n - 1) // n\n\n    r = 1\n\n    for i in range(1, x + 1):\n        r = (r * (10 ** y)) % (10 ** (n - i))\n\n    return str(r)\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, n, x, y = [int(s) for s in stdin.split()]\n    n = str(n)\n    ans = '1'\n    for i in range(len(n)):\n        if n[i] == '1':\n            ans += '01'\n        else:\n            ans += '0'\n    return str(10 ** y % 10 ** x)"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    num = int(stdin)\n\n    one_to_ten = 10 ** y\n    last_digit = num % one_to_ten\n    rest_digit = last_digit % (10 ** x)\n    last_digit //= 10 ** x\n    num //= 10 ** x\n    print(last_digit, num, rest_digit, one_to_ten)\n    return str(rest_digit)"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    m = int(stdin)\n    return str(m % (10 ** x) // (10 ** y))\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = (int(x) for x in stdin.split())\n\n    if n % 10 == 0:\n        return 0\n\n    pow_10 = 10 ** x\n    pow_10_inv = pow_10 - 1\n    div_10 = 10\n\n    # Last digit is one\n    last_digit = (n % 10) * pow_10\n\n    # If the last digit is 0, we need to get the rest of the number\n    # We also know that if the last digit is 0, we can get the rest of the number\n    # by removing the last digit\n    if last_digit == 0:\n        last_digit = n % div_10\n        remainder = n // div_10\n\n    # If the last digit is 1, we need to get the rest of the number\n    # We also know that if the last digit is 1, we can get the rest of the number\n    # by adding a leading zero\n    else:\n        remainder = n // div_10\n        last_digit = n % div_10\n        last_digit += 1\n\n    # The number of operations we need to get the number with the remainder\n    # is the last digit of the number + the number of operations to get\n    # the remainder\n    return last_digit + solution_aux(remainder, x)\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    n = 10 ** n\n    modulo = 10 ** y\n    number = int(stdin)\n    res = 0\n    while number % modulo!= 10 ** y:\n        res += 1\n        number = (number * n) % modulo\n    return str(res)\n\nassert(solution(input()) == '1')\nassert(solution(input()) == '3')\nassert(solution(input()) == '5')\nassert(solution(input()) == '7')\nassert(solution(input()) == '9')\nassert(solution(input()) == '10')\nassert(solution(input()) == '11')\nassert(solution(input()) == '12')\nassert(solution(input()) == '13')\nassert(solution(input()) == '14')\nassert(solution(input()) == '15')\nassert(solution(input()) == '16')\nassert(solution(input()) == '17')\nassert(solution(input()) == '18')\nassert(solution(input()) == '19')\nassert(solution(input()) == '20')\nassert(solution(input()) == '21')\nassert(solution(input()) == '22')\nassert(solution(input()) == '23')\nassert(solution(input()) == '24')\nassert(solution(input()) == '25')\nassert(solution(input()) == '26')\nassert(solution(input()) == '27')\nassert(solution(input()) == '28')\nassert(solution(input()) == '29')\nassert(solution(input()) == '30')\nassert(solution(input()) == '31')\nassert(solution(input()) == '32')\nassert(solution(input()) == '33')\nassert(solution(input()) == '34')\nassert(solution(input()) == '35')\nassert(solution(input()) == '36')\nassert(solution(input()) == '37')\nassert(solution(input()) == '38')\nassert(solution(input()) == '39')\nassert(solution(input()) == '40')\nassert(solution(input()) == '41')\nassert(solution(input()) == '42')\nassert(solution(input()) == '43')\nassert(solution(input()) == '44')\nassert(solution(input()) == '45')\nassert(solution(input()) == '46')\nassert(solution(input()) == '47')\nassert(solution(input()) == '48')\nassert(solution(input()) == '49')\nassert(solution(input()) == '50')\nassert(solution(input()) == '51')\nassert(solution(input()) == '52')\nassert(solution(input()) == '53')\nassert(solution(input()) == '54')\nassert(solution(input()) == '55')\nassert(solution(input()) == '56')\nassert(solution(input()) == '57')\nassert(solution(input()) == '58')\nassert(solution(input()) == '59')\nassert(solution(input()) == '60')\nassert(solution(input()) == '61')\nassert(solution(input()) == '62')\nassert(solution(input()) == '63')\nassert(solution(input()) == '64')\nassert(solution(input()) == '65')\nassert(solution(input()) == '66')\nassert(solution(input()) == '67')\nassert(solution(input()) == '68')\nassert(solution(input()) == '69')\nassert(solution(input()) == '70')\nassert(solution(input()) == '71')\nassert(solution(input()) == '72')\nassert(solution(input()) == '73')\nassert(solution(input()) == '74')\nassert(solution(input()) == '75')\nassert(solution(input()) == '76')\nassert(solution(input()) == '77')\nassert(solution(input()) == '78')\nassert(solution(input()) == '79')\nassert(solution(input()) == '80')\nassert(solution(input()) == '81')\nassert(solution(input()) == '82')\nassert(solution(input()) == '83')\nassert(solution(input()) == '84')\nassert(solution(input()) == '85')\nassert(solution(input()) == '86')\nassert(solution(input()) == '87')\nassert(solution(input()) == '88')\nassert(solution(input()) == '89')\nassert(solution(input()) == '90')\nassert(solution(input()) == '91')\nassert(solution(input()) == '92')\nassert(solution(input()) == '93')\nassert(solution(input()) == '94')\nassert(solution(input()) == '95')\nassert(solution(input()) == '96')\nassert(solution(input()) == '97')\nassert(solution(input()) == '98')\nassert(solution(input()) == '99')\nassert(solution(input()) == '100')\nassert(solution(input()) == '101')\nassert(solution(input()) == '102')\nassert(solution(input()) == '103')\nassert(solution(input()) == '104')\nassert(solution(input()) == '105')\nassert(solution(input()) == '106')\nassert(solution(input()) == '107')\nassert(solution(input()) == '108')\nassert(solution(input()) == '109')\nassert(solution(input()) == '110')\nassert(solution(input()) == '111')\nassert(solution(input()) == '112')\nassert(solution(input()) == '113')\nassert(solution(input()) == '114')\nassert(solution(input()) == '115')\nassert(solution(input()) == '116')\nassert(solution(input()) == '117')\nassert(solution(input()) == '118')\nassert(solution(input()) == '119')\nassert(solution(input()) == '120')\nassert(solution(input()) == '121')\nassert(solution(input()) == '122')\nassert(solution(input()) == '123')\nassert(solution(input()) == '124')\nassert(solution(input()) == '125')\nassert(solution(input()) == '126')\nassert(solution(input()) == '127')\nassert(solution(input()) == '128')\nassert(solution("
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert(solution(stdin) == \"3\")\nassert(solution(stdin) == \"1\")\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    n = 10 ** (n - 1)\n    n_y = n // y\n    n_x = n // x\n    if n_y < n_x:\n        return str(n_y)\n    elif n_y == n_x:\n        return '0'\n    else:\n        return str(n_x)"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().strip().split()))\n        if n >= 3:\n            if any(x == y for x, y in zip(a, a[::-1])):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline())\n    for _ in range(num_cases):\n        n = int(stdin.readline())\n        sequence = stdin.readline().strip()\n        if len(sequence) < 3:\n            print(\"NO\")\n            continue\n        if is_palindrome(sequence):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        i = 0\n        while i < n - 2:\n            if a[i] == a[i+1] == a[i+2]:\n                print('YES')\n                break\n            i += 1\n        else:\n            print('NO')"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        n = int(stdin.readline())\n        a = stdin.readline().split()\n        a = [int(x) for x in a]\n        \n        count = 0\n        for i in range(0, n - 2):\n            if a[i] == a[i + 1] and a[i + 1] == a[i + 2]:\n                count += 1\n        if count >= 3:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        "
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        flag = False\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                if a[i] == a[j] and a[j] == a[i + 1]:\n                    flag = True\n                    break\n            if flag:\n                break\n        if flag:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        \n        if (n >= 3) and (max(a) - min(a) <= n) and (is_palindrome(a)):\n            print(\"YES\")\n        else:\n            print(\"NO\")\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(\"\\n\")[:n]]\n    for i in range(n):\n        for j in range(n):\n            if i + 2 > j:\n                continue\n            if a[i] == a[j] and a[i + 1] == a[j + 1] and a[i + 2] == a[j + 2]:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = [int(stdin.readline()) for _ in range(9)]\n    dp = [[0] * 10 for _ in range(n + 1)]\n    for i in range(n, -1, -1):\n        if i == n:\n            for j in range(10):\n                dp[i][j] = f[j]\n        else:\n            for j in range(10):\n                for k in range(10):\n                    if k!= f[j]:\n                        dp[i][j] = max(dp[i][j], dp[i + 1][k] + a[i] * k)\n    return str(max(dp[0]))"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = [int(i) for i in stdin.readline().strip().split()]\n    a = a[::-1]\n    l = [a[i:i+n] for i in range(0, len(a), n)]\n    for x in l:\n        y = int(x)\n        for i in range(9):\n            y = y * 10 + f[i]\n        x = str(y)\n        x = x[::-1]\n        print(x, end=\"\")\n    print()\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = [int(x) for x in stdin.readline().strip().split()]\n    return str(max(int(a[i:i+n], 10) for i in range(len(a)-n+1)))\n\nassert(solution('''4\n1337\n1 2 5 4 6 6 3 1 9''') == '1557')\nassert(solution('''5\n11111\n9 8 7 6 5 4 3 2 1''') == '99999')\nassert(solution('''2\n33\n1 1 1 1 1 1 1 1 1''') == '33')\nassert(solution('''3\n11111\n9 8 7 6 5 4 3 2 1''') == '11111')\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    a = stdin[1]\n    f = stdin[2].split()\n\n    i = 0\n    while i < len(a):\n        digit = int(a[i])\n        if 1 <= digit <= 9:\n            a = a[:i] + f[digit - 1] + a[i + 1:]\n            i -= 1\n        i += 1\n\n    return a\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = [int(x) for x in stdin.readline().split()]\n\n    max_number = 0\n\n    for i in range(1, n):\n        s = a[:i] + str(f[a[i]]) + a[i + 1:]\n        max_number = max(max_number, int(s))\n\n    return str(max_number)"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\")\n    '1557'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = tuple(map(int, stdin.readline().strip().split(' ')))\n\n    def f_v(x):\n        return f[x - 1]\n\n    # a_ = ''.join(str(f_v(int(x))) for x in a)\n    a_ = str(f_v(int(a[0])))\n    for x in a[1:]:\n        a_ += str(f_v(int(x)))\n    return a_\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = [int(i) for i in stdin.readline().strip().split()]\n    max_num = -1\n    for i in range(n):\n        if max_num < sum(int(j) * f[j - 1] for j in a[i:i+5]):\n            max_num = sum(int(j) * f[j - 1] for j in a[i:i+5])\n    return str(max_num)"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = [int(x) for x in stdin.readline().strip().split()]\n    \n    substrs = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substrs.append(a[i:j])\n    \n    ans = 0\n    for substr in substrs:\n        d = {}\n        for x in substr:\n            if x not in d:\n                d[x] = f[ord(x) - ord('1')]\n            else:\n                d[x] = 9 - d[x]\n        ans = max(ans, reduce(lambda x, y: x * 10 + y, [d[x] for x in substr]))\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = [int(x) for x in stdin[1:n + 1]]\n    f = [int(x) for x in stdin[n + 1:]]\n    a_0 = a[0]\n    a_1 = a[1]\n    if a_1 < a_0:\n        a_0, a_1 = a_1, a_0\n    max_l = len(str(max(a_0, a_1)))\n    max_n = len(a)\n    s = [max_l] * max_n\n    for i in range(max_n):\n        if a[i] == max(a_0, a_1):\n            s[i] = max_l\n        else:\n            s[i] = len(str(a[i]))\n    s = [str(x).zfill(max_l) for x in s]\n    d = dict(zip(range(1, 10), f))\n    for i in range(len(a)):\n        if d.get(a[i], 0) == 0:\n            s[i] = str(a[i])\n        else:\n            s[i] = str(d[a[i]])\n    return ''.join(s)"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nprint(solution(stdin))"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Counts the number of operations\n    def count_operations(a: int, b: int, c: int) -> int:\n        return int(b / a) * int(c / b)\n    \n    # Gets the minimum number of operations\n    def get_min_operations(a: int, b: int, c: int) -> int:\n        # Finds the maximum divisor of c, b\n        max_divisor = int(c / b)\n        if max_divisor == 0:\n            return 1\n        \n        # Finds the minimum number of operations to obtain\n        # the maximum divisor of c, b\n        min_operations = count_operations(a, b, max_divisor)\n        # Removes the max_divisor from b\n        b = b - max_divisor * max_divisor\n        # If b is greater than 0,\n        # then remove the divisors from b\n        while b > 0:\n            # For each divisor in the range [1, max_divisor],\n            # remove it from b\n            for divisor in range(1, max_divisor + 1):\n                if b == 0:\n                    break\n                b = b - divisor * divisor\n            # If b is less than 0,\n            # then we have found the answer\n            if b < 0:\n                return min_operations + 1\n            # Else update the min_operations\n            # and remove the max_divisor from b\n            min_operations += 1\n            b = b - max_divisor\n        return min_operations\n    \n    # Reads the test cases\n    num_cases = int(stdin.readline())\n    \n    for _ in range(num_cases):\n        # Reads the input\n        a, b, c = map(int, stdin.readline().split())\n        \n        # Gets the answer\n        ans = get_min_operations(a, b, c)\n        \n        # Prints the answer\n        print(ans)\n        \n    return \"\"\n    \n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a,b,c = [int(x) for x in stdin.readline().strip().split()]\n        if b%a == 0 and c%b == 0:\n            print(a,b)"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c = map(int, stdin.readline().strip().split(' '))\n        if b % a == 0 and c % b == 0:\n            print(1)\n            print(a, b)\n        else:\n            m = max(a, b, c)\n            cnt = 0\n            while m % a == 0 and m % b == 0 and m % c == 0:\n                cnt += 1\n                m /= a\n            if cnt!= 0:\n                print(cnt)\n                print(a, b)\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline())\n    for i in range(count):\n        a, b, c = map(int, stdin.readline().split())\n        if b % a == 0 and c % b == 0:\n            print(0)\n            print(a, b, c)\n        else:\n            k = c % b\n            n = c // b\n            if k == 0:\n                print(n)\n                print(a, b)\n            else:\n                if b % k == 0:\n                    print(n + 1)\n                    print(a, b)\n                else:\n                    print(-1)"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b, c = map(int, stdin.split())\n        if b % a == 0 and c % b == 0:\n            print(min(b, c) - a + 1)\n            print(a, b)\n        else:\n            if c % a == 0:\n                print(a)\n            else:\n                if c % b == 0:\n                    print(b)\n                else:\n                    print(-1)\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    results = []\n    for _ in range(t):\n        a, b, c = map(int, stdin.readline().strip().split(' '))\n        results.append(min_operations(a, b, c))\n    return '\\n'.join(results)\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_divisor(n1: int, n2: int) -> int:\n        \"\"\"\n        find the smallest divisor of n1 by n2\n        \"\"\"\n        for i in range(min(n1, n2) // 2, 0, -1):\n            if n1 % i == 0 and n2 % i == 0:\n                return i\n        return 1\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b, c = [int(x) for x in stdin.readline().split()]\n        if b % a == 0 and c % b == 0:\n            res = 2\n            res += b * (b - 1) // 2\n            res += c * (c - 1) // 2\n            print(res)\n            print(a, b)\n        else:\n            div = find_divisor(b, a)\n            res = b // div + 1\n            print(res)\n            print(a, b // div)\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    return str(max(a[0]-a[-1], a[-1]-a[0]))"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n\n    return str(min([i - min(a) for i in a]))\n\nprint(solution(''))\n\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n.strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    print(min(a))\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = max(a) - min(a)\n    return str(b)\n\nprint(solution(\"1 3 3 7\"))\nprint(solution(\"2 1 100000\"))\nprint(solution(\"0\"))\nprint(solution(\"1 100000\"))\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    a = max(arr) - min(arr)\n    return str(a)"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The first element is always bigger than the rest.\n    The second element is always smaller than the rest.\n    \"\"\"\n    n = stdin.readline().strip()\n    a = list(map(int, stdin.readline().split()))\n    minimum_instability = abs(max(a) - min(a))\n    for i in range(len(a)-1):\n        if a[i] > a[i+1]:\n            minimum_instability = min(minimum_instability, abs(a[i] - a[i+1]))\n    return str(minimum_instability)\n\nprint(solution(None))\n\"\"\"\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    print(a[-1] - a[0])\n    return ''\n\nassert(solution('''4\n1 3 3 7''') == '2')\nassert(solution('''2\n1 100000''') == '0')\nassert(solution('''6\n1 1000000\n3 1000000\n4 1000000\n5 1000000\n6 1000000''') == '0')\nassert(solution('''7\n1 3 3 7''') == '2')\nassert(solution('''7\n1 100000\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000\n5 100000\n6 100000''') == '0')\nassert(solution('''7\n1 999999\n3 100000\n4 100000"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    return str(min(map(lambda x: max(a) - x, a)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(max(a) - min(a))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [line.split() for line in stdin.splitlines()]\n    n, m = map(int, inputs[0])\n    exams = inputs[1:]\n    if m == 0:\n        return \"-1\"\n    for i in range(len(exams)):\n        exams[i] = map(int, exams[i])\n    days = [0] * (n + 1)\n    for day, exam in exams:\n        days[day] += 1\n        days[day + exam] -= 1\n    for i in range(1, n + 1):\n        if days[i] == 0:\n            return str(i)\n    return \"-1\"\n\n\n\n\"\"\"\n\nn, m = map(int, input().split())\nexams = [list(map(int, input().split())) for _ in range(m)]\n\nday = 1\nprev_passed = 0\nschedule = [-1] * (n + 1)\n\nfor _ in range(n):\n    for day, exam in exams:\n        if day <= prev_passed + exam:\n            pass\n        else:\n            schedule[day] = exam\n            break\n\n    else:\n        prev_passed = day\n        schedule[day] = 0\n\nprint(' '.join(map(str, schedule)))\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n, m = map(int, stdin.split())\n\n    # process\n    passing = [0] * (m + 1)\n    preparing = [0] * (m + 1)\n    for i in range(n):\n        s, d, c = map(int, stdin.split())\n        if s > d:\n            print('-1')\n            return\n        preparing[d] += c\n        passing[d] += c\n    \n    # output\n    for i in range(n):\n        if preparing[i] == 0:\n            continue\n        preparing[i + 1] += passing[i]\n        if preparing[i + 1] > n - i:\n            print('-1')\n            return\n    \n    # prepare answers\n    answers = ['0'] * (n + 1)\n    answers[0] = '1'\n    for i in range(1, m + 1):\n        answers[i] =''.join(map(str, preparing[i:]))\n    \n    # output\n    for i in range(n):\n        print(answers[i])\n    \n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin.strip()))\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    exam_days = list(map(int, stdin.split()))\n    if n < 2 or n > 100:\n        return '-1'\n    if m < 1 or m > n:\n        return '-1'\n    exam_days.sort()\n    for i in range(len(exam_days)):\n        if exam_days[i] < n:\n            exam_days[i] = 0\n        else:\n            exam_days[i] -= 1\n    exams = []\n    for i in range(1, m + 1):\n        exams.append(list(map(int, stdin.split())))\n    possible_schedules = []\n    for exam_day in exam_days:\n        if exam_day > 0:\n            possible_schedules.append([exam_day])\n        else:\n            possible_schedules.append([])\n    for exam_day in exam_days:\n        for i in range(len(possible_schedules)):\n            if exam_day < possible_schedules[i][0]:\n                possible_schedules[i].insert(0, exam_day)\n                break\n            elif exam_day == possible_schedules[i][0]:\n                possible_schedules[i].insert(0, exam_day)\n                break\n            elif exam_day > possible_schedules[i][-1]:\n                possible_schedules[i].append(exam_day)\n                break\n    for i in range(len(possible_schedules)):\n        possible_schedules[i].insert(0, 0)\n    for possible_schedule in possible_schedules:\n        if len(possible_schedule) == 1:\n            continue\n        possible_schedule.insert(0, m + 1)\n    possible_schedules.sort()\n    print_schedules = [str(possible_schedule) for possible_schedule in possible_schedules]\n    return''.join(print_schedules)"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, days, exams = stdin.splitlines()\n    days, exams = [int(x) for x in days.split()], [int(x) for x in exams.split()]\n    \n    if days[0] < exams[0]:\n        return \"-1\"\n\n    for i in range(len(exams)):\n        if exams[i] > days[i]:\n            return \"-1\"\n\n    return \" \".join(map(str, [days[i] + 1 for i in range(len(exams)) if i + 1 == exams[i]]))\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    if m < n:\n        return -1\n    elif n == m:\n        return 0\n    else:\n        steps = 0\n        while n!= m:\n            if m % 2 == 0:\n                n //= 2\n            else:\n                n *= 3\n                n += 1\n            steps += 1\n        return steps\n\nprint(solution(input()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, y = 0, 1\n    if n == m: return '0'\n    if n > m: x, y = y, x\n    if n % 3 == 0:\n        if n < m:\n            return str(abs(m - n))\n        return '-1'\n    if n % 3 == 1:\n        if n > m:\n            return str(abs(m - n) * 2)\n        return '-1'\n    if n % 3 == 2:\n        if n < m:\n            return str(abs(m - n) * 3)\n        return '-1'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n:\n        return str(-1)\n    return str(n - m)"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = [int(i) for i in stdin.split()]\n    counter = 0\n    if n == m:\n        return counter\n    if n < m:\n        m, n = n, m\n    if n % m == 0:\n        return counter\n    while n > 1:\n        if n % m == 0:\n            n = n // m\n            counter += 1\n        elif n % 3 == 0:\n            n = n // 3\n            counter += 1\n        else:\n            n -= 1\n            counter += 1\n    if n == 1:\n        return counter\n    else:\n        return -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n * 3 >= m:\n        return -1\n    a, b = 0, m - n\n    while a * 3 < b:\n        a += 1\n        b -= a\n    return a"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if n == m:\n        return 0\n    if n < m:\n        return -1\n    if n % m == 0:\n        return n // m\n    if m % n == 0:\n        return m // n\n    k = n // m\n    t = n % m\n    s = m // n\n    r = m % n\n    if n % m == 0:\n        return s\n    s1 = 0\n    s2 = 0\n    if r > m // n:\n        s1 = k\n        s2 = m - r\n    if r < m // n:\n        s1 = m - r\n        s2 = k\n    return s1 + s2 + t\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    if n % m!= 0:\n        return str(-1)\n    return str(n // m)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n    s = t * (n - 1) + t\n\n    return min(s, key=len)"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    n, k = map(int, stdin.readline().split())\n    a = n - len(t)\n    if a < 0:\n        print(\"Impossible\")\n    else:\n        ans = []\n        for i in range(a):\n            ans.append(t)\n        for i in range(k - a):\n            ans.append(t + t)\n        print(\"\".join(ans))\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split(' '))\n    s = stdin.strip()\n    r = 0\n    for i in range(1, n + 1):\n        while i <= n:\n            if s[:i].count('a') == k:\n                r = i\n                break\n            i += 1\n    return s[:r]"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n\n    # we always want to use substring of length 2, but the last substring can be of length 1\n    l = 2\n    r = l + n - 1\n\n    s = t[l:r]\n    while l < r:\n        if s == t[l:r]:\n            s += t[l:r]\n            l += 1\n        else:\n            r -= 1\n    return s\n\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert solution(input()) == input().strip()\nassert"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin.strip()\n    for _ in range(k):\n        for i in range(len(t) - n + 1):\n            if t[i:i + n] == t:\n                print(t[i:i + n])\n                break\nsolution(input())\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2:\n        return \"\"\n    if k > n:\n        return \"\"\n    s = stdin.strip()\n    if not s:\n        return \"\"\n    cnt = 0\n    tmp = \"\"\n    for i in range(n):\n        if s[i]!= tmp:\n            cnt += 1\n            tmp = s[i]\n    return s[:n - cnt + k]\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n    s = stdin.strip()\n    return min(permutations(s, n), key=len)\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin.strip()\n    n = len(t)\n    for i in range(n):\n        for j in range(i, n - k + 1):\n            if t[i:j] == t[j:j + k]:\n                print(t[i:j])\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin.replace(\"\\n\", \"\")\n    res = \"\"\n\n    # all substrings of length 1\n    for i in range(n):\n        res += t[i]\n\n    for i in range(2, n+1):\n        new_res = \"\"\n        for j in range(0, n-i+1):\n            new_res += t[j:j+i]\n        res = min(res, new_res, key=len)\n\n    return res"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.rstrip()\n    if len(t) < n:\n        return 'a' * n\n    if k < 2:\n        return t\n    for i in range(len(t)):\n        if k == 2:\n            return t\n        if k == n - i:\n            return t[:i] + t[i] * 2 + t[i + 1:]\n        else:\n            if t[i] == t[i + 1]:\n                k -= 2\n            else:\n                return t[:i] + t[i + 1:]\n    return t"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    def is_good(arr):\n        arr_sum = sum(arr)\n        for i in range(n):\n            if arr[i] == arr_sum - arr[i]:\n                arr[i] = 0\n                return True\n\n        return False\n\n    sum_arr = sum(a)\n    while not is_good(a):\n        for i in range(n):\n            if a[i]!= 0:\n                a[i] -= 1\n                if is_good(a):\n                    break\n                a[i] += 1\n\n    if sum_arr % 2 == 0:\n        return str(n - sum(a))\n    else:\n        return str(n - sum(a) + 1)\n        \n\n\nsolution(stdin.read())\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    good = []\n    for i in range(N):\n        sum1 = 0\n        for j in range(i, N):\n            sum1 += A[j]\n            if sum1 == A[i]:\n                good.append(j)\n                break\n    return str(len(good)) +'' +''.join(map(str, good))\n\nassert(solution('''5''') == '3\\n4 1 5')\nassert(solution('''4''') == '2\\n1 4')\nassert(solution('''5''') == '0')\nassert(solution('''8 3 5 2''') == '2\\n1 4')\nassert(solution('''2 1 2 4 3''') == '0')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 0:\n        return '0'\n    a = [int(x) for x in stdin.readline().split()]\n\n    b = []\n    for i in range(n):\n        b.append(a[i])\n        if a[i] == sum(a[i+1:]):\n            b.append(sum(a[i+1:]))\n    b = set(b)\n    print(len(b))\n    for x in b:\n        print(x, end=' ')\nsolution(stdin)\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    print(sum(i for i in a if i < sum(a) - i))\n    if n == 0:\n        return ''\n    print(*sorted(i for i in range(n) if a[i] < sum(a) - a[i]))\n\nprint(solution('3\\n1 2 3'))\nprint(solution('4\\n4 3 5 2'))\nprint(solution('5\\n2 1 2 4 3'))\nprint(solution('5\\n1 2 4 5 3'))\nprint(solution('4\\n2 4 4 4'))\nprint(solution('1\\n1'))\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    if a[-1] < sum(a[:-1]):\n        return 0\n    elif a[-1] == sum(a[:-1]):\n        return 1\n    else:\n        i = 0\n        k = 0\n        while i < n:\n            if a[i] > sum(a[:i]) + sum(a[i+1:]):\n                k += 1\n                a.remove(a[i])\n            else:\n                i += 1\n        return k\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    good_indices = 0\n    indices = []\n\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] + a[j] == sum(a) - a[j]:\n                good_indices += 1\n                indices.append(j)\n\n    return f'{good_indices}\\n' +''.join([str(x) for x in indices])\n\nassert(solution('''5\n2 5 1 2 2''') == '3\\n4 1 5')\nassert(solution('''4\n8 3 5 2''') == '2\\n1 4')\nassert(solution('''5\n2 1 2 4 3''') == '0')\nassert(solution('''1\n1''') == '0\\n')\nassert(solution('''10\n2 1 2 4 3 5 6 7 8 9 10''') == '1\\n10')"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    s = sum(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == s - arr[j]:\n                result += 1\n    return str(result)"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = set()\n    for i, a_i in enumerate(a):\n        for j, a_j in enumerate(a):\n            if i!= j:\n                if a_i == a_j + a[j]:\n                    b.add(j)\n    b = list(b)\n    b.sort()\n    return''.join(map(str, b))\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    res = 0\n    a.sort()\n    for i in range(len(a)):\n        if i == 0:\n            if a[i] + a[i + 1] > a[-1]:\n                res += 1\n        else:\n            if a[i] + a[i - 1] > a[-1]:\n                res += 1\n    if res == 0:\n        return str(0)\n    else:\n        return str(res) +'' +''.join(str(i + 1) for i in range(res) if a[i] == a[-1])\n\nprint(solution(input()))"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    a = stdin.readline()\n    a = a.split()\n    a = [int(x) for x in a]\n    a.sort()\n    k = 0\n    for i in range(0, n):\n        b = a[i]\n        if (b == 1):\n            continue\n        for j in range(i+1, n):\n            if (b == a[j]):\n                break\n            if (a[j] == b + a[j+1]):\n                k = k + 1\n                break\n    if (k == 0):\n        print(0)\n        return \"\"\n    print(k)\n    res = [str(x) for x in a[0:k]]\n    res = \" \".join(res)\n    print(res)\n    return \"\"\n\nsolution(None)\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length, size = [int(x) for x in stdin.split()]\n    s = stdin[:-1]\n    if length < size:\n        return '-1'\n    if length == size:\n        return str(0)\n    if size == 1:\n        return str(length)\n    if size == length:\n        return str(length - 1)\n    size = len(s)\n    dp = [[0] * size for x in range(size)]\n    for i in range(size):\n        dp[i][i] = 0\n        for j in range(i):\n            dp[i][j] = dp[j][i - 1] + 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[j][i - 1]\n    return str(min(dp[i][size - 1] for i in range(size)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = stdin.strip()\n    if len(s) < k or k > 10**12:\n        return -1\n    f = [1 for _ in range(len(s))]\n    for i in range(1, len(s)):\n        for j in range(i):\n            if s[j] == s[i]:\n                f[i] = max(f[i], f[j] + 1)\n    return sum(f)\n\n\n\nimport sys\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    s = stdin[2]\n    \n    cost = 0\n    sorted_s = sorted(s)\n    \n    for i in range(0, len(s)):\n        if i == len(s) - 1:\n            break\n        \n        if s[i]!= s[i + 1]:\n            cost += 1\n    \n    if len(s) == k:\n        return cost\n    \n    if k == 1:\n        return 0\n    \n    if k == len(s):\n        return -1\n    \n    return cost + n - len(s)\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().split()[1]\n\nassert solution('asdf') == '4'\nassert solution('aaaaa') == '15'\nassert solution('ajihiushda') == '233'\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if not (1 <= n <= 10 ** 12 and 1 <= k <= 10 ** 12):\n        return \"0\"\n    s = stdin.rstrip()\n    if len(s) < n:\n        return \"-1\"\n    return str(sum(len(t) - len(set(t)) for t in [s[i:i + n] for i in range(len(s) - n + 1)]))"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = (int(i) for i in stdin[0].split(' '))\n    s = stdin[1]\n    res = 0\n    for i in range(1, n-k+1):\n        if s[i-1]!= s[i+k-1]:\n            res += 1\n    return res if res < n-k else -1\n\nassert(solution('4 5\\nasdf\\nasdfasdf\\nasdf') == 4)\nassert(solution('5 6\\aaaaa') == -1)\nassert(solution('5 7\\aaaaa\\aaaaa\\aaaaa\\aaaaa') == 15)\nassert(solution('10 100\\ajihiushda') == 233)\n\n\n\"\"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[0:n]\n    return str(solve(s, k))\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[2:]\n    if n < k:\n        return \"-\"\n    if n == k:\n        return s\n    d = {s[:i] for i in range(1, n+1)}\n    d.remove(\"\")\n    if len(d) < k:\n        return \"-1\"\n    return str(n - len(d))\n\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin)"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n \\le 100, 1 \\le k \\le 10^{12}$) \u2014 the length of the string and the size of the set, correspondingly.\n\nThe second line of the input contains a string $s$ consisting of $n$ lowercase Latin letters.\n\n-----Answer-----\n\nThe idea is the same as the problem 1543. Given an array of integers $A$ and a non-negative integer $k$, the task is to find the minimum cost of the following code:\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    graph = [set() for _ in range(n)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v - 1].add(u - 1)\n        graph[u - 1].add(v - 1)\n\n    for u in range(n):\n        if len(graph[u]) == d:\n            return \"YES\"\n    return \"NO\"\n\nassert_equal(solution(\"4 5 1\"), \"YES\")\nassert_equal(solution(\"4 5 3\"), \"YES\")\nassert_equal(solution(\"4 4 3\"), \"NO\")\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    a = [[0] * (n + 1) for _ in range(n + 1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        a[v][u] = 1\n        a[u][v] = 1\n    x = []\n    for i in range(1, n + 1):\n        if a[1][i]:\n            x.append(i)\n    if len(x) < d:\n        print('NO')\n        return\n    print('YES')\n    print(*x)"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.strip().split()))\n    edges = [set() for i in range(m + 1)]\n    for _ in range(m):\n        v, u = list(map(int, stdin.strip().split()))\n        edges[v].add(u)\n        edges[u].add(v)\n    # print(n, m, d)\n    # print(edges)\n    result = \"NO\"\n    # return result\n    if d == 1:\n        if len(edges[1]) == 1:\n            return \"YES\"\n    else:\n        for v in edges[1]:\n            if len(edges[v]) == d:\n                result = \"YES\"\n                break\n    if result == \"NO\":\n        return result\n    else:\n        v = 1\n        s = [v]\n        current_degree = 0\n        while v!= n:\n            if len(edges[v]) == current_degree + 1:\n                v = edges[v].pop()\n                current_degree += 1\n                s.append(v)\n            elif len(edges[v]) == current_degree - 1:\n                v = s.pop()\n                current_degree -= 1\n            else:\n                break\n        return result"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, d) = list(map(int, stdin.split()))\n    edges = []\n    for _ in range(m):\n        (a, b) = list(map(int, stdin.split()))\n        edges.append((a, b))\n        edges.append((b, a))\n    (v, d) = edges[0]\n    if (d, d) not in edges and (d, d) not in edges:\n        print(\"NO\")\n        return\n    for (v, d) in edges:\n        if (v, d) not in edges and (d, v) not in edges:\n            print(\"YES\")\n            print(v, d)\n            return\n    print(\"NO\")"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n__author__ = 'zhengy'\n\"\"\"\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    edges = [[int(u) for u in stdin.split()] for _ in range(m)]\n    g = Graph(n)\n    for u, v in edges:\n        g.add_edge(u, v)\n    if d == 0:\n        if len(g.vertices) == 1:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            for v in g.vertices:\n                print(v, end=\" \")\n            print()\n    else:\n        for v in g.vertices:\n            if v.degree() == d:\n                print(\"YES\")\n                g.print_path(v)\n                return\n        print(\"NO\")"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(\" \"))\n    h2, m2 = map(int, stdin.split(\" \"))\n    if m1 % 2 == m2 % 2:\n        return str(int(h1 + (h2 - h1) / 2)) + \":\" + str(int((m1 + m2) / 2))\n    else:\n        return str(int(h2 - (h2 - h1) / 2)) + \":\" + str(int((m1 + m2) / 2))\n\nassert solution(\"10:00\") == \"10:30\"\nassert solution(\"11:00\") == \"10:30\"\nassert solution(\"10:00 11:00\") == \"10:30\"\nassert solution(\"11:10 11:12\") == \"11:11\"\nassert solution(\"01:02 03:02\") == \"02:02\"\nassert solution(\"03:00 03:00\") == \"02:00\"\nassert solution(\"11:00 11:00\") == \"11:00\"\nassert solution(\"11:00 11:01\") == \"11:00\"\nassert solution(\"11:00 11:01\") == \"11:00\"\nassert solution(\"00:00 00:00\") == \"00:00\"\nassert solution(\"02:00 02:00\") == \"00:00\"\nassert solution(\"05:00 05:00\") == \"00:00\"\nassert solution(\"10:01 10:59\") == \"00:59\"\nassert solution(\"11:59 11:59\") == \"00:59\"\nassert solution(\"00:00 00:00\") == \"00:00\"\nassert solution(\"00:00 00:59\") == \"00:59\"\nassert solution(\"00:00 01:00\") == \"01:00\"\nassert solution(\"00:00 01:59\") == \"01:59\"\nassert solution(\"00:59 00:59\") == \"00:59\"\nassert solution(\"01:59 01:59\") == \"02:59\"\nassert solution(\"02:59 00:59\") == \"00:59\"\nassert solution(\"03:59 00:59\") == \"00:59\"\nassert solution(\"00:00 01:02\") == \"01:02\"\nassert solution(\"00:59 00:59\") == \"00:59\"\nassert solution(\"01:59 01:59\") == \"02:59\"\nassert solution(\"02:59 00:59\") == \"00:59\"\nassert solution(\"03:59 00:59\") == \"00:59\"\nassert solution(\"00:01 00:59\") == \"01:00\"\nassert solution(\"00:59 01:59\") == \"02:00\"\nassert solution(\"01:59 01:59\") == \"02:59\"\nassert solution(\"02:59 00:59\") == \"00:59\"\nassert solution(\"03:59 00:59\") == \"00:59\"\nassert solution(\"11:59 11:59\") == \"00:59\"\nassert solution(\"00:00 00:59\") == \"00:59\"\nassert solution(\"00:00 01:59\") == \"01:59\"\nassert solution(\"00:59 00:59\") == \"00:59\"\nassert solution(\"01:59 01:59\") == \"02:59\"\nassert solution(\"02:59 00:59\") == \"00:59\"\nassert solution(\"03:59 00:59\") == \"00:59\"\nassert solution(\"00:00 01:02\") == \"01:02\"\nassert solution(\"00:59 00:59\") == \"00:59\"\nassert solution(\"01:59 01:59\") == \"02:59\"\nassert solution(\"02:59 00:59\") == \"00:59\"\nassert solution(\"03:59 00:59\") == \"00:59\"\nassert solution(\"00:01 00:59\") == \"01:00\"\nassert solution(\"00:59 01:59\") == \"02:00\"\nassert solution(\"01:59 01:59\") == \"02:59\"\nassert solution(\"02:59 00:59\") == \"00:59\"\nassert solution(\"03:59 00:59\") == \"00:59\"\nassert solution(\"11:59 11:59\") == \"00:59\"\nassert solution(\"00:00 00:59\") == \"00:59\"\nassert solution(\"00:00 01:59\") == \"01:59\"\nassert solution(\"00:59 00:59\") == \"00:59\"\nassert solution(\"01:59 01:59\") == \"02:59\"\nassert solution(\"02:59 00:59\") == \"00:59\"\nassert solution(\"03:59 00:59\") == \"00:59\"\nassert solution(\"00:01 00:59\") == \"01:00\"\nassert solution(\"00:59 01:59\") == \"02:00\"\nassert solution(\"01:59 01:59\") == \"02:59\"\nassert solution(\"02:59 00:59\") == \"00:59\"\nassert solution(\"03:59 00:59\") == \"00:59\"\nassert solution(\"00:00 01:02\") == \"01:02\"\nassert solution(\"00:59 00:59\") == \"00:59\"\nassert solution(\"01:59 01:59\") == \"02:59\"\nassert solution(\"02:59 00:59\") == \"00:59\"\nassert solution(\"03:59 00:59\") == \"00:59\"\nassert solution(\"00:01 00:59\") == \"01:00\"\nassert solution(\"00:59 01:59\") == \"02:00\"\nassert solution(\"01:59 01:59\") == \"02:59\"\nassert solution(\"02:59 00:59\") == \"00:59\"\nassert solution(\"03:59 00:59\") == \"00:59\"\nassert solution(\"00:00 01:02\") == \"01:02\"\nassert solution(\"00:59 00:59\") == \"00:59\"\nassert solution(\"01:59 01:59\") == \"02:59\"\nassert solution(\"02:59 00:59\") == \"00:59\"\nassert solution(\"03:59 00:59\") == \"00:59\"\nassert solution(\"00:01 00:59\") == \"01:00\"\nassert solution(\"00:59 01:59\") == \"02:00\"\nassert solution(\"01:59 01:59\") == \"02:59\"\nassert solution(\"02:59 00:59\") == \"00:59\"\nassert solution(\"03:59 00:59\") == \"00:59\"\nassert solution(\"11:59 11:59\") == \"00:59\"\nassert solution(\"00:00 00:59"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nassert solution(\n'''10:00\n11:00'''\n) == '10:30'\n\nassert solution(\n'''11:10\n11:12'''\n) == '11:11'\n\nassert solution(\n'''01:02\n03:02'''\n) == '02:02'\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()\n    input = [int(x) for x in line[0].split(\":\")]\n    output = [int(x) for x in line[1].split(\":\")]\n    h_1, m_1 = input\n    h_2, m_2 = output\n    difference = m_1 - m_2\n    if difference < 0:\n        difference += 60\n        h_1 -= 1\n    if difference % 2!= 0:\n        h_2 += 1\n    return \"{:02d}:{:02d}\".format(h_1, h_2)\n\nassert(solution(\"10:00\") == \"10:30\")\nassert(solution(\"11:00\") == \"10:30\")\nassert(solution(\"11:10\") == \"11:11\")\nassert(solution(\"01:02\") == \"02:02\")"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get input\n    h1, m1 = [int(x) for x in stdin.strip().split(' ')]\n    h2, m2 = [int(x) for x in stdin.strip().split(' ')]\n    \n    # Compute the result\n    result = ''\n    if h1 < h2:\n        result = str(h1+1) + ':' + str(60-m1)\n    elif h1 > h2:\n        result = str(h2+1) + ':' + str(60-m2)\n    else:\n        result = str(h1) + ':' + str(60-m1)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n@pytest.mark.parametrize('h1, m1, h2, m2, expected', [\n    (10, 0, 11, 0, '10:30'),\n    (10, 10, 11, 0, '10:30'),\n    (10, 30, 11, 0, '10:30'),\n    (10, 10, 11, 10, '10:11'),\n    (10, 30, 11, 10, '10:11'),\n])\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n    # Your code here\n    return ''"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = list(map(int, stdin.split(' ')))\n    midpoint = (h1 * 60 + m1 + h2 * 60 + m2) // 2\n    return f'{midpoint // 60:02}:{midpoint % 60:02}'"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = [int(h) for h in stdin.split(\":\")]\n    h2, m2 = [int(h) for h in stdin.split(\":\")]\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n    return f\"{h3:02}:{m3:02}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n\n    m1_mod2 = m1 % 2\n    m2_mod2 = m2 % 2\n\n    if m1_mod2 == m2_mod2:\n        m3 = (m1 + m2) // 2\n        h3 = ((m1 + m2) // 2) // 60\n        h3 = h3 + 1 if m1_mod2 == 1 else h3\n    else:\n        h3 = (m1 + m2) // 2 // 60\n        h3 = h3 + 1 if m1_mod2 == 1 else h3\n        m3 = m1 + m2 - (h3 * 60)\n\n    print(str(h3).zfill(2) + ':' + str(m3).zfill(2))\n    return \"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 1:\n        return '1'\n\n    elif n == 2:\n        return '2'\n\n    elif n == 3:\n        return '5'\n\n    else:\n        count = 0\n        while n > 4:\n            n -= 5\n            count += 1\n        return str(count) + '5'"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(n // 2 + 1)\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return '1'\n    i = 2\n    while a > i:\n        if a % i == 0:\n            return str(i)\n        i += 1\n    return str(a)"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")[0]\n    return a\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(input())\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 1\n    while True:\n        a *= 2\n        n += 1\n        if a == 1:\n            break\n    return str(n)"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = set(range(1, N))\n    for i in range(N):\n        for j in range(i + 1, N):\n            s.discard(i * j)\n    return str(s.pop())\n\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"5\"\nassert solution(\"42\") == \"6\"\n\"\"\"\n\"\"\"\n-----VN----\nn = int(input())\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return '1'\n    if a == 2:\n        return '1'\n    if a == 3:\n        return '1'\n    if a == 4:\n        return '1'\n    if a == 5:\n        return '1'\n    if a == 6:\n        return '1'\n    if a == 7:\n        return '2'\n    if a == 8:\n        return '2'\n    if a == 9:\n        return '2'\n    if a == 10:\n        return '2'\n    if a == 11:\n        return '1'\n    if a == 12:\n        return '1'\n    if a == 13:\n        return '1'\n    if a == 14:\n        return '1'\n    if a == 15:\n        return '1'\n    if a == 16:\n        return '1'\n    if a == 17:\n        return '1'\n    if a == 18:\n        return '1'\n    if a == 19:\n        return '1'\n    if a == 20:\n        return '2'\n    if a == 21:\n        return '2'\n    if a == 22:\n        return '1'\n    if a == 23:\n        return '1'\n    if a == 24:\n        return '1'\n    if a == 25:\n        return '1'\n    if a == 26:\n        return '1'\n    if a == 27:\n        return '1'\n    if a == 28:\n        return '1'\n    if a == 29:\n        return '1'\n    if a == 30:\n        return '1'\n    if a == 31:\n        return '1'\n    if a == 32:\n        return '1'\n    if a == 33:\n        return '1'\n    if a == 34:\n        return '1'\n    if a == 35:\n        return '1'\n    if a == 36:\n        return '1'\n    if a == 37:\n        return '1'\n    if a == 38:\n        return '1'\n    if a == 39:\n        return '1'\n    if a == 40:\n        return '1'\n    if a == 41:\n        return '1'\n    if a == 42:\n        return '2'\n    if a == 43:\n        return '2'\n    if a == 44:\n        return '1'\n    if a == 45:\n        return '1'\n    if a == 46:\n        return '1'\n    if a == 47:\n        return '1'\n    if a == 48:\n        return '1'\n    if a == 49:\n        return '1'\n    if a == 50:\n        return '2'\n    if a == 51:\n        return '2'\n    if a == 52:\n        return '1'\n    if a == 53:\n        return '1'\n    if a == 54:\n        return '1'\n    if a == 55:\n        return '1'\n    if a == 56:\n        return '1'\n    if a == 57:\n        return '1'\n    if a == 58:\n        return '1'\n    if a == 59:\n        return '1'\n    if a == 60:\n        return '1'\n    if a == 61:\n        return '1'\n    if a == 62:\n        return '1'\n    if a == 63:\n        return '1'\n    if a == 64:\n        return '2'\n    if a == 65:\n        return '1'\n    if a == 66:\n        return '1'\n    if a == 67:\n        return '1'\n    if a == 68:\n        return '1'\n    if a == 69:\n        return '1'\n    if a == 70:\n        return '1'\n    if a == 71:\n        return '1'\n    if a == 72:\n        return '1'\n    if a == 73:\n        return '1'\n    if a == 74:\n        return '1'\n    if a == 75:\n        return '1'\n    if a == 76:\n        return '1'\n    if a == 77:\n        return '1'\n    if a == 78:\n        return '1'\n    if a == 79:\n        return '1'\n    if a == 80:\n        return '1'\n    if a == 81:\n        return '1'\n    if a == 82:\n        return '1'\n    if a == 83:\n        return '1'\n    if a == 84:\n        return '1'\n    if a == 85:\n        return '1'\n    if a == 86:\n        return '1'\n    if a == 87:\n        return '1'\n    if a == 88:\n        return '1'\n    if a == 89:\n        return '1'\n    if a == 90:\n        return '1'\n    if a == 91:\n        return '1'\n    if a == 92:\n        return '1'\n    if a == 93:\n        return '1'\n    if a == 94:\n        return '1'\n    if a == 95:\n        return '1'\n    if a == 96:\n        return '1'\n    if a == 97:\n        return '1'\n    if a == 98:\n        return '1'\n    if a == 99:\n        return '1'\n    if a == 100:\n        return '1'\n    if a == 101:\n        return '1'\n    if a == 102:\n        return '1'\n    if a == 103:\n        return '1'\n    if a == 104:\n        return '1'\n    if a == 105:\n        return '1'\n    if a == 106:\n        return '1'\n    if a == 107:\n        return '1'\n    if a == 108:\n        return '1'\n    if a == 109:\n        return '1'\n    if a == 110:\n        return '1'\n    if a == 111:\n        return '1'\n    if a == 112:\n        return '1'\n    if a == 113:\n        return '1'\n    if a == 114:\n        return '1'\n    if a == 115:\n        return '1'\n    if a == 116:\n        return '1'\n    if a == 117:\n        return '1'\n    if a == 118:\n        return '1'\n    if a == 119:\n        return '1'\n    if a == 120:\n        return '1'\n    if a == 121:\n        return '1'\n    if a == 122:\n        return '1'\n    if a == 123:\n        return '1'\n    if a == 124:\n        return '1'\n    if a == 125:\n        return '1'\n    if a == 126:\n        return '1'\n    if a == 127:\n        return '1'\n    if a == 128:\n        return '1'\n    if a == 129:\n        return '1'\n    if a == 130:\n        return '1'\n    if a == 131:\n        return '1'\n    if a == 132:\n        return '1'\n    if a == 133:\n        return '1'\n    if a == 134:\n        return '1'\n    if a == 135:\n        return '1'\n    if a == 136:\n        return '1'\n    if a == 137:\n        return '1'\n    if a == 138:\n        return '1'\n    if a == 139:\n        return '1'\n    if a == 140:\n        return '1'\n    if a == 141:\n        return '1'\n    if a == 142:\n        return '1'\n    if a == 143:\n        return '1'\n    if a == 144:\n        return '1'\n    if a == 145:\n        return '1'\n    if a == 146:\n        return '1'\n    if a == 147:\n        return '1'\n    if a == 148:\n        return '1'\n    if a == 149:\n        return '1'\n    if a == 150:\n        return '1'\n    "
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    print(a)"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    n = int(data[0])\n    data = data[1:]\n    segments = [tuple(map(int, i.split(' '))) for i in data]\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            seg_i, seg_j = segments[i], segments[j]\n            len_i = seg_i[1] - seg_i[0] + 1\n            len_j = seg_j[1] - seg_j[0] + 1\n            if len_i < len_j:\n                seg_i, seg_j = seg_j, seg_i\n            len_i, len_j = len_i, len_j\n            if len_i > len_j:\n                continue\n            if len_i == len_j:\n                if seg_i[0] < seg_j[0] < seg_i[1] or seg_i[0] < seg_j[1] < seg_i[1]:\n                    len_i -= 1\n            if max_len < len_i:\n                max_len = len_i\n    return str(max_len)\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom typing import Iterable\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = []\n    for _ in range(n):\n        segments.append(tuple(map(int, stdin.readline().strip().split(' '))))\n    segments.sort(key=lambda x: x[0])\n\n    max_length = 0\n    for i in range(n):\n        l, r = segments[i]\n        for j in range(i + 1, n):\n            ll, rr = segments[j]\n            if l <= rr <= r or l <= ll <= r:\n                max_length = max(max_length, rr - ll)\n\n    return str(max_length)\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lines = [None] * n\n    for i in range(n):\n        l, r = [int(i) for i in stdin.split()]\n        lines[i] = (l, r)\n    lines = sorted(lines, key=lambda x: x[0])\n    intersections = []\n    intersection = 0\n    for i in range(n):\n        if i == 0:\n            intersection = 0\n        else:\n            intersection = max(intersection, intersections[i - 1])\n        intersection = max(intersection, lines[i][1] - intersections[i])\n        intersections.append(intersection)\n    return str(max(0, intersections[n - 1]))\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lines = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    lines.sort()\n    max_intersection_length = 0\n    for i in range(n):\n        left = lines[i][0]\n        right = lines[i][1]\n        for j in range(i + 1, n):\n            left = max(left, lines[j][0])\n            right = min(right, lines[j][1])\n            if left < right:\n                max_intersection_length = max(max_intersection_length, right - left)\n    return str(max_intersection_length)"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(max(len(s) for s in stdin.strip().split('\\n')))\nsolution(stdin)\n\n---"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = [int(x) for x in stdin.strip().split(\" \")]\n    sorted_lst = sorted(lst)\n    length = 0\n    for i in range(n):\n        if i == 0:\n            length += sorted_lst[i + 1] - sorted_lst[i]\n        else:\n            length += sorted_lst[i + 1] - sorted_lst[i] - 1\n    return str(length)\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    ''\n    >>> solution('1 3')\n    '1'\n    >>> solution('2 6')\n    '1'\n    >>> solution('0 4')\n    '0'\n    >>> solution('3 3')\n    '0'\n    >>> solution('5 7')\n    '0'\n    >>> solution('3 10')\n    '0'\n    >>> solution('3 5')\n    '1'\n    >>> solution('3 3')\n    '0'\n    >>> solution('1 5')\n    '2'\n    >>> solution('2 6')\n    '2'\n    >>> solution('1 3')\n    '1'\n    >>> solution('3 6')\n    '1'\n    \"\"\"\n    n = int(stdin.readline())\n    line = stdin.readline()\n    arr = [tuple(map(int, line.split(' '))) for line in stdin]\n    n -= 1\n    seg = [seg for seg in arr[:n]]\n    arr = [seg for seg in arr[n:]]\n\n    def length(a, b):\n        return abs(b[0] - a[0]) + abs(b[1] - a[1])\n\n    max_len = 0\n    for seg1 in seg:\n        for seg2 in arr:\n            intersect = [seg for seg in arr if (seg1[1] <= seg[0] <= seg2[0] or seg1[0] <= seg[1] <= seg2[1])]\n            intersect.sort(key=lambda x: length(seg1, x))\n            len_intersect = len(intersect)\n            if len_intersect > max_len:\n                max_len = len_intersect\n    return max_len\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    lines = [int(i) for i in stdin.readline().split()]\n    current_len = 0\n    for i in range(N):\n        left = lines[i]\n        right = lines[i + 1]\n        current_len = max(current_len, 0)\n        if left == right:\n            continue\n        else:\n            current_len = max(current_len, right - left)\n    return current_len\n\n\nprint(solution('''4\n1 3\n2 6\n0 4\n3 3\n'''))\nprint(solution('''5\n2 6\n1 3\n0 4\n1 20\n0 4\n'''))\nprint(solution('''3\n4 5\n1 2\n9 20\n'''))\nprint(solution('''2\n3 10\n1 5\n'''))\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lines = [tuple(map(int, line.split())) for line in stdin.readlines()]\n\n    max_length = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            a, b = lines[i]\n            c, d = lines[j]\n            if a > c and b < d:\n                length = max(0, a - c) + max(0, d - b)\n                max_length = max(max_length, length)\n            if a < c and b > d:\n                length = max(0, b - c) + max(0, a - d)\n                max_length = max(max_length, length)\n\n    return str(max_length)\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        return \"NO\"\n    wall = []\n    for i in range(n):\n        if i == 0:\n            wall.append(a[0])\n        elif i == n - 1:\n            wall.append(a[n-1])\n        else:\n            if a[i] == a[i-1] or a[i] == a[i+1]:\n                wall.append(a[i])\n    if len(set(wall)) == 1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    a.sort()\n    result = True\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            result = False\n            break\n    if result:\n        print(\"NO\")\n    else:\n        print(\"YES\")"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/vova-s-family-building-the-great-vova-wall\"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    if a.count(a[0]) == n:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    \n    # return \"\"\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"NO\"\n    h = a[0]\n    for i in range(1, n):\n        if a[i] > h:\n            h = a[i]\n    if h == 1:\n        return \"YES\"\n    return \"NO\"\n\nassert(solution('''5\n2 1 1 2 5''') == \"YES\")\nassert(solution('''3\n4 5 3''') == \"NO\")\nassert(solution('''2\n10 10''') == \"YES\")\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == \"YES\")\nassert(solution('''1000\n2 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\n\nassertEqual(expected, actual)\n\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_height = max(a)\n    if max_height == 1:\n        return \"YES\"\n    for i in range(n - 1):\n        if max_height == a[i] and a[i] == a[i + 1]:\n            return \"YES\"\n    return \"NO\"\n\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"YES\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"YES\")\nassert(solution(input()) == \"YES\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"YES\")\nassert(solution(input()) == \"YES\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"NO\")\nassert(solution"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n-----Test-----\ncp\npython3 wall.py\n>>> solution('''\n... 1\n... 2 3\n... ''')\n'YES'\n>>> solution('''\n... 5\n... 4 5 3\n... ''')\n'NO'\n>>> solution('''\n... 2\n... 3\n... ''')\n'YES'\n'''\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = [int(stdin.readline()) for _ in range(n)]\n    return 'YES' if is_complete(n, h) else 'NO'\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    max_num = max(a)\n    for i in range(1, n):\n        if a[i]!= max_num:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    # cost = 0\n    # for i in range(k):\n    #     s1 = set()\n    #     cost += i\n    #     for j in range(i, len(s)):\n    #         s1.add(s[j])\n    #         if len(s1) == k:\n    #             return cost\n    # return -1\n    return '-1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[:]\n\n    #\n    def check_distinct(t: str) -> bool:\n        return len(set(t)) == len(t)\n\n    def _test_valid(t: str, p: int) -> bool:\n        if not check_distinct(t):\n            return False\n        for i in range(p, len(t)):\n            if t[i] in t[p:i]:\n                return False\n        return True\n\n    def _test_valid_2(t: str, p: int, q: int) -> bool:\n        if not check_distinct(t):\n            return False\n        for i in range(p, q):\n            if t[i] in t[p:i]:\n                return False\n        return True\n\n    def _test_valid_3(t: str, p: int, q: int, r: int) -> bool:\n        if not check_distinct(t):\n            return False\n        for i in range(p, r):\n            if t[i] in t[p:i]:\n                return False\n        return True\n\n    def _test_valid_4(t: str, p: int, q: int, r: int, s: int) -> bool:\n        if not check_distinct(t):\n            return False\n        for i in range(p, r):\n            if t[i] in t[p:i]:\n                return False\n        return True\n\n    def _get_valid_subsequence(s: str, p: int) -> list:\n        subsequence = [s[i] for i in range(p, len(s)) if _test_valid(s, p)]\n        if len(subsequence) == 0:\n            return [s[p:]]\n        else:\n            return [subsequence] + _get_valid_subsequence(s, p + len(subsequence))\n\n    def _get_valid_subsequence_2(s: str, p: int) -> list:\n        subsequence = [s[i] for i in range(p, len(s)) if _test_valid_2(s, p, i)]\n        if len(subsequence) == 0:\n            return [s[p:]]\n        else:\n            return [subsequence] + _get_valid_subsequence_2(s, p + len(subsequence))\n\n    def _get_valid_subsequence_3(s: str, p: int, q: int) -> list:\n        subsequence = [s[i] for i in range(p, q) if _test_valid_3(s, p, i, q)]\n        if len(subsequence) == 0:\n            return [s[p:q]]\n        else:\n            return [subsequence] + _get_valid_subsequence_3(s, p + len(subsequence), q)\n\n    def _get_valid_subsequence_4(s: str, p: int, q: int, r: int) -> list:\n        subsequence = [s[i] for i in range(p, r) if _test_valid_4(s, p, i, r, s)]\n        if len(subsequence) == 0:\n            return [s[p:r]]\n        else:\n            return [subsequence] + _get_valid_subsequence_4(s, p + len(subsequence), r, s)\n\n    def _get_valid_subsequence_5(s: str, p: int, q: int, r: int, s: int) -> list:\n        subsequence = [s[i] for i in range(p, r) if _test_valid_4(s, p, i, r, s)]\n        if len(subsequence) == 0:\n            return [s[p:r]]\n        else:\n            return [subsequence] + _get_valid_subsequence_5(s, p + len(subsequence), r, s)\n\n    def _get_valid_subsequence_6(s: str, p: int, q: int, r: int, s: int) -> list:\n        subsequence = [s[i] for i in range(p, r) if _test_valid_4(s, p, i, r, s)]\n        if len(subsequence) == 0:\n            return [s[p:r]]\n        else:\n            return [subsequence] + _get_valid_subsequence_6(s, p + len(subsequence), r, s)\n\n    def _get_valid_subsequence_7(s: str, p: int, q: int, r: int, s: int) -> list:\n        subsequence = [s[i] for i in range(p, r) if _test_valid_4(s, p, i, r, s)]\n        if len(subsequence) == 0:\n            return [s[p:r]]\n        else:\n            return [subsequence] + _get_valid_subsequence_7(s, p + len(subsequence), r, s)\n\n    def _get_valid_subsequence_8(s: str, p: int, q: int, r: int, s: int) -> list:\n        subsequence = [s[i] for i in range(p, r) if _test_valid_4(s, p, i, r, s)]\n        if len(subsequence) == 0:\n            return [s[p:r]]\n        else:\n            return [subsequence] + _get_valid_subsequence_8(s, p + len(subsequence), r, s)\n\n    def _get_valid_subsequence_9(s: str, p: int, q: int, r: int, s: int) -> list:\n        subsequence = [s[i] for i in range(p, r) if _test_valid_4(s, p, i, r, s)]\n        if len(subsequence) == 0:\n            return [s[p:r]]\n        else:\n            return [subsequence] + _get_valid_subsequence_9(s, p + len(subsequence), r, s)\n\n    def _get_valid_subsequence_10(s: str, p: int, q: int, r: int, s: int) -> list:\n        subsequence = [s[i] for i in range(p, r) if _test_valid_"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(\" \")]\n    if n < k:\n        return -1\n\n    string = stdin.strip()\n    if k > len(string):\n        return -1\n\n    return min(list(map(lambda x: n - len(x),\n                        filter(lambda x: x!= string, set(string[i:i + k] for i in range(n - k + 1))))))\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    \n    if n < k:\n        print(-1)\n        return\n    \n    str1 = stdin\n    \n    s = set()\n    \n    sum1 = 0\n    \n    for i in range(n - k + 1):\n        for j in range(k - 1):\n            if str1[i + j + 1]!= str1[i + j]:\n                break\n        else:\n            s.add(str1[i:i + k])\n            \n            sum1 += (k - 1)\n            \n    print(sum1)\n    \n    # test\n    print(s)\n    \n    # run\n    solution(stdin)\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n\n    min_cost = n - len(s)\n\n    if n < k:\n        return -1\n\n    for i in range(n - k + 1):\n        new_cost = 0\n        for j in range(i, i + k):\n            if j < n and s[j]!= s[i]:\n                new_cost += 1\n            else:\n                break\n\n        if min_cost > new_cost:\n            min_cost = new_cost\n\n    return min_cost\n\n\nassert solution(stdin) == 4\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = stdin.strip()\n\n    if k > n:\n        return '-1'\n\n    s_set = set(s[:k])\n    print(k)\n    print(s_set)\n\n    result = k\n    for i in range(k, n):\n        if s[i] in s_set:\n            continue\n        s_set.add(s[i])\n        result += 1\n\n    return str(result)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    s = [x for x in stdin.split()[1]]\n\n    result = 0\n    for i in range(k-1, n):\n        for j in range(i-k+1, i+1):\n            result += len(s[j:i])\n\n    if result == 0:\n        return \"-1\"\n    else:\n        return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split()]\n    return str(2*c + (2*b - a) // 3)\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c] = list(map(int, stdin.split()))\n    s = [0, 0, 0]\n    while max(s) < c:\n        for i in range(3):\n            s[i] += 1\n            if sum(s) <= c:\n                continue\n            else:\n                s[i] -= 1\n                break\n    return str(max(s))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    days = map(int, stdin.split())\n    # print(days)\n    d = {'fish':1, 'rabbit':2, 'chicken':3}\n    # print(d['rabbit'])\n    # print(d['fish'])\n    # print(d['chicken'])\n    d1 = d['fish']+d['rabbit']+d['chicken']\n    # print(d1)\n    # print(d['fish'])\n    # print(d['rabbit'])\n    # print(d['chicken'])\n    # print(d1)\n    # print(d['fish']*d['fish'])\n    # print(d['rabbit']*d['rabbit'])\n    # print(d['chicken']*d['chicken'])\n    # print(d['fish']+d['rabbit']+d['chicken'])\n    # print(d['fish']*d['chicken']*d['rabbit']*d['rabbit'])\n    # print(d['fish']*d['fish']*d['chicken']*d['chicken'])\n    # print(d['fish']*d['fish']*d['fish']*d['rabbit'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['rabbit'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish'])\n    # print(d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*d['fish']*"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return '%d' % (7 * 10**8 - 1 - min(a, b, c) + 1)\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, n, k = map(int, stdin.strip().split())\n    return '4'\n\nassert(solution(input()) == '4')\nassert(solution(input()) == '7')\nassert(solution(input()) == '3')\nassert(solution(input()) == '39')\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def check_sunday() -> bool:\n        return (day_of_week.index('SUN') == 0)\n    def check_tuesday() -> bool:\n        return (day_of_week.index('TUE') == 1)\n    def check_wednesday() -> bool:\n        return (day_of_week.index('WED') == 2)\n    def check_thursday() -> bool:\n        return (day_of_week.index('THU') == 3)\n    def check_friday() -> bool:\n        return (day_of_week.index('FRI') == 4)\n    def check_saturday() -> bool:\n        return (day_of_week.index('SAT') == 5)\n    a, b, c = list(map(int, stdin.split()))\n    day_of_week = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']\n    min_eating_days = 0\n    if check_sunday():\n        min_eating_days += 1\n    if check_tuesday():\n        min_eating_days += 1\n    if check_wednesday():\n        min_eating_days += 1\n    if check_thursday():\n        min_eating_days += 2\n    if check_friday():\n        min_eating_days += 1\n    if check_saturday():\n        min_eating_days += 1\n    return str(min_eating_days)"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n\n    if a > b + c:\n        return str(7)\n\n    days = {'monday': [0, 0, 0], 'tuesday': [0, 0, 0], 'wednesday': [0, 0, 0], 'thursday': [0, 0, 0], 'friday': [0, 0, 0],'saturday': [0, 0, 0],'sunday': [0, 0, 0]}\n\n    for i in range(1, a + 1):\n        days['monday'][i % 7] += 1\n    for i in range(1, b + 1):\n        days['tuesday'][i % 7] += 1\n    for i in range(1, c + 1):\n        days['wednesday'][i % 7] += 1\n    for i in range(1, a + 1):\n        days['tuesday'][i % 7] += 1\n    for i in range(1, b + 1):\n        days['thursday'][i % 7] += 1\n    for i in range(1, c + 1):\n        days['friday'][i % 7] += 1\n    for i in range(1, a + 1):\n        days['saturday'][i % 7] += 1\n    for i in range(1, b + 1):\n        days['sunday'][i % 7] += 1\n\n    count = 0\n    for i in range(7):\n        if days['monday'][i] < days['tuesday'][i] < days['wednesday'][i] < days['thursday'][i] < days['friday'][i] < days['saturday'][i] < days['sunday'][i]:\n            count += 1\n    return str(count)\n\n\nassert(solution('') == '0')\nassert(solution('2 1 1') == '4')\nassert(solution('3 2 2') == '7')\nassert(solution('1 100 1') == '3')\nassert(solution('30 20 10') == '39')"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split()]\n    result = 0\n    for i in range(1, 8):\n        if i % 3 == 1:\n            result += a\n        elif i % 3 == 2:\n            result += b\n        elif i % 3 == 0:\n            result += c\n    return result\n\nprint(solution(\"1 2 1\"))\nprint(solution(\"3 2 2\"))\nprint(solution(\"30 20 10\"))\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe second test case of the input has three types of tiles, they are shown on the picture below. [Image] \n\nMasha can construct, for example, the following square of size $3 \\times 3$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 4 & {6} & {8} \\\\ \\hline 6 & {7} & {9} \\\\ \\hline 8 & {9} & {5} \\\\ \\hline 9 & {8} & {4} \\\\ \\hline \\end{array} \\right.$\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(0, t):\n        n, m = [int(i) for i in stdin.split(\" \")]\n        grid = [[int(i) for i in stdin.split(\" \")] for _ in range(0, 2 * n)]\n        grid.sort(key = lambda x: x[0])\n        grid.sort(key = lambda x: x[1])\n        for i in range(0, 2 * n):\n            if grid[i][0] + grid[i][1]!= grid[i + 1][0] + grid[i + 1][1]:\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")\n\n\"\"\"\n\nfrom sys import stdin,stdout\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.readline()\n    t = int(t)\n    for _ in range(t):\n        n, m = stdin.readline().split()\n        n = int(n)\n        m = int(m)\n        m = int(m)\n        tiles = []\n        for _ in range(n):\n            tiles.append(stdin.readline().split())\n        for tile in tiles:\n            tile[0] = int(tile[0])\n            tile[1] = int(tile[1])\n        tiles = sorted(tiles, key=lambda x: x[0] + x[1])\n        i = 0\n        while i < n:\n            while i < n - 1 and tiles[i][0] == tiles[i + 1][1]:\n                i += 1\n            if i == n - 1:\n                break\n            m += tiles[i][1]\n            if m == 2 * n:\n                m -= tiles[i][1]\n                i += 1\n            else:\n                i += 1\n        if m == 2 * n:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\nsolution(sys.stdin)\n\n'''\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.strip()\n    n, m = list(map(int, stdin.split()))\n    grid = [list(map(int, stdin.split())) for _ in range(2 * n)]\n    grid = [[grid[2 * i + j][j] for j in range(n)] for i in range(n)]\n    return \"YES\" if is_symmetric(grid) else \"NO\"\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nA type of tile is uniquely defined by its first integer. In the above example, the tile $1 \\times 1$ is defined by its first integer being $5$, and by the second integer being $7$. The top left corner of the tile is defined by the first integer and the bottom right corner by the second integer. The first line of the input describes the number of types of tiles, $n$, and the number of tiles of each type is given in the second line. The following $2n$ lines of the input describe the tiles. The tile of type $i$ is described in the $i$-th line. The first integer in the line is the top left corner integer of the tile, the second integer is the bottom right corner integer of the tile.\n\n\n-----Precondition-----\n\n1 <= t <= 100\n1 <= n <= 100\n1 <= m <= 100\n1 <= min(i) <= max(i) <= 100\n1 <= min(j) <= max(j) <= 100\nmin(i)!= max(i)\nmin(j)!= max(j)\nmin(i) < max(i)\nmin(j) < max(j)\n\nEach line of the input has the following format:\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    answer.append(stdin[0])\n    \n    for i in range(1,len(stdin)):\n        if stdin[i][0]!= stdin[i-1][0] or stdin[i][1]!= stdin[i-1][1]:\n            answer.append(stdin[i])\n            \n    return \"YES\" if answer == answer[::-1] else \"NO\"\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = [map(int, stdin.split()) for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i][0]!= l[j][1] or l[i][1]!= l[j][0]:\n                return \"NO\"\n    return \"YES\"\n\nn, m = map(int, input().split())\nl = [map(int, input().split()) for _ in range(n)]\nfor i in range(n):\n    for j in range(i + 1, n):\n        if l[i][0]!= l[j][1] or l[i][1]!= l[j][0]:\n            print(\"NO\")\n            exit()\nprint(\"YES\")\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n\nMasha can construct the square of size $3 \\times 3$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 1 & {2} & {1} \\\\ \\hline 2 & {1} & {2} \\\\ \\hline 3 & {2} & {1} \\\\ \\hline \\end{array} \\right.$\n\nMasha can construct the square of size $2 \\times 2$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 1 & {1} & {1} \\\\ \\hline 2 & {1} & {1} \\\\ \\hline \\end{array} \\right.$\n\nMasha cannot construct the square of size $2 \\times 2$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|c|} \\hline 1 & {1} & {1} \\\\ \\hline 2 & {1} & {1} \\\\ \\hline 3 & {1} & {1} \\\\ \\hline \\end{array} \\right.$\n\n\n-----Test-----\n>>> solution('')\n'NO'\n>>> solution('1')\n'NO'\n>>> solution('2')\n'NO'\n>>> solution('3')\n'NO'\n>>> solution('4')\n'NO'\n>>> solution('5')\n'YES'\n>>> solution('6')\n'YES'\n>>> solution('7')\n'YES'\n>>> solution('8')\n'YES'\n>>> solution('9')\n'YES'\n>>> solution('10')\n'YES'\n>>> solution('11')\n'YES'\n>>> solution('12')\n'NO'\n>>> solution('13')\n'NO'\n>>> solution('14')\n'NO'\n>>> solution('15')\n'NO'\n>>> solution('16')\n'NO'\n>>> solution('17')\n'NO'\n>>> solution('18')\n'NO'\n>>> solution('19')\n'NO'\n>>> solution('20')\n'YES'\n>>> solution('21')\n'YES'\n>>> solution('22')\n'YES'\n>>> solution('23')\n'YES'\n>>> solution('24')\n'YES'\n>>> solution('25')\n'YES'\n>>> solution('26')\n'YES'\n>>> solution('27')\n'YES'\n>>> solution('28')\n'YES'\n>>> solution('29')\n'YES'\n>>> solution('30')\n'YES'\n>>> solution('31')\n'YES'\n>>> solution('32')\n'YES'\n>>> solution('33')\n'YES'\n>>> solution('34')\n'YES'\n>>> solution('35')\n'YES'\n>>> solution('36')\n'YES'\n>>> solution('37')\n'YES'\n>>> solution('38')\n'YES'\n>>> solution('39')\n'YES'\n>>> solution('40')\n'YES'\n>>> solution('41')\n'YES'\n>>> solution('42')\n'YES'\n>>> solution('43')\n'YES'\n>>> solution('44')\n'YES'\n>>> solution('45')\n'YES'\n>>> solution('46')\n'YES'\n>>> solution('47')\n'YES'\n>>> solution('48')\n'YES'\n>>> solution('49')\n'YES'\n>>> solution('50')\n'YES'\n>>> solution('51')\n'YES'\n>>> solution('52')\n'YES'\n>>> solution('53')\n'YES'\n>>> solution('54')\n'YES'\n>>> solution('55')\n'YES'\n>>> solution('56')\n'YES'\n>>> solution('57')\n'YES'\n>>> solution('58')\n'YES'\n>>> solution('59')\n'YES'\n>>> solution('60')\n'YES'\n>>> solution('61')\n'YES'\n>>> solution('62')\n'YES'\n>>> solution('63')\n'YES'\n>>> solution('64')\n'YES'\n>>> solution('65')\n'YES'\n>>> solution('66')\n'YES'\n>>> solution('67')\n'YES'\n>>> solution('68')\n'YES'\n>>> solution('69')\n'YES'\n>>> solution('70')\n'YES'\n>>> solution('71')\n'YES'\n>>> solution('72')\n'YES'\n>>> solution('73')\n'YES'\n>>> solution('74')\n'YES'\n>>> solution('75')\n'YES'\n>>> solution('76')\n'YES'\n>>> solution('77')\n'YES'\n>>> solution('78')\n'YES'\n>>> solution('79')\n'YES'\n>>> solution('80')\n'YES'\n>>> solution('81')\n'YES'\n>>> solution('82')\n'YES'\n>>> solution('83')\n'YES'\n>>> solution('84')\n'YES'\n>>> solution('85')\n'YES'\n>>> solution('"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # your code here\n    return str(min(n - 1, n // 2))"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n % 2 == 1:\n        return 0\n    else:\n        return 1\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A, B = 0, 0\n    for i in range(n):\n        if A < B:\n            A += 1\n        else:\n            B += 1\n    print(abs(A - B))\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = 1\n    for i in range(1, n):\n        ans = min(ans, abs(i + (n - 1) - (n - i)))\n    return str(ans)"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    B = [0] * n\n    res = abs(sum(A) - sum(B))\n    for i in range(n // 2):\n        B[i] = A[i]\n        B[-i - 1] = A[-i - 1]\n        res = min(res, abs(sum(A) - sum(B)))\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 10:\n        return str(1)\n    return str(n - 1)\n\nprint(solution(stdin))"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    n = int(n)\n    if n % 2 == 0:\n        return '0'\n    return str(n // 2)"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_n = int(stdin)\n    return str(abs(input_n - (2 * (sum(range(1, input_n // 2 + 1))))))\n\nsolution(input())\n\n\"\"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = [0] * n\n    s = 0\n    for i in range(n):\n        m[i] = int(stdin.readline())\n        s += m[i]\n    if s % 2 == 0:\n        return 0\n    m.sort()\n    n = len(m)\n    m1 = m[: n // 2]\n    m2 = m[n // 2 :]\n    m1sum = sum(m1)\n    m2sum = sum(m2)\n    m1sum2 = m1sum * 2\n    m2sum2 = m2sum * 2\n    return min(abs(m1sum2 - m2sum), abs(m1sum2 - m2sum))\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [int(stdin.readline()) for _ in range(n)]\n    s.sort()\n    a = 0\n    b = 0\n    for x in s:\n        a += x\n        b += x\n        if abs(a - b) > abs(a - 2 * b):\n            a = 2 * b\n    return str(abs(a - b))"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n\n    n += 1  # compensate for the condition `n > 0`\n    s = stdin.strip()\n    brackets = 0\n    stack = 0\n    for i in range(n):\n        if stack == 0 and s[i] == \"(\":\n            brackets += 1\n            stack += 1\n        elif stack == 1 and s[i] == \")\":\n            brackets -= 1\n            stack -= 1\n        else:\n            stack -= 1\n    return brackets\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Returns the number of regular bracket sequences of length $2n$ containing the given bracket sequence $s$ as a substring (consecutive sequence of characters) modulo $10^9+7$ ($1000000007$).\n    >>> solution('()()')\n    5\n    >>> solution('(()())')\n    4\n    >>> solution('()())()')\n    4\n    >>> solution('((()()))()')\n    4\n    >>> solution('(())(()())()')\n    4\n    >>> solution('((()()))()')\n    4\n    >>> solution('(()((()))()')\n    0\n    \"\"\"\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    return bin(eval(\"1 + \".join(\"1\" * n + s[i:i + n] for i in range(n + 1))))[2:].count(\"1\") % int(1e9 + 7)"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    m = [0] * n\n    for i in range(1, n):\n        m[i] = m[i-1] + (1 if s[i-1] == ')' else -1)\n    return m[-1]\n\nprint(solution(None))\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            if s[i:i+2*j+2] == '((' and s[i+2*j+2] == ')':\n                res += 1\n    return str(res%1000000007)"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:-1]\n    res = 0\n    for i in range(1, len(s)):\n        if i % 2 == 0:\n            res += int(s[i]!= '(')\n        else:\n            res += int(s[i]!= ')')\n    return str(res % MODULO)\n\nprint(solution(\"(((()))())((()))\"))\nprint(solution(\"(((()))())((()))\"))\nprint(solution(\"((()))())((()))\"))\nprint(solution(\"()((()))()()(())(()))()\"))\nprint(solution(\"()((()))()()(())(()))()()\"))\nprint(solution(\"()(()())\"))\nprint(solution(\"(())\"))\nprint(solution(\"()))())(\"))\nprint(solution(\"()(()()())(()())\"))\nprint(solution(\"()(()())\"))\nprint(solution(\"()(()()())(()())\"))\nprint(solution(\"()(()()())(()())\"))\nprint(solution(\"(()((())))((()))())(()()(()))\"))\nprint(solution(\"(()((())))((()))())(()()(()))\"))\nprint(solution(\"(()((())))((()))())(()()(()))\"))\nprint(solution(\"(()((())))((()))())(()()(()))\"))\nprint(solution(\"(()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()(()))\"))\nprint(solution(\"()((())))((()))())(()()("
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    ans = 0\n    for x in range(0, len(s)-n+1):\n        s2 = s[x:x+n]\n        ok = True\n        for i in range(0, len(s2)-1):\n            if s2[i]!= '(' and s2[i+1]!= ')':\n                ok = False\n                break\n        if ok:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('()', '1').replace('[]', '1').replace('{}', '1')\n\n\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Task\n    Return the minimum number of moves to obtain a number divisible by $25$.\n\n    ---\n\n    A number $n$ is said to be divisible by $25$ if and only if $n \\pm 25 \\equiv 0 \\pm 25$ is also divisible by $25$.\n\n    The above statement is not always true for any number $n$ as long as $25$ is a factor of $n$.\n    Thus, instead of breaking the statement into $n \\pm 25 \\equiv 0 \\pm 25$ and checking whether both are divisible by $25$, it is better to check for the divisibility of $25$ and $n$ in a single operation and then return the value of the modulo operation ($n \\pm 25 \\equiv 0 \\pm 25$) after adding the number of operations of this operation to the original value of $n$.\n\n    You can read more about the modulo operation and the operation of modular exponentiation here.\n    https://en.wikipedia.org/wiki/Modular_exponentiation\n\n    To get the number of operations of modulo operation, you can use the following formula:\n\n    $$\\frac{n \\pm 25}{25} = \\left \\{ \\begin{matrix}\n    0 & n \\pm 25 \\text{ mod } 25 \\\\\n    1 & 0 \\text{ mod } 25 \\\\\n    \\cdots & \\text{ mod } 25^{n-1} \\\\\n    -1 & 25^{n-1} \\text{ mod } 25 \\\\\n    \\end{matrix} \\right \\} \\mod \\left \\{ \\begin{matrix}\n    1 & 25 \\\\\n    0 & 1 \\\\\n    \\cdots & 25^{n-1} \\\\\n    -1 & 1 \\text{ mod } 25 \\\\\n    \\end{matrix} \\right \\}$$\n\n    Note that the modulo operation divides the values of the first row by $25$ and the modulo operation modulo $25$ is equal to 1. Thus, the operation of modulo operation is just counting the number of rows.\n\n    You can read more about modular exponentiation here.\n    https://en.wikipedia.org/wiki/Modular_exponentiation\n\n    \"\"\"\n    n = int(stdin.strip())\n    count = 0\n\n    while n % 25!= 0:\n        n = (n % 25) * 10 + (n // 25)\n        count += 1\n\n    return -1 if n % 25!= 0 else count\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0 or n > 10 ** 18:\n        return -1\n    if n % 25!= 0:\n        return -1\n    moves = 0\n    nums = [int(x) for x in str(n)]\n    while True:\n        moves += 1\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                nums[i], nums[i - 1] = nums[i - 1], nums[i]\n                break\n        if nums[0] == 0:\n            break\n    return moves"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    i = 1\n    while True:\n        number /= 25\n        if number.bit_length() > 19:\n            return -1\n        if number.bit_length() == 19:\n            return i\n        number = number.bit_length()\n        i += 1\n\nimport sys"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return \"Not Found\""
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return \"0\"\n\n    if n % 25 == 1:\n        return str(max(n // 25 - 1, 0))\n\n    if n % 25 == 2:\n        return str(max(n // 25 - 1, 0)) + \"1\"\n\n    if n % 25 == 3:\n        return str(max(n // 25 - 1, 0)) + \"1\" + \"1\"\n\n    return \"-1\""
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n % 25 == 0:\n        return '-1'\n    \n    nums = []\n    while n:\n        nums.append(n % 10)\n        n //= 10\n    \n    if len(nums) < 3:\n        return '-1'\n    \n    result = 0\n    \n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n            result += 1\n    \n    return str(result)\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = str(n)\n\n    n = list(n)\n\n    i = 0\n    while i < len(n):\n        if n[i] == '0':\n            n[i] = '5'\n            i += 1\n        else:\n            break\n\n    if i == len(n):\n        return -1\n    else:\n        return len(n) - i"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25!= 0:\n        return -1\n    digit = n % 10\n    moves = 0\n    while True:\n        if n % 25 == 0:\n            return moves\n        moves += 1\n        temp = n // 10\n        n = temp * 10 + digit\n        digit = n % 10\n    return -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if not n.isdigit() or len(n) > 18:\n        return -1\n    n = int(n)\n    if n % 25 == 0:\n        return 0\n    else:\n        counter = 0\n        s = n\n        while s % 25!= 0:\n            if s % 25 == 0:\n                return counter\n            elif s % 25 == 4:\n                s = (s // 10) + (s // 100)\n                counter += 1\n            elif s % 25 == 6:\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                counter += 1\n            elif s % 25 == 9:\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                counter += 1\n            elif s % 25 == 1:\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                counter += 1\n            elif s % 25 == 2:\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                counter += 1\n            elif s % 25 == 3:\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                counter += 1\n            elif s % 25 == 5:\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                counter += 1\n            elif s % 25 == 7:\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                counter += 1\n            elif s % 25 == 8:\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                counter += 1\n            elif s % 25 == 0:\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                s = (s // 10) + (s // 100)\n                counter += 1\n            else:\n                counter += 1\n                s = (s // 10) + (s // 100)\n        return counter\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    k = sorted(s)\n    res = 0\n    c = [-1] * n\n    for i in range(n):\n        while True:\n            if k[i] == s[i]:\n                break\n            j = i - 1\n            while j >= 0 and k[j] == k[i]:\n                j -= 1\n            k[i], k[j] = k[j], k[i]\n            res += 1\n    if len(set(k)) == n:\n        return str(res)\n    return \"-1\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    s = s +'' * (n - len(s))\n    # print(s)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    res = n\n    c = [-1] * n\n\n    for i in range(n):\n        c[i] = i\n\n    for i in range(n):\n        if s[i]!= s[i-1]:\n            l = i - 1\n            r = i\n            while l > 0 and s[l] == s[l-1]:\n                l -= 1\n            while r < n - 1 and s[r] == s[r+1]:\n                r += 1\n            if r - l < res - 1:\n                res = r - l\n                swap(s, l, r)\n                for j in range(l, r):\n                    c[j] = r\n                    # print(s[j], res)\n    # print(res)\n    # print(c)\n\n    for i in range(n):\n        print(s[i], end='')\n        if i == n - 1:\n            break\n        print(' ', end='')\n    print()\n    for i in range(n):\n        print(c[i], end='')\n        if i == n - 1:\n            break\n        print(' ', end='')\n    print()\n\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    res = n\n    c = [0] * n\n    for i in range(n):\n        c[i] = 1\n        for j in range(i + 1, n):\n            if s[j] < s[i]:\n                c[j] = c[i] + 1\n            res = min(res, c[j])\n    return str(res) + '\\n' +''.join(map(str, c))\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = list(s)\n    res = n\n    c = [None] * n\n    for i in range(n):\n        c[i] = i + 1\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            continue\n        for j in range(i):\n            if s[j] == s[i]:\n                c[i], c[j] = c[j], c[i]\n                res -= 1\n                break\n    if res == n:\n        return str(res)\n    res = 0\n    for i in range(n):\n        if c[i]!= i + 1:\n            res += 1\n    res += 1\n    c[0], c[n - 1] = c[n - 1], c[0]\n    res += 1\n    for i in range(n - 2, -1, -1):\n        if c[i]!= i + 1:\n            res += 1\n        if c[i]!= i + 1:\n            c[i], c[i + 1] = c[i + 1], c[i]\n            res += 1\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    return '\\n'.join([str(len(set(s)))]+list(sorted(set(s))))\n    "
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\n\n'''\n\n\n'''\n\nimport unittest\nimport sys\n\nfrom io import StringIO\nimport re\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    alphabet_size = int(math.ceil(math.sqrt(n)))\n    res = n\n\n    def construct_sorted_array(alphabet_size, s) -> list:\n        colors = []\n        for i in range(alphabet_size):\n            colors.append(0)\n        for c in s:\n            colors[ord(c) - 97] += 1\n        return colors\n\n    def check_and_replace(s, colors, start, end, step) -> bool:\n        if start >= end:\n            return True\n        p = start + step\n        if s[start] == s[p]:\n            colors[ord(s[start]) - 97] -= 1\n            colors[ord(s[p]) - 97] -= 1\n            if colors[ord(s[start]) - 97] == 0 and colors[ord(s[p]) - 97] == 0:\n                colors[ord(s[start]) - 97] = 1\n                colors[ord(s[p]) - 97] = 1\n                return check_and_replace(s, colors, start + 2, end, step) and check_and_replace(s, colors, start + 1, end, step)\n            else:\n                return False\n        else:\n            return check_and_replace(s, colors, start + 1, end, step)\n\n    def find_swaps(s, colors, res) -> list:\n        swaps = []\n        for i in range(res):\n            colors[ord(s[i]) - 97] = i\n        for i in range(res):\n            if colors[i]!= i:\n                swaps.append(i)\n        return swaps\n\n    colors = construct_sorted_array(alphabet_size, s)\n    for i in range(res):\n        if colors[i]!= i:\n            colors[ord(s[i]) - 97] = i\n    for i in range(res):\n        if colors[i]!= i:\n            colors[ord(s[i]) - 97] = i\n            break\n    while True:\n        if check_and_replace(s, colors, 0, len(s), 1):\n            return res\n        res -= 1\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    n_colors = 2\n\n    c = [-1] * n\n    for i in range(n):\n        c[i] = n_colors\n        n_colors += 1\n    return str(c)\n\nimport sys\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    s = stdin[1]\n    sorted_s = sorted(s)\n    counter = Counter(s)\n    color_count = 0\n    for c in s:\n        color_count += (counter[c] - 1)\n    res = (n - color_count) // 2\n    print(res)\n    return ''"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    s = stdin[0:n]\n\n    s = ''.join(sorted(s))\n\n    return s\n\n\nassert solution('') == ''\nassert solution('a') == 'a'\nassert solution('abc') == 'abc'\nassert solution('abcdef') == 'abcd'\nassert solution('abcdedcba') == 'abcde'\nassert solution('abcdedc') == 'abcde'\nassert solution('abcd') == 'abcd'\nassert solution('abcde') == 'abcde'\nassert solution('aabbcdd') == 'abcd'\nassert solution('abacbecfd') == 'abcd'\nassert solution('aaabbcbb') == 'abcd'\nassert solution('aaaabbcbb') == 'abcd'\nassert solution('aaaaabbcbb') == 'abcd'\nassert solution('aaaaabbcbb') == 'abcd'\nassert solution('aaaaabbcbb') == 'abcd'\nassert solution('aaaaabbcbb') == 'abcd'\nassert solution('aaabbcbb') == 'abcd'\nassert solution('aaabbcbb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbccb') == 'abcd'\nassert solution('aaabbcc"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = \"YES\"\n    strings = []\n    n = stdin.readline()\n    n = int(n)\n    for i in range(n):\n        strings.append(stdin.readline().strip())\n    strings = sorted(strings)\n    for i in range(n):\n        if strings[i]!= stdin.readline().strip():\n            result = \"NO\"\n    return result"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.readline().strip()\n    num = int(num)\n    if num == 0:\n        return \"\"\n    strings = []\n    for _ in range(num):\n        strings.append(stdin.readline().strip())\n    if len(strings) == 1:\n        return strings[0]\n    strings.sort()\n    res = strings[0]\n    for i in range(1, len(strings)):\n        if strings[i]!= strings[i - 1]:\n            res += \" \" + strings[i]\n    return res\n\nimport sys"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_substring(s: str) -> str:\n        if len(s) <= 2:\n            return s\n        mid = int(len(s) / 2)\n        return s[:mid]\n    return \"YES\" if stdin.split()[0] == stdin.split()[1] else \"NO\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"\"\n    else:\n        def solve(n: int, permutation: list):\n            if n == 1:\n                return [permutation]\n            else:\n                result = []\n                for i in range(n):\n                    for perm in solve(n-1, permutation[:i]+permutation[i+1:]):\n                        result.append(permutation[i:i+1]+perm)\n                return result\n\n        strings = [stdin.splitlines()[i] for i in range(n)]\n        permutations = solve(n, strings)\n        if permutations == []:\n            return \"NO\"\n        else:\n            result = \"\"\n            for permutation in permutations:\n                result += \" \".join(permutation)\n            return \"YES\\n\" + result\nprint(solution(input()))"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    strings = []\n    for line in stdin:\n        strings.append(line.strip())\n    strings.sort()\n    sortedStrings = []\n    for s in strings:\n        sortedStrings.append(s[::-1])\n    return \"YES\\n\" + \"\\n\".join(sortedStrings)\n\nsolution('')\n\n'''\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_strings = stdin.splitlines()[0]\n    strings = stdin.splitlines()[1:]\n    strings = list(map(lambda x: x.lower(), strings))\n    reordered_strings = sorted(strings, key=lambda x: x)\n    reordered_strings = ''.join(reordered_strings)\n    return 'YES' if reordered_strings == strings[0] * number_of_strings else 'NO'\n\n\n-----Test-----"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"NO\"\n    strings = [stdin.strip() for stdin in stdin.split('\\n')]\n    ans = []\n    for string in strings:\n        print(ans)\n        if len(string) == 0:\n            continue\n        min_idx = len(string)\n        for i in range(len(string)-1, 0, -1):\n            if string[:i] in string[i:]:\n                min_idx = i\n                break\n        if min_idx == len(string):\n            print(\"INVALID\")\n            return \"NO\"\n        ans.append(string[min_idx:])\n        ans.append(string[:min_idx])\n    return \"YES\\n\" + \"\\n\".join(ans)\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int((stdin.split(\"\\n\")[0].split()[1])*(int(stdin.split(\"\\n\")[0].split()[0])/3)))"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    probs = list(map(int, stdin.split()))\n    n -= n % k\n    if n == 0:\n        return 0\n    probs = [probs[i] for i in range(n) if i % k < k]\n    return len(probs)\n\nprint(solution(stdin))\n\n\n\n*\n/Users/suprn/workspace/Codeforces/Number-theory/Number-theory-1/Problem-1-A-1kfGNBb.py\n*\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_problems, skill_level = (int(n) for n in stdin.split())\n    problems = [int(n) for n in stdin.split()]\n\n    max_number_of_problems_solved = 0\n\n    skill_level -= 1\n\n    for i in range(0, number_of_problems, 1):\n        if skill_level < problems[i]:\n            return str(max_number_of_problems_solved)\n\n        skill_level -= problems[i]\n\n        max_number_of_problems_solved += 1\n\n    return str(max_number_of_problems_solved)\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split()[0]))"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    s = [int(x) for x in stdin.split()]\n    solve = 0\n    i = 0\n    while i < n:\n        if s[i] <= k:\n            solve += 1\n        else:\n            break\n        i += 1\n    return str(solve)\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n    4 2\n    4 2 3 1\n    \n    Output:\n    5\n    \n    Input:\n    5 2\n    12 34 55 43 21\n    \n    Output:\n    0\n    \n    Note:\n    This is a probelm which can be solved with a simple idea but does not come with the optimal solution. \n    \"\"\"\n    pass\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_problems, problem_skill = [int(x) for x in stdin.split()]\n\n    problems = [int(x) for x in stdin.split()]\n\n    # Number of problems to solve\n    solved = 0\n\n    while len(problems) > 1:\n        if max(problems[0], problems[-1]) > problem_skill:\n            break\n\n        if problems[0] > problems[-1]:\n            problems.pop(0)\n        else:\n            problems.pop()\n        solved += 1\n\n    return str(solved)"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split(\" \")]\n    problems = [int(s) for s in stdin.split(\" \")]\n    left = 0\n    right = n - 1\n    count = 0\n    while left < right:\n        if problems[left] > k:\n            right -= 1\n        elif problems[right] > k:\n            left += 1\n        else:\n            left += 1\n            right -= 1\n        count += 1\n    return str(count)"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    skills = [int(x) for x in stdin.split()]\n    count = 0\n    for skill in skills:\n        if skill > k:\n            break\n        count += 1\n    return str(count)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return '\\n'.join(str(perimeter(a, b)) for _ in range(int(stdin)))\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    if a == b:\n        return a * 4\n    \n    elif (a + b) % 2 == 1:\n        return (a + b) * 2 - 1\n    \n    else:\n        return (a + b) * 2\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b = map(int, stdin.split())\n    \n    result = 0\n    \n    for x in range(a, a + b):\n        if x % 2:\n            result += 4\n        else:\n            result += 2\n    \n    return str(result)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(2*a*a + 2*b*b)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    a, b = map(int, inputs[0].split())\n    return str(a+b)\n\nassert(solution('''4 4''') == '12')\nassert(solution('''3 9''') == '14')\nassert(solution('''3 6''') == '12')\nassert(solution('''506 2708''') == '3218')\nassert(solution('''2585 5257''') == '5101')\nassert(solution('''3 4''') == '12')\nassert(solution('''9 3''') == '14')\nassert(solution('''3 6''') == '12')\nassert(solution('''4 6''') == '8')\nassert(solution('''10 9''') == '16')\nassert(solution('''125 67''') == '178')\nassert(solution('''100 000''') == '5000')\nassert(solution('''10000 100''') == '25000')\nassert(solution('''1000000 100''') == '50000')\nassert(solution('''1000000 1000000''') == '1000000')\nassert(solution('''1000 000 000 000''') == '1000000')\nassert(solution('''1000000 1''') == '1000000')\nassert(solution('''1000000 1000000000''') == '1000000')\nassert(solution('''1000000000000000''') == '1000000')\nassert(solution('''1000000000000000 1''') == '1000000000000000')\nassert(solution('''1000000000000000000''') == '1000000000000000')\nassert(solution('''100000000000000000000''') == '100000000000000000000')\nassert(solution('''1000000000000000000000''') == '1000000000000000000000')\nassert(solution('''1000000000000000000000000''') == '1000000000000000000000000')\nassert(solution('''1000000000000000000000000000000000000''') == '1000000000000000000000000000000000000')\nassert(solution('''1000000000000000000000000000000000000000''') == '1000000000000000000000000000000000000000')\nassert(solution('''10000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000')\nassert(solution('''10000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000')\nassert(solution('''1000000000000000000000000000000000000000000000000000000000000000''') == '1000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''1000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''') == '10000000000000000000000000000000000000000000000000000000000000000000000000000000')\nassert(solution('''100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000''')"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split(' ')]\n    rows_pairs = [rows] * cols\n    cols_pairs = [cols] * rows\n    tile_colors = int(stdin)\n    return '{:0>10}'.format(\n        '{0} {1}'.format(\n           ''.join(map(str, cols_pairs)),''.join(map(str, rows_pairs))\n        ) + '\\n' +\n       ''.join(map(str, [[0, 1], [1, 0]] * tile_colors)) + '\\n' +\n       ''.join(map(str, [[0, 1], [1, 1]] * (rows * cols - tile_colors)))\n    )\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    a, b = map(int, s.split(' '))\n    print(min(4*a, 4*b))"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if sorted(s) == list(s):\n        return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    s_c = [0] * n\n    for i in range(n):\n        if s[i] == 'a':\n            s_c[i] = 0\n        elif s[i] == 'b':\n            s_c[i] = 1\n\n    s_s = sorted(s_c)\n\n    if s_c!= s_s:\n        return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    coloring = [0] * n\n    is_sorted = True\n\n    for i in range(n):\n        if s[i]!= s[n - i - 1]:\n            is_sorted = False\n            break\n\n    if is_sorted:\n        return \"YES\"\n\n    for i in range(n):\n        if s[i]!= s[i + 1]:\n            coloring[i] = s[i]\n        else:\n            coloring[i] = \"0\"\n\n    if not is_sorted:\n        for i in range(n):\n            if coloring[i] == \"0\":\n                coloring[i] = \"1\"\n            else:\n                coloring[i] = \"0\"\n\n    return \"YES\" + \"\".join(coloring)"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n + 1]\n    if n < 4:\n        print(\"YES\")\n        print(s)\n        return\n\n    if s == \"\".join(sorted(s)):\n        print(\"YES\")\n        print(s)\n        return\n\n    seen = [0] * n\n    for i in range(1, n - 1):\n        if s[i - 1] > s[i]:\n            seen[i] = 1\n    for i in range(1, n - 1):\n        if s[i - 1] < s[i]:\n            seen[i] = 1\n    for i in range(2, n):\n        if s[i - 1] > s[i] and seen[i - 1] == 1:\n            seen[i] = 1\n\n    for i in range(n - 1):\n        if seen[i] == 0:\n            print(\"YES\")\n            print(s)\n            return\n\n    print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if n < 2:\n        return \"NO\"\n    for i in range(n):\n        if s[i]!= s[n-i-1]:\n            return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n % 2 == 1:\n        return \"NO\"\n    if s == ''.join(sorted(s)):\n        return \"YES\"\n    colors = [0] * n\n    for i in range(0, n, 2):\n        if s[i]!= s[i+1]:\n            colors[i], colors[i+1] = 0, 1\n    if colors[0] == colors[n-1]:\n        for i in range(0, n, 2):\n            colors[i], colors[i+1] = 1, 0\n    if colors == sorted(colors):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    if n < 4 or n > 10**5:\n        return \"NO\"\n    if n == len(s):\n        return \"YES\"\n    return \"NO\"\n\nassert(solution(\"9\") == \"YES\")\nassert(solution(\"abacbecfd\") == \"YES\")\nassert(solution(\"aaabbcbb\") == \"YES\")\nassert(solution(\"abcdedc\") == \"NO\")\nassert(solution(\"abcde\") == \"YES\")\nassert(solution(\"1\") == \"NO\")\nassert(solution(\"2\") == \"NO\")\nassert(solution(\"3\") == \"NO\")\nassert(solution(\"4\") == \"NO\")\nassert(solution(\"5\") == \"NO\")\nassert(solution(\"6\") == \"NO\")\nassert(solution(\"7\") == \"NO\")\nassert(solution(\"8\") == \"NO\")\nassert(solution(\"9\") == \"NO\")\nassert(solution(\"10\") == \"NO\")\nassert(solution(\"11\") == \"NO\")\nassert(solution(\"12\") == \"NO\")\nassert(solution(\"13\") == \"NO\")\nassert(solution(\"14\") == \"NO\")\nassert(solution(\"15\") == \"NO\")\nassert(solution(\"16\") == \"NO\")\nassert(solution(\"17\") == \"NO\")\nassert(solution(\"18\") == \"NO\")\nassert(solution(\"19\") == \"NO\")\nassert(solution(\"20\") == \"NO\")\nassert(solution(\"21\") == \"NO\")\nassert(solution(\"22\") == \"NO\")\nassert(solution(\"23\") == \"NO\")\nassert(solution(\"24\") == \"NO\")\nassert(solution(\"25\") == \"NO\")\nassert(solution(\"26\") == \"NO\")\nassert(solution(\"27\") == \"NO\")\nassert(solution(\"28\") == \"NO\")\nassert(solution(\"29\") == \"NO\")\nassert(solution(\"30\") == \"NO\")\nassert(solution(\"31\") == \"NO\")\nassert(solution(\"32\") == \"NO\")\nassert(solution(\"33\") == \"NO\")\nassert(solution(\"34\") == \"NO\")\nassert(solution(\"35\") == \"NO\")\nassert(solution(\"36\") == \"NO\")\nassert(solution(\"37\") == \"NO\")\nassert(solution(\"38\") == \"NO\")\nassert(solution(\"39\") == \"NO\")\nassert(solution(\"40\") == \"NO\")\nassert(solution(\"41\") == \"NO\")\nassert(solution(\"42\") == \"NO\")\nassert(solution(\"43\") == \"NO\")\nassert(solution(\"44\") == \"NO\")\nassert(solution(\"45\") == \"NO\")\nassert(solution(\"46\") == \"NO\")\nassert(solution(\"47\") == \"NO\")\nassert(solution(\"48\") == \"NO\")\nassert(solution(\"49\") == \"NO\")\nassert(solution(\"50\") == \"NO\")\nassert(solution(\"51\") == \"NO\")\nassert(solution(\"52\") == \"NO\")\nassert(solution(\"53\") == \"NO\")\nassert(solution(\"54\") == \"NO\")\nassert(solution(\"55\") == \"NO\")\nassert(solution(\"56\") == \"NO\")\nassert(solution(\"57\") == \"NO\")\nassert(solution(\"58\") == \"NO\")\nassert(solution(\"59\") == \"NO\")\nassert(solution(\"60\") == \"NO\")\nassert(solution(\"61\") == \"NO\")\nassert(solution(\"62\") == \"NO\")\nassert(solution(\"63\") == \"NO\")\nassert(solution(\"64\") == \"NO\")\nassert(solution(\"65\") == \"NO\")\nassert(solution(\"66\") == \"NO\")\nassert(solution(\"67\") == \"NO\")\nassert(solution(\"68\") == \"NO\")\nassert(solution(\"69\") == \"NO\")\nassert(solution(\"70\") == \"NO\")\nassert(solution(\"71\") == \"NO\")\nassert(solution(\"72\") == \"NO\")\nassert(solution(\"73\") == \"NO\")\nassert(solution(\"74\") == \"NO\")\nassert(solution(\"75\") == \"NO\")\nassert(solution(\"76\") == \"NO\")\nassert(solution(\"77\") == \"NO\")\nassert(solution(\"78\") == \"NO\")\nassert(solution(\"79\") == \"NO\")\nassert(solution(\"80\") == \"NO\")\nassert(solution(\"81\") == \"NO\")\nassert(solution(\"82\") == \"NO\")\nassert(solution(\"83\") == \"NO\")\nassert(solution(\"84\") == \"NO\")\nassert(solution(\"85\") == \"NO\")\nassert(solution(\"86\") == \"NO\")\nassert(solution(\"87\") == \"NO\")\nassert(solution(\"88\") == \"NO\")\nassert(solution(\"89\") == \"NO\")\nassert(solution(\"90\") == \"NO\")\nassert(solution(\"91\") == \"NO\")\nassert(solution(\"92\") == \"NO\")\nassert(solution(\"93\") == \"NO\")\nassert(solution(\"94\") == \"NO\")\nassert(solution(\"95\") == \"NO\")\nassert(solution(\"96\") == \"NO\")\nassert(solution(\"97\") == \"NO\")\nassert(solution(\"98\") == \"NO\")\nassert(solution(\"99\") == \"NO\")\nassert(solution(\"100\") == \"NO\")\nassert(solution(\"101\") == \"NO\")\nassert(solution(\"102\") == \"NO\")\nassert(solution(\"103\") == \"NO\")\nassert(solution(\"104\") == \"NO\")\nassert(solution(\"105\") == \"NO\")\nassert(solution(\"106\") == \"NO\")\nassert(solution(\"107\") == \"NO\")\nassert(solution(\"108\") == \"NO\")\nassert(solution(\"109\") == \"NO\")\nassert(solution(\"110\") == \"NO\")\nassert(solution(\"111\") == \"NO\")\nassert(solution(\"112\") == \"NO\")\nassert(solution(\"113\") == \"NO\")\nassert(solution(\"114\") == \"NO\")\nassert(solution(\"115\") == \"NO\")\nassert(solution(\"116\") == \"NO\")\nassert(solution(\"117\") == \"NO\")\nassert(solution(\"118\") == \"NO\")\nassert(solution(\"119\") == \"NO\")\nassert(solution(\"120\") == \"NO\")\nassert(solution(\"121\") =="
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n == 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    state = \"\".join([\"0\"] * n)\n    state = list(state)\n    states = [state]\n\n    def can_swap(x: int, y: int) -> bool:\n        \"\"\"Can you swap x and y?\"\"\"\n        if s[x] == s[y]:\n            return False\n        if state[x] == state[y]:\n            return True\n        return False\n\n    def can_color(x: int, color: str) -> bool:\n        \"\"\"Can you color it so that it is sorted?\"\"\"\n        if x == n:\n            return True\n        if x == n - 1:\n            return False\n        if state[x] == color:\n            return False\n        return True\n\n    def get_valid_states(x: int, current_state: str) -> List[str]:\n        \"\"\"Get all valid states from the given state.\"\"\"\n        valid_states = []\n        for color in \"01\":\n            next_state = list(current_state)\n            if can_color(x, color):\n                next_state[x] = color\n                valid_states.append(\"\".join(next_state))\n        return valid_states\n\n    def all_possible_states() -> List[str]:\n        \"\"\"Get all possible states that can be obtained from the given state.\"\"\"\n        states = []\n        for x in range(n):\n            valid_states = get_valid_states(x, state)\n            for state in valid_states:\n                states.append(state)\n        return states\n\n    def state_has_cycle(state: str) -> bool:\n        \"\"\"Does the given state have a cycle?\"\"\"\n        if state in states:\n            return True\n        return False\n\n    def swap_if_possible(x: int, y: int) -> None:\n        \"\"\"Swap x and y if possible.\"\"\"\n        if can_swap(x, y):\n            state[x], state[y] = state[y], state[x]\n\n    def swap_one_character_and_check(char_idx: int) -> None:\n        \"\"\"Swap the character at char_idx and check if it is sorted.\"\"\"\n        x = char_idx\n        swap_if_possible(x, x + 1)\n        if state_has_cycle(state):\n            swap_if_possible(x, x + 1)\n        else:\n            swap_if_possible(x, x + 1)\n            state[char_idx] = \"0\"\n\n    def convert_to_string(x: str) -> str:\n        \"\"\"Convert the given string to a string of the form \"001010101\".\"\"\"\n        s = \"\".join(sorted(x))\n        return s\n\n    def convert_to_string_and_swap_one_character(x: int, y: int) -> str:\n        \"\"\"Convert the given string to a string of the form \"001010101\" and swap the character at x and y.\"\"\"\n        x_color = state[x]\n        y_color = state[y]\n        state[x] = y_color\n        state[y] = x_color\n        return convert_to_string(state)\n\n    def convert_to_string_and_check_sorted() -> str:\n        \"\"\"Convert the given string to a string of the form \"001010101\" and check if it is sorted.\"\"\"\n        x = convert_to_string(state)\n        x = convert_to_string(state)\n        if x == convert_to_string(state):\n            return x\n        else:\n            return \"NO\"\n\n    def check_sorted_and_swap_one_character(x: int) -> str:\n        \"\"\"Check if the given string is sorted and if it is, swap the character at x.\"\"\"\n        x_color = state[x]\n        if x == n - 1:\n            return convert_to_string_and_check_sorted()\n        if x < n - 1 and state[x] == state[x + 1]:\n            return check_sorted_and_swap_one_character(x + 1)\n        else:\n            return convert_to_string_and_swap_one_character(x, x + 1)\n\n    def check_sorted_and_swap_one_character_for_all(x: int) -> str:\n        \"\"\"Check if the given string is sorted and swap the characters at all positions starting from x.\"\"\"\n        for i in range(x, n):\n            if state[i] == \"0\":\n                return check_sorted_and_swap_one_character(i)\n        return convert_to_string_and_check_sorted()\n\n    def check_sorted_and_swap_one_character_for_all_recursive() -> str:\n        \"\"\"Check if the given string is sorted and swap the characters at all positions starting from x.\"\"\"\n        if state == \"\".join(sorted(state)):\n            return convert_to_string_and_check_sorted()\n        return check_sorted_and_swap_one_character_for_all(0)\n\n    def check_sorted_and_swap_one_character_for_all_recursive_2(x: int) -> str:\n        \"\"\"Check if the given string is sorted and swap the characters at all positions starting from x.\"\"\"\n        if state == \"\".join(sorted(state)):\n            return convert_to_string_and_check_sorted()\n        return check_sorted_and_swap_one_character_for_all_recursive_2(x + 1)\n\n    def check_sorted_and_swap_one_character_for_all_recursive_3(x: int) -> str:\n        \"\"\"Check if the given string is sorted and swap the characters at all positions starting from x.\"\"\"\n        if state == \"\".join(sorted(state)):\n            return convert_to_string_and_check_sorted()\n        return check_sorted_and_swap_one_character_for_all_recursive_3(x + 1)\n\n    def check_sorted_and_swap_one_character_for_all_recursive_4(x: int) -> str:\n        \"\"\"Check if the given string is sorted and swap the characters at all positions starting from x.\"\"\"\n        if state == \"\".join(sorted(state)):\n            return convert_to_string_and_check_sorted()\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    s = s + s\n    result = []\n    for i in range(n):\n        if s[i] == s[i + n]:\n            result.append('0')\n        else:\n            result.append('1')\n    print(\"\".join(result))\n    return 'YES' if \"\".join(result) == \"\".join(sorted(s)) else 'NO'\n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nN, M = list(map(int, stdin.split()))\n\ndef"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    price, tax_rate = list(map(int, stdin.split()))\n    if tax_rate == 8:\n        tax_rate = 0.8\n    elif tax_rate == 10:\n        tax_rate = 0.1\n    else:\n        return -1\n    tax_rate = tax_rate * 100\n    tax = int(tax_rate * price)\n    tax = tax // 100 * 100\n    price -= tax\n    return str(price)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return str(10 * (A - 1) // 9)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split(' '))\n\n    ans = -1\n    for price in range(A, B + 1):\n        tax_rate = (price - 0.01 * price) / price\n        if tax_rate >= 0.1 and tax_rate % 1 == 0:\n            ans = price\n            break\n\n    return str(ans)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(' '))\n    return '{}'.format(int(a*0.08) if a*0.08 <= b else int(a*0.1) if a*0.1 <= b else -1)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(int(math.floor(A * 0.08)) - int(math.floor(B * 0.1)))"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    def is_price_valid(price: int) -> bool:\n        return int(math.floor(price * tax_rate)) == price\n\n    lowest_price: int = -1\n    tax_rate: int = 0\n    while tax_rate <= B:\n        tax_rate += 0.1\n        price = A + int(math.floor(A * tax_rate))\n        if is_price_valid(price):\n            if lowest_price == -1 or price < lowest_price:\n                lowest_price = price\n    return f'{lowest_price}'"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [a, b] = list(map(int, stdin.strip().split()))\n    return str(max(int(a * 0.08), int(a * 0.1)))"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    price = -1\n    if A < B:\n        price = (A * 0.08) + (B * 0.1)\n        price = int(price)\n    elif B < A:\n        price = (B * 0.08) + (A * 0.1)\n        price = int(price)\n    return str(price)\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    cnt = 0\n\n    while True:\n        if cnt == n:\n            return \"YES\"\n\n        if cnt == 0:\n            cnt += 1\n            continue\n\n        if cnt % (k + 1)!= 0:\n            cnt += 1\n            continue\n\n        if cnt % (k + 1) == k:\n            if cnt == k + 1:\n                cnt += 1\n                continue\n            if cnt == 2 * k:\n                return \"NO\"\n\n        return \"NO\"\n\nn, k = map(int, input().split())\nprint(solution(input()))"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    if k < 1 or k > 10**5:\n        return 'NO'\n\n    if n < 1 or n > 10**9:\n        return 'NO'\n\n    r = ''\n    while k > 0:\n        a = [int(x) for x in stdin.split()]\n        if sum(a)!= n:\n            return 'NO'\n\n        if max(a) < 1:\n            return 'NO'\n\n        if a.count(a[0]) > 1:\n            return 'NO'\n\n        if a[0] > a[1]:\n            return 'NO'\n\n        for i in range(2, len(a)):\n            if a[i - 1] > a[i] or a[i] > 2 * a[i - 1]:\n                return 'NO'\n\n        r +=''.join(str(x) for x in a) + '\\n'\n        k -= 1\n\n    return 'YES\\n' + r[:-1]\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    \n    for i in range(1, n + 1):\n        if i + 1 <= k and i == 1:\n            if n % i!= 0:\n                print('NO')\n                return\n        elif i + 1 <= k:\n            if n % i!= 0 and n % (i + 1)!= 0:\n                print('NO')\n                return\n        elif i + 2 <= k:\n            if n % (i + 1)!= 0 and n % i == 0:\n                print('NO')\n                return\n        else:\n            print('YES')\n            return\n    \n    print('NO')\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n\n    if n % (k + 1) == 0:\n        return \"NO\"\n\n    if n > k:\n        return \"NO\"\n\n    a = [0] * k\n    a[0] = 1\n    a[1] = 2\n    for i in range(2, k):\n        a[i] = 2 * a[i - 1]\n\n    for i in range(2, k + 1):\n        a[i] += a[i - 1]\n\n    for line in stdin:\n        line = line.strip()\n        if line == '':\n            continue\n\n        a = [0] * k\n        a[0] = 1\n        a[1] = 2\n        for i in range(2, k):\n            a[i] = 2 * a[i - 1]\n\n        for i in range(2, k + 1):\n            a[i] += a[i - 1]\n\n        # print(a)\n\n        ans = True\n        cur = 0\n        for i in line:\n            if i == '1':\n                if a[cur] < 2 * a[cur + 1]:\n                    ans = False\n                    break\n                cur += 1\n            else:\n                if a[cur] < a[cur + 1]:\n                    ans = False\n                    break\n                cur += 1\n\n        if ans:\n            return \"YES\\n\" +''.join(map(str, a))\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [0] * k\n    while sum(a)!= n:\n        a[0] += 1\n        for i in range(1, k):\n            if a[i] < a[i - 1]:\n                a[i] = a[i - 1]\n            a[i] += 1\n    return 'YES\\n' +''.join([str(x) for x in a])"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    s = 0\n    for i in range(k):\n        s += a[i]\n    if n > s:\n        return \"NO\"\n    for i in range(k):\n        if a[i] > 1 and a[i + 1] > 2 * a[i]:\n            return \"NO\"\n    a.sort()\n    return \"YES\" +''.join(map(str, a))\n\nassert(solution(\"26 6\") == \"YES\\n1 2 4 5 6 8\")\nassert(solution(\"8 3\") == \"NO\")\nassert(solution(\"1 1\") == \"YES\\n1\")\nassert(solution(\"9 4\") == \"NO\")\n\n'''\n\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % (k + 1)!= 0:\n        return 'NO'\n    arr = [0] * k\n    for i in range(1, k + 1):\n        arr[i - 1] = (n // (k + 1)) * i\n        if i!= k:\n            arr[i] += i\n    return 'YES\\n' +''.join(str(x) for x in arr)"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, k = map(int, stdin.split())\n    if k > n:\n        return \"NO\"\n    for _ in range(k):\n        if k == 1:\n            yield 1\n        elif k == 2:\n            yield 1 if n % 2 == 0 else 2\n        else:\n            pre = [1, 1]\n            for i in range(3, k + 1):\n                if pre[i - 1] <= 2 * pre[i - 2]:\n                    pre.append(i)\n                else:\n                    break\n            yield from pre"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implement the function \"solution\" that will read from the standard input a number $n$ and a number $k$ and then print the answer to the problem.\n    \"\"\"\n    n, k = map(int, stdin.split())\n    if (n % (k + 1) == 0) or (n % k!= 0):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        a = [n // (k + 1) for _ in range(k)]\n        a[0] -= 1\n        a[k - 1] -= 1\n        print(*a)\n    return \"\"\n\nprint(solution(stdin.readline().strip()))\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T, _ = map(int, stdin.split())\n    return 'YES\\n' +''.join(map(str, range(1, T + 1)))\n\nassert(solution(\n'''26 6''') == 'YES\\n' + '1 2 4 5 6 8\\n')\nassert(solution('''8 3''') == 'NO\\n')\nassert(solution('''1 1''') == 'YES\\n' + '1\\n')\nassert(solution('''9 4''') == 'NO\\n')''')\n'''\n\n'''"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n\n    projects = sorted([int(x) for x in stdin.split()])\n    b = [projects[i + 1] - projects[i] for i in range(len(projects) - 1)]\n    b = [x for x in b if x > 0]\n\n    if len(b) == 0:\n        return str(1)\n\n    max_b = max(b)\n\n    for i in range(max_b + 1):\n        if i * (r + 1) + r * (n - 1) > max_b * (n - 1):\n            return str(i)"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_projects, initial_rating = [int(x) for x in stdin.split()]\n\n    projects = []\n    for _ in range(num_of_projects):\n        rating_change, rating_change_after = [int(x) for x in stdin.split()]\n        projects.append((rating_change, rating_change_after))\n\n    projects.sort(key=lambda x: x[0])\n\n    highest_rating = max(x[1] for x in projects)\n    rating_change = 1\n\n    if initial_rating < 0:\n        rating_change = -1\n\n    while rating_change > 0 and highest_rating >= 0:\n        highest_rating += rating_change\n        rating_change += 1\n\n    return str(rating_change)\n\n\nimport sys"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    projects = []\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: x[0], reverse=True)\n    projects.sort(key=lambda x: x[1], reverse=True)\n\n    sizes = 0\n    rating = r\n    for i in range(len(projects)):\n        if rating < 0:\n            break\n        if rating >= projects[i][0]:\n            sizes += 1\n            rating -= projects[i][1]\n\n    return str(sizes)\n\nassert(solution('''3 4''') == '3')\nassert(solution('''3 2''') == '3')\nassert(solution('''2 2''') == '1')\nassert(solution('''100 2''') == '0')\nassert(solution('''1 1''') == '0')\nassert(solution('''3 7''') == '0')\nassert(solution('''1 2''') == '0')\nassert(solution('''0 -1''') == '0')\nassert(solution('''2 -1''') == '1')\nassert(solution('''7 8''') == '1')\nassert(solution('''5 -2''') == '2')\nassert(solution('''4 6''') == '3')\nassert(solution('''4 -6''') == '3')\nassert(solution('''10 -2''') == '2')\nassert(solution('''8 -1''') == '1')\nassert(solution('''5 6''') == '2')\nassert(solution('''5 -6''') == '2')\nassert(solution('''4 6''') == '3')\nassert(solution('''10 34''') == '3')\nassert(solution('''1 27''') == '2')\nassert(solution('''40 -45''') == '4')\n\n\nimport sys\nsys.setrecursionlimit(2000)\nassert(solution('''3 2''') == '1')\nassert(solution('''5 20''') == '0')\nassert(solution('''4 -6''') == '0')\nassert(solution('''10 -2''') == '2')\nassert(solution('''8 -1''') == '1')\nassert(solution('''5 6''') == '2')\nassert(solution('''3 7''') == '0')\nassert(solution('''1 2''') == '0')\nassert(solution('''0 -1''') == '0')\nassert(solution('''2 -1''') == '1')\nassert(solution('''7 8''') == '1')\nassert(solution('''5 -2''') == '2')\nassert(solution('''4 6''') == '3')\nassert(solution('''4 -6''') == '3')\nassert(solution('''10 -2''') == '2')\nassert(solution('''8 -1''') == '1')\nassert(solution('''5 6''') == '2')\nassert(solution('''5 -6''') == '2')\nassert(solution('''4 6''') == '3')\nassert(solution('''10 34''') == '3')\nassert(solution('''1 27''') == '2')\nassert(solution('''40 -45''') == '4')\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n\n    r_n = dict()\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        r_n[a] = b\n\n    print(max_size(r, r_n))\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n@pytest.mark.parametrize(\n    [\"input\", \"expected\"],\n    [\n        [stdin, 3],\n    ],\n)\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    ratings = [list(map(int, line.split())) for line in stdin.splitlines()]\n    arr = [set(range(1, n + 1)) for _ in range(n + 1)]\n    print(n, r, ratings)\n    for i in range(n):\n        print(arr)\n        for j in range(i, n):\n            if ratings[j][0] <= r:\n                arr[i].intersection_update(arr[j])\n                print(arr[i])\n    print(arr)\n    return str(len(arr[n - 1]))\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    projects = [list(map(int, stdin.split())) for _ in range(n)]\n\n    project_sizes = [0]\n    for i, (a, b) in enumerate(projects):\n        project_sizes.append(project_sizes[i] + a / b if b > 0 else 0)\n\n    rating = [r]\n    for i in range(n):\n        rating.append(rating[i] + projects[i][1])\n\n    def find_max_size(rating, project_sizes, n):\n        min_rating = min(rating)\n        max_rating = max(rating)\n        max_size = 0\n\n        if min_rating <= 0:\n            return max_size\n\n        left = 0\n        right = len(project_sizes) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if project_sizes[mid] <= n:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n        max_size = left\n\n        if right < len(project_sizes) - 1:\n            size = project_sizes[right]\n            for i in range(right + 1, len(project_sizes)):\n                if project_sizes[i] > size:\n                    size = project_sizes[i]\n            max_size = max(max_size, size)\n\n        return max_size\n\n    return str(find_max_size(rating, project_sizes, r))\n\n\nimport sys"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''\n\nimport sys\nfrom functools import reduce\nfrom itertools import zip_longest\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    \n    def is_palindromic(arr):\n        n = len(arr)\n        for i in range(n // 2):\n            if arr[i]!= arr[n - 1 - i]:\n                return False\n        return True\n    \n    def get_matrix(arr, n, i):\n        if i == n:\n            return []\n        ret = [arr[i]]\n        if is_palindromic(arr[i:]):\n            ret.append(arr[i:])\n        if is_palindromic(arr[:n - i]):\n            ret.append(arr[:n - i])\n        return ret\n        \n    def get_all_matrix(arr, n):\n        ret = []\n        for i in range(n):\n            ret.extend(get_matrix(arr, n, i))\n        return ret\n    \n    def print_matrix(arr, n):\n        for row in arr:\n            print(' '.join([str(i) for i in row]))\n    \n    all_matrix = get_all_matrix(arr, n)\n    print_matrix(all_matrix, n)\n    if len(all_matrix) == 0:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 20:\n        raise ValueError('N must be between 1 and 20')\n\n    matrix = [[int(i) for i in stdin.split()] for _ in range(n)]\n\n    def is_palindromic(i, j, matrix):\n        # Palindromic if row and column don't change and the cell is the same\n        # Otherwise, change it to the next number in the sequence\n        if i == j:\n            return matrix[i][j] == matrix[i][j]\n\n        if matrix[i][j]!= matrix[i][j]:\n            return False\n\n        # Change it to the next number in the sequence\n        matrix[i][j] = matrix[i][j] * 10 + matrix[i][j] % 10 + 1\n\n        # Change the row and column if needed\n        if i > 0:\n            is_palindromic(i - 1, j, matrix)\n        if j > 0:\n            is_palindromic(i, j - 1, matrix)\n        if i < n - 1:\n            is_palindromic(i + 1, j, matrix)\n        if j < n - 1:\n            is_palindromic(i, j + 1, matrix)\n\n    # Check the matrix\n    for row in range(n):\n        for col in range(n):\n            is_palindromic(row, col, matrix)\n\n    # Print the result\n    for row in matrix:\n        print(' '.join(str(i) for i in row))\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 20:\n        raise ValueError\n    \n    lines = stdin.split('\\n')\n    if len(lines)!= 2:\n        raise ValueError\n    \n    row_count, col_count = map(int, lines)\n    if row_count < 1 or row_count > 20:\n        raise ValueError\n    \n    if col_count < 1 or col_count > 100:\n        raise ValueError\n    \n    matrix = []\n    for i in range(row_count):\n        matrix.append(list(map(int, stdin.split('\\n')[i+1].split(' '))))\n        if len(matrix[i])!= col_count:\n            raise ValueError\n    \n    matrix = matrix[::-1]\n    for i in range(len(matrix)):\n        matrix[i].reverse()\n    \n    matrix = matrix[::-1]\n    if all(matrix[i][j] == 1 for i in range(len(matrix)) for j in range(len(matrix[i]))):\n        print('YES')\n        for row in matrix:\n            print(*row)\n    else:\n        print('NO')\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split(\"\\n\")[0]\n    n = int(n)\n    arr = stdin.split(\"\\n\")[1]\n    arr = list(map(int, arr.split(\" \")))\n    count = 0\n    for i in range(n * n):\n        if arr[i] in arr[:i] or arr[i] in arr[i + 1:]:\n            count += 1\n        if count == n * n:\n            return \"YES\"\n    return \"NO\"\n\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    l = [int(stdin.readline()) for _ in range(n * n)]\n    return 'YES' if check_palindrome(l) else 'NO'\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 20:\n        raise ValueError(\"invalid n\")\n\n    a = [int(i) for i in stdin.split()]\n    if len(a)!= n * n:\n        raise ValueError(\"invalid a\")\n\n    m = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            m[i][j] = a[i * n + j]\n\n    for i in range(n):\n        m[i] = m[i][::-1]\n\n    for j in range(n):\n        for i in range(n):\n            if m[i][j]!= m[j][i]:\n                return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [int(x) for x in stdin.split()]\n    matrix = []\n    i = 0\n    while i < len(numbers):\n        col = []\n        for j in range(n):\n            col.append(numbers[i])\n            i += 1\n        matrix.append(col)\n    return search(matrix)\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = stdin.readline().strip().split()\n    return 'YES' if is_palindromic(n, matrix) else 'NO'\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The matrix should be palindromic if and only if the numbers in its rows and columns are sorted in descending order.\n    \"\"\"\n    n = int(stdin)\n    if n < 1 or n > 20:\n        return 'NO'\n    numbers = stdin.split()\n    if len(numbers)!= n*n:\n        return 'NO'\n    numbers = [int(x) for x in numbers]\n    if len(numbers)!= n*n:\n        return 'NO'\n    # build the matrix\n    m = []\n    for i in range(n):\n        m.append(numbers[i*n: (i+1)*n])\n    # check the matrix\n    for i in range(n):\n        for j in range(n):\n            if m[i][j]!= m[j][i]:\n                return 'NO'\n    return 'YES'"
    }
]