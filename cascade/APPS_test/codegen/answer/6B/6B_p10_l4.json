[
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input line to get the number of vertices\n    # and the edges\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    edges = list(map(int, lines[1].split()))\n\n    # Build a graph using the edges\n    graph = Graph()\n    graph.build_graph(n, edges)\n\n    # Compute the maximum number of edges by using Kruskal's\n    # algorithm\n    mst = KruskalMST(graph)\n\n    # Print the number of edges\n    print(mst.get_max_edges())\n    # Print the three vertices\n    print(*mst.get_vertices())\n\nclass KruskalMST:\n    def __init__(self, graph):\n        self.__graph = graph\n        self.__vertices = list(graph.get_vertices())\n        self.__edges = graph.get_edges()\n        self.__costs = []\n        self.__edge_idxs = {}\n\n    def get_max_edges(self):\n        return len(self.__costs)\n\n    def get_vertices(self):\n        return self.__vertices\n\n    def get_edges(self):\n        return self.__edges\n\n    def __compute_costs(self):\n        # Sort the edges in non-decreasing order\n        self.__edges.sort(key=lambda edge: edge[2])\n\n        # Now that the edges are sorted, we will take the\n        # first edge and check if it is in the MST.\n        # If the edge is in the MST, then we add the cost\n        # to the list of costs.\n        for edge in self.__edges:\n            if self.__is_in_mst(edge[0], edge[1]):\n                self.__costs.append(edge[2])\n\n    def __is_in_mst(self, v_1, v_2):\n        # For each edge from vertex v_1 to vertex v_2, check\n        # if the edge is in the MST\n        for edge_idx in self.__edge_idxs[(v_1, v_2)]:\n            if edge_idx < len(self.__costs):\n                return True\n\n        # If we reach here, the edge is not in the MST\n        return False\n\n    def __build_indexes(self):\n        for idx, edge in enumerate(self.__edges):\n            if edge[0] not in self.__edge_idxs:\n                self.__edge_idxs[(edge[0], edge[1])] = []\n\n            self.__edge_idxs[(edge[0], edge[1])].append(idx)\n\n            if edge[1] not in self.__edge_idxs:\n                self.__edge_idxs[(edge[1], edge[0])] = []\n\n            self.__edge_idxs[(edge[1], edge[0])].append(idx)\n\n    def get_costs(self):\n        if not self.__costs:\n            self.__compute_costs()\n\n        return self.__costs\n\n    def get_edge_idx(self, v_1, v_2):\n        for edge_idx in self.__edge_idxs[(v_1, v_2)]:\n            edge = self.__edges[edge_idx]\n            if edge[0] == v_1:\n                return edge_idx\n\n        for edge_idx in self.__edge_idxs[(v_1, v_2)]:\n            edge = self.__edges[edge_idx]\n            if edge[1] == v_1:\n                return edge_idx\n\n        raise ValueError(\"edge doesn't exist.\")\n\nclass Graph:\n    def __init__(self):\n        self.__vertices = set()\n        self.__edges = []\n\n    def get_vertices(self):\n        return self.__vertices\n\n    def get_edges(self):\n        return self.__edges\n\n    def build_graph(self, n, edges):\n        # Check if we have the correct number of vertices\n        if n < 3:\n            raise ValueError(\"Graph must have at least 3 vertices.\")\n\n        # Check if there are no self-loops in the graph\n        for edge in edges:\n            if edge[0] == edge[1]:\n                raise ValueError(\"Graph must not have self-loops.\")\n\n        # Check if there is no edge\n        for edge in edges:\n            if edge[0] > n or edge[1] > n:\n                raise ValueError(\"Graph must not have edges outside the graph.\")\n\n        # Add all the vertices to the graph\n        for i in range(1, n + 1):\n            self.__vertices.add(i)\n\n        # Add all the edges to the graph\n        for edge in edges:\n            self.__edges.append(edge)\n            self.__edges.append((edge[1], edge[0]))"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Reads the input, solves the problem and prints the result'''\n    n = int(stdin.readline())\n    answers = {}\n    for i in range(n - 1):\n        a, b = [int(x) for x in stdin.readline().strip().split()]\n        if a in answers:\n            answers[a].append(b)\n        else:\n            answers[a] = [b]\n        if b in answers:\n            answers[b].append(a)\n        else:\n            answers[b] = [a]\n    answers = {k: answers[k] for k in answers if len(answers[k]) > 1}\n    max_edges = 0\n    for a in answers:\n        if len(answers[a]) > max_edges:\n            max_edges = len(answers[a])\n            ans = a, answers[a][0], answers[a][1]\n    print(ans[0])\n    print(ans[1], ans[2])\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\n@test_algorithm(stdin)\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    lines = lines[1:]\n    edges = [tuple(map(int, line.split())) for line in lines]\n    edges.sort()\n    result = 0\n    for i in range(n-1):\n        a, b = edges[i]\n        for j in range(i+1, n):\n            c, d = edges[j]\n            if a!= c and b!= d:\n                result = max(result, (b - a) + (d - c))\n    a, b, c = edges[-1]\n    return f'{result}'"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    tree = [tuple(map(int, line.split())) for line in stdin]\n    def get_edges(u: int, v: int) -> list:\n        ret = []\n        for e in tree:\n            if e[0] == u and e[1]!= v and e[1]!= u:\n                ret.append(e)\n            elif e[0] == v and e[1]!= u and e[1]!= v:\n                ret.append(e)\n        return ret\n    visited = [False] * n\n    edges = [0] * n\n    for i in range(n):\n        visited[i] = True\n        for e in get_edges(i, i):\n            visited[e[1]] = True\n            edges[e[1]] += 1\n    return str(max(edges))\n\nprint(solution('''8\n1 2\n2 3\n3 4\n4 5\n4 6\n3 7\n3 8\n'''))\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    graph = {}\n    for _ in range(N - 1):\n        a, b = [int(x) for x in stdin.readline().split()]\n        graph.setdefault(a, []).append(b)\n        graph.setdefault(b, []).append(a)\n\n    # get all nodes\n    nodes = set(graph.keys())\n    for v in nodes:\n        if v in graph:\n            for w in graph[v]:\n                graph.setdefault(w, []).append(v)\n\n    max_edges = 0\n    for s in nodes:\n        for t in nodes:\n            for v in nodes:\n                if v!= s and v!= t and v not in graph[s] and v not in graph[t]:\n                    max_edges = max(max_edges, len(graph[s]) + len(graph[t]) - 2)\n\n    # get maximal number of edges\n    for s in nodes:\n        for t in nodes:\n            for v in nodes:\n                if v!= s and v!= t and v not in graph[s] and v not in graph[t]:\n                    max_edges = max(max_edges, len(graph[s]) + len(graph[t]) - 2)\n\n    # get maximum simple path between nodes\n    for s in nodes:\n        for t in nodes:\n            if s!= t:\n                for v in nodes:\n                    if v!= s and v!= t and v not in graph[s] and v not in graph[t]:\n                        max_edges = max(max_edges, len(graph[s]) + len(graph[t]) - 2)\n\n    return str(max_edges)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [[int(i) for i in stdin.readline().split()] for j in range(n - 1)]\n    d = {}\n    for u, v in edges:\n        if u in d:\n            d[u].add(v)\n        else:\n            d[u] = {v}\n        if v in d:\n            d[v].add(u)\n        else:\n            d[v] = {u}\n    \n    print(max(sorted(max(d[u] - {v} - {u} for u, v in edges) - {v} - {u} for v in d[u]) + max(d[v] - {u} - {v} for u, v in edges) - {u} - {v} for u in d for v in d[u] if u!= v)))\n    print(' '.join(map(str, sorted(max(d[u] - {v} - {u} for u, v in edges) - {v} - {u} for v in d[u]) + max(d[v] - {u} - {v} for u, v in edges) - {u} - {v} for u in d for v in d[u] if u!= v))))\n    "
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = [(int(a), int(b)) for (a, b) in stdin.split('\\n')[1:n - 1]]\n    vertices = set(map(lambda x: x[0], edges)) | set(map(lambda x: x[1], edges))\n\n    result = 0\n    for a in vertices:\n        for b in vertices:\n            if a!= b:\n                result = max(result, count_simple_paths(edges, a, b))\n\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([*map(str, merge(map(int, stdin.split('\\n')[1].split(' ')))))\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    data = [int(x) for x in stdin.readline().split()]\n    counts = Counter(data)\n    divisors = sorted(counts.keys())\n    counts = sorted(counts.values(), reverse=True)\n    res = []\n    for div in divisors:\n        if divisors.index(div) % 2 == 0:\n            res.append(div)\n    return''.join([str(x) for x in res])\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.count(\"\\n\")\n    d = [int(i) for i in stdin.split()]\n    c = Counter(d)\n    c.pop(1, None)\n    c.pop(0, None)\n    c.pop(1, None)\n    if len(c) == 1:\n        return \"\".join(str(c.popitem()[0]) + \"\\n\")\n    for i in c:\n        if c[i] > 1:\n            return \"\".join(str(i) + \"\\n\")\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = [int(i) for i in stdin.readline().strip().split(\" \")]\n    x, y = 1, 1\n    for i in range(1, n):\n        if d[i] % x == 0:\n            x *= d[i]\n        if d[i] % y == 0:\n            y *= d[i]\n    return \"{}\\n{}\".format(x, y)"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(d) for d in stdin.readline().split()]\n    l = []\n    for i in range(1, n):\n        for j in range(1, n):\n            if divisors.count(i) >= 1 and divisors.count(j) >= 1:\n                l.append(i)\n                l.append(j)\n    return''.join(map(str, l))\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(x) for x in stdin.readline().split()]\n    candidates = set()\n\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if divisors[i] * divisors[j] in divisors:\n                candidates.add(divisors[i] * divisors[j])\n            if divisors[i] * divisors[j] in divisors:\n                candidates.add(divisors[j] * divisors[i])\n\n    return \" \".join(sorted(candidates))\n\nassert(solution('''10\n10 2 8 1 2 4 1 20 4 5''')) == '20 8'\nassert(solution('''5\n10 1 2 3 4 5''')) == '1 2'\nassert(solution('''20\n20 4 1 2 5 10 3 6 7 8 10 9 12 13 14 15 16 17 18 19''')) == '1 2'\nassert(solution('''2\n1 2''')) == '1 2'\nassert(solution('''20\n10 4 1 2 5 10 3 6 7 8 10 9 12 13 14 15 16 17 18 19''')) == '1 2'\nassert(solution('''20\n2 1 2 3 5 10 6 7 8 10 9 12 13 14 15 16 17 18 19''')) == '1 2'\nassert(solution('''3\n2 2 1''')) == '2 1'\nassert(solution('''6\n5 4 3 2 1 1 2''')) == '2 1'\nassert(solution('''2\n3 2''')) == '2 2'\nassert(solution('''8\n10 1 2 3 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''2\n2 2''')) == '2 2'\nassert(solution('''3\n3 1 2''')) == '3 2'\nassert(solution('''1\n1 1''')) == '1 1'\nassert(solution('''4\n4 1 3 2''')) == '4 1'\nassert(solution('''9\n10 1 2 3 4 5 6 7 8 9''')) == '1 2'\nassert(solution('''2\n1 1''')) == '1 1'\nassert(solution('''1\n2 2''')) == '1 2'\nassert(solution('''7\n10 4 1 2 3 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''1\n2 1''')) == '2 1'\nassert(solution('''7\n10 2 1 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''8\n10 2 1 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''7\n10 2 1 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''6\n10 2 1 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''9\n10 2 1 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''3\n2 3 2 1''')) == '2 2'\nassert(solution('''3\n3 3 2''')) == '2 2'\nassert(solution('''1\n1 3 2''')) == '1 3'\nassert(solution('''4\n1 2 1 2''')) == '1 3'\nassert(solution('''6\n1 2 1 2 1 1 1''')) == '1 2'\nassert(solution('''6\n1 3 1 2 1 1 2''')) == '1 2'\nassert(solution('''3\n2 2 1 2''')) == '2 2'\nassert(solution('''1\n2 1''')) == '2 1'\nassert(solution('''3\n3 3 1 2''')) == '3 2'\nassert(solution('''1\n2 1''')) == '2 1'\nassert(solution('''1\n1 2''')) == '1 2'\nassert(solution('''2\n2 2''')) == '2 2'\nassert(solution('''4\n2 1 2 1 3''')) == '2 1'\nassert(solution('''4\n4 1 3 2 1''')) == '2 1'\nassert(solution('''4\n4 1 3 2 1''')) == '2 1'\nassert(solution('''6\n3 2 1 3 2 1 3''')) == '1 2'\nassert(solution('''6\n5 1 3 2 1 3 2''')) == '1 2'\nassert(solution('''6\n5 2 3 1 2 3 2''')) == '1 2'\nassert(solution('''6\n5 2 3 1 2 3 2''')) == '1 2'\nassert(solution('''7\n10 1 1 2 3 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''7\n10 2 2 1 2 3 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''7\n10 2 2 1 2 3 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''7\n10 2 1 2 3 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''7\n10 3 1 2 3 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''7\n10 3 1 2 3 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''7\n10 3 1 2 3 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''7\n10 4 1 2 3 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''7\n10 4 1 2 3 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''7\n10 4 1 2 3 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution('''7\n10 4 1 2 3 4 5 6 7 8 9 10''')) == '1 2'\nassert(solution("
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = list(map(int, stdin.readline().split()))\n    length = len(divisors)\n    mapping = {x: divisors.count(x) for x in set(divisors)}\n    sum_x = sum(divisors)\n    sum_y = sum(x for x in divisors if x not in mapping)\n    for x in range(length + 1):\n        y = sum_x - x\n        if x > y or (y > x and mapping[y] > mapping[x]):\n            break\n    else:\n        x, y = y, x\n    mapping = {x: divisors.count(x) for x in set(divisors)}\n    return f\"{x} {y}\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    n = int(n)\n    arr = list(map(int, stdin.splitlines()[1].split()))\n    divs = set()\n    for i in range(1, n):\n        if arr[i] not in divs:\n            for j in range(i, n):\n                if arr[i] % arr[j] == 0:\n                    divs.add(arr[i])\n                    divs.add(arr[j])\n    res = list(divs)\n    res.sort()\n    for i in range(n):\n        res[i] = str(res[i])\n    return \"\\n\".join(res)"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n\n    max_sum = 0\n    for _ in range(n):\n        a = [int(x) for x in stdin.split()]\n        sum_ = 0\n        for i in range(0, m, 2):\n            sum_ += a[i]\n            if sum_ % k!= 0:\n                break\n        max_sum = max(max_sum, sum_)\n\n    return max_sum\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.rstrip().split(' '))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.rstrip().split(' '))))\n\n    # x, y, z\n    max_x = sum(a[0][:m // 2])\n    max_y = sum(a[0][m // 2:])\n\n    for row in a:\n        x = sum(row[:m // 2])\n        y = sum(row[m // 2:])\n        if x > max_x:\n            max_x = x\n        if y > max_y:\n            max_y = y\n\n    return str(max_x + max_y)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The number of elements in each row is given by $m$.\n    The number of rows is given by $n$\n    The number of elements in each row is given by $k$.\n    The elements are given by $a_{i, j}$\n    \"\"\"\n    n, m, k = [int(x) for x in stdin.split()]\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    max_row_sum = [0] * n\n    for j in range(1, m, 2):\n        for i in range(n):\n            max_row_sum[i] = max(max_row_sum[i], matrix[i][j] + max_row_sum[i])\n    return max(max_row_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n\n    if k % 2 == 0:\n        start = n // 2\n    else:\n        start = n // 2 + 1\n\n    best_sum = 0\n    for i in range(start):\n        row_sum = sum(matrix[i])\n        if row_sum % k == 0 and row_sum > best_sum:\n            best_sum = row_sum\n\n    return str(best_sum)\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your solution here\n    pass"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    r = 0\n    for i in range(m):\n        c = 0\n        for j in range(n):\n            c += a[j][i]\n            if c > k:\n                r = max(c, r)\n                break\n        if c > k:\n            break\n\n    return str(r)\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4 3\n   ... 1 2 3 4\n   ... 5 2 2 2\n   ... 7 1 1 4\n   ... ''')\n    '24'\n    \"\"\"\n    n, m, k = (int(x) for x in stdin.split())\n    a = [list(map(int, stdin.split()[:m])) for _ in range(n)]\n    res = [max(sum(a[i][j] for i in range(n//2)) for j in range(m//2))]\n    for i in range(n):\n        for j in range(m):\n            if j <= m//2:\n                a[i][j] %= k\n            else:\n                a[i][j] = 0\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(s) for s in stdin.split()]\n    matrix = [\n        [int(s) for s in stdin.split()]\n        for i in range(n)\n    ]\n\n    max_sum = 0\n    for row in matrix:\n        sum_row = sum(row[:int(m / 2)])\n        if sum_row % k == 0 and sum_row > max_sum:\n            max_sum = sum_row\n    return max_sum\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    ans = 1\n    curr = 1\n    l = len(A)\n    for i in range(l):\n        if A[i] < curr:\n            ans = max(ans, curr)\n            curr += 1\n        else:\n            curr = A[i] + 1\n    return str(ans)"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    answer = 0\n    for i in range(n):\n        j = i\n        while j > 0 and a[j] < a[j - 1]:\n            a[j], a[j - 1] = a[j - 1], a[j]\n            j -= 1\n        if j!= i:\n            a[i] = a[j]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                answer = max(answer, j - i + 1)\n\n    return str(answer)\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe given tests will always be valid.\n\n-----Solutions-----\n\"\"\"\n\nfrom sys import stdin, stdout\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    increasing = 0\n    result = 0\n\n    for i in range(len(a)):\n        if increasing < i:\n            break\n\n        if a[i] > increasing:\n            increasing = a[i]\n\n        if i + 1 > increasing:\n            result += 1\n            increasing = i + 1\n\n    return str(result)"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = list(map(int, stdin.readline().split()))\n    max_len = 0\n    len_seq = len(seq)\n    for i in range(len_seq):\n        for j in range(i, len_seq):\n            if j - i + 1 > max_len and seq[j] > seq[i]:\n                max_len = j - i + 1\n                s = 'L' * max_len + 'R' * (len_seq - max_len)\n                break\n    return s"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nFor the other examples, try to think about the most optimal solution.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = [int(x) for x in stdin.readline().strip().split()]\n\n    max_len = 0\n    max_seq = []\n\n    for i in range(0, n):\n        if i == 0:\n            left = 0\n        else:\n            left = seq[i - 1]\n        if i == n - 1:\n            right = 0\n        else:\n            right = seq[i + 1]\n\n        cur_seq = [seq[i]]\n        if left < right:\n            cur_seq.append(left)\n        else:\n            cur_seq.append(right)\n\n        if len(cur_seq) > max_len:\n            max_len = len(cur_seq)\n            max_seq = cur_seq\n\n    return max_len, \"\".join(max_seq)\n\nprint(solution(\"\"))\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The third example is described in the problem statement.\n    \"\"\"\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n\"\"\"\n\nN = int(input())\na = list(map(int, input().split()))\n\nk = 1\ntmp = 0\nfor i in range(N):\n    if a[i] > tmp:\n        tmp = a[i]\n        k += 1"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    n = stdin.split()\n    n = [int(x) for x in n]\n    d = 1\n    while True:\n        flag = True\n        for i in range(len(n)):\n            if n[i] < 0:\n                flag = False\n                n[i] += d\n                if n[i] < 0:\n                    n[i] = 0\n                break\n        if flag:\n            break\n        d += 1\n    return str(d) if d > 0 else '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    min_value = -1\n    for value in range(1, max(a) + 1):\n        if all(a[i] == a[0] for i in range(1, n)):\n            min_value = value\n            break\n    return str(min_value)\n\n\nassert (solution('''6\n1 4 4 7 4 1\n''')) == '3'\nassert (solution('''5\n2 2 5 2 5\n''')) == '3'\nassert (solution('''4\n1 3 3 7\n''')) == '-1'\nassert (solution('''2\n2 8\n''')) == '3'\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n < 1:\n        return \"-\"\n\n    a = list(map(int, stdin.readline().split()))\n    if a[0] == 0:\n        return \"0\"\n    if a[0] < 0:\n        return \"-1\"\n\n    min_d = a[0]\n    for x in a:\n        if x < 0:\n            return \"-1\"\n        if x < min_d:\n            min_d = x\n\n    return str(min_d)\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    if n == 1: return '0'\n    for i in range(n):\n        if a[i] < 0:\n            return '-1'\n    d = 1\n    while d < n:\n        for i in range(n):\n            if a[i] < 0:\n                a[i] += d\n        d += 1\n        for i in range(n):\n            if a[i] == 0:\n                return str(d)\n    return '-1'\n\nassert(solution('''6\n1 4 4 7 4 1''') == '3')\nassert(solution('''5\n2 2 5 2 5''') == '3')\nassert(solution('''4\n1 3 3 7''') == '-1')\nassert(solution('''2\n2 8''') == '3')\nassert(solution('''3\n1 5 2 2 3''') == '-1')\nassert(solution('''7\n5 3 1 4 6 3 2''') == '1')\nassert(solution('''6\n1 9 3 3 7 3 1''') == '3')\nassert(solution('''10\n9 9 9 9 9 9 9 9 9 9 9 9 9 9''') == '-1')\nassert(solution('''100\n4 2 3 5 9 5 4 2 4 2 3 5 4 2 4 3 4 2 4 3 5 4 2 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3 4 2 4 3"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    memo = dict()\n    res = None\n    def helper(i, k):\n        if (i, k) in memo:\n            return memo[i, k]\n        elif i >= n:\n            return 0\n        elif k == 0:\n            return max(1, arr[i])\n        else:\n            return min(helper(i+1, k-1) + max(0, arr[i]), helper(i+1, k) + max(0, arr[i]))\n    res = helper(0, n - 1)\n    if res is None:\n        res = -1\n    return res\n    # return str(res)"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        return \"0\"\n\n    a = list(map(int, stdin.readline().split()))\n    if max(a) <= 0:\n        return \"0\"\n    \n    for d in range(1, max(a)):\n        diff = 0\n        for i in a:\n            if i + d <= 0:\n                diff += 1\n            elif i - d > 0:\n                diff -= 1\n        if diff == 0:\n            return str(d)\n\n    return \"-1\""
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if len(a) == 1:\n        return '-1'\n    elif all(a[i] == a[i+1] for i in range(len(a)-1)):\n        return str(0)\n\n    a.sort(reverse=True)\n\n    for i in range(len(a)):\n        if a[i] < a[i+1] - a[i]:\n            a[i] = a[i] + a[i+1] - a[i]\n            a[i+1] = 0\n        elif a[i] == a[i+1] - a[i]:\n            a[i] = a[i] - a[i+1]\n\n    for i in range(len(a)):\n        if a[i] < 0:\n            return '-1'\n\n    return str(a[0])\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    l = [0] + l\n    count = 0\n    for i in range(1, n + 1):\n        if l[i] > 0:\n            for j in range(i, n + 1):\n                l[j] = l[j] - l[i]\n                if l[j] < 0:\n                    count += 1\n                    break\n    if count == 0:\n        print(-1)\n    else:\n        print(count)\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n\n    for i in range(1, n):\n        if a[i] < 0:\n            a[i] += n\n    \n    if n == len(set(a)) and max(a) - min(a) <= n:\n        return str(sum(a) - max(a))\n    else:\n        return '-1'\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # you may know some terms like Ceiling, Floor, Rounding, Absolute Value from somewhere\n    # here is your chance to import some standard modules and use them\n    \n    # write your code here\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    \n    s = sum(nums)\n    for i in range(n):\n        s -= nums[i]\n        nums[i] = 0\n    \n    if s == 0:\n        return '0'\n    \n    if s % n == 0:\n        return ''.join(map(str, nums))\n    \n    ans = -1\n    \n    for i in range(1, n):\n        if s + i > n:\n            break\n        s += i\n        if s % n == 0:\n            ans = i\n            break\n    \n    return str(ans)\n\nprint(solution('input.txt'))\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('''2 2 4 4''') == 'NO')\nassert(solution('''1 1 3 5''') == 'NO')\nassert(solution('''3 1 5 5''') == 'YES')\nassert(solution('''0 0 4 6''') == 'YES')\nassert(solution('''0 0 7 4''') == 'NO')\nassert(solution('''0 0 1000000 1000000''') == 'NO')\nassert(solution('''0 0 499999 1000000''') == 'YES')\nassert(solution('''500000 0 1000000 1000000''') == 'YES')\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n    x_5, y_5, x_6, y_6 = map(int, stdin.split())\n    \n    if (x_1 <= x_3 and x_2 >= x_3) or (x_1 >= x_3 and x_2 <= x_3):\n        if (y_1 <= y_3 and y_2 >= y_3) or (y_1 >= y_3 and y_2 <= y_3):\n            return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    white_sheet = tuple(map(int, stdin.split()))\n    black_sheet1 = tuple(map(int, stdin.split()))\n    black_sheet2 = tuple(map(int, stdin.split()))\n    return 'YES' if not in_white_sheet(white_sheet, black_sheet1) and not in_white_sheet(white_sheet, black_sheet2) else 'NO'\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = (int(x) for x in stdin.split())\n    x_3, y_3, x_4, y_4 = (int(x) for x in stdin.split())\n    return 'NO' if (x_1 > x_3 or x_3 > x_2 or y_1 > y_3 or y_3 > y_2) else 'YES'"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = tuple(map(int, stdin.split()))\n    x_3, y_3, x_4, y_4 = tuple(map(int, stdin.split()))\n    x_5, y_5, x_6, y_6 = tuple(map(int, stdin.split()))\n    return \"YES\" if any((x_1 + y_1 < x_2, y_1 + x_1 > x_2,\n                         x_3 + y_3 < x_4, y_3 + x_3 > x_4,\n                         x_5 + y_5 < x_6, y_5 + x_5 > x_6)) else \"NO\"\n\nassert str(solution(\"2 2 4 4\")) == \"NO\"\nassert str(solution(\"1 1 3 5\")) == \"NO\"\nassert str(solution(\"3 1 5 5\")) == \"NO\"\nassert str(solution(\"0 0 4 6\")) == \"YES\"\nassert str(solution(\"0 0 7 4\")) == \"YES\"\nassert str(solution(\"5 2 10 5\")) == \"YES\"\nassert str(solution(\"3 1 7 6\")) == \"YES\"\nassert str(solution(\"8 1 11 7\")) == \"YES\"\n\n\n-----"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    out = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n -= 1\n            n /= 2\n        out += 1\n    return str(out)"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    result = n\n    while n!= 1:\n        n -= 1\n        n += 2\n        result += 1\n    return str(result)"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    reachable = [0 for _ in range(n + 1)]\n    reachable[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i, i + i):\n            reachable[j] += reachable[j - i]\n    return str(reachable[n])"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    counter = 0\n    for i in range(1, n):\n        num = str(i)\n        if num.endswith('0'):\n            continue\n        counter += 1\n    return str(counter)"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def f(x):\n        if x < 10:\n            return x + 1\n        else:\n            return f(x // 10) + (x % 10) + 1\n    a = set()\n    for x in range(1, n + 1):\n        x1 = x\n        while x1 % 10 == 0:\n            x1 //= 10\n        x2 = f(x)\n        a.add(x2)\n    return str(len(a))"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def has_trailing_zero(num: int) -> bool:\n        \"\"\"\n        Returns True if there is a zero at the end of the given number, False otherwise.\n        \"\"\"\n        return num % 10 == 0 and num // 10!= 0\n\n    n = int(stdin)\n    if n < 10:\n        return 0\n    result = [1]\n    num = n\n    while True:\n        if not num:\n            break\n        if has_trailing_zero(num):\n            num //= 10\n            continue\n        result.append(1)\n        num -= 1\n    return len(result)\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(str(a) for a in range(10**(10), 10**9 + 1) if a % 10 == 0)))"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n + sum(1 for i in range(1, n + 1) if '0' not in str(i)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [str(x) for x in range(1, n+1)]\n    for x in range(1, n+1):\n        for y in range(1, n+1):\n            if x in l:\n                l.remove(str(x))\n                break\n    return str(len(l))"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i < 10:\n            count += 1\n        else:\n            count += 2\n    return str(count)\n\nassert(solution('1098') == '20')\nassert(solution('10') == '19')\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = [int(x) for x in stdin.split()]\n    f = [0] + f\n    if n == 2:\n        if f[2] == 1:\n            return''.join([str(f[2]), str(f[2 + 1]), str(f[2])])\n        else:\n            return''.join([str(f[2]), str(f[2 + 1]), str(f[2]), str(f[2])])\n\n    gifts = [0 for i in range(n)]\n    for i in range(1, n):\n        if f[i]!= i:\n            gifts[f[i]] += 1\n    for i in range(n):\n        if f[i] == 0:\n            gifts[i] = n - 1\n\n    return''.join([str(x) for x in gifts])\n\nassert(solution('''7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''2\n1 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''5\n5 0 0 2 4\n''') == '5 3 1 2 4')\nassert(solution('''7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''2\n2 0 0 0\n''') == '2 1 4 5 3')\nassert(solution('''5\n5 0 0 2 4\n''') == '5 3 1 2 4')"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = [int(f) for f in stdin.readline().split()]\n    unique = set()\n    result = []\n    for i in range(n):\n        if friends[i] == 0:\n            result.append(i)\n        else:\n            unique.add(friends[i])\n    for f in unique:\n        if f in result:\n            result.remove(f)\n    return''.join([str(f) for f in result])\n\nassert solution('''5\n5 0 0 2 4\n''') == '5 3 1 2 4'\n\nassert solution('''7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6'\n\nassert solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1'\n\nassert solution('''5\n2 1 0 0 0\n''') == '2 1 4 5 3'\n\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 1 0\n'''))\nprint(solution('''4\n1 2 1 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution('''4\n1 2 0 0\n'''))\nprint(solution(''"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    friends = list(map(int, stdin.readline().strip().split()))\n    result = [0] * n\n    for i in range(n):\n        if friends[i]!= i:\n            result[friends[i]] = i\n    return''.join(str(i) for i in result)\n\nassert solution('5\\n5 0 0 2 4\\n') == '5 3 1 2 4\\n'\nassert solution('7\\n7 0 0 1 4 0 6\\n') == '7 3 2 1 4 5 6\\n'\nassert solution('7\\n7 4 0 3 0 5 1\\n') == '7 4 2 3 6 5 1\\n'\nassert solution('5\\n2 1 0 0 0\\n') == '2 1 4 5 3\\n'\n\n\n\"\"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    friends = [int(x) for x in stdin.readline().strip().split(' ')]\n    answers = []\n\n    for i in range(n):\n        if friends[i] == 0:\n            answers.append(i)\n\n    return''.join([str(x) for x in answers])\n\nprint(solution(''))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n = int(stdin.readline())\n        f = sorted(list(map(int, stdin.readline().split())))\n        result = [-1] * n\n        last_given = None\n        for i in range(n):\n            if f[i]!= i:\n                result[f[i]] = i\n            else:\n                if last_given!= None:\n                    result[f[i]] = last_given\n            last_given = f[i]\n        print(' '.join(map(str, result)))\nsolution(open('/home/erez/github/hackerrank/data_structures/graphs/binary_search_tree/11.txt', 'r'))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = []\n    for _ in range(n):\n        ans.append(int(stdin.readline()))\n    for i in range(n):\n        if ans[i] > i:\n            ans[i] = ans[i] - i\n    return''.join(map(str, ans))"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline().strip())\n    # print(n)\n    # print(stdin)\n    friends = list(map(int, stdin.readline().strip().split(' ')))\n    # print(friends)\n    gift_value = stdin.readline().strip()\n    # print(gift_value)\n    gift_value_set = set(gift_value.split(' '))\n    # print(gift_value_set)\n\n    solution = []\n    for i in range(len(friends)):\n        if i not in gift_value_set:\n            solution.append(i)\n    return''.join(map(str, solution))\n\n\nassert(solution('5\\n5 0 0 2 4\\n') == '5 3 1 2 4')\nassert(solution('7\\n7 0 0 1 4 0 6\\n') == '7 3 2 1 4 5 6')\nassert(solution('7\\n7 4 0 3 0 5 1\\n') == '7 4 2 3 6 5 1')\nassert(solution('5\\n2 1 0 0 0\\n') == '2 1 4 5 3')\nassert(solution('7\\n2 1 0 0 3 0 1\\n') == '2 1 4 3 5 6')\nassert(solution('5\\n2 1 0 0 4 0\\n') == '2 1 4 3 5')\nassert(solution('5\\n2 1 0 0 4 0\\n') == '2 1 4 3 5')\nassert(solution('1\\n1\\n') == '1')\nassert(solution('10\\n
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = list(map(int, stdin.readline().split()))\n    \n    nfriends = [0] * (n + 1)\n    for i, f in enumerate(friends):\n        nfriends[f] = i\n    \n    out = [0] * n\n    for i, f in enumerate(friends):\n        if i!= n - 1:\n            if f == 0:\n                out[nfriends[i + 1]] += 1\n            else:\n                out[f] += 1\n    \n    return \" \".join(map(str, out))\n\nassert(solution('''5\n5 0 0 2 4\n''')) == '5 3 1 2 4'\nassert(solution('''7\n7 0 0 1 4 0 6\n''')) == '7 3 2 1 4 5 6'\nassert(solution('''7\n7 4 0 3 0 5 1\n''')) == '7 4 2 3 6 5 1'\nassert(solution('''5\n2 1 0 0 0\n''')) == '2 1 4 5 3'\nassert(solution('''7\n7 4 0 3 0 5 1\n''')) == '7 4 2 3 6 5 1'\nassert(solution('''7\n2 1 0 0 1 4 0 6\n''')) == '7 4 3 6 5 2 1'\n\nprint(solution('''8\n1 2 3 4 5 6 7 8\n2 0 0 0 2 0 0 0\n3 0 0 0 2 0 0 0\n4 0 0 0 2 0 0 0\n5 0 0 0 2 0 0 0\n6 0 0 0 2 0 0 0\n7 0 0 0 2 0 0 0\n8 0 0 0 2 0 0 0\n'''))\n\n'''"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f = list(map(int, stdin.readline().split()))\n    counter = Counter(f)\n    return''.join(map(str, (counter[i] for i in f if i!= 0)))"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = [int(stdin.readline().strip()) for _ in range(n)]\n    l.sort(reverse=True)\n    print(*l)\n"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n    if len(set(a)) < k:\n        print('NO')\n        return\n    l = [0] * k\n    for x in a:\n        l[x-1] += 1\n    for i in range(k):\n        if l[i] < n:\n            print('NO')\n            return\n    print('YES')\n    print(*l)\n    return"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.splitlines()\n    n, k = map(int, t[0].split())\n    a = map(int, t[1].split())\n    a = sorted(a)\n    m = len(a)\n    k = min(k, m)\n    c = [0] * k\n    for i in range(k):\n        if a[i]!= i + 1:\n            c[i] = i + 1\n            break\n    for i in range(k, m):\n        c[i - k] = i + 1\n    for i in range(k):\n        if a[i]!= i + 1:\n            break\n    return \"YES\" if c[i] == i + 1 else \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > n:\n        return \"NO\"\n    arr = [int(x) for x in stdin.split()]\n    colors = set(range(1, k + 1))\n    for i in range(n):\n        color = arr[i]\n        if color in colors:\n            colors.remove(color)\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if k < 1 or k > n:\n        return \"NO\"\n    for i in range(1, k+1):\n        if i not in a:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(n):\n        if a[i] == i + 1:\n            cnt += 1\n    if cnt < k:\n        return \"NO\"\n    else:\n        res = []\n        for i in range(k):\n            res.append(i + 1)\n        for i in range(n):\n            if a[i] == i + 1:\n                res[i % k] += 1\n        return \"YES\\n\" + \"\\n\".join(map(str, res))"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n\n    if k > n:\n        return 'NO'\n\n    l = 0\n    r = 0\n\n    c = [0 for _ in range(k)]\n\n    while r < n:\n        if a[r] > k:\n            c[k - 1] += 1\n            r += 1\n        else:\n            c[a[r] - 1] += 1\n            r += 1\n            l = max(l, r)\n\n    if r < n:\n        return 'NO'\n\n    for i in range(k):\n        if c[i] > 0:\n            return 'YES'\n\n    return 'NO'"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    c = [0] * k\n    for i in range(n):\n        c[a[i] % k] += 1\n    for i in range(k):\n        if c[i] == 0:\n            return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = (int(i) for i in stdin.strip().split(' '))\n    a = stdin.strip().split(' ')[1]\n    remainder = 0\n    for i, c in enumerate(a):\n        if c == '1':\n            remainder = remainder * 10 + 1\n        else:\n            remainder = remainder * 10\n    r = remainder % (10 ** x)\n    r1 = r % (10 ** y)\n    return str(len(str(r1)))"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.strip().split()]\n    nums = [int(x) for x in stdin.strip()]\n    for i in range(n):\n        if nums[i] == 1:\n            nums[i] = 0\n        else:\n            nums[i] = 1\n    rem = nums[-1] * 10 ** y\n    result = 0\n    while True:\n        if rem % (10 ** x):\n            result += 1\n        rem = rem // 10\n        if rem == 0:\n            break\n    return result\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n\n    ans = 0\n\n    while y > 0:\n        if y % x == 0:\n            ans += x\n            y = y // x\n            continue\n        if y % (x + 1) == 0:\n            ans += x + 1\n            y = y // (x + 1)\n            continue\n        ans += y\n        break\n\n    return str(ans)"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('\\n', '')\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.codewars.com/kata/56712d4dcfa3bbff4700005f\n\n    Write a function `solution(string)` that takes a string as argument and returns the result of the following calculation:\n\n    ```\n    calculate_remainder(0, 10, 10) == 1\n    calculate_remainder(0, 2, 10) == 0\n    calculate_remainder(0, 1, 10) == 9\n    calculate_remainder(1, 2, 10) == 1\n    calculate_remainder(1, 1, 10) == 0\n    calculate_remainder(0, 0, 10) == 0\n    calculate_remainder(1, 1, 1) == 0\n    calculate_remainder(1, 1, -1) == 0\n    calculate_remainder(1, 2, 1) == 0\n    calculate_remainder(1, 2, -1) == 0\n    calculate_remainder(1, 3, 1) == 0\n    calculate_remainder(1, 3, -1) == 0\n    ```\n\n    The function should return -1 if:\n\n    - the string is empty;\n    - the string contains a non-digit character;\n    - the length of the string is not 3;\n    - the first two digits of the number are not `1` and `0`.\n\n    ```python\n    >>> solution('0' * 500)\n    -1\n    >>> solution('123')\n    -1\n    >>> solution('11')\n    1\n    >>> solution('12')\n    2\n    >>> solution('1')\n    3\n    >>> solution('11111')\n    -1\n    >>> solution('1' * 10000)\n    -1\n    >>> solution('1' * 10000 + '2')\n    -1\n    >>> solution('2' * 10000 + '1')\n    -1\n    >>> solution('2' * 10000 + '2')\n    -1\n    >>> solution('2' * 10000 + '1' * 1000)\n    -1\n    >>> solution('1' * 10000 + '0' * 5000)\n    -1\n    >>> solution('1' * 10000 + '0' * 5000 + '1')\n    -1\n    >>> solution('0' * 10000 + '1' * 10000)\n    -1\n    >>> solution('1' * 10000 + '0' * 10000 + '0')\n    -1\n    >>> solution('0' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '0' * 10000 + '0')\n    -1\n    >>> solution('1' * 10000 + '0' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '0')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    >>> solution('1' * 10000 + '1' * 10000 + '1')\n    -1\n    "
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nimport sys\n\nT = int(sys.stdin.readline().strip())\nfor i in range(T):\n    N, X, Y = [int(s) for s in sys.stdin.readline().split()]\n    N_bin = str(bin(N))[2:]\n    N_bin_index = N_bin.find('1')\n    N_bin_Y = N_bin[:N_bin_index] + str(Y) + N_bin[N_bin_index + 1:]\n    N_bin_Y = int(N_bin_Y, 2)\n    N_X = N % X\n    N_Y = N_bin_Y % Y\n    print(N_Y - N_X)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = (int(n) for n in stdin.split())\n    s = stdin[1:-2]\n    print(sum(n % 2 for n in s) - n % 2)"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    d = [int(stdin[i]) for i in range(n)]\n    result = 0\n    for i in range(n):\n        if d[i] == 0:\n            result += x\n        elif d[i] == 1:\n            result += y\n        else:\n            result += 1\n        d[i] = (d[i] + 1) % 2\n    return str(result)\n\n\nimport sys"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    v = stdin[:n]\n    m = 10**y\n    t = 0\n    while m!= 0:\n        m //= 10\n        t += 1\n    a, b = divmod(x, t)\n    if b!= 0:\n        return str(a)\n    a, b = divmod(y, t)\n    if b!= 0:\n        return str(a)\n    return '0'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        a = [int(x) for x in stdin.split()]\n        for i in range(n):\n            a[i] = a[i - 1] + a[i]\n        a = a[:n]\n        # print(a)\n        if a[:n - 1] == a[n - 1:][::-1]:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    return \"YES\" if any(a[i - 1] == a[-i] for i in range(2, len(a) + 1)) else \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    for _ in range(n - 2):\n        a = list(map(int, stdin.readline().split()))\n        if a[::-1] == a:\n            print('YES')\n        else:\n            print('NO')\n    return ''"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        result = 'YES' if is_palindrome(a, n) else 'NO'\n        print(result)\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        if n < 3:\n            print(\"NO\")\n        else:\n            for i in range(n - 2):\n                if a[i] == a[i + 1] == a[i + 2]:\n                    print(\"YES\")\n                    break\n            else:\n                print(\"NO\")"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    list_of_ints = []\n    for _ in range(n):\n        list_of_ints.append(int(stdin.readline().strip()))\n    return [solution_util(list_of_ints, i) for i in range(3, len(list_of_ints) + 1, 3)]\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split(' ')))\n        s = set()\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                if a[i] == a[j] and a[i + 1] == a[j + 1]:\n                    s.add(a[i])\n                    s.add(a[j])\n                    s.add(a[i + 1])\n                    s.add(a[j + 1])\n        if len(s) < 3:\n            print('NO')\n        else:\n            print('YES')\n    return"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        p = 0\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    if (a[i] * a[j] * a[k] == a[i + 1] * a[j + 1] * a[k + 1]):\n                        p = 1\n        if p == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        \n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin)\n    for _ in range(count):\n        n = int(stdin)\n        nums = [int(x) for x in stdin.split()]\n        if n == 1:\n            print(\"NO\")\n        elif n == 2:\n            a1, a2 = nums\n            if a1 == a2:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n        elif n == 3:\n            a1, a2, a3 = nums\n            if a1 == a3 or a2 == a2:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n        else:\n            a1, a2, *rest = nums\n            if rest[0] == a1 and a1 == a2 and a2 == a3:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\n\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    mapping = stdin.readline().strip()\n    nums = [int(x) for x in stdin.readline().strip()]\n    if len(a) == 1:\n        return str(int(a))\n    map = dict()\n    for i in range(10):\n        map[str(i)] = i\n    for i in range(10):\n        map[str(i)] = mapping.index(str(i))\n    res = ''\n    for x in a:\n        res += str(map[x])\n    res = int(res)\n    res = str(res)\n    return res\n\nassert solution('1\\n4\\n1 1 1 1 1 1 1 1 1') == '1557'\nassert solution('1\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1 1 1 1 1 1 1 1') == '33'\nassert solution('2\\n11111\\n9 8 7 6 5 4 3 2 1') == '99999'\nassert solution('2\\n33\\n1 1"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = [int(x) for x in stdin.readline().strip().split()]\n\n    counter = 0\n    for i in range(n):\n        x = a[i]\n        for j in range(10):\n            if f[j] == int(x):\n                f[j] = j + 1\n                counter += 1\n\n    return str(int(\"\".join([str(x) for x in f])))"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The example above can be simplified to:\n\n    If you have $k$ left over in your number, the largest you can obtain is:\n    $k * 9$\n    \"\"\"\n    n = stdin[0]\n    a = stdin[1]\n    f = [int(c) for c in stdin[2:]]\n    a = [int(c) for c in a]\n    res = ''\n    for x in a:\n        if x == 0:\n            res += '0'\n        else:\n            res += str(f[x-1])\n    return res\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = [int(c) for c in stdin.readline().strip()]\n\n    def f(x: int) -> int:\n        return f[x - 1]\n\n    def get_max_num(a: str, f: Callable[[int], int]) -> int:\n        max_num: int = 0\n\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                sub_a = a[i - 1:j]\n                new_a = int(sub_a) * 10 ** (j - i)\n\n                max_num = max(max_num, get_max_num(str(new_a), f))\n\n        return max_num\n\n    return str(get_max_num(a, f))\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def f(x: int) -> int:\n        return {\n            1: lambda: 1,\n            2: lambda: 10 + 9 * x,\n            3: lambda: 10 + 8 * x,\n            4: lambda: 10 + 7 * x,\n            5: lambda: 10 + 6 * x,\n            6: lambda: 10 + 5 * x,\n            7: lambda: 10 + 4 * x,\n            8: lambda: 10 + 3 * x,\n            9: lambda: 10 + 2 * x\n        }[x]()\n\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().strip()))\n\n    result = ''\n    for x in a:\n        result += str(f(int(x)))\n\n    return result\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = map(int, stdin.readline().strip().split())\n    a = list(a)\n    a_num = 0\n    for i in range(n):\n        a_num += f[i] * (10 ** i)\n    a_num = str(a_num)\n    a_num_new = [0] * len(a_num)\n    for i in range(len(a_num)):\n        a_num_new[i] = a_num[i]\n    for i in range(len(a_num) - 1, -1, -1):\n        a_num_new[i] = a_num_new[i] + 1 if a_num_new[i] < 9 else 0\n        if i == 0:\n            break\n    return ''.join(a_num_new)\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    fs = list(map(int, stdin.readline().split()))\n    for f in fs:\n        for i in range(len(a)):\n            if a[i] == f:\n                a[i] = f\n                break\n    return str(int(''.join(map(str, a))))\n\nassert(solution('''\n4\n1337\n1 2 5 4 6 6 3 1 9\n''') == '1553')\nassert(solution('''\n5\n11111\n9 8 7 6 5 4 3 2 1\n''') == '99999')\nassert(solution('''\n2\n33\n1 1 1 1 1 1 1 1 1\n''') == '33')"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n\n    >>> solution('''4\n   ...     1337\n   ...     1 2 5 4 6 6 3 1 9\n   ...     1 2 5 4 6 6 3 1 9\n   ...     ''')\n    '1557'\n    >>> solution('''5\n   ...     11111\n   ...     9 8 7 6 5 4 3 2 1\n   ...     1 2 5 4 6 6 3 1 9\n   ...     1 2 5 4 6 6 3 1 9\n   ...     ''')\n    '99999'\n    \"\"\"\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    f = [int(c) for c in stdin.readline().strip()]\n    memo = {}\n    return recursive_sequence(a, f, n, memo)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = int(stdin.readline().strip())\n    f = list(map(int, stdin.readline().strip().split()))\n    f = {\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9\n    }\n    r = \"\"\n    while len(r) < n:\n        l = list(str(a))\n        for i in range(1, n):\n            l[i] = str(f[int(l[i])])\n        a = int(\"\".join(l))\n        r += str(a)\n    return r"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = stdin[1]\n    f = [int(i) for i in stdin[2].split(' ')]\n    f_b = [f[i] for i in range(n)]\n    a_b = [int(i) for i in a]\n    ans = 0\n    for i in range(n):\n        temp = a_b[i]\n        if f_b[i] > f_b[i + 1]:\n            f_b[i] = f_b[i + 1]\n            temp = f_b[i]\n        if f_b[i] < f_b[i + 1]:\n            f_b[i] = f_b[i + 1]\n        ans += temp\n        a_b[i] = f_b[i]\n    return str(ans)"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get number of test cases\n    num_test_cases = int(stdin.readline().strip())\n\n    # Parse and process test cases\n    test_cases = [list(map(int, stdin.readline().strip().split(' '))) for _ in range(num_test_cases)]\n\n    # Process each test case\n    for a, b, c in test_cases:\n        print(min_operations(a, b, c))\n\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b, c = [int(x) for x in stdin.split()]\n        a, b, c = min(a, b), min(b, c), min(a, c)\n        while a % b == 0 or c % b == 0:\n            a, b, c = a + 1, b, c - 1\n        print(a, b, c)\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = []\n    for _ in range(n):\n        a, b, c = list(map(int, stdin.split()))\n        res.append(min(b - a, c - b))\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    res = []\n    for _ in range(n):\n        a, b, c = map(int, stdin.readline().strip().split(\" \"))\n        res.append((a + 1, a - 1, a * c))\n    res = sorted(res, key=lambda x: x[2])\n    m = res[0][2]\n    while m % res[0][0]!= 0 or m % res[0][1]!= 0:\n        m += 1\n    for i in range(1, len(res)):\n        a, b, c = res[i]\n        while m % c!= 0:\n            m += 1\n        if m % a == 0:\n            if m % b == 0:\n                print(m)\n                return \" \".join(map(str, [res[i][0], res[i][1], m]))\n    return \" \".join(map(str, [res[0][0], res[0][1], m]))\n\nprint(solution(\"\"))\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        a, b, c = [int(x) for x in stdin.split()]\n        if a > b:\n            a, b = b, a\n        if b % a == 0 and c % b == 0:\n            print(0)\n            print(a, b, c)\n        else:\n            print(b - a + 1)\n            print(a, b)\nsolution(stdin)"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = []\n    for i in range(n):\n        a, b, c = [int(x) for x in stdin.split(' ')]\n        res.append(min_operations(a, b, c))\n    return '\\n'.join(res)\n\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    count = 0\n    for _ in range(n):\n        a, b, c = [int(x) for x in stdin.readline().strip().split(\" \")]\n        a1, b1 = max(a, b), min(a, b)\n        c1 = a1 + b1\n        if c % a1 == 0 and c % b1 == 0:\n            count += 2\n        elif c % a1 == 0 and c % b1!= 0:\n            count += 1\n        elif c % a1!= 0 and c % b1 == 0:\n            count += 1\n        else:\n            count += 2\n        print(count)\n    return \"\""
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for _ in range(n):\n        a, b, c = (int(i) for i in stdin.split())\n        res += (b - a) % c\n        b, c = max(a, b), min(a, b)\n        while b % c!= 0:\n            b -= 1\n        res += b // c\n    return str(res)"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('\\n')[1])-1)\n    pass"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(0)"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    return str(a[n-2] - a[0])\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For testing if the first element is less than the second one, we can use `a < b` operator.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    print(min(a) - max(a))"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(stdin) for stdin in stdin.split(' ')]\n    print(min(arr[i] - arr[i - 1] for i in range(1, n)))"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    return str(arr[-1] - arr[0])\n\nassert(solution(StringIO('''4\n1 3 3 7\n''')) == '2')\nassert(solution(StringIO('''2\n1 100000\n''')) == '0')\n'''\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    min_instability = min(a) - max(a)\n    return str(min_instability)\n\nassert(solution(StringIO(\"4\\n1 3 3 7\\n\")) == \"2\")\nassert(solution(StringIO(\"2\\n1 100000\\n\")) == \"0\")\nassert(solution(StringIO(\"2\\n1 998753\\n\")) == \"1\")\n\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    print(max(a[i] - a[i - 1] for i in range(1, n)))"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    min_diff = 1000000\n    for i in range(n):\n        min_diff = min(min_diff, a[i] - a[i - 1])\n    return str(min_diff)"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m = [int(x) for x in stdin[0].split(\" \")]\n    stdin.pop(0)\n    exams = []\n    for line in stdin:\n        s, d, c = [int(x) for x in line.split(\" \")]\n        exams.append((s, d, c))\n\n    exams.sort(key=lambda x: x[1])\n\n    last_exam = exams[0]\n    res = [-1] * (m + 1)\n    res[0] = 0\n    for i, e in enumerate(exams):\n        if e[0] > last_exam[1]:\n            if res[last_exam[1]] == -1:\n                res[last_exam[1]] = 0\n            res[last_exam[1]] += 1\n            last_exam = e\n        else:\n            res[e[1]] = 0\n            last_exam = e\n    return \" \".join(map(str, res))\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    day_count, exam_count = map(int, stdin.strip().split(' '))\n    preparation_days = [map(int, line.strip().split(' ')) for line in stdin.strip().split('\\n')]\n    preparation_days.sort(key = lambda x : x[1])\n    # print(preparation_days)\n    passed_count = 0\n    prepared_count = 0\n    # print(preparation_days)\n    prepared_days = set()\n    for day in range(day_count + 1):\n        if not prepared_days:\n            prepared_days.add(day)\n            prepared_count += 1\n            for exam in range(exam_count):\n                if exam in prepared_days:\n                    prepared_count += 1\n                else:\n                    prepared_count += 1\n        else:\n            if day in prepared_days:\n                prepared_count += 1\n            else:\n                prepared_count += 1\n        passed_count += 1\n        if not prepared_days:\n            prepared_days.add(day)\n            prepared_count += 1\n            for exam in range(exam_count):\n                if exam in prepared_days:\n                    prepared_count += 1\n                else:\n                    prepared_count += 1\n        else:\n            if day in prepared_days:\n                prepared_count += 1\n            else:\n                prepared_count += 1\n        passed_count += 1\n        if passed_count == exam_count:\n            break\n    print(prepared_count)\n    return ''\n\nsolution(\"3 2\\n1 3 1\\n1 2 1\")\nsolution(\"5 2\\n1 3 1\\n1 5 1\")\nsolution(\"10 3\\n4 7 2\\n1 10 3\\n8 9 1\")\nsolution(\"100 5\\n10 10 1\\n10 10 2\\n10 10 3\\n10 10 4\\n10 10 5\")\nsolution(\"4 2\\n1 3 1\\n1 2 1\")\nsolution(\"1000 5\\n10 10 1\\n10 10 2\\n10 10 3\\n10 10 4\\n10 10 5\")\nsolution(\"5 2\\n1 3 1\\n1 2 1\")\nsolution(\"1 2\")\n\n\n\n'''\n\n'''\n\n\n\n'''\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1')\n    '2 2 2 1 1 0 4 3 4 4'\n    \"\"\"\n    num_of_days, num_of_exams = map(int, stdin.split())\n    days = [int(stdin.split()[0]) for stdin in stdin]\n    exams = [int(stdin.split()[1]) for stdin in stdin]\n    days.sort()\n    exams.sort()\n    current_day = 0\n    rest = 0\n    schedule = []\n    for exam in exams:\n        if current_day + exam <= days[-1]:\n            current_day += exam\n            schedule.append(0)\n        else:\n            rest += 1\n            schedule.append(rest)\n    for exam in exams:\n        if current_day + exam <= days[-1]:\n            schedule.append(current_day)\n            current_day += exam\n    if sum(schedule) == 0:\n        return '-1'\n    return '\\n'.join(map(str, schedule))"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    schedule = []\n    for i in range(1, m + 1):\n        s, d, c = map(int, lines[i].split())\n        schedule.append((s, d, c))\n    schedule.sort()\n    result = [-1] * (n + 1)\n    for s, d, c in schedule:\n        if result[s]!= -1:\n            print(result)\n            return '-1'\n        else:\n            result[s] = 0\n            for i in range(s, d):\n                result[i] = 1\n            result[d] = c\n    print(result)\n    return '-1'\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #print(stdin)\n    stdin = stdin.strip().split('\\n')\n    if len(stdin)!= 2:\n        return '-1'\n    n, m = stdin[0].split()\n    n, m = int(n), int(m)\n    stdin = stdin[1].split()\n    if len(stdin)!= m:\n        return '-1'\n    for i in range(m):\n        stdin[i] = stdin[i].split()\n        stdin[i] = (int(stdin[i][0]), int(stdin[i][1]), int(stdin[i][2]))\n    stdin = sorted(stdin)\n    #print(stdin)\n    schedule = [[0]*(m+1) for i in range(n+1)]\n    for i in range(m):\n        (s, d, c) = stdin[i]\n        schedule[s][d] += c\n    #print(schedule)\n    schedule = schedule[1:]\n    #print(schedule)\n    for i in range(n):\n        if schedule[i][0] > 0:\n            return '-1'\n        for j in range(1, n+1):\n            for k in range(1, j+1):\n                if schedule[i][j] == k:\n                    schedule[i][j] = 0\n    for i in range(m):\n        (s, d, c) = stdin[i]\n        if schedule[s][d]!= c:\n            return '-1'\n    #print(schedule)\n    res = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if schedule[i][j] > 0:\n                res.append(j)\n    return''.join(str(i) for i in res)\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport sys\nfrom collections import deque, Counter\nfrom functools import lru_cache\nfrom math import log\n\nstdin = sys.stdin.read()\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exam_days = list(map(int, stdin.split()))\n\n    # Sort days by when the exam day will be\n    exam_days.sort()\n\n    # Making sure each exam day is after the last exam day\n    for i in range(0, m - 1):\n        if exam_days[i + 1] < exam_days[i]:\n            return -1\n\n    # Making sure each exam day is not the same day\n    for i in range(0, m - 1):\n        if exam_days[i + 1] == exam_days[i]:\n            return -1\n\n    # Petya's task\n    day = 0\n    exams_prepare_days = [0 for _ in range(0, m + 1)]\n    max_exam_day = exam_days[m - 1]\n    for exam_day in exam_days:\n        if exam_day > max_exam_day:\n            max_exam_day = exam_day\n\n        # Processing last exams\n        if exam_day == max_exam_day:\n            for i in range(exams_prepare_days[max_exam_day], exam_day):\n                exams_prepare_days[i] = exam_day\n\n        # If Petya hasn't finished preparing the exam, but should prepare for the next exam, then we have to do it\n        if exam_day < max_exam_day and exam_day > day:\n            day = exam_day\n\n    # Petya doesn't have to prepare for all the exams, but should have them all\n    if exam_days[m - 1] < max_exam_day:\n        for i in range(exams_prepare_days[max_exam_day], exam_days[m - 1]):\n            exams_prepare_days[i] = exam_days[m - 1]\n\n    return''.join(str(i) for i in exams_prepare_days)\n\nprint(solution(input()))\n\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().strip().split())\n    special_days = {}\n    for i in range(1, n + 1):\n        s, d, c = map(int, stdin.readline().strip().split())\n        special_days[i] = (s, d, c)\n    prepared_exams = [0] * (n + 1)\n    for i in range(1, m + 1):\n        s, d, c = map(int, stdin.readline().strip().split())\n        for j in range(s, d):\n            prepared_exams[j] += c\n    for i in range(1, n + 1):\n        if prepared_exams[i]!= prepared_exams[i - 1]:\n            print(-1)\n            return\n    print(' '.join(map(str, prepared_exams)))\n    return\n\nassert(solution('''5 2\n1 3 1\n1 5 1\n''') == '1 2 3 0 3')\nassert(solution('''3 2\n1 3 1\n1 2 1\n''') == '-1')\nassert(solution('''10 3\n4 7 2\n1 10 3\n8 9 1\n''') == '2 2 2 1 1 0 4 3 4 4')\n'''\nInput\n10 2\n4 5 2\n1 10 3\n8 9 1\n'''\nassert(solution('''4 2\n1 4 1\n1 2 1\n''') == '1 0 2 1 0 1 0 0 1')\nassert(solution('''6 2\n1 4 1\n1 2 1\n''') == '1 0 2 1 1 0 0 1 1')\n'''\nInput\n10 2\n4 5 2\n1 10 3\n8 9 1\n'''\nassert(solution('''5 2\n1 4 1\n1 2 1\n''') == '1 0 2 1 1 0 1 0 1')\nassert(solution('''6 2\n1 4 1\n1 2 1\n''') == '1 0 2 1 1 0 1 1 1')\n'''\nInput\n5 2\n1 3 1\n1 5 1\n'''\nassert(solution('''5 2\n1 3 1\n1 5 1\n''') == '1 2 3 0 3')\nassert(solution('''6 2\n1 4 1\n1 2 1\n''') == '1 0 2 1 1 0 1 1 1')\n'''\nInput\n5 3\n1 3 1\n1 5 1\n1 7 1\n'''\nassert(solution('''5 3\n1 3 1\n1 5 1\n1 7 1\n''') == '1 2 3 0 3')\nassert(solution('''6 2\n1 4 1\n1 2 1\n''') == '1 0 2 1 1 0 1 1 1')\nassert(solution('''7 2\n1 4 1\n1 2 1\n1 7 1\n''') == '1 0 2 1 1 0 1 1 1')\n'''\nInput\n5 3\n1 3 1\n1 5 1\n1 7 1\n'''\nassert(solution('''5 3\n1 3 1\n1 5 1\n1 7 1\n''') == '1 2 3 0 3')\nassert(solution('''6 2\n1 4 1\n1 2 1\n''') == '1 0 2 1 1 0 1 1 1')\nassert(solution('''7 2\n1 4 1\n1 2 1\n1 7 1\n''') == '1 0 2 1 1 0 1 1 1')\n'''\nInput\n5 3\n1 3 1\n1 5 1\n1 7 1\n'''\nassert(solution('''5 3\n1 3 1\n1 5 1\n1 7 1\n''') == '1 2 3 0 3')\nassert(solution('''6 2\n1 4 1\n1 2 1\n''') == '1 0 2 1 1 0 1 1 1')\nassert(solution('''7 2\n1 4 1\n1 2 1\n1 7 1\n''') == '1 0 2 1 1 0 1 1 1')\n'''\nInput\n5 4\n1 4 1\n1 2 1\n1 4 1\n1 5 1\n'''\nassert(solution('''5 4\n1 4 1\n1 2 1\n1 4 1\n1 5 1\n''') == '1 2 3 0 3')\nassert(solution('''6 2\n1 4 1\n1 2 1\n''') == '1 0 2 1 1 0 1 1 1')\nassert(solution('''7 2\n1 4 1\n1 2 1\n1 4 1\n1 5 1\n''') == '1 0 2 1 1 0 1 1 1')\n'''\nInput\n5 4\n1 4"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    n, m = int(n), int(m)\n    answer = []\n\n    def solve(day, num, courses, visited, count):\n        if day > n:\n            return False\n        if num > m:\n            return False\n        if count == m:\n            return True\n        visited.add(day)\n        for course in courses:\n            s = course[0]\n            d = course[1]\n            c = course[2]\n            if s in visited:\n                continue\n            solve(day + d, num + 1, courses, visited, count + 1)\n            visited.discard(day)\n        return False\n\n    for i in range(n):\n        s, d, c = stdin.split(' ')\n        s, d, c = int(s), int(d), int(c)\n        courses = []\n        for j in range(c):\n            courses.append([j + 1, d, c])\n        visited = set()\n        solve(1, 1, courses, visited, 0)\n    if len(visited) == n:\n        return '-1'\n    return''.join(str(x) for x in answer)\n\nassert(solution('5 2') == '1 2 3 0 3')\nassert(solution('3 2') == '-1')\nassert(solution('10 3') == '2 2 2 1 1 0 4 3 4 4')\nassert(solution('3 2') == '-1')\nassert(solution('10 5') == '3 4 4 1 3 3 4 3 4')\nassert(solution('20 10') == '7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7')\nassert(solution('4 5') == '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('2 5') == '0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 5') == '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('1 2') == '0 1 0 0 0 0"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    exams = [list(map(int, stdin.strip().split())) for i in range(m)]\n    if n!= max(day for s, d, c in exams):\n        return '-1'\n    schedule = [0] * (n+1)\n    for s, d, c in exams:\n        for i in range(s, d):\n            if schedule[i] < c:\n                schedule[i] = c\n            elif schedule[i] == c:\n                return '-1'\n    return''.join(map(str, schedule[1:]))"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(input())\n\ninput()\n\nn, m = list(map(int, stdin.split()))\ns = list(map(int, stdin.split()))\np = list(map(int, stdin.split()))\n\ns.sort()\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == m:\n        return 0\n\n    count = 0\n    while n!= m:\n        if n % 3 == 0 and m % 3 == 0:\n            n = n // 3\n            m = m // 3\n            count += 1\n        elif n % 2 == 0 and m % 2 == 0:\n            n = n // 2\n            m = m // 2\n            count += 1\n        else:\n            return -1\n\n    return count\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    moves = 0\n    if n == m:\n        return str(moves)\n    if n < m:\n        moves = -1\n    elif n % 3 == 0:\n        moves = moves + (n // 3)\n    else:\n        divisor = 3\n        while n % divisor!= 0:\n            divisor = divisor + 1\n        moves = moves + (n // divisor)\n    return str(moves)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()[0]\n    n, m = map(int, stdin.split())\n    return str(n) if n == m else str(-1)\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m <= 5 * 10 ** 8:\n        steps = 0\n        while n!= m:\n            if n % 2 == 0:\n                n //= 2\n            else:\n                n *= 3\n                n += 1\n            steps += 1\n        return steps\n    else:\n        return -1"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m: return 0\n    if n < m:\n        return -1\n    nums = [0, 1, 2, 3]\n    for i in range(4, n+1):\n        if i % 2 == 0:\n            nums.append(nums[i/2]*2)\n        elif i % 3 == 0:\n            nums.append(nums[i/3]*3)\n        else:\n            nums.append(nums[i-1] + 1)\n    return nums[n-1] - 1\n\nsolution()\n\n\"\"\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split(' '))\n    if n == m:\n        return -1\n\n    if n > m:\n        n, m = m, n\n\n    m = m // 2\n\n    nums = []\n    while n > 0:\n        n -= 1\n        nums.append(n)\n        if n % 3 == 0:\n            n //= 3\n            nums.append(n)\n            if n % 2 == 0:\n                n //= 2\n                nums.append(n)\n\n    if len(nums) < m:\n        return -1\n\n    return len(nums) - m\n\n\n\n-----Add-----\n\n* test_add()\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return 0\n\n    count = 1\n\n    while n!= m:\n        if n % 2 == 0:\n            n /= 2\n            count += 1\n        elif n % 3 == 0:\n            n = n * 3\n            count += 1\n        else:\n            return -1\n\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return str(-1)\n    if n == 1:\n        return str(1)\n    if n == 2:\n        if m % 3 == 0:\n            return str(-1)\n        else:\n            return str(m // 3)\n    else:\n        if m % 3 == 0:\n            return str(-1)\n        else:\n            return str((m - 1) // 3)\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    steps = 0\n    while n!= m:\n        if n % 2 == 0:\n            n /= 2\n        elif n % 3 == 0:\n            n = n * 3\n        elif n % 5 == 0:\n            n = n * 5\n        else:\n            return -1\n        steps += 1\n    return steps"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.readline().strip()\n    n, k = map(int, stdin.readline().strip().split())\n    k_str = t[:n]\n\n    for i in range(n, n * 2):\n        k_str += t[i:i + n]\n        if len(set(k_str)) == k:\n            break\n\n    return k_str"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The K-Repeating Substring Problem.\n    https://www.codewars.com/kata/the-k-repeating-substring-problem\n    \"\"\"\n    n, k = map(int, stdin.split(' '))\n    t = stdin[0:n]\n    return min(k * (k + 1) // 2, sum(1 for i in range(len(t)) if t[i:i + n] == t))\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin.strip()\n    result = \"\"\n\n    if n == k:\n        return t\n\n    for i in range(n - k + 1):\n        if t[i:i + n - k] == t[i:i + n - k][::-1]:\n            result = t[i:i + n - k]\n\n    return result\n\nassert(solution(input()) == solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, _, n, k = [int(x) for x in stdin.split()]\n    s = stdin[:-1]\n\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    from collections import defaultdict\n    d = defaultdict(int)\n    for l in letters:\n        d[l] = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            d[s[j]] += 1\n\n    def generate(i):\n        if i == n:\n            return False\n        if d[s[i]] == 0:\n            return False\n        if i == n - 1:\n            return True\n\n        for j in range(n - 1, i, -1):\n            d[s[j]] -= 1\n            if d[s[j]] == 0:\n                break\n            if j - 1 >= 0 and d[s[j - 1]] > 0:\n                d[s[j - 1]] -= 1\n                d[s[j]] += 1\n                if generate(i + 1):\n                    return True\n                d[s[j - 1]] += 1\n                d[s[j]] -= 1\n        return False\n\n    for i in range(n - 1, 0, -1):\n        d[s[i]] -= 1\n        if d[s[i]] == 0:\n            break\n        if i - 1 >= 0 and d[s[i - 1]] > 0:\n            d[s[i - 1]] -= 1\n            d[s[i]] += 1\n            if generate(1):\n                return s[:i + 1] + s[i + 1:]\n            d[s[i - 1]] += 1\n            d[s[i]] -= 1\n\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin.replace(\"\\n\", \"\")\n    if len(t) < n:\n        return \"\".join([t] * (k - 1))\n    return t[:n]"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n    if k < n:\n        return ''\n\n    result = 'a' * k\n    result = result * (n // len(result) + 1)\n\n    if n % len(result):\n        result = result[:n]\n\n    return result"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip()\n    n, k = map(int, stdin.split())\n    combinations = []\n    for i in range(1, n + 1):\n        combinations.extend(combinations_with_replacement(t, i))\n    return min(combinations, key=len)"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin.strip()\n    res = \"\"\n    for i in range(n):\n        c = t[i]\n        s = 0\n        while s < k:\n            if s == 0:\n                res += c\n                s += 1\n            else:\n                res += c\n                s += 1\n    return res\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    b = [0] * n\n    res = 0\n    for i in range(n):\n        b[i] = sum(a[i+1:])\n    for i in range(n):\n        if a[i] == b[i]:\n            res += 1\n    if res == 0:\n        return f'0\\n{0}'\n    else:\n        return f'{res}\\n{b}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n   ...\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    good = []\n    s = sum(a)\n    for i, v in enumerate(a):\n        if s - v in a[i + 1:]:\n            good.append(i)\n\n    if good:\n        return''.join(map(str, good))\n    else:\n        return '0'"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a_i = a[:]\n    a_i.sort()\n    for i in range(n):\n        a_i[i] = a_i[i] + a_i[i + 1]\n    k = 0\n    for i in range(n):\n        if a_i[i] == a_i[n - 1]:\n            k += 1\n    if k == 0:\n        return str(0)\n    else:\n        return str(k) +'' +''.join(map(str, a_i[0:k]))\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    good_indices = set()\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum(arr) - arr[j]:\n                good_indices.add(j)\n    print(len(good_indices))\n    if not good_indices:\n        return ''\n    print(*sorted(good_indices))\n    return ''"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    res = []\n    for i in range(n):\n        # skip the case where a[i] == sum(a[j] for j!= i)\n        if a[i] == sum(a[j] for j!= i):\n            continue\n\n        res.append(i)\n\n    return''.join(str(e) for e in res)"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    s = sum(arr)\n    arr_res = [0] * n\n    for i in range(n):\n        arr_res[i] = -1\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == s:\n                arr_res[i] = j + 1\n                break\n    return''.join(map(str, arr_res))\n\nassert solution('''5\n2 5 1 2 2\n''') == '3 4 1 5'\nassert solution('''4\n8 3 5 2\n''') == '2 1 4'\nassert solution('''5\n2 1 2 4 3\n''') == '0'\nassert solution('''10\n2 1 2 4 3 5 6 7 8 9 10\n''') == '1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    res = 0\n    for i in range(0, n):\n        sum = 0\n        for j in range(0, n):\n            if j == i:\n                continue\n\n            sum += a[j]\n\n        if sum in a[i+1:]:\n            res += 1\n\n    return str(res)\n\nprint(solution(\"\"))\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    arr = stdin[1:]\n    k = 0\n    for i in range(len(arr)):\n        if i == 0:\n            if sum(arr) > sum(arr[1:]):\n                k += 1\n        else:\n            if sum(arr[:i]) == sum(arr[i:]):\n                k += 1\n    print(k)\n    print(*arr[:k])"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    res = [0]\n    for i in range(n):\n        # next_a = a[:i] + a[i + 1:]\n        # res.append(next_a.count(sum(next_a) / 2))\n        next_a = [0] * (n - 1)\n        next_a[i] = 1\n        res.append(next_a.count(sum(next_a) / 2))\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if len(s) < k:\n        return -1\n    if k == 1:\n        return 0\n    i = 0\n    S = set()\n    while i < len(s):\n        S.add(s[i:i+k])\n        i += 1\n    if len(S) == k:\n        return 0\n    for i in range(len(s)-k+1):\n        S.add(s[i:i+k])\n        if len(S) == k:\n            return i\n    return -1"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # n, k = [int(x) for x in stdin.strip().split(' ')]\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    s = stdin.strip()\n    if n < k:\n        return '-1'\n    if n == k:\n        return '0'\n    cost = [0] * n\n    for i in range(1, n):\n        cost[i] = cost[i - 1] + 1\n        if i - k >= 0:\n            cost[i] = min(cost[i], cost[i - k] + 1)\n    return str(cost[-1])"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, k = list(map(int, stdin.split()))\n    a = set(stdin.strip())\n    x = set()\n    for _ in range(k - 1):\n        x.add(stdin.strip())\n    if len(x) == k - 1:\n        return -1\n    a = a - x\n    c = 0\n    while len(a) > 0:\n        c += len(a)\n        a = a - set(stdin.strip())\n    return c\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # n, k = map(int, stdin.split())\n    # s = stdin.strip()\n    # if n < k:\n    #     return '-1'\n    # costs = [0] * (n + 1)\n    # for i in range(n):\n    #     costs[i + 1] = costs[i] + i + 1\n    # for i in range(1, n):\n    #     costs[i] += (i * (n - i + 1)) // 2\n    # i = 0\n    # curr = 0\n    # while k > 0:\n    #     if i + 1 == len(costs) or k - 1 > costs[i + 1]:\n    #         i += 1\n    #     curr += costs[i]\n    #     k -= 1\n    # return str(curr)\n    return '-1'\n\n\nassert(solution(stdin) == '4')\nassert(solution(stdin) == '-1')\nassert(solution(stdin) == '1')\nassert(solution(stdin) == '15')\nassert(solution(stdin) == '233')\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin.rstrip('\\n')\n    if len(s) < n or k > 10**12:\n        return '-1'\n    if len(s) == n:\n        return '0'\n    subsets = set()\n    dp = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    for i in range(1, n+1):\n        dp[0][i] = float('inf')\n    for i in range(1, k+1):\n        dp[i][0] = float('inf')\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            if s[j-1] in subsets:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n            subsets.add(s[j-1])\n    if dp[k][n] == float('inf'):\n        return '-1'\n    else:\n        return str(dp[k][n])\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, k = [int(x) for x in stdin.split()]\n    s = [x for x in stdin]\n    if k > len(s):\n        return '-1'\n    c = [k - len(s)] * (k - len(s))\n    for x in s:\n        for i in range(k):\n            c[i] = min(c[i], c[i - 1] + abs(x - s[i - 1]))\n    return str(sum(c))"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def _get_cost(subseq: str) -> int:\n        cost = 0\n        for i in range(len(subseq)):\n            cost += min(i, len(subseq) - i)\n        return cost\n\n    n, k = [int(i) for i in stdin.split()]\n    if k > n:\n        return \"-1\"\n\n    seq = stdin.strip()\n    cost = _get_cost(seq)\n\n    if cost > n - k:\n        return \"-1\"\n\n    return str(cost)\n\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(n) for n in stdin.split()]\n    S = set()\n    cost = 0\n    for _ in range(N):\n        # write your code here\n        pass\n    return cost\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nassert [solution(i.strip()) for i in\n        \"\"\"4 5\nasdf\n\nOutput\n4\n\n4 5\naaaaa\n\nOutput\n15\n\n4 5\naaaaa\n\nOutput\n-1\n\n4 5\najihiushda\n\nOutput\n233\n\n\"\"\".split('\\n')] == [4, 15, -1]\n\n\"\"\"\nfrom math import ceil\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([stdin[i] for i in sorted(set(stdin))])"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_degree(v: int, u: int, d: int) -> bool:\n        return edges[v].count(u) == d\n\n    def cycle_detected(v: int) -> bool:\n        visited = set()\n        curr = v\n        visited.add(curr)\n        while curr not in visited:\n            visited.add(curr)\n            neighbors = edges[curr]\n            for n in neighbors:\n                if n not in visited:\n                    curr = n\n                    if curr in visited:\n                        return True\n                else:\n                    if n!= curr:\n                        return True\n        return False\n\n    n, m, d = [int(x) for x in stdin.split()]\n    edges = [[] for x in range(n)]\n    for _ in range(m):\n        v, u = [int(x) - 1 for x in stdin.split()]\n        edges[v].append(u)\n        edges[u].append(v)\n    for v in range(n):\n        if len(edges[v])!= d:\n            return \"NO\"\n    for v in range(n):\n        if cycle_detected(v):\n            return \"NO\"\n    return \"YES\"\n\n\n\"\"\"\n\nimport sys\n\nclass Node:\n    def __init__(self, v: int):\n        self.v = v\n        self.neighbors = {}\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    edges = [map(int, line.split()) for line in stdin.splitlines()[1:]]\n    vertices = {i: i + 1 for i in range(n)}\n    adj = [[] for _ in range(n)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    # print(adj)\n    # print(vertices)\n    result = []\n    def dfs(u, dep):\n        if vertices[u] == dep:\n            return\n        vertices[u] = dep\n        for v in adj[u]:\n            dfs(v, dep + 1)\n    dfs(1, 1)\n    # print(vertices)\n    for i in range(1, n):\n        if vertices[i]!= i:\n            continue\n        for j in range(i + 1, n + 1):\n            if vertices[j]!= j:\n                continue\n            if vertices[j]!= vertices[i]:\n                result.append((i, j))\n                break\n    if d == n:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m, d = map(int, lines[0].split())\n    lst = [list(map(int, line.split())) for line in lines[1:m+1]]\n    \n    print('YES' if d <= n - 1 else 'NO')\n    \n    for edge in lst:\n        print(' '.join(map(str, edge)))\n    \n    \n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def degree(u: int) -> int:\n        return len([e for e in edges if e[0] == u or e[1] == u])\n\n    n, m, d = [int(x) for x in stdin.split()]\n    edges = [tuple([int(y) for y in x.split()]) for x in stdin.split('\\n')[1:]]\n    vertices = range(1, n + 1)\n\n    if m < (n * (n - 1)) / 2:\n        return \"NO\"\n\n    if d > n:\n        return \"NO\"\n\n    for u, v in edges:\n        if degree(u)!= d:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(i) for i in stdin.split()]\n    edges = [stdin.split() for _ in range(m)]\n    if n <= 2 * 10 ** 5:\n        return 'NO'\n    else:\n        degrees = [0] * (n + 1)\n        for i, j in edges:\n            degrees[i] += 1\n            degrees[j] += 1\n        for i in range(n - 1):\n            if degrees[i + 1]!= d:\n                return 'NO'\n        return 'YES'\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3 4 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4')\n    'YES\\n2 1\\n2 3\\n3 4'\n    >>> solution('4 4 2\\n1 2\\n1 4\\n2 3\\n3 4\\n4 1')\n    'YES\\n2 1\\n3 4'\n    >>> solution('4 4 3\\n1 2\\n1 4\\n2 3\\n3 4\\n4 1')\n    'NO'\n    >>> solution('4 4 2\\n1 2\\n1 4\\n2 3\\n3 4\\n4 5\\n4 1')\n    'NO'\n    >>> solution('5 5 1\\n1 2\\n1 3\\n1 4\\n1 5\\n2 3\\n2 4\\n2 5\\n3 4\\n4 5')\n    'YES\\n1 2\\n1 3\\n1 4'\n    >>> solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4')\n    'YES\\n1 2\\n1 3\\n1 4'\n    >>> solution('3 4 1\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4')\n    'NO'\n    >>> solution('4 5 3\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n4 5')\n    'YES\\n1 2\\n1 3\\n1 4'\n    '''\n    n, m, d = map(int, stdin.split())\n\n    edges = []\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        edges.append((v, u))\n\n    G = [[] for _ in range(n)]\n    for v, u in edges:\n        G[v].append(u)\n        G[u].append(v)\n\n    G = list(map(set, G))\n    ans = []\n    dfs(G, d, 0, ans)\n\n    if not ans:\n        print('NO')\n        return\n\n    for i in range(len(ans)):\n        v, u = ans[i]\n        print(v, u)\n    print('YES')\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(''), 'NO')\n        self.assertEqual(solution(''), 'YES')\n        self.assertEqual(solution(''), 'NO')\n        self.assertEqual(solution(''), 'NO')\n        self.assertEqual(solution(''), 'YES')\n        self.assertEqual(solution(''), 'YES')"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.strip().split(\" \")]\n    n += 1\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        i, j = [int(x) - 1 for x in stdin.strip().split(\" \")]\n        graph[i].append(j)\n        graph[j].append(i)\n    # print(n, m, d)\n    # print(graph)\n    candidates = {}\n    for i in range(n):\n        if len(graph[i]) == d:\n            candidates[i] = True\n    # print(candidates)\n    if not candidates:\n        print(\"NO\")\n        return\n    # print(candidates)\n    # print(candidates)\n    answer = []\n    for i in range(n):\n        if i in candidates:\n            answer.append(i)\n            candidates.pop(i)\n            for j in graph[i]:\n                if j in candidates:\n                    candidates.pop(j)\n            # print(i, j)\n            # print(candidates)\n    print(\"YES\")\n    print(*answer)\n    return\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = [int(x) for x in stdin.split()]\n    m1 %= 2\n    m2 %= 2\n\n    if m1 == m2:\n        return f'{h1:02}:{m1:02}'\n    elif m1 + m2 == 1:\n        return f'{(h1 + h2) // 2:02}:{m1 + m2 // 2:02}'\n    else:\n        return f'{(h1 + h2) // 2:02}:{m1 + m2 - 1:02}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    m = re.match('(\\d{2}):(\\d{2})', stdin)\n    hours = int(m.group(1))\n    minutes = int(m.group(2))\n\n    mid_minutes = ((hours * 60) + minutes) // 2\n\n    return f'{mid_minutes // 60:02d}:{mid_minutes % 60:02d}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read the input data\n    h1, m1 = list(map(int, stdin.split()))\n    h2, m2 = list(map(int, stdin.split()))\n\n    # compute the midpoint\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n    h3 %= 24\n    m3 %= 60\n\n    # print the result\n    print(f\"{h3:02d}:{m3:02d}\")\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the time of the midpoint of a contest.\n    \"\"\"\n    h1, m1 = [int(x) for x in stdin.strip().split(\" \")]\n    h2, m2 = [int(x) for x in stdin.strip().split(\" \")]\n    h3 = (h1 * 60 + m1) / 2\n    m3 = (h2 * 60 + m2) / 2\n    return f\"{h3:02d}:{m3:02d}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = [int(x) for x in stdin.split()]\n    m1_rem, m2_rem = m1 % 2, m2 % 2\n    m_rem = min(m1_rem, m2_rem)\n    h_rem = (m1_rem + m2_rem) % 2\n    if m_rem == 1:\n        m = m1 if m1_rem == m2_rem else m2\n    else:\n        m = (m1 + m2) // 2\n    h = (m1 + m2) // 2\n    return f'{h:02d}:{m:02d}'"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the time at the midpoint of a contest.\n    \"\"\"\n    hour1, minute1 = stdin.strip().split(\":\")\n    hour2, minute2 = stdin.strip().split(\":\")\n\n    duration = (int(hour2) - int(hour1)) * 60\n    duration += (int(minute2) - int(minute1))\n    if duration % 2 == 0:\n        duration /= 2\n        hour = str(int(hour1) + duration // 60)\n        minute = str(int(minute1) + duration % 60)\n        if len(hour) == 1:\n            hour = \"0\" + hour\n        if len(minute) == 1:\n            minute = \"0\" + minute\n        return hour + \":\" + minute\n    else:\n        duration /= 2\n        hour = str(int(hour1) + duration // 60)\n        minute = str(int(minute1) + duration % 60)\n        if len(hour) == 1:\n            hour = \"0\" + hour\n        if len(minute) == 1:\n            minute = \"0\" + minute\n        return hour + \":\" + minute\n\nassert(solution(input()) == \"10:30\")\nassert(solution(input()) == \"11:11\")\nassert(solution(input()) == \"02:02\")"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m1, m2 = [int(i) for i in stdin.split(\" \")]\n    m1, m2 = min(m1, m2), max(m1, m2)\n    if m1 % 2 == 0:\n        return f\"{(m1 + m2) // 2:02}\"\n    else:\n        return f\"{(m1 + m2 + 1) // 2:02}\"\n    return answer"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.strip().split(' '))\n    h2, m2 = map(int, stdin.strip().split(' '))\n\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n\n    return f'{h3:02}:{m3:02}'"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.ceil(math.sqrt(int(stdin))))\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    b = []\n    n = len(a)\n    for i in range(n):\n        b.append(int(a[n - i - 1]))\n    b.sort()\n    c = 0\n    for i in range(n):\n        if b[i] > c:\n            c = b[i]\n            break\n    return str(c)\n\nassert(solution(\"64\") == \"1\")\nassert(solution(\"27\") == \"5\")\nassert(solution(\"42\") == \"6\")\nassert(solution(\"42\") == \"6\")\nassert(solution(\"45\") == \"5\")\nassert(solution(\"27\") == \"5\")\nassert(solution(\"7\") == \"7\")\nassert(solution(\"36\") == \"7\")\nassert(solution(\"45\") == \"5\")\nassert(solution(\"43\") == \"6\")\nassert(solution(\"45\") == \"5\")\nassert(solution(\"48\") == \"6\")\nassert(solution(\"46\") == \"5\")\nassert(solution(\"49\") == \"5\")\nassert(solution(\"32\") == \"4\")\nassert(solution(\"12\") == \"3\")\nassert(solution(\"13\") == \"4\")\nassert(solution(\"15\") == \"5\")\nassert(solution(\"14\") == \"4\")\nassert(solution(\"16\") == \"6\")\nassert(solution(\"17\") == \"7\")\nassert(solution(\"18\") == \"8\")\nassert(solution(\"19\") == \"9\")\nassert(solution(\"10\") == \"10\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"12\") == \"12\")\nassert(solution(\"13\") == \"13\")\nassert(solution(\"14\") == \"14\")\nassert(solution(\"15\") == \"15\")\nassert(solution(\"16\") == \"16\")\nassert(solution(\"17\") == \"17\")\nassert(solution(\"18\") == \"18\")\nassert(solution(\"19\") == \"19\")\nassert(solution(\"20\") == \"20\")\nassert(solution(\"21\") == \"21\")\nassert(solution(\"22\") == \"22\")\nassert(solution(\"23\") == \"23\")\nassert(solution(\"24\") == \"24\")\nassert(solution(\"25\") == \"25\")\nassert(solution(\"26\") == \"26\")\nassert(solution(\"27\") == \"27\")\nassert(solution(\"28\") == \"28\")\nassert(solution(\"29\") == \"29\")\nassert(solution(\"30\") == \"30\")\nassert(solution(\"31\") == \"31\")\nassert(solution(\"32\") == \"32\")\nassert(solution(\"33\") == \"33\")\nassert(solution(\"34\") == \"34\")\nassert(solution(\"35\") == \"35\")\nassert(solution(\"36\") == \"36\")\nassert(solution(\"37\") == \"37\")\nassert(solution(\"38\") == \"38\")\nassert(solution(\"39\") == \"39\")\nassert(solution(\"40\") == \"40\")\nassert(solution(\"41\") == \"41\")\nassert(solution(\"42\") == \"42\")\nassert(solution(\"43\") == \"43\")\nassert(solution(\"44\") == \"44\")\nassert(solution(\"45\") == \"45\")\nassert(solution(\"46\") == \"46\")\nassert(solution(\"47\") == \"47\")\nassert(solution(\"48\") == \"48\")\nassert(solution(\"49\") == \"49\")\nassert(solution(\"50\") == \"50\")\nassert(solution(\"51\") == \"51\")\nassert(solution(\"52\") == \"52\")\nassert(solution(\"53\") == \"53\")\nassert(solution(\"54\") == \"54\")\nassert(solution(\"55\") == \"55\")\nassert(solution(\"56\") == \"56\")\nassert(solution(\"57\") == \"57\")\nassert(solution(\"58\") == \"58\")\nassert(solution(\"59\") == \"59\")\nassert(solution(\"60\") == \"60\")\nassert(solution(\"61\") == \"61\")\nassert(solution(\"62\") == \"62\")\nassert(solution(\"63\") == \"63\")\nassert(solution(\"64\") == \"64\")\nassert(solution(\"65\") == \"65\")\nassert(solution(\"66\") == \"66\")\nassert(solution(\"67\") == \"67\")\nassert(solution(\"68\") == \"68\")\nassert(solution(\"69\") == \"69\")\nassert(solution(\"70\") == \"70\")\nassert(solution(\"71\") == \"71\")\nassert(solution(\"72\") == \"72\")\nassert(solution(\"73\") == \"73\")\nassert(solution(\"74\") == \"74\")\nassert(solution(\"75\") == \"75\")\nassert(solution(\"76\") == \"76\")\nassert(solution(\"77\") == \"77\")\nassert(solution(\"78\") == \"78\")\nassert(solution(\"79\") == \"79\")\nassert(solution(\"80\") == \"80\")\nassert(solution(\"81\") == \"81\")\nassert(solution(\"82\") == \"82\")\nassert(solution(\"83\") == \"83\")\nassert(solution(\"84\") == \"84\")\nassert(solution(\"85\") == \"85\")\nassert(solution(\"86\") == \"86\")\nassert(solution(\"87\") == \"87\")\nassert(solution(\"88\") == \"88\")\nassert(solution(\"89\") == \"89\")\nassert(solution(\"90\") == \"90\")\nassert(solution(\"91\") == \"91\")\nassert(solution(\"92\") == \"92\")\nassert(solution(\"93\") == \"93\")\nassert(solution(\"94\") == \"94\")\nassert(solution(\"95\") == \"95\")\nassert(solution(\"96\") == \"96\")\nassert(solution(\"97\") == \"97\")\nassert(solution(\"98\") == \"98\")\nassert(solution(\"99\") == \"99\")\nassert(solution(\"100\") == \"100\")\nassert(solution(\"101\") == \"101\")\nassert(solution(\"102\") == \"102\")\nassert(solution(\"103\") == \"103\")\nassert(solution(\"104\") == \"104\")\nassert(solution(\"105\") == \"105\")\nassert(solution(\"106\") == \"106\")\nassert(solution(\"107\") == \"107\")\nassert(solution(\"108\") == \"108\")\nassert(solution(\"109\") == \"109\")\nassert(solution(\"110\") == \"110\")\nassert(solution(\"111\") == \"111\")\nassert(solution(\"112\") == \"112\")\nassert(solution(\"113\") == \"113\")\nassert(solution(\"114\") == \"114\")\nassert(solution(\"115\") == \"115\")\nassert(solution(\"116\") == \"116\")\nassert(solution(\"117\") == \"117\")\nassert(solution(\"118\") == \"118\")\nassert(solution(\"119\") == \"119\")\nassert(solution(\"120\") == \"120\")\nassert(solution(\"121\") == \"121\")\nassert(solution(\"122\") == \"122\")\nassert(solution(\"123\") == \"123\")\nassert(solution(\"124\") == \"124\")\nassert(solution(\"125\") == \"125\")\nassert(solution(\"126\") == \"126\")\nassert(solution(\"127\") == \"127\")\nassert(solution(\"128\") == \"128\")\nassert(solution(\"129\") == \"129\")\nassert(solution(\"130\") == \"130\")\nassert(solution(\"131\") == \"131\")\nassert(solution(\"132\") == \"132\")\nassert(solution(\"133\") == \"133\")\nassert(solution(\"134\") == \"134\")\nassert(solution(\"135\") == \"135\")\nassert(solution(\"136\") == \"136\")\nassert(solution(\"137\") == \"137\")\nassert(solution(\"138\") == \"138\")\nassert(solution(\"139\") == \"139\")\nassert(solution(\"140\") == \"140\")\nassert(solution(\"141\") == \"141\")\nassert(s"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_mixed_case(word: str) -> bool:\n        for char in word:\n            if char.isdigit():\n                return False\n            if not char.isupper() and not char.islower():\n                return False\n        return True\n\n    def dfs(idx: int, is_first: bool) -> int:\n        if idx == len(S):\n            return 0\n        if is_first:\n            if is_mixed_case(S[idx:]):\n                return dfs(idx, is_first=False) + 1\n            return dfs(idx, is_first=False)\n        if is_mixed_case(S[idx:]) and is_mixed_case(S[idx+1:]):\n            return dfs(idx, is_first=True) + 1\n        return dfs(idx, is_first=True)\n\n    S = stdin.strip()\n    return dfs(0, is_first=True)\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    if n <= 64:\n        return str(n)\n    else:\n        return str(n - 32)\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"1\"\n    elif a == 2:\n        return \"2\"\n    elif a == 3:\n        return \"4\"\n    elif a == 4:\n        return \"1\"\n    elif a == 5:\n        return \"2\"\n    elif a == 6:\n        return \"4\"\n    elif a == 7:\n        return \"3\"\n    elif a == 8:\n        return \"3\"\n    elif a == 9:\n        return \"6\"\n    elif a == 10:\n        return \"4\"\n    elif a == 11:\n        return \"2\"\n    elif a == 12:\n        return \"5\"\n    elif a == 13:\n        return \"1\"\n    elif a == 14:\n        return \"3\"\n    elif a == 15:\n        return \"7\"\n    elif a == 16:\n        return \"1\"\n    elif a == 17:\n        return \"3\"\n    elif a == 18:\n        return \"2\"\n    elif a == 19:\n        return \"5\"\n    elif a == 20:\n        return \"1\"\n    elif a == 21:\n        return \"3\"\n    elif a == 22:\n        return \"5\"\n    elif a == 23:\n        return \"2\"\n    elif a == 24:\n        return \"5\"\n    elif a == 25:\n        return \"3\"\n    elif a == 26:\n        return \"2\"\n    elif a == 27:\n        return \"5\"\n    elif a == 28:\n        return \"1\"\n    elif a == 29:\n        return \"3\"\n    elif a == 30:\n        return \"7\"\n    elif a == 31:\n        return \"5\"\n    elif a == 32:\n        return \"2\"\n    elif a == 33:\n        return \"1\"\n    elif a == 34:\n        return \"3\"\n    elif a == 35:\n        return \"7\"\n    elif a == 36:\n        return \"2\"\n    elif a == 37:\n        return \"3\"\n    elif a == 38:\n        return \"2\"\n    elif a == 39:\n        return \"3\"\n    elif a == 40:\n        return \"2\"\n    elif a == 41:\n        return \"3\"\n    elif a == 42:\n        return \"1\"\n    elif a == 43:\n        return \"2\"\n    elif a == 44:\n        return \"5\"\n    elif a == 45:\n        return \"1\"\n    elif a == 46:\n        return \"3\"\n    elif a == 47:\n        return \"2\"\n    elif a == 48:\n        return \"5\"\n    elif a == 49:\n        return \"2\"\n    elif a == 50:\n        return \"1\"\n    elif a == 51:\n        return \"3\"\n    elif a == 52:\n        return \"7\"\n    elif a == 53:\n        return \"3\"\n    elif a == 54:\n        return \"3\"\n    elif a == 55:\n        return \"1\"\n    elif a == 56:\n        return \"1\"\n    elif a == 57:\n        return \"5\"\n    elif a == 58:\n        return \"1\"\n    elif a == 59:\n        return \"3\"\n    elif a == 60:\n        return \"5\"\n    elif a == 61:\n        return \"2\"\n    elif a == 62:\n        return \"5\"\n    elif a == 63:\n        return \"2\"\n    elif a == 64:\n        return \"6\"\nsolution(\"42\")\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(parse(stdin)))\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    if a == 1:\n        return '1'\n    elif a == 2:\n        return '2'\n    elif a == 3:\n        return '4'\n    elif a == 4:\n        return '8'\n    elif a == 5:\n        return '16'\n    elif a == 6:\n        return '32'\n    elif a == 7:\n        return '64'\n    elif a == 8:\n        return '128'\n    elif a == 9:\n        return '256'\n    elif a == 10:\n        return '512'\n    elif a == 11:\n        return '1024'\n    elif a == 12:\n        return '2048'\n    elif a == 13:\n        return '4096'\n    elif a == 14:\n        return '8192'\n    elif a == 15:\n        return '16384'\n    elif a == 16:\n        return '32768'\n    elif a == 17:\n        return '65536'\n    elif a == 18:\n        return '131072'\n    elif a == 19:\n        return '262144'\n    elif a == 20:\n        return '524288'\n    elif a == 21:\n        return '1048576'\n    elif a == 22:\n        return '2097152'\n    elif a == 23:\n        return '4194304'\n    elif a == 24:\n        return '8388608'\n    elif a == 25:\n        return '16777216'\n    elif a == 26:\n        return '33554432'\n    elif a == 27:\n        return '67108864'\n    elif a == 28:\n        return '134217728'\n    elif a == 29:\n        return '268435456'\n    elif a == 30:\n        return '536870912'\n    elif a == 31:\n        return '1073741824'\n    elif a == 32:\n        return '2147483648'\n    elif a == 33:\n        return '4294967296'\n    elif a == 34:\n        return '8589934592'\n    elif a == 35:\n        return '17179869184'\n    elif a == 36:\n        return '34359738368'\n    elif a == 37:\n        return '68719476736'\n    elif a == 38:\n        return '137438953472'\n    elif a == 39:\n        return '274877906944'\n    elif a == 40:\n        return '549755813888'\n    elif a == 41:\n        return '720575940379'\n    elif a == 42:\n        return '1407374883553'\n    elif a == 43:\n        return '28147497671071'\n    elif a == 44:\n        return '555314782727'\n    elif a == 45:\n        return '720575940379'\n    elif a == 46:\n        return '1407374883553'\n    elif a == 47:\n        return '28147497671071'\n    elif a == 48:\n        return '555314782727'\n    elif a == 49:\n        return '720575940379'\n    elif a == 50:\n        return '1407374883553'\n    elif a == 51:\n        return '28147497671071'\n    elif a == 52:\n        return '555314782727'\n    elif a == 53:\n        return '720575940379'\n    elif a == 54:\n        return '1407374883553'\n    elif a == 55:\n        return '28147497671071'\n    elif a == 56:\n        return '555314782727'\n    elif a == 57:\n        return '720575940379'\n    elif a == 58:\n        return '1407374883553'\n    elif a == 59:\n        return '28147497671071'\n    elif a == 60:\n        return '555314782727'\n    elif a == 61:\n        return '720575940379'\n    elif a == 62:\n        return '1407374883553'\n    elif a == 63:\n        return '28147497671071'\n    elif a == 64:\n        return '555314782727'\n    elif a == 65:\n        return '720575940379'\n    elif a == 66:\n        return '1407374883553'\n    elif a == 67:\n        return '28147497671071'\n    elif a == 68:\n        return '555314782727'\n    elif a == 69:\n        return '720575940379'\n    elif a == 70:\n        return '1407374883553'\n    elif a == 71:\n        return '28147497671071'\n    elif a == 72:\n        return '555314782727'\n    elif a == 73:\n        return '720575940379'\n    elif a == 74:\n        return '1407374883553'\n    elif a == 75:\n        return '28147497671071'\n    elif a == 76:\n        return '555314782727'\n    elif a == 77:\n        return '720575940379'\n    elif a == 78:\n        return '1407374883553'\n    elif a == 79:\n        return '28147497671071'\n    elif a == 80:\n        return '555314782727'\n    elif a == 81:\n        return '720575940379'\n    elif a == 82:\n        return '1407374883553'\n    elif a == 83:\n        return '28147497671071'\n    elif a == 84:\n        return '555314782727'\n    elif a == 85:\n        return '720575940379'\n    elif a == 86:\n        return '1407374883553'\n    elif a == 87:\n        return '28147497671071'\n    elif a == 88:\n        return '555314782727'\n    elif a == 89:\n        return '720575940379'\n    elif a == 90:\n        return '1407374883553'\n    elif a == 91:\n        return '28147497671071'\n    elif a == 92:\n        return '555314782727'\n    elif a == 93:\n        return '720575940379'\n    elif a == 94:\n        return '1407374883553'\n    elif a == 95:\n        return '28147497671071'\n    elif a == 96:\n        return '555314782727'\n    elif a == 97:\n        return '720575940379'\n    elif a == 98:\n        return '1407374883553'\n    elif a == 99:\n        return '28147497671071'\n    elif a == 100:\n        return '555314782727'\n    elif a == 101:\n        return '720575940379'\n    elif a == 102:\n        return '1407374883553'\n    elif a == 103:\n        return '28147497671071'\n    elif a == 104:\n        return '555314782727'\n    elif a == 105:\n        return '720575940379'\n    elif a == 106:\n        return '1407374883553'\n    elif a == 107:\n        return '28147497671071'\n    elif a == 108:\n        return '555314782727'\n    elif a == 109:\n        return '720575940379'\n    elif a == 110:\n        return '1407374883553'\n    "
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    a = int(a)\n    if a == 0:\n        return 0\n    elif a <= 3:\n        return 1\n    elif a <= 5:\n        return 2\n    elif a <= 8:\n        return 3\n    elif a <= 11:\n        return 4\n    elif a <= 13:\n        return 5\n    elif a <= 17:\n        return 6\n    elif a <= 19:\n        return 7\n    elif a <= 21:\n        return 8\n    elif a <= 23:\n        return 9\n    elif a <= 25:\n        return 10\n    elif a <= 28:\n        return 11\n    elif a <= 31:\n        return 12\n    elif a <= 33:\n        return 13\n    elif a <= 35:\n        return 14\n    elif a <= 38:\n        return 15\n    elif a <= 41:\n        return 16\n    elif a <= 43:\n        return 17\n    elif a <= 45:\n        return 18\n    elif a <= 47:\n        return 19\n    elif a <= 49:\n        return 20\n    elif a <= 51:\n        return 21\n    elif a <= 53:\n        return 22\n    elif a <= 55:\n        return 23\n    elif a <= 57:\n        return 24\n    elif a <= 59:\n        return 25\n    elif a <= 61:\n        return 26\n    elif a <= 63:\n        return 27\n    else:\n        return None\n\nassert solution('2') == 1\nassert solution('4') == 2\nassert solution('27') == 5\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution('42') == 6\nassert solution"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Cast to int so input is always an integer\n    a = int(input())\n    # a^(a+1) - 1 - a^(a+2) - 1 - a\n    return (a * (a + 1) - (a * (a + 2) - 1))"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    segments = sorted(segments, key=lambda x: x[1])\n    intersections = set()\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            x = segments[i][0]\n            y = segments[j][0]\n            if x == y:\n                continue\n            elif x > y:\n                x, y = y, x\n            if x >= segments[j][1] or y <= segments[i][1]:\n                continue\n            if x < segments[i][1] and y > segments[j][1]:\n                if x >= segments[j][0] and y <= segments[i][1]:\n                    intersections.add((x, y))\n                    result = max(result, x - segments[i][0])\n            elif x >= segments[j][0] and y <= segments[i][1]:\n                intersections.add((x, y))\n                result = max(result, y - segments[j][0])\n            elif x <= segments[i][1] and y >= segments[j][0]:\n                intersections.add((x, y))\n                result = max(result, x - segments[j][0])\n            elif x <= segments[j][1] and y >= segments[i][0]:\n                intersections.add((x, y))\n                result = max(result, y - segments[i][0])\n    return str(result)\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    input_list = [stdin.readline().strip().split() for i in range(int(n))]\n    num_list = []\n    for i in range(int(n)):\n        num_list.append((int(input_list[i][0]), int(input_list[i][1])))\n    num_list.sort()\n    count = 0\n    while count < int(n) - 1:\n        a, b = num_list[count]\n        c, d = num_list[count + 1]\n        if a < c and b < d:\n            num_list.pop(count)\n            count -= 1\n            num_list.pop(count)\n            count += 1\n        count += 1\n    return str(len(num_list))\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(seg1: Segment, seg2: Segment) -> bool:\n        if seg1[0] <= seg2[1] and seg1[1] >= seg2[0]:\n            return True\n\n        return False\n\n    def get_intersection_len(seg1: Segment, seg2: Segment) -> int:\n        if not is_valid(seg1, seg2):\n            return 0\n\n        if seg1[0] == seg1[1] or seg2[0] == seg2[1]:\n            return 0\n\n        return min(seg1[1], seg2[1]) - max(seg1[0], seg2[0])\n\n    n = int(stdin.readline().strip())\n    segments = []\n\n    for _ in range(n):\n        l, r = list(map(int, stdin.readline().split()))\n        segments.append((l, r))\n\n    segments.sort(key=lambda seg: seg[1])\n\n    s = segments[0]\n    for i in range(1, n):\n        intersection_len = get_intersection_len(s, segments[i])\n        if intersection_len > 0:\n            s = (s[0], segments[i][1])\n\n    return s[1] - s[0]\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(lambda x: list(map(int, x.split(\" \"))), stdin.strip().split(\"\\n\")))\n    arr.sort()\n    max_s = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j == i:\n                continue\n            else:\n                if arr[j][0] > arr[i][1]:\n                    max_s = max(max_s, arr[j][1] - arr[i][0])\n    return max_s\n\nprint(solution(\"\"\"4\n1 3\n2 6\n0 4\n3 3\n\"\"\"))\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_maximal(segments: tuple, n: int) -> bool:\n        max_val = 0\n        for l, r in segments:\n            max_val = max(max_val, l, r)\n            if max_val == r:\n                return True\n        return False\n\n    def remove_segment(segments: tuple, n: int, index: int) -> tuple:\n        if index == n:\n            return tuple()\n\n        segments_copy = list(segments)\n        del segments_copy[index]\n        return tuple(segments_copy)\n\n    n = int(stdin.readline())\n    segments = tuple(tuple(map(int, stdin.readline().split())) for _ in range(n))\n\n    intersections = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            intersections.add(max(segments[i][0], segments[j][0]) - min(segments[i][1], segments[j][1]))\n\n    intersections = sorted(intersections)\n    index = intersections.index(max(intersections))\n    while is_maximal(segments, n):\n        segments = remove_segment(segments, n, index)\n        intersections.pop(index)\n        index = intersections.index(max(intersections))\n\n    return intersections[-1]\n\n\nassert(solution('''4\n1 3\n2 6\n0 4\n3 3\n\n''') == 1)\n\nassert(solution('''5\n2 6\n1 3\n0 4\n1 20\n0 4\n\n''') == 2)\n\nassert(solution('''3\n4 5\n1 2\n9 20\n\n''') == 0)\n\nassert(solution('''2\n3 10\n1 5\n\n''') == 7)\n\nassert(solution('''2\n4 5\n1 2\n9 20\n\n''') == 0)\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    segments = [map(int, line.strip().split()) for line in stdin.readlines()]\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            l = max(segments[i][0], segments[j][0])\n            r = min(segments[i][1], segments[j][1])\n            if l < r:\n                result = max(result, r - l + 1)\n    return str(result)"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Compute the maximum length of the intersection of all remaining segments\n    \"\"\"\n    n = stdin.strip()\n    n = int(n)\n    segments = []\n    for _ in range(n):\n        line = stdin.readline()\n        l, r = line.strip().split()\n        segments.append((int(l), int(r)))\n    max_len = 0\n    for i in range(1, len(segments)):\n        l1, r1 = segments[i-1]\n        l2, r2 = segments[i]\n        curr_len = 0\n        while l1 <= r2 and l2 <= r1:\n            curr_len += 1\n            l1 = max(l1, l2)\n            r1 = min(r1, r2)\n        max_len = max(max_len, curr_len)\n    return str(max_len)"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n < 2:\n        print(\"NO\")\n        return\n\n    current_height = a[0]\n    last_height = a[0]\n    for i in range(n):\n        if a[i] == current_height:\n            continue\n        if a[i] > current_height:\n            if a[i] > last_height:\n                print(\"NO\")\n                return\n            if a[i] == last_height:\n                current_height += 1\n            else:\n                current_height = a[i]\n        else:\n            if current_height < last_height:\n                print(\"NO\")\n                return\n            else:\n                last_height = a[i]\n\n    print(\"YES\")"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    is_complete = all(a[i] == a[i - 1] for i in range(1, n))\n    if is_complete:\n        return \"NO\"\n    \n    if n == 1:\n        return \"YES\"\n    \n    for i in range(n):\n        if i == 0:\n            if a[i] == a[i + 1]:\n                continue\n            else:\n                return \"NO\"\n        elif i == n - 1:\n            if a[i] == a[i - 1]:\n                continue\n            else:\n                return \"NO\"\n        else:\n            if a[i] == a[i - 1] or a[i] == a[i + 1]:\n                continue\n            else:\n                return \"NO\"\n        \n    return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    if n == 0:\n        return 'YES'\n    if n == 1:\n        if h[0] == 0:\n            return 'NO'\n        return 'YES'\n    a = max(h)\n    if a == 1:\n        return 'NO'\n    for i in range(1, n):\n        if h[i] == h[i - 1]:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\nsolution(stdin)\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"5\n   ... 2 1 1 2 5\n   ... \"\"\")\n    'YES'\n    \"\"\"\n    from collections import deque\n    n = int(stdin.readline())\n    a = deque(int(x) for x in stdin.readline().split())\n    max_height = max(a)\n    if max_height * n!= sum(a):\n        return \"NO\"\n    for _ in range(n):\n        if a[0]!= max_height:\n            return \"NO\"\n        a.popleft()\n        a.append(max_height)\n    return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    return..."
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nassert (solution('''5\n2 1 1 2 5\n''') == 'YES')\nassert (solution('''3\n4 5 3\n''') == 'NO')\nassert (solution('''2\n10 10\n''') == 'YES')\nassert (solution('''3\n10 10\n''') == 'NO')\nassert (solution('''1\n10\n''') == 'YES')\nassert (solution('''10\n10\n''') == 'YES')\nassert (solution('''4\n10 9 8 7\n''') == 'NO')\nassert (solution('''9\n5 3 1 1 6 4 1 9 9\n''') == 'NO')\nassert (solution('''2\n1\n5\n''') == 'NO')\nassert (solution('''5\n2 1 1 2 5\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n''') == 'NO')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n''') == 'NO')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == 'YES')\nassert (solution('''5\n1"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nassert solution('5\\n2 1 1 2 5') == 'YES'\nassert solution('3\\n4 5 3') == 'NO'\nassert solution('2\\n10 10') == 'YES'\nassert solution('2\\n7 6 4') == 'YES'\nassert solution('2\\n2 1 1') == 'NO'\nassert solution('1\\n1') == 'NO'\nassert solution('5\\n5 5 5 5 5') == 'NO'\nassert solution('10\\n1 2 1 3 2 1 4 1') == 'NO'\nassert solution('10\\n1 2 1 3 2 1 4 1 4 1 1') == 'YES'\n\n\n-----\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n>>> assert solution('3\\n4 5 3') == 'YES'\n>>> assert solution('5\\n2 1 1 2 5') == 'YES'\n>>> assert solution('2\\n10 10') == 'YES'\n>>> assert solution('5\\n4 5 3') == 'NO'\n>>> assert solution('5\\n3 4 5') == 'NO'\n>>> assert solution('5\\n10 10') == 'YES'\n>>> assert solution('5\\n4 5 3') == 'NO'\n>>> assert solution('5\\n4 5 3') == 'NO'\n>>> assert solution('5\\n5 5 5 5 5') == 'NO'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\nIn the second example we can generate $S$ = { \"ajihiushda\", \"ahjihiushda\", \"ajihiush\", \"ahjihiush\" }. The cost of the first element in $S$ is $0$ and the cost of the others is $4$. So the total cost of $S$ is $15$.\n\"\"\"\nfrom bisect import bisect_left\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    if n - k >= k:\n        return -1\n    if k > 100:\n        return -1\n    s = stdin.strip()\n    # print(s, s[:k])\n    # print(s[k:])\n    # print(s[:k], s[k:])\n    # print(s[:k])\n    # print(s[k:])\n    # print(s[:k], s[k:])\n    # print(s[:k], s[k:])\n    # print(s[:k], s[k:])\n    # print(s[:k], s[k:])\n    # print(s[:k], s[k:])\n    # print(s[:k], s[k:])\n    return len(s[:k])\n\nassert(solution('') == -1)\nassert(solution('aaaaa') == -1)\nassert(solution('abc') == -1)\nassert(solution('asdf') == -1)\nassert(solution('asdfg') == -1)\nassert(solution('a') == -1)\nassert(solution('ab') == -1)\nassert(solution('abab') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcdefg') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde') == -1)\nassert(solution('abcdef') == -1)\nassert(solution('abcd') == -1)\nassert(solution('abcde"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n\n    dp = [float('inf')] * (k + 1)\n    dp[0] = 0\n    for i in range(n):\n        tmp = [float('inf')] * (k + 1)\n        for j in range(k + 1):\n            if j > i:\n                tmp[j] = dp[j - 1]\n            if j >= 1:\n                tmp[j] = min(tmp[j], tmp[j - 1] + 1)\n            if j >= 2:\n                tmp[j] = min(tmp[j], tmp[j - 2] + abs(ord(s[i]) - ord('a')))\n        dp = tmp\n\n    return dp[k] if dp[k]!= float('inf') else -1\n\n\nassert solution('asdf') == 4\nassert solution('aaaaa') == 15\nassert solution('ahihiushda') == 233\nassert solution('qwerrqw') == -1\nassert solution('abca') == 4\nassert solution('aabca') == 15\nassert solution('bbb') == -1\nassert solution('bbbbbb') == -1\nassert solution('bbbba') == -1\nassert solution('bbbbbbbba') == -1\nassert solution('aaabbbaa') == 11\nassert solution('baaabaab') == -1\nassert solution('aaabaaabaaabaaab') == -1\nassert solution('aaaaaaaaaaaaaaaaa') == -1\nassert solution('aaaaaaaaaaaaaaaaaaa') == -1\nassert solution('aaaaaaaaaaaaaaabaabaaab') == -1\nassert solution('aaaaaaaaaaaaaaabaabaabb') == -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\nfrom math import ceil\n\nn, k = list(map(int, stdin.split()))\ns = stdin.split()[1]\n\nS = set()\n\nfor i in range(ceil(n / k)):\n    S.add(s[i * k: (i + 1) * k])"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nm = int(stdin.readline().strip())\ns = stdin.readline().strip()\nn = int(stdin.readline().strip())\n\nss = s\ns = set()\nfor i in range(n):\n    s.add(ss[:i] + ss[i+1:])"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    min_cost = -1\n    for i in range(1, len(s)):\n        cost = (n - i) - len(set(s[:i] + s[i:]))\n        if cost < min_cost or cost == min_cost and len(set(s[:i] + s[i:])) < len(set(s[:i - 1] + s[i - 1:])):\n            min_cost = cost\n    return str(min_cost)\n\nprint(solution(stdin.readline().strip()))\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < k:\n        return -1\n    s = stdin\n    s_len = len(s)\n    dp = [0] * (n + 1)\n    for i in range(s_len):\n        dp[i + 1] = dp[i] + 1\n        for j in range(i + 1, s_len):\n            if s[i] == s[j]:\n                dp[j + 1] = dp[j]\n            else:\n                dp[j + 1] = min(dp[j], dp[j + 1])\n    return dp[-1]"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n\n    ans = 0\n    for i in range(1, 7):\n        if (i + 1) % 7 == 4 and (i + 2) % 7 == 5:\n            ans = max(ans, max(m, k) * i)\n        elif (i + 1) % 7 == 5 and (i + 2) % 7 == 4:\n            ans = max(ans, max(m, k) * i)\n        elif (i + 1) % 7 == 6 and (i + 2) % 7 == 5:\n            ans = max(ans, max(m, k) * i)\n        elif (i + 1) % 7 == 4 and (i + 2) % 7 == 6:\n            ans = max(ans, max(m, k) * i)\n        elif (i + 1) % 7 == 5 and (i + 2) % 7 == 4:\n            ans = max(ans, max(m, k) * i)\n        elif (i + 1) % 7 == 6 and (i + 2) % 7 == 4:\n            ans = max(ans, max(m, k) * i)\n        else:\n            ans = max(ans, max(m, k) * i)\n    return str(ans)\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(s) for s in stdin.split()]\n    return str(min(a//7+1, b//7+1, c//7+1))"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a, b, c = [int(stdin[i]) for i in range(3)]\n    max_days = (7 * 10 ** 8) // (a + b + c)\n    return max_days\n\n\nassert solution('2 1 1') == 4\nassert solution('3 2 2') == 7\nassert solution('1 100 1') == 3\nassert solution('30 20 10') == 39\nassert solution('30 20 10') == 39\n\"\"\"\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nm, a, b = map(int, stdin.split())\nprint(solution(m, a, b))\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days_of_week = {'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'}\n    days_of_week_numbers = {'1', '2', '3', '4', '5', '6', '7'}\n    input_lines = stdin.split('\\n')\n    input_lines = [x.split() for x in input_lines]\n    for line in input_lines:\n        if line[0] not in days_of_week_numbers:\n            raise Exception(f'Invalid day of the week {line[0]}')\n\n    a = int(line[1])\n    b = int(line[2])\n    c = int(line[3])\n\n    days_of_week = {'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'}\n\n    days_of_week_numbers = {'1', '2', '3', '4', '5', '6', '7'}\n\n    week_days = set()\n    days_left = set()\n    for i in range(1, 7):\n        if i in days_of_week_numbers:\n            week_days.add(i)\n        else:\n            days_left.add(i)\n\n    days_left = list(days_left)\n    if days_left:\n        days_left.sort()\n    else:\n        return 7\n    for i in range(7):\n        if i in days_of_week_numbers:\n            days_left.append(i)\n    days_left.sort()\n    days_left = tuple(days_left)\n\n    days_of_week_list = [str(x) for x in week_days]\n    days_of_week_list.sort()\n    days_of_week_list = tuple(days_of_week_list)\n\n    total_food_needed = sum(list(map(int, [a, b, c])))\n    if total_food_needed > 6 * 10 ** 8:\n        return 'Impossible'\n\n    n = len(days_of_week)\n\n    dp = [[None] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n\n    for i in range(n - 1):\n        dp[i][i + 1] = (a * days_of_week[i + 1] >= c * days_of_week[i]) and (b * days_of_week[i] >= c * days_of_week[i + 1])\n\n    for d in range(2, n):\n        for i in range(n - d):\n            j = i + d\n            dp[i][j] = False\n            for k in range(i, j):\n                dp[i][j] = dp[i][j] or dp[i][k] and dp[k + 1][j]\n\n    days = [None] * n\n    for i in range(n):\n        if dp[0][i]:\n            days[i] = days_of_week_list[i]\n\n    return''.join(days)\n\nprint(solution(input()))"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    best = 0\n    for day in range(1, 8):\n        if day % 3 == 0:\n            best += b\n        else:\n            best += a\n    return best\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_naive(stdin))\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"4\""
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split(' '))\n        tiles = {}\n        for i in range(n):\n            row = [int(stdin.readline().strip()) for _ in range(2)]\n            col = [int(stdin.readline().strip()) for _ in range(2)]\n            if row[0] == col[0]:\n                if row[1] == col[1]:\n                    tiles[row[0]] = row[1]\n                    tiles[col[0]] = col[1]\n        if len(tiles)!= n*2 or len(tiles)!= m*2:\n            print(\"NO\")\n        else:\n            print(\"YES\")"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t = int(lines[0])\n    assert 1 <= t <= 100\n    for i in range(1, t + 1):\n        n, m = map(int, lines[i].split())\n        assert 1 <= n <= 100\n        assert 1 <= m <= 100\n        \n    return \"YES\" if is_symmetric_matrix(m, n, map(int, lines[i + 1].split()), map(int, lines[i + 2].split())) else \"NO\"\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = stdin.readline().strip().split(\" \")\n        n = int(n)\n        m = int(m)\n        \n        tiles = [set() for _ in range(n)]\n        for _ in range(n):\n            line = stdin.readline().strip()\n            top, bottom = line.split(\" \")\n            top = int(top)\n            bottom = int(bottom)\n            tiles[top].add(top)\n            tiles[bottom].add(bottom)\n            tiles[top].add(bottom)\n            tiles[bottom].add(top)\n        \n        ans = \"YES\"\n        for i, x in enumerate(tiles):\n            for j, y in enumerate(tiles):\n                if i == j:\n                    continue\n                if i in x and j in y:\n                    ans = \"NO\"\n        print(ans)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4\n   ... 1 2\n   ... 5 6\n   ... 5 7\n   ... 7 4\n   ... 8 9\n   ... 9 8\n   ... 2 5\n   ... 1 1\n   ... 1 1\n   ... 2 2\n   ... 2 2\n   ... 1 100\n   ... 10 10\n   ... 10 10''')\n    'YES'\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = list(map(int, stdin.readline().split()))\n        tiles = []\n        for _ in range(2*n):\n            tiles.append(list(map(int, stdin.readline().split())))\n\n        flips = 0\n        for i in range(n):\n            for j in range(n):\n                if (i+j) % 2 == 1:\n                    if tiles[i][0] == tiles[j][1] and tiles[i][1] == tiles[j][0]:\n                        flips += 1\n        if flips == 2 * n * n:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    tiles = {}\n    for _ in range(2 * n):\n        tile = [int(x) for x in stdin.strip().split()]\n        tiles[tile[0]] = tile[1:]\n    # print(tiles)\n    for i in range(1, m + 1):\n        if i not in tiles:\n            continue\n        for j in range(i):\n            if m - i + j not in tiles:\n                continue\n            if not (m - i + j) % 2 == (i - j) % 2:\n                continue\n            print(\"YES\")\n            return\n    print(\"NO\")\n    return"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    tiles = [[int(x) for x in stdin.readline().split()] for _ in range(n)]\n    s = [[tiles[i][j] for j in range(n)] for i in range(n)]\n    for x in s:\n        if s!= x:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split(' '))\n        tiles = stdin.readline().strip().split(' ')\n        numbers = list(map(int, stdin.readline().strip().split(' ')))\n        matrix = []\n        for i in range(n):\n            row = list(map(int, stdin.readline().strip().split(' ')))\n            matrix.append(row)\n        if is_symmetric(matrix, n, m):\n            print('YES')\n        else:\n            print('NO')\n\nsolution(input)"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    m, n = map(int, s.split(\" \"))\n    tiles = [\n        [int(i) for i in stdin.strip().split(\" \")]\n        for _ in range(int(stdin.strip().split(\" \")[0]))\n    ]\n    #  [n for n in range(1, m + 1)]\n    #  if n % 2!= 0\n    return \"YES\" if any(\n        [\n            sum(tiles[i][j] for i in range(n)) == sum(tiles[j][i] for i in range(n))\n            for j in range(n)\n        ]\n    ) else \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    for _ in range(n):\n        rows = stdin.readline().split(' ')\n        if not _valid_tile_type(rows[0], rows[1]):\n            return 'NO'\n    return 'YES'\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    total = sum(range(1, n + 1))\n    return str(abs(total - sum(set(range(1, n + 1)) - set(range(1, n + 1, 2))))\n    #return str(abs(total - 2 * sum(set(range(1, n + 1, 2)))))\n    #return str(abs(total - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - 2 * (n * (n + 1) // 2)))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - 2 * (n * (n + 1) // 2)))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2))\n    #return str(abs(total - (n * (n + 1) // 2) - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2 - n * (n + 1) // 2"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    result = -1\n    for i in range(1, 2**n):\n        result = max(result, abs(sum(list(map(int, stdin.readline().split()))) - sum(list(map(int, stdin.readline().split())))))\n    return str(result)"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 1:\n        return \"0\"\n\n    a = 1\n    b = 2\n    for i in range(3, n+1):\n        if abs(a-b) > abs(a+b):\n            b += 1\n        else:\n            a += 1\n\n    return str(abs(a-b))"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return str(abs(n - sum(sorted(list(set(range(1, n + 1))))[:n // 2])))\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    A = []\n    B = []\n    for i in range(1, n+1):\n        sum += i\n        if sum % 2 == 0:\n            A.append(i)\n        else:\n            B.append(i)\n    return abs(sum(A) - sum(B))\n\nsolution(input())\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline().strip())\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    for i in range(1, 2 * n, 2):\n        for j in range(2 * n - i, 2 * n + 1):\n            if i + j == n * (n + 1) / 2:\n                return str(i)\n\nassert(solution('''3''') == '0')\nassert(solution('''5''') == '1')\nassert(solution('''6''') == '1')\nassert(solution('''1''') == '0')\nassert(solution('''2''') == '1')\nassert(solution('''3''') == '0')\nassert(solution('''4''') == '1')\nassert(solution('''5''') == '1')\nassert(solution('''6''') == '1')\nassert(solution('''7''') == '2')\nassert(solution('''8''') == '2')\nassert(solution('''9''') == '2')\nassert(solution('''10''') == '2')\nassert(solution('''11''') == '3')\nassert(solution('''12''') == '3')\nassert(solution('''13''') == '3')\nassert(solution('''14''') == '3')\nassert(solution('''15''') == '4')\nassert(solution('''16''') == '4')\nassert(solution('''17''') == '4')\nassert(solution('''18''') == '4')\nassert(solution('''19''') == '4')\nassert(solution('''20''') == '5')\nassert(solution('''21''') == '5')\nassert(solution('''22''') == '5')\nassert(solution('''23''') == '5')\nassert(solution('''24''') == '5')\nassert(solution('''25''') == '6')\nassert(solution('''26''') == '6')\nassert(solution('''27''') == '6')\nassert(solution('''28''') == '6')\nassert(solution('''29''') == '6')\nassert(solution('''30''') == '6')\nassert(solution('''31''') == '7')\nassert(solution('''32''') == '7')\nassert(solution('''33''') == '7')\nassert(solution('''34''') == '7')\nassert(solution('''35''') == '7')\nassert(solution('''36''') == '7')\nassert(solution('''37''') == '7')\nassert(solution('''38''') == '7')\nassert(solution('''39''') == '8')\nassert(solution('''40''') == '8')\nassert(solution('''41''') == '8')\nassert(solution('''42''') == '8')\nassert(solution('''43''') == '8')\nassert(solution('''44''') == '8')\nassert(solution('''45''') == '8')\nassert(solution('''46''') == '8')\nassert(solution('''47''') == '8')\nassert(solution('''48''') == '8')\nassert(solution('''49''') == '8')\nassert(solution('''50''') == '8')\nassert(solution('''51''') == '8')\nassert(solution('''52''') == '8')\nassert(solution('''53''') == '8')\nassert(solution('''54''') == '8')\nassert(solution('''55''') == '8')\nassert(solution('''56''') == '8')\nassert(solution('''57''') == '8')\nassert(solution('''58''') == '8')\nassert(solution('''59''') == '8')\nassert(solution('''60''') == '8')\nassert(solution('''61''') == '8')\nassert(solution('''62''') == '8')\nassert(solution('''63''') == '8')\nassert(solution('''64''') == '8')\nassert(solution('''65''') == '8')\nassert(solution('''66''') == '8')\nassert(solution('''67''') == '8')\nassert(solution('''68''') == '8')\nassert(solution('''69''') == '8')\nassert(solution('''70''') == '8')\nassert(solution('''71''') == '8')\nassert(solution('''72''') == '8')\nassert(solution('''73''') == '8')\nassert(solution('''74''') == '8')\nassert(solution('''75''') == '8')\nassert(solution('''76''') == '8')\nassert(solution('''77''') == '8')\nassert(solution('''78''') == '8')\nassert(solution('''79''') == '8')\nassert(solution('''80''') == '8')\nassert(solution('''81''') == '8')\nassert(solution('''82''') == '8')\nassert(solution('''83''') == '8')\nassert(solution('''84''') == '8')\nassert(solution('''85''') == '8')\nassert(solution('''86''') == '8')\nassert(solution('''87''') == '8')\nassert(solution('''88''') == '8')\nassert(solution('''89''') == '8')\nassert(solution('''90''') == '8')\nassert(solution('''91''') == '8')\nassert(solution('''92''') == '8')\nassert(solution('''93''') == '8')\nassert(solution('''94''') == '8')\nassert(solution('''95''') == '8')\nassert(solution('''96''') == '8')\nassert(solution('''97''') == '8')\nassert(solution('''98''') == '8')\nassert(solution('''99''') == '8')\nassert(solution('''100''') == '8')\nassert(solution('''101''') == '8')\nassert(solution('''102''') == '8')\nassert(solution('''103''') == '8')\nassert(s"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    min = n\n    for i in range(2, n):\n        if n % i == 0:\n            new_min = abs(n // i - n % i)\n            if new_min < min:\n                min = new_min\n    return str(min)"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(abs(n * (n - 1) // 2) - abs(sum(range(1, n + 1)) - sum(range(n + 1, n * 2 + 1))))\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return '{}'.format(abs(n*(n+1)//2-sum(x for x in range(n) if x%2)))"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    return \"1\" if n%2 else \"0\""
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    stack = []\n    count = 0\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if not stack:\n                count += 1\n            else:\n                stack.pop()\n    return count"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    result = 0\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i < j and set(s[i:j + 1]) == set('()'):\n                result += 1\n    return result % 1000000007\n\nassert solution('1') == 1\nassert solution('()') == 1\nassert solution('(()') == 0\nassert solution('((()))') == 1\nassert solution('(((()))())') == 1\nassert solution('()((())())') == 0\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:-1]\n    dp = [[0 for _ in range(n)] for _ in range(len(s) + 1)]\n    for i in range(len(s) + 1):\n        dp[i][0] = 1\n    for i in range(1, len(s) + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == '(':\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n            elif s[i - 1] == ')':\n                if j % 2 == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j - 1]\n    return str(dp[-1][-1])\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:-1]\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    count = 0\n    # Create all possible combinations\n    for i in range(1, len(s) + 1):\n        for combination in itertools.combinations(s, i):\n            if is_valid(combination):\n                count += 1\n\n    return str(count % 1000000007)\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[2:-2]\n    count = 0\n    for i in range(len(s) - n + 1):\n        if s[i:i + n] == \"\".join([\"1\", \"+\"] * n):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s: str) -> bool:\n        left_brackets = []\n        stack = []\n        for c in s:\n            if c == '(':\n                left_brackets.append(c)\n            elif c == ')':\n                if not left_brackets:\n                    return False\n                else:\n                    left_brackets.pop()\n            else:\n                stack.append(c)\n        return not left_brackets\n\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    print((is_valid(s) and (n % 2 == 0)) * pow(2, n, 1000000007) + (is_valid(s) and n % 2) * pow(2, n, 1000000007))\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10**18:\n        return -1\n    d = digits(n)\n    return d - 1 if (d - 1) % 25 == 0 else -1\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 50 or n % 25!= 0:\n        return '-1'\n    ans = 0\n    while n:\n        ans += n % 25\n        n //= 25\n    return str(ans)"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # dp[n]: the minimum number of moves to obtain a number divisible by 25 that can be obtained after applying at most one move to n\n    dp = [0] * (n + 1)\n    # dp[n] is the minimum number of moves to obtain a number divisible by 25 that can be obtained after applying at most one move to n\n    dp[1] = 0\n    # dp[n-1] is the minimum number of moves to obtain a number divisible by 25 that can be obtained after applying at most one move to the last digit\n    dp[2] = 1\n    # dp[n-2] is the minimum number of moves to obtain a number divisible by 25 that can be obtained after applying at most one move to the second last digit\n    for i in range(3, n + 1):\n        # we can use any two adjacent digits to obtain a number divisible by 25\n        # dp[i] = dp[i - 1] + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2] + 1, dp[i - 3] + 1, dp[i - 4] + 1)\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], dp[i - 5]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], dp[i - 5], dp[i - 6]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], dp[i - 5], dp[i - 6], dp[i - 7]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], dp[i - 5], dp[i - 6], dp[i - 7], dp[i - 8]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], dp[i - 5], dp[i - 6], dp[i - 7], dp[i - 8], dp[i - 9]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], dp[i - 5], dp[i - 6], dp[i - 7], dp[i - 8], dp[i - 9], dp[i - 10]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], dp[i - 5], dp[i - 6], dp[i - 7], dp[i - 8], dp[i - 9], dp[i - 10], dp[i - 11]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], dp[i - 5], dp[i - 6], dp[i - 7], dp[i - 8], dp[i - 9], dp[i - 10], dp[i - 11], dp[i - 12]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], dp[i - 5], dp[i - 6], dp[i - 7], dp[i - 8], dp[i - 9], dp[i - 10], dp[i - 11], dp[i - 12], dp[i - 13]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], dp[i - 5], dp[i - 6], dp[i - 7], dp[i - 8], dp[i - 9], dp[i - 10], dp[i - 11], dp[i - 12], dp[i - 13], dp[i - 14]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], dp[i - 5], dp[i - 6], dp[i - 7], dp[i - 8], dp[i - 9], dp[i - 10], dp[i - 11], dp[i - 12], dp[i - 13], dp[i - 14], dp[i - 15]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], dp[i - 5], dp[i - 6], dp[i - 7], dp[i - 8], dp[i - 9], dp[i - 10], dp[i - 11], dp[i - 12], dp[i - 13], dp[i - 14], dp[i - 15], dp[i - 16]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], dp[i - 5], dp[i - 6], dp[i - 7], dp[i - 8], dp[i - 9], dp[i - 10], dp[i - 11], dp[i - 12], dp[i - 13], dp[i - 14], dp[i - 15], dp[i - 16], dp[i - 17]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], dp[i - 5], dp[i - 6], dp[i - 7], dp[i - 8], dp[i - 9], dp[i - 10], dp[i - 11], dp[i - 12], dp[i - 13], dp[i - 14], dp[i - 15], dp[i - 16], dp[i - 17], dp[i - 18]) + 1\n        # dp[i] = min(dp[i - 1], dp[i - 2], dp[i - 3], dp[i - 4], d"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return '-1'\n    if n % 25 == 1:\n        return str(n // 25 - 1)\n    elif n % 25 == 2:\n        return str(n // 25 + 1)\n    elif n % 25 == 3:\n        return str(n // 25)\n    elif n % 25 == 4:\n        return str(n // 25 - 1)\n    elif n % 25 == 5:\n        return str(n // 25)\n    elif n % 25 == 6:\n        return str(n // 25 + 1)\n    elif n % 25 == 7:\n        return str(n // 25 - 1)\n    elif n % 25 == 8:\n        return str(n // 25)\n    elif n % 25 == 9:\n        return str(n // 25)\n    elif n % 25 == 10:\n        return str(n // 25)\n    elif n % 25 == 11:\n        return str(n // 25)\n    elif n % 25 == 12:\n        return str(n // 25)\n    elif n % 25 == 13:\n        return str(n // 25)\n    elif n % 25 == 14:\n        return str(n // 25)\n    elif n % 25 == 15:\n        return str(n // 25)\n    elif n % 25 == 16:\n        return str(n // 25)\n    elif n % 25 == 17:\n        return str(n // 25)\n    elif n % 25 == 18:\n        return str(n // 25)\n    else:\n        return str(n // 25)"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    ans = 0\n    if len(s) == 1:\n        return -1\n    for i in range(1, len(s)):\n        if int(s[i-1]) > int(s[i]):\n            ans += int(s[i-1]) - int(s[i])\n    return ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25!= 0:\n        return \"-1\"\n    moves = 0\n    s = str(n)\n    while len(s) > 0:\n        if len(s) == 1:\n            break\n        s = s[1:] + s[0]\n        moves += 1\n    return str(moves)"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    \n    s_len = len(s)\n    res = s_len\n    \n    if s_len == 1:\n        return '1'\n    \n    d = {}\n    for i in range(s_len):\n        if s[i] in d:\n            d[s[i]].append(i)\n        else:\n            d[s[i]] = [i]\n    \n    for i in range(s_len):\n        if len(d[s[i]]) == 1:\n            res -= 1\n    \n    if res == 1:\n        return '1'\n    \n    c = [0] * s_len\n    for i in range(s_len):\n        if len(d[s[i]]) == 1:\n            c[i] = d[s[i]][0]\n            res -= 1\n            \n    if res == 1:\n        return '1'\n    \n    for i in range(s_len):\n        if c[i]!= i:\n            c[i], c[c[i]] = c[c[i]], i\n            res -= 1\n            if res == 1:\n                break\n            \n    if res == 1:\n        return '1'\n    \n    c =''.join(str(i) for i in c)\n    \n    return str(res) + '\\n' + c\n\nimport sys\nfrom io import StringIO\n\nsys.stdin = StringIO(\n    \"\"\"\n9\nabacbecfd\n\n8\naaabbcbb\n\n7\nabcdedc\n\n5\nabcde\n\n\"\"\"\n)\n\nassert (solution(sys.stdin) == \"\"\"\n2\n1 1 2 1 2 1 2 1 2 \n\n3\n1 1 1 1 1 2 3 \n\n4\n1 1 1 1 1 1 \n\n5\n1 1 1 1 1 1\n\n6\n1 1 1 1 1 1\n\n7\n1 1 1 1 1 1\n\n8\n1 1 1 1 1 1\n\n9\n1 1 1 1 1 1\n\n10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    # Find all the permutations of colors, and the number of swaps each permutation takes.\n    # The swaps take a bit more time but it is done in constant time.\n    perms = permutations(s, len(s))\n    swaps = [0] * len(s)\n    for perm in perms:\n        swaps[0] += abs(perm[0] - 1)\n        for i in range(1, len(perm)):\n            if perm[i]!= perm[i - 1]:\n                swaps[i] += 1\n\n    # Find the minimum number of colors.\n    res = min(swaps)\n\n    # Color the string using the minimum number of colors.\n    c = [0] * n\n    for i in range(len(s)):\n        c[i] = res\n        if i > 0:\n            if s[i]!= s[i - 1] or c[i - 1] == res:\n                c[i] = c[i - 1] + 1\n\n    return str(res) + '\\n' +''.join(str(c[i]) for i in range(n))\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    res = 0\n    for i in range(1, len(t)):\n        if t[i] > t[i - 1]:\n            res += 1\n\n    c = [0] * len(t)\n    for i in range(len(t)):\n        for j in range(i + 1, len(t)):\n            if t[j] > t[i]:\n                c[i] += 1\n                c[j] += 1\n    c.sort()\n    cnt = 0\n    for i in range(len(c)):\n        cnt += c[i]\n        if cnt > res:\n            break\n    print(res)\n    print(*c)\n    return \"\"\n\nassert(solution(\"abacbecfd\") == \"2\\n1 1 2 1 2 1 2 1 2\")\nassert(solution(\"aaabbcbb\") == \"2\\n1 2 1 2 1 2 1 1\")\nassert(solution(\"abcdedc\") == \"3\\n1 1 1 1 1 1 2 3\")\nassert(solution(\"abcde\") == \"1\\n1 1 1 1 1\")\nassert(solution(\"abcde\") == \"1\\n1 1 1 1 1\")\nassert(solution(\"abcd\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n1 1 1 1\")\nassert(solution(\"abc\") == \"1\\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:]\n    colors = [0] * n\n    while not isSorted(s):\n        color = 1\n        maxFreq = 1\n        for i in range(1, n):\n            if s[i] < s[i - 1]:\n                if color < maxFreq:\n                    color = maxFreq\n                else:\n                    maxFreq += 1\n                    color += 1\n        for i in range(n):\n            if s[i] < s[i - 1]:\n                colors[i] = color\n        for i in range(n - 2, -1, -1):\n            if s[i] < s[i + 1]:\n                colors[i] = color\n        for i in range(n - 2, -1, -1):\n            if s[i] < s[i + 1]:\n                color += 1\n                colors[i] = color\n        for i in range(n - 1, 0, -1):\n            if s[i] < s[i - 1]:\n                colors[i - 1] = color\n        for i in range(n - 2, -1, -1):\n            if s[i] < s[i - 1]:\n                colors[i] = color\n        for i in range(n - 2, -1, -1):\n            if s[i] < s[i - 1]:\n                colors[i - 1] = color\n    return str(colors).replace(' ', '')"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n\n    l = len(s)\n    r = 1\n    while r <= l:\n        r <<= 1\n    r >>= 1\n    print(r)\n    l = int(math.ceil(math.log(l, 2)))\n    print(l)\n    n = int(n)\n    print(n)\n\n    c = [0 for i in range(l)]\n    for i in range(n):\n        c[i] = 1\n    for i in range(1, l):\n        x = 1 << i\n        if x <= n:\n            c[x] = 1\n    print(c)\n\n    d = [[-1 for i in range(l)] for j in range(l)]\n    for i in range(n):\n        d[i][i] = 0\n\n    for i in range(1, l):\n        x = 1 << i\n        if x <= n:\n            for j in range(i):\n                y = 1 << j\n                if x & y:\n                    d[x][y] = 1\n                if y & x:\n                    d[y][x] = 0\n    print(d)\n    res = 0\n    for i in range(1, l):\n        x = 1 << i\n        if x <= n:\n            for j in range(i):\n                y = 1 << j\n                if x & y:\n                    continue\n                if d[x][y]!= -1:\n                    res += d[x][y]\n    print(res)\n    print(c)\n    for i in range(l):\n        res += c[i]\n    print(res)\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin.readline().strip())\n    # s = stdin.readline().strip()\n    # print(solve(n, s))\n    # print(s)\n    n = int(stdin)\n    s = stdin[1:-1]\n    print(solve(n, s))\n    print(s)\n    return s\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    s = stdin.readline()\n    n = int(n)\n    res = [None] * n\n    cnt = 0\n    # 1st solution\n    for i, x in enumerate(s):\n        if cnt == n - 1:\n            break\n        if i == 0:\n            if s[i + 1] > x:\n                res[i] = 1\n                cnt += 1\n            else:\n                res[i] = 2\n                cnt += 2\n        elif i == n - 1:\n            if s[i - 1] > x:\n                res[i] = 1\n                cnt += 1\n            else:\n                res[i] = 2\n                cnt += 2\n        else:\n            if s[i - 1] > x or s[i + 1] > x:\n                res[i] = 1\n                cnt += 1\n            else:\n                res[i] = 2\n                cnt += 2\n    return \"\".join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _n = int(stdin.readline())\n    _s = stdin.readline().strip()\n    _min_colors = _n\n    _colors = [0] * _n\n\n    for i in range(_n):\n        for j in range(i + 1, _n):\n            if _s[i] == _s[j]:\n                _colors[i] += 1\n                _colors[j] += 1\n\n    for i in range(_n):\n        if _colors[i] < _min_colors:\n            _min_colors = _colors[i]\n\n    for i in range(_n):\n        if _colors[i] == _min_colors:\n            _colors[i] += 1\n\n    return \"\".join([str(_i) for _i in _colors])\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n\n    n = int(n)\n    c = [0] * n\n    for i in range(len(s)):\n        c[i] = s[i]\n    c = sorted(c)\n    c.reverse()\n\n    res = []\n    for i in range(len(c)):\n        res.append(i + 1)\n        for j in range(i + 1, len(c)):\n            if c[j]!= c[i]:\n                res.append(1)\n                break\n\n    return \" \".join(str(r) for r in res)\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    pairs = {}\n    for i in range(n):\n        pairs[s[i]] = pairs.get(s[i], []) + [i + 1]\n    colors = n\n    while n > 2:\n        colors = min(colors, n)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if s[i] > s[j] and (i, j) in pairs:\n                    for k in pairs[(i, j)]:\n                        if colors > 1:\n                            pairs[(k, i)] = pairs[(k, i)] + pairs[(j, i)]\n                            pairs[(k, j)] = pairs[(k, j)] + pairs[(i, j)]\n                            pairs[(i, k)] = pairs[(i, k)] + pairs[(j, i)]\n                            pairs[(j, k)] = pairs[(j, k)] + pairs[(i, j)]\n                            del pairs[(j, i)]\n                            del pairs[(i, j)]\n                            del pairs[(j, k)]\n                            del pairs[(k, i)]\n                            del pairs[(i, k)]\n                    pairs.pop((i, j))\n                    del pairs[(j, i)]\n                    del pairs[(i, j)]\n                    n -= 1\n                    break\n        colors -= 1\n    res = 0\n    colors = 0\n    for i in range(n):\n        if pairs.get(i + 1, []):\n            res = max(res, colors + 1)\n            colors += 1\n    for i in range(n):\n        if pairs.get(i + 1, []):\n            res = max(res, colors)\n            colors += 1\n    return str(res)\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    strings = [stdin[x] for x in range(int(stdin.readline().strip()))]\n    strings = list(set(strings))\n    strings.sort()\n    for i in range(1, len(strings)):\n        if strings[i] not in strings[:i]:\n            return \"NO\"\n    return \"YES\"\nprint(solution(input()))\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"4\\na\\naa\\naaa\\naaa\\naaa\\naa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\naaa\\na"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    n = int(stdin)\n    for _ in range(n):\n        s = stdin.readline().strip()\n        if s.count(\"a\") <= s.count(\"b\"):\n            result += s\n        else:\n            result += \"NO\"\n    return result\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    strings = list(zip(strings, range(n)))\n    strings.sort(key = lambda x: len(x[0]), reverse = True)\n    ans = []\n    for string, index in strings:\n        if ans and ans[-1] == string:\n            continue\n        ans.append(string)\n    if len(ans)!= n:\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(ans)"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    strings = [stdin.strip() for _ in range(int(stdin.readline()))]\n    sorted_strings = sorted(strings, key=lambda x: len(x))\n    return 'YES' if sorted_strings == strings else 'NO'"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    lst = [stdin.readline().strip() for _ in range(n)]\n    lst.sort(key=len)\n\n    dic = {}\n    for i in lst:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n\n    for i in lst:\n        if dic[i] == 1:\n            print('YES', i)\n            return\n\n    print('NO')\n    return"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = [stdin[i:i + n] for i in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if strings[i] in strings[j]:\n                return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))\n\"\"\"\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    n = int(n)\n    stdin = stdin[1:]\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.pop(0))\n    m = stdin[0]\n    m = int(m)\n    stdin = stdin[1:]\n    for _ in range(m):\n        string = stdin.pop(0)\n        res = []\n        for s in strings:\n            if string in s:\n                res.append(s)\n        if len(res) == 0:\n            print(\"NO\")\n        else:\n            strings = res\n            print(\"YES\")\n            print(\"\\n\".join(strings))\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    problems = list(map(int, stdin.split(' ')))\n    mishka = problems.pop(0)\n    k = problems.pop(0)\n    solved = 0\n    while not all(i > k for i in problems):\n        solved += 1\n        problems.pop(0)\n    return str(solved)\n\nprint(solution(stdin.strip()))"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the maximum number of problems Mishka can solve.\n    >>> solution('''8 4\n   ... 4 2 3 1 5 1 6 4\n   ... ''')\n    5\n    \"\"\"\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n\n    def test_skill(n: int, k: int, a: List[int]) -> bool:\n        if n == 0:\n            return False\n        if a[0] <= k:\n            return True\n        return False\n\n    i = 0\n    result = 0\n    while i < n:\n        if test_skill(n - 1, k, a):\n            result += 1\n            a.pop(0)\n        elif test_skill(n, k, a):\n            result += 1\n            a.pop()\n        else:\n            return result\n        i += 1\n    return result"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    print(solve(a, n, k))\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split()[0]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(stdin))\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    # 0 - left, 1 - right\n    skill = 0\n    ans = 0\n    # count the number of problems\n    for i, x in enumerate(a):\n        if x <= k:\n            ans += 1\n        elif skill == 0:\n            skill = 1\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    m = len(a)\n    if m == 0:\n        return 0\n    if m == 1:\n        return 1\n    left = 0\n    right = m - 1\n    left_min = a[left]\n    right_max = a[right]\n    while left < right:\n        if right_max - left_min <= k:\n            right -= 1\n            if right >= 0:\n                right_max = max(right_max, a[right])\n            if left >= 0:\n                left_min = min(left_min, a[left])\n        else:\n            left += 1\n            if left < m:\n                left_min = max(left_min, a[left])\n            if right >= 0:\n                right_max = max(right_max, a[right])\n    return (right - left) + 1"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    skills = [int(x) for x in stdin.split()]\n    current_skills = skills\n    left, right = 0, len(skills) - 1\n    while current_skills:\n        if skills[left] > k:\n            current_skills.pop(left)\n            left += 1\n        elif skills[right] > k:\n            current_skills.pop(right)\n            right -= 1\n        else:\n            current_skills.pop(left)\n            current_skills.pop(right)\n    return len(current_skills)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split(\" \")]\n    return str(max(a + b - 1, a * b))"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\nfrom itertools import product\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return '{:d}'.format(2 * (a + b))"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(x) for x in stdin.split())\n    return '{}\\n'.format(min(a * 2, b * 2))"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a, b = int(stdin[0]), int(stdin[1])\n    s = a*b\n    c = a+b\n    return s if a*b == c*(c-a-b) else c*(c-a-b)\n\nassert(solution(input) == 412)\n\"\"\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return (a + b) * 2 - max(a, b)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print((2*a + b) * (a + b))\n    \n    \n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return (a * b) - (a + b)\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = tuple(map(int, stdin.split()))\n    return str(a*b*2)"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    colors = [int(x) for x in stdin.readline().strip()]\n    swaps = []\n    for i in range(n):\n        if colors[i] == 0:\n            if i == 0 or colors[i - 1] == 0:\n                for j in range(i, n):\n                    if colors[j] == 1:\n                        colors[j], colors[i] = colors[i], colors[j]\n                        swaps.append((i, j))\n                        break\n        else:\n            if i == n - 1 or colors[i + 1] == 1:\n                for j in range(i, -1, -1):\n                    if colors[j] == 0:\n                        colors[j], colors[i] = colors[i], colors[j]\n                        swaps.append((i, j))\n                        break\n    if not is_sorted(colors):\n        print(\"NO\")\n        return \"\"\n    print(\"YES\")\n    print(\"\".join(str(x) for x in colors))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n\n    # Make a Counter object that holds the number of each character\n    count = collections.Counter(s)\n\n    # Replace each character with a 0 or 1 depending on whether it is the first character or not\n    return 'YES' if sorted(s) == sorted(s, reverse=True) else 'NO'"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    if sorted(s) == list(s):\n        return \"YES\"\n    return \"NO\"\n\nimport sys"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return \"YES\" if the given string can be colored so that the resulting string is sorted.\n    Return \"NO\" otherwise.\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline()[:n]\n    if ''.join(sorted(s)) == ''.join(s):\n        return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    string = stdin[1:length + 1]\n    if sorted(string) == string:\n        print(\"YES\")\n        print(string)\n    else:\n        print(\"NO\")\n    return ''"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n\n    for _ in range(n):\n        a = stdin[1]\n        if not is_possible(s, a):\n            return \"NO\"\n\n        swap(s, a)\n    return \"YES\" + s\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n\n    for i in range(n):\n        if s[i] == s[i + 1]:\n            return \"NO\"\n\n    colors = [0 for _ in range(n)]\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            colors[i] = 1\n            colors[i + 1] = 1\n\n    res = \"\"\n    for i in range(n):\n        res += str(colors[i])\n    return res\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[1]\n    n = len(s)\n    coloring = [0] * n\n\n    for i in range(1, n):\n        if s[i] > s[i - 1]:\n            if coloring[i - 1]!= 1:\n                return \"NO\"\n            else:\n                coloring[i] = 1\n        else:\n            if coloring[i] == 1:\n                return \"NO\"\n            else:\n                coloring[i] = 0\n    return \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    colors = [0] * n\n    swaps = 0\n    for i in range(n):\n        if s[i] == s[i-1]:\n            colors[i-1] = 1\n            swaps += 1\n    colors.sort()\n    if swaps == 0 or colors == list(range(n)):\n        return \"YES\"\n    colors = ''.join(map(str, colors))\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    price, consumption_tax_rate = tuple(map(int, stdin.split()))\n    return str(max(0, int(price * (1 - consumption_tax_rate) / consumption_tax_rate)))"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return str(A)\n    elif A > B:\n        return str(B)\n    else:\n        return str(A)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    return str(min(a, b, a * 0.1, a * 0.08, b * 0.1, b * 0.08))"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    price_before_tax, consumption_tax_rate = map(int, stdin.split())\n\n    price = price_before_tax * (100 - consumption_tax_rate) / 100\n\n    if price % 1 == 0:\n        return str(int(price))\n\n    return str(int(price) + 1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    for i in range(1, a+1):\n        if i % 5 == 0 and i % 3!= 0:\n            continue\n        if i % 3 == 0 and i % 5!= 0:\n            continue\n        if i % 5 == 0 and i % 3 == 0:\n            continue\n        if a % i == 0 and b % i == 0:\n            return str(i)\n    return '-1'\n\n\n\ndef"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print('No solution')"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 or b == 1:\n        return '-1'\n    ans = -1\n    for i in range(a, b - 1):\n        if i * 0.08 <= a * 0.1 and i * 0.1 <= b * 0.1:\n            ans = i\n            break\n    return str(ans)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return str(A)\n    # In Python, floor() returns the closest lower integer to the given number.\n    # In other languages, you may prefer to round down the result using int(math.floor(x))\n    return str(int(A * 0.08))\n\nassert(solution(stdin) == \"25\")\nassert(solution(stdin) == \"25\")\n\"\"\"\n\nA, B = map(int, stdin.split())\n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(' ')\n    a, b = int(s[0]), int(s[1])\n    if a <= b:\n        return str(-1)\n    elif a < b:\n        return str(int(a*0.1))\n    elif a > b:\n        return str(int(b*0.08))"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    price, tax = tuple(map(int, stdin.split()))\n    return (str(int(price - tax / 0.1)) + '\\n') if price - tax / 0.1 <= price <= price + tax / 0.1 else '-1'"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"NO\"\n    if n == k:\n        return \"YES\"\n    return \"YES\"\n\n\nsolution(stdin)\n\n\n\nimport sys\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # There are 4 days in this competition, each day has 2 problems.\n    # There is no need to make more than 2 problems per day\n    # The first and last days are special: the first day has no problems,\n    # and the last day has n problems, so we have to solve at least 1\n    # problem per day.\n    k, n = [int(x) for x in stdin.split()]\n    if n <= k:\n        return \"NO\"\n    days = [0 for i in range(k)]\n    for i in range(k):\n        days[i] = 1\n        if i + 1 < k:\n            days[i + 1] += 1\n    return \"YES\\n{}\".format(\" \".join(str(i) for i in days))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    if n <= 0 or k <= 0:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join(str(x) for x in range(k, 0, -1))\n\nassert(solution(\"26 6\\n\") == \"YES\\n1 2 4 5 6 8\\n\")\nassert(solution(\"8 3\\n\") == \"NO\\n\")\nassert(solution(\"1 1\\n\") == \"YES\\n1\\n\")\nassert(solution(\"9 4\\n\") == \"NO\\n\")\nassert(solution(\"26 0\\n\") == \"NO\\n\")\nassert(solution(\"-1 0\\n\") == \"NO\\n\")\nassert(solution(\"-1 1\\n\") == \"NO\\n\")\nassert(solution(\"-1 2\\n\") == \"NO\\n\")\nassert(solution(\"-1 4\\n\") == \"NO\\n\")\nassert(solution(\"-1 5\\n\") == \"NO\\n\")\nassert(solution(\"-1 6\\n\") == \"NO\\n\")\nassert(solution(\"-1 7\\n\") == \"NO\\n\")\nassert(solution(\"-1 8\\n\") == \"NO\\n\")\nassert(solution(\"-1 9\\n\") == \"NO\\n\")\nassert(solution(\"-1 10\\n\") == \"NO\\n\")\nassert(solution(\"-1 11\\n\") == \"NO\\n\")\nassert(solution(\"-1 12\\n\") == \"NO\\n\")\nassert(solution(\"-1 13\\n\") == \"NO\\n\")\nassert(solution(\"-1 14\\n\") == \"NO\\n\")\nassert(solution(\"-1 15\\n\") == \"NO\\n\")\nassert(solution(\"-1 16\\n\") == \"NO\\n\")\nassert(solution(\"-1 17\\n\") == \"NO\\n\")\nassert(solution(\"-1 18\\n\") == \"NO\\n\")\nassert(solution(\"-1 19\\n\") == \"NO\\n\")\nassert(solution(\"-1 20\\n\") == \"NO\\n\")\nassert(solution(\"-1 21\\n\") == \"NO\\n\")\nassert(solution(\"-1 22\\n\") == \"NO\\n\")\nassert(solution(\"-1 23\\n\") == \"NO\\n\")\nassert(solution(\"-1 24\\n\") == \"NO\\n\")\nassert(solution(\"-1 25\\n\") == \"NO\\n\")\nassert(solution(\"-1 26\\n\") == \"NO\\n\")\nassert(solution(\"-1 27\\n\") == \"NO\\n\")\nassert(solution(\"-1 28\\n\") == \"NO\\n\")\nassert(solution(\"-1 29\\n\") == \"NO\\n\")\nassert(solution(\"-1 30\\n\") == \"NO\\n\")\nassert(solution(\"-1 31\\n\") == \"NO\\n\")\nassert(solution(\"-1 32\\n\") == \"NO\\n\")\nassert(solution(\"-1 33\\n\") == \"NO\\n\")\nassert(solution(\"-1 34\\n\") == \"NO\\n\")\nassert(solution(\"-1 35\\n\") == \"NO\\n\")\nassert(solution(\"-1 36\\n\") == \"NO\\n\")\nassert(solution(\"-1 37\\n\") == \"NO\\n\")\nassert(solution(\"-1 38\\n\") == \"NO\\n\")\nassert(solution(\"-1 39\\n\") == \"NO\\n\")\nassert(solution(\"-1 40\\n\") == \"NO\\n\")\nassert(solution(\"-1 41\\n\") == \"NO\\n\")\nassert(solution(\"-1 42\\n\") == \"NO\\n\")\nassert(solution(\"-1 43\\n\") == \"NO\\n\")\nassert(solution(\"-1 44\\n\") == \"NO\\n\")\nassert(solution(\"-1 45\\n\") == \"NO\\n\")\nassert(solution(\"-1 46\\n\") == \"NO\\n\")\nassert(solution(\"-1 47\\n\") == \"NO\\n\")\nassert(solution(\"-1 48\\n\") == \"NO\\n\")\nassert(solution(\"-1 49\\n\") == \"NO\\n\")\nassert(solution(\"-1 50\\n\") == \"NO\\n\")\nassert(solution(\"-1 51\\n\") == \"NO\\n\")\nassert(solution(\"-1 52\\n\") == \"NO\\n\")\nassert(solution(\"-1 53\\n\") == \"NO\\n\")\nassert(solution(\"-1 54\\n\") == \"NO\\n\")\nassert(solution(\"-1 55\\n\") == \"NO\\n\")\nassert(solution(\"-1 56\\n\") == \"NO\\n\")\nassert(solution(\"-1 57\\n\") == \"NO\\n\")\nassert(solution(\"-1 58\\n\") == \"NO\\n\")\nassert(solution(\"-1 59\\n\") == \"NO\\n\")\nassert(solution(\"-1 60\\n\") == \"NO\\n\")\nassert(solution(\"-1 61\\n\") == \"NO\\n\")\nassert(solution(\"-1 62\\n\") == \"NO\\n\")\nassert(solution(\"-1 63\\n\") == \"NO\\n\")\nassert(solution(\"-1 64\\n\") == \"NO\\n\")\nassert(solution(\"-1 65\\n\") == \"NO\\n\")\nassert(solution(\"-1 66\\n\") == \"NO\\n\")\nassert(solution(\"-1 67\\n\") == \"NO\\n\")\nassert(solution(\"-1 68\\n\") == \"NO\\n\")\nassert(solution(\"-1 69\\n\") == \"NO\\n\")\nassert(solution(\"-1 70\\n\") == \"NO\\n\")\nassert("
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\nassert sorted(solution(stdin)) == [1, 2, 4, 5, 6, 8]\nassert sorted(solution(stdin)) == [1, 2, 4, 5, 6, 8]\nassert sorted(solution(stdin)) == [1, 2, 4, 5, 6, 8]\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().strip()\n    n, k = [int(x) for x in line.split(\" \")]\n    a = [0] * k\n    for i in range(k):\n        line = stdin.readline().strip()\n        a[i] = int(line)\n    return \"YES\\n\" + \"\\n\".join(map(str, a)) if sum(a) == n and all(a[i] > a[i+1] if i+1 < k else True for i in range(k)) else \"NO\"\n\nassert(solution(StringIO(\"26 6\\n\")) == \"YES\\n1 2 4 5 6 8\\n\")\nassert(solution(StringIO(\"8 3\\n\")) == \"NO\\n\")\nassert(solution(StringIO(\"1 1\\n\")) == \"YES\\n1\\n\")\nassert(solution(StringIO(\"9 4\\n\")) == \"NO\\n\")\n\n\"\"\""
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = [int(x) for x in stdin.strip().split(' ')]\n    if n < 1 or k < 1 or k > 10**5:\n        return 'NO'\n    days = k\n    solutions = [0] * k\n    solutions[0] = n\n    for i in range(1, k):\n        solutions[i] = i * 2 + solutions[i - 1]\n    solutions = [x for x in solutions if x <= n]\n    if len(solutions) < k:\n        return 'NO'\n    return 'YES' + '\\n' +''.join([str(x) for x in solutions])\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.readline().split())\n    if n <= 0:\n        return 'NO'\n    if n < k:\n        return 'NO'\n    elif n == k:\n        return 'YES'\n    else:\n        a = [0] * k\n        a[0] = 1\n        a[1] = 1\n        for i in range(2, k):\n            if a[i - 1] < 2 * a[i - 2]:\n                a[i] = a[i - 1] + 1\n            else:\n                a[i] = 1\n        return 'YES\\n' +''.join(map(str, a))\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    days, cases = map(int, stdin.split())\n    if days < 2:\n        return 'NO'\n    if cases < 1 or days < cases:\n        return 'NO'\n    if days % 2 == 0:\n        return 'NO'\n    if days % 2 == 1:\n        if cases % 2 == 1:\n            return 'NO'\n        if cases % 2 == 0:\n            cases -= 1\n    if cases == 1:\n        return str(1) + '\\n1'\n    if cases == 2:\n        return str(1) + '\\n2'\n    if cases == 3:\n        return str(1) + '\\n2'\n    if cases == 4:\n        return str(1) + '\\n3'\n    if cases == 5:\n        return str(2) + '\\n3'\n    if cases == 6:\n        return str(2) + '\\n4'\n    if cases == 7:\n        return str(2) + '\\n5'\n    if cases == 8:\n        return str(3) + '\\n5'\n    if cases == 9:\n        return str(3) + '\\n6'\n    if cases == 10:\n        return str(3) + '\\n7'\n    if cases == 11:\n        return str(4) + '\\n7'\n    if cases == 12:\n        return str(4) + '\\n8'\n    if cases == 13:\n        return str(4) + '\\n9'\n    if cases == 14:\n        return str(5) + '\\n9'\n    if cases == 15:\n        return str(5) + '\\n10'\n    if cases == 16:\n        return str(6) + '\\n10'\n    if cases == 17:\n        return str(6) + '\\n11'\n    if cases == 18:\n        return str(7) + '\\n11'\n    if cases == 19:\n        return str(7) + '\\n12'\n    if cases == 20:\n        return str(8) + '\\n12'\n    if cases == 21:\n        return str(8) + '\\n13'\n    if cases == 22:\n        return str(9) + '\\n13'\n    if cases == 23:\n        return str(9) + '\\n14'\n    if cases == 24:\n        return str(10) + '\\n14'\n    if cases == 25:\n        return str(10) + '\\n15'\n    if cases == 26:\n        return str(11) + '\\n15'\n    if cases == 27:\n        return str(11) + '\\n16'\n    if cases == 28:\n        return str(12) + '\\n16'\n    if cases == 29:\n        return str(12) + '\\n17'\n    if cases == 30:\n        return str(13) + '\\n17'\n    if cases == 31:\n        return str(13) + '\\n18'\n    if cases == 32:\n        return str(14) + '\\n18'\n    if cases == 33:\n        return str(14) + '\\n19'\n    if cases == 34:\n        return str(15) + '\\n19'\n    if cases == 35:\n        return str(15) + '\\n20'\n    if cases == 36:\n        return str(16) + '\\n20'\n    if cases == 37:\n        return str(16) + '\\n21'\n    if cases == 38:\n        return str(17) + '\\n21'\n    if cases == 39:\n        return str(17) + '\\n22'\n    if cases == 40:\n        return str(18) + '\\n22'\n    if cases == 41:\n        return str(18) + '\\n23'\n    if cases == 42:\n        return str(19) + '\\n23'\n    if cases == 43:\n        return str(19) + '\\n24'\n    if cases == 44:\n        return str(20) + '\\n24'\n    if cases == 45:\n        return str(20) + '\\n25'\n    if cases == 46:\n        return str(21) + '\\n25'\n    if cases == 47:\n        return str(21) + '\\n26'\n    if cases == 48:\n        return str(22) + '\\n26'\n    if cases == 49:\n        return str(22) + '\\n27'\n    if cases == 50:\n        return str(23) + '\\n27'\n    if cases == 51:\n        return str(23) + '\\n28'\n    if cases == 52:\n        return str(24) + '\\n28'\n    if cases == 53:\n        return str(24) + '\\n29'\n    if cases == 54:\n        return str(25) + '\\n29'\n    if cases == 55:\n        return str(25) + '\\n30'\n    if cases == 56:\n        return str(26) + '\\n30'\n    if cases == 57:\n        return str(26) + '\\n31'\n    if cases == 58:\n        return str(27) + '\\n31'\n    if cases == 59:\n        return str(27) + '\\n32'\n    if cases == 60:\n        return str(28) + '\\n32'\n    if cases == 61:\n        return str(28) + '\\n33'\n    if cases == 62:\n        return str(29) + '\\n33'\n    if cases == 63:\n        return str(29) + '\\n34'\n    if cases == 64:\n        return str(30) + '\\n34'\n    if cases == 65:\n        return str(30) + '\\n35'\n    if cases == 66:\n        return str(31) + '\\n35'\n    if cases == 67:\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = [1] * k\n    res = sum(l)\n    while l[0] < n:\n        l[0] += 1\n        for i in range(k):\n            if l[i] < n:\n                l[i] += 1\n            if l[i] <= 2 * l[i - 1]:\n                l[i - 1] = l[i]\n        res += 1\n    if res == n:\n        return \"YES\\n\" +''.join(map(str, l))\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(k):\n        if sum(map(int, stdin.split()))!= n:\n            return \"NO\"\n        a = list(map(int, stdin.split()))\n        if a[0] > 0:\n            for j in range(1, len(a)):\n                if a[j] < a[j - 1] <= 2 * a[j]:\n                    continue\n                else:\n                    break\n            else:\n                return \"YES\" + '\\n' +''.join(map(str, a))\n    return \"NO\"\nprint(solution(input()))\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    projects = [list(map(int, stdin.split())) for i in range(n)]\n    arr = []\n    for i in projects:\n        arr.append(i[0])\n        arr.append(i[1])\n    arr.sort(reverse=True)\n    arr = list(set(arr))\n    arr.sort()\n    max = 0\n    for i in arr:\n        if i < 0:\n            break\n        if i + r > 0:\n            max += 1\n    return max"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using Polycarp's rating to check on the next project, get the maximum possible size of a subset of projects\n    that Polycarp can choose to do.\n    \"\"\"\n    n, r = map(int, stdin.split())\n\n    prices = []\n    for _ in range(n):\n        prices.append(list(map(int, stdin.split())))\n    prices.sort(key=lambda x: -x[1])\n\n    profit = 0\n\n    for i in range(n):\n        profit += prices[i][1]\n        if profit >= r:\n            break\n\n    return i + 1\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, rating = [int(x) for x in stdin.split()]\n    assert 1 <= n <= 100\n    assert 1 <= rating <= 30000\n    projects = []\n    for _ in range(n):\n        r, d = [int(x) for x in stdin.split()]\n        assert -300 <= r <= 300\n        assert -300 <= d <= 300\n        projects.append((r, d))\n    projects.sort(key=lambda x: x[0])\n\n    def min_rating(projects, rating):\n        n = len(projects)\n        max_rating = 0\n        for i, (r, d) in enumerate(projects):\n            rating += d\n            if rating < 0:\n                break\n            max_rating = max(max_rating, i)\n        return max_rating\n\n    max_rating = 0\n    for i, (r, d) in enumerate(projects):\n        rating += d\n        if rating < 0:\n            break\n        max_rating = max(max_rating, min_rating(projects[:i], rating))\n    return max_rating + 1"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    rating = [int(x) for x in stdin.split()]\n    rating.sort()\n    ans = 0\n    i = 0\n    for x in rating:\n        if i + 1 < n and x + rating[i + 1] <= r:\n            ans += 1\n            i += 1\n    return str(ans)\n\nassert(solution(stdin) == stdin)\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_projects, rating = [int(x) for x in stdin.split(' ')]\n    projects = [int(x) for x in stdin.split(' ')[1:]]\n    projects.sort()\n    print(projects)\n    rating_changes = [int(x) for x in stdin.split(' ')[1:]]\n    rating_changes.sort()\n    print(rating_changes)\n    polycarp_rating = rating\n    max_size = 0\n    for i in range(len(projects)):\n        if polycarp_rating < 0:\n            break\n        polycarp_rating += rating_changes[i]\n        max_size = max(max_size, polycarp_rating)\n    return str(max_size)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N, R = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    projects = [int(x.split()[0]) for x in stdin[1:N+1]]\n    ratings = [int(x.split()[1]) for x in stdin[1:N+1]]\n    max_size = 0\n    r = R\n    for x in projects:\n        if r <= x:\n            max_size += 1\n            r += ratings[projects.index(x)]\n    return str(max_size)\n\nT = int(input())\n\nfor t in range(1, T+1):\n    N, R = [int(x) for x in input().split()]\n    projects = [int(x) for x in input().split()]\n    ratings = [int(x) for x in input().split()]\n    max_size = 0\n    r = R\n    for x in projects:\n        if r <= x:\n            max_size += 1\n            r += ratings[projects.index(x)]\n    print('Case #{}: {}'.format(t, max_size))\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\nimport os"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    num_projects, rating = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    ratings = []\n    for i in range(num_projects):\n        ratings.append(int(stdin[i+1].split()[0]))\n    ratings.sort()\n    ratings = [0] + ratings + [rating]\n    current_rating = rating\n    output = 0\n    for i in range(1, len(ratings)):\n        if current_rating < 0:\n            break\n        current_rating += ratings[i] - ratings[i-1]\n        output = max(output, i-1)\n    return str(output)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, r = [int(num) for num in stdin[0].split(\" \")]\n    projects = []\n    for i in range(1, n+1):\n        a, b = [int(num) for num in stdin[i].split(\" \")]\n        projects.append((a, b))\n    max_size = 0\n    for i in range(n):\n        if projects[i][1] >= 0:\n            for j in range(i+1, n):\n                if projects[j][0] >= 0:\n                    if max_size < i+1+j:\n                        max_size = i+1+j\n    return str(max_size)"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    projects = [list(map(int, stdin.split())) for _ in range(n)]\n    projects.sort()\n    rating = r\n    result = 0\n    for i, (a, b) in enumerate(projects):\n        if rating >= a:\n            rating += b\n            result += 1\n        else:\n            break\n    return str(result)"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    matrix = [stdin.readline().strip() for _ in range(n)]\n    m = len(matrix)\n    n = len(matrix[0])\n\n    matrix = list(zip(*matrix))\n    matrix = [list(i) for i in matrix]\n\n    # print(matrix)\n\n    if is_palindrome(matrix):\n        for i in range(n):\n            for j in range(m):\n                print(matrix[i][j], end=' ')\n            print()\n        return \"YES\"\n\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nfrom collections import Counter\n\nn = int(input())\nmatrix = [list(map(int, stdin.split())) for _ in range(n)]\n\nl = len(matrix)\nc = Counter(matrix[0])"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    matrix = [list(map(int, stdin.readline().strip().split())) for _ in range(N)]\n    for line in matrix:\n        if sorted(line)!= list(range(1, N + 1)):\n            print(\"NO\")\n            return\n    print(\"YES\")\n    for line in matrix:\n        print(\" \".join(map(str, line)))\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\"\"\"\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows_count, *rows = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for _ in range(rows_count)]\n    for i in range(rows_count):\n        if sorted(matrix[i])!= [matrix[i][j] for j in range(len(matrix[i]))]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\nimport sys\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 20:\n        return \"NO\"\n\n    numbers = stdin.split()\n\n    if len(numbers)!= n ** 2:\n        return \"NO\"\n\n    numbers = [int(x) for x in numbers]\n\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i, num in enumerate(numbers):\n        if matrix[i / n][i % n]!= 0:\n            return \"NO\"\n        matrix[i / n][i % n] = num\n\n    # Flip the matrix and check for palindromicity\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = matrix[j][i]\n\n    for row in matrix:\n        if check_palindrome(row):\n            return \"YES\\n\" + \"\\n\".join([str(x) for x in row])\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(i) for i in stdin.split()]\n    matrix = [[int(i) for i in stdin.split()] for j in range(m)]\n    row_sum = [sum(i) for i in zip(*matrix)]\n    matrix_sum = [sum(row) for row in zip(*matrix)]\n    return \"YES\" if (max(row_sum) == min(row_sum) == max(matrix_sum) == min(matrix_sum) == sum(row_sum) == sum(matrix_sum)) else \"NO\"\n\nassert(solution(input()) == \"YES\")\nassert(solution(input()) == \"NO\")\nassert(solution(input()) == \"YES\")\nassert(solution(input()) == \"NO\")\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\n\nT = int(sys.stdin.readline().strip())\n\nfor _ in range(T):\n    n, r = map(int, sys.stdin.readline().split())\n    projects = [map(int, sys.stdin.readline().split()) for _ in range(n)]\n    pass\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.strip().split()]\n    rating_history = [int(x) for x in stdin.strip().split()]\n    prev_rating = r\n    for rating in rating_history:\n        if rating < 0:\n            break\n        if rating < prev_rating:\n            return 'NO'\n        prev_rating -= rating\n    return 'YES'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if _solution(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    rating = map(int, stdin.split())\n    diff = []\n    for i in range(1, n+1):\n        diff.append((rating[i] - rating[i-1])/2)\n    diff.sort()\n    maxdiff = max(diff)\n    if (maxdiff < 0):\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert (solution('''3 4\n4 6\n10 -2\n8 -1''') == 'YES')\nassert (solution('''3 5\n4 -5\n4 -2\n1 3\n''') == 'YES')\nassert (solution('''3 10\n10 0\n10 -10\n30 0\n''') == 'NO')\nassert (solution('''4 4\n5 2\n5 -3\n2 1\n4 -2''') == 'YES')\nassert (solution('''4 10\n10 0\n10 -10\n30 0\n''') == 'NO')\nassert (solution('''6 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n''') == 'NO')\nassert (solution('''6 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'YES')\nassert (solution('''6 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'YES')\nassert (solution('''7 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'NO')\nassert (solution('''7 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'YES')\nassert (solution('''7 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'YES')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'NO')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'YES')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'YES')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'NO')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'YES')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'NO')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'YES')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'NO')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'YES')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'NO')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'YES')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'NO')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'YES')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1 3\n3 2\n''') == 'NO')\nassert (solution('''10 4\n4 6\n10 -2\n8 -1\n6 -3\n1 3\n5 -2\n5 -2\n4 3\n4 2\n5 2\n5 1\n4 1\n1"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    p_rating = [int(x) for x in stdin.split()]\n    \n    if r < 0:\n        return \"NO\"\n    else:\n        for i in range(n):\n            p_rating[i] += (r - p_rating[i])\n            r = p_rating[i]\n        return \"YES\" if r >= 0 else \"NO\"\n\nsolution(stdin.read())"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, rating = [int(s) for s in stdin.split()]\n    projects = [tuple(int(s) for s in stdin.split()) for _ in range(n)]\n    return \"YES\" if all(rating - a >= 0 for a, _ in projects) and all(a + b <= rating for a, b in projects) else \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nn, r = map(int, stdin.split(\" \"))\nprojects = []\n\nfor _ in range(n):\n    a, b = map(int, stdin.split(\" \"))\n    projects.append((a, b))\n\nprojects.sort(key=lambda x: x[0], reverse=True)\n\nrating = r\n\nfor i, (a, b) in enumerate(projects):\n    if i == 0:\n        if a >= r:\n            print(\"NO\")\n            return\n    else:\n        if a >= rating:\n            print(\"NO\")\n            return\n    rating += b\n\nprint(\"YES\")\n\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = tuple(map(int, stdin.strip().split()))\n    c = list(map(int, stdin.strip().split()))\n    \n    pos = {0}\n    for i in range(m):\n        pos.add(c[i])\n    \n    for i in range(m):\n        pos.add(n + 1 - c[i])\n    \n    a = [0] * n\n    \n    for i in range(n):\n        if i + c[0] not in pos:\n            a[i] = 1\n        else:\n            a[i] = i + 1\n    \n    for i in range(n - 1):\n        for j in range(m):\n            a[i + c[j]] = a[i + c[j] - 1] + 1\n    \n    return \"YES\\n\" + \"\\n\".join(map(str, a))\n\"\"\""
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return 'YES' if is_possible(n, m, d, a) else 'NO'\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \nassert solution(input()) == ''\nassert solution(input()) == ''\nassert solution(input()) == ''\n\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < n\n\n    def jump(x, y):\n        if is_valid(x, y) and not is_platform(x, y):\n            a[x] = y\n\n    n, m, d = map(int, stdin.split())\n    a = [0] * (n + 2)\n    a[0] = 1\n    a[n + 1] = 1\n\n    for _ in range(m):\n        c = list(map(int, stdin.split()))\n        if is_valid(c[0], c[1]):\n            jump(c[0], c[1])\n        else:\n            a[c[1]] = c[0]\n\n    # print(a)\n    return 'YES' if a[n + 1] == n + 1 else 'NO'\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(n) for n in stdin.split()]\n    l = [int(c) for c in stdin.split()]\n    if sum(l) > n:\n        return 'NO'\n    m = [0] + m + [n+1]\n    a = [0] * (n+2)\n    for i in range(1, n+1):\n        if i < m[i]:\n            a[i] = i\n        else:\n            a[i] = m[i]-1\n    return 'YES' +'' +''.join(map(str, a))"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    a = [0] * (n + 2)\n    for i in range(m):\n        a[c[i]] = i + 1\n    return 'YES' if a[n + 1] else 'NO'\n\nprint(solution('10 1 5'))\nprint(solution('10 1 11'))\nprint(solution('7 3 2'))\nprint(solution('7 3 1'))\n\n\n-----\n\nTHE CORE IS FOUND AT THE ROWS\n(i)  [0, 0, 1, 2, 3, 4, 5, 6, 7, 8]\n(ii) [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 8]\n(iii) [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]\n\n(i)  [0, 0, 1, 2, 3, 4, 5, 6, 7, 8]\n(ii) [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 8]\n(iii) [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]\n\n(i)  [0, 0, 1, 2, 3, 4, 5, 6, 7, 8]\n(ii) [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 8]\n(iii) [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]\n\n(i)  [0, 0, 1, 2, 3, 4, 5, 6, 7, 8]\n(ii) [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 8]\n(iii) [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]\n\n(i)  [0, 0, 1, 2, 3, 4, 5, 6, 7, 8]\n(ii) [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 8]\n(iii) [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]\n\n(i)  [0, 0, 1, 2, 3, 4, 5, 6, 7, 8]\n(ii) [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n_input = \"\"\"bbaba\nbb\n\"\"\"\n\nprint(solution(_input))\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_subsequence(s, t):\n        return s[:len(t)] == t\n\n    substrings = set()\n\n    for i in range(len(stdin)):\n        for j in range(i + 1, len(stdin) + 1):\n            substrings.add(stdin[i:j])\n\n    for i in range(len(stdin)):\n        for j in range(i + 1, len(stdin) + 1):\n            if is_subsequence(stdin[i:j], stdin):\n                return j - i\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n_s = stdin.strip()\n_t = stdin.strip()\nprint(solution(_s, _t))\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if s == t:\n        return 0\n    l = len(s)\n    for i in range(l, 0, -1):\n        r = l - i\n        if s[:i] == t[:i] and s[r:] == t[r:]:\n            return i\n    return 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n\n    t = set(t)\n\n    indx = {}\n    for i, c in enumerate(s):\n        indx[c] = i\n\n    def get_arr(s, t):\n        if s == t:\n            return [0]\n        if len(s) < len(t):\n            return []\n\n        arr = []\n        for i in range(len(s) - len(t) + 1):\n            if s[i:i + len(t)] == t:\n                arr.append(i)\n        return arr\n\n    def get_min_len(s, t, indx):\n        arr = get_arr(s, t)\n        if arr:\n            return len(s) - len(t) + arr[0]\n\n        arr = get_arr(s[1:], t)\n        if arr:\n            return len(s) - len(t) + 1 + arr[0]\n\n        arr = get_arr(s[2:], t)\n        if arr:\n            return len(s) - len(t) + 2 + arr[0]\n\n        arr = get_arr(s[3:], t)\n        if arr:\n            return len(s) - len(t) + 3 + arr[0]\n\n        arr = get_arr(s[4:], t)\n        if arr:\n            return len(s) - len(t) + 4 + arr[0]\n\n        return -1\n\n    return str(get_min_len(s, t, indx))\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the maximum possible length of the substring you can remove so that $t$ is still a subsequence of $s$.\n    >>> solution(\"bbaba\",\"bb\")\n    3\n    >>> solution(\"baaba\",\"ab\")\n    2\n    >>> solution(\"abcde\",\"abcde\")\n    0\n    >>> solution(\"asdfasdf\",\"fasd\")\n    3\n    \"\"\"\n    s = stdin.strip()\n    t = stdin.strip()\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(len(s) - i):\n            if s[i : i + j + 1] == t:\n                max_len = max(max_len, j)\n    return max_len\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    n = len(s)\n    m = len(t)\n\n    f = [[0] * (n + 1) for _ in range(n + 1)]\n    g = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        f[i][i] = 1\n        g[i][i] = 1\n\n    for gap in range(1, n):\n        for i in range(n - gap):\n            j = i + gap\n            f[i][j] = 0\n            g[i][j] = 0\n            for k in range(i, j):\n                if s[i] == s[k]:\n                    f[i][j] += f[i][k]\n                if s[k] == s[j]:\n                    g[i][j] += g[i][k]\n                if f[i][k]!= 0 and f[k + 1][j]!= 0:\n                    f[i][j] += f[k + 1][j]\n                    g[i][j] += g[k + 1][j]\n    return f, g, n, m\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    return len(s) - len(t)\n\nassert(solution('bbaba\\nbb\\n') == 3)\nassert(solution('baaba\\nab\\n') == 2)\nassert(solution('abcde\\nabcde\\n') == 0)\nassert(solution('asdfasdf\\nfasd\\n') == 3)"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 0.0 or x > 5.0:\n        raise ValueError(\"Invalid input\")\n    if x == 1.0:\n        return str(0) + \" \" + str(0)\n    if x == 2.0:\n        return str(0) + \" \" + str(0)\n    if x == 3.0:\n        return str(0) + \" \" + str(0)\n    if x == 4.0:\n        return str(0) + \" \" + str(0)\n    if x == 5.0:\n        return str(0) + \" \" + str(0)\n    a,b = quadratic_roots(x)\n    return str(a) + \" \" + str(b)"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if x < 0 or x > 5:\n        raise ValueError('Number should be between 0 and 5')\n    else:\n        a = 1\n        b = 1\n        while True:\n            if b > 10:\n                b = 1\n                a += 1\n            if (5 - x) * a + b * a == 10:\n                return f'{a} {b}'\n            b += 1\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def s(a: int, b: int) -> str:\n        return f\"{a} {b}\"\n    x = float(stdin)\n    ans = 10 ** 6\n    for i in range(10, 11):\n        for j in range(10, 11):\n            if abs(x - (i * j)) < ans:\n                ans = abs(x - (i * j))\n                a = i\n                b = j\n    return s(a, b)"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n-----\n\n##Explanation\n\nGiven a random number x with exactly 6 decimal places (0 < x < 5), use bisection to find the two integers that x is closest to.\n\n##What is bisection?\n\nBisection is the technique of finding an interval in which a particular real number falls, such that it has a finite number of intervals, where each interval is of size 0.1. It is often used to find the min and max of a real-valued function.\n\n##How do I use bisection?\n\nThe bisection algorithm divides the interval in half, then finds the midpoint, and recursively calls the function until it is less than or equal to the input. If the midpoint is less than the input, the interval is divided into two and the function is called again to find the other end of the interval.\n\n##Example\n\nIf the function is f(x) = 1 + x^2, and x = 1.5, then the algorithm divides the interval into the following two regions:\n\n1.   0 < x < 1.5\n2.   x > 1.5\n\nThe midpoint is x = 0.5, which is less than 1.5, so the interval is divided into two, and the function is called again.\n\n##Another example\n\nIf the function is f(x) = x^2 - 2x + 1, and x = 1.5, then the algorithm divides the interval into the following two regions:\n\n1.   0 < x < 1.5\n2.   x > 1.5\n\nThe midpoint is x = 0.5, which is less than 1.5, so the interval is divided into two, and the function is called again.\n\n##Constraints\n\n1.   1.0 <= x <= 5.0\n2.   0 < x < 5.0\n\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = float(stdin)\n    return str(int(number))"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    x = float(x)\n    x = round(x,6)\n    \n    a = round(x,1)\n    b = round(x,2)\n    c = round(x,3)\n    d = round(x,4)\n    e = round(x,5)\n    f = round(x,6)\n    \n    if a == x:\n        return str(a)+\" \"+str(b)\n    elif b == x:\n        return str(b)+\" \"+str(c)\n    elif c == x:\n        return str(c)+\" \"+str(d)\n    elif d == x:\n        return str(d)+\" \"+str(e)\n    elif e == x:\n        return str(e)+\" \"+str(f)\n    elif f == x:\n        return str(f)+\" \"+str(a)\n    else:\n        return \"Error\"\n\nassert(solution(\"1.200000\") == \"3 2\")\nassert(solution(\"2.572479\") == \"10 3\")\nassert(solution(\"4.024922\") == \"9 9\")\nprint(\"All tests passed successfully.\")\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x: float = float(stdin)\n    n: int = 1\n    while x * n < 4:\n        n += 1\n    return \"%d %d\" % (n - 1, n)\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin.strip())\n    a = math.floor(x)\n    b = x - a\n    return''.join(map(str, [a, b * 10]))"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    if d < n - 1:\n        return 'NO'\n    if n <= 4 * pow(10, 5):\n        print('YES')\n        for _ in range(n - 1):\n            print(*sorted(map(int, stdin.split())), sep='\\n')\n        return\n    if d < n - 1 and k < n - 1:\n        return 'NO'\n    if k < n - 1:\n        return 'NO'\n    return 'YES'\n\nassert(solution('''6 3 3''') == 'YES')\nassert(solution('''10 4 3''') == 'YES')\nassert(solution('''8 5 3''') == 'YES')\nassert(solution('''8 5 1''') == 'YES')\nassert(solution('''10 5 3''') == 'YES')\nassert(solution('''3 3 2''') == 'NO')\nassert(solution('''3 3 3''') == 'NO')\nassert(solution('''6 2 3''') == 'NO')\nassert(solution('''6 2 1''') == 'NO')\nassert(solution('''6 2 2''') == 'NO')\nassert(solution('''6 2 3''') == 'NO')\nassert(solution('''6 3 1''') == 'NO')\nassert(solution('''6 3 2''') == 'NO')\nassert(solution('''6 3 3''') == 'NO')\nassert(solution('''6 4 1''') == 'NO')\nassert(solution('''6 4 2''') == 'NO')\nassert(solution('''6 4 3''') == 'NO')\nassert(solution('''6 5 1''') == 'NO')\nassert(solution('''6 5 2''') == 'NO')\nassert(solution('''6 5 3''') == 'NO')\nassert(solution('''8 2 3''') == 'NO')\nassert(solution('''8 3 1''') == 'NO')\nassert(solution('''8 3 2''') == 'NO')\nassert(solution('''8 3 3''') == 'NO')\nassert(solution('''8 4 1''') == 'NO')\nassert(solution('''8 4 2''') == 'NO')\nassert(solution('''8 4 3''') == 'NO')\nassert(solution('''8 5 1''') == 'NO')\nassert(solution('''8 5 2''') == 'NO')\nassert(solution('''8 5 3''') == 'NO')\nassert(solution('''10 2 3''') == 'NO')\nassert(solution('''10 3 1''') == 'NO')\nassert(solution('''10 3 2''') == 'NO')\nassert(solution('''10 3 3''') == 'NO')\nassert(solution('''10 4 1''') == 'NO')\nassert(solution('''10 4 2''') == 'NO')\nassert(solution('''10 4 3''') == 'NO')\nassert(solution('''10 5 1''') == 'NO')\nassert(solution('''10 5 2''') == 'NO')\nassert(solution('''10 5 3''') == 'NO')\nassert(solution('''3 2 1''') == 'NO')\nassert(solution('''3 2 2''') == 'NO')\nassert(solution('''3 2 3''') == 'NO')\nassert(solution('''3 3 1''') == 'NO')\nassert(solution('''3 3 2''') == 'NO')\nassert(solution('''3 3 3''') == 'NO')\nassert(solution('''3 4 1''') == 'NO')\nassert(solution('''3 4 2''') == 'NO')\nassert(solution('''3 4 3''') == 'NO')\nassert(solution('''3 5 1''') == 'NO')\nassert(solution('''3 5 2''') == 'NO')\nassert(solution('''3 5 3''') == 'NO')\nassert(solution('''6 2 1''') == 'NO')\nassert(solution('''6 2 2''') == 'NO')\nassert(solution('''6 2 3''') == 'NO')\nassert(solution('''6 3 1''') == 'NO')\nassert(solution('''6 3 2''') == 'NO')\nassert(solution('''6 3 3''') == 'NO')\nassert(solution('''6 4 1''') == 'NO')\nassert(solution('''6 4 2''') == 'NO')\nassert(solution('''6 4 3''') == 'NO')\nassert(solution('''6 5 1''') == 'NO')\nassert(solution('''6 5 2''') == 'NO')\nassert(solution('''6 5 3''') == 'NO')\nassert(solution('''8 2 1''') == 'NO')\nassert(solution('''8 2 2''') == 'NO')\nassert(solution('''8 2 3''') == 'NO')\nassert(solution('''8 3 1''') == 'NO')\nassert(solution('''8 3 2''') == 'NO')\nassert(solution('''8 3 3''') == 'NO')\nassert(solution('''8 4 1''') == 'NO')\nassert(solution('''8 4 2''') == 'NO')\nassert(solution('''8 4 3''') == 'NO')\nassert(solution('''8 5 1''') == 'NO')\nassert(solution('''8 5 2''') == 'NO')\nassert(solution('''8 5 3''') == 'NO')\nassert(solution('''10 2 1''') == 'NO')\nassert(solution('''10 2 2''') == 'NO')\nassert(solution('''10 2 3''') == 'NO')\nassert(solution('''10 3 1''') == 'NO')\nassert(solution('''10 3 2''') == 'NO')\nassert(solution('''10 3 3''') == 'NO')\nassert(solution('''10 4 1''') == 'NO')\nassert(solution('''10 4 2''') == 'NO')\nassert(solution('''10 4 3''') == 'NO')\nassert(solution('''10 5 1''') == 'NO')\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(s) for s in stdin.split()]\n    if n - 1 <= k:\n        return \"NO\"\n    print(\"YES\")\n    print(n - 1)\n    for i in range(1, n):\n        print(i, i + 1)\n    return \"YES\"\n\n\nassert solution(stdin) == stdout\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n\n    t = tree(n, d, k)\n    if t is None:\n        return \"NO\"\n    return \"YES\\n\" + t.nth_line()\n\n\nclass tree:\n    def __init__(self, n: int, d: int, k: int):\n        self.n = n\n        self.d = d\n        self.k = k\n\n        self.nodes = [0] * n\n        self.edges = [[] for _ in range(n)]\n\n    def add_edge(self, a: int, b: int) -> None:\n        self.edges[a - 1].append(b - 1)\n        self.edges[b - 1].append(a - 1)\n\n    def add_node(self) -> None:\n        self.nodes.append(len(self.nodes))\n\n    def nth_line(self) -> str:\n        return \" \".join(map(str, self.nodes))\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.strip().split()]\n    tree = set()\n\n    for _ in range(n - 1):\n        u, v = [int(x) for x in stdin.strip().split()]\n        if u in tree:\n            tree.add(v)\n        elif v in tree:\n            tree.add(u)\n        else:\n            tree.add(u)\n            tree.add(v)\n    tree = list(tree)\n    tree.sort()\n    tree = sorted(tree, key=lambda x: x - n // 2)\n    tree =''.join(str(x) for x in tree)\n\n    if len(tree) < d - k:\n        print('NO')\n        return\n\n    if len(tree) == d - k:\n        print('YES')\n        print(tree)\n        return\n\n    print('YES')\n    print(len(tree) - (d - k) - 1)\n    print(tree)\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    if not 1 <= d <= 4 * 10 ** 5 and not 1 <= k <= 4 * 10 ** 5:\n        return \"NO\"\n    if not 1 <= n - 1 <= 10 ** 5:\n        return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = (int(x) for x in stdin.split())\n    if d > 4 * (10 ** 5):\n        return \"NO\"\n    if k > 4 * (10 ** 5):\n        return \"NO\"\n    if d % 2 == 1:\n        return \"NO\"\n    if k % 2 == 1:\n        return \"NO\"\n    if n - 1 < d or n - 1 < k:\n        return \"NO\"\n    edges = [set() for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = (int(x) for x in stdin.split())\n        edges[u - 1].add(v - 1)\n        edges[v - 1].add(u - 1)\n    print(\"YES\")\n    for i in range(n - 1):\n        print(i + 1, end=\" \")\n        for j in edges[i]:\n            print(j + 1, end=\" \")\n        print()\n    return \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = tuple(map(int, stdin.split()))\n\n    def build_tree(size: int, depth: int, max_depth: int) -> None:\n        if depth > max_depth:\n            return\n        if d == 0 or size == 0:\n            if size == 0:\n                print(\"NO\")\n                return\n            print(\"YES\")\n            print(size, 1)\n            return\n        if size == 1:\n            print(\"NO\")\n            return\n        for i in range(1, size):\n            build_tree(size - 1, depth, max_depth)\n            if size > 1:\n                print(size, i)\n            else:\n                print(size, i, i + 1)\n    build_tree(n, k, d)\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = list(map(int, stdin.split()))\n    if (d - 1) * (k - 1) > n * (n - 1) * 0.5:\n        return 'NO'\n    tree = [[] for _ in range(n)]\n    v = [0] * n\n    for i in range(1, n):\n        v[i] = i\n    n -= 1\n    m = int(n * (n - 1) * 0.5)\n    while n >= 2:\n        for i in range(1, n):\n            if v[i] == 0:\n                for j in range(1, n):\n                    if v[j] == 0:\n                        tree[i].append(j)\n                        tree[j].append(i)\n                        v[j] = i\n                        n -= 1\n        if n == 1:\n            break\n    for i in range(1, n):\n        tree[i].append(0)\n    tree[0].append(0)\n    t = 1\n    for i in range(m):\n        a, b = list(map(int, stdin.split()))\n        a, b = min(a, b), max(a, b)\n        if v[a]!= 0 or v[b]!= 0:\n            t += 1\n        tree[v[a]].append(b)\n        tree[v[b]].append(a)\n    print(t)\n    for i in range(n - 1):\n        print(i + 1, end=' ')\n        for j in tree[i]:\n            print(j + 1, end=' ')\n        print()\n    return 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = list(map(int, stdin.split()))\n    if n - 1 <= k:\n        return \"NO\"\n\n    tree = {}\n    for _ in range(n - 1):\n        u, v = list(map(int, stdin.split()))\n        tree[u] = tree.get(u, []) + [v]\n        tree[v] = tree.get(v, []) + [u]\n\n    # by induction, we can have at most k edges of degree k, of the remaining n - 1 edges of degree k - 1.\n    # so we can have at most 2^(k - 1) edges, since at most 2^k - 1 edges of degree k.\n    # that means n - 1 = (2^k - 1) * k + 2^k - 1\n\n    # note that this gives an upper bound to the diameter\n    # it is an upper bound, because we cannot build a tree with diameter smaller than d\n    max_diameter = 2 ** (k - 1)\n\n    if max_diameter < d:\n        return \"NO\"\n\n    # we can build a tree with diameter d\n    # we need to find a vertex with degree <= k - 1\n    # and we need to know the maximum length of a simple path between any two vertices of the tree\n    # so we can find an upper bound to the diameter\n    # therefore, we need to build a tree with diameter d,\n    # then we can find the vertices that have degree <= k - 1\n    # but we need to find the maximum length of a simple path between any two vertices of the tree\n    # so we can find an upper bound to the diameter\n    # thus, we build the tree with diameter d,\n    # then we find the vertices that have degree <= k - 1\n    # then we can find the maximum length of a simple path between any two vertices of the tree\n    # and we can find an upper bound to the diameter\n    # and we can build the tree with the upper bound\n\n    for vertex in tree:\n        if len(tree[vertex]) <= k - 1:\n            break\n    else:\n        return \"NO\"\n\n    # we have the vertex that has degree <= k - 1\n    # now we can use this vertex to build a tree with diameter d\n    tree = {vertex: tree[vertex][:]}\n    for vertex in tree:\n        for u in tree[vertex]:\n            tree[u] = [u]\n\n    # we have the vertex that has degree <= k - 1\n\n    # we can find the maximum length of a simple path between any two vertices of the tree\n    max_length = 0\n    for u in tree:\n        for v in tree[u]:\n            max_length = max(max_length, dfs(u, v, 0, k - 1))\n\n    # we have the maximum length of a simple path between any two vertices of the tree\n\n    # we can find the vertices that have degree <= k - 1\n    # but we need to find the maximum length of a simple path between any two vertices of the tree\n    # and we can find an upper bound to the diameter\n    # thus, we build the tree with the upper bound\n    # then we find the vertices that have degree <= k - 1\n    # then we can find the maximum length of a simple path between any two vertices of the tree\n    # and we can find an upper bound to the diameter\n    # and we can build the tree with the upper bound\n\n    tree = {vertex: tree[vertex][:] for vertex in tree}\n    for vertex in tree:\n        for u in tree[vertex]:\n            tree[u] = [u]\n\n    max_length = 0\n    for u in tree:\n        for v in tree[u]:\n            max_length = max(max_length, dfs(u, v, 0, k - 1))\n\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    def is_possible(tree):\n        nonlocal n, d, k\n        degree = [0] * (n + 1)\n\n        for u, v in tree:\n            degree[u] += 1\n            degree[v] += 1\n\n        for d in degree:\n            if d > k:\n                return False\n\n        for u, v in tree:\n            if degree[u] > d or degree[v] > d:\n                return False\n\n        return True\n\n    def dfs(tree, visited: set, cur: int, level: int):\n        nonlocal n, d, k\n\n        if level > d:\n            return\n\n        for u, v in tree:\n            if u == cur or v == cur:\n                continue\n\n            if (u, v) not in visited and (v, u) not in visited:\n                visited.add((u, v))\n                visited.add((v, u))\n\n                if is_possible(visited):\n                    yield level + 1, u, v\n\n                dfs(tree, visited, u, level + 1)\n                dfs(tree, visited, v, level + 1)\n                visited.remove((u, v))\n                visited.remove((v, u))\n\n    tree = []\n    for u in range(1, n):\n        for v in range(1, n):\n            if u == v:\n                continue\n            tree.append((u, v))\n\n    for level, u, v in dfs(tree, set(), 1, 1):\n        print(f'{u} {v}')\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.strip().split())\n    return \"\".join([str(i) for i in range(a, a + b) if i % x!= 0])\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    num_zeroes = a - b\n    num_ones = b\n    num_indices = x - a\n\n    result = \"\"\n    for index in range(num_indices):\n        result += \"0\"\n    for index in range(num_zeroes):\n        result += \"1\"\n    for index in range(num_ones):\n        result += \"0\"\n    return result"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split(' '))\n    result = ''\n    for i in range(a + b):\n        if i < a:\n            result += '0'\n        else:\n            result += '1'\n    return result[:x]"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = (int(n) for n in stdin.split())\n    s = '0' * a + '1' * b + '0' * x\n    if len(s) % 3!= 0:\n        return ''.join(reversed(s))\n    else:\n        return s"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = list(map(int, stdin.split()))\n    n = a + b\n    # we can build this string with zeros and ones in a vector\n    #  but we need to be careful about the extra zeros\n    #  at the end of the string\n    if x == a:\n        return ''.join('0' * a + '1' * b)\n    # if there are more ones than zeros then we need to add\n    #  extra zeros to the end of the string\n    elif x > a:\n        return ''.join('0' * a + '1' * (x - a) + '0' * (b - (x - a)))\n    # if there are more zeros than ones we need to add\n    #  extra ones to the end of the string\n    elif x < a:\n        return ''.join('0' * a + '1' * (b - x) + '1' * (x - a))\n    # if we get here, we have just a single zero and a single one\n    #  and we need to add a single one to the end\n    else:\n        return ''.join('0' * a + '1' * (b - x) + '1')\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split()]\n    return ''.join('0' * a + '1' * b + '0' * x)\n\n\nassert(solution('') == '')\nassert(solution('0') == '0')\nassert(solution('0 0') == '0 0')\nassert(solution('1') == '1')\nassert(solution('1 0') == '1 0')\nassert(solution('10') == '1 0')\nassert(solution('100') == '1 0')\nassert(solution('101') == '1 0')\nassert(solution('101 1') == '1 1')\nassert(solution('101 0') == '1 0')\nassert(solution('0 1') == '0 1')\nassert(solution('1 1') == '1 1')\nassert(solution('0 0') == '0 0')\nassert(solution('0 0 0') == '0 0 0')\nassert(solution('0 0 0 0') == '0 0 0 0')\nassert(solution('0 0 0 0 0') == '0 0 0 0 0')\nassert(solution('0 0 0 0 0 0') == '0 0 0 0 0 0')\nassert(solution('0 0 0 0 0 0 0') == '0 0 0 0 0 0 0')\nassert(solution('0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0')\nassert(solution('0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0') == '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0')\nassert(solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = [0 for _ in range(a + b)]\n    for i in range(x):\n        s[i + a] = 1\n    return ''.join(map(str, s))"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    res = \"\"\n\n    for i in range(n):\n        if s[i] == t[i]:\n            res += s[i]\n        elif s[i]!= t[i] and (s[i + 1] == t[i] or s[i - 1] == t[i]):\n            res += s[i]\n        else:\n            res += \".\"\n\n    return res\n\nassert(solution('''2\nab\nbc''') == \"YES\\nacbbac\")\nassert(solution('''3\naa\nbc\n''') == \"YES\\ncacbacbab\")\nassert(solution('''1\ncb\nac''') == \"YES\\nabc\")\nassert(solution('''2\na\na\n''') == \"NO\")\nassert(solution('''3\na\na\n''') == \"NO\")\nassert(solution('''4\na\na\na\n''') == \"NO\")\nassert(solution('''4\nabc\nab\nabc\n''') == \"YES\\nabcabcabc\")\nassert(solution('''10\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\nab\n''') == \"YES\\nabaaaaaaaaaaaaab\")\nassert(solution('''10\naa\nab\nac\nab\naa\nab\nac\nab\naa\nab\nac\n''') == \"YES\\naaaaaaaaaaaaaaaaa\")\nassert(solution('''10\nab\nac\nab\n''') == \"YES\\naaaaaaaaaaaaaab\")\nassert(solution('''10\nab\nac\n''') == \"NO\")\nassert(solution('''10\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == \"YES\\nzyzwzwzwzwzwzwzwzwzw\")\nassert(solution('''100\nx\ny\nz\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == \"YES\\nxxxxxxxzyzzzwzzzzwzzzzwzzzzwzzzzwzz\")\nassert(solution('''100\nx\ny\nz\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == \"NO\")\nassert(solution('''10\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == \"YES\\nabcd\")\nassert(solution('''10\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == \"YES\\nabcd\")\nassert(solution('''10\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == \"YES\\nabcd\")\nassert(solution('''10\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == \"YES\\nabcd\")\nassert(solution('''100\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == \"YES\\naaaaaaaaaaaaaaaaaaaaaaaaaa\")\nassert(solution('''100\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == \"YES\\naaaaaaaaaaaaaaaaaaaaaaaaaa\")\nassert(solution('''100\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == \"YES\\naaaaaaaaaaaaaaaaaaaaaaaaaa\")\nassert(solution('''100\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == \"YES\\naaaaaaaaaaaaaaaaaaaaaaaaaa\")\nassert(solution('''100\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == \"YES\\naaaaaaaaaaaaaaaaaaaaaaaaaa\")\nassert(solution('''100\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == \"YES\\naaaaaaaaaaaaaaaaaaaaaaaaaa\")\nassert(solution('''100\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n''') == \"YES\\naaaaaaaaaaaaaaaaaaaaaaaaaa\")\nassert(solution('''100\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[2:n+2]\n    t = stdin[n+2:2*n+2]\n    r = \"NO\"\n    if len(s) == n and len(t) == n:\n        r = \"YES\"\n        if s.count(\"a\") == n and t.count(\"a\") == n:\n            r += s[0] + t[0] + s[1] + t[1]\n        if s.count(\"b\") == n and t.count(\"b\") == n:\n            r += s[2] + t[2] + s[0] + t[0]\n        if s.count(\"c\") == n and t.count(\"c\") == n:\n            r += s[3] + t[3] + s[1] + t[1]\n    return r\n    \n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin[1]\n    t: str = stdin[2]\n    n: int = int(stdin[0])\n\n    if s == t:\n        return \"NO\"\n\n    for i in range(n - 1, 2, -1):\n        if s[:i] * 3 == t and s[-i:] * 3 == t:\n            return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if n < 1 or n > 10**5 or len(s)!= 2 or len(t)!= 2:\n        return \"NO\"\n    result = \"\"\n    for i in range(n):\n        result += s[0]\n        result += s[1]\n        result += t[0]\n        result += t[1]\n        s = s[1:]\n        t = t[1:]\n    if result.count('a')!= n or result.count('b')!= n or result.count('c')!= n:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if not (n == 2 and len(s) == 2 and len(t) == 2):\n        return \"NO\"\n\n    if s == t:\n        return \"YES\"\n\n    res = \"\"\n    for _ in range(3 * n):\n        res += s[0]\n        s = s[1:] + s[0]\n\n    return res if res == t else \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # stdin is a string\n    # result is a string\n    # my result is a string\n    # result is YES,my result is YES\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n\n    if len(s) + len(t)!= n:\n        return \"NO\"\n\n    result = \"\"\n    for i in range(n):\n        result += s[i % len(s)]\n        result += t[i % len(t)]\n\n    if result.count(\"a\")!= result.count(\"b\") or result.count(\"a\")!= result.count(\"c\"):\n        return \"NO\"\n\n    return \"YES\" + result\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if len(s) < 3 or len(t) < 3:\n        return \"NO\"\n    ss = list(s)\n    tt = list(t)\n    ss.sort()\n    tt.sort()\n    for i in range(3):\n        if ss[i]!= tt[i]:\n            return \"NO\"\n    res = \"\"\n    if n % 3 == 0:\n        for i in range(n // 3):\n            res += t\n        return res\n    elif n % 3 == 1:\n        res += t\n        for i in range(n // 3):\n            res += \"a\"\n        return res\n    elif n % 3 == 2:\n        res += \"c\"\n        for i in range(n // 3):\n            res += \"b\"\n        return res\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if n!= len(s) and n!= len(t):\n        return \"NO\"\n    count = 0\n    for i in range(n):\n        if s[i]!= t[i]:\n            count += 1\n    if count > n - 1:\n        return \"NO\"\n    if count == 0:\n        return \"YES\"\n    # return \"\".join(s[i] * n for i in range(n))\n    n = count + 1\n    res = [\"a\"] * n\n    for i in range(n):\n        if i < n - count:\n            res[i] = s[i]\n        else:\n            res[i] = t[i - count]\n    return \"YES\" + \"\".join(res) + \"\".join(s[i + count] for i in range(n - count)) + \"\".join(t[i + count] for i in range(n - count))\n\nassert solution(stdin) == stdin.readline().strip()\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nTo test your solution, run the following command:\n\npython3 -m unittest -v prj1_solution.py\n\nThen enter the password:\n\npython3 prj1_solution.py\n\"\"\"\n\nimport unittest\n\nfrom prj1_solution import solution\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution(2, \"ab\", \"bc\"), \"YES\\nacbbac\")\n        self.assertEqual(solution(3, \"aa\", \"bc\"), \"YES\\ncacbacbab\")\n        self.assertEqual(solution(1, \"cb\", \"ac\"), \"YES\\ncbacbacbab\")\n"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = [int(x) for x in stdin.split()]\n    if n == 1:\n        return '-1'\n    r = [-1] * n\n    for i, v in enumerate(q):\n        if v!= -n:\n            r[v] = i + 1\n    return''.join(str(x) for x in r)"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, perm = [int(x) for x in stdin.strip().split(\" \")]\n    perm = [x for x in perm]\n    m = len(perm)\n    if l == m:\n        return \"\".join(str(x) for x in perm)\n    if m == 0:\n        return \"\".join(str(x) for x in range(1, l+1))\n    if m == 1:\n        return \"\".join(str(x) for x in range(l, 0, -1))\n    m //= 2\n    while m > 0:\n        i, j = 0, m\n        while j < l:\n            perm[i], perm[j] = perm[j], perm[i]\n            i += 1\n            j += 1\n        m //= 2\n    return \"\".join(str(x) for x in perm)\n\nassert solution(\"3\\n-2 1\") == \"-2 1 3\"\nassert solution(\"5\\n1 1 1 1\") == \"1 2 3 4 5\"\nassert solution(\"4\\n-1 2 2\") == \"-1\"\nassert solution(\"7\\n0 0 0 0 0 0 0\") == \"0 0 0 0 0 0 0\"\nassert solution(\"11\\n1 1 1 1 1 1 1 1 1 1 1\") == \"1 2 3 4 5 6 7 8 9 10 11\"\nassert solution(\"10\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(\"100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    length, *q = [int(x) for x in stdin.split()]\n    q = [x for x in q if x >= 0]\n    def factorial(n):\n        return 1 if n < 2 else n * factorial(n-1)\n    if len(q)!= length - 1:\n        return -1\n    res = 0\n    for i in range(length - 1):\n        res = (res * (q[i] - i)) % factorial(length - 1)\n    return str(res + 1)"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = list(map(int, stdin.readline().strip().split(' ')))\n    p = list(range(1, n + 1))\n    for i in range(n - 1):\n        p[q[i] - 1] = q[i + 1] - q[i]\n    if p == sorted(p):\n        return''.join(map(str, p))\n    else:\n        return \"-1\"\n    "
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = list(map(int, stdin.readline().strip().split(' ')))\n    ans = []\n    for i in range(len(q)):\n        if i == 0:\n            ans.append(q[-1])\n            q.pop()\n            continue\n        ans.append(q[0])\n        q.pop(0)\n    if len(ans)!= n:\n        ans = -1\n    print(ans)\n    return str(ans)"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = [int(x) for x in stdin.readline().strip().split()]\n    p = [0] * n\n    for i in range(n):\n        p[q[i]-1] = i+1\n    p = \" \".join([str(x) for x in p])\n    if n == 1:\n        return p\n    return \"-1\"\n\nassert(solution(\n\"\"\"3\n-2 1\n\"\"\") == \"3 1 2\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"4\n-1 2 2\n\"\"\") == \"-1\"\n)\nassert(solution(\n\"\"\"4\n-1 1 1\n\"\"\") == \"-1\"\n)\nassert(solution(\n\"\"\"9\n9 9 9 9 9 9 9 9\n\"\"\") == \"1 2 3 4 5 6 7 8 9\"\n)\nassert(solution(\n\"\"\"8\n-1 2 2\n\"\"\") == \"-1\"\n)\nassert(solution(\n\"\"\"8\n-1 2 2\n\"\"\") == \"-1\"\n)\nassert(solution(\n\"\"\"8\n1 1 1 1 1 1 1\n\"\"\") == \"1 2 3 4 5 6 7 8\"\n)\nassert(solution(\n\"\"\"6\n1 1 1 1 1 1\n\"\"\") == \"1 2 3 4 5 6\"\n)\nassert(solution(\n\"\"\"7\n1 1 1 1 1 1\n\"\"\") == \"1 2 3 4 5 6 7\"\n)\nassert(solution(\n\"\"\"7\n1 1 1 1 1 1\n\"\"\") == \"1 2 3 4 5 6 7\"\n)\nassert(solution(\n\"\"\"6\n1 1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5\n1 1 1 1\n\"\"\") == \"1 2 3 4 5\"\n)\nassert(solution(\n\"\"\"5"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n    if n == 1:\n        return '1'\n    perms = []\n    for i in range(n-1):\n        perms.append(q[i]-i)\n    s =''.join(map(str, perms))\n    return s if perms.count(perms[0]) == n-1 else '-1'"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = [int(x) for x in stdin.splitlines()[0].split()]\n    q = [-x for x in q]\n    n -= 1\n    \n    if n == 0:\n        return '-1'\n    \n    p = [0] * n\n    p[0] = 1\n    for _ in range(n):\n        p[q[p[-1]]] += 1\n        p[q[p[-1]]] = p[q[p[-1]]] - 1\n    \n    return''.join(map(str, p))\n    "
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin)\n    s = set()\n    l = list(stdin.strip().split(' '))\n    p = []\n    for x in l:\n        p.append(int(x))\n    for i in range(len(p)):\n        if p[i] > 0:\n            n = p[i]\n            while n not in s:\n                n -= 1\n            p[i] = n\n            s.remove(n)\n        else:\n            p[i] = -n\n            s.add(-n)\n    return''.join(map(str, p))\n\nassert(solution('3') == '3 1 2')\nassert(solution('3 1 2') == '3 1 2')\nassert(solution('5') == '1 2 3 4 5')\nassert(solution('5 1 2 3 4') == '1 2 3 4 5')\nassert(solution('4') == '-1')\nassert(solution('4 1 2') == '-1')\nassert(solution('5 1 2 3 4') == '1 2 3 4 5')\nassert(solution('5 1 2 4 3') == '1 2 3 4 5')\nassert(solution('5 1 2 3 4 5') == '1 2 3 4 5')\nassert(solution('5 5 1 2 3 4') == '1 2 3 4 5')\nassert(solution('5 5 1 2 3 4 5') == '1 2 3 4 5')\nassert(solution('5 1 1 1 1') == '1 2 3 4 5')\nassert(solution('5 1 1 1 1 2') == '1 2 3 4 5')\nassert(solution('5 1 1 1 1 2 3') == '1 2 3 4 5')\nassert(solution('5 1 1 1 1 2 3 4') == '1 2 3 4 5')\nassert(solution('5 1 1 1 1 2 3 4 5') == '1 2 3 4 5')\nassert(solution('5 1 1 1 1 1 2 3 4 5') == '1 2 3 4 5')\nassert(solution('5 1 1 1 1 1 1 2 3 4 5') == '1 2 3 4 5')\nassert(solution('5 1 1 1 1 1 1 1 2 3 4 5') == '1 2 3 4 5')\nassert(solution('10') == '-1')\nassert(solution('10 1 2 3 4 5 6 7 8 9') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32') == '9 8 7 6 5 4 3 2 1')\nassert(solution('10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33') == '9 8 7 6 5 4 3 2 1')\nassert(solution('"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3')\n    3 1 2\n    >>> solution('5')\n    1 2 3 4 5\n    >>> solution('4')\n    -1\n    \"\"\"\n    n = int(stdin.readline().strip())\n    if n < 3:\n        print('-1')\n    else:\n        stdout = ''\n        q = list(map(int, stdin.readline().split()))\n        for i in range(n - 1):\n            p = n - q[i]\n            if p < 1:\n                continue\n            stdout +=''.join(str(v) for v in range(1, p + 1))\n            stdout +=''\n        print(stdout)\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    chips = [int(stdin.readline()) for _ in range(n)]\n    return str(min(chips[i] - (i+1) for i in range(n)))\n    \nprint(solution(stdin))\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = list(map(int, stdin.split()))\n    curr_coord = m[0]\n    total_coins = 0\n    moves = [0] * n\n    for i in range(1, n):\n        curr_coord = curr_coord + m[i]\n        moves[i] = min(curr_coord, m[i])\n        total_coins += moves[i]\n    return total_coins"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split(' ')))\n    x.sort()\n    i = 0\n    cost = 0\n    while i < n:\n        if i == n - 1:\n            cost += abs(x[i] - x[0])\n        else:\n            cost += min(abs(x[i] - x[i + 1]), abs(x[i] - x[i - 1])) + 1\n        i += 1\n    return cost\n\n\n-----Alternate approach-----\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    chips = [int(x) for x in stdin.split(\" \")]\n    moves = 0\n    for i in range(n):\n        while chips[i]!= i:\n            moves += 1\n            chips[chips[i]], chips[i] = chips[i], chips[chips[i]]\n    return str(moves)\nprint(solution(input()))\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split(' ')))\n    max_x = max(x)\n    min_x = min(x)\n    if max_x == min_x:\n        return 0\n    elif max_x == 0:\n        return 1\n    else:\n        return (max_x - 1) // 2 + (min_x + 1) // 2\n\n\nprint(solution('10\\n5 5 5 5 5'))\nprint(solution('3\\n1 2 3'))\nprint(solution('4\\n2 2 2 2'))\nprint(solution('4\\n1 2 1 2'))\nprint(solution('5\\n3 3 3 3 3'))\nprint(solution('5\\n3 1 3 3 1'))\nprint(solution('5\\n3 1 2 2 1'))\nprint(solution('6\\n3 3 3 3 3 3'))\nprint(solution('6\\n3 1 3 3 1 3'))\nprint(solution('6\\n3 1 2 2 1 3'))\nprint(solution('7\\n1 2 3 4 5 6'))\nprint(solution('7\\n1 2 3 4 5 6 7'))\nprint(solution('8\\n1 2 3 4 5 6 7 8'))\nprint(solution('8\\n1 2 3 4 5 6 7 8 9'))\nprint(solution('9\\n1 2 3 4 5 6 7 8 9 10'))\nprint(solution('9\\n1 2 3 4 5 6 7 8 9 10 11'))\nprint(solution('9\\n1 2 3 4 5 6 7 8 9 10 11 12'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99'))\nprint(solution('10\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    values = list(map(int, stdin.readline().strip().split()))\n    solutions = [float('inf')] * n\n    solutions[0] = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if i == j:\n                solutions[j] = solutions[i - 1] + 1\n            elif values[i] == values[j]:\n                solutions[j] = min(solutions[j], solutions[i - 1] + 1)\n            else:\n                solutions[j] = min(solutions[j], solutions[i - 1] + 2)\n    return str(solutions[-1])\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    c = list(map(int, stdin.readline().split()))\n    if c[0]!= 1:\n        return '1'\n    return str(n-1)\n\nassert(solution('''3\n1 2 3\n''') == '1')\n\nassert(solution('''5\n2 2 2 3 3\n''') == '2')\n\nassert(solution('''5\n2 2 2 3 3\n''') == '2')\nassert(solution('''3\n1 2 3\n''') == '1')"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    arr = stdin.readline().strip().split()\n    print(solve(arr, int(n)))\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    # return your answer"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    coord = [int(x) for x in stdin.readline().strip().split()]\n    return''.join(str(min(n - 1 - abs(x - min(coord)), abs(x - max(coord)))) for x in coord)\n"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    k = 1\n    while k**2 < n:\n        k += 1\n    return str(k-1)\n\nimport sys\n"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_moves = 1\n    # count squares between 10**1 and 10**3\n    for i in range(1, 3):\n        moves = 1\n        # count squares between 10**i and 10**(i+1)\n        for j in range(1, i+1):\n            moves += i*j\n        if N < moves:\n            break\n        min_moves += moves\n    return min_moves"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return '0'\n    dp = [[-1 for _ in range(n+1)] for _ in range(n+1)]\n    def dfs(i,j,m,n):\n        if m == 0 and n == 0:\n            return 0\n        if m == 0:\n            return n+1\n        if n == 0:\n            return m+1\n        if dp[i][j]!= -1:\n            return dp[i][j]\n        else:\n            dp[i][j] = min(dfs(i+1,j,m-1,n),dfs(i,j+1,m,n-1)) + 1\n            return dp[i][j]\n    return str(dfs(1,1,n,n))\n\nprint(solution(input()))"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.strip()\n    if not input_:\n        return \"\"\n\n    rows = int(input_)\n    return _solution(rows)\n\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i, j = 1, 1\n    moves = 0\n    while i < n:\n        moves += 1\n        if i == j:\n            j += 1\n        else:\n            i += 1\n            j -= 1\n    return moves\n\nprint(solution(input()))\n"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        moves += 1\n    return str(moves)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alice_wins = []\n    bob_wins = []\n    for i in range(n):\n        alice, bob = stdin.readline().split()\n        alice = int(alice)\n        bob = int(bob)\n        alice_wins.append(alice)\n        bob_wins.append(bob)\n    alice_wins = set(alice_wins)\n    bob_wins = set(bob_wins)\n    alice_wins.remove(0)\n    bob_wins.remove(0)\n    print(max(alice_wins) * max(bob_wins))\n    print(min(alice_wins) * min(bob_wins))\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    b = list(map(int, stdin[2].split()))\n    alice = {0: 0, 1: 0, 2: 0}\n    bob = {0: 0, 1: 0, 2: 0}\n    for i in range(n):\n        alice[a[i]] += 1\n        bob[b[i]] += 1\n    alice_win = {0: 0, 1: 0, 2: 0}\n    bob_win = {0: 0, 1: 0, 2: 0}\n    for i in range(3):\n        if alice[i] >= bob[i]:\n            alice_win[i] += (alice[i] - bob[i]) + 1\n        else:\n            bob_win[i] += (bob[i] - alice[i]) + 1\n    return str(max(alice_win[0], bob_win[0]) - 1) +'' + str(max(alice_win[1], bob_win[1]) - 1)\n\n\n\nimport sys\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n\n    #the number of rounds Alice can win\n    a = n\n\n    #the number of rounds Bob can win\n    b = n\n\n    #the number of rounds Alice will win\n    aa = 0\n\n    #the number of rounds Bob will win\n    bb = 0\n\n    #the number of rounds Alice can win if she plays before Bob\n    ba = 0\n\n    #the number of rounds Bob can win if she plays before Alice\n    ab = 0\n\n    for i in range(n):\n\n        r1, r2, r3 = [int(x) for x in stdin.readline().strip().split()]\n\n        a -= (r1 + r2 + r3)\n        b -= (r1 + r2 + r3)\n\n        aa += r1\n        bb += r2\n        ab += r3\n\n        ba += r3\n        ab += r2\n\n    return str(a) +'' + str(b)\n\n\nassert(solution('''\n2\n0 1 1\n1 1 0\n''') == '0 1')\nassert(solution('''\n15\n5 5 5\n5 5 5\n''') == '0 15')\nassert(solution('''\n3\n0 0 3\n3 0 0\n''') == '3 3')\nassert(solution('''\n319\n10 53 256\n182 103 34\n''') == '119 226')\nassert(solution('''\n686\n479 178 29\n11 145 530\n''') == '22 334')\n\nprint(solution(input()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().strip().split(' ')]\n    B = [int(x) for x in stdin.readline().strip().split(' ')]\n    res = 0\n    res_max = 0\n    for i in range(N):\n        if A[i] < B[i]:\n            res += 1\n        if A[i] > B[i]:\n            res_max += 1\n    print(res, res_max)"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a_1, a_2, a_3 = map(int, stdin.readline().split())\n    b_1, b_2, b_3 = map(int, stdin.readline().split())\n\n    a = a_1 + a_2 + a_3\n    b = b_1 + b_2 + b_3\n    if a > b:\n        a, b = b, a\n\n    return''.join(map(str, [a, b]))\n\n\nassert(solution('''2\n0 1 1\n1 1 0''') == '0 1')\n\nassert(solution('''15\n5 5 5\n5 5 5\n''') == '0 15')\n\nassert(solution('''3\n0 0 3\n3 0 0\n''') == '3 3')\n\nassert(solution('''686\n479 178 29\n11 145 530\n''') == '22 334')\n\nassert(solution('''319\n10 53 256\n182 103 34\n''') == '119 226')\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = tuple(map(int, stdin.split()))\n    b = tuple(map(int, stdin.split()))\n    # let's play for Alice\n    a_win = a[0] + a[1] + a[2]\n    b_win = b[0] + b[1] + b[2]\n    while a_win < n and b_win < n:\n        a_win = a[0] + a[1] + a[2]\n        b_win = b[0] + b[1] + b[2]\n        if a[0] > b[0]:\n            a[0] -= 1\n            a[2] += 1\n        elif a[1] > b[1]:\n            a[1] -= 1\n            a[2] += 1\n        elif a[2] > b[2]:\n            a[2] -= 1\n            a[1] += 1\n        elif a[0] < b[0]:\n            b[0] -= 1\n            b[2] += 1\n        elif a[1] < b[1]:\n            b[1] -= 1\n            b[2] += 1\n        elif a[2] < b[2]:\n            b[2] -= 1\n            b[1] += 1\n    if a_win < b_win:\n        return''.join(map(str, a))\n    else:\n        return''.join(map(str, b))\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n\n    alice = [0] * n\n    bob = [0] * n\n\n    for i in range(n):\n        if a[i] + b[i] == n:\n            if a[i] < b[i]:\n                alice[i] = 1\n            elif a[i] > b[i]:\n                bob[i] = 1\n            else:\n                alice[i] = 1\n                bob[i] = 1\n\n    return''.join([str(max(alice)), str(max(bob))])\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    a = list(map(int, stdin[1:].split()))\n    b = list(map(int, stdin[N + 2:].split()))\n    N = int(N)\n    min_win = 0\n    max_win = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            a1 = a[i]\n            a2 = a[j]\n            b1 = b[i]\n            b2 = b[j]\n            if a1 + a2 + b1 == N and b1 + b2 + a2 == N:\n                min_win += 1\n                max_win += 1\n            elif a1 + a2 + b2 == N and b1 + b2 + a1 == N:\n                min_win += 1\n                max_win += 1\n            elif a1 + b1 + a2 == N and b1 + a1 + b2 == N:\n                min_win += 1\n                max_win += 1\n            elif a1 + b2 + a2 == N and b1 + a2 + b1 == N:\n                min_win += 1\n                max_win += 1\n            elif a2 + b2 + a1 == N and b1 + a1 + b2 == N:\n                min_win += 1\n                max_win += 1\n            elif a2 + b1 + a1 == N and b1 + a2 + b2 == N:\n                min_win += 1\n                max_win += 1\n            elif a1 + b2 + b1 == N and a2 + b1 + a1 == N:\n                min_win += 1\n                max_win += 1\n            elif a1 + a2 + b2 == N and b2 + b1 + a1 == N:\n                min_win += 1\n                max_win += 1\n    print(str(min_win) + \" \" + str(max_win))\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    if a[0] > b[0]:\n        a, b = b, a\n    score = 0\n    for i in range(0, 3):\n        score += a[i] * b[i]\n    if a[0] == b[0]:\n        score = min(a[0], b[0]) + min(a[1], b[1]) + min(a[2], b[2])\n    else:\n        score = min(a[0], b[1]) + min(a[1], b[2]) + min(a[2], b[0])\n    return str(score) +'' + str(n - score)"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10 ** 9:\n        return 'error'\n\n    a1, a2, a3 = map(int, stdin.split())\n    if a1 + a2 + a3!= n:\n        return 'error'\n\n    b1, b2, b3 = map(int, stdin.split())\n    if b1 + b2 + b3!= n:\n        return 'error'\n\n    result = n\n    for _ in range(n):\n        if a1 == b2:\n            result -= 1\n        if a1 == b3:\n            result -= 1\n        if a2 == b3:\n            result -= 1\n        if a2 == b1:\n            result -= 1\n        if a3 == b1:\n            result -= 1\n        if a3 == b2:\n            result -= 1\n        a1, a2, a3 = map(int, stdin.split())\n        b1, b2, b3 = map(int, stdin.split())\n\n    return str(result)\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(i) for i in stdin.readline().split(' ')]\n    result = [0] * n\n    \n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] + arr[j] == sum(arr):\n                result[i] += 1\n                result[j] += 1\n    \n    max_value = max(result)\n    \n    for i in range(n):\n        if result[i] == max_value:\n            print(i + 1, i + 1)\n            break\n    \n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.strip().split()]\n    blocks = []\n    r = 0\n    for i in range(n):\n        r += arr[i]\n        blocks.append([i, i + 1])\n\n    blocks = list(set(blocks))\n    blocks.sort()\n    result = len(blocks)\n    for i in range(len(blocks)):\n        result = max(result, blocks[i][1] - blocks[i][0] + 1)\n    return str(result)\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    ans = 0\n    for i in range(1, n):\n        if a[i] - a[i - 1] > 1:\n            ans += 1\n    print(ans)\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    m = n * (n + 1) // 2\n    table = [0] * m\n    for i in range(n):\n        table[i + i * n] = a[i]\n    \n    for i in range(n):\n        for j in range(i, n):\n            table[i + j * n] += table[i + (j - i) * n]\n    \n    res = 0\n    for i in range(n):\n        table[i + i * n] = i + 1\n        res = max(res, table[i + i * n])\n    \n    return str(res)\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    a = [int(x) for x in a]\n    a.sort()\n\n    def helper(start: int, end: int) -> int:\n        if start >= end:\n            return 0\n        l, r = start, end\n        x = a[l] + a[r]\n        res = (l - r) * x\n        while l < r:\n            if a[l] + a[r] == x:\n                res += 1\n                l += 1\n                r -= 1\n            elif a[l] + a[r] > x:\n                r -= 1\n            elif a[l] + a[r] < x:\n                l += 1\n        return res\n\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            res = max(res, helper(i, j))\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    assert len(nums) == n\n\n    prev = nums[0]\n    block_sum = nums[0]\n    blocks = []\n    for i, n in enumerate(nums[1:], 1):\n        if block_sum == 0:\n            blocks.append([0, i])\n\n        block_sum += n - prev\n        if block_sum == 0:\n            block_sum = n\n            blocks.append([i, i])\n        else:\n            blocks.append([i, i])\n\n        prev = n\n\n    blocks.sort(key=lambda x: x[1] - x[0])\n\n    return \" \".join(map(str, blocks[-1]))\n    # result = [0] * len(blocks)\n    # for i, (l, r) in enumerate(blocks):\n    #     for j in range(i+1, len(blocks)):\n    #         if blocks[j][0] <= r:\n    #             result[j] += 1\n    # print(result)\n    # return \" \".join(map(str, result))\n\n\nassert solution(io.StringIO(\n    \"\"\"7\n    4 1 2 2 1 5 3\n\"\"\")) == \"\"\"3\n7 7\n2 3\n4 5\n\"\"\"\nassert solution(io.StringIO(\n    \"\"\"11\n    -5 -4 -3 -2 -1 0 1 2 3 4 5\n\"\"\")) == \"\"\"2\n3 4\n1 1\n2 2\n3 3\n4 4\n1 1\n\"\"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    print(len(arr) - max([x + 1 for x in arr]))\n    return \"\"\n\nassert(solution('''-2 4 -3 -2 -1 0 1 2 3 4 5''') == \"4\")\nassert(solution('''-2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n\n    x = 1\n    l = 1\n    r = 1\n    while x < n:\n        if a[x] < a[l]:\n            l = x\n        if a[x] > a[r]:\n            r = x\n        x += 1\n    if a[l] + a[r] == sum(a):\n        print(x)\n        for i in range(x):\n            print(l, r)\n            l += 1\n            r -= 1\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    arr = stdin.readline().strip().split()\n    arr = [int(x) for x in arr]\n    count = 0\n    for i in range(1, len(arr)):\n        count += (arr[i] - arr[i-1] - 1)\n    count += arr[-1]\n    print(count)\n    return \"\"\n\nassert(solution('''7\n4 1 2 2 1 5 3''') == '''3\n7 7\n2 3\n4 5''')\nassert(solution('''11\n-5 -4 -3 -2 -1 0 1 2 3 4 5''') == '''2\n3 4\n1 1\n''')\nassert(solution('''4\n1 1 1 1''') == '''4\n4 4\n1 1\n2 2\n3 3''')\nassert(solution('''1\n1 1 1 1''') == '''4\n4 4\n1 1\n2 2\n3 3''')\nassert(solution('''10\n-1 -2 -3 -4 -5 -6 -7 -8 -9 -10''') == '''2\n3 4\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9''')\nassert(solution('''2\n3 4''') == '''1\n1 1\n2 2\n3 3''')\nassert(solution('''2\n1 1''') == '''2\n2 2\n1 1\n2 2\n3 3''')\nassert(solution('''10\n-1 -2 -3 -4 -5 -6 -7 -8 -9 -10''') == '''2\n3 4\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9''')\n\nprint(solution('''5\n5 6 7 8 9'''))\n\nassert(solution('''10\n-1 -2 -3 -4 -5 -6 -7 -8 -9 -10''') == '''2\n3 4\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9''')\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1 1 1''') == '''2\n3 3\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9''')\nassert(solution('''10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = stdin.split()\n    block_sizes = []\n    for i in range(n):\n        block_sizes.append(int(seq[i]))\n    seq = list(enumerate(seq[1:], 1))\n    seq.sort(key=lambda x: x[1])\n    best = 0\n    seq_len = len(seq)\n    k = 0\n    block_size = 0\n    l = 0\n    r = 0\n    while k < seq_len:\n        block_size += seq[k][1]\n        while l < seq_len and block_size <= block_sizes[seq[k][0]]:\n            block_size += seq[l][1]\n            l += 1\n        if r < seq_len and block_size > block_sizes[seq[k][0]]:\n            block_size -= seq[r][1]\n            r += 1\n        if l > r:\n            l -= 1\n            r -= 1\n        elif r > l:\n            l += 1\n            r -= 1\n        else:\n            l += 1\n            r -= 1\n        if l > r:\n            break\n        block_size = 0\n        k += 1\n        if k == seq_len:\n            if seq[l-1][0]!= seq[r-1][0]:\n                block_size += seq[l-1][1]\n                l += 1\n                block_size += seq[r-1][1]\n                r -= 1\n            else:\n                if best == 0:\n                    best = k\n                    break\n    if best == 0:\n        return '0'\n    else:\n        return str(best) +'' + str(l) +'' + str(r)\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nm = int(stdin.readline().strip())\na = stdin.readline().strip().split(' ')\na = [int(x) for x in a]\n\nm = int(stdin.readline().strip())\na = stdin.readline().strip().split(' ')\na = [int(x) for x in a]\n\nprint(solution(a))\n\n\"\"\"\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    return 'YES' if is_sortable(arr) else 'NO'\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number_of_elements = int(stdin)\n    array = [int(n) for n in stdin.split()]\n    stack = [(array[0], [array[0]])]\n    for i in range(1, number_of_elements):\n        if array[i] > stack[-1][0]:\n            stack.append((array[i], [array[i]]))\n        else:\n            for j in range(len(stack)):\n                if array[i] > stack[j][0]:\n                    stack[j] = (array[i], stack[j][1] + [array[i]])\n                    break\n\n    longest_stack_height = max(stack, key=lambda x: len(x[1]))[0]\n    max_stack_index = len(stack) - 1\n    while max_stack_index >= 0:\n        if len(stack[max_stack_index][1])!= longest_stack_height:\n            stack.pop(max_stack_index)\n        max_stack_index -= 1\n\n    if len(stack) == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    nums.sort()\n    max_height = 0\n    max_index = 0\n    for i, num in enumerate(nums):\n        height = 0\n        for j in range(i+1):\n            height += nums[j]\n        if height > max_height:\n            max_height = height\n            max_index = i\n    ans = []\n    for i, num in enumerate(nums):\n        if i == max_index:\n            ans.append(max_height)\n        else:\n            ans.append(num)\n    return \"YES\\n\" if nums == ans else \"NO\\n\""
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split(' ')]\n    stacks = []\n    for i in range(n):\n        while len(stacks) > 0 and numbers[i] < stacks[-1]:\n            stacks.pop()\n        if len(stacks) == 0:\n            stacks.append(numbers[i])\n        else:\n            stacks.append(numbers[i])\n\n    while len(stacks) > 0:\n        stacks.pop()\n    return 'YES' if len(stacks) == 0 else 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number_of_lines = stdin.count(\"\\n\")\n    input_array = [int(i) for i in stdin.strip().split()]\n    if number_of_lines == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if t!= s:\n        return '-1'\n    n, c = len(s), 0\n    while len(s) < len(t):\n        for i in range(n):\n            s = s[:i] + s[i+1:]\n            for j in range(n):\n                s = s[:j] + s[j+1:]\n                if s == t:\n                    c += 1\n                    return str(c) +'' +''.join(map(str, c))\n    return str(0)\n\nassert solution(stdin) == stdin.readline()"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the moves to transform string $s$ into string $t$ by the minimum number of moves.\n    \"\"\"\n    # s = stdin[0]\n    # t = stdin[1]\n\n    n = int(stdin[0])\n    s = stdin[2:2+n]\n    t = stdin[2+n:2+2*n]\n    \n    def h(s: str) -> int:\n        \"\"\"\n        Returns the minimum number of moves required to transform string $s$ into string $t$.\n        \"\"\"\n        # assert isinstance(s, str) and isinstance(t, str)\n        if len(s)!= len(t):\n            return -1\n\n        def is_same_ch(i: int, j: int) -> bool:\n            return s[i] == t[j]\n\n        if s == t:\n            return 0\n        if len(s) == 1:\n            return 1 if s == t else -1\n        \n        def swap(i: int, j: int) -> str:\n            return s[:i] + t[j] + s[i+1:]\n        \n        def is_same(i: int, j: int) -> bool:\n            return is_same_ch(i, j) and is_same_ch(i+1, j+1)\n\n        def is_different(i: int, j: int) -> bool:\n            return is_same_ch(i, j) and not is_same_ch(i+1, j+1)\n\n        def is_removable(i: int, j: int) -> bool:\n            return is_different(i, j) and is_same(i+1, j+1)\n\n        def create_new_string(i: int, j: int) -> str:\n            return swap(i, j)\n        \n        def find_new_string(i: int, j: int) -> str:\n            if i == 0 and j == len(t) - 1:\n                return t\n            if is_same(i, j):\n                if i == 0:\n                    return t[j+1:]\n                if j == len(t) - 1:\n                    return t[:i]\n                return t[:i] + t[j+1:]\n            if is_different(i, j):\n                return create_new_string(i, j)\n            return swap(i, j)\n        \n        def is_almost_equal(a: str, b: str) -> bool:\n            return set(a) == set(b) and len(a) == len(b)\n        \n        pairs = []\n        for i in range(len(s)):\n            for j in range(len(t)):\n                pairs.append((i, j))\n\n        def get_next_index(i: int, j: int) -> Tuple[int, int]:\n            if i < len(s) - 1:\n                if j < len(t) - 1:\n                    return (i + 1, j + 1)\n                return (i + 1, 0)\n            if j < len(t) - 1:\n                return (0, j + 1)\n            return (0, 0)\n        \n        def try_pair(i: int, j: int) -> Tuple[int, int]:\n            if is_almost_equal(s, t):\n                return (0, 0)\n            return get_next_index(i, j)\n        \n        def find_min_pair(i: int, j: int) -> Tuple[int, int]:\n            if i == len(s) - 1 and j == len(t) - 1:\n                return (0, 0)\n            elif i == len(s) - 1:\n                return (0, j + 1)\n            elif j == len(t) - 1:\n                return (i + 1, 0)\n            elif is_almost_equal(s, t):\n                return (0, 0)\n            return get_next_index(i, j)\n        \n        def try_prev_pair(i: int, j: int) -> Tuple[int, int]:\n            if i == 0:\n                return (len(s), j)\n            if j == len(t) - 1:\n                return (i - 1, 0)\n            return (i - 1, j + 1)\n\n        # assert not is_almost_equal(s, t)\n        if is_almost_equal(s, t):\n            return 0\n        \n        pairs = []\n        for i in range(len(s)):\n            for j in range(len(t)):\n                pairs.append((i, j))\n        \n        next_pairs = [(i, j) for i, j in pairs]\n        while len(next_pairs) > 0:\n            i, j = next_pairs.pop()\n            if is_almost_equal(s, t):\n                return 0\n            next_pairs.extend([pair for pair in pairs if is_almost_equal(s, t) or is_almost_equal(s, create_new_string(i, j))])\n            if not is_almost_equal(s, t):\n                if is_almost_equal(s, swap(i, j)):\n                    return 1\n                next_pairs.extend([pair for pair in pairs if is_almost_equal(s, create_new_string(i, j))])\n        \n        next_pairs = [(i, j) for i, j in pairs]\n        while len(next_pairs) > 0:\n            i, j = next_pairs.pop()\n            if is_almost_equal(s, t):\n                return 0\n            next_pairs.extend([pair for pair in pairs if is_almost_equal(s, create_new_string(i, j))])\n            if not is_almost_equal(s, t):\n                if is_almost_equal(s"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    # You can successively apply any number of moves to the string $s$\n    # to transform it into the string $t$\n    # At each move swap two adjacent (neighboring) characters of $s$\n    # Note: the algorithm is not optimized for time, but is very clear\n    n = len(s)\n    moves = 0\n    while s!= t:\n        moves += 1\n        for i in range(0, n - 1):\n            # At each move swap two adjacent (neighboring) characters of $s$\n            s = s[:i] + s[i + 1] + s[i] + s[i + 2:]\n    return moves\n\n\"\"\"\n\nn = int(input().strip())\ns = input().strip()\nt = input().strip()"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_line: str = stdin.readline().strip()\n    if not input_line:\n        return \"\"\n    length: int = int(input_line)\n    s: str = stdin.readline().strip()\n    t: str = stdin.readline().strip()\n\n    if length > len(s) or length > len(t):\n        print(\"-1\")\n        return \"\"\n\n    s_cursor = 0\n    t_cursor = 0\n    swap_counter: int = 0\n    while s_cursor < len(s) and t_cursor < len(t):\n        if s[s_cursor] == t[t_cursor]:\n            s_cursor += 1\n            t_cursor += 1\n        else:\n            swap_counter += 1\n            s_cursor += 1\n            t_cursor += 1\n\n    print(swap_counter)\n    if swap_counter > 10 ** 4:\n        print(\"-1\")\n        return \"\"\n    print(\" \".join(map(str, swap_counter)))\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if not s or not t or len(s)!= n or len(t)!= n:\n        return '-1'\n    \n    result = ''.join(sorted(t))\n    return result\n\n\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pref = set()\n    suf = set()\n\n    # prefix\n    for _ in range(n - 1):\n        line = stdin.readline()\n        pref.add(line[0])\n\n    # suffix\n    for _ in range(n - 1):\n        line = stdin.readline()\n        suf.add(line[-1])\n\n    # answer\n    answer = 'P' * len(pref)\n    answer += 'S' * len(suf)\n    return answer\n\nprint(solution(input()))\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    count = 0\n    for i in range(1, n):\n        for j in range(1, n - i + 1):\n            if s[:i] == s[i:i + j]:\n                count += 1\n                print(\"P\" * count)\n                print(\"S\" * (j - count))\n                break\n    print(\"P\" * count)\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    for i in range(1, len(s)):\n        pref = s[:i]\n        suff = s[i:]\n        if pref.count('P') == suff.count('P') and pref.count('S') == suff.count('S'):\n            return 'P' * suff.count('P') + 'S' * suff.count('S')\n    return '-'\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n\n    for i in range(2, n + 1):\n        if s[:i] * 2 == s:\n            return 'P'\n        if s[-i:] * 2 == s:\n            return 'S'\n\n    return 'PS'"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    input_length = int(stdin[0])\n    stdin.pop(0)\n    \n    output = ''\n    for i in range(len(stdin)):\n        stdin[i] = stdin[i][:input_length]\n    \n    for i in range(len(stdin)):\n        if len(stdin[i]) == input_length:\n            output += 'P'\n        else:\n            output += 'S'\n    \n    return output\n\nprint(solution(input()))\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    for length in range(n, 0, -1):\n        s_len = len(s)\n        if s_len < length:\n            continue\n        length_s = s[:length]\n        for i in range(s_len - length):\n            if s[i:i + length] == length_s:\n                s = s[:i] + 'P' + s[i + length:]\n        for i in range(s_len - length + 1):\n            if s[i:i + length] == length_s:\n                s = s[:i] + 'S' + s[i + length:]\n    return s\n\n\nprint(solution(''))\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    for i, x in enumerate(stdin):\n        stdin[i] = set(x)\n    stdin = set.intersection(*stdin)\n    stdin = list(stdin)\n    stdin.sort()\n    return ''.join(['P' if x[0] == 'a' else 'S' for x in stdin])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    pairs = []\n    for _ in range(2 * n - 2):\n        pairs.append(stdin.readline().strip())\n    \n    # eliminate pairs from the list which are suffixes or prefixes\n    suffix_or_prefix_pairs = []\n    for pair in pairs:\n        if pair[:n-1] == s:\n            suffix_or_prefix_pairs.append(pair)\n    pairs = suffix_or_prefix_pairs\n    \n    # check if there is at least one pair for each length\n    for length in range(1, n):\n        if len(pairs) < 2 * length:\n            return \"\"\n    \n    # generate the result string\n    result = []\n    for length in range(1, n):\n        prefix_pairs = []\n        for pair in pairs:\n            if pair[:length] == s[:length]:\n                prefix_pairs.append(pair)\n        pairs = prefix_pairs\n        result.append(\"P\" * len(prefix_pairs))\n        result.append(\"S\" * len(suffix_or_prefix_pairs))\n        \n    return \"\".join(result)"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    print(stdin)"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the sum of the positive integers from the standard input\n    until a negative integer is encountered.\n    \"\"\"\n    a = [int(i) for i in stdin.split()]\n    return sum(filter(lambda x: x > 0, a))\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # lemma: P is a subset of\n    # let x = [1,2,3,4]\n    # let P = [x1,x2,x3,x4]\n    # len(P) = 4\n    #  2 <= a1 <= 100\n    #  2 <= a2 <= 100\n    #  2 <= a3 <= 100\n    #  2 <= a4 <= 100\n    # sum(a1,a2,a3,a4) = 100\n    # len(P) - sum(a1,a2,a3,a4) = 3\n    # a1,a2,a3,a4 = 1,2,3,4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len(P) = 4\n    # a1 = 1\n    # a2 = 2\n    # a3 = 3\n    # a4 = 4\n    # P = [a1,a2,a3,a4]\n    # len"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(a) for a in stdin.strip().split(\" \")]\n    return str(int(A[0] + A[1] + A[2]))\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # return stdin[0]\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split(\" \")))\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split())))"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if __name__ == \"__main__\":\n        a = [int(x) for x in stdin.split()]\n        for i in range(10):\n            if (i + a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]) % 10 == 0:\n                print(i)\n                return\n\n\nsolution(input())\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split(' ')]\n    return str(nums.index(max(nums)) + 1)"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n\n    count = 0\n    for i in range(n - 1):\n        if a[i] == a[i + 1] == 1:\n            count += 1\n\n    return str(count)\n\n\nassert(solution('''10''') == '2')\nassert(solution('''5''') == '0')\nassert(solution('''4''') == '0')\nassert(solution('''1 1 0 1 1 0 1 0 1 0''') == '2')\nassert(solution('''1 1 1 1''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0''') == '0')\nassert(solution('''"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(x)\n\nx = int(stdin.readline())\na = stdin.readline().split()\nprint(solution(a))"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    k = len(a) - a.count(0)\n    return str(k)\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    assert n == len(a)\n    k = n\n    for i in range(n):\n        if a[i - 1] == a[i + 1] == 1:\n            k -= 1\n    return str(k)\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    k = 0\n    for i in range(0, len(a) - 1):\n        if a[i] == 1 and a[i + 1] == 1 and i > k:\n            k = i\n    return k\n\nassert(solution('''10\n1 1 0 1 1 0 1 0 1 0''') == 2)\nassert(solution('''5\n1 1 0 0 0''') == 0)\nassert(solution('''4\n1 1 1 1''') == 0)\n\n'''\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.insert(0, 0)\n    a.append(0)\n    c = {}\n    for i in range(n + 2):\n        for j in range(i, n + 2):\n            c[i, j] = a[i] + a[j]\n    k = 0\n    for i in range(n + 2):\n        for j in range(i, n + 2):\n            if i == j:\n                continue\n            if c[i, j] == 1 and c[i + 1, j - 1] == 0:\n                k += 1\n    return str(k)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    a = list(map(int, stdin.strip().split()))\n    print(solution_with_binary_search(a))\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = [int(num) for num in stdin.readline().split()]\n    count = 0\n    for num in array:\n        if num == 1:\n            continue\n        for i in range(2, num):\n            if num % i == 0:\n                count += 1\n    return str(count)\n\n\nassert (solution('''5''')) == '1'\nassert (solution('''6''')) == '4'\nassert (solution('''100''')) == '1'\nassert (solution('''100''')) == '1'\nassert (solution('''10''')) == '1'\nassert (solution('''100''')) == '1'\nassert (solution('''1000''')) == '1'\nassert (solution('''2''')) == '1'\nassert (solution('''2''')) == '1'\nassert (solution('''10''')) == '1'\nassert (solution('''10''')) == '1'\nassert (solution('''100''')) == '1'\nassert (solution('''100''')) == '1'\nassert (solution('''1000''')) == '1'\nassert (solution('''100000''')) == '1'\nassert (solution('''1000000''')) == '1'\nassert (solution('''1000000000''')) == '1'\nassert (solution('''100000000000''')) == '1'\nassert (solution('''10000000000000000''')) == '1'\nassert (solution('''100000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000''')) == '1'\nassert (solution('''100000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000''')) == '1'\nassert (solution('''10000000000000000000000000000000000000''')) == '1'\nassert (solution('''100000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000''')) == '1'\nassert (solution('''10000000000000000000000000000000000000000''')) == '1'\nassert (solution('''100000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''100000000000000000000000000000000000000000''')) == '1'\nassert (solution('''10000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''100000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''10000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''100000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''10000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\nassert (solution('''1000000000000000000000000000000000000000000000000''')) == '1'\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    a = [int(x) for x in stdin.split()]\n    if len(a) == 1:\n        return 1\n    else:\n        return sum(gcd(a[0], x) for x in a[1:])"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n    divisors = [0] * len(a)\n    for i, num in enumerate(a):\n        for j in range(1, int(num ** 0.5) + 1):\n            if num % j == 0:\n                divisors[i] += 1\n    return str(divisors.count(max(divisors)))\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(stdin.readline()) for _ in range(n)]\n\n    divisors = [0] * n\n    for i in range(n):\n        divisors[i] = set()\n        for j in range(n):\n            if i!= j and numbers[j] % numbers[i] == 0:\n                divisors[i].add(numbers[j])\n    result = 1\n    for divisor in divisors:\n        result *= len(divisor)\n    return str(result)\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n\n    cnt = [0 for _ in range(10**12)]\n    for i in range(n):\n        for j in range(1, 10**12):\n            if a[i] % j == 0:\n                cnt[j] += 1\n\n    ans = 0\n    for i in range(1, 10**12):\n        if cnt[i]!= 0:\n            ans += 1\n\n    return str(ans)"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    divs = [a[0]]\n    for i in range(1, n):\n        if a[i] % divs[0]!= 0:\n            divs.append(a[i])\n    return str(len(divs))"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n\n    for i in range(1, n):\n        if a[i] % a[0] == 0:\n            count += 1\n\n    return str(count)\n\nassert(solution('''5\n1 2 3 4 5\n''') == '1')\nassert(solution('''6\n6 90 12 18 30 18\n''') == '4')\nassert(solution('''7\n2 3 4 5 6 7\n''') == '0')\nassert(solution('''8\n1 2 3 4 5 6 7 8\n''') == '3')\nassert(solution('''9\n1 2 3 4 5 6 7 8 9\n''') == '2')\nassert(solution('''10\n2 4 6 8 10 12 14 16 18 20\n''') == '2')\nassert(solution('''11\n2 4 6 8 10 12 14 16 18 20 21\n''') == '2')\nassert(solution('''12\n2 4 6 8 10 12 14 16 18 20 21 22\n''') == '3')\nassert(solution('''13\n2 4 6 8 10 12 14 16 18 20 21 22 23\n''') == '2')\nassert(solution('''14\n2 4 6 8 10 12 14 16 18 20 21 22 23 24\n''') == '1')\nassert(solution('''15\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25\n''') == '2')\nassert(solution('''16\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26\n''') == '1')\nassert(solution('''17\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27\n''') == '1')\nassert(solution('''18\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28\n''') == '0')\nassert(solution('''19\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29\n''') == '2')\nassert(solution('''20\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30\n''') == '1')\nassert(solution('''21\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31\n''') == '2')\nassert(solution('''22\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32\n''') == '0')\nassert(solution('''23\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n''') == '3')\nassert(solution('''24\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\n''') == '2')\nassert(solution('''25\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35\n''') == '1')\nassert(solution('''26\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\n''') == '2')\nassert(solution('''27\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37\n''') == '0')\nassert(solution('''28\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38\n''') == '3')\nassert(solution('''29\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\n''') == '2')\nassert(solution('''30\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\n''') == '1')\nassert(solution('''31\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41\n''') == '2')\nassert(solution('''32\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42\n''') == '0')\nassert(solution('''33\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43\n''') == '3')\nassert(solution('''34\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44\n''') == '2')\nassert(solution('''35\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\n''') == '1')\nassert(solution('''36\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46\n''') == '2')\nassert(solution('''37\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n''') == '0')\nassert(solution('''38\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\n''') == '3')\nassert(solution('''39\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\n''') == '2')\nassert(solution('''40\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n''') == '1')\nassert(solution('''41\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51\n''') == '2')\nassert(solution('''42\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\n''') == '0')\nassert(solution('''43\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53\n''') == '3')\nassert(solution('''44\n2 4 6 8 10 12 14 16 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n\n    divisors = [1] * n\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0:\n                divisors[i] += 1\n\n    return str(divisors.count(max(divisors)))"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    res = set()\n    for x in a:\n        for y in a:\n            if x!= y:\n                if x % y == 0:\n                    res.add(y)\n    print(len(res))\nsolution(None)\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()[1].split(\",\")))\n    return str(len(set(a)))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = [int(x) for x in stdin.split()]\n    min_pocket = n\n    for i in range(1, n):\n        if coins[i] == coins[i - 1]:\n            min_pocket = min(min_pocket, n - i)\n    return min_pocket\n\nassert solution('1') == 1\nassert solution('100') == 1\nassert solution('3 3 3 3 3 3') == 2\nassert solution('1 2 4 3 3 3 2') == 2\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    dp = [0]*(n+1)\n    for i in range(1, n+1):\n        for j in range(i):\n            if a[i-1] == a[j-1]:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    b = [0] * (n + 1)\n    b[0] = a[0]\n    for i in range(1, n):\n        b[i] = min(b[i - 1] + a[i], a[i])\n    print(b[n - 1])"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    r = a[0]\n    for i in range(1, n):\n        if r > a[i]:\n            r = a[i]\n    return str(r)\n\nassert(solution('6\\n1 2 4 3 3 2') == '2')\nassert(solution('1\\n100') == '1')\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    s = set()\n    for i in range(len(a)):\n        if a[i] in s:\n            return i + 1\n        s.add(a[i])\n    return i + 1\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    min_ = n\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and a[j] == a[i]:\n            j += 1\n        if j - i < min_:\n            min_ = j - i\n        i = j\n\n    return min_"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    m = [0] * 101\n    for i in a:\n        m[i] += 1\n\n    ans = 0\n    for i in range(n):\n        if m[i] > 0:\n            ans += 1\n            for j in range(i + 1, n):\n                if m[j] > 0:\n                    m[j] -= 1\n    return str(ans)\n\nprint(solution(''))\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    min_pockets = n\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            min_pockets -= 1\n    return str(min_pockets)\n\nprint(solution(\"5\"))"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coins = list(map(int, stdin.readline().split()))\n    coins.sort()\n    pocket_count = 1\n    pocket_value = coins[0]\n    for i in range(1, len(coins)):\n        if coins[i]!= pocket_value:\n            pocket_value = coins[i]\n            pocket_count += 1\n    return str(pocket_count)"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    x = a[0]\n    count = 0\n    for i in range(1, n):\n        if x == a[i]:\n            count += 1\n        else:\n            x = a[i]\n            count = 1\n    return count\n\nassert(solution('''6\n1 2 4 3 3 2''') == 2)\nassert(solution('''1\n100''') == 1)\nassert(solution('''1\n100''') == 1)\nassert(solution('''1\n100''') == 1)\nassert(solution('''2\n1 2 1''') == 2)\nassert(solution('''3\n2 3 2''') == 3)\nassert(solution('''3\n2 3 2''') == 3)\nassert(solution('''5\n4 2 4 3 2''') == 2)\nassert(solution('''100\n3 5 4 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(i) for i in stdin.split()]\n    if n < r:\n        return -1\n    if n == 0:\n        return 0\n    house = [int(i) for i in stdin.split()]\n    heaters = 0\n    for i in range(n):\n        if house[i] == 1:\n            heaters += 1\n    heaters -= 1\n    if heaters < r:\n        return -1\n    else:\n        return heaters\n\nprint(solution(input()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    stdin.readline()\n    s = list(map(int, stdin.readline().split()))\n    N = int(stdin.readline())\n    stdin.readline()\n    stdin.readline()\n    if N == 0:\n        return '-1'\n    else:\n        l = [0 for _ in range(N)]\n        for i in range(N):\n            if s[i] == 1:\n                l[i] = 1\n        l[0] = 1\n        l[-1] = 1\n        for i in range(1, N - 1):\n            if s[i] == 1:\n                l[i] = min(l[i - 1], l[i + 1]) + 1\n        return str(min(l))\n\n\n\nprint(solution('4 2\\n1 0 0 1\\n'))\nprint(solution('5 3\\n0 0 1 1 0 1\\n'))\nprint(solution('5 10\\n0 0 1 1 0 1 0 0 0 1\\n'))\nprint(solution('10 3\\n0 0 1 1 0 1 0 0 0 1 0 0 1 0 1 0 1\\n'))"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, r = map(int, lines[0].split())\n    h = list(map(int, lines[1].split()))\n    heaters = []\n    for i in range(len(h)):\n        if h[i]:\n            heaters.append(i)\n    \n    heaters.sort()\n    minimum = len(heaters)\n    for i in range(len(heaters)):\n        temp = heaters[i] - i\n        if temp < minimum:\n            minimum = temp\n    \n    return str(minimum if minimum < n else -1)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    answer = 0\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        low, high = max(0, i - r), min(n - 1, i + r)\n        for j in range(low, high + 1):\n            a[j] = max(a[j], a[i] + 1)\n        answer += 1\n    if answer == n:\n        return '-1'\n    return str(answer)"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n\n    if n <= r:\n        return -1\n    \n    houses = [int(x) for x in stdin.split()]\n\n    heaters = find_all_heaters(houses, n, r)\n    return len(heaters)\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    vova = map(int, stdin.split())\n    heaters = []\n    for i, h in enumerate(vova):\n        if h == 1:\n            heaters.append(i)\n    heaters.sort()\n    i = 0\n    while i < len(heaters):\n        pos = heaters[i]\n        if pos + r - 1 < n:\n            pos += r - 1\n        while pos < n and vova[pos] == 0:\n            pos += 1\n        pos -= 1\n        i += 1\n        if pos < n and pos + r - 1 >= n:\n            return str(-1)\n    return str(len(heaters))\n\n\n>>> solution('''4 3\n1 0 0 0\n0 1 1 1\n0 0 0 0\n''')\n'3'\n>>> solution('''3 3\n0 0 1 1\n1 0 0 0\n0 1 1 1\n''')\n'2'\n>>> solution('''7 8\n1 0 0 0 0 0 1\n0 0 1 1 1 1 0\n1 0 1 0 1 1 1\n0 0 1 1 1 1 0\n0 0 1 1 1 1 0\n0 0 0 0 0 0 0\n''')\n'-1'\n>>> solution('''7 8\n0 0 1 1 1 1 0\n1 0 0 1 1 1 1\n1 0 1 0 1 1 1\n0 0 1 1 1 1 0\n0 0 1 1 1 1 0\n0 0 0 0 0 0 0\n''')\n'-1'\n>>> solution('''6 5\n0 0 0 0 0 0 1\n0 0 0 0 0 0 1\n0 0 0 0 0 0 1\n0 0 0 0 0 0 1\n0 0 0 0 0 0 1\n0 0 0 0 0 0 1\n''')\n'3'\n>>> solution('''7 7\n0 0 0 0 0 0 1 1\n0 0 0 0 0 0 1 1\n0 0 0 0 0 0 1 1\n0 0 0 0 0 0 1 1\n0 0 0 0 0 0 1 1\n0 0 0 0 0 0 1 1\n0 0 0 0 0 0 1 1\n''')\n'-1'\n>>> solution('''7 8\n0 0 1 0 1 1 1\n1 0 0 0 0 0 0\n1 0 0 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 0 0 0 0 0\n''')\n'-1'\n>>> solution('''7 8\n0 0 1 0 1 1 1\n1 0 0 0 0 0 0\n1 0 0 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 0 0 0 0 0\n''')\n'-1'\n>>> solution('''7 8\n0 0 1 0 1 1 1\n1 0 0 0 0 0 0\n1 0 0 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 0 0 0 0 0\n''')\n'-1'\n>>> solution('''7 8\n0 0 1 0 1 1 1\n1 0 0 0 0 0 0\n1 0 0 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 0 0 0 0 0\n''')\n'-1'\n>>> solution('''7 8\n0 0 1 0 1 1 1\n1 0 0 0 0 0 0\n1 0 0 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 0 0 0 0 0\n''')\n'3'\n>>> solution('''7 8\n0 0 1 0 1 1 1\n1 0 0 0 0 0 0\n1 0 0 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 0 0 0 0 0\n''')\n'-1'\n>>> solution('''7 8\n0 0 1 0 1 1 1\n1 0 0 0 0 0 0\n1 0 0 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 0 0 0 0 0\n''')\n'-1'\n>>> solution('''7 8\n0 0 1 0 1 1 1\n1 0 0 0 0 0 0\n1 0 0 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 0 0 0 0 0\n''')\n'3'\n>>> solution('''7 8\n0 0 1 0 1 1 1\n1 0 0 0 0 0 0\n1 0 0 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 0 0 0 0 0\n''')\n'-1'\n>>> solution('''7 8\n0 0 1 0 1 1 1\n1 0 0 0 0 0 0\n1 0 0 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 1 0 0 0 0\n0 0 0 0 0 0 0\n''')\n'-1'\n>>> solution('''7 8\n0 0 1"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n\n    m = 0\n    for i in range(n):\n        if a[i] == 1:\n            m = max(m, min(i - r + 1, i + r - 1))\n\n    return m if m!= 0 else -1\n\n\nassert (solution(stdin)) == 3\nassert (solution(stdin)) == 2\nassert (solution(stdin)) == -1\nassert (solution(stdin)) == 3\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    house = [int(x) for x in stdin.split()]\n    min_heaters = n\n    for heater_pos in range(n):\n        min_heaters = min(min_heaters,\n                          house[heater_pos - r + 1:heater_pos + r - 1].count(0))\n    return str(min_heaters) if min_heaters > 0 else \"-1\"\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    h_idx = [i for i in range(n) if array[i] == 1]\n    min_h = n + 1\n    for i in h_idx:\n        r1 = i - r\n        if r1 >= 0:\n            r2 = i + r - 1\n            if r2 < n:\n                min_h = min(min_h, r2 - r1 + 1)\n    return str(min_h if min_h < n + 1 else -1)\n\n\nassert(solution('''6 2\n0 1 1 0 0 1\n''') == '3')\nassert(solution('''5 3\n1 0 0 0 1\n''') == '2')\nassert(solution('''5 10\n0 0 0 0 0\n''') == '3')\nassert(solution('''10 3\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''10 10\n0 0 1 1 0 1 0 0 1\n''') == '3')\nassert(solution('''1\n1\n''') == '-1')\nassert(solution('''2\n0\n''') == '-1')\nassert(solution('''4\n1 0 0 0\n''') == '2')\nassert(solution('''100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split(\" \")))\n    vova = list(map(int, stdin.split(\" \")))\n    c = 0\n    for i in range(n):\n        if vova[i] == 1:\n            c += 1\n    if c < n - r + 1:\n        return -1\n    for i in range(n - r + 1):\n        for j in range(r):\n            if vova[i + j] == 1:\n                vova[i + j] = 0\n    return c\n\nassert(solution(stdin) == 3)\nassert(solution(stdin) == 2)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(solution(stdin) == 3)\nassert(solution(stdin) == -1)\nassert(s"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(answer())\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(len(set(i * j * k for i in range(2, int(stdin)) for j in range(1, int(stdin)) for k in range(1, int(stdin)) if i * j + k == int(stdin))))"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return len([a, b, n - a - b] for a in range(1, (n // 3) + 1) for b in range(a, (n // 2) + 1) if a * b == n - a - b)\n\nassert(solution(3) == 3)\nassert(solution(10) == 4)\nassert(solution(18) == 5)\nassert(solution(24) == 7)\nassert(solution(32) == 9)\n\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_triplets(int(stdin)))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    b = 1\n    c = 2\n    counter = 0\n    while n > 0:\n        if a*b + c == n:\n            counter += 1\n        n -= a*b + c\n        a += 1\n        b += 1\n        c += 1\n    return counter"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split()\n    N = int(N[0])\n    if N < 2 or N > 10**6:\n        raise ValueError\n    count = 0\n    for A in range(1, N // 2 + 1):\n        for B in range(1, N // 2 + 1):\n            C = N - A - B\n            if A * B + C == N:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    if 2 <= n <= 10 ** 6:\n        print(n // 2)\n    return \"\""
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    return str(comb(N, 3))"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from sys import stdin\n    n = int(stdin.readline())\n    a = 0\n    b = 0\n    c = 0\n    for _ in range(n):\n        x = int(stdin.readline())\n        a = max(a, x)\n        b = max(b, x + 1)\n        c = max(c, x + 2)\n    return str(a * b * c)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # todo: read stdin\n    # todo: calculate result\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    0\n    >>> solution('()')\n    0\n    >>> solution('(()')\n    0\n    >>> solution('()()')\n    0\n    >>> solution('()()()')\n    0\n    >>> solution('(()()')\n    0\n    >>> solution('((()')\n    0\n    >>> solution('()()()')\n    0\n    >>> solution('((()()()))')\n    0\n    >>> solution('((()()))()')\n    0\n    >>> solution('((()()()()))')\n    0\n    >>> solution('((()()()()()()()()()()()()()()()()()())')\n    0\n    >>> solution('((()()()()()()()()()()()()()()()()()()()()()()()()()()()())')\n    0\n    \"\"\"\n    brackets = stdin.strip()\n    count = 0\n\n    for index in range(len(brackets)):\n        if brackets[index] == '(':\n            count += 1\n        else:\n            if count % 2!= 0:\n                brackets = brackets[:index] + '1' + brackets[index:]\n                count += 1\n            count -= 1\n\n    return count\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    # print(s)\n    d = {}\n    for i, c in enumerate(s):\n        if c == '(':\n            d[i] = c\n        elif c == ')':\n            if i not in d:\n                return i\n            else:\n                del d[i]\n    return 0"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\nprint(solution(input()))"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    count = 0\n    for i in range(1, n):\n        count += max(s[i].count('('), s[i].count(')'))\n    return count\n\nprint(solution(input()))\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    stack = []\n    for i, char in enumerate(s):\n        if char == '(':\n            stack.append(i)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return i + 1\n    return 0\n\nassert solution('''6''') == 0\nassert solution('''(((())''') == 3\nassert solution(''')))(((((''') == 0\nassert solution(''')))(''') == 0\nassert solution(''')))(((((''') == 0\nassert solution(''')))))(((((''') == 0\nassert solution(''')))))))(((((''') == 0\nassert solution(''')))))))))))(((((''') == 0\nassert solution('''))))))))))))))))))))))(''') == 0\nprint('solution() is all done')\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for c in stdin.strip():\n        if c == '(':\n            stack.append(')')\n        elif c == ')':\n            if not stack:\n                return 0\n            stack.pop()\n    return 0 if stack else 1\n\n\nassert solution('') == 0\nassert solution('()') == 1\nassert solution('()()') == 0\nassert solution(')(') == 0\nassert solution(')(()') == 0\nassert solution('(()())') == 0\nassert solution('(((())))') == 0\nassert solution(')((((())))') == 0\nassert solution('(((())))(())') == 0\nassert solution('(((())))(())()())') == 0\nassert solution('(((())))(((()())))(((())))') == 0\nassert solution('(((())))(((()())))(((())))()') == 0\nassert solution('((((())))(((()())))(((())))())(((())))())(((()())()))()') == 0\nassert solution('((((())))(((()())))(((())))())(((())))())(((()())()))())(((()())()))()') == 0\nassert solution('(()(((())))(((()())))(((())))())(((())))())(((()())()))())(((()())()))())(((()())()))()()') == 0\nassert solution
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    stack = []\n    for i, c in enumerate(s):\n        if c == '(':\n            stack.append(c)\n        else:\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                stack.append(c)\n    return len(stack)\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.rstrip().split('\\n')\n    return len(s) - len(t) if len(t) < len(s) else 0\n\nassert solution('bbaba\\nbb\\n') == 3\nassert solution('baaba\\nab\\n') == 2\nassert solution('abcde\\nabcde\\n') == 0\nassert solution('asdfasdf\\nfasd\\n') == 3\nassert solution('hjksdfhklfhjklfjhfklfjhfjkhfjkhfjkjhfjkhfjkfjkhfjkjhfjkfhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhfjkhf"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    m = 0\n    if len(s) < len(t):\n        m = len(s)\n    else:\n        m = len(t)\n    s = s[::-1]\n    t = t[::-1]\n    for i in range(len(s) - m + 1):\n        if t == s[i:i + len(t)]:\n            return i\n    return m\n\nprint(solution(input()))\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:len(stdin) - 1]\n    t = stdin[len(stdin) - 1]\n    l = len(s)\n    m = len(t)\n    # print(s)\n    # print(t)\n    if l < m:\n        return 0\n    elif l == m:\n        return l\n    else:\n        i = l - m\n        j = m - 1\n        while j >= 0:\n            if s[i] == t[j]:\n                j -= 1\n            i -= 1\n        return i + 1\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    res = 0\n\n    for i in range(1, len(s)):\n        if s[i]!= s[i-1] and t[i-1] == t[i]:\n            res += 1\n    return res\n\nassert solution(\"bbaba\\nbb\\n\") == 3\nassert solution(\"baaba\\nab\\n\") == 2\nassert solution(\"abcde\\nabcde\\n\") == 0\nassert solution(\"asdfasdf\\nfasd\\n\") == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    count = 0\n    i = 0\n    while i < len(s) and i < len(t):\n        if s[i] == t[i]:\n            i += 1\n            count += 1\n        else:\n            i += 1\n    return count\n\nassert (solution('''bbaba\nbb\n''') == 3)\nassert (solution('''baaba\nab\n''') == 2)\nassert (solution('''abcde\nabcde\n''') == 0)\nassert (solution('''asdfasdf\nfasd\n''') == 3)\nassert (solution('''haegwjxz\nxyz''') == 3)\nprint(solution(input()))\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    len_s = len(s)\n    len_t = len(t)\n    m = len_t - len_s + 1\n    if m == 0:\n        return 0\n\n    i = j = 0\n    while i < len_s and j < len_t:\n        while i < len_s and s[i]!= t[j]:\n            i += 1\n\n        if i == len_s:\n            return j\n\n        while j < len_t and s[i] == t[j]:\n            j += 1\n            i += 1\n    return m"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    \n    l = len(s)\n    for i in range(l):\n        if s[i:].startswith(t):\n            return i\n    \n    return 0\n    "
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution(\"bbaba\", \"bb\") == 3\nassert solution(\"baaba\", \"ab\") == 2\nassert solution(\"abcde\", \"abcde\") == 0\nassert solution(\"asdfasdf\", \"fasd\") == 3\nassert solution(\"aaaa\", \"a\") == 0\nassert solution(\"bbbaa\", \"bb\") == 3\nassert solution(\"aab\", \"a\") == 1\nassert solution(\"a\", \"a\") == 0\nassert solution(\"bb\", \"\") == 1\nassert solution(\"aa\", \"\") == 1\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution(\"\", \"\") == 0\nassert solution"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max([a*b, a*d, b*c]))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    return str(max(b * c, c * d))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(n) for n in stdin.split()]\n    if a <= b and c <= d:\n        return str(b * c)\n    else:\n        return str(a * d)\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = [int(x) for x in stdin.split()]\n    max_x = max(a,b)\n    max_y = max(c,d)\n    x = y = 1\n    while x < max_x:\n        y = 1\n        while y < max_y:\n            if x*y <= a and y*x <= b and c*y <= d and d*y <= b:\n                return(str(x) + \" \" + str(y))\n            y += 1\n        x += 1\n    return(str(x) + \" \" + str(y))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(1, (b - a + 1) // (d - c + 1)))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    return str(max(1, max(a,b) * max(c,d)))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get the input from stdin.\n    \"\"\"\n    a, b, c, d = [int(x) for x in stdin.split()]\n    res = []\n    for x in range(a, b+1):\n        for y in range(c, d+1):\n            if x * y not in res:\n                res.append(x * y)\n    return str(max(res))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a, b, c, d))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = [int(x) for x in stdin.split()]\n    return str(max(a,b)*max(c,d))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get the number of problems that will be solved by choosing K as the number of ARCs or ABCs.\n    \"\"\"\n\n    N = int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().strip().split()))\n\n    arcs = sum(1 for d_i in d if d_i >= 5)\n    abc = sum(1 for d_i in d if d_i < 5)\n\n    return str(arcs == abc)\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The input to this function is a string consisting of N integers: the difficulty of the problems.\n\n    The output should be the number of the integers that make the number of problems for ARCs and the number of problems for ABCs the same.\n\n    >>> solution(\"9 1 4 4 6 7\")\n    '2'\n    >>> solution(\"5 4 5 5 5 5 5 5 5\")\n    '0'\n    \"\"\"\n\n    N = int(stdin.readline().strip())\n    probs = sorted(map(int, stdin.readline().strip().split()))\n\n    k_b, k_a = [], []\n    for p in probs:\n        if p > 0:\n            k_b.append(p)\n        else:\n            k_a.append(p)\n\n    return str(len(k_b) - len(k_a))\n\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    d = sorted(int(x) for x in stdin.split()[1:])\n    choices = set()\n    for i in range(1, len(d)):\n        if d[i] > d[i - 1] + 1:\n            choices.add(d[i] - 1)\n    if len(choices) < N / 2:\n        return str(N - len(choices))\n    return str(len(choices))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    diff = list(map(int, stdin.readline().strip().split()))\n    result = 0\n    for x in diff:\n        if x % 2 == 0:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(\" \")))\n    count = 0\n    for i in range(n//2):\n        if arr[i] > arr[n-1-i]:\n            count += 1\n    return str(count)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d_numbers = [int(number) for number in stdin.split(\" \")]\n    difficulty = max(d_numbers)\n    abc_numbers = [number for number in d_numbers if number < difficulty]\n    arcs_numbers = [number for number in d_numbers if number >= difficulty]\n    return str(len(arcs_numbers) == len(abc_numbers))"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    d = [int(i) for i in stdin[1:]]\n    counter1 = 0\n    counter2 = 0\n    d.sort()\n    for i in d:\n        if i >= 5:\n            counter1 += 1\n        else:\n            counter2 += 1\n    return str(counter1)+\" \"+str(counter2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    ans = 0\n    for i in range(N):\n        ans += (i+1) * int(stdin.readline().strip())\n    if ans % 2!= 0:\n        print(ans)\n    else:\n        print(ans-1)\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.strip().split())\n\n    data = list(map(int, stdin.strip().split()))\n\n    result = 0\n\n    for index in range(len(data)):\n        m = min(l, data[index] - 1)\n        if data[index] > h:\n            continue\n        if m == l:\n            result = max(result, m)\n        else:\n            result = max(result, m + 1)\n\n    return str(result)\n\n\nassert (solution('''7 24 21 23\n16 17 14 20 20 11 22\n''') == '3')\nassert (solution('''7 21 19 22\n16 17 14 20 20 11 22\n''') == '3')\nassert (solution('''7 24 21 22\n16 17 14 20 20 11 22\n''') == '3')\nassert (solution('''7 24 21 22\n16 17 14 19 20 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''') == '2')\nassert (solution('''7 24 21 22\n16 17 14 19 19 11 22\n''"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(solution_optimized(n, h, l, r, a))\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    times = [0] * n\n    for i in range(n):\n        start = a[i] - 1\n        if start < l or start > r:\n            times[i] = 0\n        else:\n            times[i] = n - i - 1\n    return max(times)\n\n\nassert(solution(input()) == 3)\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(x) for x in stdin.split()]\n    a = list(map(int, stdin.split()))\n    a_s = sorted(a)\n    ans = 0\n    for i in range(1, n):\n        if l <= a_s[i] <= r:\n            ans += 1\n    return str(ans)\n\n\nassert(solution(\"7 24 21 23\") == \"3\")\nassert(solution(\"16 17 14 20 20 11 22\") == \"3\")\nassert(solution(\"1 2 4 3 3 2\") == \"0\")\nassert(solution(\"1 2 3 1 3 2\") == \"2\")\nassert(solution(\"4 4 4 4\") == \"0\")\nassert(solution(\"5 6 7 8 9 10\") == \"1\")\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    times = [int(x) for x in stdin.split()]\n    times.sort()\n    n_good_times = 0\n    for i in range(n):\n        if l <= times[i] <= r:\n            n_good_times += 1\n    return n_good_times\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    m = n * (h - 1) + max(max(a) - 1, 0)\n    return str(m)\n\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(x) for x in stdin.split()]\n    times = [int(x) for x in stdin.split()]\n    return solve(n, h, l, r, times)\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    # print(a)\n    i = 0\n    ans = 0\n    while i < n:\n        # print(i, h, l, r, a[i])\n        # print(a[i])\n        if a[i] <= h:\n            ans += 1\n            i += 1\n        else:\n            ans += 1\n            i += 1\n            while i < n and a[i] <= l:\n                i += 1\n            if i == n:\n                break\n            i += 1\n            if a[i] - 1 <= l:\n                ans += 1\n            else:\n                ans += 1\n                while i < n and a[i] - 1 <= r:\n                    i += 1\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(i) for i in stdin.split()]\n    al = [int(i) for i in stdin.split()]\n    ans = 0\n    for i in range(n):\n        if al[i] < l:\n            continue\n        elif al[i] < h:\n            ans += 1\n            continue\n        else:\n            if al[i] > r:\n                ans += 1\n                continue\n            else:\n                break\n    return str(ans)"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    difficulties = list(map(int, stdin.split()))\n    assert len(difficulties) == n\n    res = 0\n    i = 1\n    while i < len(difficulties):\n        if difficulties[i] * 2 < difficulties[i - 1]:\n            res += 1\n            i += 1\n        else:\n            break\n    return str(res)\n\nassert(solution('1') == '1')\nassert(solution('10') == '1')\nassert(solution('2 3 5 6 7 10 21 23 24 49') == '4')\nassert(solution('2 10 50 110 250') == '1')\nassert(solution('3 1 2 3 4 5 6 7') == '1')\nassert(solution('4 4 3 4 2') == '2')\nassert(solution('7 2 3 4 5 6 7') == '1')\nassert(solution('1 2 3 4 5 6 7') == '1')\nassert(solution('1 2 3 4 5 6 7 10 21 23 24 49') == '3')\nassert(solution('2 10 50 110 250') == '2')\n\n\n\n\"\"\""
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    problems = [int(num) for num in stdin.readline().strip().split()]\n\n    for p in problems:\n        if p == problems[-1]:\n            return str(len(problems))\n        else:\n            if problems[problems.index(p) + 1] > 2 * p:\n                return str(len(problems) - problems.index(p))\n\nassert(solution(\"4\\n2 10 50 110\\n\") == \"1\")\nassert(solution(\"5\\n2 10 50 110\\n\") == \"2\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") == \"3\")\nassert(solution(\"6\\n4 7 12 100 150 199\\n\") =="
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = [int(i) for i in stdin.split()]\n\n    a.sort()\n\n    counter = 0\n    for i in range(1, len(a)):\n        if a[i - 1] * 2 > a[i] and a[i - 1] <= a[i]:\n            counter += 1\n\n    return str(counter)"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    a = [int(x) for x in stdin[1].split()]\n    res = 1\n    for i in range(n):\n        if i < n-1:\n            if a[i] * 2 < a[i+1]:\n                res += 1\n    return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(x) // 2 for x in stdin.split()))\n\nassert(solution(\"5\") == \"1\")\nassert(solution(\"1 2 5 6 7 10 21 23 24 49\") == \"4\")\nassert(solution(\"2 10 50 110 250\") == \"1\")\nassert(solution(\"4 7 12 100 150 199\") == \"3\")\nassert(solution(\"6 4 7 12 100 150 199\") == \"3\")\nassert(solution
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # print('Hello world!')\n    n = int(stdin.readline())\n    difficulties = list(map(int, stdin.readline().split()))\n    count = 0\n    difficulties.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if difficulties[i] * 2 <= difficulties[j] and j!= i:\n                count += 1\n                break\n    print(count)\n    return ''"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nm = int(stdin.readline().strip())\nl = [int(x) for x in stdin.readline().strip().split(' ')]\n\nmin_lcm = 10**7+1\n\nfor i in range(m-1):\n    for j in range(i+1,m):\n        lcm = l[i]*l[j]\n        if lcm < min_lcm:\n            min_lcm = lcm"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_lcm(x: int, y: int) -> int:\n        return (x * y) // gcd(x, y)\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = y, x % y\n        return x\n\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n\n    m = a[0]\n    for i in range(1, n):\n        m = get_lcm(m, a[i])\n\n    candidates = []\n    for i in range(n):\n        if m % a[i] == 0:\n            candidates.append(i)\n\n    if not candidates:\n        return \"\"\n    min_index = min(candidates)\n    min_index2 = max(candidates)\n    return str(min_index) + \" \" + str(min_index2)\n\nassert(solution(stdin) == '1 2')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(stdin) == '1 4')\nassert(solution(std"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n@pytest.mark.parametrize(\n    (\"input\", \"expected\"),\n    (\n        # (\"3\\n2 3\\n\", \"1 2\\n\"),\n        # (\"5\\n2 4 8 3 6\\n\", \"1 2\\n\"),\n        # (\"6\\n2 5 10 1 10 2\\n\", \"1 4\\n\"),\n        (\"5\\n5 2 11 3 7\\n\", \"1 4\\n\"),\n        (\"6\\n2 5 10 1 10 2\\n\", \"1 4\\n\"),\n    ),\n)\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split(\" \")]\n\n    a.sort()\n\n    lcm = a[0]\n    for i in range(1, len(a)):\n        lcm = (lcm * a[i]) // math.gcd(lcm, a[i])\n\n    return \" \".join(map(str, a))\n"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    assert len(a) == n\n\n    ans = None\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < ans or ans == None:\n                ans = lcm(a[i], a[j])\n                index = (i, j)\n\n    return \" \".join(map(str, index))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    c = Counter(a)\n    l, r = float('inf'), 0\n    for k, v in c.items():\n        if v <= l:\n            l, r = v, k\n        elif v == l:\n            r = k\n    print(l, r)"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return None\n    nums.sort()\n    result = 0\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            result = max(result, lcm(nums[i], nums[j]))\n    return f'{result // 2} {result % 2}'\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    while T:\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split()]\n        a.sort()\n        min_lcm = float('inf')\n        i, j = -1, -1\n        for i in range(n):\n            for j in range(i, n):\n                if a[i] * a[j] < min_lcm:\n                    min_lcm = a[i] * a[j]\n                    i1, j1 = i, j\n                if min_lcm == a[i] * a[j]:\n                    if i < j:\n                        i1, j1 = i, j\n        print(str(i1 + 1) +'' + str(j1 + 1))\n        T -= 1\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    min_lcm = 1\n    min_pairs = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            lcm = lcm_of_numbers(a[i], a[j])\n            if lcm < min_lcm:\n                min_lcm = lcm\n                min_pairs = [i, j]\n    return \"{} {}\".format(min_pairs[0], min_pairs[1])\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    counter = [0] * 3\n    for i in s:\n        counter[int(i)] += 1\n    zeros, ones, twos = counter\n    ans = \"\"\n    if ones < zeros:\n        ans += \"1\" * ones\n        ans += \"0\" * (zeros - ones)\n    elif ones > zeros:\n        ans += \"0\" * (ones - zeros)\n        ans += \"1\" * (zeros)\n    else:\n        ans += \"0\" * zeros\n        ans += \"1\" * ones\n    return ans"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n\n    # get frequency of each character\n    freq = {'0': 0, '1': 0, '2': 0}\n    for i in s:\n        freq[i] += 1\n\n    # get frequency of '2'\n    if freq['2'] > freq['1']:\n        f2 = freq['2']\n        f1 = freq['1']\n    else:\n        f2 = freq['1']\n        f1 = freq['2']\n\n    # get the least amount of replacement to make '1' and '2' balanced\n    if f1 < (n - f2):\n        return s.replace('1', '2', f1)\n\n    elif f1 > (n - f2):\n        return s.replace('2', '1', f2)\n\n    # is balanced\n    return s"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    res = ['2'] * n\n\n    for i in range(1, n):\n        pre = res[0]\n        for j in range(1, i + 1):\n            if j % 3 == 1:\n                if pre == '0':\n                    res[j] = '1'\n                else:\n                    res[j] = '0'\n            else:\n                if pre == '1':\n                    res[j] = '2'\n                else:\n                    res[j] = '1'\n\n            pre = res[j]\n    return \"\".join(res)\n\n\nassert(solution('') == '')\nassert(solution('0') == '0')\nassert(solution('11') == '111')\nassert(solution('11011') == '111211')\nassert(solution('11111') == '1111211')\nassert(solution('111110000') == '11112110000')\nassert(solution('1111100000010110110100100100') == '1111211000000101112101100100')\nassert(solution('111110000110101011011110010001111') == '111121100001101011121110010001112')\nassert(solution('11111000011010101101111001000111101') == '11112110000110101112111001000111212')\nassert(solution('111110000110101011011110010001111111') == '1111211000011010111211100100011121211')\nassert(solution('1111100') == '12111')\nassert(solution('1111111') == '1211212')\nassert(solution('1111111000000') == '121121213')\nassert(solution('1111111011111100') == '1211212121314')\nassert(solution('111110000000000') == '12112121212')\nassert(solution('111111111111111') == '1211212121211')\nassert(solution('11111111111111111') == '121121212121121')\nassert(solution('11111111111111111111111111111') == '12112121212112121121')\nassert(solution('1111111111111111111111111111111000011111') == '1211212121211212112121212121212')\nassert(solution('1111111111111111111111111111111000111111') == '121121212121121211212121212121213')\nassert(solution('11111111111111111111111111111110001111110000000000') == '12112121212112121121212121212121314')\nassert(solution('1111111111111111111111111111111000111111000000000011111') == '1211212121211212112121212121212131415')\nassert(solution('1111111111111111111111111111111000111111000000000011111000001') == '121121212121121211212121212121213141516')\nassert(solution('1111111111111111111111111111111000111111000000000011111000001111111111111111111111') == '12112121212112121121212121212121314151617')\nassert(solution('1111111111111111111111111111111000111111000000000011111000001111111111111111111111000000000') == '1211212121211212112121212121212131415161718')\nassert(solution('1111111111111111111111111111111000111111000000000011111000001111111111111111111111000001111110000011111111111111111111') == '121121212121121211212121212121213141516171819')\nassert(solution('11111111111111111111111111111110001111110000000000111110000011111111111111111111110000011111100000111111111111111111111111111111111111111111') == '12112121212112121121212121212121314151617181920')\nassert(solution('11111111111111111111111111111110001111110000000000111110000011111111111111111111110000011111100000111111111111111111111111111111111111111111111111111111111100000111111111111111111111111111111') == '1211212121211212112121212121212131415161718192021')\nassert(solution('111111111111111111111111111111100011111100000000001111100000111111111111111111111100000111111000001111111111111111111111111111111111111111111111111111111111000001111111111111111111111111111111111') == '121121212121121211212121212121213141516171819202122')\nassert(solution('111111111111111111111111111111100011111100000000001111100000111111111111111111111100000111111000001111111111111111111111111111111111111111111111111111111111000001111111111111111111111111111111111') == '12112121212112121121212121212121314151617181920212223')\nassert(solution('111111111111111111111111111111100011111100000000001111100000111111111111111111111100000111111000001111111111111111111111111111111111111111111111111111111111000001111111111111111111111111111111111') == '1211212121211212112121212121212131415161718192021222324')\nassert(solution('1111111111111111111111111111111000111111000000000011111000001111111111111111111111000001111110000011111111111111111111111111111111111111111111111111111111110000011111111111111111111111111111111111111') == '121121212121121211212121212121213141516171819202122232425')\nassert(solution('1111111111111111111111111111111000111111000000000011111000001111111111111111111111000001111110000011111111111111111111111111111111111111111111111111111111110000011111111111111111111111111111111111111111111111111000001111111111111111111111111111111111') == '12112121212112121121212121212121314151617181920212223242526')\nassert(solution('11111111111111111111111111111110001111110000000000111110000011111111111111111111110000011111100000111111111111111111111111111111111111111111111111111111111100000111111111111111111111111111111111111111111111111110000011111"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    total = n\n    ones = s.count('1')\n    twos = s.count('2')\n    ones += (total - ones) // 3\n    twos += (total - twos) // 3\n    for _ in range(ones):\n        s = s.replace('1', '2', 1)\n    for _ in range(twos):\n        s = s.replace('2', '1', 1)\n    return s\n\nassert(solution('''\n3\n121\n''') == '021')\nassert(solution('''\n6\n000000\n''') == '001122')\nassert(solution('''\n6\n211200\n''') == '211200')\nassert(solution('''\n6\n120110\n''') == '120120')"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if n % 3 == 0:\n        return \"0\" * n\n    else:\n        return \"2\" * (n - n % 3) + \"1\" * (n % 3)\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n\n    if n % 3!= 0:\n        raise ValueError(\"n is not divisible by 3\")\n\n    left, right = s[:n // 3], s[n // 3:]\n    left_count = left.count(\"0\")\n    right_count = right.count(\"1\")\n    if left_count!= right_count:\n        return \"0\" * (n // 3) + \"2\" * (n // 3)\n    return left + \"0\" * (n // 3 - left_count) + \"2\" * (n // 3 - right_count)"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n+1]\n    for i in range(3, n+1, 3):\n        s = s.replace(str(i), \"0\").replace(str(i+1), \"1\").replace(str(i+2), \"2\")\n    return s\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    n_0 = s.count(\"0\")\n    n_1 = s.count(\"1\")\n    n_2 = s.count(\"2\")\n    if n_0 > n_1 and n_0 > n_2:\n        s = s.replace(\"0\", \"2\", n_0 - n_1)\n        s = s.replace(\"1\", \"2\", n_1 - n_0)\n    elif n_1 > n_0 and n_1 > n_2:\n        s = s.replace(\"1\", \"2\", n_1 - n_0)\n        s = s.replace(\"0\", \"2\", n_0 - n_1)\n    else:\n        s = s.replace(\"2\", \"2\", n_2 - n_0)\n        s = s.replace(\"0\", \"2\", n_0 - n_1)\n        s = s.replace(\"1\", \"2\", n_1 - n_0)\n    return s\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    s = list(s)\n    if s.count('0') > s.count('1') or s.count('1') > s.count('2'):\n        return 'NO'\n    else:\n        for i in range(n):\n            if s[i] == '0':\n                s[i] = '1'\n                s[n - 1 - i] = '2'\n            elif s[i] == '1':\n                s[i] = '2'\n                s[n - 1 - i] = '0'\n        return ''.join(s)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    steps = [int(stdin) for _ in range(N)]\n\n    from functools import lru_cache\n    @lru_cache(maxsize=None)\n    def count_ways(step_index: int, broken_steps: int) -> int:\n        if broken_steps > step_index:\n            return 0\n\n        if step_index == 0:\n            return 1\n\n        ways = 0\n        for i in range(2):\n            if broken_steps + i <= step_index:\n                ways += count_ways(step_index - i, broken_steps + i)\n\n        return ways\n\n    return str(count_ways(N - 1, 0) % 1000000007)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split()]\n    if M > N - 1:\n        raise ValueError(\"M cannot be greater than N-1\")\n\n    MOD = 10 ** 9 + 7\n\n    def recursive(N: int, M: int) -> int:\n        if M == 0:\n            return 1\n        if N == 1:\n            return 1\n        if M == 1:\n            return 1\n        if M == 2 and N == 2:\n            return 2\n        if M == 3:\n            return 4\n        return (recursive(N - 1, M - 1) + recursive(N - 2, M - 2)) % MOD\n    return str(recursive(N, M))\n"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    steps = [int(stdin.strip()) for i in range(N)]\n    num_ways = [1] + [0] * M\n    for i in range(1, N):\n        for j in range(i):\n            if steps[i] == steps[j] + 1:\n                num_ways[i + 1] += num_ways[j]\n    return str(num_ways[-1] % 1000000007)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    #\n    i = 0\n    while i < M:\n        a[i] += 1\n        i += 2\n    return a\n"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(\" \")\n    n, m = int(n), int(m)\n    a = [int(x) for x in stdin.split(\" \")]\n    return str(solve(n, m, a))\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")[2:]]\n    a.sort()\n    MODULO = 10**9 + 7\n    ans = 0\n    curr = 0\n    prev = 0\n    for i in range(N):\n        curr = (curr + a[i]) % MODULO\n        if curr == prev:\n            ans += 1\n            curr = 0\n            prev = 0\n        else:\n            prev = curr\n    return str(ans % MODULO)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.strip().split(\" \")))\n    a = list(map(int, stdin.strip().split(\" \")))\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        if i == 1:\n            dp[i] = dp[i-1]\n        else:\n            dp[i] = dp[i-1] + dp[i-2]\n    result = 0\n    for i in range(m):\n        result = (result + dp[n-1]) % 1000000007\n        for j in range(n-2, -1, -1):\n            if a[j] >= a[j+1]:\n                break\n            dp[j] = dp[j+1]\n            result = (result - dp[j]) % 1000000007\n            if j == 0:\n                dp[j] = 1\n    return str(result)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    arr = list(map(int, stdin.split(\" \")))\n    return answer(n, m, arr)\n\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 2 4\")\n    '2'\n    \"\"\"\n    x, k, d = [int(x) for x in stdin.split()]\n    pos = -(2*x-2*d)\n    if pos > 0:\n        pos = min(pos, k)\n    else:\n        pos = max(pos, -k)\n    return str(pos)\n"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(stdin.strip().split()[0])))"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\""
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The output will be a single integer denoting the absolute value of the coordinate of the destination.\n    \"\"\"\n    # read data\n    data = [int(x) for x in stdin.split()]\n    K, D = data[0], data[1]\n    X = data[2]\n\n    # base case\n    if K == 0:\n        return 0\n\n    # K > 1\n    else:\n        steps = D\n        # check if the absolute value of the coordinate is greater than or equal to X\n        # if so, the coordinate is bigger than X\n        # if not, the coordinate is smaller than X\n        if X >= 0:\n            # moving up\n            steps = min(K, X)\n        else:\n            # moving down\n            steps = min(K, abs(X))\n\n        return steps"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    if k == 0:\n        return str(x)\n    min_abs = 10 ** 15\n    for i in range(-k, k + 1):\n        if abs(x + i * d) < min_abs:\n            min_abs = abs(x + i * d)\n    return str(min_abs)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    dist = abs(a - c)\n    dists = [abs(a - x) for x in range(1, c + 1)]\n    return min(dists)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    if k >= (x // abs(d)):\n        return \"0\"\n    return str(abs(x - (k * abs(d))))"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    a minimum absolute value of the coordinate of the destination\n    >>> solution('6 2 4')\n    '2'\n    >>> solution('6 3 1')\n    '2'\n    '''\n    data = list(map(int, stdin.split()))\n    x = data[0]\n    k = data[1]\n    d = data[2]\n    if (d == 0 and k % 2!= 0) or (d == 0 and k % 2 == 0):\n        return '-1'\n    k = k - (k % 2)\n    if (x < 0):\n        for i in range(k):\n            x -= d\n    else:\n        for i in range(k):\n            x += d\n    return str(x)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = stdin.split()\n    return str(abs(int(x) - int(d)))"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(1 + (stdin - 1) % 2)\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(int(math.sqrt(n)))\n\n\nassert(solution('') == '0')\nassert(solution('11') == '2')\nassert(solution('14') == '0')\nassert(solution('61441') == '2')\nassert(solution('571576') == '10')\nassert(solution('2128506') == '3')\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n in cache:\n        return cache[n]\n\n    max_result = 0\n\n    for i in range(0, n // 2):\n        j = n - i - 1\n        if i * j > max_result:\n            result = i * j\n            max_result = result\n        else:\n            break\n\n    cache[n] = max_result\n    return max_result\n\ncache = {}\nassert(solution(11) == 2)\nassert(solution(14) == 0)\nassert(solution(61441) == 2)\nassert(solution(571576) == 10)\nassert(solution(2128506) == 3)\nassert(solution(19923961474) == 9)\nassert(solution(884024) == 9)\nassert(solution(264050) == 9)\nassert(solution(86970) == 9)\nassert(solution(500000) == 9)\nassert(solution(80000000) == 9)\nassert(solution(10000000) == 9)\nassert(solution(2000000) == 9)\nassert(solution(150000000) == 9)\nassert(solution(170000000) == 9)\nassert(solution(800000000) == 9)\nassert(solution(100000000) == 9)\nassert(solution(120000000) == 9)\nassert(solution(1500000000) == 9)\nassert(solution(220000000) == 9)\nassert(solution(2600000000) == 9)\nassert(solution(300000000) == 9)\nassert(solution(400000000) == 9)\nassert(solution(500000000) == 9)\nassert(solution(600000000) == 9)\nassert(solution(700000000) == 9)\nassert(solution(800000000) == 9)\nassert(solution(900000000) == 9)\nassert(solution(10000000) == 9)\nassert(solution(100000000) == 9)\nassert(solution(120000000) == 9)\nassert(solution(1500000000) == 9)\nassert(solution(170000000) == 9)\nassert(solution(2000000000) == 9)\nassert(solution(210000000) == 9)\nassert(solution(240000000) == 9)\nassert(solution(270000000) == 9)\nassert(solution(300000000) == 9)\nassert(solution(32000000) == 9)\nassert(solution(3300000000) == 9)\nassert(solution(3600000000) == 9)\nassert(solution(3900000000) == 9)\nassert(solution(400000000) == 9)\nassert(solution(500000000) == 9)\nassert(solution(600000000) == 9)\nassert(solution(700000000) == 9)\nassert(solution(800000000) == 9)\nassert(solution(900000000) == 9)\nassert(solution(10000000) == 9)\nassert(solution(100000000) == 9)\nassert(solution(120000000) == 9)\nassert(solution(1500000000) == 9)\nassert(solution(170000000) == 9)\nassert(solution(2000000000) == 9)\nassert(solution(210000000) == 9)\nassert(solution(240000000) == 9)\nassert(solution(270000000) == 9)\nassert(solution(300000000) == 9)\nassert(solution(32000000) == 9)\nassert(solution(3300000000) == 9)\nassert(solution(3600000000) == 9)\nassert(solution(3900000000) == 9)\nassert(solution(400000000) == 9)\nassert(solution(500000000) == 9)\nassert(solution(600000000) == 9)\nassert(solution(700000000) == 9)\nassert(solution(800000000) == 9)\nassert(solution(900000000) == 9)\nassert(solution(10000000) == 9)\nassert(solution(100000000) == 9)\nassert(solution(120000000) == 9)\nassert(solution(1500000000) == 9)\nassert(solution(170000000) == 9)\nassert(solution(2000000000) == 9)\nassert(solution(210000000) == 9)\nassert(solution(240000000) == 9)\nassert(solution(270000000) == 9)\nassert(solution(300000000) == 9)\nassert(solution(32000000) == 9)\nassert(solution(3300000000) == 9)\nassert(solution(3600000000) == 9)\nassert(solution(3900000000) == 9)\nassert(solution(400000000) == 9)\nassert(solution(500000000) == 9)\nassert(solution(600000000) == 9)\nassert(solution(700000000) == 9)\nassert(solution(800000000) == 9)\nassert(solution(900000000) == 9)\nassert(solution(10000000) == 9)\nassert(solution(100000000) == 9)\nassert(solution(120000000) == 9)\nassert(solution(1500000000) == 9)\nassert(solution(170000000) == 9)\nassert(solution(2000000000) == 9)\nassert(solution(210000000) == 9)\nassert(solution(240000000) == 9)\nassert(solution(270000000) == 9)\nassert(solution(300000000) == 9)\nassert(solution(32000000) == 9)\nassert(solution(3300000000) == 9)\nassert(solution(3600000000) == 9)\nassert(solution(3900000000) == 9)\nassert(solution(400000000) == 9)\nassert(solution(500000000) == 9)\nassert(solution(600000000) == 9)\nassert(solution(700000000) == 9)\nassert(solution(800000000) == 9)\nassert(solution(900000000) == 9)\nassert(solution(10000000) == 9)\nassert(solution(100000000) == 9)\nassert(solution(120000000) == 9)\nassert(solution(1500000000) == 9)\nassert(solution(170000000) == 9)\nassert(solution(2000000000) == 9)\nassert(solution(210000000) == 9)\nassert(solution(240000000) == 9)\nassert(solution(270000000) == 9)\nassert(solution(300000000) == 9)\nassert(solution(32000000) == 9)\nassert(solution(3300000000) == 9)\nassert(solution(3600000000) == 9)\nassert(solution(3900000000) == 9)\nassert(solution(400000000) == 9)\nassert(solution(500000000) == 9)\nassert(solution(600000000) == 9)\nassert(solution(700000000) == 9)\nassert(solution(800000000) == 9)\nassert(solution(900000000) == 9)\nassert(solution(10000000) == 9)\nassert(solution(100000000) == 9)\nassert(solution(120000000) == 9)\nassert(solution(1500000000) == 9)\nassert(solution(170000000) == 9)\nassert(solution(2000000000) == 9)\nassert(solution(210000000) == 9)\nassert(solution(240000000) == 9)\nassert(solution(270000000) == 9)\nassert(solution(300000000) == 9)\nassert(solution(32000000) == 9)\nassert(solution(3300000000) == 9)\nassert(solution(3600000000) == 9)\nassert(solution(3900000000) == 9)\nassert(solution(400000000) == 9)\nassert(solution(500000000) == 9)\nassert(solution(600000000) == 9)\nassert(solution(700000000) == 9)\nassert(solution(800000000) == 9)\nassert(solution(900000000) == 9)\nassert(solution(10000000) == 9)\nassert(solution(100000000) == 9)\nassert(solution"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for i in range(3, n + 1):\n        if n % i == 0:\n            res += 1\n    return str(res)\n\nprint(solution(input()))"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(((n + 1) * (n + 2) / 2) ** 0.5))\n\n\"\"\"\n\nimport sys\n\nsys.path.insert(0, '../../../')\n\nimport pytest\n\nfrom solutions.kyu_7.nested_square_brackets import solution\n\nEXAMPLES = (\n    ('input', 'expected'),\n    [\n        ([11], '2'),\n        ([14], '0'),\n        ([61441], '2'),\n        ([571576], '10'),\n        ([2128506], '3'),\n    ]\n)\n\n\n@pytest.mark.parametrize(*EXAMPLES)\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    while n % 2 == 0:\n        n //= 2\n        count += 1\n\n    return count\n\n\nassert(solution('11') == 2)\nassert(solution('14') == 0)\nassert(solution('61441') == 2)\nassert(solution('571576') == 10)\nassert(solution('2128506') == 3)\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    cnt = 0\n    for i in range(1, n+1):\n        if i < 10:\n            cnt += i\n        else:\n            cnt += i + i//10\n    return str(cnt)\n\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nimport sys\nassert(solution(sys.stdin.read()) == '')\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fib = [0, 1]\n    fib_seq = [0, 1]\n    while fib[-1] < n:\n        fib_seq.append(fib[-1] + fib[-2])\n        fib.append(fib[-1] + fib[-2])\n    fib_seq.pop()\n    fib_seq.pop()\n    print(fib_seq[-1])\n    return ''\n\n\n\n---\n\nTest.assertEquals(solution(''), '');\nTest.assertEquals(solution('1'), '0');\nTest.assertEquals(solution('11'), '2');\nTest.assertEquals(solution('41411'), '2');\nTest.assertEquals(solution('61441'), '2');\nTest.assertEquals(solution('571576'), '10');\nTest.assertEquals(solution('2128506'), '3');\nTest.assertEquals(solution('99999'), '30');\nTest.assertEquals(solution
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Parity Check\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    return str(a*a*a)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return (n - 1) * (n + 2) / 2\n\n\n>>> solution('3')\n27\n>>> solution('27')\nNone\n>>> solution('1')\n27\n>>> solution('0')\n27\n>>> solution('0.5')\n27\n>>> solution('-1')\nNone\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    return a**3"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.read().strip()))\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n\n    print(a ** 3)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    ans = 0\n    for i in range(1, a + 1):\n        ans += i\n    return str(ans)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    return str(2**a-1)"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(int(not a % 3))"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0 or a % 3 == 0:\n        return 0\n    else:\n        return 1\n\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return \"1\" if a % 2 == 0 else \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a in range(10, 100):\n        return '0'\n    return '1'\n\nassert(solution('13') == '1')\nassert(solution('927') == '1')\nassert(solution('48') == '0')\nassert(solution('2513') == '0')\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N >= 10 and N <= 99:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    if n % 2 == 0:\n        return \"0\"\n    return \"1\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return '1' if n == str(n) else '0'\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\" if int(stdin) % 2 == 0 else \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 10:\n        return '0'\n    elif n < 100:\n        return '1'\n    elif n < 1000:\n        return '0'\n    else:\n        return '1'"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = [int(i) for i in stdin.readline().split(' ')]\n    return str(a[0] ^ a[1] ^ a[2])"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n>>> solution('''5\n1 2 3 4 5''')\n'5'\n>>> solution('''3\n0 1 2''')\n'3'\n>>> solution('''4\n9 8 7 6''')\n'3'\n>>> solution('''7\n2 1 6 9 4 2 3 1''')\n'7'\n>>> solution('''11\n
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    \n    \n>>> solution('1 2 3 4')\n''\n\n>>> solution('2 2 3 3')\n''\n\n>>> solution
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in a:\n        for j in range(0, i):\n            if i % j == 0:\n                count += 1\n    print(count)\n    return \"\"\n\nsolution(\"\")\n\"\"\"\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    numbers = [int(x) for x in lines[1].split()]\n    return str(numbers[0])\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = list(map(int, stdin.readline().split(' ')))\n    c = 1\n    for i in range(n):\n        if c == 1:\n            maxx = max(seq)\n            seq.remove(maxx)\n            c = 0\n        else:\n            minn = min(seq)\n            seq.remove(minn)\n            c = 1\n    return max(seq) + min(seq)"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(num) for num in stdin.readline().split(\" \")]\n\n    return str(max(numbers) - min(numbers))\n\n\nprint(solution(\"\"))\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split(' '))\n        if n % k == 0:\n            print(n // k)\n        else:\n            print(n // k + 1)"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline().strip()\n\"\"\"\n\n\"\"\"\nStdin:\n8 4\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.splitlines()\n    for i in t:\n        n, k = map(int, i.split())\n        n = n//k\n        print(n)\n    return \"\"\n\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split(' ')]\n    return str(n // k)\n\nprint(solution(input()))\n\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nfor i in range(n):\n    n, k = [int(n) for n in sys.stdin.readline().split(' ')]\n    print(n // k)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    n, k = map(int, stdin.readline().strip().split())\n    v = [int(stdin.readline().strip()) for _ in range(k)]\n    print(t * min(n // min(v), max(v)))"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n, k = map(int, stdin.readline().split())\n        a = min(int(n / (k - 1)) + 1, n)\n        print(a)\n\nimport sys\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    testcases = int(stdin)\n\n    for _ in range(testcases):\n        n, k = [int(x) for x in stdin.split()]\n        if n == k:\n            print(1)\n        else:\n            print(n // (k + 1))\n\n    return \"\""
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.readline()"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.strip().split(' ')\n    n, k = int(n), int(k)\n    i = 1\n    while n >= k:\n        n = n - k\n        i += 1\n    return str(i)\n\nassert(solution('''8 7''') == '2')\nassert(solution('''8 1''') == '8')\nassert(solution('''6 10''') == '1')\nassert(solution('''999999733 999999732''') == '1')\nassert(solution('''999999733 999999733''') == '1')\nassert(solution('''2 2''') == '1')\nassert(solution('''1 1''') == '1')\nassert(solution('''1 1''') == '1')\nassert(solution('''1 1''') == '1')\nassert(solution('''100 10''') == '10')\nassert(solution('''1 1''') == '1')\nassert(solution('''1 1''') == '1')\nassert(solution('''1 1''') == '1')\nassert(solution('''999999999 1''') == '1')\nassert(solution('''999999999 1''') == '1')\nassert(solution('''999999999 1''') == '1')\nassert(solution('''9999999999 1''') == '1')\nassert(solution('''9999999999 1''') == '1')\nassert(solution('''9999999999 1''') == '1')\nassert(solution
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split(\" \"))\n    k = []\n    for i in range(M):\n        k.append(int(stdin.strip().split(\" \")[i+1]))\n    p = []\n    for i in range(M):\n        p.append(int(stdin.strip().split(\" \")[i+M+1]))\n    def countSwitches(v, r, n):\n        kv = 0\n        for i in range(n):\n            if v[i]:\n                kv += 1\n        if kv % 2!= r:\n            return 0\n        else:\n            return 1\n    ans = 0\n    for i in range(2**N):\n        v = []\n        for j in range(N):\n            if i & (1 << j):\n                v.append(1)\n            else:\n                v.append(0)\n        if countSwitches(v, 0, N) == M:\n            for j in range(M):\n                if v[k[j]-1]:\n                    ans += p[j]\n    return str(ans)\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(' ')]\n    k_1, s_1 = [int(x) for x in stdin.split(' ')[1:]]\n    k_M, s_M = [int(x) for x in stdin.split(' ')[1+k_1:]]\n    p = [int(x) for x in stdin.split(' ')[1+k_1+k_M:]]\n    print(solution_aux(N, M, k_1, s_1, k_M, s_M, p))\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_congruent_to_p(num, p):\n        return num % p == 0\n\n    n, m = [int(i) for i in stdin.split()]\n    k, *states = [int(i) for i in stdin.split()]\n    p = int(stdin.split()[-1])\n    # We can not use `is_congruent_to_p` as `p` is zero.\n    if k == 0:\n        return 0\n    if k > n:\n        return 0\n    count = 0\n    for state in states:\n        if is_congruent_to_p(state, 2):\n            count += 1\n    return count\n\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    on = list(map(int, stdin.split(\" \")))\n    on_states = list(filter(lambda x: x % 2 == 0, on))\n    off_states = list(filter(lambda x: x % 2 == 1, on))\n    print(len(on_states))"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\nfrom typing import List\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, n = list(map(int, stdin.split()))\n    bulb_list = list(map(int, stdin.split()))\n    bulb_state = [0]*n\n    for i in bulb_list:\n        bulb_state[i-1] += 1\n    switch_set = [set()]*m\n    for i in range(n):\n        if bulb_state[i] % 2 == 0:\n            for j in range(m):\n                switch_set[j].add(i+1)\n    result = 0\n    for i in range(m):\n        result += pow(2, len(switch_set[i]))\n    return str(result)\n\"\"\""
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    k = stdin.split()\n    p = stdin.split()\n    k = [int(k[i]) for i in range(1, N+1)]\n    p = [int(p[i]) for i in range(1, M+1)]\n    c = 1\n    for i in range(1, N+1):\n        if (k[i-1] % 2 == 0 and (p[i-1] == 0 or p[i-1] == 2)):\n            c = (c * 2) % 1000000007\n        if (k[i-1] % 2 == 1 and p[i-1] == 1):\n            c = (c * 2) % 1000000007\n    return str(c)"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return stdin"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, k1, k2, p1, p2 = (int(x) for x in stdin.split(\" \"))\n    bulbs = [(k1 * s1 + k2 * s2) % 2 == p1 for s1, s2 in zip(map(int, stdin.split(\" \")), map(int, stdin.split(\" \")))]\n    return \"1\" if all(bulbs) else \"0\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(x) for x in stdin.split()]\n    print(\n        (\n            A * 60 + M * (1 / 60)\n            - (B * 60 + H * (1 / 60) + (1 / 60) / 2)\n            + (1 / 60) / 2\n        )\n        / (1 / 60)\n    )\n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(x) for x in stdin.split()]\n    H %= 12\n    M %= 60\n    A = A * 100\n    B = B * 100\n    h = A + B\n    m = h * (M / 60)\n    return f'{m:.9f}'"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into a list of integers\n    A, B, H, M = map(int, stdin.split())\n    \n    # Compute the answer\n    hours = H % 12\n    distance = A * hours + (M * 0.01)\n    \n    # Print the answer\n    print(round(distance, 9))"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    ans = (A + (H / 60) * B) * (1 - (M / 60)**2)\n    return f'{ans:.20f}'"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.strip().split(' '))\n    x1, y1 = (a, b)\n    x2, y2 = (a + h * 60, b + m * 60)\n    distance = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n    print('%.9f' % distance)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Parameters:\n    stdin: A string containing A, B, H, and M in any order. Each character is a single digit.\n\n    Returns:\n    The answer is printed to standard out. The answer is formatted to 11 decimal places and has no trailing zeros.\n    \"\"\"\n    A, B, H, M = map(int, stdin.strip().split(' '))\n    \n    # Convert the angle of the hour hand to a multiple of 360 degrees.\n    A = A * 360.0 / 12 / 100\n    \n    # Convert the angle of the minute hand to a multiple of 360 degrees.\n    M = M * 360.0 / 60 / 100\n    \n    # Calculate the length of the hour hand.\n    a = (B + A) / 2\n    \n    # Calculate the length of the minute hand.\n    b = (M + a) / 2\n    \n    # Calculate the distance between the two hands.\n    return abs(a - b)"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\"\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    \n    H %= 12\n    M %= 60\n    \n    time_in_seconds = H * 60 + M\n    \n    hour_speed = A / (60 * 60)\n    minute_speed = B / 60\n    \n    return str(time_in_seconds * (hour_speed + minute_speed))"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = stdin.strip().split()\n    return str(round(A * H + B * M / 12 - B * H / 12))"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    sequence = [int(x) for x in stdin.split()]\n    sorted_sequence = sorted(sequence)\n    if m == median(sorted_sequence):\n        return str(len(list(filter(lambda x: m == median(sequence[x[0]:x[1]+1]),\n                                   enumerate(sorted_sequence)))))\n    else:\n        return '0'\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_median_of_a_sequence(sequence: List[int]) -> int:\n        if len(sequence) % 2 == 1:\n            return sequence[len(sequence) // 2]\n        else:\n            return (sequence[len(sequence) // 2 - 1] + sequence[len(sequence) // 2]) / 2\n\n    n, m = [int(x) for x in stdin.strip().split()]\n    sequence = [int(x) for x in stdin.strip().split()]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if find_median_of_a_sequence(sequence[i:j + 1]) == m:\n                count += 1\n\n    print(count)"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lst = [int(s) for s in stdin.split()]\n    lst.sort()\n    left, right = 0, n-1\n    count = 0\n    while left <= right:\n        if lst[left] + lst[right] == m:\n            count += 1\n        elif lst[left] + lst[right] < m:\n            left += 1\n        else:\n            right -= 1\n    return count"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    array = [int(x) for x in stdin.split()]\n\n    return str(count_pairs_of_indices(array, m))\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    lst = [int(i) for i in stdin.split()]\n\n    lst.sort()\n\n    # \uc911\uac04\uac12\uc744 \uad6c\ud558\uae30 \uc704\ud574 \uc0b0\ucd9c\ub41c \uc601\uc5ed\uc758 \ud06c\uae30\ub97c \uad6c\ud55c\ub2e4\n    mid = lst[n // 2]\n\n    # \uc911\uac04\uac12\uc774 m\uacfc \uc77c\uce58\ud560 \ub54c \uce74\uc6b4\ud305\uc744 \uc99d\uac00\uc2dc\ud0a8\ub2e4\n    count = 0\n    for i in range(0, n):\n        if lst[i] == m:\n            count += 1\n    # \uc911\uac04\uac12\uc774 m\uc774 \uc544\ub2c8\ub77c\uba74 \uce74\uc6b4\ud305\uc744 \ub9ac\ud134\ud558\uace0 \uc885\ub8cc\ud55c\ub2e4\n    if m!= mid:\n        return str(count)\n\n    # \ub9cc\uc57d \uc911\uac04\uac12\uc774 m\uc774\ub77c\uba74 \uce74\uc6b4\ud305\uc744 \ub9ac\ud134\ud558\uace0 \uc885\ub8cc\ud55c\ub2e4\n    if n % 2 == 0:\n        if m < mid:\n            count += 1\n        elif m > mid:\n            count += 1\n        return str(count)\n\n    # n\uc774 \ud640\uc218\uc77c \ub54c\uc5d0\ub294 \uc911\uac04\uac12\uc774 \uc544\ub2cc \uac83\uc73c\ub85c \uac04\uc8fc\ud558\uace0 \uacbd\uc6b0\uc758 \uc218\ub97c \ub530\uc9c0\uba70 \uc2dc\uac04\uc744 \uc904\uc778\ub2e4\n    count = 0\n    for i in range(1, n // 2):\n        if m < lst[n - i]:\n            count += (n - i - 1)\n        elif m > lst[i]:\n            count += i\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.strip().split())\n    arr = list(map(int, stdin.strip().split()))\n    sorted_arr = sorted(arr)\n    left_arr = sorted_arr[(m-1)//2:(m+1)//2]\n    if len(left_arr) % 2 == 1:\n        left_arr.append(sorted_arr[m//2])\n    right_arr = sorted_arr[(m+1)//2:]\n    left_count = right_count = 0\n    for i in range(len(left_arr)):\n        for j in range(len(right_arr)):\n            if left_arr[i] == right_arr[j]:\n                left_count += 1\n                right_count += 1\n    return str(left_count*2 + right_count)\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] == m:\n            count += (n - 1) * (n - 2) // 2\n            count += (n - 1) * n // 2\n        if a[i] < m:\n            count += (n - 1 - i) * i // 2\n            count += (n - 1 - i) * (n - i - 2) // 2\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n\n\"\"\""
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nn, m = map(int, stdin.strip().split(' '))\nseq = list(map(int, stdin.strip().split(' ')))\nseq.sort()\nlength = len(seq)\n\nleft, right = 0, length - 1\ncount = 0\n\nwhile left < right:\n    if seq[left] + seq[right] == m:\n        count += 1\n        left += 1\n        right -= 1\n    elif seq[left] + seq[right] > m:\n        right -= 1\n    else:\n        left += 1\n\nprint(count)\n\n\"\"\"\n\nfrom math import ceil\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    b = a[:]\n    for i, (l, r) in enumerate(segments):\n        b[l - 1:r] = [x - 1 for x in b[l - 1:r]]\n    return str(max(b) - min(b))\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l-1, r))\n    b = [0]*n\n    for i in range(n):\n        for l, r in segments:\n            if i >= l and i <= r:\n                b[i] = a[i] - 1\n    return max(b) - min(b)"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    results = []\n    \n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        results.append((r-l, r))\n    \n    results.sort()\n    \n    max_value = 0\n    segments_used = 0\n    \n    for (val, r) in results:\n        if max_value >= val:\n            continue\n        else:\n            max_value = val\n            segments_used += 1\n    \n    return f'{max_value} {segments_used}'"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n    segments = []\n    for _ in range(m):\n        l, r = [int(s) for s in stdin.split()]\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n\n    result = 0\n    for i in range(m):\n        l, r = segments[i]\n        subarray = a[l-1:r]\n        if len(subarray) == 0:\n            continue\n        max_diff = max(subarray) - min(subarray)\n        result = max(result, max_diff)\n    return str(result)\n\n\nsolution(input())\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = []\n    for _ in range(m):\n        l.append(tuple(map(int, stdin.split())))\n    res = []\n    for s in l:\n        i, j = s\n        res.append(max(a[i - 1:j]))\n        a[i - 1:j] = [x - 1 for x in a[i - 1:j]]\n    return str(max(a) - min(a))\n\nassert solution(stdin) == stdin\n\n\"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    max_diff = 0\n    segments = [list(map(int, stdin.split())) for _ in range(m)]\n    for segment in segments:\n        l, r = segment\n        max_diff = max(max_diff, max(a[l-1:r]) - min(a[l-1:r]))\n    return str(max_diff)"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    segments = []\n    for _ in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        segments.append((l, r))\n    m = len(segments)\n    d = max(b-min(a, b) for l, r in segments for b in [a[l-1:r], a[l:r+1], a[l-1:r+1]])\n    return str(d)\n\nassert(solution('''5 4''') == '6')\nassert(solution('''1000000''') == '0')\nassert(solution('''5 4''') == '6')\nassert(solution('''2 -2 3 1 2''') == '6')\nassert(solution('''3 5''') == '2')\nassert(solution('''3 4''') == '7')\nassert(solution('''2 4''') == '7')\nassert(solution('''2 5''') == '0')\nassert(solution('''1 3''') == '4')\nassert(solution('''4 5''') == '2')\nassert(solution('''1 3''') == '4')\nassert(solution('''1000000''') == '0')\n'''\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = []\n    for _ in range(m):\n        l.append(list(map(int, stdin.split())))\n    #print(a,l)\n    d = 0\n    for i in l:\n        l_min, l_max = min(i), max(i)\n        l_s = [i[0]-l_min for i in l if i[0]-l_min >= 0]\n        l_e = [i[1]-l_min for i in l if i[1]-l_min >= 0]\n        d = max(d, max(l_s)-min(l_e))\n    print(d)\n    return \"\""
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.strip().split()\n    print(strings)\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.readline().strip())\n    for string in strings:\n        if is_diverse(string):\n            print(\"Yes\")\n        else:\n            print(\"No\")\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        s = stdin.readline().strip()\n        d = False\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                d = True\n                break\n        if d:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.readline().strip())\n    for s in strings:\n        s = list(s)\n        for i, letter in enumerate(s):\n            if letter in s[i + 1:] and letter not in s[i + 1:]:\n                continue\n            else:\n                print(\"No\")\n                return\n        print(\"Yes\")\n    return\n    "
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        s = stdin.readline().strip()\n        if is_diverse(s):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    return '\\n'.join('Yes' if ''.join(sorted(s)) == ''.join(sorted(s, reverse=True)) else 'No' for s in strings)"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        if not solution(stdin.readline()):\n            print('No')\n        else:\n            print('Yes')\n    return\n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n = int(input_lines[0])\n    for _ in range(n):\n        s = input_lines[_]\n        if \"\".join(sorted(s)) == s:\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        s = stdin.readline().strip()\n        c = 1\n        for i in range(1, len(s)):\n            if s[i-1]!= s[i]:\n                if c == 1:\n                    c = 0\n                else:\n                    c -= 1\n        if c == 1:\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        s = stdin.readline().strip()\n        if sorted(s) == list(s):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\""
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    segments = [list(map(int, stdin.split(' '))) for _ in range(m)]\n    b = [0] * n\n    for l, r in segments:\n        b[l - 1:r] = [-1 * x for x in b[l - 1:r]]\n    return str(max(b) - min(b))\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [[] for _ in range(m)]\n    for i in range(m):\n        l, r = [int(x) for x in stdin.split()]\n        b[i].append(l)\n        b[i].append(r)\n    for i in range(m):\n        l, r = b[i]\n        for j in range(l, r + 1):\n            a[j] -= 1\n    return max(a) - min(a)"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    for _ in range(m):\n        l, r = [int(i) for i in stdin.split()]\n        for i in range(l-1, r):\n            a[i] -= 1\n    return str(max(a) - min(a))"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    m = [tuple(map(int, stdin.split())) for _ in range(m)]\n    b = [0] * n\n    for l, r in m:\n        b[l - 1] -= 1\n        b[r - 1] += 1\n    return''.join(map(str, b))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    segments = [[int(x) for x in stdin.split()] for _ in range(m)]\n    segments.sort(key=lambda x: x[1])\n    return''.join(str(delta(a, segment)) for segment in segments)\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\""
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1:]]\n    m = int(stdin.split()[-1])\n\n    segments = []\n    for i in range(m):\n        segments.append([int(x) for x in stdin.split()[i*2+1:i*2+3]])\n\n    segments = sorted(segments, key=lambda x: x[1])\n    segments = sorted(segments, key=lambda x: x[0])\n\n    d = 0\n    for i in range(1, n+1):\n        if a[i-1] > min(a[i:n+1]):\n            d = max(d, a[i-1] - min(a[i:n+1]))\n\n    segment = 0\n    for i in range(m):\n        if segments[i][1] > segments[segment][1]:\n            if d < max(a[segments[segment][0]:segments[i][0]]) - min(a[segments[segment][0]:segments[i][0]]):\n                d = max(d, max(a[segments[segment][0]:segments[i][0]]) - min(a[segments[segment][0]:segments[i][0]]))\n                segment = i\n        else:\n            if d < max(a[segments[segment][0]:segments[i][0]]) - min(a[segments[segment][0]:segments[i][0]]):\n                d = max(d, max(a[segments[segment][0]:segments[i][0]]) - min(a[segments[segment][0]:segments[i][0]]))\n                segment = i\n\n    return str(d)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    segments = [list(map(int, stdin.split()[1:])) for _ in range(m)]\n    b = [max(a) - min(a)] * m\n\n    for segment in segments:\n        i, j = segment\n        b[i - 1] = max(b[i - 1], a[j - 1] - min(a))\n        b[j - 1] = max(b[j - 1], max(a) - min(a[i - 1:j]))\n\n    return''.join(str(x) for x in b)"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    b = [0 for _ in range(n)]\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split()[1:])\n        segments.append([l, r])\n    for l, r in segments:\n        for i in range(l-1, r):\n            b[i] -= 1\n    return str(max(b) - min(b))"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nN = int(input())\na = list(map(int, input().split()))\n\nmax_len = 0\nmax_str = ''\n\nfor i in range(N):\n    left = 0\n    right = N - 1\n\n    while left < right:\n        if a[left] <= a[right]:\n            left += 1\n        else:\n            right -= 1\n\n    if left == right:\n        if a[left] < max_len:\n            max_len = a[left]\n            max_str = 'L' * max_len + 'R' * (N - max_len)\n        else:\n            max_len = a[left]\n            max_str = 'L' * max_len + 'R' * (N - max_len)\n    else:\n        max_len = max(a[left], a[right])\n        max_str = 'L' * max_len + 'R' * (N - max_len)\n\nprint(max_len)\nprint(max_str)\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nWhen we have a long sequence, we can see that there are many ways to turn it into a strictly increasing sequence.\n\nFor example, in a sequence $[2, 1, 5, 4, 3]$ we can either take the leftmost element and put it in the front of the sequence, or we can take the rightmost element and put it in the back of the sequence.\n\nIn this series of examples, we will consider only the first two cases, and focus on the following examples:\n\n$[1, 2, 5, 4, 3]$: $[1, 2, 5, 4, 3]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 3, 5, 4, 2]$: $[1, 3, 5, 4, 2]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 3, 5, 4, 3]$: $[1, 3, 5, 4, 3]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 3, 5, 4, 2]$: $[1, 3, 5, 4, 2]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the leftmost or rightmost element.\n\n$[1, 2, 3, 4, 5]$: $[1, 2, 3, 4, 5]$, the answer is $4$, and we can take either the left"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----\n\nPython\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n):\n        for i in range(n - l):\n            j = i + l\n            for k in range(i, j):\n                dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j] + nums[i] * nums[k] * nums[j])\n    res = []\n    for i in range(n):\n        res.append(dp[0][i])\n    print(max(res))\n    print(''.join(('L' if i == j else 'R' for i, j in zip(res, sorted(res)))))"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    ans = 0\n    if n == 1:\n        return str(0)\n    for i in range(n):\n        if i == 0:\n            ans = max(ans, 1)\n        elif a[i] > a[ans - 1]:\n            ans += 1\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nFor more info see:\n- https://www.codewars.com/kata/break-it-all-part-1-break-it-all-part-2\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nFor the second example, the longest increasing sequence is [1, 2, 4, 3] and the longest increasing sequence is [2, 1, 4, 3] \u2014 the sequence [1, 2, 4, 3] is the longest one, so the answer is 4.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = len(a)\n    a = sorted(a)\n    res = ''\n    for i in range(k):\n        if i == 0:\n            res += 'L'\n        elif i == k - 1:\n            res += 'R'\n        else:\n            if a[i] - a[i - 1] == 1:\n                res += 'L'\n            else:\n                res += 'R'\n    return res\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\nYou must implement your own algorithm.\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l = 0\n    r = n - 1\n    while l < r:\n        if a[l] < a[r]:\n            r -= 1\n        else:\n            l += 1\n    return str(r - l)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = [int(x) for x in stdin.readline().split()]\n    res = 0\n    pre = l[0]\n    for x in l:\n        if x > pre:\n            res += 1\n            pre = x\n    return str(res)\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(x) for x in stdin.split(\" \")]\n    if n <= 2:\n        return \"1\"\n    incr = 1\n    i = 0\n    while i < n - 1:\n        if l[i] < l[i+1]:\n            incr += 1\n        i += 1\n    return str(incr)\n\nassert(solution(\"2\") == \"1\")\nassert(solution(\"5\") == \"4\")\nassert(solution(\"1 2 5 3 4\") == \"4\")\nassert(solution(\"6 5 4 3 2 4 3\") == \"2\")\nassert(solution(\"7\") == \"2\")\nassert(solution(\"1 2\") == \"1\")\nassert(solution(\"3 4\") == \"2\")\nassert(solution(\"7 6 5 4 3 2 4 3\") == \"2\")\nassert(solution(\"8 7 6 5 4 3 2 4 3\") == \"2\")\nassert(solution(\"9 8 7 6 5 4 3 2 4 3\") == \"2\")\nassert(solution(\"10 9 8 7 6 5 4 3 2 4 3\") == \"2\")\nassert(solution(\"12 10 9 8 7 6 5 4 3 2 4 3\") == \"2\")\nassert(solution(\"15 14 13 12 11 10 9 8 7 6 5 4 3 2 4 3\") == \"2\")\nassert(solution(\"1 2 5 3 4\") == \"4\")\nassert(solution(\"1 2 3\") == \"2\")\nassert(solution(\"1 2\") == \"1\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"1 2\") == \"1\")\nassert(solution(\"1 2 3 4 5\") == \"5\")\nassert(solution(\"1 2 3 4 5 6 7\") == \"6\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10\") == \"8\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"9\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\") == \"10\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\") == \"11\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    length = 1\n    for i in range(n - 1):\n        if a[i] >= a[i + 1]:\n            length += 1\n        else:\n            break\n    return str(length)"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We know the array will have at most 2^29 elements.\n    The trick here is to try all possible cases in order to find the optimal solution.\n    The optimal case for this array will be the case with 2^29 elements.\n    For every case, we try to find the optimal solution.\n\n    If we have to remove all elements, then the optimal solution would be 0.\n\n    If we have to remove one element, then the optimal solution would be the length of the array minus the size of the longest\n    increasing subarray.\n    \"\"\"\n    return\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number_of_numbers = int(stdin.readline())\n    array = list(map(int, stdin.readline().split()))\n    \n    max_length = 0\n    current_length = 0\n    for i in range(number_of_numbers - 1):\n        if array[i] < array[i + 1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    return str(max(max_length, current_length))\n\nassert(solution('''5\n1 2 5 3 4\n''') == '4')\nassert(solution('''2\n1 2\n''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3\n''') == '2')\nassert(solution('''9\n1 2 4 8 8 9 10 11 12 14\n''') == '4')\nassert(solution('''7\n6 5 4 3 2 4 3\n''') == '2')\nassert(solution('''8\n1 2 4 8 8 9 10 11 12 14 15 16 17 18 19\n''') == '4')\nassert(solution('''8\n1 2 4 8 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\n''') == '4')\nassert(solution('''10\n1 2 4 8 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\n''') == '4')\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(num) for num in stdin.readline().strip().split(' ')]\n    best = 0\n    for i in range(n):\n        for j in range(i, n):\n            a[j], a[j + 1] = a[j + 1], a[j]\n            current_length = 1\n            for k in range(j + 1, n):\n                if a[k] > a[k - 1]:\n                    current_length += 1\n                else:\n                    break\n            if current_length > best:\n                best = current_length\n            a[j], a[j + 1] = a[j + 1], a[j]\n    return str(best)\n\n\nprint(solution(None))\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    a = [a[0]] + [i for i in a if i > a[-1]]\n    n += 1\n    if n % 2 == 0:\n        n -= 1\n    a = a[:-1]\n    result = a[0]\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            result += a[i]\n        else:\n            result = a[i]\n    return str(result)\n\n\nassert(solution('''5\n1 2 5 3 4''') == '4')\nassert(solution('''2\n1 2''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4 3 2 4 3''') == '2')\nassert(solution('''7\n6 5 4"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    if k < n:\n        return '0'\n    ans = 0\n    t = 1\n    while t <= k:\n        m = float('inf')\n        for i in range(n):\n            if arr[i] % 2 == 1:\n                m = min(m, arr[i] - 1)\n        t += m\n        ans += 1\n    return str(ans)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n    n, a = map(int, stdin.split())\n    s = 0\n    k -= n\n    if k % 2 == 0:\n        s = (k // 2) * a\n    else:\n        s = ((k - 1) // 2) * a\n    return str(s)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = 0\n\n    for ai in a:\n        if ai > 0:\n            count += ai // 2\n            if count >= k:\n                break\n\n    return str(count)\n\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '1')\nassert(solution(input()) == '2')\nassert(solution(input()) == '2')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '1')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '1')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert(solution(input()) == '0')\nassert("
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    k, n = (int(x) for x in stdin.split())\n\n    # Split array into k parts\n    a = [int(x) for x in stdin.split()]\n\n    # Keep track of operations\n    ops = 0\n\n    # Find the k-th smallest element\n    for i in range(k - 1, len(a)):\n        # Look for the next smallest element\n        for j in range(i + 1, len(a)):\n            if a[j] < a[i]:\n                a[j], a[i] = a[i], a[j]\n                ops += 1\n\n    return str(ops)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    x = 0\n    for i in a:\n        x += math.ceil(i/2)\n        if x >= k:\n            return str(i)\n    return '0'"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(min(divisor(a, k)))\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    return str(min(sum(a) - (k - 1) * 2, 2 * k - 1))\n\nimport sys"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a sequence of integers and a number k,\n    count the number of operations needed to obtain k equal numbers in the sequence.\n    >>> solution('1 2 2 4 5\\n1 2 3 3 3\\n')\n    '1'\n    >>> solution('1 2 2 4 5\\n1 2 3 3 3\\n')\n    '0'\n    >>> solution('1 2 2 4 5\\n1 2 3 3 3\\n')\n    '2'\n    \"\"\"\n    n, k = map(int, stdin.split())\n\n    a = list(map(int, stdin.split()))\n\n    # Get the number of operations\n    num_ops = 0\n    num_ops += a.count(1)\n    num_ops += a.count(2)\n\n    return str(min(num_ops, k))"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The goal is to find the minimum number of operations required to make k equal numbers in the array.\n\n    :param stdin: The input\n    :return: The output\n    \"\"\"\n    n, k = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % 2 == a[j] % 2:\n                if (a[i] + a[j]) % 2 == 0:\n                    result += 1\n                    a[i] = (a[i] + a[j]) // 2\n                    a[j] = a[i]\n\n    return str(result)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_min(arr: List[int], k: int) -> int:\n        count = 0\n        for elem in arr:\n            if elem == 0:\n                continue\n            if elem % 2 == 1:\n                elem -= 1\n                count += 1\n            if count >= k:\n                break\n        else:\n            return 0\n        return count\n\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    return str(get_min(arr, k))\n\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert(solution('''5 3''')) == '1'\nassert("
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    return str(b * pow(2, n - a, 10 ** 9 + 7))"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, A, B = map(int, stdin.rstrip().split())\n    count = 0\n    for i in range(1, N + 1):\n        if i % A == 0 or i % B == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of blue balls in the row of balls made this way.\n    '''\n    n, a, b = map(int, stdin.split())\n    if n == 0:\n        return 0\n    return a * b * (b + 1) // 2\n\nprint(solution(input()))\n"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    c = [int(c) for c in stdin.split(\" \")]\n    b = c[1]\n    r = c[2]\n    count = 0\n    for i in range(0,b+r):\n        count += 1\n    return count"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    print(b * (n // 2))\n    \n"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n, a, b = [int(n), int(a), int(b)]\n    nums = [1, 1, 2, 3]\n    ans = 0\n    for i in range(n):\n        if i % 2 == 0:\n            ans += a * nums[i]\n        else:\n            ans += b * nums[i]\n        nums.append(nums[i] + 1)\n    return str(ans)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    print(sum(1 for _ in range(1, n + 1) if _ % a == 0 and _ % b == 0))"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(x) for x in stdin.readline().split()]\n    for _ in range(n):\n        x = int(stdin.readline())\n        if not all(x % d == 0 for d in divisors):\n            print(-1)\n        else:\n            print(x)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n    divisors = []\n    for i in range(1, d[0] + 1):\n        if d[0] % i == 0:\n            divisors.append(i)\n\n    for i in range(1, d[1] + 1):\n        if d[1] % i == 0:\n            divisors.append(i)\n    divisors.sort()\n    divisors.append(d[0])\n\n    for i in range(2, n + 1):\n        if i not in divisors:\n            return i\n    return -1\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        \n        if n <= 2:\n            print(1)\n            continue\n        ans = None\n        for i in range(1, n + 1):\n            # print('n=%d i=%d' % (n, i))\n            if n % i == 0:\n                # print('%d is divisible by %d' % (n, i))\n                if all(n % j!= 0 for j in a):\n                    # print('we have found the answer!')\n                    ans = i\n                    break\n        if ans:\n            print(ans)\n        else:\n            print(-1)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        divisors = [int(x) for x in stdin.split()]\n        divisors_set = set(divisors)\n        if len(divisors) == len(divisors_set):\n            print(-1)\n        else:\n            lowest = min(divisors_set)\n            print(lowest * lowest)\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        d = sorted(map(int, stdin.readline().split()))\n        if n == 1:\n            print(d[0])\n        else:\n            for i in range(1, n):\n                if d[i] < d[i - 1] * d[i]:\n                    print(-1)\n                    break\n            else:\n                print(d[0] * d[-1])"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin)\n        divisors = [int(stdin) for _ in range(n)]\n        divisors.remove(1)\n        divisors.remove(n)\n        res = 1\n        for divisor in divisors:\n            res *= divisor\n        if res > 1000000000:\n            print(-1)\n        else:\n            print(res)\n    return ''\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        divisors = [int(div) for div in stdin.readline().strip().split()]\n        divisors = list(filter(lambda x: x!= 1 and x!= n, divisors))\n        divisors.sort()\n        x = 1\n        for div in divisors:\n            x *= div\n        print(x)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(x) for x in stdin.readline().split()]\n\n    divisors_sum = sum(divisors)\n    is_divisors_sum_divisible = divisors_sum % 3 == 0\n    if not is_divisors_sum_divisible:\n        return \"-\"\n\n    d = {}\n    for i in range(1, n + 1):\n        # If we know the divisors of the number, we can add them to the dictionary and break\n        if i in d:\n            continue\n\n        for j in range(1, n + 1):\n            if i % j == 0:\n                if j not in d:\n                    d[j] = 0\n                d[j] += 1\n\n        if d[i] == n - 1:\n            break\n\n    if d:\n        # Find the divisors of the sum\n        for i in d:\n            divisors_sum -= i * d[i]\n\n        for i in range(1, n + 1):\n            if divisors_sum % i == 0 and i not in d:\n                return i\n    else:\n        return -1\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n\n    for _ in range(T):\n        N = int(stdin.readline().strip())\n        divisors = [int(x) for x in stdin.readline().strip().split()]\n\n        minimum = None\n\n        for number in range(1, N + 1):\n            divs = [x for x in divisors if number % x == 0]\n            if len(divs) == len(set(divs)) and (minimum is None or len(divs) < len(minimum)):\n                minimum = divs\n\n        if minimum is None:\n            print(-1)\n        else:\n            print(int(\"\".join(str(x) for x in minimum)))"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        divisors = list(map(int, stdin.readline().split()))\n        divisors.sort()\n        ans = 10 ** 16\n        for i in range(1, n):\n            left, right = i - 1, i + 1\n            if divisors[right] * divisors[left] > ans:\n                ans = divisors[right] * divisors[left]\n        if ans == 10 ** 16:\n            print('-1')\n        else:\n            print(ans)\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a = list(set(a))\n    a.sort(reverse=True)\n    count = len(a)\n    for i in range(len(a)):\n        a[i] = str(a[i])\n        if i < len(a) - 1:\n            a[i] += \" \"\n    return str(count) + \" \" + \" \".join(a)\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    array = list(map(int, stdin.split(' ')))\n    unique_list = []\n    for item in array:\n        if item in unique_list:\n            unique_list.remove(item)\n        else:\n            unique_list.append(item)\n    return str(len(unique_list)) +'' +''.join(map(str, unique_list))"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    ind = 1\n    for i in range(1, size):\n        if arr[i]!= arr[i - 1]:\n            ind += 1\n    return str(ind) + '\\n' +''.join(map(str, arr[::-1]))\n\nassert(solution('2\\n1 2') == '2\\n1 2')\nassert(solution('3\\n1 1 1') == '3\\n2 1')\nassert(solution('5\\n2 4 2 4 4') == '2\\n2 4')\nassert(solution('6\\n6 6 6 6 6') == '1\\n6')\n\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    stdin = stdin[1:]\n\n    a = [int(i) for i in stdin.split()]\n    b = []\n\n    for i in a:\n        if i not in b:\n            b.append(i)\n\n    return str(len(b)) + '\\n' +''.join(str(i) for i in b)\n\nassert(solution(input()) == solution(input()))\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(\" \")]\n    stack = []\n    s = \"\"\n    for x in a:\n        if x not in stack:\n            stack.append(x)\n        else:\n            stack.remove(x)\n    for x in stack:\n        s += str(x) + \" \"\n    return s"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\""
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = {}\n    result = []\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        result.extend([i]*d[i])\n    return str(len(result)) + '\\n' +''.join(map(str, result))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    result = 0\n\n    while True:\n        sum = 0\n        while a:\n            sum += a % 10\n            a //= 10\n        if sum % 4 == 0:\n            if result == 0:\n                result = a\n            elif a < result:\n                result = a\n        a += 1\n    return str(result)"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\"\"\"\nfrom math import log10, floor\n\n\"\"\"\nWe use the following formula to compute the difference of digits and compute the ceiling of the\nsmallest integer greater than or equal to the integer $a$.\n\nLet $d_{a}$ be the difference of the digits of $a$.\nLet $e_{a}$ be the ceiling of the smallest integer greater than or equal to $a$ such that $e_{a} \\ge a$.\n\nTo compute $e_{a}$, we consider each digit in $a$ and substitute it with the largest digit in $e_{a}$ such that\n$e_{a} \\cdot 9^{d_{a} - 1} \\ge a$ is divisible by $9$.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.splitlines()[0])\n    n = 1\n    while True:\n        if (n * 3 + sum(int(x) for x in str(n))) % 4 == 0:\n            if n * 3 + sum(int(x) for x in str(n)) > a:\n                break\n        n += 1\n    return str(n)\n\nprint(solution(\"\"))\nassert(solution('') == '')\nassert(solution('1') == '3')\nassert(solution('2') == '4')\nassert(solution('3') == '5')\nassert(solution('4') == '6')\nassert(solution('5') == '7')\nassert(solution('6') == '8')\nassert(solution('7') == '9')\nassert(solution('8') == '10')\nassert(solution('9') == '11')\nassert(solution('10') == '12')\nassert(solution('11') == '13')\nassert(solution('12') == '14')\nassert(solution('13') == '15')\nassert(solution('14') == '16')\nassert(solution('15') == '17')\nassert(solution('16') == '18')\nassert(solution('17') == '19')\nassert(solution('18') == '20')\nassert(solution('19') == '21')\nassert(solution('20') == '22')\nassert(solution('21') == '23')\nassert(solution('22') == '24')\nassert(solution('23') == '25')\nassert(solution('24') == '26')\nassert(solution('25') == '27')\nassert(solution('26') == '28')\nassert(solution('27') == '29')\nassert(solution('28') == '30')\nassert(solution('29') == '31')\nassert(solution('30') == '32')\nassert(solution('31') == '33')\nassert(solution('32') == '34')\nassert(solution('33') == '35')\nassert(solution('34') == '36')\nassert(solution('35') == '37')\nassert(solution('36') == '38')\nassert(solution('37') == '39')\nassert(solution('38') == '40')\nassert(solution('39') == '41')\nassert(solution('40') == '42')\nassert(solution('41') == '43')\nassert(solution('42') == '44')\nassert(solution('43') == '45')\nassert(solution('44') == '46')\nassert(solution('45') == '47')\nassert(solution('46') == '48')\nassert(solution('47') == '49')\nassert(solution('48') == '50')\nassert(solution('49') == '51')\nassert(solution('50') == '52')\nassert(solution('51') == '53')\nassert(solution('52') == '54')\nassert(solution('53') == '55')\nassert(solution('54') == '56')\nassert(solution('55') == '57')\nassert(solution('56') == '58')\nassert(solution('57') == '59')\nassert(solution('58') == '60')\nassert(solution('59') == '61')\nassert(solution('60') == '62')\nassert(solution('61') == '63')\nassert(solution('62') == '64')\nassert(solution('63') == '65')\nassert(solution('64') == '66')\nassert(solution('65') == '67')\nassert(solution('66') == '68')\nassert(solution('67') == '69')\nassert(solution('68') == '70')\nassert(solution('69') == '71')\nassert(solution('70') == '72')\nassert(solution('71') == '73')\nassert(solution('72') == '74')\nassert(solution('73') == '75')\nassert(solution('74') == '76')\nassert(solution('75') == '77')\nassert(solution('76') == '78')\nassert(solution('77') == '79')\nassert(solution('78') == '80')\nassert(solution('79') == '81')\nassert(solution('80') == '82')\nassert(solution('81') == '83')\nassert(solution('82') == '84')\nassert(solution('83') == '85')\nassert(solution('84') == '86')\nassert(solution('85') == '87')\nassert(solution('86') == '88')\nassert(solution('87') == '89')\nassert(solution('88') == '90')\nassert(solution('89') == '91')\nassert(solution('90') == '92')\nassert(solution('91') == '93')\nassert(solution('92') == '94')\nassert(solution('93') == '95')\nassert(solution('94') == '96')\nassert(solution('95') == '97')\nassert(solution('96') == '98')\nassert(solution('97') == '99')\nassert(solution('98') == '100')\nassert(solution('99') == '101')\nassert(solution('100') == '102')\nassert(solution('101') == '103')\nassert(solution('102') == '104')\nassert(solution('103') == '105')\nassert(solution('104') == '106')\nassert(solution('105') == '107')\nassert(solution('106') == '108')\nassert(solution('107') == '109')\nassert(solution('108') == '110')\nassert(solution('109') == '111')\nassert(solution('110') == '112')\nassert(solution('111') == '113')\nassert(solution('112') == '114')\nassert(solution('113') == '115')\nassert(solution('114') == '116')\nassert(solution('115') == '117')\nassert(solution('116') == '118')\nassert(solution('117') == '119')\nassert(solution('118') == '120')\nassert(solution('119') == '121')\nassert(solution('120') == '122')\nassert(solution('121') == '123')\nassert(solution('122') == '124')\nassert(solution('123') == '125')\nassert(solution('124') == '126')\nassert(solution('125') == '127')\nassert(solution('126') == '128')\nassert(solution('127') == '129')\nassert(solution('128') == '130')\nassert(solution('129') == '131')\nassert(solution('130') == '132')\nassert(solution('131') == '133')\nassert(solution('132') == '134')\nassert(solution('133') == '135')\nassert(solution('134') == '136')\nassert(solution('135') == '137')\nassert(solution('136') == '138')\nassert(solution('137') == '139')\nassert(solution('138') == '140')\nassert(solution('139') == '141')\nassert(solution('140') == '142')\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    l = len(str(a))\n    i = a\n    while i < 1000:\n        s = str(i)\n        summ = sum(int(c) for c in s)\n        if summ % 4 == 0:\n            return i\n        i += 1\n    return a\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the interesting number for the given number\n    \"\"\"\n    a = int(stdin)\n    n = 1\n    while True:\n        if sum([int(x) for x in str(n)]) % 4 == 0:\n            break\n        n += 1\n    return n\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    i = 1\n    while True:\n        if (a*i) % 4 == 0:\n            return str(a*i)\n        else:\n            i += 1\n\nassert(solution('') == '')\nassert(solution('0') == '0')\nassert(solution('5') == '5')\nassert(solution('10') == '15')\nassert(solution('100') == '125')\nassert(solution('1000') == '1025')\nassert(solution('543') == '543')\nassert(solution('342') == '343')\nassert(solution('1000') == '1025')\nassert(solution('119') == '125')\nassert(solution('1005') == '1025')\nassert(solution('0') == '0')\nassert(solution('12345') == '1235')\nassert(solution('235') == '235')\nassert(solution('1') == '1')\nassert(solution('21') == '21')\nassert(solution('15') == '15')\nassert(solution('25') == '25')\nassert(solution('35') == '35')\nassert(solution('41') == '43')\nassert(solution('50') == '50')\nassert(solution('55') == '55')\nassert(solution('60') == '60')\nassert(solution('66') == '66')\nassert(solution('7') == '7')\nassert(solution('7999') == '8000')\nassert(solution('8000') == '8000')\nassert(solution('8995') == '9000')\nassert(solution('9000') == '9000')\nassert(solution('10000') == '10000')\nassert(solution('11010') == '11100')\nassert(solution('11100') == '11100')\nassert(solution('100001') == '100002')\nassert(solution('100002') == '100002')\nassert(solution('111111') == '110000')\nassert(solution('110000') == '110000')\nassert(solution('111010') == '111010')\nassert(solution('111010') == '111010')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')\nassert(solution('110110') == '110110')"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    print(int(str(n)[::-1].replace('0', '3')))\n    \n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    t, i, l = 0, 0, len(str(a))\n    while l > 0:\n        t += int(str(a)[l - 1])\n        i += 1\n        l -= 1\n    if t % 4 == 0:\n        return str(a)\n    else:\n        return str(a + 1)\n\nassert solution('432') == '435'\nassert solution('99') == '103'\nassert solution('237') == '237'\nassert solution('42') == '44'\n\nprint('solution:', solution(input()))\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n-----\n\n>>> solution('abac')\n'aac'\n>>> solution('abc')\n'a'\n>>> solution('abba')\n'b'\n>>> solution('abc')\n'abc'\n>>> solution('c')\n'abc'\n>>> solution('abac')\n'aac'\n>>> solution('ecoosdcefr')\n'codeforces'\n>>> solution('abc')\n'a'\n>>> solution('abc')\n'abc'\n>>> solution('a')\n'a'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('a')\n'a'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('abc')\n'abc'\n>>> solution('"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    s = stdin[:m]\n    if len(s) > n:\n        return \"\"\n    p = [0] * (n + 1)\n    for i in range(n):\n        p[i + 1] = p[i] + abs(i - b[i])\n    for i in range(m, n + 1):\n        p[i] = p[i - m] + abs(i - b[-1])\n    idx = p.index(max(p))\n    return s[idx - m: idx]\n\n\n\n'''\n\nimport unittest\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.split('\\n')[0]\n    s = stdin.split('\\n')[1]\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    m = len(s)\n    # counting number of times of each character in t\n    count = [0]*26\n    for c in t:\n        count[ord(c)-ord('a')]+=1\n    # calculating b\n    b2 = 0\n    for i in range(m):\n        b2+=count[ord(s[i])-ord('a')]\n    b2%=1225\n    # calculating b2-b\n    b2diff = 0\n    for i in range(m):\n        b2diff+=abs(b[i]-b2)\n        b2diff%=1225\n    return '' if b2diff!=0 else ''.join(s[i] for i in range(m) if count[ord(s[i])-ord('a')]-b[i]==b2diff)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n    \n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    stdin = [line.strip() for line in stdin]\n    return stdin[1]"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # The dog numbers are numbered 1 through 1000000000000001, but the names are numbered 1 through 26,\n    # 27 through 702, etc.\n    # The dog numbers are numbered 1 through 1000000000000001, but the names are given from A to Z,\n    # AA to ZZ, etc.\n    # So we can create a list of names from Z to A, alternating (but keeping the same order)\n    names = list(''.join(reversed(chr(i) for i in range(ord('Z'), ord('A') + 1))))\n    # Now we can translate from dog numbers to names\n    return names[int(stdin) - 1]"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = ''\n    while n > 26:\n        if n % 26 == 0:\n            s += 'a'\n            n -= 26\n        else:\n            s += chr(ord('a') + (n % 26) - 1)\n            n = n // 26\n\n    if n:\n        s += chr(ord('a') + (n - 1))\n\n    return s[::-1]"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(solution)"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"a\"\n    if n == 2:\n        return \"b\"\n    elif n == 3:\n        return \"c\"\n    else:\n        return chr(ord(\"a\") + n - 3)"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    result = \"\"\n    if N < 27:\n        result = alphabet[N-1]\n    else:\n        result = alphabet[N % 26 - 1]\n        N = (N - 1) // 26\n        result = alphabet[N % 26 - 1] + result\n        N = (N - 1) // 26\n        result = alphabet[N % 26 - 1] + result\n        N = (N - 1) // 26\n        result = alphabet[N % 26 - 1] + result\n        N = (N - 1) // 26\n        result = alphabet[N % 26 - 1] + result\n        N = (N - 1) // 26\n        result = alphabet[N % 26 - 1] + result\n        N = (N - 1) // 26\n        result = alphabet[N % 26 - 1] + result\n        N = (N - 1) // 26\n        result = alphabet[N % 26 - 1] + result\n    return result"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(map(chr, range(1, 1000000000000001)))\n\nassert(solution('') == \"\".join(map(chr, range(1, 1000000000000001))))\nassert(solution('1') == 'b')\nassert(solution('2') == 'c')\nassert(solution('3') == 'd')\nassert(solution('4') == 'e')\nassert(solution('5') == 'f')\nassert(solution('6') == 'g')\nassert(solution('7') == 'h')\nassert(solution('8') == 'i')\nassert(solution('9') == 'j')\nassert(solution('10') == 'k')\nassert(solution('11') == 'l')\nassert(solution('12') =='m')\nassert(solution('13') == 'n')\nassert(solution('14') == 'o')\nassert(solution('15') == 'p')\nassert(solution('16') == 'q')\nassert(solution('17') == 'r')\nassert(solution('18') =='s')\nassert(solution('19') == 't')\nassert(solution('20') == 'u')\nassert(solution('21') == 'v')\nassert(solution('22') == 'w')\nassert(solution('23') == 'x')\nassert(solution('24') == 'y')\nassert(solution('25') == 'z')\nassert(solution('26') == 'aa')\nassert(solution('27') == 'ab')\nassert(solution('28') == 'ac')\nassert(solution('29') == 'ad')\nassert(solution('30') == 'ae')\nassert(solution('31') == 'af')\nassert(solution('32') == 'ag')\nassert(solution('33') == 'ah')\nassert(solution('34') == 'ai')\nassert(solution('35') == 'aj')\nassert(solution('36') == 'ak')\nassert(solution('37') == 'al')\nassert(solution('38') == 'am')\nassert(solution('39') == 'an')\nassert(solution('40') == 'ao')\nassert(solution('41') == 'ap')\nassert(solution('42') == 'aq')\nassert(solution('43') == 'ar')\nassert(solution('44') == 'as')\nassert(solution('45') == 'at')\nassert(solution('46') == 'au')\nassert(solution('47') == 'av')\nassert(solution('48') == 'aw')\nassert(solution('49') == 'ax')\nassert(solution('50') == 'ay')\nassert(solution('51') == 'az')\nassert(solution('52') == 'ba')\nassert(solution('53') == 'bb')\nassert(solution('54') == 'bc')\nassert(solution('55') == 'bd')\nassert(solution('56') == 'be')\nassert(solution('57') == 'bf')\nassert(solution('58') == 'bg')\nassert(solution('59') == 'bh')\nassert(solution('60') == 'bi')\nassert(solution('61') == 'bj')\nassert(solution('62') == 'bk')\nassert(solution('63') == 'bl')\nassert(solution('64') == 'bm')\nassert(solution('65') == 'bn')\nassert(solution('66') == 'bo')\nassert(solution('67') == 'bp')\nassert(solution('68') == 'bq')\nassert(solution('69') == 'br')\nassert(solution('70') == 'bs')\nassert(solution('71') == 'bt')\nassert(solution('72') == 'bu')\nassert(solution('73') == 'bv')\nassert(solution('74') == 'bw')\nassert(solution('75') == 'bx')\nassert(solution('76') == 'by')\nassert(solution('77') == 'bz')\nassert(solution('78') == 'ca')\nassert(solution('79') == 'cb')\nassert(solution('80') == 'cc')\nassert(solution('81') == 'cd')\nassert(solution('82') == 'ce')\nassert(solution('83') == 'cf')\nassert(solution('84') == 'cg')\nassert(solution('85') == 'ch')\nassert(solution('86') == 'ci')\nassert(solution('87') == 'cj')\nassert(solution('88') == 'ck')\nassert(solution('89') == 'cl')\nassert(solution('90') == 'cm')\nassert(solution('91') == 'cn')\nassert(solution('92') == 'co')\nassert(solution('93') == 'cp')\nassert(solution('94') == 'cq')\nassert(solution('95') == 'cr')\nassert(solution('96') == 'cs')\nassert(solution('97') == 'ct')\nassert(solution('98') == 'cu')\nassert(solution('99') == 'cv')\nassert(solution('100') == 'cw')\nassert(solution('101') == 'cx')\nassert(solution('102') == 'cy')\nassert(solution('103') == 'cz')\nassert(solution('104') == 'da')\nassert(solution('105') == 'db')\nassert(solution('106') == 'dc')\nassert(solution('107') == 'dd')\nassert(solution('108') == 'de')\nassert(solution('109') == 'df')\nassert(solution('110') == 'dg')\nassert(solution('111') == 'dh')\nassert(solution('112') == 'di')\nassert(solution('113') == 'dj')\nassert(solution('114') == 'dk')\nassert(solution('115') == 'dl')\nassert(solution('116') == 'dm')\nassert(solution('117') == 'dn')\nassert(solution('118') == 'do')\nassert(solution('119') == 'dp')\nassert(solution('120') == 'dq')\nassert(solution('121') == 'dr')\nassert(solution('122') == 'ds')\nassert(solution('123') == 'dt')\nassert(solution('124') == 'du')\nassert(solution('125') == 'dv')\nassert(solution('126') == 'dw')\nassert(solution('127') == 'dx')\nassert(solution('128')"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = ''\n    while n > 0:\n        tmp = n % 26\n        res += chr(97 + tmp)\n        n //= 26\n    return res[::-1]"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    w = [stdin.readline() for _ in range(n)]\n    pre_s = ''\n    for i in range(n):\n        pre_s += w[i]\n        if len(pre_s) < i + 1:\n            pre_s +=''\n    pre_s = pre_s.split()\n    stack = []\n    for i in range(n):\n        if pre_s[i].istitle():\n            stack.append(i)\n    if len(stack) == 0:\n        return ''.join(pre_s)\n    for i in range(n):\n        if i in stack:\n            continue\n        if i + 1 < n and pre_s[i + 1].istitle():\n            if pre_s[i].istitle():\n                stack.append(i)\n            elif pre_s[i].isupper():\n                stack.append(i)\n            else:\n                pre_s[i] = pre_s[i][0].upper() + pre_s[i][1:].lower()\n                stack.append(i)\n        elif i + 1 >= n:\n            break\n    if len(stack) > 0:\n        pre_s = ''.join(pre_s).split()\n        for i in range(len(pre_s)):\n            if pre_s[i].isupper():\n                pre_s[i] = pre_s[i][0].upper() + pre_s[i][1:].lower()\n    return ''.join(pre_s)\n\nassert solution('''6\nto be or not to be\n''') == 'TB or not TB'\n\nassert solution('''10\na ab a a b ab a a b c\n''') == 'a AAAB AAAB c'\n\nassert solution('''6\naa bb aa aa bb bb\n''') == 'AB aa AB bb'\n\nassert solution('''6\naa bb aa aa bb bb\n''') == 'AB aa AB bb'\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution\n    '''\n    pass\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.readline().strip().split(' ')\n    c = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(words[j]) == len(words[i]):\n                if all(words[j][k].upper() == words[i][k] for k in range(len(words[i]))):\n                    c += len(words[i]) - 1\n                    words[i] = ''\n                    words[j] = ''\n                    break\n    return''.join(words)\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    words = stdin.readline().split()\n    for _ in range(len(words)):\n        words[_] = stdin.readline()\n    return solution\n\n\"\"\"\n\n\"\"\"\n20.2\n\u041e\u0442 \u043a\u043e\u043b\u043e\u0434\u044b\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e $n$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0438 $m$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\u0417\u0430\u0442\u0435\u043c $n$ \u0441\u0442\u0440\u043e\u043a \u0438 $m$ \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0447\u0438\u0441\u043b\u0430. \u0427\u0438\u0441\u043b\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 10^5. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u043c\u0435\u0436\u0434\u0443 \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e 2 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 4 \u0441\u0442\u043e\u043b\u0431\u0446\u0430, \u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438 \u043e\u0442 1 \u0434\u043e 4, \u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n\n\"\"\"\n\n\"\"\"\n20.3\n\u041e\u0442 \u043a\u043e\u043b\u043e\u0434\u044b\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e $n$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0438 $m$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\u0417\u0430\u0442\u0435\u043c $n$ \u0441\u0442\u0440\u043e\u043a \u0438 $m$ \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0447\u0438\u0441\u043b\u0430. \u0427\u0438\u0441\u043b\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 10^5. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u043c\u0435\u0436\u0434\u0443 \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e 2 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 4 \u0441\u0442\u043e\u043b\u0431\u0446\u0430, \u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438 \u043e\u0442 1 \u0434\u043e 4, \u0442\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043d\u043e\u043c\u0435\u0440\u0430\u043c\u0438 \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c:\n\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n1 2 3 4\n\n\"\"\"\n\n\"\"\"\n20.4\n\u041e\u0442 \u043a\u043e\u043b\u043e\u0434\u044b\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e $n$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0438 $m$ \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\u0417\u0430\u0442\u0435\u043c $n$ \u0441\u0442\u0440\u043e\u043a \u0438 $m$ \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0447\u0438\u0441\u043b\u0430. \u0427\u0438\u0441\u043b\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 10^5. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u043c\u0435\u0436\u0434\u0443 \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438.\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n    return answer(n, words)\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    text = stdin.readline().strip()\n    words = stdin.readline().split()\n    ans = ''\n\n    for i in range(N):\n        j = i + 1\n        while j < N and words[j - 1] == words[j]:\n            j += 1\n\n        if j - i > 1:\n            ans += words[i] + words[j - 1]\n            if j < N:\n                ans +=''\n\n    return ans\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    t = [0] * (n + 1)\n    for i in range(1, n + 1):\n        j = i + a[i - 1]\n        if j > k:\n            t[i] = max(t[i - 1], max(a[i - 1:k]) * (k - i + 1))\n        else:\n            t[i] = max(t[i - 1], max(a[i - 1:j]) * (j - i + 1))\n    return str(t[n])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    m = len(lst)\n    profits = [0]*k\n    for i in range(k):\n        j = i\n        while j < m and j-i < k:\n            profits[i] += lst[j]\n            j += 1\n    return \" \".join(str(max(profits)) for profit in profits)"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j < a[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j - a[i - 1]] + a[i - 1], dp[i - 1][j])\n    res = []\n    i = n\n    j = k\n    while i > 0:\n        if j >= a[i - 1]:\n            res.append(a[i - 1])\n            j -= a[i - 1]\n        i -= 1\n    return '\\n'.join(map(str, res[::-1]))"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    a = [int(x) for x in stdin.split()]\n\n    #print(n, k, a)\n\n    for i in range(n):\n        a[i] = max(a[:i + 1])\n\n    #print(a)\n\n    res = 0\n\n    for i in range(k):\n        res += a[i]\n\n    return str(res)\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    n = int(stdin[0].split()[0])\n    k = int(stdin[0].split()[1])\n\n    a = stdin[1].split()\n    a = [int(i) for i in a]\n\n    max_profit = 0\n    for l in range(n):\n        curr_max = 0\n        for r in range(l, n):\n            curr_max = max(curr_max, max(a[l:r + 1]))\n            if max_profit < curr_max:\n                max_profit = curr_max\n                break\n    return str(max_profit)"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    l = 0\n    r = n - 1\n    while l <= r:\n        if (n - (r - l + 1)) % k == 0:\n            return (n - r + 1) // k\n        elif (n - (r - l + 1)) % k == 1:\n            r -= 1\n        else:\n            l += 1\n    return 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = max(a)\n    a.remove(m)\n    a = sorted(a, reverse=True)\n    a.append(m)\n    v = []\n    for j in range(0, n - k + 1):\n        v.append(a[j])\n        v.append(a[j + k - 1])\n    v.sort(reverse=True)\n    return''.join(map(str, v))"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n\n    for _ in range(T):\n        N, K = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        s = [0]*N\n        t = [0]*N\n        max_profit = 0\n        for j in range(N):\n            for i in range(j, -1, -1):\n                if s[i] + a[j] > max_profit:\n                    max_profit = s[i] + a[j]\n                    t[j] = i\n        result = []\n        for i in range(N):\n            result.append(str(t[i] + 1))\n        print(' '.join(result))"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The task here is to find the maximum possible profit if we solve one problem per day.\n    We can distribute problems in the following order:\n    - first day we will solve problems in a random order (our objective is to minimize the sum of all profits)\n    - next days we will solve problems in a random order\n    - and so on\n    '''\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1:]]\n    a = sorted(a)\n    for i in range(1, n):\n        a[i] = max(a[i], a[i-1])\n    n = len(a)\n    # we will solve each problem in a random order\n    # we will count the profits per day\n    # we need to create a profit array with 0s, in order to fill them later in O(1)\n    # in order to do that we will create a profit array with index corresponding to each day\n    # the profit array will look like:\n    # [0, 0, 0,..., 0, profit for the first day, profit for the second day, profit for the third day,..., profit for the nth day]\n    # to get the profit we will traverse through the array\n    # if the profit for the current day is better than the previous one, we add it to the array\n    # if the previous profit is better than the current one, we skip the current profit\n    # as we need to find the maximum profit, we will do the above 3 things iteratively until we reach the kth day\n    # thus, we will have to store the maximum profit we've seen so far, and also the maximum profit for each day\n    # we will store the maximum profit for each day in a separate array, so that we will be able to traverse it in O(1)\n    # for each day, we will traverse the profit array and add profit for each day that is greater than 0\n    # for example, if we have profit array as [0, -1, -2,..., -2, -1, 0, 0, 0, 0, 0, 0, 0], then for the current day we will have to add two things:\n    # - the previous profit for the current day\n    # - the profit we just computed for the previous day (now it is -1)\n    # we will be using a separate array for this, so that we can keep track of the previous profit for each day\n    # this profit array will look like:\n    # [0, profit for the first day, profit for the second day,... profit for the nth day]\n    # we will traverse this array, and add the current profit for each day to the profit array\n    # this means that we will get a profit array like this:\n    # [0, 0, 0,..., profit for the first day, profit for the second day, profit for the third day,..., profit for the nth day]\n    # we will iterate through the array, and if the profit for the current day is greater than 0, we will add it to the array\n    # note that we do not add the profit for the previous day to the array, as we want to find the max profit we've seen so far, and not the max profit for the previous day\n    # at the end of the iteration, we will have an array like this:\n    # [0, 0, 0,..., profit for the first day, profit for the second day, profit for the third day,..., profit for the nth day, max profit so far]\n    # and the max profit for the nth day is the max profit we've seen so far\n    # we now traverse the array again and add the profit for each day that is greater than 0\n    # note that we do not add the max profit so far to the array, as we want to find the max profit we've seen so far\n    # we will find the max profit so far and store it in the max profit for each day array, like this:\n    # [0, 0, 0,..., profit for the first day, profit for the second day, profit for the third day,..., profit for the nth day, max profit so far]\n    # at the end of the iteration, we will have an array like this:\n    # [0, 0, 0,..., profit for the first day, profit for the second day, profit for the third day,..., profit for the nth day, max profit so far, max profit for each day]\n    # max profit so far is the max profit we've seen so far\n    # now we traverse the array again, but this time we will store the max profit for each day in a separate array\n    # we will store the max profit for each day in a separate array, so that we can traverse it in O(1)\n    # for each day, we will traverse the profit array and add profit for each day that is greater than 0\n    # for example, if we have profit array as [0, -1, -2,..., -2, -1, 0, 0, 0, 0, 0, 0, 0], then for the current day we will have to add two things:\n    # - the previous profit for the current day\n    # - the profit we just computed for the previous day (now it is -1)\n    # we will be using a separate array for this, so that we can keep track of the previous profit for each day"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n\n    s = 0\n    t = []\n\n    for i in range(k):\n        s = max(s, max(a))\n        t.append(s)\n        a.remove(s)\n\n    return''.join([str(s) for s in t])\n\n\nassert(solution('''8 3\n5 4 2 6 5 1 9 2''')) == '20'\nassert(solution('''5 1\n1 1 1 1 1''')) == '1'\nassert(solution('''4 2\n1 2000 2000 2''')) == '4000'\nassert(solution('''8 2\n1 2000 2000 2''')) == '8 2'\nassert(solution('''9 3\n1 9 9 9 9 9 9 9 9 9''')) == '12'\nassert(solution('''11 1\n1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1''')) == '12'\nassert(solution('''12 2\n1 1 2 1 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2 1 2 1 2 2 1 2 1 2 1 2 1 2 1 1 2 1 1 2 1 1 1 1 2 1 1 1 1''')) == '22'\nassert(solution('''12 3\n1 1 2 2 1 2 1 2 2"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    return str(len(a))"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\nfrom itertools import accumulate, chain\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    array = [int(line) for line in stdin.split()]\n    n = len(array)\n    lowest_possible_solution = n * (n + 1) // 2\n    for i in range(n):\n        for j in range(i + 1, n):\n            if array[j]!= 0:\n                s = array[i] + array[j]\n                if s > 0:\n                    lowest_possible_solution = min(lowest_possible_solution, abs(s))\n    if lowest_possible_solution == n * (n + 1) // 2:\n        return \"0\"\n    else:\n        return str(lowest_possible_solution)\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(stdin))\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    s = 0\n    res = 0\n    for i in range(n):\n        s += a[i]\n        if s == 0:\n            res += 1\n    print(res)\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    n = int(n)\n    a = [int(x) for x in stdin.readline().strip().split()]\n    if 0 in a:\n        return '0'\n    if n == 1:\n        return '0'\n    a = [0] + a + [0]\n    print(a)\n    a_sums = [a[i + 1] - a[i] for i in range(n + 1)]\n    a_sums.insert(0, 0)\n    a_sums.insert(0, 0)\n    print(a_sums)\n    ans = 0\n    min_len = -1\n    for i in range(2, n + 1):\n        print(a_sums[i] - a_sums[i - 1])\n        if a_sums[i] - a_sums[i - 1] < 0:\n            ans += 1\n        else:\n            min_len = max(min_len, i - 1 - ans)\n    if min_len == -1:\n        return '0'\n    else:\n        return str(min_len)\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    result = 0\n    for i in range(1, n):\n        if arr[i] == 0 and arr[i - 1] == 0:\n            result += 1\n        elif arr[i] == 0:\n            if arr[i - 1]!= 0:\n                result += 1\n        elif arr[i - 1] == 0:\n            result += 1\n    return result"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    return len(arr) - binary_search(arr, 0)\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n, m = map(int, stdin.readline().split())\n        s = sum(int(stdin.readline()) for _ in range(n))\n        if s < m:\n            print(abs(m - s))\n        else:\n            print(0)\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    stdin = stdin.split('\\n')[1]\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n\n    # One-liner\n    # return max([abs(x - y) for x, y in zip(a[:-1], a[1:])])\n\n    # Initialize\n    s = sum(a)\n    res = 0\n    # Iterate\n    for i in range(n):\n        s -= a[i]\n        res = max(res, abs(s), abs(a[i] - a[i + 1]))\n    return res"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n    sum = 0\n    for i in range(1, n):\n        sum += abs(a[i] - a[i - 1])\n    print(sum)"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        n, m = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        if n == 1:\n            stdout.write(str(0))\n        else:\n            s = sum(a[1:])\n            dp = [0 for _ in range(n + 1)]\n            dp[0] = s\n            dp[1] = abs(a[0] - a[1])\n            dp[2] = max(dp[1], dp[0])\n            for i in range(3, n):\n                dp[i] = max(dp[i-1] + abs(a[i] - a[i-1]), abs(a[i] - a[i-1]) + dp[i-2])\n            stdout.write(str(dp[n - 1]))\nsolution(\"\")\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_sum = sum(abs(a[i] - a[i + 1]) for i in range(n - 1))\n    return str(max_sum)\n\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(s) for s in stdin.split())\n    a = [int(s) for s in stdin.split()]\n\n    return '\\n'.join(map(str, [max(abs(a[i] - a[i + 1]) for i in range(n - 1)) for i in range(n - 1)]))"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n\n    for _ in range(T):\n        n, m = [int(x) for x in stdin.readline().strip().split()]\n\n        res = 0\n        a = [int(x) for x in stdin.readline().strip().split()]\n        for i in range(1, len(a)):\n            res = max(res, abs(a[i] - a[i - 1]))\n        print(res)\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        n, m = list(map(int, stdin.readline().split(' ')))\n        a = list(map(int, stdin.readline().split(' ')))\n        a.insert(0, 0)\n        diff = [abs(a[i] - a[i + 1]) for i in range(n)]\n        print(max(diff))\nsolution(stdin)\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    return '\\n'.join(str(max_abs_diff(n, m)) for _ in range(n))\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    seq = [1]\n    for i in range(2, 1_000_000):\n        if i % k == 0:\n            seq.append(i)\n    print(seq.index(7) + 1) if 7 in seq else print(-1)\n    return \"\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    # brute force\n    i = 1\n    while i < k:\n        i *= 7\n        if i % k == 0:\n            break\n    else:\n        i = -1\n    return str(i)"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 0\n    while True:\n        if i * n % n == i:\n            return i\n        i += 1"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while True:\n        if (i * n) % 7 == 0:\n            return str(i)\n        i += 1"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    k = int(stdin.strip())\n    position = -1\n    \n    for i in range(0, 10**6):\n        \n        if i % k == 0:\n            position = i\n            break\n    \n    return str(position) if position > 0 else \"-\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    return str(k - 1 - (k - 1) % k)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 7:\n        return '1'\n    elif n == 77:\n        return '2'\n    elif n == 777:\n        return '3'\n    elif n % 7 == 0:\n        return str(n // 7)\n    else:\n        return str(-1)"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    res = -1\n    K = int(stdin)\n    start = 1\n    end = 10000\n    while start <= end:\n        mid = (start + end) // 2\n        if mid % K == 0:\n            res = mid\n            end = mid - 1\n        else:\n            start = mid + 1\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = n % 7\n    if k == 0:\n        return '-1'\n    else:\n        return str(k)"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    arr = list(map(int, stdin.split()[1:]))\n    perm = list(range(1, n+1))\n    rng = list(range(1, n+1))\n    for x in perm:\n        rng.remove(x)\n    count = 0\n    for i in range(len(rng)):\n        for j in range(i+1, len(rng)):\n            if (arr[rng[i]-1] + arr[rng[j]-1]) == m:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.strip()\n    n, m = [int(i) for i in stdin.split()]\n    arr = [int(i) for i in stdin.split()]\n\n    left = 0\n    right = n - 1\n    count = 0\n    while left <= right:\n        if arr[left] == m and arr[right] == m:\n            count += 1\n            left += 1\n            right -= 1\n        elif arr[left] == m:\n            left += 1\n        elif arr[right] == m:\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n    return str(count)"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def read_tuple(line: str) -> tuple:\n        return tuple(map(int, line.split()))\n\n    n, m = map(int, stdin.split())\n    p = tuple(map(int, stdin.split()))\n    p = sorted(p)\n    p = p[(n + m) // 2:] + p[:(n + m) // 2]\n    # p = sorted(p)\n    p = sorted(p)\n    # l = len(p) // 2\n    # print(p[l] == m)\n    # print(p)\n    # print(p[l - 1], p[l], p[l + 1])\n    # return ''\n    return str(p.count(m))\n\nassert(solution('''5 4\n2 4 5 3 1''') == '4')\nassert(solution('''5 5\n1 2 3 4 5''') == '1')\nassert(solution('''15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '48')\nassert(solution('''15 7\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '9')\nassert(solution('''15 6\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '1')\nassert(solution('''15 5\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '0')\nassert(solution('''15 4\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '0')\nassert(solution('''15 3\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '0')\nassert(solution('''15 2\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '0')\nassert(solution('''15 1\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '0')\nassert(solution('''15 0\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '0')\nassert(solution('''10 4\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '0')\nassert(solution('''10 3\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '0')\nassert(solution('''10 2\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '0')\nassert(solution('''10 1\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '0')\nassert(solution('''10 0\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '0')"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    p = [int(x) for x in stdin.split()]\n\n    counter = 0\n\n    for l in range(len(p)-1):\n        for r in range(l+1, len(p)):\n            if p[l] + p[r] == m:\n                counter += 1\n    return str(counter)\n\n\n\nassert(solution(\"5 4\") == \"4\")\nassert(solution(\"5 5\") == \"1\")\nassert(solution(\"15 8\") == \"48\")\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ntry:\n    assert (\n        solution('''5 4\n2 4 5 3 1''') == '4'\n    )\nexcept AssertionError:\n    print('Test 1 Error')\n\ntry:\n    assert (\n        solution('''5 5\n1 2 3 4 5''') == '1'\n    )\nexcept AssertionError:\n    print('Test 2 Error')\n\ntry:\n    assert (\n        solution('''15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9''') == '48'\n    )\nexcept AssertionError:\n    print('Test 3 Error')\n'''\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    n, m = [int(i) for i in lines[0].split(' ')]\n    p = [int(i) for i in lines[1].split(' ')]\n\n    def validate(l, r):\n        if m == median(l, r):\n            return True\n        return False\n\n    def median(l, r):\n        l -= 1\n        r -= 1\n\n        medians = []\n\n        for i in range(l, r):\n            medians.append(p[i])\n\n        medians = sorted(medians)\n\n        if len(medians) % 2!= 0:\n            return medians[len(medians)//2]\n        return (medians[len(medians)//2] + medians[len(medians)//2 - 1]) / 2\n\n    def find_pairs(l, r):\n        return (r-l) - validate(l, r)\n\n    return str(find_pairs(1, n))\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p = [p[i] - 1 for i in range(length)]\n    count = 0\n    if length % 2 == 1:\n        median = sorted(p[0:(length + 1) // 2])[1]\n    else:\n        median = (sorted(p[0:(length + 1) // 2 - 1])[1] + sorted(p[(length + 1) // 2 :])[1]) / 2\n    for i in range(length):\n        for j in range(i + 1, length):\n            if p[i] < p[j]:\n                if p[i] == median or p[j] == median:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if p[i] == m:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    total = sum(a)\n    if total > m:\n        return -1\n    else:\n        return m - total\n\nimport sys"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n'''\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    cups = [0] * m\n    for i in range(len(a)):\n        cups[a[i] - 1] += 1\n\n    water = 0\n    for i in range(len(cups)):\n        water += cups[i]\n\n    if n < water:\n        return -1\n\n    dp = [n + 1] * (water + 1)\n    dp[0] = 0\n\n    for i in range(len(cups)):\n        for j in range(cups[i]):\n            for k in range(i + 1, len(cups)):\n                dp[i + 1] = min(dp[i + 1], dp[i] + k + 1)\n\n    return dp[len(cups) - 1]\n\nprint(solution(stdin.read()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n\n    n, m = int(stdin[0].split(' ')[0]), int(stdin[0].split(' ')[1])\n    cups = [int(i) for i in stdin[1].split(' ')]\n    cups.sort()\n\n    i, count, answer = 0, 0, 0\n\n    while True:\n        for j in range(i + 1, len(cups)):\n            if cups[i] + (j - i) > m:\n                break\n            else:\n                i = j\n        else:\n            answer = count\n            break\n        count += 1\n\n    return str(answer)"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cups_of_coffee = [int(x) for x in stdin.split()]\n    cups_of_coffee.sort(reverse=True)\n    days = 0\n    cup = 0\n    while days < m:\n        if cups_of_coffee[cup] <= cup + 1:\n            cup += 1\n        else:\n            days += 1\n            cup = 0\n    return str(days)\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the number of days Polycarp will need to write the coursework.\n    Time limit: 2 seconds\n    Memory limit: 256 megabytes\n\n    - stdin: str -> int\n    \"\"\"\n    n, m = map(int, stdin.split())\n    cups_of_coffee = [int(n) for n in stdin.split()]\n\n    for cup_of_coffee in cups_of_coffee:\n        assert 1 <= cup_of_coffee <= 100\n\n    cups_of_coffee.sort()\n    days = 0\n    for i in range(len(cups_of_coffee)):\n        days += cups_of_coffee[i] - i\n\n    return \"-1\" if days > m else str(days)\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\nfrom math import ceil\nn, m = [int(x) for x in stdin.split()]\ncups = [int(x) for x in stdin.split()]\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [float(\"inf\")] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i] = min(dp[i], dp[i - 1] + 1)\n        if dp[i] < dp[i - 1] + a[i - 1]:\n            dp[i] = dp[i - 1] + a[i - 1]\n        if dp[i] == dp[i - 1] + 1:\n            dp[i] = dp[i - 1] + 1\n    return \"-1\" if dp[n] == float(\"inf\") else str(dp[n])"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Return -1 if Polycarp cannot write coursework. Otherwise return the minimum number of days Polycarp needs to do it.\n\n    >>> solution('7 10\\n5 5 5 5 5\\n5 5 5 5 5')\n    '4'\n    >>> solution('1 3 4 2 1 4 2\\n5 5 5 5 5\\n5 5 5 5 5')\n    '2'\n    >>> solution('7 10\\n5 5 5 5 5\\n5 5 5 5 5')\n    -1\n    '''\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    cups = [0] * n\n\n    for i in range(m):\n        cups[i % n] += a[i]\n\n    # is it possible to write coursework?\n    if not cups[0]:\n        return '-1'\n    days = 1\n    if not cups[1] - 1:\n        return '0'\n    days += cups[1] - 1\n    if not cups[2] - 2:\n        return '1'\n    days += cups[2] - 2\n    if not cups[3] - 3:\n        return '2'\n    days += cups[3] - 3\n    if not cups[4] - 4:\n        return '3'\n    days += cups[4] - 4\n    if not cups[5] - 5:\n        return '4'\n    days += cups[5] - 5\n    return str(days)"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    cups_of_coffee = list(map(int, stdin.strip().split()))\n    all_cups_of_coffee = n * cups_of_coffee\n\n    current_cups_of_coffee = all_cups_of_coffee[0]\n    current_cups_of_coffee_cnt = 1\n\n    for cup in all_cups_of_coffee[1:]:\n        if current_cups_of_coffee_cnt + 1 <= cup:\n            current_cups_of_coffee_cnt += 1\n        else:\n            current_cups_of_coffee = cup\n            current_cups_of_coffee_cnt = 1\n\n    return f'-1' if current_cups_of_coffee_cnt > m else f'{current_cups_of_coffee - current_cups_of_coffee_cnt + 1}'\n\nassert(solution('''5 8\n2 3 1 1 2\n''') == '4')\nassert(solution('''7 10\n1 3 4 2 1 4 2\n''') == '2')\nassert(solution('''5 15\n5 5 5 5 5\n''') == '1')\nassert(solution('''5 26\n5 5 5 5 5\n''') == '-1')\nassert(solution('''5 26\n5 5 5 5 5\n''') == '-1')\nassert(solution('''5 26\n5 5 5 5 5\n''') == '-1')\nassert(solution('''7 10\n1 3 4 2 1 4 2\n''') == '2')\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    possibles = [0] * n\n    pos = 0\n    for i in range(n):\n        possibles[i] = [0] * 3\n    if b[0] == 0:\n        possibles[0][0] = 1\n    else:\n        possibles[0][1] = 1\n    possibles[0][2] = 1\n    for i in range(1, n):\n        if b[i] == 0:\n            possibles[i][0] = possibles[i-1][1]\n            possibles[i][2] = possibles[i-1][2]\n        else:\n            possibles[i][0] = possibles[i-1][0] + 1\n            possibles[i][1] = possibles[i-1][0] + 1\n            possibles[i][2] = possibles[i-1][0] + 1\n    if possibles[n-1][0] > 0:\n        possibles[n-1][2] = possibles[n-1][0]\n    else:\n        possibles[n-1][2] = -1\n    for i in range(n-1):\n        if possibles[n-1-i][0]!= possibles[n-1-i][1] + 1:\n            possibles[n-1-i][2] = -1\n            break\n    if possibles[n-1][1] == possibles[n-1][2]:\n        possibles[n-1][2] = -1\n    return str(possibles[n-1][2])"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_seq(seq: list):\n        ret = []\n        for n in seq:\n            ret.append(n)\n        return ret\n    n = int(stdin.readline().strip())\n    seq = [int(x) for x in stdin.readline().strip().split(' ')]\n    seq = get_seq(seq)\n    if seq[0] > 0:\n        print(1)\n        return\n    if len(seq) == 1:\n        print(0)\n        return\n    if len(seq) == 2:\n        if seq[1] == seq[0] + 1:\n            print(2)\n            return\n    if len(seq) == 3:\n        if seq[1] == seq[0] + 1 and seq[2] == seq[1] + 1:\n            print(2)\n            return\n    if len(seq) == 4:\n        if seq[1] == seq[0] + 1 and seq[2] == seq[1] + 1 and seq[3] == seq[2] + 1:\n            print(2)\n            return\n    print(-1)\n    return"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin.readline())\n    seq = list(map(int, stdin.readline().split()))\n    curr = None\n    for i in range(1, number):\n        if seq[i] - seq[i - 1] == seq[i - 1]:\n            curr = i\n    if curr == None:\n        return -1\n    else:\n        return number - curr\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def are_equal(a, b):\n        return a - b == 0 or a - b == 1\n\n    def get_number_of_differences(a, b):\n        return abs(a - b)\n\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n\n    counter = 0\n    while counter < len(b):\n        if are_equal(b[counter], b[counter + 1]):\n            b[counter] += 1\n            b[counter + 1] += 1\n        else:\n            b[counter] += 1\n            b[counter + 1] += 1\n\n        if get_number_of_differences(b[counter], b[counter + 1]) == 1:\n            counter += 1\n        else:\n            counter += 2\n\n    if all(are_equal(b[i], b[i + 1]) for i in range(len(b) - 1)):\n        return len(b) - 1\n\n    return -1\n\n\n\nassert solution('''4\n24 21 14 10\n''') == 3\nassert solution('''2\n500 500\n''') == 0\nassert solution('''3\n14 5 1\n''') == -1\nassert solution('''5\n1 3 6 9 12\n''') == 1\nassert solution('''6\n1 2 3 4 5 6\n''') == 2\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    b = [int(x) for x in stdin.split(\" \")]\n    b.sort()\n    i = 0\n    while i < n - 1 and b[i + 1] - b[i] == b[i] - 1:\n        i += 1\n    if i == n - 1:\n        return \"-1\"\n    return str(i)\n\n\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"0\"\nassert solution(\"2\") == \"-1\"\nassert solution(\"1\") == \"0\"\nassert solution(\"14 5 1\") == \"1\"\nassert solution
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    if len(b) == 1:\n        print(0)\n    else:\n        d = [0] * (len(b) + 1)\n        for i in range(1, len(b)):\n            d[i + 1] = d[i] + 1 if b[i] > b[i - 1] else d[i]\n        if d[-1] == len(b):\n            print(-1)\n        else:\n            print(d[-1])\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    b.sort()\n    if (b[0] == 0) or (b[-1] == 0) or (b[0] == b[1]):\n        return '-1'\n    result = 1\n    for i in range(1, len(b)):\n        if (b[i] == b[i-1]):\n            result += 1\n        elif (b[i] == (b[i-1] + 1)):\n            result += 2\n        elif (b[i] == (b[i-1] - 1)):\n            result += 2\n        else:\n            return '-1'\n    return str(result)"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    b = list(map(int, stdin.split(' ')))\n\n    def check_arithmetic(seq):\n        if len(seq) < 3:\n            return False\n        for i in range(1, len(seq)):\n            if seq[i] - seq[i-1]!= seq[i-1] - seq[i-2]:\n                return False\n        return True\n\n    def do_change(seq, pos):\n        if seq[pos] < 10:\n            seq[pos] += 1\n        else:\n            seq[pos] -= 1\n\n    def change_one_per_pos(seq, pos):\n        if seq[pos] < 10:\n            seq[pos] += 1\n        else:\n            seq[pos] = 0\n\n    def check_consecutive_pos(seq, pos):\n        return seq[pos+1] == seq[pos] + 1 and seq[pos+2] == seq[pos] + 2\n\n    def change_one_at_pos(seq, pos):\n        seq[pos] += 1\n        seq[pos+1] += 1\n        seq[pos+2] += 1\n\n    def change_one_after_pos(seq, pos):\n        seq[pos] += 1\n        seq[pos+1] += 1\n        seq[pos+2] += 1\n        seq[pos+3] += 1\n\n    def change_one_before_pos(seq, pos):\n        seq[pos] += 1\n        seq[pos-1] += 1\n        seq[pos-2] += 1\n        seq[pos-3] += 1\n\n    def check_arithmetic_pos(seq, pos):\n        return seq[pos+1] == seq[pos] - 1 and seq[pos+2] == seq[pos] - 2\n\n    def do_change_on_pos(seq, pos):\n        if seq[pos] > 0:\n            seq[pos] -= 1\n        else:\n            seq[pos] = 9\n\n    def change_one_at_pos(seq, pos):\n        seq[pos] -= 1\n        seq[pos+1] -= 1\n        seq[pos+2] -= 1\n\n    def change_one_after_pos(seq, pos):\n        seq[pos] -= 1\n        seq[pos+1] -= 1\n        seq[pos+2] -= 1\n        seq[pos+3] -= 1\n\n    def change_one_before_pos(seq, pos):\n        seq[pos] -= 1\n        seq[pos-1] -= 1\n        seq[pos-2] -= 1\n        seq[pos-3] -= 1\n\n    def change_one_on_pos(seq, pos):\n        seq[pos] -= 1\n        seq[pos-1] -= 1\n        seq[pos-2] -= 1\n        seq[pos-3] -= 1\n        seq[pos-4] -= 1\n\n    pos = 0\n    while pos < len(b):\n        if not check_arithmetic(b):\n            return -1\n        if check_arithmetic_pos(b, pos):\n            if check_consecutive_pos(b, pos):\n                do_change(b, pos)\n                pos += 1\n            else:\n                pos += 3\n        elif check_arithmetic(b):\n            if check_arithmetic_pos(b, pos):\n                if not check_consecutive_pos(b, pos):\n                    return -1\n                else:\n                    if check_consecutive_pos(b, pos-1) and not check_consecutive_pos(b, pos+1):\n                        change_one_before_pos(b, pos)\n                    else:\n                        do_change(b, pos)\n                        pos += 1\n            else:\n                if check_consecutive_pos(b, pos) and not check_consecutive_pos(b, pos-1):\n                    change_one_after_pos(b, pos)\n                else:\n                    change_one_at_pos(b, pos)\n                    pos += 1\n        else:\n            if check_arithmetic(b):\n                do_change(b, pos)\n                pos += 1\n            else:\n                return -1\n\n    return str(b).count('0')\n\nimport sys\ntest_cases = int(sys.stdin.readline().strip())\nfor i in range(0, test_cases):\n    n = int(sys.stdin.readline().strip())\n    b = list(map(int, sys.stdin.readline().strip().split(' ')))\n    print(solution(sys.stdin.readline().strip()))\n\n'''\nThe following solution is a bit more complex, but it works.\n\nimport sys\ntest_cases = int(sys.stdin.readline().strip())\nfor i in range(0, test_cases):\n    n = int(sys.stdin.readline().strip())\n    b = list(map(int, sys.stdin.readline().strip().split(' ')))\n    changed = 0\n    for i in range(0, n):\n        if b[i] > 0:\n            while b[i] > 0:\n                if i < n-1 and b[i] == b[i+1] - 1:\n                    b[i] -= 1\n                    b[i+1] -= 1\n                    changed += 1\n                elif i < n-2 and b[i] == b[i+2] - 1:\n                    b[i] -= 1\n                    b[i+2] -= 1\n                    changed += 1\n                elif i < n-3 and b[i] == b[i+3] - 1:\n                    b[i] -= 1\n                    b[i+3] -= 1\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = [int(stdin.readline().strip()) for i in range(n)]\n    min_changes = n\n    min_changes_seq = b\n    changes = {1: [0], 2: [0], 3: [0]}\n    for i in range(n):\n        changes[1].append(i)\n        changes[2].append(i + 1)\n        changes[3].append(i + 2)\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            changes[i][j] = changes[i - 1][j - 1] + 1\n    for j in range(1, n + 1):\n        changes[1][j] = changes[1][j - 1] + 1\n    for i in range(n):\n        if b[i]!= changes[n][i]:\n            min_changes = min(min_changes, changes[n][i])\n            min_changes_seq = changes[n][i]\n    if min_changes == n:\n        return -1\n    else:\n        return min_changes_seq\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    stdin = stdin.split()\n    s = set()\n    for i in range(n):\n        s.add(int(stdin[i]))\n    print(s)\n    print(len(s))\n    print(k)\n\n    return \"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    best = 0\n\n    for i in range(n - k + 1):\n        for j in range(i + 1, n - k + 1):\n            dif = abs(a[i] - a[j])\n            if dif > 5:\n                break\n            best = max(best, i + j + 1)\n\n    return str(best)"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a.sort()\n    s = 0\n    team = []\n    for i in range(n):\n        if len(team) < k:\n            if a[i] - a[i - 1] <= 5:\n                team.append(a[i])\n                team.append(a[i - 1])\n            else:\n                team.append(a[i])\n        elif len(team) == k:\n            if a[i] - a[i - 1] <= 5:\n                team.append(a[i])\n                team.append(a[i - 1])\n            else:\n                team.append(a[i])\n        else:\n            s += 1\n            team = [a[i]]\n    if len(team) == k:\n        s += 1\n    return s"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    print(solution2(n, k))\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    max_team_number = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            dif = a[j] - a[i]\n            if dif >= 5:\n                break\n            if j - i + 1 > max_team_number:\n                max_team_number = j - i + 1\n    return max_team_number\n\nassert(solution('''5 2\n1 2 15 15 15\n''') == '5')\nassert(solution('''6 1\n36 4 1 25 9 16\n''') == '2')\nassert(solution('''4 4\n1 10 100 1000\n''') == '4')\nassert(solution('''5 1\n10\n''') == '1')\nassert(solution('''6 1\n7 5 4 2 9 6\n''') == '0')\nassert(solution('''5 1\n9 8 7 6 5\n''') == '0')\nassert(solution('''5 1\n4 2 1 2 3\n''') == '0')\nassert(solution('''5 1\n3 3 4 4 5\n''') == '0')\nassert(solution('''5 1\n3 4 2 1 3\n''') == '2')\nassert(solution('''5 1\n4 3 2 1 3\n''') == '2')\nassert(solution('''5 1\n1 3 2 4 5\n''') == '2')\nassert(solution('''5 1\n1 2 3 4 5\n''') == '2')\nassert(solution('''5 1\n1 3 4 5 6\n''') == '0')\nassert(solution('''5 1\n1 2 3 4 5 6\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1\n1 2 4 2 3\n''') == '0')\nassert(solution('''5 1"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    return str(solution2(a, k))\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    A = [0] * (k + 1)\n    B = [0] * (k + 1)\n\n    for i in range(k):\n        A[i] = i\n        B[i] = sum(a[:i + 1])\n\n    i = k - 1\n    S = [0] * (n + 1)\n    while i >= 0:\n        if A[i] < n - i:\n            S[n - i] = A[i]\n            i -= 1\n        else:\n            S[n - i] = n - i\n            i -= 1\n            S[n - i - 1] = A[i] - n + i + 1\n            i -= 1\n\n    total = sum(S)\n    return str(total)\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def balancedTeams(array):\n        score = sum(array)\n        diff = 5\n        for i in range(len(array)):\n            if array[i] < diff:\n                diff = array[i]\n            if array[i] - diff > 0:\n                score -= array[i] - diff\n        if score < 0:\n            return 0\n        else:\n            return score\n    _, k = list(map(int, stdin.split()))\n    array = list(map(int, stdin.split()))\n    array.sort()\n    l = len(array)\n    result = 0\n    for _ in range(k):\n        idx = balancedTeams(array)\n        if idx > result:\n            result = idx\n    return result"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[:n]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) <= 5:\n                count += 1\n    print(count)\n    return ''\n\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    j = 0\n    for i in range(1, n):\n        while j < i and a[j] < k:\n            j += 1\n\n        a[i] += a[j]\n        a[j] = 0\n\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if s >= m:\n            break\n\n    return str(i + 1) if s >= m else '-1'"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N, K, M = [int(x) for x in lines[0].split(' ')]\n    A = [int(x) for x in lines[1].split(' ')]\n    A.sort()\n    A.reverse()\n\n    result = 0\n    for i in range(N):\n        result += A[i] * (M - i)\n        if result >= K:\n            return (M - i) + result - K\n    return -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = list(map(int, stdin.strip().split()))\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    s = sum(a)\n    if s < m:\n        return -1\n    else:\n        i = 0\n        while s - a[i] > m:\n            s -= a[i]\n            i += 1\n        return a[i]\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    for i in range(n):\n        arr[i] += k\n    arr.sort()\n    if arr[m - 1] < m:\n        return -1\n    for i in range(n - 1):\n        if arr[i] + 1 >= arr[i + 1]:\n            continue\n        else:\n            return arr[i] + 1"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = (int(x) for x in stdin.split())\n    l = [int(x) for x in stdin.split()]\n    if sum(l) < m:\n        return \"-1\"\n    low = max(l)\n    high = sum(l)\n    while low < high:\n        mid = (low + high) // 2\n        if is_valid(l, mid, k):\n            high = mid\n        else:\n            low = mid + 1\n    return low\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    num_list = [int(stdin_list[i]) for i in range(len(stdin_list))]\n    num_list.sort()\n    average = sum(num_list) / len(num_list)\n    if average >= num_list[-1]:\n        return \"-1\"\n    else:\n        n = 1\n        last_point = 0\n        while n < len(num_list) and num_list[-n] <= average:\n            last_point = num_list[-n]\n            n += 1\n        if n == len(num_list):\n            return str(last_point)\n        else:\n            return str(last_point + 1)"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = [int(x) for x in stdin.strip().split(' ')]\n    A = [int(x) for x in stdin.strip().split(' ')]\n    target = M + K - A[-1]\n    if target < 0:\n        return -1\n    else:\n        A = A[:-1]\n        A.sort()\n        i = 0\n        while target > 0 and i < len(A):\n            target -= A[i]\n            i += 1\n        return i"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    s = stdin.split()\n    t = map(int, s)\n    # calculate average\n    avg = sum(t) / len(t)\n    # total_avg = avg * n + t[-1]\n    # total_avg = int(total_avg / n)\n    if avg * n + t[-1] > m:\n        return \"-1\"\n    else:\n        return str(int(m - avg * n))\n"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the problem\"\"\"\n    lst = list(map(int, stdin.split()))\n    n = lst[0]\n    k = lst[1]\n    m = lst[2]\n    A = list(map(int, stdin.split()))[:-1]\n    S = A[:]\n    S.sort(reverse=True)\n    total = 0\n    for i in S:\n        total += i\n    count = 0\n    while m > 0:\n        total -= A[count]\n        count += 1\n        m -= 1\n    if total >= k:\n        return count\n    return -1"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split()\n    n, k, q = int(input_[0]), int(input_[1]), int(input_[2])\n    a = list(map(int, input_[3:]))\n\n    players_alive = True\n    for _ in range(q):\n        correct_answer = a.pop(0)\n        for i in range(n - 1):\n            if correct_answer - a[i] < k:\n                a[i] -= 1\n        if a[-1] >= k:\n            players_alive = False\n\n    return 'Yes' if players_alive else 'No'"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = [int(x) for x in stdin.split()]\n    scores = [int(x) for x in stdin.split()]\n    if max(scores) < 0:\n        return 'No'\n    players = sorted(scores, reverse=True)\n    for _ in range(Q):\n        players[0] -= 1\n        players = [p - 1 for p in players if p > 0]\n    return 'Yes' if len(players) == 1 else 'No'"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    scores = [0] * N\n    for i in range(1, Q+1):\n        Ai = int(stdin.readline())\n        scores[i-1] -= 1\n        for j in range(1, N):\n            if scores[j] >= Ai:\n                scores[j] -= 1\n    return \"\".join(\"Yes\" if s >= 0 else \"No\" for s in scores)\n\"\"\"\n\nimport sys\nfrom collections import deque\nfrom bisect import insort\n\nT = int(sys.stdin.readline().strip())\n\nfor i in range(T):\n    n, k, q = map(int, sys.stdin.readline().strip().split())\n    scores = map(int, sys.stdin.readline().strip().split())\n    scores = deque(scores)\n    eliminated = deque([])\n    for score in scores:\n        insort(scores, score-1)\n    for _ in range(q):\n        A = int(sys.stdin.readline().strip())\n        scores.remove(A-1)\n        eliminated.append(A)\n        for j in range(1, n):\n            if scores[j] < scores[0]:\n                scores.popleft()\n                insort(scores, A-1)\n                eliminated.append(A)\n                break\n    eliminated.sort()\n    sys.stdout.write(\"\\n\".join(map(str, eliminated))+\"\\n\")\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    1. Input\n    N K Q\n    A_1\n    A_2\n   .\n   .\n    A_Q\n    \n    2. Output\n    No\n    No\n    Yes\n    No\n    No\n    No\n    No\n    Yes\n    No\n    No\n    Yes\n    No\n    No\n    No\n    Yes\n    No\n    No\n    No\n    Yes\n    No\n    Yes\n    No\n    No\n    Yes\n    No\n    Yes\n    No\n    No\n    Yes\n    No\n    No\n    Yes\n    No\n    Yes\n    No\n    No\n    Yes\n    No\n    No\n    No\n    Yes\n    '''\n    # 1. Input\n    n, k, q = [int(x) for x in stdin.split()]\n    players = [int(stdin) for _ in range(n)]\n    assert len(players) == n\n    assert 1 <= k <= 10**9\n    assert 1 <= q <= 10**5\n\n    # 2. Process\n    for q_ in range(q):\n        player = players[q_]\n        players[player-1] -= 1\n\n    # 3. Output\n    for player in players:\n        print('Yes' if player >= k else 'No')"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    correct = 0\n    for i in range(q):\n        correct += scores[i]\n    players = [False] * n\n    while correct > 0:\n        i = 0\n        if correct > k:\n            players[i] = True\n            correct -= k\n            i += 1\n        else:\n            players[i] = True\n            correct = 0\n        while correct < k and i < n - 1:\n            players[i] = False\n            correct += scores[i]\n            i += 1\n    print('\\n'.join(('No' if player else 'Yes') for player in players))"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = stdin.split()\n    N, K, Q = int(N), int(K), int(Q)\n\n    players = []\n    for i in range(N):\n        players.append(int(stdin.readline().strip()))\n\n    scores = []\n    for i in range(N):\n        scores.append(K)\n\n    correct_answers = stdin.readline().strip().split()\n    for i, answer in enumerate(correct_answers):\n        if answer == \"Y\":\n            players[i] -= 1\n            scores[i] -= 1\n\n    for i in range(N - Q):\n        players[Q - 1 + i] -= 1\n\n    alive = [player for player in players if player > 0]\n    return \"\".join([\"Yes\\n\" if player > 0 else \"No\\n\" for player in alive])"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds out whether each player survived the game, given their scores and Q correct answers.'''\n    N, K, Q = tuple(int(n) for n in stdin.strip().split(' '))\n    A = list(int(n) for n in stdin.strip().split(' '))\n    for _ in range(Q):\n        A_i = int(stdin.readline().strip())\n        A.remove(A_i)\n    A.sort()\n    K += 1\n    K -= A.count(0)\n    for i in range(N):\n        if A[i] >= K:\n            print('Yes')\n        else:\n            print('No')"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    for _ in range(q):\n        a = [a[i] - 1 for i in range(len(a)) if a[i] - 1 >= 0]\n    return '\\n'.join(['Yes' if x > 0 else 'No' for x in a])"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    queries = list(map(int, stdin.split()))\n\n    for query in queries:\n        for index, score in enumerate(scores):\n            if score < query:\n                scores[index] -= 1\n\n        if scores[query - 1] >= 0:\n            scores[query - 1] -= 1\n\n    return \"No\" * (not any(scores)) + \"Yes\" * any(scores)"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n > 200 or m > 200:\n        return \"NO\"\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split()[1:])))\n    r, c = find_inversion(a)\n    return \"YES\" if r + c == 0 else \"NO\"\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    a = [list(map(int, stdin.strip().split())) for _ in range(n)]\n    if all(all(x) for x in a):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split()[1:])))\n    def check(r, c, a):\n        a[r][c] = 1 if a[r][c] == 0 else 0\n        s = []\n        for row in range(n):\n            if a[row][c] == 1:\n                a[row][c] = 0\n                s.append(row)\n        for col in range(m):\n            if a[r][col] == 1:\n                a[r][col] = 0\n                s.append(col)\n        return sorted(s)\n    for row in range(n):\n        for col in range(m):\n            if a[row][col] == 1:\n                s = check(row, col, a)\n                if s!= sorted(range(len(s))):\n                    return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n@pytest.mark.parametrize(\n    ['input', 'expected'],\n    (\n        # no tests yet\n    ),\n)\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == 0 or m == 0:\n        return \"NO\"\n\n    rows = [int(x) for x in stdin.split()]\n    cols = [int(x) for x in stdin.split()]\n    if len(rows)!= n or len(cols)!= m:\n        return \"NO\"\n    for row in rows:\n        if row!= 0 and row!= 1:\n            return \"NO\"\n\n    matrix = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = cols[j]\n    rows.sort(reverse=True)\n    cols.sort(reverse=True)\n    # result = \"\"\n    # for i in range(n):\n    #     result += str(rows[i])\n    # print(result)\n    # for i in range(n):\n    #     result += str(cols[i])\n    # print(result)\n    inverted_rows = rows[:]\n    inverted_rows.reverse()\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                matrix[i][j] = inverted_rows[j]\n    result = \"\"\n    for i in range(m):\n        result += str(cols[i])\n    print(result)\n    result = \"\"\n    for i in range(n):\n        result += str(rows[i])\n    print(result)\n    return \"YES\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    matrix = []\n    for line in stdin.splitlines():\n        row = [int(x) for x in line.split()]\n        matrix.append(row)\n\n    matrix = sort_matrix(matrix)\n\n    print(\"YES\" if matrix == sorted_matrix(matrix) else \"NO\")\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(rows)]\n    if not check_sort(matrix):\n        return \"NO\"\n\n    R = []\n    for i in range(rows):\n        for j in range(cols):\n            if j == cols - 1:\n                R.append(matrix[i][j])\n            else:\n                if matrix[i][j]!= 0:\n                    matrix[i][j] = 1\n                else:\n                    matrix[i][j] = 0\n\n    res = \"\"\n    for i in range(rows):\n        res += str(matrix[i][-1])\n\n    res2 = \"\"\n    for j in range(cols):\n        res2 += str(R[j])\n    return \"YES\\n{}\\n{}\".format(res, res2)\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution 1\n\n    \"\"\"\n    n, m = (int(x) for x in stdin.strip().split(' '))\n    matrix = [list(map(int, stdin.strip().split(' '))) for _ in range(n)]\n    answer = 'YES'\n\n    # Apply operations\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                # Do the operation\n                matrix[i][:] = [1 - x for x in matrix[i]]\n                matrix[j][:] = [1 - x for x in matrix[j]]\n\n    # Check the result\n    if not all(x == sorted(x) for x in matrix):\n        answer = 'NO'\n    return answer\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    return \"Yes\" if num == 1 else \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if any(map(lambda x: x % 2 == 0, map(int, stdin))) else 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    if n in range(100, 1000):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if ''.join(sorted(stdin)) == stdin else 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_pandigital(stdin) else 'No'\n    \nassert solution('123456789') == 'Yes'\nassert solution('123456789') == 'Yes'\nassert solution('12345678') == 'No'\nassert solution('1234') == 'No'\nassert solution('1234567890') == 'Yes'\nassert solution('1234a56789') == 'No'\nassert solution('123456789012345678') == 'Yes'\nassert solution('2345678901234567890123456789012345678') == 'Yes'\nassert solution('12345678901234567890') == 'Yes'\nassert solution('1234567890123456789012345678901234567890') == 'Yes'\nassert solution('1234567890123456789012345678901234567890a') == 'Yes'\nassert solution('1234567890123456789012345678901234567890a1234567890123456789012345678901234567890a123456789012345678901234567890123456789012345678901234567890a12345678901234567890123456789012345678901234567890a1234567890123456789012345678901234567890a1234567890123456789012345678901234567890a1234567890123456789012345678901234567890a12345678901234567890123456789012345678901234567890a12345678901234567890123456789012345678901234567890a1234567890123456789012345678901234567890a1234567890123456789012345678901234567890a1234567890123456789012345678901234567890a1234567890123456789012345678901234567890a1234567890123456789012345678901234567890a1234567890123456789012345678901234567890a1234567890123456789012345678901234567890a12345678901234567890123456789012345678901234567890a12345678901234567890123456789012345678901234567890a12345678901234567890123456789012345678901234567890a1234567890123456789012345678901234567890a12345678901234567890123456789012345678901234567890a1234567890123456789012345678901234567890a1234567890123456789012345678901234567890a1234567890123456789012345678901234567890a12345678901234567890123456789012345678901234567890a12345678901234567890123456789012345678901234567890a1234567890123456789012345678901234567890a1234567890123456789012345678901234567890a1234567890123456789012345678901234567890a1234567890123456789012345678901234567890a123456789012345678901234567890a1234567890123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a1234567890123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a12345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a123456789012345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a12345678901234567890a123456789"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num < 10:\n        return 'Yes'\n\n    for i in range(9, 1, -1):\n        if num % i == 0:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.isdigit() and len(stdin) in range(1, 11) else 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 10 or len(stdin) > 10:\n        return \"NO\"\n\n    last = stdin[0]\n    for i in range(1, len(stdin)):\n        if stdin[i]!= last:\n            return \"NO\"\n        last = stdin[i]\n    return \"YES\"\n\nassert(solution(\"12345\") == \"NO\")\nassert(solution(\"1234567\") == \"YES\")\nassert(solution(\"123456789\") == \"NO\")\nassert(solution(\"1111211\") == \"YES\")\nassert(solution(\"111111\") == \"NO\")\nassert(solution(\"1212121212\") == \"NO\")\nassert(solution(\"121234567\") == \"NO\")\nassert(solution(\"1\") == \"YES\")\nassert(solution(\"\") == \"NO\")\nassert(solution(\"12345\") == \"NO\")\nassert(solution(\"123456789\") == \"NO\")\nassert(solution(\"121234567\") == \"NO\")\nassert(solution(\"112233\") == \"NO\")\nassert(solution(\"123123123\") == \"NO\")\nassert(solution(\"122212222222\") == \"NO\")\nassert(solution(\"12221222222223\") == \"NO\")\nassert(solution(\"1222122222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222222222\") == \"YES\")\nassert(solution(\"12222222"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin.strip())\n    def _is_armstrong(n: int) -> bool:\n        return n == sum(int(x) ** len(str(n)) for x in str(n))\n    return \"Yes\" if _is_armstrong(number) else \"No\"\n\nassert(solution('373') == 'Yes')\nassert(solution('121') == 'No')\nassert(solution('436') == 'Yes')\n\n\"\"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin[0]\n    return \"Yes\" if (number.startswith(\"1\") or number.startswith(\"2\") or number.startswith(\"3\") or number.startswith(\"4\") or number.startswith(\"5\") or number.startswith(\"6\") or number.startswith(\"7\") or number.startswith(\"8\") or number.startswith(\"9\")) else \"No\""
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, _, destination = map(int, stdin.split())\n    s = map(int, stdin.split()[1:])\n    return str(get_max_segments_walked(destination, s))\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # It would be better to solve this problem using dynamic programming.\n    # The sum of charge for each segment can be calculated as sum of charge for previous segments.\n    # And the current segment can be calculated as current segment divided by\n    # by sum of charge for previous segments and a plus 1 if battery is used,\n    # else minus 1.\n    #\n    # And the previous segments can be calculated as\n    # previous segments + current segment / sum of charge for previous segments + a\n    #\n    # And the sum of charge for each segment can be calculated as\n    # current segment / (sum of charge for previous segments + a) + 1 if battery is used,\n    # else current segment / (sum of charge for previous segments + a)\n    #\n    # It would be better to iterate over the input array from end to start\n    # to save space\n    #\n    # Example:\n    #   6 3 2\n    #   0 1 0 1 0\n    #\n    #   1 0 0 1 0\n    #   1 1 0 1 0\n    #   1 1 1 1 0\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1 1 1 1\n    #   1 1"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, b, a = map(int, stdin.split())\n\n    return \"2\""
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = stdin.split()\n\n    r = 0\n\n    for i in range(n - 1):\n        if s[i] == 1:\n            r = max(r, i + 1)\n            b -= 1\n\n    return r\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.strip().split(' '))\n    s = list(map(int, stdin.strip().split(' ')))\n\n    possibilities = []\n    if s[0] == 0:\n        possibilities.append(a)\n\n    for i in range(1, n):\n        possibilities.append(a)\n        if s[i] == 0:\n            possibilities[i] = b\n\n    result = 0\n    for possibility in possibilities:\n        if possibility == b:\n            result += 1\n        if possibility == a:\n            result += 2\n\n    return str(result)\n\n\n>>> solution('''5 2 1''')\n'5'\n\n>>> solution('''6 2 1''')\n'3'\n\n>>> solution('''2 1 0 0 1''')\n'1'\n\n>>> solution('''10 0 1 0 1 1 1 1 1 1 1''')\n'1'\n\n>>> solution('''1 0 0 1 0 0 0 1''')\n'2'\n\n>>> solution('''1 0 0 1 0 0 1''')\n'2'\n\n>>> solution('''3 1 1 1 1 1 1 1''')\n'1'\n\n>>> solution('''1 1 1 1 1 1 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''')\n'2'\n\n>>> solution('''1 0 1 1 0 1''"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = [int(num) for num in stdin.split()]\n    n, b, a = input_data\n    s = [int(num) for num in stdin.split()]\n\n    # Here we solve a problem that we have not solved before\n    # Let's generate all permutations of s\n    # I see it's a combination problem\n\n    # each time I run this function I save all\n    # possible values for the return value\n    # I don't know why I have to save the values\n    # but I think it's because I need them when I use\n    # the value I found\n\n    def all_permutations(input_array: list) -> list:\n        # I only care about the last segment of the path\n        # I do not care about the last point\n\n        # I need to sort the input array\n        # I think the second and third point could be\n        # an example of why I need to sort the array\n\n        # This is a very naive and slow solution\n        # O(n**2) complexity\n\n        # O(n*2) because I have to sort the array\n        # O(n) complexity\n\n        permutations = []\n\n        def helper(result: list, remaining_array: list) -> None:\n            if not remaining_array:\n                permutations.append(result)\n\n            for i in range(len(remaining_array)):\n                helper(result + [remaining_array[i]], remaining_array[:i] + remaining_array[i+1:])\n\n        helper([], input_array)\n        return permutations\n\n    all_permutations_of_s = all_permutations(s)\n    # print(all_permutations_of_s)\n\n    # I need to know if the segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int, segment_allowed: bool) -> bool:\n        return segment_allowed\n\n    # I need to know if the current segment is allowed to be passed\n    # or not. I do not know how to implement this\n\n    def allowed_to_pass(i: int"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        if s[i] == 0:\n            res = max(res, i)\n        else:\n            a = min(a, b)\n            b -= 1\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(i) for i in stdin.split()]\n    s = [int(i) for i in stdin.split()]\n\n    passed = [0] * n\n    for i in range(n):\n        if s[i] == 0:\n            passed[i] = 1\n    passed = list(itertools.accumulate(passed))\n\n    dp = [0] * (b + a)\n    for i in range(n):\n        if s[i] == 0:\n            dp[passed[i]] = max(dp[passed[i]], dp[passed[i] - 1] + 1)\n    return str(dp[b])\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\nprint(solution(stdin))\n\n\n>>> solution('''5 2 1''')\n5\n>>> solution('''6 2 1''')\n3\n>>> solution('''1 0 0 1 0 1''')\n4\n>>> solution('''0 1 0 1 0 1''')\n5\n>>> solution('''0 1 0 1 0 0''')\n6\n>>> solution('''0 1 0 1 0 1 1''')\n7\n>>> solution('''0 1 0 1 0 1 1 1''')\n8\n>>> solution('''1 0 0 1 0 1 1 1''')\n9\n>>> solution('''1 0 0 1 0 1 1 1 1''')\n9\n>>> solution('''0 1 0 1 0 1 1 1 1 1''')\n10\n>>> solution('''1 0 0 1 0 1 1 1 1 1 1''')\n10\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1''')\n11\n>>> solution('''1 0 0 1 0 1 1 1 1 1 1 1 1 1 1''')\n11\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1''')\n12\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n12\n>>> solution('''1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n12\n>>> solution('''1 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n12\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1''')\n13\n>>> solution('''0 0 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '4'\n    pass\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def evaluate(expression: str) -> int:\n        stack = []\n        for i in expression:\n            if i.isdigit():\n                stack.append(int(i))\n            elif i in '+-':\n                a = stack.pop()\n                b = stack.pop()\n                if i == '+':\n                    stack.append(a + b)\n                else:\n                    stack.append(b - a)\n        return stack[-1]\n\n    return str(evaluate(stdin.replace('-', '+-').replace('+', '+-').split('-')[0]))\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split('-')\n    sum = 0\n    for num in nums:\n        sum += eval(num)\n    return str(sum)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(x) for x in stdin.split('-')]\n    return str(eval(stdin))"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n    if n < 2 or k < 2:\n        return \"NO\"\n    if n % 2 == 0 or n < k * 2 or n == 1:\n        return \"NO\"\n    return \"YES\" + '\\n'.join(map(str, (n - 2 * i for i in range(n // 2))))\n\n\nassert (solution(input()) == \"YES\"\n        \"\"\n        \"YES\\n3 1\\n1 3\\n3 2\\n2 3\"\n        \"NO\"\n        \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\"\n        \"NO\"\n        \"YES\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n\"\n        \"NO\"\n        )\nprint(solution(input()), end=\"\")\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def check(x: int, y: int) -> bool:\n        for i in range(1, n):\n            if x == colors[i] or y == colors[i]:\n                return False\n        return True\n\n    n, k = map(int, stdin.split())\n    colors = stdin.split()\n\n    # check if impossible\n    if any(not check(x, y) for x in range(1, n) for y in range(1, n)):\n        print(\"NO\")\n        return\n\n    # if impossible, no need to try any color\n    for i in range(1, n):\n        print(f\"{colors[i-1]} {colors[i]}\")\n    return\n\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = [int(x) for x in lines[0].split(' ')]\n    if n < 2 or k > 2 * 10**5:\n        return 'NO'\n    cnt = 2 * n\n    pairs = {}\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if (i, j) in pairs:\n                return 'NO'\n            else:\n                pairs[(i, j)] = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if (i, j) in pairs:\n                continue\n            cnt -= 1\n            pairs[(i, j)] = 1\n            pairs[(j, i)] = 0\n            if cnt == 0:\n                break\n    return 'YES' if cnt == 0 else '\\n'.join(str(x) for x in pairs.values())\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    pairs = sorted([tuple(sorted(map(int, line.split()))) for line in stdin.strip().split('\\n')])\n    colors = set(range(1, k+1))\n    for i in range(n):\n        man, woman = pairs[i]\n        if man == woman:\n            if man in colors:\n                colors.remove(man)\n            else:\n                return 'NO'\n        elif (man, woman) in pairs or (woman, man) in pairs:\n            return 'NO'\n        else:\n            colors.remove(man)\n            colors.remove(woman)\n    return 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2 or k < 2 or n > 10**5 or k > 10**5:\n        return \"NO\"\n    if n % 2!= 0:\n        return \"NO\"\n    return \"YES\\n\" +''.join(map(str, [k-1-i for i in range(1, n//2+1)]))\n\nn = int(input())\nk = int(input())\nprint(solution(input()))"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    if n % 2!= 0 or k < 1 or k > 10 ** 5:\n        return \"NO\"\n\n    b, g = [], []\n    for i in range(1, n + 1):\n        b.append(int(stdin.split()[i]))\n        g.append(int(stdin.split()[i + n]))\n\n    for i in range(n):\n        if b[i] == g[i]:\n            return \"NO\"\n        if b[i]!= g[i] and b[i] in g and g[i] in b:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < 2 or k > 10 ** 5:\n        raise ValueError(f'Invalid n and k: n={n}, k={k}')\n    for _ in range(n):\n        pair = [int(x) for x in stdin.split()]\n        if pair[0] == pair[1]:\n            raise ValueError(f'Invalid pair: man and woman are the same: {pair}')\n        if pair[0] < 1 or pair[0] > k or pair[1] < 1 or pair[1] > k:\n            raise ValueError(f'Invalid pair: man and woman must be from 1 to {k}: {pair}')\n        if any(pair[0] == x or pair[1] == x for x in pair):\n            raise ValueError(f'Invalid pair: colors of man and woman must be different: {pair}')\n    colors = [0 for _ in range(k)]\n    while n:\n        for i in range(k):\n            colors[i] += 1\n        n -= 1\n        for i in range(k):\n            for j in range(i + 1, k):\n                colors[i] += colors[j]\n    for color in colors:\n        print(color, end=' ')\n    print()\n    return 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution()\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < 2 or n > 10**5 or k < 2 or k > 10**5:\n        return \"NO\"\n\n    def get_colors(a, b):\n        return max(a, b), min(a, b)\n\n    def is_valid(colors, b, g):\n        for color in colors:\n            if color == b:\n                return False\n            if color == g:\n                return False\n        return True\n\n    for i in range(n):\n        c1, c2 = [int(x) for x in stdin.split()]\n        c1, c2 = get_colors(c1, c2)\n        if not is_valid(colors, c1, c2):\n            return \"NO\"\n\n    for i in range(n - 1):\n        c1, c2 = [int(x) for x in stdin.split()]\n        c1, c2 = get_colors(c1, c2)\n        if c1 == c2:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2 or k < 2 or n > 1000000 or k > 1000000:\n        return \"NO\"\n    if n % 2!= 0:\n        return \"NO\"\n    if k == 2:\n        return \"YES\"\n    graph = [[False] * k for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            b = ord(stdin[i]) - ord('a')\n            g = ord(stdin[j]) - ord('a')\n            if b == g:\n                return \"NO\"\n            graph[i][g] = True\n            graph[j][b] = True\n    for i in range(n):\n        if graph[i][i]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k, x = list(map(int, lines[0].split()))\n    a = list(map(int, lines[1].split()))\n    a.sort()\n    kittens = 0\n    total = 0\n    i = 0\n    while k > 0:\n        if i < len(a):\n            if a[i] > kittens:\n                kittens = a[i]\n        total += kittens\n        k -= kittens\n        i += 1\n    print(total)\n    return ''\n\nsolution('''5 2 3\n5 1 3 10 1\n''')\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_likes = int(stdin.readline())\n    k = int(stdin.readline())\n    num_repost = int(stdin.readline())\n    num_pictures = int(stdin.readline())\n    if num_pictures < k:\n        return '-1'\n\n    beauty_array = list(map(int, stdin.readline().split()))\n    beauty_array.sort(reverse=True)\n\n    max_sum = 0\n    repost = 0\n    for i in range(num_pictures):\n        if repost < i + k:\n            return '-1'\n        if i + k <= num_pictures:\n            max_sum = max(max_sum, sum(beauty_array[i:i + k]))\n        if i + k == num_pictures:\n            max_sum = max(max_sum, sum(beauty_array[i:]))\n\n    return str(max_sum)\n\nassert solution('5 2 3\\n5 1 3 10 1\\n') == '18'\nassert solution('6 1 5\\n10 30 30 70 10 10\\n') == '100'\nassert solution('4 3 1\\n1 100 1 1\\n') == '-1'\nassert solution('7 1 1\\n1 100 1 1 1\\n') == '-1'\nassert solution('6 2 1\\n1 100 1 1\\n') == '-1'\nassert solution('8 1 1\\n1 100 1 1 1 1\\n') == '-1'\nassert solution('9 1 1\\n1 100 1 1 1 1 1 1 1\\n') == '-1'\nassert solution('10 2 1\\n1 100 1 1 1 1 1 1 1 1 1 1\\n') == '-1'\nassert solution('10 2 1\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_arr(n, a):\n        arr = []\n        for i in range(n):\n            if a[i] == 0:\n                continue\n            arr.append(a[i])\n        return arr\n\n    n, k, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    max_sum = 0\n    a = get_arr(n, a)\n    for i in range(len(a) - k):\n        if a[i] > 0:\n            for j in range(i + 1, i + k + 1):\n                if j >= len(a):\n                    break\n                a[j] -= 1\n            max_sum = max(max_sum, sum(a))\n    return str(max_sum)\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\" \")))\n\n    if x > n:\n        return \"-\"\n\n    best_beauty = 0\n    beauty_in_segment = 0\n    beauty_of_segment = 0\n\n    for i in range(n):\n        beauty_in_segment += a[i]\n        beauty_of_segment = max(beauty_in_segment, beauty_of_segment)\n\n        if i >= k:\n            beauty_in_segment -= a[i - k]\n            if i >= k - 1:\n                best_beauty = max(best_beauty, beauty_of_segment)\n\n    return str(best_beauty) if best_beauty!= 0 else \"-1\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, x, n = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    print(k, x, n, a)\n    return str(solution_hack(k, x, n, a))\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    total = 0\n    a.sort()\n    if k*x > n:\n        return -1\n    if a[-1] > k:\n        return -1\n    for i in range(0, n - x + 1):\n        if i > 0 and a[i-1] == a[i]:\n            continue\n        total += a[i]\n    return total\n\nassert(solution('5 2 3') == 18)\nassert(solution('6 1 5') == -1)\nassert(solution('4 3 1') == 100)"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split(\" \")))\n\n    if input_data[0] < input_data[1] or input_data[0] < input_data[2]:\n        print(-1)\n        return\n\n    possible_sum = input_data[0]\n    reposts = []\n    for i in range(input_data[0]):\n        reposts.append(input_data[i + 1])\n\n    for n in range(2, input_data[0]):\n        i = 0\n        j = n - 1\n        while j < input_data[0]:\n            new_sum = reposts[i] + reposts[j]\n            if new_sum < input_data[n]:\n                i += 1\n                j += 1\n            elif new_sum > input_data[n]:\n                j -= 1\n            else:\n                possible_sum = max(possible_sum, reposts[i] + reposts[j])\n                i += 1\n                j -= 1\n                if i == j:\n                    i += 1\n\n    print(possible_sum)"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n, k, x = a[0], a[1], a[2]\n    a = a[3:]\n    if k == 1:\n        return max(a)\n    for i in range(len(a) - k + 1):\n        temp = sum(a[i : i + k])\n        if temp > x:\n            return -1\n    return sum(a[:])\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def check(i: int, j: int, l: int, s: int) -> bool:\n        return i < l and sum(a[i:j]) >= s\n\n    n, k, x = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    l = len(a)\n\n    s = 0\n    r = 0\n    for i in range(l - k + 1):\n        for j in range(i + k, l + 1):\n            if check(i, j, l, x):\n                s += sum(a[i:j])\n                r += 1\n    if r < x:\n        return -1\n    return s\n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[n:]\n    \n    cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            cost += i\n    \n    return cost"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = stdin[n + 1:]\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            t[i] = i + 1\n    total = 0\n    for i in range(n):\n        for j in range(max(1, i - k), min(n, i + k) + 1):\n            total += i + 1\n    return str(total)\n\nassert(solution('') == '')\nassert(solution('1') == '1')\nassert(solution('0') == '0')\nassert(solution('01') == '1')\nassert(solution('00100') == '3')\nassert(solution('0011') == '4')\nassert(solution('00101') == '4')\nassert(solution('000010000100') == '15')\nassert(solution('00000100000100000100000101') == '16')\nassert(solution('0000100001000100000100000101') == '17')\nassert(solution('000000') == '1')\nassert(solution('001010100') == '4')\nassert(solution('00011') == '4')\nassert(solution('00001000010001000001000001010000010000010001') == '16')\nassert(solution('0000100001000100000100000101000001000001000100') == '17')\nassert(solution('11111111') == '17')\nassert(solution
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip('\\n')\n    n = len(s)\n    \n    min_cost = n\n    for i in range(0, n):\n        if s[i] == '1':\n            min_cost = min(min_cost, i + 1 + k)\n    \n    return min_cost\n\n\nsolution('10 3')\nsolution('1000 1')\nsolution('10000 1001')\nsolution('1 1')\nsolution('0 0')\nsolution('1 0')\nsolution('0 1')\nsolution('1 1')\nsolution('100 10')\nsolution('00')\nsolution('0001')\nsolution('11111')\nsolution('0110111')\nsolution('1101111')\nsolution('1111011')\nsolution('00100101')\nsolution('111101')\nsolution('11110101')\nsolution('111111')\nsolution('00010001')\nsolution('0000')\nsolution('00001')\nsolution('100')\nsolution('00111')\nsolution('0010001')\nsolution('111111111')\nsolution
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            cost += k\n        else:\n            cost += i\n    return str(cost)\n\n\n\nn,k = map(int,input().split())\ns = input()\n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.split()[1]\n    cost = 0\n    for i, v in enumerate(s):\n        if v == '1':\n            cost += i + k\n    return str(cost)"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = [int(x) for x in stdin.split()]\n    s = stdin.replace('1', '0').replace('0', '1')\n    cost = 0\n    for i in range(n):\n        cost += i * k if s[i] == '1' else 0\n    return str(cost)"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split(' '))\n    s = stdin.strip()\n    min_cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            min_cost += i + k - 1\n    return min_cost\n\nprint(solution(input()))\n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = stdin.strip()\n\n    cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            cost += min(k, i-k)\n    return str(cost)"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip('\\n')\n    cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            cost += i\n            for j in range(max(1, i - k), min(n, i + k) + 1):\n                cost += j\n    return cost\n"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if s == t:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if s == t:\n        return 'Yes'\n    for i in range(len(s)):\n        if s.count(s[i]) > t.count(s[i]):\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    t = stdin.splitlines()[1]\n    return \"Yes\" if s == t[::-1] else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    return \"Yes\" if s == t else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split('\\n')\n    return \"Yes\" if S == T else \"No\"\n\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return 'Yes' if s == t[::-1] else 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return 'Yes' if s == t[::-1] else 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    T = stdin.strip()\n    # convert S to a list of chars\n    S_chars = list(S)\n    # convert T to a list of chars\n    T_chars = list(T)\n    # check if S and T are equal\n    if S == T:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin == stdin[::-1] else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return 'Yes' if a == b else 'No'\n\nassert(solution('') == 'Yes')\nassert(solution('z') == 'Yes')\nassert(solution('zw') == 'Yes')\nassert(solution('z ') == 'Yes')\nassert(solution('zx') == 'No')\nassert(solution('zx') == 'No')\nassert(solution('zzz') == 'Yes')\nassert(solution('zzzw') == 'No')\nassert(solution('zzz ') == 'No')\nassert(solution('zzzz') == 'Yes')\nassert(solution('zzzzw') == 'No')\nassert(solution('zzzz ') == 'No')\nassert(solution('a') == 'Yes')\nassert(solution('aa') == 'Yes')\nassert(solution('aaaa') == 'Yes')\nassert(solution('aab') == 'No')\nassert(solution('aaz') == 'Yes')\nassert(solution('aazw') == 'No')\nassert(solution('aaz ') == 'No')\nassert(solution('aaaaa') == 'Yes')\nassert(solution('aaaaaw') == 'Yes')\nassert(solution('aaaaaz') == 'Yes')\nassert(solution('aaazw') == 'Yes')\nassert(solution('aaaz ') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aaz ') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aaz ') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aaz ') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw') == 'No')\nassert(solution('aazw')"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(\n        bfs(\n            stdin,\n            lambda a, b: a[0] <= b[0],\n            lambda a, b: a[0] < b[0],\n            lambda a, b: a[1] <= b[1],\n            lambda a, b: a[1] < b[1],\n        )\n    )\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    book_count, algorithm_count = [int(x) for x in stdin.split()]\n    price_list = [int(x) for x in stdin.split()]\n    price_set = set(price_list)\n    algorithm_lookup = defaultdict(int)\n    for price in price_list:\n        for algorithm in range(1, algorithm_count+1):\n            algorithm_lookup[algorithm] += price\n    algorithm_max = max(algorithm_lookup.values())\n    diff_set = set([x for x in algorithm_lookup.values() if x!= algorithm_max])\n    if len(diff_set) > 1:\n        return 'impossible'\n    if len(diff_set) == 0:\n        return '0'\n    return str(algorithm_max - min(diff_set))"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    books = [map(int, stdin.split()) for _ in range(N)]\n\n    matrix = [[0] * (M + 1) for _ in range(N + 1)]\n    for book in books:\n        for i in range(M + 1):\n            matrix[book[0]][i] += book[2]\n\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            matrix[i][j] = max(matrix[i - 1][j], matrix[i][j - 1]) + matrix[i][j]\n    for _ in range(Q):\n        l, r = map(int, stdin.split())\n        if matrix[r][l] - matrix[r][l - 1] > 0:\n            return 'Yes'\n    return 'No'\n\nimport sys\nfrom io import StringIO\n\nT = int(sys.stdin.readline())\nfor i in range(T):\n    N, M, Q = map(int, sys.stdin.readline().split())\n    books = [map(int, sys.stdin.readline().split()) for _ in range(N)]\n\n    matrix = [[0] * (M + 1) for _ in range(N + 1)]\n    for book in books:\n        for i in range(M + 1):\n            matrix[book[0]][i] += book[2]\n\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            matrix[i][j] = max(matrix[i - 1][j], matrix[i][j - 1]) + matrix[i][j]\n    for _ in range(Q):\n        l, r = map(int, sys.stdin.readline().split())\n        if matrix[r][l] - matrix[r][l - 1] > 0:\n            print('Yes')\n        else:\n            print('No')\n"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(minimum_cost(int(stdin)))\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    P = [0]*N\n\n    for i in range(N):\n        for j in range(1, M+1):\n            P[i] += max(0, books[i] - j)\n\n    return \"yes\" if sum(P) >= sum(books)//2 else \"no\"\n\nimport sys\nfrom io import StringIO\n\nstdin = sys.stdin.read()\nsys.stdin = StringIO(stdin)\n\nT = int(input())\nfor _ in range(T):\n    print(solution(input()))\n\nsys.stdin = sys.__stdin__"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == \"YES\" else \"NO\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # stdin: number of books, books list, algorithm list\n    books, algorithms, minimum = [], [], 0\n\n    # lines = stdin.split('\\n')\n    # books = int(lines[0])\n    # algorithms = int(lines[1])\n    # lines = lines[2:]\n    # for line in lines:\n    #     books, algorithms, minimum = [], [], 0\n    #     for x in line.split():\n    #         books, algorithms, minimum = [int(x)] + books, algorithms + [int(x)], 0\n    #         for x in algorithms:\n    #             minimum = max(minimum, x)\n    #     print(minimum)\n\nsolution(stdin)\n"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    c, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n\n    ans = 0\n    for i in range(m):\n        ans += a[i] * (c - a[i])\n    return ans\n\nassert(solution('') == 0)\nassert(solution('1 1') == 0)\nassert(solution('1 2') == 1)\nassert(solution('1 2 3') == 2)\nassert(solution('1 2 3 4') == 4)\nassert(solution('1 2 3 4 5') == 6)\nassert(solution('1 2 3 4 5 6') == 6)\nassert(solution('1 2 3 4 5 6 7') == 7)\nassert(solution('1 2 3 4 5 6 7 8') == 8)\nassert(solution('1 2 3 4 5 6 7 8 9') == 9)\nassert(solution('1 2 3 4 5 6 7 8 9 10') == 10)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11') == 11)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12') == 12)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13') == 13)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14') == 14)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15') == 15)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16') == 16)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17') == 17)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18') == 18)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49') == 19)\nassert(solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols, M, N, K = map(int, stdin.split())\n    ans = 0\n    dp = [[float('inf')] * (cols + 1) for _ in range(rows + 1)]\n    dp[0][0] = 0\n    for _ in range(K):\n        A, B, C = map(int, stdin.split())\n        ans += min(A, max(dp[A - 1][:B])) + C\n        for i in range(A - 1, -1, -1):\n            for j in range(B, cols + 1):\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - B] + C)\n    return str(ans)\n\n\nprint(solution(stdin.read()))\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    score, bonus = map(int, stdin.split())\n    D, G = map(int, stdin.split())\n    perfect = D * bonus\n    perfects = D // bonus\n    part = score // D\n    part_bonus = 0\n    if part > 0:\n        part_bonus = part * bonus\n        if part_bonus == perfect:\n            perfects -= 1\n    return str(perfects + part_bonus)"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    D, G = [int(i) for i in stdin[0].split(' ')]\n    problems = [int(i) for i in stdin[1].split(' ')]\n    solutions = [D-i for i in problems]\n    solutions += [i for i in problems if i == 100]\n    solutions += [i for i in problems if i == 200]\n    solutions += [i for i in problems if i == 300]\n    solutions += [i for i in problems if i == 400]\n    solutions += [i for i in problems if i == 500]\n    solutions += [i for i in problems if i == 600]\n    solutions += [i for i in problems if i == 700]\n    solutions += [i for i in problems if i == 800]\n    solutions += [i for i in problems if i == 900]\n    solutions += [i for i in problems if i == 1000]\n    print(sum(solutions))\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    base, bonus = [int(x) for x in stdin.split()]\n    p, c = [int(x) for x in stdin.split()]\n    diff = list(range(1, p+1))\n    total = sum(c*d for d in diff)\n    count = 0\n    while base < total:\n        base += 100*bonus\n        bonus += 1\n        total += p*bonus\n        count += 1\n    return count\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, G = [int(x) for x in stdin.split()]\n    return str(int(G / 100) - D + 1)\n\nprint(solution(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_data(lines: list) -> int:\n        data = [int(i) for i in lines[1].split()]\n        return data[0], data[1]\n\n    n, g = get_data(lines = [line.strip() for line in stdin.split('\\n')])\n    p, c = get_data(lines = [line.strip() for line in stdin.split('\\n')])\n    total = 0\n    for i in range(1, n + 1):\n        if g - (p * i) >= 0:\n            total += 1\n            g -= (p * i)\n    return str(total)\n\nprint(solution(stdin = sys.stdin))"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    points = {i:100*i for i in range(1, n+1)}\n    bonuses = {i:0 for i in range(1, n+1)}\n    for i in range(n):\n        l, r = [int(i) for i in stdin.split()]\n        points[i+1] = (l + r) // 2\n        bonuses[i+1] = max(0, l - r)\n    score = sum(points.values()) + sum(bonuses.values())\n    best = min(n, k-bonuses[n])\n    return str(best)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, G = [int(x) for x in stdin.split()]\n    solution = [0] * D\n    for d in range(D):\n        solution[d] = D - d\n    return str(sum(solution))\n\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, g = map(int, stdin.split())\n    c = []\n    for _ in range(d):\n        c.append(int(stdin.readline()))\n    c.sort()\n    base = c[-1] * d\n    b, t = 0, 0\n    for i in range(len(c) - 1, -1, -1):\n        if c[i] == 100:\n            b += d\n            t += 1\n        else:\n            if g >= (100 + c[i] * t):\n                b += (100 + c[i] * t)\n                t += 1\n            else:\n                b += (g - b)\n                break\n    return str(b - base)"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"The user is in trouble.\"\n    total, G, d = [int(x) for x in stdin.split()]\n    \n    perfects = [int(total / 100 * x) for x in range(1, d + 1)]\n    print(perfects)"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    candies = list(map(int, stdin.readline().split()))\n    total_candies = 0\n    sum_of_candies = 0\n    for index, weight in enumerate(candies):\n        sum_of_candies += weight\n        total_candies += weight\n        if index % 2 == 0 and total_candies > sum_of_candies:\n            sum_of_candies = total_candies\n        if index % 2 == 1 and total_candies < sum_of_candies:\n            sum_of_candies = total_candies\n    return str(sum_of_candies)"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_candy = int(stdin.readline().strip())\n    candy_weights = [int(line.strip()) for line in stdin.readlines()]\n    even_weights = []\n    odd_weights = []\n\n    for i in range(num_candy):\n        if i % 2 == 0:\n            even_weights.append(candy_weights[i])\n        else:\n            odd_weights.append(candy_weights[i])\n\n    if sum(even_weights) == sum(odd_weights):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = tuple(int(x) for x in stdin.readline().split())\n\n    candies = [0] * (n + 1)\n    for i in range(1, n + 1):\n        candies[i] = candies[i - 1] + weights[i - 1]\n\n    ans = 0\n    for i in range(1, n + 1):\n        ans += candies[n - i] - candies[i - 1]\n\n    return str(ans)"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    n = int(n)\n    if n < 1 or n > 2 * 10 ** 5:\n        raise Exception('Invalid input')\n\n    w = stdin.readline().split()\n    w = [int(x) for x in w]\n\n    if sum(w) % 2!= 0:\n        raise Exception('Invalid input')\n\n    res = 0\n    for i in range(n - 1):\n        if (sum(w[:i + 1]) + w[i + 1]) % 2 == 0:\n            res += 1\n\n    return res\n\n\nassert(solution('''7''') == 2)\nassert(solution('''8''') == 2)\nassert(solution('''9''') == 3)\nassert(solution('''8 5 4 5 5 5 6''') == 2)\nassert(solution('''2 3 4 2 2 3 2 2 4''') == 3)\nassert(solution('''1 2 4 2 2 3 2 2 4''') == 1)\nassert(solution('''5''') == 0)\nassert(solution('''1 1''') == 1)\nassert(solution('''10''') == 1)\nassert(solution('''100000''') == 1)\nassert(solution('''3 10 4 5 6 7 8 9''') == 2)\nassert(solution('''3 2 3 4 2 2 3 2 2 4''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2 3 2''') == 0)\nassert(solution('''3 2 3 4 2 2"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    weights = stdin.strip().split()\n    weights = [int(w) for w in weights]\n    good_candy = [0] * (n - 1)\n    weights.sort(reverse=True)\n    for i in range(0, len(weights) - 1, 2):\n        good_candy[i // 2] = weights[i] + weights[i + 1]\n    return str(sum(good_candy))\n    \n    \n"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert (solution('''7''')) == '2'\nassert (solution('''8''')) == '2'\nassert (solution('''9''')) == '3'\nassert (solution('''10''')) == '5'\nassert (solution('''11''')) == '6'\nassert (solution('''12''')) == '8'\nassert (solution('''13''')) == '10'\nassert (solution('''14''')) == '12'\nassert (solution('''15''')) == '14'\nassert (solution('''16''')) == '16'\nassert (solution('''17''')) == '18'\nassert (solution('''18''')) == '19'\nassert (solution('''19''')) == '20'\nassert (solution('''20''')) == '21'\nassert (solution('''21''')) == '22'\nassert (solution('''22''')) == '23'\nassert (solution('''23''')) == '24'\nassert (solution('''24''')) == '25'\nassert (solution('''25''')) == '26'\nassert (solution('''26''')) == '27'\nassert (solution('''27''')) == '28'\nassert (solution('''28''')) == '29'\nassert (solution('''29''')) == '30'\nassert (solution('''30''')) == '31'\nassert (solution('''31''')) == '32'\nassert (solution('''32''')) == '33'\nassert (solution('''33''')) == '34'\nassert (solution('''34''')) == '35'\nassert (solution('''35''')) == '36'\nassert (solution('''36''')) == '37'\nassert (solution('''37''')) == '38'\nassert (solution('''38''')) == '39'\nassert (solution('''39''')) == '40'\nassert (solution('''40''')) == '41'\nassert (solution('''41''')) == '42'\nassert (solution('''42''')) == '43'\nassert (solution('''43''')) == '44'\nassert (solution('''44''')) == '45'\nassert (solution('''45''')) == '46'\nassert (solution('''46''')) == '47'\nassert (solution('''47''')) == '48'\nassert (solution('''48''')) == '49'\nassert (solution('''49''')) == '50'\nassert (solution('''50''')) == '51'\nassert (solution('''51''')) == '52'\nassert (solution('''52''')) == '53'\nassert (solution('''53''')) == '54'\nassert (solution('''54''')) == '55'\nassert (solution('''55''')) == '56'\nassert (solution('''56''')) == '57'\nassert (solution('''57''')) == '58'\nassert (solution('''58''')) == '59'\nassert (solution('''59''')) == '60'\nassert (solution('''60''')) == '61'\nassert (solution('''61''')) == '62'\nassert (solution('''62''')) == '63'\nassert (solution('''63''')) == '64'\nassert (solution('''64''')) == '65'\nassert (solution('''65''')) == '66'\nassert (solution('''66''')) == '67'\nassert (solution('''67''')) == '68'\nassert (solution('''68''')) == '69'\nassert (solution('''69''')) == '70'\nassert (solution('''70''')) == '71'\nassert (solution"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_candies = int(stdin.readline().strip())\n    candies_weight = list(map(int, stdin.readline().strip().split()))\n    result = 0\n    for i in range(len(candies_weight) - 1):\n        if candies_weight[i]!= candies_weight[i + 1]:\n            if candies_weight[i] % 2!= candies_weight[i + 1] % 2:\n                result += 1\n    return str(result)\n\nassert(solution(\"7\") == \"2\")\nassert(solution(\"8\") == \"2\")\nassert(solution(\"9\") == \"3\")\nassert(solution(\"10\") == \"0\")\nassert(solution(\"1\") == \"0\")\nassert(solution(\"12\") == \"0\")\nassert(solution(\"14\") == \"2\")\nassert(solution(\"15\") == \"0\")\nassert(solution(\"16\") == \"0\")\nassert(solution(\"17\") == \"1\")\nassert(solution(\"18\") == \"1\")\nassert(solution(\"19\") == \"2\")\nassert(solution(\"20\") == \"1\")\nassert(solution(\"21\") == \"0\")\nassert(solution(\"22\") == \"0\")\nassert(solution(\"23\") == \"0\")\nassert(solution(\"24\") == \"0\")\nassert(solution(\"25\") == \"0\")\nassert(solution(\"26\") == \"0\")\nassert(solution(\"27\") == \"0\")\nassert(solution(\"28\") == \"0\")\nassert(solution(\"29\") == \"0\")\nassert(solution(\"30\") == \"0\")\nassert(solution(\"31\") == \"0\")\nassert(solution(\"32\") == \"0\")\nassert(solution(\"33\") == \"0\")\nassert(solution(\"34\") == \"0\")\nassert(solution(\"35\") == \"0\")\nassert(solution(\"36\") == \"0\")\nassert(solution(\"37\") == \"0\")\nassert(solution(\"38\") == \"0\")\nassert(solution(\"39\") == \"0\")\nassert(solution(\"40\") == \"0\")\nassert(solution(\"41\") == \"0\")\nassert(solution(\"42\") == \"0\")\nassert(solution(\"43\") == \"0\")\nassert(solution(\"44\") == \"0\")\nassert(solution(\"45\") == \"0\")\nassert(solution(\"46\") == \"0\")\nassert(solution(\"47\") == \"0\")\nassert(solution(\"48\") == \"0\")\nassert(solution(\"49\") == \"0\")\nassert(solution(\"50\") == \"0\")\nassert(solution(\"51\") == \"0\")\nassert(solution(\"52\") == \"0\")\nassert(solution(\"53\") == \"0\")\nassert(solution(\"54\") == \"0\")\nassert(solution(\"55\") == \"0\")\nassert(solution(\"56\") == \"0\")\nassert(solution(\"57\") == \"0\")\nassert(solution(\"58\") == \"0\")\nassert(solution(\"59\") == \"0\")\nassert(solution(\"60\") == \"0\")\nassert(solution(\"61\") == \"0\")\nassert(solution(\"62\") == \"0\")\nassert(solution(\"63\") == \"0\")\nassert(solution(\"64\") == \"0\")\nassert(solution(\"65\") == \"0\")\nassert(solution(\"66\") == \"0\")\nassert(solution(\"67\") == \"0\")\nassert(solution(\"68\") == \"0\")\nassert(solution(\"69\") == \"0\")\nassert(solution(\"70\") == \"0\")\nassert(solution(\"71\") == \"0\")\nassert(solution(\"72\") == \"0\")\nassert(solution(\"73\") == \"0\")\nassert(solution(\"74\") == \"0\")\nassert(solution(\"75\") == \"0\")\nassert(solution(\"76\") == \"0\")\nassert(solution(\"77\") == \"0\")\nassert(solution(\"78\") == \"0\")\nassert(solution(\"79\") == \"0\")\nassert(solution(\"80\") == \"0\")\nassert(solution(\"81\") == \"0\")\nassert(solution(\"82\") == \"0\")\nassert(solution(\"83\") == \"0\")"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.reverse()\n    sum = 0\n    count = 0\n    for i in range(n-1):\n        sum += a[i]\n        if sum == sum % 2:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    good = 0\n    for i in range(n-1):\n        if a[i] > a[i+1]:\n            good += a[i] - a[i+1] + 1\n    return str(good)\n\nassert(solution('''7\n5 5 4 5 5 5 6''') == '2')\nassert(solution('''8\n4 8 8 7 8 4 4 5''') == '2')\nassert(solution('''9\n2 3 4 2 2 3 2 2 4''') == '3')\n'''\n"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    stdin = stdin.split('\\n')\n    n, k, x = int(stdin[0].split()[0]), int(stdin[0].split()[1]), int(stdin[0].split()[2])\n    lst = list(map(int, stdin[1].split()))\n\n    # [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    # [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    # [2, 1, 2, 1, 2, 1, 2, 1, 2, 1]\n    # [2, 3, 2, 3, 2, 3, 2, 3, 2, 3]\n    # [3, 1, 1, 3, 1, 1, 1, 1, 1, 1]\n    # [3, 1, 2, 1, 2, 1, 2, 1, 2, 1]\n    # [3, 1, 3, 2, 1, 1, 1, 1, 1, 1]\n    # [3, 1, 2, 3, 1, 1, 1, 2, 1, 1]\n    # [4, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    # [5, 1, 2, 1, 1, 1, 1, 1, 1, 1]\n    # [6, 1, 3, 1, 1, 1, 1, 1, 1, 1]\n    # [7, 1, 2, 1, 2, 1, 2, 1, 2, 1]\n    # [8, 1, 3, 2, 1, 1, 1, 1, 1, 1]\n    # [9, 1, 2, 3, 1, 1, 1, 1, 1, 1]\n    # [10, 1, 3, 3, 1, 1, 1, 1, 1, 1]\n    # [11, 1, 2, 3, 2, 1, 2, 1, 2, 1]\n    # [12, 1, 3, 2, 3, 1, 2, 1, 2, 1]\n    # [13, 1, 2, 3, 3, 1, 2, 1, 2, 1]\n    # [14, 1, 2, 3, 3, 2, 2, 1, 2, 1]\n    # [15, 1, 2, 3, 3, 3, 2, 1, 2, 1]\n    # [16, 1, 3, 3, 3, 3, 2, 1, 2, 1]\n    # [17, 1, 2, 3, 3, 3, 3, 1, 2, 1]\n    # [18, 1, 3, 3, 3, 3, 3, 1, 2, 1]\n    # [19, 1, 2, 3, 3, 3, 3, 2, 1, 1]\n    # [20, 1, 3, 3, 3, 3, 3, 2, 1, 1]\n    # [21, 1, 2, 3, 3, 3, 3, 3, 1, 1]\n    # [22, 1, 3, 3, 3, 3, 3, 3, 2, 1]\n    # [23, 1, 2, 3, 3, 3, 3, 3, 3, 1]\n    # [24, 1, 3, 3, 3, 3, 3, 3, 3, 2]\n    # [25, 1, 2, 3, 3, 3, 3, 3, 3, 3]\n    # [26, 1, 3, 3, 3, 3, 3, 3, 3, 3]\n\n    # 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline())\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    def check_valid(a: list) -> bool:\n        _sum = 0\n        for i in range(len(a) - k + 1):\n            _sum += max(a[i:i + k])\n        return _sum >= x\n\n    left = 0\n    right = sum(a)\n\n    while left < right:\n        mid = (left + right) // 2\n        if check_valid(a[:mid]):\n            left = mid + 1\n        else:\n            right = mid\n\n    if check_valid(a[:left]):\n        return left\n    else:\n        return -1\n\n\nassert (solution(stdin) == -1) == (solution(stdin) == 18)\nprint(solution(stdin))\n"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n - k + 1):\n        ans = max(ans, max(arr[i:i + k]) - min(arr[i:i + k]))\n    if ans < x:\n        return -1\n    return ans"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    # a = list(map(int, stdin.split()))\n    # p = [0]\n    # for i in range(1, n + 1):\n    #     p.append(p[i - 1] + a[i - 1])\n    # if x == 1:\n    #     if k == 1:\n    #         return max(p)\n    #     return -1\n    # elif x == 2:\n    #     if k == 1:\n    #         return max(p[n - 1] + p[n - 2], p[n - 1] + p[n - 3])\n    #     return -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_length_beauty_value(picture: str) -> int:\n        beauty_value = 0\n        for i in range(1, len(picture)):\n            beauty_value += abs(int(picture[i]) - int(picture[i - 1]))\n        return beauty_value\n\n    n, k, x = map(int, stdin.split())\n    beauty_values = list(map(int, stdin.split()))\n    beauty_values.sort(reverse=True)\n    min_length_beauty = get_length_beauty_value(beauty_values)\n    if min_length_beauty < k:\n        return -1\n\n    result = 0\n    for picture in beauty_values:\n        result += picture\n        if result >= x:\n            return result\n\n    return -1\n\n\nassert str(solution(input_stdin)) == input_test_case_result\ninput_test_case_result = str(solution(input_stdin))\ninput_stdin = None\n"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    return \" -1\" if n < k or m < k else \"\\n\".join(map(str, find_beauty(a, m, k)))\n\ndef"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello World'\n\n\nassert(solution('''5 2 3\n5 1 3 10 1\n''') == '18')\n"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    beauty = [0] * n\n    for i in range(n):\n        beauty[i] = a[i]\n\n    memo = [None] * k\n\n    for i in range(k):\n        memo[i] = {}\n\n    return max_beauty(a, beauty, k, x, memo)\n\ndef"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if k * n < x:\n        return '-1'\n\n    l = n - k + 1\n    max_sum = 0\n\n    for i in range(l - x + 1):\n        curr_sum = 0\n\n        for j in range(i, i + x):\n            curr_sum += a[j]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return str(max_sum)\n"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k, x = map(int, lines[0].split())\n    a = list(map(int, lines[1].split()))\n\n    beauty = [0 for _ in range(n)]\n    for i in range(n):\n        beauty[i] = a[i]\n    beauty.sort()\n    # print(beauty)\n\n    if n < k:\n        return \"-1\"\n\n    if k == 1:\n        return str(sum(a))\n\n    mem = [[0 for _ in range(n)] for _ in range(k + 1)]\n    mem[0] = a\n\n    for i in range(1, k + 1):\n        for j in range(n):\n            mem[i][j] = a[j]\n\n    # print(mem)\n\n    for i in range(1, k + 1):\n        for j in range(n - i + 1):\n            for k in range(i):\n                mem[i][j] = max(mem[i][j], max(mem[k][j], mem[i - k][j + k]))\n\n    # print(mem)\n\n    res = sum(a)\n    for i in range(1, n - k + 1):\n        res = max(res, sum(mem[k][i:i + x]))\n\n    return str(res)\n\nassert solution('''5 2 3\n5 1 3 10 1\n''') == '18'\nassert solution('''6 1 5\n10 30 30 70 10 10\n''') == '-1'\nassert solution('''4 3 1\n1 100 1 1\n''') == '100'\nassert solution('''8 1 4\n1 2 3 4 5 6 7 8\n''') == '45'\nassert solution('''12 1 7\n1 2 3 4 5 6 7 8 9 10 11 12\n''') == '45'\n"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    doughnut_price = 7\n    cake_price = 4\n    n = int(stdin)\n    if n % (doughnut_price + cake_price) == 0:\n        return \"Yes\"\n    return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    doughnut_price = 7\n    cake_price = 4\n\n    N = int(stdin.readline())\n\n    if N % cake_price == 0:\n        doughnut_count = N // cake_price\n        cake_count = 0\n    elif N % doughnut_price == 0:\n        doughnut_count = N // doughnut_price\n        cake_count = 0\n    else:\n        doughnut_count = N // doughnut_price\n        cake_count = N % doughnut_price\n\n    return 'Yes' if cake_count > 0 and doughnut_count > 0 else 'No'\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    doughnut_qty: int = int(stdin.strip())\n    cake_qty: int = int(stdin.strip())\n    if doughnut_qty > cake_qty:\n        return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return whether or not the current budget of N dollars is enough to buy at least one cake and one doughnut.\n    '''\n    N = int(stdin.readline())\n    result = 'Yes'\n    if N % 4!= 0:\n        result = 'No'\n    return result\n\nprint(solution('''5'''))\n"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Read in an integer N and return a string indicating whether or not you can buy exactly N dollars.\n\n    >>> solution('')\n    'No'\n    >>> solution('1')\n    'Yes'\n    >>> solution('10')\n    'Yes'\n    >>> solution('0')\n    'Yes'\n    >>> solution('3')\n    'No'\n    >>> solution('11')\n    'Yes'\n    >>> solution('12')\n    'No'\n    >>> solution('123')\n    'No'\n    \"\"\"\n    n = int(stdin)\n    if n < 0:\n        return 'No'\n    if n == 0:\n        return 'Yes'\n    if n == 1:\n        return 'No'\n    if n == 2:\n        return 'Yes'\n    if n == 3:\n        return 'No'\n    if n == 4:\n        return 'Yes'\n    if n == 5:\n        return 'No'\n    if n == 6:\n        return 'Yes'\n    if n == 7:\n        return 'Yes'\n    if n == 8:\n        return 'Yes'\n    if n == 9:\n        return 'No'\n    if n == 10:\n        return 'Yes'\n    if n == 11:\n        return 'Yes'\n    if n == 12:\n        return 'No'\n    if n == 13:\n        return 'No'\n    if n == 14:\n        return 'No'\n    if n == 15:\n        return 'No'\n    if n == 16:\n        return 'No'\n    if n == 17:\n        return 'No'\n    if n == 18:\n        return 'Yes'\n    if n == 19:\n        return 'Yes'\n    if n == 20:\n        return 'Yes'\n    if n == 21:\n        return 'Yes'\n    if n == 22:\n        return 'Yes'\n    if n == 23:\n        return 'Yes'\n    if n == 24:\n        return 'Yes'\n    if n == 25:\n        return 'Yes'\n    if n == 26:\n        return 'Yes'\n    if n == 27:\n        return 'Yes'\n    if n == 28:\n        return 'Yes'\n    if n == 29:\n        return 'Yes'\n    if n == 30:\n        return 'Yes'\n    if n == 31:\n        return 'Yes'\n    if n == 32:\n        return 'Yes'\n    if n == 33:\n        return 'Yes'\n    if n == 34:\n        return 'Yes'\n    if n == 35:\n        return 'Yes'\n    if n == 36:\n        return 'Yes'\n    if n == 37:\n        return 'Yes'\n    if n == 38:\n        return 'Yes'\n    if n == 39:\n        return 'Yes'\n    if n == 40:\n        return 'Yes'\n    if n == 41:\n        return 'Yes'\n    if n == 42:\n        return 'Yes'\n    if n == 43:\n        return 'Yes'\n    if n == 44:\n        return 'Yes'\n    if n == 45:\n        return 'Yes'\n    if n == 46:\n        return 'Yes'\n    if n == 47:\n        return 'Yes'\n    if n == 48:\n        return 'Yes'\n    if n == 49:\n        return 'Yes'\n    if n == 50:\n        return 'Yes'\n    if n == 51:\n        return 'Yes'\n    if n == 52:\n        return 'Yes'\n    if n == 53:\n        return 'Yes'\n    if n == 54:\n        return 'Yes'\n    if n == 55:\n        return 'Yes'\n    if n == 56:\n        return 'Yes'\n    if n == 57:\n        return 'Yes'\n    if n == 58:\n        return 'Yes'\n    if n == 59:\n        return 'Yes'\n    if n == 60:\n        return 'Yes'\n    if n == 61:\n        return 'Yes'\n    if n == 62:\n        return 'Yes'\n    if n == 63:\n        return 'Yes'\n    if n == 64:\n        return 'Yes'\n    if n == 65:\n        return 'Yes'\n    if n == 66:\n        return 'Yes'\n    if n == 67:\n        return 'Yes'\n    if n == 68:\n        return 'Yes'\n    if n == 69:\n        return 'Yes'\n    if n == 70:\n        return 'Yes'\n    if n == 71:\n        return 'Yes'\n    if n == 72:\n        return 'Yes'\n    if n == 73:\n        return 'Yes'\n    if n == 74:\n        return 'Yes'\n    if n == 75:\n        return 'Yes'\n    if n == 76:\n        return 'Yes'\n    if n == 77:\n        return 'Yes'\n    if n == 78:\n        return 'Yes'\n    if n == 79:\n        return 'Yes'\n    if n == 80:\n        return 'Yes'\n    if n == 81:\n        return 'Yes'\n    if n == 82:\n        return 'Yes'\n    if n == 83:\n        return 'Yes'\n    if n == 84:\n        return 'Yes'\n    if n == 85:\n        return 'Yes'\n    if n == 86:\n        return 'Yes'\n    if n == 87:\n        return 'Yes'\n    if n == 88:\n        return 'Yes'\n    if n == 89:\n        return 'Yes'\n    if n == 90:\n        return 'Yes'\n    if n == 91:\n        return 'Yes'\n    if n == 92:\n        return 'Yes'\n    if n == 93:\n        return 'Yes'\n    if n == 94:\n        return 'Yes'\n    if n == 95:\n        return 'Yes'\n    if n == 96:\n        return 'Yes'\n    if n == 97:\n        return 'Yes'\n    if n == 98:\n        return 'Yes'\n    if n == 99:\n        return 'Yes'\n    if n == 100:\n        return 'Yes'\n    if n == 101:\n        return 'No'\n    if n == 102:\n        return 'Yes'\n    if n == 103:\n        return 'Yes'\n    if n == 104:\n        return 'Yes'\n    if n == 105:\n        return 'Yes'\n    if n == 106:\n        return 'Yes'\n    if n == 107:\n        return 'Yes'\n    if n == 108:\n        return 'Yes'\n    if n == 109:\n        return 'Yes'\n    if n == 110:\n        return 'Yes'\n    if n == 111:\n        return 'Yes'\n    if n == 112:\n        return 'Yes'\n    if n == 113:\n        return 'Yes'\n    if n == 114:\n        return 'Yes'\n    if n == 115:\n        return 'Yes'\n    if n == 116:\n        return 'Yes'\n    if n == 117:\n        return 'Yes'\n    if n == 118:\n        return 'Yes'\n    if n == 119:\n        return 'Yes'\n    if n == 120:\n        return 'Yes'\n    if n == 121:\n        return 'Yes'\n    if n == 122:\n        return 'Yes'\n    if n == 123:\n        return 'Yes'\n    if n == 124:\n        return 'Yes'\n    if n == 125:\n        return 'Yes'\n    if n == 126:\n        return 'Yes'\n    if n == 127:\n        return 'Yes'\n    if n == 128:\n        return 'Yes'\n    if n == 129:\n        return 'Yes'\n    if n == 130:\n        return 'Yes'\n    if n == 131:\n        "
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You can buy cakes and doughnuts.\n    The budget is the number of dolls you can buy.\n\n    This is a binomial coefficient, and it's pretty hard to solve this.\n\n    But this is a very simple problem.\n\n    So it's easy to solve.\n    \"\"\"\n    num_dolls, cost = map(int, stdin.split())\n    return \"Yes\" if num_dolls % 2 == 0 and cost % 2 == 0 else \"No\"\n\nimport sys\n"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    doughnuts = int(stdin)\n    cakes = doughnuts\n    print('Yes') if doughnuts * 4 + cakes * 7 == int(stdin) else print('No')"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    coordinates = []\n    heights = []\n    for _ in range(N):\n        x, y, h = map(int, stdin.readline().strip().split())\n        coordinates.append((x, y))\n        heights.append(h)\n    \n    \n    C_X = -1\n    C_Y = -1\n    H = 0\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            dis = abs(coordinates[i][0] - coordinates[j][0]) + abs(coordinates[i][1] - coordinates[j][1])\n            if dis > H:\n                continue\n            if H < dis:\n                C_X = (coordinates[i][0] + coordinates[j][0]) / 2\n                C_Y = (coordinates[i][1] + coordinates[j][1]) / 2\n                H = dis\n    print(C_X, C_Y, H)"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N = int(stdin.readline())\n    coordinates = []\n    for _ in range(N):\n        x, y, h = map(int, stdin.readline().split())\n        coordinates.append([x, y, h])\n    \n    coordinates.sort(key = lambda x: (x[1], x[2]))\n    max_h = coordinates[0][2]\n    for i in range(1, N):\n        if coordinates[i][2] > max_h:\n            max_h = coordinates[i][2]\n    \n    coordinates.sort(key = lambda x: (x[0], x[2]))\n    max_x = coordinates[0][0]\n    for i in range(1, N):\n        if coordinates[i][0] > max_x:\n            max_x = coordinates[i][0]\n    \n    coordinates.sort(key = lambda x: (x[1], x[0]))\n    max_y = coordinates[0][1]\n    for i in range(1, N):\n        if coordinates[i][1] > max_y:\n            max_y = coordinates[i][1]\n    \n    max_h = str(max_h)\n    max_x = str(max_x)\n    max_y = str(max_y)\n    \n    return max_x + \" \" + max_y + \" \" + max_h"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    data = data[1:-1]\n    data = [line.split() for line in data]\n    data = [[int(x) for x in line] for line in data]\n    N = data[0][0]\n    data = data[1:]\n    for i in range(N):\n        C_X = min(data[i][1], data[i][3])\n        C_Y = min(data[i][2], data[i][4])\n        H = max(data[i][5], data[i][7])\n        if C_X == min(data[i][1], data[i][3]) and C_Y == min(data[i][2], data[i][4]) and H == max(data[i][5], data[i][7]):\n            print(str(C_X) +'' + str(C_Y) +'' + str(H))"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    if N < 1 or N > 100:\n        raise ValueError(\"Number of coordinates must be between 1 and 100\")\n\n    points = []\n    for i in range(1, N+1):\n        x, y, h = map(int, lines[i].split())\n        if x < 0 or x > 100 or y < 0 or y > 100:\n            raise ValueError(\"Invalid values\")\n        if h < 0:\n            raise ValueError(\"Invalid values\")\n        points.append((x, y, h))\n\n    points.sort(key=lambda point: (point[2], point[0], point[1]))\n\n    x_prev, y_prev, h_prev = points[0]\n    x_new, y_new, h_new = points[0]\n    for point in points[1:]:\n        x, y, h = point\n        if h > h_new:\n            x_prev = x_new\n            y_prev = y_new\n            h_prev = h_new\n            x_new = x\n            y_new = y\n            h_new = h\n        elif h == h_prev and x == x_prev:\n            x_new = min(x_new, x)\n            y_new = min(y_new, y)\n        else:\n            x_prev = x\n            y_prev = y\n            h_prev = h\n    return f\"{x_new} {y_new} {h_new}\"\n\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from sys import stdin\n    from math import floor, sqrt\n\n    n = stdin.readline().rstrip()\n    n = int(n)\n\n    coordinates = []\n    for _ in range(n):\n        line = stdin.readline().rstrip().split()\n        x, y, h = int(line[0]), int(line[1]), int(line[2])\n        coordinates.append((x, y, h))\n\n    coordinates.sort(key=lambda x: x[0]+x[1])\n\n    # 1st: check for (x, y) = (0, 0)\n    if coordinates[0][0] == 0 and coordinates[0][1] == 0:\n        return \"0 0 {}\".format(coordinates[0][2])\n\n    # 2nd: check for (x, y) = (100, 100)\n    if coordinates[n-1][0] == 100 and coordinates[n-1][1] == 100:\n        return \"100 100 {}\".format(coordinates[n-1][2])\n\n    for i in range(n):\n        x, y, h = coordinates[i]\n        if x == y:\n            if h == 0:\n                return \"0 0 {}\".format(h)\n            else:\n                return \"100 100 {}\".format(h)\n\n    for i in range(n):\n        x, y, h = coordinates[i]\n        h_sum = 0\n        for j in range(i, n):\n            h_sum += coordinates[j][2]\n            if h_sum >= h:\n                return \"100 100 {}\".format(h)\n\n    for i in range(n):\n        x, y, h = coordinates[i]\n        if x == 100:\n            return \"100 100 {}\".format(h)\n\n    for i in range(n):\n        x, y, h = coordinates[i]\n        if y == 100:\n            return \"0 0 {}\".format(h)"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    N = int(lines[0])\n    points = [list(map(int, line.split())) for line in lines[1:]]\n    points.sort(key=lambda p: p[1])\n    \n    cx, cy, h = 0, 0, 0\n    for point in points:\n        delta_x = max(abs(point[0] - cx) - abs(point[1] - cy), 0)\n        delta_y = max(abs(point[1] - cy) - abs(point[0] - cx), 0)\n        cx, cy = point[0], point[1]\n        h = max(h - delta_x - delta_y, 0)\n    \n    return \"{} {} {}\".format(cx, cy, h)\n\nassert(solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n2 3"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Computes the center coordinates of a pyramid.\n    >>> solution('2\\n2 1 5\\n2 2 5\\n1 2 5\\n3 2 5\\n')\n    '2 2 6'\n    '''\n    return None"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each time he hugs a string, he can change one of its characters to any character of his choice.\n    \"\"\"\n    n = int(stdin.readline())\n    S = stdin.readline().strip()\n    palindrome = S\n    hug_count = 0\n    for i in range(0, n):\n        palindrome = ''.join(\n            [c if c!= S[i] else chr(ord('z') - (ord(c) - ord('a')) + 1) for c in palindrome])\n        if palindrome == S:\n            break\n        hug_count += 1\n    return hug_count"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return stdin\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    first_half, second_half = string[:len(string)//2], string[len(string)//2:]\n    if second_half == second_half[::-1]:\n        return 0\n    else:\n        hugs = 0\n        for i in range(len(first_half)):\n            if first_half[i]!= second_half[len(second_half) - 1 - i]:\n                first_half = first_half[:i] + first_half[i+1:]\n                hugs += 1\n        return hugs + 1\n"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n\nassert(solution(\"redcoder\") == \"1\")\nassert(solution(\"abacaba\") == \"0\")\nassert(solution(\"baba\") == \"3\")\nassert(solution(\"aba\") == \"2\")\nassert(solution(\"abc\") == \"3\")\nassert(solution(\"ab\") == \"2\")\nassert(solution(\"abcba\") == \"3\")\nassert(solution(\"ababab\") == \"2\")\nassert(solution(\"ababab\") == \"1\")\nassert(solution(\"ababa\") == \"1\")\nassert(solution(\"aaaa\") == \"2\")\nassert(solution(\"aaaaa\") == \"3\")\nassert(solution(\"aaaaaa\") == \"4\")\nassert(solution(\"abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    n = len(a)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            a = a[:i] + a[i].swapcase() + a[j:]\n            if a[i]!= a[j]:\n                ans += 1\n                break\n    return ans"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = {\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        6: 6,\n        7: 7,\n        8: 8,\n        9: 9\n    }\n    for k, v in digits.items():\n        if n % v == 0:\n            print(\"Yes\")\n            return\n    print(\"No\")"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"Yes\" if n % 9 == 0 or n % 2 == 0 else \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    if N < 1 or N > 100:\n        return \"No\"\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if N == i * j:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    if N == 1:\n        return \"Yes\"\n    if N == 2:\n        return \"Yes\"\n    if N % 2 == 1:\n        return \"No\"\n\n    solution = \"\"\n    x = N // 2\n    for i in range(1, x):\n        solution = str(i) + solution\n        if N // (i * 2)!= 0:\n            solution = str(N // (i * 2)) + solution\n    if N // (x * 2)!= 0:\n        solution = str(N // (x * 2)) + solution\n    return \"Yes\""
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    first = 1\n    last = 9\n    while first * last <= stdin:\n        if stdin % (first * last) == 0:\n            return 'Yes'\n        else:\n            first += 1\n    return 'No'"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == a:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 100:\n        if N % 2 == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        raise ValueError(\"N must be an integer between 1 and 100\")\n\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == stdin:\n                return 'Yes'\n    return 'No'"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    sticks = [int(s) for s in stdin.split('\\n')[1].split(' ')]\n    sticks.sort()\n    ways = 0\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                if (sticks[i] + sticks[j] > sticks[k] and\n                        sticks[i] + sticks[k] > sticks[j] and\n                        sticks[j] + sticks[k] > sticks[i]):\n                    ways += 1\n    return str(ways)"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    sticks = [int(x) for x in stdin.split()]\n    sticks.sort()\n    ways = 0\n    for i in range(len(sticks) - 2):\n        for j in range(i + 1, len(sticks) - 1):\n            for k in range(j + 1, len(sticks)):\n                if sticks[i] + sticks[j] > sticks[k] and sticks[i] + sticks[k] > sticks[j] and sticks[k] + sticks[j] > sticks[i]:\n                    ways += 1\n    return str(ways)"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    sticks, size = stdin.strip().split(\" \")\n    sticks = [int(i) for i in sticks.split(\" \")]\n    sticks.sort()\n    sticks.reverse()\n    sticks.append(0)\n    sticks.append(0)\n    count = 0\n    for i in range(2, len(sticks)):\n        if sticks[i] - sticks[i-1] > sticks[i-1] - sticks[i-2]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    sticks = [int(x) for x in stdin.split()]\n    return str(solve(sticks))\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_triangle(sticks: list) -> bool:\n        i, j, k = 0, 0, 0\n        while i < j < k < len(sticks):\n            if sticks[i]!= sticks[j]!= sticks[k]:\n                return True\n            else:\n                i += 1\n                j += 1\n                k += 1\n        return False\n\n    sticks = [int(x) for x in stdin.split()]\n    sticks = sorted(sticks)\n\n    count = 0\n    for i in range(len(sticks)):\n        for j in range(i + 1, len(sticks)):\n            for k in range(j + 1, len(sticks)):\n                if find_triangle(sticks[i: j + 1]) and find_triangle(sticks[j: k + 1]):\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    sticks: list[int] = [int(num) for num in stdin.strip().split()]\n    triples: list[tuple[int, int, int]] = get_triples(sticks)\n    return str(len(triples))\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    sticks = list(map(int, stdin.split()[1:]))\n    return countTriangles(sticks)\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    sticks = [int(x) for x in stdin.split()]\n    sticks.sort()\n    sticks.reverse()\n    n = len(sticks)\n    dp = [[[0]*(n+1) for _ in range(n+1)] for _ in range(n+1)]\n    dp[0][0][0] = 1\n    for i in range(1,n+1):\n        for j in range(i+1):\n            for k in range(j+1):\n                if j == i-1:\n                    dp[i][j][k] += dp[i-1][j][k]\n                if k == i-1:\n                    dp[i][j][k] += dp[i][j][k-1]\n                if j!= i-1 and k!= i-1:\n                    dp[i][j][k] += dp[i-1][j][k]\n                    dp[i][j][k] += dp[i-1][j-1][k]\n                    dp[i][j][k] += dp[i-1][j][k-1]\n                    dp[i][j][k] += dp[i][j-1][k]\n                    dp[i][j][k] += dp[i][j-1][k-1]\n                    dp[i][j][k] += dp[i-1][j-1][k-1]\n    return str(dp[n][n][n])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sticks = list(map(int, stdin.readline().split()))\n    sticks.sort()\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if sticks[i] + sticks[j] > sticks[k]:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '''\n    '''\n"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    for i in range(1, 10):\n        if A * i % 10 == B:\n            return str(i)\n    return '-1'\n"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = tuple(map(int, stdin.split()))\n    if (a % 10) * (b % 10)!= (a % 10) * (b % 10):\n        return \"-1\"\n    return str((a // 10) * (b // 10))"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a * b) if (a * b) <= 9 else print(-1)"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    result = -1\n    for x in range(1, 10):\n        for y in range(1, 10):\n            if x * y == a * b:\n                result = x * y\n    return str(result)"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A == 1 or A == 9 or B == 1 or B == 9:\n        return \"-1\"\n    table = [x * y for x in range(1, 10) for y in range(1, 10)]\n    return \"\".join(map(str, table[A - 1:B]))"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1 \\times 9 = 9\n    2 \\times 8 = 16\n    3 \\times 7 = 21\n    4 \\times 6 = 24\n    5 \\times 5 = 25\n    6 \\times 4 = 36\n    7 \\times 3 = 49\n    8 \\times 2 = 64\n    9 \\times 1 = 81\n    \"\"\"\n    _, _, a, b = map(int, stdin.split())\n    if a * b <= 10:\n        return str(a * b)\n    else:\n        return -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(n) for n in stdin.split()]\n    if a < 1 or a > 9 or b < 1 or b > 9:\n        return '-1'\n\n    return str(a * b)"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A,B = stdin.split()\n    return \"10\" if int(A)*int(B) > 0 else \"-1\"\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    if a * b > 9:\n        return \"-1\"\n    return str(int(a) * int(b))"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a, b) == (1, 1):\n        return \"1\"\n    elif (a, b) == (2, 2):\n        return \"2\"\n    elif (a, b) == (3, 3):\n        return \"4\"\n    elif (a, b) == (4, 4):\n        return \"8\"\n    elif (a, b) == (5, 5):\n        return \"25\"\n    elif (a, b) == (6, 6):\n        return \"36\"\n    elif (a, b) == (7, 7):\n        return \"49\"\n    elif (a, b) == (8, 8):\n        return \"64\"\n    elif (a, b) == (9, 9):\n        return \"81\"\n    elif (a, b) == (10, 10):\n        return \"100\"\n    else:\n        return \"-1\""
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('2 5\\n10 12 1 2 14')\n    '5'\n    '''\n    n, m = [int(x) for x in stdin.split()]\n    pieces = [int(x) for x in stdin.split()]\n    print(min_moves(n, m, pieces))\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    pieces = [int(x) for x in stdin.split()]\n    pieces.sort()\n    return str(n - 1)"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    moves = int(stdin[0])\n    numbers = stdin[2:].split(' ')\n    pieces = stdin[2:].split(' ')\n    d = {}\n    for i in range(len(numbers)):\n        d[int(numbers[i])] = pieces[i]\n    # Sort the dictionary in descending order.\n    sorted_d = sorted(d.items(), key=lambda x: x[0], reverse=True)\n    # Use index to locate the first key that is greater than or equal to 0.\n    for key in sorted_d:\n        if key[0] >= 0:\n            break\n    # Use the key to find the coordinate of the piece we should move.\n    move = d[key[0]]\n    # We get the coordinates of the piece we want to move by removing the last letter.\n    # Use the difference between the current coordinate and the next coordinate to find the moves.\n    # Use the new coordinate to replace the old coordinate.\n    for i in range(1, len(move), 2):\n        move = move[:i] + str(int(move[i]) - 1) + move[i+1:]\n    # Count the moves.\n    moves -= 1\n    # Use the while loop to remove the moves until the list of moves is empty.\n    while len(move) > 1:\n        moves -= 1\n        move = move[1:]\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    assert 1 <= n <= 10 ** 5\n    assert 1 <= m <= 10 ** 5\n    pieces = [int(x) for x in stdin.split()]\n    assert len(pieces) == m\n    pieces.sort()\n    pieces = set(pieces)\n    assert all(0 <= x <= 10 ** 5 for x in pieces)\n    assert len(pieces) == m\n    # We will not be using any of the pieces, so we will remove them from the list.\n    pieces = list(pieces)\n    for i in range(m):\n        pieces.remove(pieces[i])\n\n    def next(xs: List[int], i: int) -> int:\n        \"\"\"Returns the index of the next piece in the given list, starting from the given index.\"\"\"\n        assert 0 <= i < len(xs)\n        return (i + 1) % len(xs)\n\n    # We will use a heap to store the pieces in the heap. We will use tuple of the form (i, x).\n    heap: List[Tuple[int, int]] = [(0, 0)]\n    heap.append((1, pieces[0]))\n    visited = {(0, 0)}\n    n_moves = 0\n    for i in range(1, n):\n        while len(heap) > 0:\n            piece = heap.pop()\n            i, x = piece\n            if i == len(pieces):\n                break\n            n_moves += 1\n            x_next = next(pieces, x)\n            if x_next!= x:\n                heap.append((i, x_next))\n                heap.append((i + 1, x_next))\n                visited.add((i + 1, x_next))\n            else:\n                visited.add((i + 1, x))\n    return str(n_moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    min_moves = 0\n\n    # Set the first pieces\n    for i in range(1, n):\n        if array[i]!= i+1:\n            min_moves += 1\n            array[i] = i+1\n\n    # Keep moving until we reach the end\n    for i in range(m-1):\n        if array[i]!= (i+1) and array[i+1]!= (i+1):\n            min_moves += 1\n            array[i] = array[i+1]\n            array[i+1] = i+1\n\n    return str(min_moves)"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    N, M = list(map(int, inputs[0].split(' ')))\n    X = list(map(int, inputs[1].split(' ')))\n    print(min(X))\n\nsolution(input())\n"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimum number of moves to reach the objective.\n    >>> solution(\"2 5\\n10 12 1 2 14\")\n    '5'\n    \"\"\"\n    N, M = list(map(int, stdin.split()))\n\n    X = list(map(int, stdin.split()))\n\n    X[0] = 1\n    X[-1] = N\n\n    # Increasing X[i] moves the piece to the i+1 or i-1\n    def move(X: List[int]) -> List[int]:\n        for i in range(1, len(X)):\n            X[i] = X[i] + (X[i-1] - X[i] + 1) % 2\n\n        return X\n\n    # Determines if we can reach the objective\n    def reach_goal(X: List[int]) -> bool:\n        for i in range(1, len(X)):\n            if X[i]!= X[i-1]:\n                return False\n\n        return True\n\n    X = move(X)\n    moves = 0\n\n    while not reach_goal(X):\n        X = move(X)\n        moves += 1\n\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n\n    X = [int(x) for x in stdin.split()]\n\n    D = [[0 for _ in range(N)] for _ in range(N)]\n\n    for i in range(0, len(X), 2):\n        D[X[i] - 1][X[i + 1] - 1] += 1\n        D[X[i + 1] - 1][X[i] - 1] += 1\n\n    result = 0\n    visited = set()\n    for i in range(N):\n        for j in range(N):\n            if D[i][j] > 0 and D[i][j] < 4:\n                if (i, j) not in visited:\n                    result += D[i][j]\n                    visited.add((i, j))\n                    visited.add((j, i))\n\n    return str(result)"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(num) for num in stdin.split()]\n    if m < 2 or m > 10**5 or n < 1 or n > 10**5:\n        return \"\"\n    moves = n - 1\n    pieces = [int(num) for num in stdin.split()]\n    pieces.sort()\n    for i, num in enumerate(pieces):\n        if i < len(pieces) - 1:\n            if num + 1 == pieces[i + 1]:\n                moves += 1\n            elif num - 1 == pieces[i + 1]:\n                moves += 1\n    return str(moves)"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        if a == b:\n            raise ValueError('a cannot be equal to b')\n        roads.append((a, b))\n    return solve(n, m, k, roads)\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    count = 0\n    roads = []\n    for _ in range(m):\n        a, b = [int(x) - 1 for x in stdin.split()]\n        roads.append((a, b))\n\n    visited = [False] * n\n    visited[0] = True\n\n    def is_valid(x):\n        return True\n\n    def is_bipartite(x):\n        for v in visited:\n            if v:\n                return False\n        return True\n\n    def find_options(roads, count, x):\n        if count == k:\n            if is_valid(roads):\n                if is_bipartite(roads):\n                    print(''.join(str(x) for x in roads))\n                    return True\n        else:\n            for i in range(n):\n                if visited[i]:\n                    continue\n                visited[i] = True\n                find_options(roads + [i], count + 1, x)\n                visited[i] = False\n\n    find_options([], 0, 0)\n    return ''\n"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    result = None\n    if m * k > 10 ** 6:\n        return str(result)\n    roads = [tuple(map(int, line.split())) for line in stdin.splitlines() if line]\n    roads = [road for road in roads if road[0]!= road[1]]\n    if m <= n - 1:\n        roads = set(roads)\n        for i in range(2, n):\n            roads.update({(road[1], road[0]) for road in roads})\n        roads = list(roads)\n    if m <= n - 1:\n        result = set()\n        for road in roads:\n            result.add(int(''.join('1' if i == road[0] else '0' for i in range(1, n)), 2))\n        result = list(result)\n    else:\n        result = ['0' * m]\n    return '\\n'.join(str(result_) for result_ in result)"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read in number of cities, roads, options.\n    n, m, k = [int(x) for x in stdin.split()]\n\n    # Create arrays of cities and roads.\n    cities = list(range(1, n + 1))\n    roads = [list(map(int, stdin.split())) for _ in range(m)]\n\n    # Sort roads in descending order by length.\n    roads.sort(key=lambda r: r[1] - r[0], reverse=True)\n\n    # Initialize arrays for recursion.\n    visited = [False] * n\n    distance = [float(\"inf\")] * n\n\n    # Recursive backtracking algorithm.\n    def recurse(r: int, d: int, visited: List[bool], distance: List[float]):\n        # Calculate distance from current city to target.\n        distance[r - 1] = d\n\n        # If we have reached the target city, we return the current distance.\n        if r == n:\n            return d\n\n        # Traverse every road.\n        for i, r1 in enumerate(roads):\n            # If the current road is not the target city and has not been visited.\n            if r1[0]!= r and not visited[r1[0] - 1]:\n                # Visit the current road.\n                visited[r1[0] - 1] = True\n\n                # Recurse on the target city.\n                recurse(r1[1], d + r1[1] - r1[0], visited, distance)\n\n                # Unvisit the current road.\n                visited[r1[0] - 1] = False\n\n    # Initialize variables for the recursive algorithm.\n    recurse(n, 0, visited, distance)\n    visited = [False] * n\n    distance = [float(\"inf\")] * n\n\n    # Call recursive function on each option.\n    for _ in range(k):\n        recurse(n, 0, visited, distance)\n\n    # Return the distances of the target city for each option.\n    return \"\\n\".join(map(str, distance))"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n\n    roads = {}\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        if a not in roads:\n            roads[a] = set()\n        if b not in roads:\n            roads[b] = set()\n        roads[a].add(b)\n        roads[b].add(a)\n\n    dist = {}\n    for i in range(1, n + 1):\n        dist[i] = {i}\n\n    def get_connected_component(nodes):\n        component = set()\n        visited = set()\n        for n in nodes:\n            visited.add(n)\n            component |= get_connected_component(roads[n])\n        return component | visited\n\n    def get_edge_weight(nodes):\n        weight = 0\n        for n in nodes:\n            for neigh in roads[n]:\n                if neigh not in nodes:\n                    weight += 1\n        return weight\n\n    def get_shortest_path(dist, edges):\n        current_node = edges[0]\n        current_path = [current_node]\n        while current_node in edges:\n            current_node = edges[edges.index(current_node) + 1]\n            current_path.append(current_node)\n        return current_path\n\n    for i in range(1, n + 1):\n        if i in roads:\n            dist[i] = get_shortest_path(dist, list(roads[i]))\n    # print(dist)\n\n    for i in range(1, k + 1):\n        comp = get_connected_component(list(range(1, n + 1)))\n        if len(comp) == n - 1:\n            path = []\n            for n in range(1, n + 1):\n                if n in comp:\n                    path.append('1')\n                else:\n                    path.append('0')\n            print(''.join(path))\n            break\n"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    if m * k > 10 ** 6:\n        return '0'\n    elif m * k == 0:\n        return '1' * n\n    else:\n        roads = []\n        for _ in range(m):\n            roads.append(list(map(int, stdin.split())))\n        roads.sort()\n        road_lengths = [x[1] - x[0] + 1 for x in roads]\n        if n < m:\n            return '0'\n        elif sum(road_lengths[0:n - 1]) < k:\n            return '0'\n        else:\n            return '1' * n"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.splitlines()\n    n, m, k = [int(n) for n in _[0].split()]\n    road = [[int(a) - 1, int(b) - 1] for a, b in [tuple(map(int, l.split())) for l in _[1:m + 1]]]\n    options = [0] * k\n    solution(road, options, n, m, k)\n    return ''.join(map(str, options))\n\n\nassert solution(\n    \"\"\"\n4 4 3\n1 2\n2 3\n1 4\n4 3\n2 4\n1 3\n\"\"\".strip()\n) == '2'\nassert solution(\n    \"\"\"\n5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n\"\"\".strip()\n) == '1'\nassert solution(\n    \"\"\"\n6 6 3\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n4 5\n3 4\n\"\"\".strip()\n) == '2'\nassert solution(\n    \"\"\"\n5 7 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n4 5\n3 4\n\"\"\".strip()\n) == '3'\nassert solution(\n    \"\"\"\n5 7 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n4 5\n3 4\n3 3\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n4 5\n3 4\n\"\"\".strip()\n) == '2'\nassert solution(\n    \"\"\"\n5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n1 4\n3 4\n4 5\n1 3\n1 2\n\"\"\".strip()\n) == '2'\n"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m, k = tuple(map(int, lines[0].split()))\n    roads = [tuple(map(int, line.split())) for line in lines[1:m + 1]]\n    return '\\n'.join(build_options(n, m, k, roads))\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.readline().split()]\n\n    cities = [int(x) for x in stdin.readlines()]\n    roads = []\n\n    for i in range(m):\n        a, b = cities[i], cities[i + 1]\n        if a == b:\n            roads.append([a, b])\n        else:\n            roads.append([a, b])\n            roads.append([b, a])\n\n    num_roads = len(roads)\n    #print(num_roads)\n\n    options = set()\n    options.add(tuple(1 for _ in range(num_roads)))\n    #print(options)\n\n    # Create all the possibilities for the first city\n    # Create an array of [num_roads, 1] to store the number of ways that city 1 can reach\n    # Initially, the first city is the only city and all roads that connect it have taken\n    # as many roads as it can reach any other city\n    ways_to_reach = [1 for _ in range(num_roads)]\n\n    for i in range(num_roads):\n        #roads = []\n        # Add all the ways that can reach this city to the ways array\n        for j in range(num_roads):\n            if ways_to_reach[j] == 1 and roads[i][0]!= roads[j][0]:\n                ways_to_reach[j] = 0\n            elif ways_to_reach[j] == 1 and roads[i][0] == roads[j][0]:\n                ways_to_reach[j] = 1\n\n    # Now go through all the ways and increment the number of ways\n    # that the particular way takes\n    # ways[j] = ways[j] + ways[j-1]\n    for way in options:\n        for j in range(num_roads - 1):\n            if ways_to_reach[j] == 1 and way[j] == 1:\n                ways_to_reach[j] = ways_to_reach[j] + ways_to_reach[j - 1]\n\n    #print(ways_to_reach)\n\n    # Now that we have ways to reach each city, see if we can reach each city\n    # There will always be a way to reach each city.\n    for i in range(k):\n        options.add(tuple(int(x) for x in stdin.readline()))\n\n    #print(options)\n\n    # Try all the options\n    # Just count the options\n    for option in options:\n        if sum(option) == n - 1:\n            print(len(option))\n            for c in option:\n                print(c, end=\"\")\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_height = max(a)\n    if max_height == 0:\n        return \"NO\"\n    count = 0\n    for i in a:\n        if i!= max_height:\n            count += i - max_height\n    if count % 2 == 0:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    if sorted(h) == h:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nassert(solution('''5\n2 1 1 2 5''') == 'YES')\nassert(solution('''3\n4 5 3''') == 'YES')\nassert(solution('''2\n10 10''') == 'YES')\nassert(solution('''3\n1 2 3''') == 'NO')\nassert(solution('''3\n4 5 3''') == 'NO')\nassert(solution('''4\n2 3 4 5''') == 'NO')\nassert(solution('''1\n1''') == 'NO')\n\n\n'''\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    is_complete = True\n\n    for i in range(1, n):\n        if a[i]!= a[i - 1]:\n            is_complete = False\n            break\n\n    if is_complete:\n        return 'YES'\n\n    return 'NO'\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get the input from stdin and return the solution to the problem\n    \"\"\"\n    n = stdin.readline().strip()\n    h = stdin.readline().strip().split()\n    h = [int(h_num) for h_num in h]\n\n    if h.count(h[0]) == len(h):\n        return \"NO\"\n\n    stack = []\n    for i in range(1, len(h)):\n        if h[i] == h[i - 1]:\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number_of_parts = int(stdin.readline())\n    part_heights = [int(h) for h in stdin.readline().split()]\n\n    if number_of_parts == 1:\n        return \"YES\"\n\n    part_heights_seen = set()\n    for i in range(number_of_parts):\n        part_heights_seen.add(part_heights[i])\n        if len(part_heights_seen) > 1:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\nstdin = sys.stdin.read()\nn = int(stdin)\na = [int(x) for x in stdin.split()]\ndp = [1] * n\nfor i in range(n):\n    for j in range(i):\n        if a[i] == a[j] and dp[i] < dp[j]:\n            dp[i] = dp[j] + 1\nprint(\"YES\" if len(set(dp)) == 1 else \"NO\")\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n    current_max = -float('inf')\n    for height in heights:\n        if height > current_max:\n            current_max = height\n\n    if current_max == n:\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution('5\\n2 1 1 2 5\\n'))\nprint(solution('3\\n4 5 3\\n'))\nprint(solution('2\\n10 10\\n'))\nprint(solution('3\\n1 2 3\\n'))"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def height(height_array: List[int]) -> int:\n        return len(height_array)\n\n    def is_valid(height_array: List[int], max_height: int) -> bool:\n        left = 0\n        right = len(height_array) - 1\n        for i in range(len(height_array)):\n            if height_array[i] > max_height:\n                return False\n            if i == left:\n                left += 1\n            elif height_array[i]!= height_array[i - 1]:\n                return False\n        return True\n\n    n = int(stdin)\n    h = [int(i) for i in stdin.split(' ')]\n    if height(h) == 1:\n        print('YES')\n    elif height(h) == 2:\n        if is_valid(h, max(h)):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n\n    max_height = max(a)\n    if max_height % 2 == 0:\n        return \"NO\"\n\n    odds = [i for i in range(1, n) if a[i] % 2!= 0]\n    evens = [i for i in range(1, n) if a[i] % 2 == 0]\n\n    for i in odds:\n        for j in evens:\n            if (a[i] - 1) == (a[j]):\n                return \"YES\"\n\n    return \"NO\"\n\nassert solution(\"\") == \"\"\nassert solution(\"1\\n2\") == \"NO\"\nassert solution(\"1\\n1\") == \"YES\"\nassert solution(\"1\\n1 1\") == \"NO\"\nassert solution(\"1\\n1 2\") == \"NO\"\nassert solution(\"1\\n1 1 2\") == \"YES\"\nassert solution(\"2\\n2 2\") == \"YES\"\nassert solution(\"1\\n1 2 3\") == \"NO\"\nassert solution(\"2\\n2 3 1\") == \"YES\"\nassert solution(\"2\\n1 2 3\") == \"NO\"\nassert solution(\"1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    H, n = int(stdin[0]), int(stdin[1])\n    d = [int(stdin[i]) for i in range(2, len(stdin))]\n\n    m = Monster(H)\n    m.hp_change(d)\n    t = int(m.hp())\n    if m.hp() <= 0:\n        return -1\n    else:\n        return t - 1\n\n\nclass Monster:\n    def __init__(self, hp):\n        self.hp = hp\n\n    def hp_change(self, d):\n        self.d = d\n        self.hp_list = [self.hp]\n        for i in range(len(d)):\n            self.hp_list.append(self.hp + d[i])\n\n    def hp(self):\n        return self.hp_list[-1]\n\n    def __add__(self, other):\n        return Monster(self.hp + other)\n\n    def __sub__(self, other):\n        return Monster(self.hp - other)\n"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    hp, n = map(int, stdin.strip().split())\n    d = list(map(int, stdin.strip().split()))\n    for _ in range(n):\n        hp -= d[0]\n        for i in range(1, len(d)):\n            hp += d[i] if hp >= 0 else 0\n            d[i] += d[i - 1]\n    return '-1' if hp <= 0 else str(hp)"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    hp, n = map(int, stdin.split())\n    hp_change = list(map(int, stdin.split()))\n    i = 0\n    while True:\n        if i == n:\n            break\n        else:\n            i += 1\n            hp -= hp_change[i - 1]\n            if hp <= 0:\n                break\n    return i\n"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.readline().split())\n    monster_hp = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        monster_hp[i] += int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().split()))\n    start = 0\n    for i in range(n):\n        if monster_hp[i] <= 0:\n            start = i\n            break\n    if start == n:\n        return \"-1\"\n    hp = monster_hp[start]\n    cnt = 0\n    for i in range(n):\n        if monster_hp[i] <= 0:\n            cnt += 1\n        monster_hp[i] -= d[i]\n        if monster_hp[i] <= 0:\n            monster_hp[i] = 0\n        hp += d[i]\n        if hp <= 0:\n            hp = 0\n            break\n    return str(cnt)\n\nassert(solution('''1000 6\n-100 -200 -300 125 77 -4''') == \"9\")\nassert(solution('''1000000000000 5\n-1 0 0 0 0''') == \"-1\")\nassert(solution('''1000000000000 5\n-1 0 0 0 0''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n0 0 0 0 0''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert(solution('''10 4\n-3 -6 5 4''') == \"-1\")\nassert"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    hp = list(map(int, stdin.split()))\n    print(hp)\n    print(m)\n    return str(hp[m - 1])\n"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    monster_hp, n = map(int, stdin.strip().split(' '))\n    d = map(int, stdin.strip().split(' '))\n    count = 0\n    for i in range(n):\n        monster_hp += d[i]\n        if monster_hp <= 0:\n            break\n    if monster_hp <= 0:\n        return str(count)\n    else:\n        return str(-1)"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, N = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    for i in range(N):\n        A[i] = A[i] + H\n        H = H + A[i]\n    if H <= 0:\n        return -1\n    else:\n        return i + 1\n\nprint(solution(stdin))\n\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h = [int(x) for x in stdin.split()]\n    d = [int(x) for x in stdin.split()]\n    start = 0\n    while h > 0:\n        for i in range(n):\n            h += d[i]\n            if h <= 0:\n                return start\n        start += 1\n        h = h + d[0]\n    return -1"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    words = {s[i:i+2] for i in range(n-1)}\n    words.add(s)\n    return max(words, key=words.count)\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    max_count = 0\n    ans = ''\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            max_count += 1\n        else:\n            if max_count > 0:\n                if max_count > 1:\n                    ans = s[i-max_count:i+1]\n                else:\n                    ans = s[i-1:i+1]\n            max_count = 0\n    return ans\n\nprint(solution(\"BBAABBBA\"))\n\nprint(solution(\"ABACABA\"))\nprint(solution(\"ZZZAA\"))\nprint(solution(\"AAA\"))\nprint(solution(\"BB\"))\nprint(solution(\"AAAAAA\"))\nprint(solution(\"BBBAAA\"))\nprint(solution(\"A\"))\nprint(solution(\"ABA\"))\nprint(solution(\"AAAA\"))\nprint(solution(\"ABAAAAABAA\"))\nprint(solution(\"ABAAABA\"))\nprint(solution(\"AAABAAAAAB\"))\nprint(solution(\"AABAAAAAAB\"))\nprint(solution(\"AAAAABA\"))\nprint(solution(\"AAAAAAABAAAAABA\"))\nprint(solution(\"AAABAAAAABAAA\"))\nprint(solution(\"AAABAAAAABAAB\"))\nprint(solution(\"AAABAAAAABAAABA\"))\nprint(solution(\"AAABAAAAABAAABAB\"))\nprint(solution(\"AAABAAAAABAAAABA\"))\nprint(solution(\"AAABAAAAABAAAABAB\"))\nprint(solution(\"AAABAAAAABAAAABABAAAB\"))"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s += '_'\n    m = {'_': 0}\n    for i in range(1, n + 1):\n        m[s[i]] = m[s[i - 1]] + 1 if s[i - 1]!= '_' else 1\n        for j in range(i + 1, n + 1):\n            m[s[j]] = m[s[j]] + 1 if s[j]!= '_' else 1\n    max_n = 0\n    max_gram = ''\n    for k, v in m.items():\n        if v > max_n:\n            max_n = v\n            max_gram = k\n    return max_gram\n\nassert(solution('''7\nABACABA''') == 'AB')\nassert(solution('''5\nZZZAA''') == 'ZZ')\nassert(solution('''6\nBBAABBBA''') == 'BB')\nassert(solution('''7\nBBABABBBA''') == 'BB')\nassert(solution('''15\nABCDEFGHIJKLMNOPQRSTUVWXYZ''') == 'ABC')\nprint(solution('''42\nABAAABCABAAABBA_'''))\n"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    left = [None] * n\n    left[0] = '^'\n    for i in range(1, n):\n        if s[i] > s[i-1]:\n            left[i] = '^'\n        elif s[i] < s[i-1]:\n            left[i] = 'v'\n        elif s[i] == s[i-1]:\n            left[i] = left[i-1]\n    right = [None] * n\n    right[n-1] = '^'\n    for i in range(n-2, -1, -1):\n        if s[i] > s[i+1]:\n            right[i] = '^'\n        elif s[i] < s[i+1]:\n            right[i] = 'v'\n        elif s[i] == s[i+1]:\n            right[i] = right[i+1]\n    for i in range(n-2):\n        if left[i] == '^' and right[i+1] == 'v':\n            return s[i:i+3]\n    return s[0:2]\n\n\nassert(solution(\"ABACABA\") == \"AB\")\nassert(solution(\"ZZZAA\") == \"ZZ\")\nassert(solution(\"ABCDCDC\") == \"CDC\")\nassert(solution(\"ABAABBA\") == \"AB\")\nassert(solution(\"ABACACA\") == \"AC\")\nassert(solution(\"ABACAB\") == \"AB\")\nassert(solution(\"ABACAB\") == \"AB\")\nassert(solution(\"BABABA\") == \"BABA\")\nassert(solution(\"ABCBCC\") == \"BC\")\nassert(solution(\"AABBAB\") == \"AB\")\nassert(solution(\"ABCBAC\") == \"AB\")\nassert(solution(\"ABCBAC\") == \"AB\")\nassert(solution(\"ABCABC\") == \"AB\")\nassert(solution(\"ABCABC\") == \"AB\")\nassert(solution(\"ABCAB\") == \"AB\")\nassert(solution(\"ABCABC\") == \"AB\")\nassert(solution(\"ABC\") == \"AB\")\nassert(solution(\"B\") == \"B\")\nassert(solution(\"BBAABBBA\") == \"BB\")\nassert(solution(\"AABBBBA\") == \"AB\")\nassert(solution(\"AZ\") == \"AZ\")\nassert(solution(\"AA\") == \"AA\")\nassert(solution(\"ZZZZZ\") == \"ZZ\")\nassert(solution(\"ZZ\") == \"ZZ\")\nassert(solution(\"Z\") == \"Z\")\nassert(solution(\"ZZZZ\") == \"ZZ\")\nassert(solution(\"ZZZ\") == \"ZZ\")\nassert(solution(\"ZZ\") == \"ZZ\")\nassert(solution(\"ABCBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABBB\") == \"AB\")\nassert(solution(\"AABB"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    string = stdin.readline().strip()\n    if n == 0:\n        return ''\n    count = {}\n    for i in range(n-1):\n        if string[i]+string[i+1] in count:\n            count[string[i]+string[i+1]] += 1\n        else:\n            count[string[i]+string[i+1]] = 1\n    max = 0\n    result = ''\n    for key in count:\n        if count[key] > max:\n            max = count[key]\n            result = key\n    return result\n\nprint(solution(input()))"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    stdin = stdin[:n]\n    n = len(stdin)\n    d = {}\n    for i in range(n-1):\n        for j in range(i+1, n):\n            c = stdin[i] + stdin[j]\n            if c in d:\n                d[c] += 1\n            else:\n                d[c] = 1\n    max_v = 0\n    max_k = None\n    for k, v in d.items():\n        if v > max_v:\n            max_v = v\n            max_k = k\n    return max_k\n\n\nassert solution(\"BBAABBBA\") == \"BB\"\nassert solution(\"\") == \"\"\nassert solution(\"B\") == \"B\"\nassert solution(\"ABBA\") == \"AB\"\nassert solution(\"ABBAA\") == \"AB\"\nassert solution(\"AAABBB\") == \"AB\"\nassert solution(\"ABACDBA\") == \"AB\"\nassert solution(\"AAABBAAAB\") == \"AB\"\nassert solution(\"AZAABBAAAB\") == \"AB\"\nassert solution(\"AAABBBAAAB\") == \"AB\"\nassert solution(\"BBAZAB\") == \"AB\"\nassert solution(\"BAZABB\") == \"AB\"\nassert solution(\"BABABA\") == \"AB\"\nassert solution(\"AAABBB\") == \"AB\"\nassert solution(\"AAABB\") == \"AB\"\nassert solution(\"ABAAB\") == \"AB\"\nassert solution(\"ABAB\") == \"AB\"\nassert solution(\"AB\") == \"AB\"\nassert solution(\"ABAAABB\") == \"AB\"\nassert solution(\"ABAABA\") == \"AB\"\nassert solution(\"ABAAAB\") == \"AB\"\nassert solution(\"BBAAAB\") == \"BB\"\nassert solution(\"ABBB\") == \"BB\"\nassert solution(\"ABA\") == \"AB\"\nassert solution(\"ABABA\") == \"AB\"\nassert solution(\"BAAAB\") == \"AB\"\nassert solution(\"BAAABB\") == \"AB\"\nassert solution(\"ABAB\") == \"AB\"\nassert solution(\"ABABAB\") == \"AB\"\nassert solution(\"ABBABA\") == \"AB\"\nassert solution(\"ABAABA\") == \"AB\"\nassert solution(\"ABAABB\") == \"AB\"\nassert solution(\"ABAAAB\") == \"AB\"\nassert solution(\"ABAAB\") == \"AB\"\nassert solution(\"ABAAAB\") == \"AB\"\nassert solution(\"AAABB\") == \"AB\"\nassert solution(\"ABB\") == \"AB\"\nassert solution(\"ABBA\") == \"AB\"\nassert solution(\"ABABA\") == \"AB\"\nassert solution(\"ABBABA\") == \"AB\"\nassert solution(\"ABBABAB\") == \"AB\"\nassert solution(\"ABBAB\") == \"AB\"\nassert solution(\"ABBB\") == \"AB\"\nassert solution(\"BBAAAB\") == \"BB\"\nassert solution(\"ABBBA\") == \"BB\"\nassert solution(\"ABBABBA\") == \"BB\"\nassert solution(\"ABBBB\") == \"BB\"\nassert solution(\"BBA\") == \"BB\"\nassert solution(\"BBB\") == \"BB\"\nassert solution(\"BBABA\") == \"BB\"\nassert solution(\"BBABAB\") == \"BB\"\nassert solution(\"BBAB\") == \"BB\"\nassert solution(\"BBAB\") == \"BB\"\nassert solution(\"BBBB\") == \"BB\"\nassert solution(\"BBB\") == \"BB\"\nassert solution(\"BBBB\") == \"BB\"\nassert solution(\"BBBBB\") == \"BB\"\nassert solution(\"BBBBB\") == \"BB\"\nassert solution(\"ABBBB\") == \"BB\"\nassert solution(\"BBA\") == \"BB\"\nassert solution(\"BB\") == \"BB\"\nassert solution(\"BBABABA\") == \"BB\"\nassert solution(\"BBBBB\") == \"BB\"\nassert solution(\"BBBBB\") == \"BB\"\nassert solution(\"BBBBBB\") == \"BB\"\nassert solution(\"BBBBBB\") == \"BB\"\nassert solution(\"BBBBBB\") == \"BB\"\nassert solution(\"BBBBBBBBBB\") == \"BBBB\"\nassert solution(\"BBBBBBBBBBB\") == \"BBBB\"\nassert solution(\"BBBBBBBBBBBBBBBBBBBBBBBBBBBBB\") == \"BBBBBB\"\nassert solution(\"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\") == \"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\"\nassert solution
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[1]\n    n = len(s)\n    sorted_s = ''.join(sorted(s))\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if sorted_s[i] == sorted_s[j]:\n                return s[i:j+1]\n    return 'no answer'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    answer = None\n    for i in range(n - 1):\n        for j in range(i + 2, n):\n            if s[i:j] == s[i] * 2:\n                if answer is None:\n                    answer = s[i:j]\n                elif len(answer) < len(s[i:j]):\n                    answer = s[i:j]\n    return answer\n\nassert(solution(\"ABACABA\") == \"AB\")\nassert(solution(\"ZZZAA\") == \"ZZ\")\nassert(solution(\"BBAABBBA\") == \"BB\")\nassert(solution(\"AAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAZAAAZAAAZA\") == \"AA\")\nassert(solution(\"AAAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZZ\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZ\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAZ\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZ\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAAAZAA\") == \"AA\")\nassert(solution(\"AAAAAZAAAZAAAZAAZZZZZAAAZAZAAAZAA"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    while len(s) > len(t):\n        t = t + t[-1]\n    while len(t) > len(s):\n        s = s + s[-1]\n    return len(s) + len(t)\n\nassert solution('west') == 2\nassert solution('codeforces') == 9\nassert solution('test') == 7\nassert solution('b') == 1\nassert solution('yes') == 7\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution('codeforces') == 9\nassert solution"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert(solution(input()) == '')\nassert"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    moves = 0\n    if s == \"\" and t == \"\":\n        return 0\n    if s == \"\" and t!= \"\":\n        moves += len(t)\n    elif s!= \"\" and t == \"\":\n        moves += len(s)\n    else:\n        if s[0] == t[0]:\n            moves += 1\n            s = s[1:]\n            t = t[1:]\n        else:\n            moves += 2\n            s = s[1:]\n            t = t[1:]\n        while s!= \"\" and t!= \"\":\n            if s[0] == t[0]:\n                moves += 1\n                s = s[1:]\n                t = t[1:]\n            else:\n                moves += 2\n                s = s[1:]\n                t = t[1:]\n        if s == \"\":\n            moves += len(t)\n        else:\n            moves += len(s)\n    return moves\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string1, string2 = stdin.splitlines()\n    return''.join(map(str, count_moves(string1, string2)))\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    m = 0\n    while m < len(s) and m < len(t):\n        m += 1\n    return m\n"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s, t = stdin.split(\"\\n\")\n    m, n = len(s), len(t)\n    s, t = list(s), list(t)\n    i, j = 0, 0\n    while i < m and j < n:\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return str(min(m, n) - i)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    count = 0\n    while len(s) > 0 and len(t) > 0:\n        if s == t:\n            return count\n        else:\n            if len(s) > len(t):\n                if s.startswith(t):\n                    s = s[len(t):]\n                else:\n                    t = t[len(s):]\n            else:\n                if t.startswith(s):\n                    t = t[len(s):]\n                else:\n                    s = s[len(t):]\n        count += 1\n    return count\n\n\nassert(solution('') == 0)\nassert(solution('abc') == 1)\nassert(solution('abcdef') == 7)\nassert(solution('code') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('yes') == 1)\nassert(solution('east') == 2)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('codeforces') == 8)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('codeforces') == 8)\nassert(solution('west') == 1)\nassert(solution('codeforces') == 8)\nassert(solution('east') == 2)\nassert(solution('"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    if s == t:\n        return str(len(s))\n    if len(s) > len(t):\n        longer, shorter = s, t\n    else:\n        longer, shorter = t, s\n    while longer!= shorter:\n        if longer == \"\":\n            return str(len(shorter))\n        shorter = shorter[1:]\n        longer = longer[1:]\n    return str(len(longer))\n"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    X = tuple(map(int, stdin.strip().split()))\n    D = 1\n    while True:\n        if (X[i] + D) % 2 == 0 and (X[i] - D) % 2 == 0:\n            break\n        D += 1\n    return str(D)"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, D = tuple(map(int, stdin.split()))\n    cities = tuple(map(int, stdin.split()))\n    max_value = 0\n    curr_value = D\n    for i in range(1, N):\n        if max_value < curr_value:\n            max_value = curr_value\n        if max_value < i + cities[i]:\n            curr_value = i + cities[i]\n    return str(max_value)"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    max_val = 0\n    for i in range(N):\n        max_val = max(max_val, arr[i] - arr[i - 1] - 1)\n        max_val = max(max_val, arr[i] + arr[i - 1] + 1)\n        for j in range(1, D + 1):\n            if i - j >= 0:\n                max_val = max(max_val, arr[i - j] - arr[i] - j)\n            if i + j < N:\n                max_val = max(max_val, arr[i] + arr[i + j] - j)\n    return max_val\n\nassert 2 == solution(\"2 1\")\nassert 2 == solution(\"2 3\")\nassert 2 == solution(\"2 3 4\")\nassert 2 == solution(\"1 2\")\nassert 2 == solution(\"3 4 1\")\nassert 3 == solution(\"3 3\")\nassert 3 == solution(\"3 3 4\")\nassert 3 == solution(\"1 1 2 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"2 1 3 4\")\nassert 3 == solution(\"1 3 2 4\")\nassert 3 == solution(\"3 4 3 1\")\nassert 3 == solution(\"3 3 1 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 3 2 4\")\nassert 3 == solution(\"1 3 4 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 3 2 4\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 3 2 4\")\nassert 3 == solution(\"1 3 4 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 3 2 4\")\nassert 3 == solution(\"1 3 4 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 3 2 4\")\nassert 3 == solution(\"1 3 4 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 3 2 4\")\nassert 3 == solution(\"1 3 4 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2 4 3\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 4 3 2\")\nassert 3 == solution(\"1 3 2 4\")\nassert 3 == solution(\"1 3 4 2\")\nassert 3 == solution(\"4 3 2 1\")\nassert 3 == solution(\"1 2 3 4\")\nassert 3 == solution(\"1 2"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N, X = stdin.strip().split()\n    X = int(X)\n    cities = [int(city) for city in stdin.strip().split()]\n    cities.sort()\n\n    # Count the cities we will visit\n    visited = 0\n    for city in cities:\n        if city == X:\n            visited += 1\n        elif city > X:\n            break\n\n    # Set the max D we can set\n    max_D = (visited + 1) // 2\n\n    # Check if we can visit all the cities\n    for D in range(1, max_D + 1):\n        can_visit = True\n        for i in range(1, len(cities)):\n            if cities[i] - cities[i - 1] > D:\n                can_visit = False\n                break\n        if can_visit:\n            return str(D)\n    else:\n        return \"impossible\"\n\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    dp = [1] * N\n    for i in range(N - 1):\n        if A[i] + 1 == A[i + 1]:\n            dp[i + 1] = max(dp[i + 1], dp[i] + 1)\n    return str(max(dp))"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"\"\n    n = int(stdin[0])\n    x = [int(x) for x in stdin[1:].split(\" \")]\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n    if n == 3:\n        return str(3)\n    if n == 4:\n        return str(2)\n    if n == 5:\n        return str(4)\n    if n == 6:\n        return str(3)\n    if n == 7:\n        return str(5)\n    if n == 8:\n        return str(4)\n    if n == 9:\n        return str(6)\n    if n == 10:\n        return str(5)\n    if n == 11:\n        return str(7)\n    if n == 12:\n        return str(6)\n    if n == 13:\n        return str(8)\n    if n == 14:\n        return str(7)\n    if n == 15:\n        return str(9)\n    if n == 16:\n        return str(8)\n    if n == 17:\n        return str(10)\n    if n == 18:\n        return str(9)\n    if n == 19:\n        return str(11)\n    if n == 20:\n        return str(10)\n    if n == 21:\n        return str(12)\n    if n == 22:\n        return str(11)\n    if n == 23:\n        return str(13)\n    if n == 24:\n        return str(12)\n    if n == 25:\n        return str(14)\n    if n == 26:\n        return str(13)\n    if n == 27:\n        return str(15)\n    if n == 28:\n        return str(14)\n    if n == 29:\n        return str(16)\n    if n == 30:\n        return str(15)\n    if n == 31:\n        return str(17)\n    if n == 32:\n        return str(16)\n    if n == 33:\n        return str(18)\n    if n == 34:\n        return str(17)\n    if n == 35:\n        return str(19)\n    if n == 36:\n        return str(18)\n    if n == 37:\n        return str(20)\n    if n == 38:\n        return str(19)\n    if n == 39:\n        return str(21)\n    if n == 40:\n        return str(20)\n    if n == 41:\n        return str(22)\n    if n == 42:\n        return str(21)\n    if n == 43:\n        return str(23)\n    if n == 44:\n        return str(22)\n    if n == 45:\n        return str(24)\n    if n == 46:\n        return str(23)\n    if n == 47:\n        return str(25)\n    if n == 48:\n        return str(24)\n    if n == 49:\n        return str(26)\n    if n == 50:\n        return str(25)\n    if n == 51:\n        return str(27)\n    if n == 52:\n        return str(26)\n    if n == 53:\n        return str(28)\n    if n == 54:\n        return str(27)\n    if n == 55:\n        return str(29)\n    if n == 56:\n        return str(28)\n    if n == 57:\n        return str(30)\n    if n == 58:\n        return str(29)\n    if n == 59:\n        return str(31)\n    if n == 60:\n        return str(30)\n    if n == 61:\n        return str(32)\n    if n == 62:\n        return str(31)\n    if n == 63:\n        return str(33)\n    if n == 64:\n        return str(32)\n    if n == 65:\n        return str(34)\n    if n == 66:\n        return str(33)\n    if n == 67:\n        return str(35)\n    if n == 68:\n        return str(34)\n    if n == 69:\n        return str(36)\n    if n == 70:\n        return str(35)\n    if n == 71:\n        return str(37)\n    if n == 72:\n        return str(36)\n    if n == 73:\n        return str(38)\n    if n == 74:\n        return str(37)\n    if n == 75:\n        return str(39)\n    if n == 76:\n        return str(38)\n    if n == 77:\n        return str(40)\n    if n == 78:\n        return str(39)\n    if n == 79:\n        return str(41)\n    if n == 80:\n        return str(40)\n    if n == 81:\n        return str(42)\n    if n == 82:\n        return str(41)\n    if n == 83:\n        return str(43)\n    if n == 84:\n        return str(42)\n    if n == 85:\n        return str(44)\n    if n == 86:\n        return str(43)\n    if n == 87:\n        return str(45)\n    if n == 88:\n        return str(44)\n    if n == 89:\n        return str(46)\n    if n == 90:\n        return str(45)\n    if n == 91:\n        return str(47)\n    if n == 92:\n        return str(46)\n    if n == 93:\n        return str(48)\n    if n == 94:\n        return str(47)\n    if n == 95:\n        return str(49)\n    if n == 96:\n        return str(48)\n    if n == 97:\n        return str(50)\n    if n == 98:\n        return str(49)\n    if n == 99:\n        return str(51)\n    if n == 100:\n        return str(50)\n    if n == 101:\n        return str(52)\n    if n == 102:\n        return str(51)\n    if n == 103:\n        return str(53)\n    if n == 104:\n        return str(52)\n    if n == 105:\n        return str(54)\n    if n == 106:\n        return str(53)\n    if n == 107:\n        return str(55)\n    if n == 108:\n        return str(54)\n    if n == 109:\n        return str(56)\n    if n == 110:\n        return str(55)\n    if n == 111:\n        return str(57)\n    if n == 112:\n        return str(56)\n    if n == 113:\n        return str(58)\n    if n == 114:\n        return str(57)\n    if n =="
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, X = list(map(int, stdin.split()))\n    cities = list(map(int, stdin.split()))\n    return str(max([city - X for city in cities]))"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Read number of cities\n    n, x = map(int, stdin.split())\n    # Read cities\n    cities = [int(c) for c in stdin.split()]\n\n    # Find the minimum distance to travel to each city\n    cities = [x - y for y in cities]\n    cities = [(c, d) for c, d in zip(cities, cities[1:])]\n    cities.append((0, cities[-1][1]))\n    cities.sort()\n\n    # Maximum possible distance\n    max_d = cities[-1][1]\n    # For each distance d:\n    for i in range(1, max_d + 1):\n        # If it is possible to visit all the cities\n        if all(c >= i for c, d in cities):\n            # Return maximum distance\n            return i\n    return 0"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if len(stdin) == 0:\n        return ''\n    if len(stdin) == 1:\n        return 'Yes'\n    if len(stdin) % 2 == 0:\n        return 'No'\n    half = len(stdin) // 2\n    head = stdin[:half]\n    tail = stdin[half + 1:]\n    if head == tail[::-1]:\n        return 'Yes'\n    head2 = stdin[len(stdin) - 2 * half - 1:len(stdin) - half - 1:-1]\n    if head == head2:\n        return 'Yes'\n    return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    middle = int(len(string) / 2)\n    left = string[:middle]\n    right = string[middle + 1 :]\n    return 'Yes' if left == right[::-1] else 'No'\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\""
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    if n == 1:\n        return \"Yes\"\n\n    P = S[:n//2]\n    Q = S[n//2:]\n\n    def is_palindrome(string: str) -> bool:\n        return string == string[::-1]\n\n    if is_palindrome(P) and is_palindrome(Q):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('akasaka')\n    'Yes'\n    \"\"\"\n    text = stdin.rstrip()\n    n = len(text)\n    if n % 2 == 0:\n        return 'No'\n    else:\n        a = text[: (n // 2)]\n        b = text[(n // 2) + 1 :]\n        if a == b[::-1]:\n            return 'Yes'\n        else:\n            return 'No'"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(0, len(s)):\n        if s[i]!= s[-i-1]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'Yes' if string is a strong palindrome, 'No' otherwise\"\"\"\n    string = stdin.rstrip('\\n')\n    return \"Yes\" if is_palindrome(string) and is_palindrome(string[::-1]) else \"No\"\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) % 2 == 0:\n        return \"No\"\n    return \"Yes\" if is_palindrome(s[:len(s) // 2]) and is_palindrome(s[len(s) // 2 + 1:]) else \"No\"\n\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(c) for c in stdin.split(\" \")]\n    print(a * b)"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    return str(int(a*b))"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a * b))"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [float(n) for n in stdin.split()]\n    print(int(a * b))"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    print(int(a * b))"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [float(i) for i in stdin.split()]\n    return str(int(a * b))"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(int(A * B))\n\nsolution(input())\n"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    a, b = map(int, line)\n    a = int(a * b)\n    b = str(b)\n    a = str(a)\n    while a[-1] == '0' and a[-2] == '0':\n        a = a[:-1]\n    return a\n"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    print(int(a * b))"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    print(int(a) * int(b))"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        n = int(stdin.readline().strip())\n        print(sum_of_ways_to_distribute_n_candies(n))\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_candies = int(stdin.readline())\n    if num_candies < 2 or num_candies > 2000000000:\n        return \"0\"\n    return str(factorial(num_candies) // (factorial(num_candies - 2) * 2))\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\")\n    '0'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    while t:\n        n = int(stdin)\n        result = 0\n        if n == 1 or n == 0:\n            result = 1\n        elif n == 2:\n            result = 2\n        else:\n            result = solution(stdin)\n        stdin = stdin[stdin.index(\"\\n\") + 1:]\n        print(result)\n        t -= 1\n\n\nsolution(\"1\\n\")\nsolution(\"2\\n\")\nsolution(\"3\\n\")\nsolution(\"4\\n\")\nsolution(\"5\\n\")\nsolution(\"6\\n\")\nsolution(\"7\\n\")\nsolution(\"8\\n\")\nsolution(\"9\\n\")\nsolution(\"10\\n\")"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return '1'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(solution_rec(stdin))\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, map(solution, stdin.split('\\n'))))"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 0\n    b = 0\n    while n > 0:\n        a = a + n % 3\n        b = b + (n // 3)\n        n = n // 3\n    if a > b:\n        return '1'\n    else:\n        return '0'\n"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(0, t):\n        n = int(stdin)\n        print(divisibility(n))\n    return \"\"\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n\n    n, m, s = list(map(int, stdin.split()))\n    edges = defaultdict(lambda: set())\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        edges[u].add(v)\n        edges[v].add(u)\n\n    visited = [False] * (n + 1)\n    visited[s] = True\n    visited[0] = True\n    min_roads = 0\n    for u in range(1, n + 1):\n        if not visited[u]:\n            path = [u]\n            visited[u] = True\n            while len(path)!= 0:\n                u = path.pop()\n                for v in edges[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        path.append(v)\n                        min_roads += 1\n    return min_roads if min_roads > 0 else '0'\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m, s = [int(x) for x in stdin[0].split()]\n    roads = {int(x.split()[0]): set([int(x) for x in x.split()[1:]]) for x in stdin[1:]}\n    reachable = set([s])\n    for i in range(m):\n        reachable |= roads[i + 1]\n    reachable -= set(roads.keys())\n    print(min(len(reachable), n - len(reachable)))\n    return \"\"\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.strip().split())\n    if n == s:\n        return '0'\n\n    # Build graph with adjacency list\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        u, v = map(int, stdin.strip().split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # We need to visit all nodes in order to find a cycle\n    visited = set()\n    for i in range(n):\n        if i in visited:\n            continue\n\n        stack = []\n        stack.append(i)\n        while stack:\n            cur = stack.pop()\n            visited.add(cur)\n            for neigh in graph[cur]:\n                if neigh in visited:\n                    return str(i)\n                elif neigh not in visited:\n                    stack.append(neigh)\n\n    return '0'\n\nsolution(stdin.read().strip())\n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\nn, m, s = map(int, stdin.split())\ngraph = [set() for _ in range(n)]\nfor _ in range(m):\n    u, v = map(int, stdin.split())\n    u -= 1\n    v -= 1\n    graph[u].add(v)\n    graph[v].add(u)\n    \ndef"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.strip().split(' ')]\n    roads = [[int(x) for x in line.strip().split(' ')] for line in stdin.strip().splitlines()]\n    if len(roads) < m:\n        print(0)\n        return\n    \n    def get_reachable(city, visited):\n        visited[city] = True\n        for road in roads:\n            if road[0] == city:\n                get_reachable(road[1], visited)\n        return\n\n    visited = [False for _ in range(n + 1)]\n    for city in range(1, n + 1):\n        get_reachable(city, visited)\n\n    return str(visited.count(True) - 1)"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split()]\n    roads = []\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        roads.append((u, v))\n    visited = set()\n    visited.add(s)\n    roads_needed = 0\n    for u, v in roads:\n        if u in visited or v in visited:\n            continue\n        if u == s or v == s:\n            roads_needed += 1\n        visited.add(u)\n        visited.add(v)\n    if roads_needed == 0:\n        return '0'\n    return str(roads_needed)\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split()]\n\n    graph = {}\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        if u in graph:\n            graph[u].add(v)\n        else:\n            graph[u] = {v}\n        if v in graph:\n            graph[v].add(u)\n        else:\n            graph[v] = {u}\n\n    if s in graph:\n        return 0\n    visited = set()\n    for city in graph:\n        if city not in visited:\n            bfs(graph, city, visited)\n\n    roads = 0\n    for city in graph:\n        if city!= s and city not in visited:\n            roads += 1\n\n    return roads\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n-----Test-----\n\nA few test cases:\n\nInput    Output\n0 0 1\n1 2\n2 1\n3 1\n3 2\n2 1\n4 5\n5 1\n1 4\n1 1\n2 4\n1 1\n0 4\n0 1\n2 4\n2 1\n0 1\n2 4\n1 1\n\n0 0 1\n1 2\n2 1\n3 1\n3 2\n2 1\n4 5\n5 1\n1 4\n1 1\n2 4\n1 1\n\n1\n1\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0\n1\n2\n1\n0\n0\n0"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('9 9 1')\n    3\n    '''\n    pass\n    "
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(\" \")]\n    a.sort(reverse=True)\n    d = {}\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n    keys = sorted(d.keys())\n    d2 = {}\n    for i in range(n):\n        if keys[i] not in d2:\n            d2[keys[i]] = d[keys[i]]\n        else:\n            d2[keys[i]] += d[keys[i]]\n    keys = sorted(d2.keys())\n    return str(len(keys))\n\nassert(solution(\"4\") == \"4\")\nassert(solution(\"3 2 4 1\") == \"4\")\nassert(solution(\"6\") == \"5\")\nassert(solution(\"1 1 1 4 4 4\") == \"5\")\nassert(solution(\"3 4 4 3 4 4 1\") == \"5\")\nassert(solution(\"2 2 2 2 2 2 2\") == \"5\")\nassert(solution(\"2 2 2 2 2 2 2 2\") == \"5\")\nassert(solution(\"5 4 5 5 5 5 5 5\") == \"5\")\nassert(solution(\"5 4 5 4 5 5 5 5\") == \"5\")\nassert(solution(\"5 5 5 5 5 5 5 5\") == \"5\")\nassert(solution(\"5 5 5 5 5 5 5 5 5\") == \"5\")\nassert(solution(\"1 1 1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1\") == \"5\")\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n\n    def get_weights() -> list[int]:\n        return [int(num) for num in stdin[0].split(' ')]\n\n    def get_team() -> list[int]:\n        return sorted(get_weights())\n\n    def get_team_weight() -> int:\n        return sum(get_weights())\n\n    def check_unique_weights() -> bool:\n        return len(set(get_weights())) == len(get_weights())\n\n    def make_team() -> list[int]:\n        weights = get_weights()\n        for index in range(len(weights)):\n            for i in range(1, weights[index]):\n                weights[index] -= i\n                if not check_unique_weights():\n                    weights[index] += i\n                    break\n        return [i for i in weights if i > 0]\n\n    max_team_weight = get_team_weight()\n    max_team = get_team()\n\n    for team_weight in range(max_team_weight, 1, -1):\n        team = make_team()\n        if team_weight == sum(team):\n            if team_weight < max_team_weight:\n                max_team = team\n                max_team_weight = team_weight\n\n    return str(max_team_weight)\n\n\nassert solution('4\\n3 2 4 1') == '4'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4') == '5'\nassert solution('6\\n1 1 1 4 4 4"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, _, *nums = list(map(int, stdin.split()))\n    nums = sorted(nums)\n    return max(nums[0] + nums[-1], nums[-1] + nums[0])\n\nassert(solution(stdin)) == 4\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_boxers = int(lines[0])\n    boxers = [int(x) for x in lines[1].split()]\n    boxers.sort(reverse = True)\n    cur_max = 0\n    result = 0\n    for i in range(num_boxers):\n        if cur_max + boxers[i] <= 150000:\n            cur_max += boxers[i]\n            result += 1\n    return result\n\nprint(solution(input()))"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = [int(x) for x in stdin.readline().split()]\n    print(find_maximum(weights))\n\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_weight = max(a)\n    new_a = [i for i in a if i < max_weight]\n    new_a.sort()\n    return str(len(new_a))\n\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 3 2 4 1\n   ... 3 2 4 1\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    max_weight = max(a)\n    max_group = sum(a)\n    for i in range(n):\n        if a[i] < max_weight:\n            max_weight -= a[i]\n            max_group += 1\n    return str(max_group)"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"\"))"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    n = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n\n    weights.sort()\n    weights.reverse()\n    print(len(weights))"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    boxers = [int(line) for line in stdin.split(\"\\n\")[1:]]\n    m = 0\n    for i in range(1, len(boxers) + 1):\n        m = max(m, boxers.count(i))\n    return str(m)"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(map(lambda x: \"0000\" + str(x) if len(str(x)) < 6 else \"000\" + str(x), range(1, int(stdin[0]) + 1)))"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    lines = stdin.split(\"\\n\")\n    n, m = map(int, lines[0].split())\n    prefectures = [int(p) for p in lines[1:]]\n    for i in range(m):\n        c = prefectures[i]\n        p = i + 1\n        if p >= 100000000:\n            p = p % 100000000\n        y = 0\n        while len(str(y)) < 6:\n            y = y * 10 + c\n        result += str(p) + str(y) + \"\\n\"\n    return result\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prefs = [int(x) for x in stdin.split()]\n    for i in range(n):\n        prefs[i] = prefs[i]*10**6 + i + 1\n    prefs.sort()\n    \n    city_ids = []\n    for i in range(n):\n        city_ids.append(prefs[i] * 10**6 + i + 1)\n    return '\\n'.join(map(str, city_ids))\n\nprint(solution(input()))"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = map(int, stdin.split())\n    prefectures = [n for i in range(m)]\n    cities = [{} for i in range(n)]\n    for i in range(m):\n        pref, year = map(int, stdin.split())\n        cities[pref - 1].setdefault(year, [])\n        cities[pref - 1][year].append(i + 1)\n    result = []\n    for i in range(n):\n        if len(cities[i]) == 0:\n            continue\n        result.extend([int(''.join(str(j) for j in sorted(cities[i][k]))) for k in cities[i]])\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P, Y = [], []\n    for _ in range(M):\n        P.append(int(stdin.readline()))\n        Y.append(int(stdin.readline()))\n    res = []\n    for i, (p, y) in enumerate(zip(P, Y)):\n        res.append(str(p).zfill(6) + str(i + 1).zfill(6))\n    return '\\n'.join(res)"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, m = stdin.split(' ')\n    n, p = [int(num) for num in _.split(' ')]\n    city_id_numbers = []\n    for i in range(int(m)):\n        prefecture, year = [int(num) for num in stdin.readline().split(' ')]\n        city_id_numbers.append((prefecture, year))\n    city_id_numbers.sort(key=lambda pair: pair[1])\n    prefecture_id_numbers = [str(prefecture_number) for _, prefecture_number in city_id_numbers]\n    return ''.join(prefecture_id_numbers)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split(' ')))\n    prefectures, cities = [], []\n    for _ in range(N):\n        p, y = list(map(int, stdin.split(' ')))\n        prefectures.append(p)\n        cities.append(y)\n\n    prefectures = sorted(set(prefectures))\n    cities = sorted(set(cities))\n\n    prefectures_id, cities_id = [], []\n    for i in range(len(prefectures)):\n        prefecture_id = str(prefectures[i]).zfill(6)\n        prefectures_id.append(prefecture_id)\n\n        for j in range(len(cities)):\n            city_id = str(cities[j]).zfill(6)\n            cities_id.append(city_id)\n\n    return '\\n'.join(cities_id)\n\nprint(solution(stdin.read()))\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    cities = [[int(x) for x in stdin.split(' ')] for _ in range(m)]\n    cities.sort(key=lambda x: x[1], reverse=True)\n    id_numbers = [str(cities[i][0]) if i < len(cities) else '0' * 6 for i in range(n)]\n    return ''.join(id_numbers)"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''2 3\n   ... 1 32\n   ... 2 63\n   ... 1 12''')\n    '000001000002\n    000001000001\n    '''\n    data = [line.split() for line in stdin.splitlines()]\n    N, M = [int(x) for x in data[0]]\n    prefectures, cities = [], {}\n    for _ in range(1, N + 1):\n        p, y = data[_][:2]\n        prefectures.append(p)\n        cities[p] = y\n    prefectures.sort()\n    P = prefectures[:M]\n    P_cities = [cities[p] for p in P]\n    P_cities.sort()\n    for _ in range(1, M + 1):\n        print(P[_] * 1000 + P_cities[_])"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    cities_per_prefecture = [list(map(int, stdin.split(' '))) for _ in range(m)]\n    cities_per_prefecture.sort(key=lambda x: x[0])\n    ids = [None] * m\n    for prefecture, year in cities_per_prefecture:\n        ids[prefecture-1] = '{:06d}'.format(year)\n    return ''.join(ids)"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    alive = set(range(1, N + 1))\n    health = {i: A for i in alive}\n    attackers = set()\n    while len(alive) > 1:\n        attackers = {random.sample(alive, 1)[0]}\n        health[random.sample(attackers, 1)[0]] = health[random.sample(attackers, 1)[0]] - A\n        if health[random.sample(attackers, 1)[0]] <= 0:\n            alive.discard(random.sample(attackers, 1)[0])\n    return health[alive.pop()]\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, *_ = [int(i) for i in stdin.strip().split(' ')]\n    return str(min([i for i in _ if i > 0]))"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(x) for x in stdin.split()]\n    # A will contain the health of monsters in the order, i.e., 1, 2, 3,..., N\n    # A[0] will contain health of the first monster, A[1] will contain health of the second monster\n    # and so on.\n    health = 0\n    # A will be modified in the following loop.\n    while len(A) > 1:\n        # In the following loop, A will be modified, i.e., health will be changed.\n        # Get the health of the current monster\n        health = A[0]\n        # Take the smallest of the health and the health of the monster attacking\n        health = min(health, A[1])\n        # Remove the health of the monster attacking from the health of the current monster\n        health -= A[1]\n        # Remove the health of the current monster\n        A[0] = health\n        # Remove the health of the current monster from the health of the monster attacking\n        A.pop(1)\n    # Since A contains the health of the last monster, the answer will be A[0]\n    return str(A[0])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    monster_healths = [int(x) for x in stdin.split()]\n    monsters_alive = set()\n    health = monster_healths[-1]\n    while len(monster_healths) > 1:\n        monsters_alive = set()\n        for monster in range(len(monster_healths)):\n            attack = random.randint(0, health)\n            if monster + 1 in monsters_alive:\n                health -= attack\n                monsters_alive.remove(monster + 1)\n                monster_healths[monster] -= attack\n            else:\n                monsters_alive.add(monster + 1)\n        health = monster_healths[-1]\n    return str(health)"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    monster_num = int(stdin.readline().strip())\n    monsters = list(map(int, stdin.readline().strip().split()))\n\n    while len(monsters) > 1:\n        attack_idx = randint(0, len(monsters)-1)\n        attack_monster = monsters[attack_idx]\n        monsters[attack_idx] = 0\n\n        for i in range(len(monsters)):\n            if i == attack_idx:\n                continue\n\n            monsters[i] -= attack_monster\n\n    return str(monsters[0])\n\nassert(solution('''4\n2 10 8 40''')) == '2'\nassert(solution('''10\n2 10 8 40''')) == '0'\nassert(solution('''5\n2 10 8 40''')) == '1'\nassert(solution('''10\n2 3 4 5 6 7 8 9 10''')) == '0'\nassert(solution('''10\n2 3 4 5 6 7 8 9 10''')) == '9'\nassert(solution('''4\n2 3 4 5''')) == '3'\nassert(solution('''6\n1 2 3 4 5 6''')) == '6'\nassert(solution('''7\n1 2 3 4 5 6 7''')) == '4'\nassert(solution('''4\n1 2 3 4''')) == '2'\nassert(solution('''4\n1 2 3''')) == '1'\nassert(solution('''3\n1 2 3''')) == '2'\nassert(solution('''5\n1 2 3 4 5''')) == '1'\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''')) == '9'\nassert(solution('''5\n10 10 10 10 10''')) == '10'\nassert(solution('''6\n1 2 3 4 5 6''')) == '3'\nassert(solution('''7\n1 2 3 4 5 6 7''')) == '4'\nassert(solution('''2\n10 10''')) == '1'\nassert(solution('''3\n10 10 10''')) == '3'\nassert(solution('''8\n10 10 10 10 10 10''')) == '10'\nassert(solution('''100\n
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    alive = set(map(int, stdin.readline().strip().split()))\n    while len(alive) > 1:\n        alive_copy = alive.copy()\n        attack = alive_copy.pop()\n        alive.discard(attack)\n        attack_health = attack\n        for monster in alive:\n            attack_health -= monster\n            if attack_health <= 0:\n                alive.remove(monster)\n    return str(min(alive))"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    \n    # check N is valid\n    if N < 2 or N > 10**5:\n        return \"Invalid input\"\n    \n    # check A is valid\n    for a in A:\n        if a < 1 or a > 10**9:\n            return \"Invalid input\"\n    \n    health = A[:]\n    \n    # first monster is alive, so loop for other monsters\n    for i in range(2, N + 1):\n        # attack\n        if health[i - 1] > health[i - 2]:\n            health[i - 2] -= health[i - 1]\n        else:\n            health[i - 2] -= health[i - 2]\n    \n    # return health\n    return str(max(health))"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return..."
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    from string import ascii_lowercase\n    from string import ascii_uppercase\n    from string import digits\n\n    names = ascii_lowercase + ascii_uppercase + digits\n    to_golorp = {name: name[1:] for name in names}\n    from_golorp = {name[1:]: name for name in names}\n    name = stdin[1:-1]\n\n    def eat(golorp, value):\n        golorp.stomach.append(value)\n\n    def get_value(golorp, value):\n        return golorp.stomach.popleft()\n\n    def eat_all(golorp):\n        return golorp.stomach.clear()\n\n    def get_all(golorp):\n        golorp.stomach.extend(reversed(list(golorp.stomach)))\n        return golorp.stomach\n\n    def get_longest(golorp):\n        return golorp.stomach.popleft()\n\n    def remove(golorp, value):\n        golorp.stomach.remove(value)\n\n    def valid_golorp(golorp):\n        return golorp.jaw.isalpha() and golorp.stomach\n\n    def get_golorp(golorp):\n        return golorp.jaw\n\n    golorp = None\n    for name in name:\n        if name in to_golorp:\n            if golorp is None:\n                golorp = Golorp(name, deque())\n            else:\n                golorp.jaw += to_golorp[name]\n        elif name in from_golorp:\n            eat(golorp, from_golorp[name])\n        else:\n            return \"false\"\n\n    if not valid_golorp(golorp):\n        return \"false\"\n\n    try:\n        while True:\n            if golorp.jaw == \"\":\n                break\n            value = names[get_value(golorp, names[get_longest(golorp)])]\n            eat(golorp, value)\n            remove(golorp, value)\n    except IndexError:\n        return \"false\"\n\n    return \"\".join(get_all(golorp))\n\n\nclass Golorp:\n    def __init__(self, jaw, stomach):\n        self.jaw = jaw\n        self.stomach = deque(stomach)\n"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n@pytest.mark.parametrize(\n    (\"stdin\", \"expected\"),\n    (\n        (\"?(_-_/___*__):-___>__.\", \"0010\"),\n        (\"?(__-_+_/_____):-__>__,_____<__.\", \"false\"),\n        (\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\", \"0250341\"),\n    ),\n)\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(map(str,sorted(\n        filter(lambda v: v > 0,\n               map(int, stdin.replace(\"?(\", \"\").replace(\")\", \"\"))))\n    )))\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return..."
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ntry:\n    assert (\n        solution(\n            \"\"\"?(_-_/___*__):-___>__.\n            \"\"\"\n        )\n        == \"0010\"\n    )\nexcept AssertionError:\n    print(\"Test 1 failed\")\n    pass\n\ntry:\n    assert (\n        solution(\n            \"\"\"?(__-_+_/_____):-__>__,_____<__.\n            \"\"\"\n        )\n        == \"false\"\n    )\nexcept AssertionError:\n    print(\"Test 2 failed\")\n    pass\n\ntry:\n    assert (\n        solution(\n            \"\"\"?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n            \"\"\"\n        )\n        == \"0250341\"\n    )\nexcept AssertionError:\n    print(\"Test 3 failed\")\n    pass\n\nprint(\"Tests passed successfully\")\n"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return ''\n    \n    # if not isinstance(stdin, str):\n    #     raise TypeError('expected string type, got {}'.format(type(stdin).__name__))\n    \n    golorp = '?(___/___*____):-___>__,_____<__'\n    \n    s = stdin.split('\\n')\n    \n    s = ''.join(s)\n    \n    golorp_len = len(golorp)\n    \n    eaten = 0\n    \n    while s:\n        sub = s[:golorp_len]\n        if sub == golorp:\n            s = s[golorp_len:]\n            eaten += 1\n        else:\n            break\n    \n    if eaten == golorp_len:\n        return '0101'\n    \n    if not s:\n        return 'false'\n    \n    s = s.split('>')\n    \n    golorp_len = len(golorp)\n    \n    eaten = 0\n    \n    while s:\n        sub = s[:golorp_len]\n        if sub == golorp:\n            s = s[golorp_len:]\n            eaten += 1\n        else:\n            break\n    \n    if eaten == golorp_len:\n        return 'false'\n    \n    if not s:\n        return 'false'\n    \n    s = s[0].split('<')\n    \n    golorp_len = len(golorp)\n    \n    eaten = 0\n    \n    while s:\n        sub = s[:golorp_len]\n        if sub == golorp:\n            s = s[golorp_len:]\n            eaten += 1\n        else:\n            break\n    \n    if eaten == golorp_len:\n        return 'false'\n    \n    if not s:\n        return 'false'\n    \n    s = s[0].split(',')\n    \n    golorp_len = len(golorp)\n    \n    eaten = 0\n    \n    while s:\n        sub = s[:golorp_len]\n        if sub == golorp:\n            s = s[golorp_len:]\n            eaten += 1\n        else:\n            break\n    \n    if eaten == golorp_len:\n        return 'false'\n    \n    if not s:\n        return 'false'\n    \n    s = s[0].split('-')\n    \n    golorp_len = len(golorp)\n    \n    eaten = 0\n    \n    while s:\n        sub = s[:golorp_len]\n        if sub == golorp:\n            s = s[golorp_len:]\n            eaten += 1\n        else:\n            break\n    \n    if eaten == golorp_len:\n        return 'false'\n    \n    if not s:\n        return 'false'\n    \n    s = s[0].split('+')\n    \n    golorp_len = len(golorp)\n    \n    eaten = 0\n    \n    while s:\n        sub = s[:golorp_len]\n        if sub == golorp:\n            s = s[golorp_len:]\n            eaten += 1\n        else:\n            break\n    \n    if eaten == golorp_len:\n        return 'false'\n    \n    if not s:\n        return 'false'\n    \n    s = s[0].split('*')\n    \n    golorp_len = len(golorp)\n    \n    eaten = 0\n    \n    while s:\n        sub = s[:golorp_len]\n        if sub == golorp:\n            s = s[golorp_len:]\n            eaten += 1\n        else:\n            break\n    \n    if eaten == golorp_len:\n        return 'false'\n    \n    if not s:\n        return 'false'\n    \n    s = s[0].split('(')\n    \n    golorp_len = len(golorp)\n    \n    eaten = 0\n    \n    while s:\n        sub = s[:golorp_len]\n        if sub == golorp:\n            s = s[golorp_len:]\n            eaten += 1\n        else:\n            break\n    \n    if eaten == golorp_len:\n        return 'false'\n    \n    if not s:\n        return 'false'\n    \n    s = s[0].split(')')\n    \n    golorp_len = len(golorp)\n    \n    eaten = 0\n    \n    while s:\n        sub = s[:golorp_len]\n        if sub == golorp:\n            s = s[golorp_len:]\n            eaten += 1\n        else:\n            break\n    \n    if eaten == golorp_len:\n        return 'false'\n    \n    if not s:\n        return 'false'\n    \n    s = s[0].split('_')\n    \n    golorp_len = len(golorp)\n    \n    eaten = 0\n    \n    while s:\n        sub = s[:golorp_len]\n        if sub == golorp:\n            s = s[golorp_len:]\n            eaten += 1\n        else:\n            break\n    \n    if eaten == golorp_len:\n        return 'false'\n    \n    if not s:\n        return 'false'\n    \n    s = s[0].split('\\\\')\n    \n    golorp_len = len(golorp)\n    \n    eaten = 0\n    \n    while s:\n        sub = s[:golorp_len]\n        if sub == golorp:\n            s = s[golorp_len:]\n            eaten += 1\n        else:\n            break\n    \n    if eaten == golorp_len:\n        return 'false'\n    \n    if not s:\n        return 'false'\n    \n    s = s[0].split('|')\n    \n    golorp_len = len(golorp)\n    \n    eaten = 0\n    \n    while s:\n        sub = s[:golorp_len]\n        if sub == golorp:\n            s = s[golorp_len:]\n            eaten += 1\n        else:\n            break\n    \n    if eaten == golorp_len:\n        return 'false'\n    \n    if not s:\n        return 'false'\n    \n    s = s[0].split('/')\n    \n    golorp_len = len("
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin[0]\n    golorp_name_length = len(golorp_name)\n    golorp_name_shape = golorp_name_length * 2 + 1\n\n    golorp_sequence = int(stdin[1:])\n    golorp_shape = golorp_sequence * 2 + 1\n    golorp_till_shape = golorp_shape + golorp_name_shape + 1\n    golorp_sequence_string = \"\"\n\n    for i in range(golorp_sequence):\n        golorp_sequence_string += str(i)\n\n    golorp_sequence_string = golorp_sequence_string * 2\n    golorp_sequence_string = golorp_sequence_string[:golorp_shape]\n\n    if golorp_sequence_string[:golorp_name_shape] == golorp_name:\n        golorp_sequence_string = golorp_sequence_string[golorp_name_shape:]\n        golorp_sequence_string = golorp_sequence_string[:golorp_till_shape]\n        golorp_sequence_string = golorp_sequence_string[golorp_name_length:]\n        if golorp_sequence_string.isdigit():\n            golorp_sequence_string = int(golorp_sequence_string)\n            return golorp_sequence_string\n        else:\n            return \"false\"\n    else:\n        return \"false\"\n\nprint(solution(\"?(___*__)\"))\nprint(solution(\"?(_/___)\"))\nprint(solution(\"?((_*__)-)\"))\nprint(solution(\"?(_+___)\"))\nprint(solution(\"?(_+_)\"))\nprint(solution(\"?(_/\"))\nprint(solution(\"?(_)\"))\nprint(solution(\"?(___)\"))\nprint(solution(\"?(____)\"))\nprint(solution(\"?(____/____)\"))\nprint(solution(\"?(____*____)\"))\nprint(solution(\"?(____+____)\"))\nprint(solution(\"?(____+____/____)\"))\nprint(solution(\"?(____*____*____)\"))\nprint(solution(\"?(____+____*____*____)\"))\nprint(solution(\"?(____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))\nprint(solution(\"?(____+____+____+____+____+____+____+____+____+____+____*____*____)\"))"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert_equal(solution(''), 'false')\nassert_equal(solution('?(_-_/___*__):-___>__'), '0010')\nassert_equal(solution('?(__-_+_/_____):-__>__,_____<__'), 'false')\nassert_equal(solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______'), '0250341')\n"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(s) for s in stdin.split()]\n\n    grid = []\n    for _ in range(n):\n        grid.append([int(s) for s in stdin.split()[1:]])\n\n    paths = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                paths += grid[i][j]\n            elif i == 0:\n                paths += grid[i][j] ^ grid[i][j - 1]\n            elif j == 0:\n                paths += grid[i][j] ^ grid[i - 1][j]\n            else:\n                paths += grid[i][j] ^ grid[i][j - 1] ^ grid[i - 1][j] ^ grid[i - 1][j - 1]\n            if paths == k:\n                return '1'\n    return '0'\n\nprint(solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n'''))\nprint(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n'''))"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    return \"\"\n\"\"\"\n\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n    total = 0\n    for i in range(m - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            xor = k ^ (a[i][j] ^ a[i][j + 1] ^ a[i + 1][j] ^ a[i + 1][j + 1])\n            if xor == 0:\n                total += 1\n    return total\n\nassert(solution('''3 4 2''') == 5)\nassert(solution('''3 4 1000000000000000000''') == 0)\nassert(solution('''3 4 12''') == 1)\nassert(solution('''100000 100000 100000 100000''') == 0)\nassert(solution('''1 1 10''') == 0)\nassert(solution('''1 1 1000000000000000000''') == 0)\nassert(solution('''1 1 10000000000000000000000000000000000''') == 0)\nassert(solution
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.strip().split(\" \")]\n    grid = [stdin.strip().split(\" \") for x in range(m)]\n    \n    dp = [[1] * (n + 1) for i in range(m + 1)]\n    \n    for i in range(m):\n        for j in range(n):\n            for x in range(n):\n                if i == j == x == 0:\n                    continue\n                else:\n                    if (grid[i][j] == 0) or (grid[i][j] == grid[x][j]):\n                        dp[i + 1][j + 1] += dp[i][j]\n                    else:\n                        if (grid[i][j] ^ grid[x][j]) == k:\n                            dp[i + 1][j + 1] += dp[i][j]\n    \n    return str(dp[m][n])"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(num) for num in stdin.split()]\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n    return count_paths(grid, k)\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    a = [[int(i) for i in stdin.split()] for j in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            a[i][j] ^= k\n\n    def f(i: int, j: int) -> int:\n        if i == j == 0:\n            return 1\n        elif i == 0:\n            return f(i, j - 1)\n        elif j == 0:\n            return f(i - 1, j)\n        else:\n            return f(i - 1, j) + f(i, j - 1)\n\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            res += f(i, j)\n\n    return res\n\n\nassert (solution('''3 3 11\n2 1 5\n7 10 0\n12 6 4''')) == 3\nassert (solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''')) == 5\nassert (solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''')) == 0\n"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.strip().split(\" \")]\n    lst = [int(i) for i in stdin.strip().split(\" \")]\n    \n    xor = 0\n    for i in range(m):\n        for j in range(n):\n            xor ^= lst[i]\n    if xor == k:\n        return 1\n    else:\n        return 0\n\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test_equal(self):\n        self.assertEqual(solution(stdin), '')\n"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n    return str(len(find_paths(grid, n, m, k)))\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve(r: int, c: int, k: int) -> int:\n        if r == n - 1 and c == m - 1:\n            return 1 if k == 0 else 0\n        else:\n            return sum(solve(r + 1, c, k ^ a[r + 1][c]) + solve(r, c + 1, k ^ a[r][c + 1]) for r in range(0, n - 1) for c in range(0, m - 1))\n\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    return str(solve(0, 0, k))"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    grid = [list(map(int, x.split())) for x in stdin.splitlines()]\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if grid[i - 1][j - 1]:\n                dp[i][j] += dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1]\n    return str(dp[n][m] & (2 ** k - 1))\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin[:]\n    for i in range(n, 0, -1):\n        t = t[:i][::-1] + t[i:]\n    return t\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    for _ in range(n // 2):\n        s = s[1:] + s[:1]\n    return s\n\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n-----Solution-----\n\"\"\"\nn = int(input())\nt = input()\n\nfor i in range(1, n):\n    if n % i == 0:\n        a = t[:i][::-1]\n        b = t[i:][::-1]\n        if a == b:\n            print(a)\n            exit()\n"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"rocesfedoc\")\n    'codeforces'\n    >>> solution(\"plmaetwoxesisiht\")\n    'thisisexampletwo'\n    >>> solution(\"z\")\n    'z'\n    '''\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    res = \"\"\n    for d in reversed(range(1, n + 1)):\n        res += s[d - 1::-1]\n    return res"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\ninp = stdin.read()\n\nn = int(inp)\n\ns = inp\n\nn = len(s)\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n-----\n\nNote:\nIt's guaranteed that the solution is unique.\n\nTest cases\n1\n5\nrocesfedoc\ncodeforces\ngolip\nitse\ngolip\nitse\nitse\ngolip\nitse\ngolip\ngolip\nitse\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ngolip\ng"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n    for d in range(n, 0, -1):\n        if d * d > n:\n            break\n        s = t[d:] + t[1:d]\n        if s == s[::-1]:\n            return s\n    return \"\"\n\n\n\n\"\"\""
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split())))\n\nassert solution(input()) == '873'\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split(' '))))\n\nassert(solution('5 14') == '19')\nassert(solution('381 492') == '873')\n"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    return str(a + b)\n\nassert(solution(\"1 2\") == \"3\")\nassert(solution(\"5 14\") == \"19\")\nassert(solution(\"381 492\") == \"873\")\n"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(\" \")]\n    return str(sum(range(a, b + 1)))"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(' '))\n    return str(a + b)\n\nassert(solution('5 14') == '19')\nassert(solution('381 492') == '873')\n\n\n\n-------Alternate Solutions------\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(s) for s in stdin.split())\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    return str(a + b)"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nn = int(input())\nexpr = input()\nprint(solution(expr))"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----Solution 1-----"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Brainfuck program that evaluates the expression.\"\"\"\n    if len(stdin) == 0:\n        return \"\"\n    expression = stdin.strip()\n    return Brainfuck().execute(expression)\n\nclass Brainfuck:\n    def __init__(self):\n        self.code = \"++++++++++[>+++++++>++++++++++<<<<-]>++.>+.+++++++.>++.<<5.>>+.>++.<<5.>>+.>++.<<5.>>+.>++.<<5.>>+.>++.<<5.>>+.>++.\"\n\n        # Set up the program memory.\n        self.program = [0] * 10000\n\n        # Set up the console.\n        self.console = [0] * 100\n\n    def execute(self, expression: str) -> str:\n        \"\"\"Execute the program from the expression.\"\"\"\n        # Set up the program memory.\n        self.program = [0] * 10000\n\n        # Set up the console.\n        self.console = [0] * 100\n\n        # Evaluate the program.\n        self._evaluate(expression)\n\n        # Return the result.\n        return \"\".join([chr(self.console[i]) for i in range(100)])\n\n    def _evaluate(self, expression: str) -> None:\n        \"\"\"Evaluate the expression and store it in the program memory.\"\"\"\n        # Evaluate the expression.\n        def evaluate(expression: str) -> str:\n            \"\"\"Evaluate the expression and return the result as a string.\"\"\"\n            # Loop over each token.\n            for token in expression.strip().split():\n                # Parse the token.\n                if token.startswith(\"+\"):\n                    return evaluate(token[1:]) + evaluate(expression[expression.index(token) + 1:])\n                elif token.startswith(\"-\"):\n                    return evaluate(token[1:]) - evaluate(expression[expression.index(token) + 1:])\n                elif token.isdigit():\n                    return ord(token) - ord(\"0\")\n            # Nothing to return.\n            return \"\"\n\n        # Evaluate the expression.\n        result = evaluate(expression)\n\n        # If the result is not empty, store it in the program memory.\n        if result:\n            self.program[len(self.program) // 2] = result\n\n    def _execute(self, code: str) -> None:\n        \"\"\"Execute the program.\"\"\"\n        # Loop over each command.\n        for command in code.strip().split(\",\"):\n            # Parse the command.\n            command, argument = command[1:], command[0]\n\n            # Execute the command.\n            if command == \">\":\n                self.console.pop()\n            elif command == \"<\":\n                self.console.insert(0, self.console.pop(0))\n            elif command == \"+\":\n                self.console.append(self.console.pop(0) + self.console.pop(0))\n            elif command == \"-\":\n                self.console.append(self.console.pop(0) - self.console.pop(0))\n            elif command == \".\":\n                self.console[len(self.console) // 2] = self.console.pop(0)\n            elif command == \"[\":\n                if self.console[len(self.console) // 2] == 0:\n                    while code[code.index(command) + 1]!= \"]\":\n                        code = code[code.index(command) + 1:]\n            elif command == \"]\":\n                if self.console[len(self.console) // 2]!= 0:\n                    while code[code.index(command) + 1]!= \"[\":\n                        code = code[code.index(command) + 1:]\n\n            # Store the command.\n            self.program[len(self.program) // 2] = ord(argument) - ord(\"0\")\n\n    def _write(self, code: str) -> None:\n        \"\"\"Write the program to the console.\"\"\"\n        # Write the command.\n        if code == \".\":\n            print(chr(self.console[len(self.console) // 2]), end=\"\")\n        elif code == \"[\":\n            print(\"<[<[\", end=\"\")\n        elif code == \"]\":\n            print(\"]>\\n\", end=\"\")\n        elif code == \"+\":\n            print(\"[+>\", end=\"\")\n        elif code == \"-\":\n            print(\"[-><-]<\", end=\"\")\n        else:\n            print(\"\", end=\"\")\n\n        # Write the command.\n        print(\"\".join([chr(self.program[i]) for i in range(len(self.program) // 2)]), end=\"\")\n\n        # Write the command.\n        if code == \".\":\n            print(chr(self.console[len(self.console) // 2]), end=\"\")\n        elif code == \"[\":\n            print(\"<[<[\", end=\"\")\n        elif code == \"]\":\n            print(\"]>\\n\", end=\"\")\n        elif code == \"+\":\n            print(\"[+>\", end=\"\")\n        elif code == \"-\":\n            print(\"[-><-]<\", end=\"\")\n        else:\n            print(\"\", end=\"\")\n\n    def _read(self, code: str) -> None:\n        \"\"\"Read the program from the console.\"\"\"\n        # Read the command.\n        if code == \".\":\n            self.console[len(self.console) // 2] = ord(input())\n        elif code == \"[\":\n            self.console.append(0)\n        elif code == \"]\":\n            self.console.pop(0)\n        elif code == \"+\":\n            self.console.append(self.console.pop(0) + self.console.pop(0))\n        elif code == \"-\":\n            self.console.append(self.console.pop(0) - self.console.pop(0))\n        elif code.isdigit():\n            self.console.append(int(code))\n        elif code == \">\":\n            self.console.append(ord(input()) - ord(\"0\"))\n        elif code == \"<\":\n            self.console.append(ord(input()) - ord(\"0\"))\n        else:\n            pass\n\n    def _get_code(self, code: str, argument: str) -> None:\n        \"\"\"Get the code.\"\"\"\n        # Get the instruction and argument.\n        instruction = code[1]\n        argument = code[2:]\n\n        # Write the instruction.\n        if instruction == \">\":\n            self._write(argument)\n        elif instruction == \"<\":\n            self._read(argument)\n        elif instruction == \"+\":\n            self._execute(argument)\n        elif instruction == \"-\":\n            self._execute(argument)\n        elif instruction == \".\":\n            print(argument, end=\"\")\n        elif instruction == \"[\":\n            if argument == \"0\":\n                self._write(argument)\n            el"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nFor the input data, the number of digits in the input data does not exceed 10, and the data is guaranteed to be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\nThe input data is always valid and will always be in the range 0..255.\nThe output data can be in the range 0..255.\n"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\nfrom itertools import islice\n\nfrom itertools import chain\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    for _ in range(N):\n        k = int(stdin.readline())\n\n\"\"\"\n\n__author__ = 'https://github.com/gitferry'\n"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"\"))\n\n\"\"\"\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nNO TESTS NEEDED\n\"\"\"\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    \n    res = []\n    for _ in range(n):\n        k = int(stdin.readline().strip())\n        res.append(k % 10)\n    \n    return ''.join(str(x) for x in res)\n    \n    \n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n\nimport sys\n\nlines = sys.stdin.readlines()\n\nq = int(lines[0])\n\nanswers = []\n\nfor i in range(1, q + 1):\n    k = int(lines[i])\n\n    answers.append(str(k % 10))\n\nprint(\"\\n\".join(answers))\n"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [1]\n    for i in range(1, n):\n        l.append(l[-1] * 10)\n    for _ in range(n):\n        k = int(stdin.readline())\n        print(l[k])\n    return ''\n\n\"\"\"\nfrom typing import List, Tuple\n\nfrom solutions.kyu_7.split_string_and_join import split_string_and_join\n\nNumber = int\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = \"112123123412345\"\n    for _ in range(n):\n        k = int(stdin)\n        print(s[k])\n    return \"\"\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n\nfrom typing import List\nfrom unittest import result\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        s = str(i)\n        if '7' in s and '5' in s and '3' in s:\n            count += 1\n    return count"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(list(filter(lambda x: is_shichi_go_san(int(x)), stdin.split()))))\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number, result = int(stdin), 0\n    for number in range(1, number + 1):\n        if sum([int(digit) for digit in str(number)]) == sum([int(digit) for digit in \"357\"]):\n            if sum([int(digit) for digit in str(number)]) == sum([int(digit) for digit in \"375\"]):\n                if sum([int(digit) for digit in str(number)]) == sum([int(digit) for digit in \"537\"]):\n                    if sum([int(digit) for digit in str(number)]) == sum([int(digit) for digit in \"573\"]):\n                        result += 1\n    return str(result)"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('575')\n    '4'\n    \"\"\"\n    n = int(stdin)\n    return str(len([num for num in range(1, n + 1) if is_shichi_gosan(num)]))\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum([7*7*3*(n-7*7*3) for i in range(1, n+1) if i % 7 == 0 and i % 3 == 0 and i % 7*3 == 0]))"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N * (N + 1) / 2)"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    count = 0\n    for i in range(1, n):\n        if (i % 7 == 0 or i % 5 == 0 or i % 3 == 0):\n            count += 1\n    print(count)\n    return \"\""
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(int(stdin.strip()) for stdin in stdin.split('\\n')) - set((7, 5, 3))))"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n):\n        if '7' in str(i) and '5' in str(i) and '3' in str(i):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(solution)"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    n = len(s)\n    return \"1\" if s == \"0\" * n else \"0\" * (n // 2) + \"1\" * (n % 2)"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    S = stdin.strip()\n    return None"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 0"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given an integer N.\n    Your task is to paint exactly N tiles, where each tile is painted black or white.\n    There are two types of tiles: odd and even.\n    The number of black tiles is equal to the number of black tiles you can paint.\n    The number of white tiles is equal to the number of white tiles you can paint.\n    In other words, if the number of black tiles is even, paint an even number of white tiles.\n    In other words, if the number of white tiles is even, paint an even number of black tiles.\n    The tiles are numbered from the bottom to the top.\n\n    Input:\n    The first line of the input contains a single integer T denoting the number of test cases.\n    The description of T test cases follows.\n    Each test case contains a single line containing the string S.\n    Output:\n    For each test case, output the minimum number of tiles that need to be painted to satisfy the condition.\n    \"\"\"\n    def calc_num_tiles(string: str) -> int:\n        \"\"\"Calculate the number of tiles needed to paint a string using odd/even rules.\n        Time Complexity: O(N)\n        Space Complexity: O(N)\n        \"\"\"\n        num_white, num_black = 0, 0\n        for c in string:\n            if c == '1':\n                num_black += 1\n            else:\n                num_white += 1\n        return min(num_black, num_white)\n\n    num_test_cases = int(stdin.readline())\n    for _ in range(num_test_cases):\n        num_tiles = calc_num_tiles(stdin.readline())\n        print(num_tiles)\n"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    tiles = stdin.strip()\n    count = 0\n    if tiles[0] == '1':\n        tiles = tiles[1:]\n        count += 1\n    for i in range(1, len(tiles)):\n        if tiles[i-1]!= tiles[i]:\n            tiles = tiles[i:]\n            count += 1\n    return count"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets a string S and returns the minimum number of tiles that need to be repainted\n    to satisfy the condition.\n    >>> solution(\"000\")\n    '1'\n    >>> solution(\"101\")\n    '0'\n    >>> solution(\"111\")\n    '0'\n    >>> solution(\"000\")\n    '1'\n    >>> solution(\"111\")\n    '1'\n    >>> solution(\"111\")\n    '1'\n    \"\"\"\n    return \"\".join([\"1\" if int(stdin[i]) else \"0\" for i in range(len(stdin))])\n"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    A = [int(x) for x in stdin.readline().strip().split()]\n    return \"APPROVED\" if not any(not (x % 3 or x % 5) for x in A) else \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(v) for v in stdin.readline().strip().split()]\n    \n    if all(a % 3 == 0 or a % 5 == 0 for a in A):\n        return 'APPROVED'\n    return 'DENIED'\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split()]\n    \n    for a in itertools.combinations(A, 2):\n        if (a[0] % 2 == 0) and (a[1] % 3 == 0 or a[1] % 5 == 0):\n            print('APPROVED')\n        else:\n            print('DENIED')\n    \n    return"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    if all(num % 2 == 0 for num in numbers) and all(num % 3 == 0 for num in numbers) or all(num % 5 == 0 for num in numbers):\n        return 'APPROVED'\n    else:\n        return 'DENIED'"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The even numbers written on the document are 6 and 10.\n    All of them are divisible by 3 or 5, so the immigrant should be allowed entry.\n    \"\"\"\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def test_divisible_by_3_or_5(x: int) -> bool:\n        return x % 3 == 0 or x % 5 == 0\n\n    n = stdin.readline().strip()\n    a = [int(stdin.readline().strip()) for _ in range(int(n))]\n    print('DENIED' if not all(map(test_divisible_by_3_or_5, a)) else 'APPROVED')"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(x) for x in stdin.split()]\n\n    for x in A:\n        if x % 2 == 0:\n            if x % 3 == 0 or x % 5 == 0:\n                print('APPROVED')\n            else:\n                print('DENIED')\n        else:\n            print('DENIED')\n"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    N = int(N)\n    A = [int(a) for a in stdin.readline().strip().split()]\n\n    if (all(num % 3 == 0 or num % 5 == 0 for num in A)):\n        print(\"APPROVED\")\n    else:\n        print(\"DENIED\")"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    for x in arr:\n        if x % 3 == 0 or x % 5 == 0:\n            print('APPROVED')\n        else:\n            print('DENIED')"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if stdin.replace('L', 'R').replace('U', 'D').replace('D', 'U').replace('R', 'D') == stdin else \"No\")"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if all(s[i] in (\"L\", \"R\", \"U\", \"D\") for i in range(1, len(s), 2)):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    n = len(stdin)\n    if n == 1:\n        return 'Yes'\n    if n > 100:\n        return 'No'\n    for i in range(n):\n        if i % 2 == 0:\n            if stdin[i] not in 'RUD':\n                return 'No'\n        else:\n            if stdin[i] not in 'UDL':\n                return 'No'\n    return 'Yes'"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_playable(stdin) else 'No'\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_right_side_up(char: str) -> bool:\n        return char in ('R', 'U', 'D')\n\n    def is_left_side_up(char: str) -> bool:\n        return char in ('L', 'U', 'D')\n\n    num_str = stdin.replace('D', 'L').replace('R', 'U').replace('L', 'D').upper()\n    return 'Yes' if all(is_right_side_up(char) or is_left_side_up(char) for char in num_str[1::2]) and \\\n           all(is_left_side_up(char) or is_right_side_up(char) for char in num_str[::2]) else 'No'"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Use a deque to store the characters we are interested in\n    # Hint: Use a string that keeps track of the previous character\n    pass"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.count('L') + stdin.count('R') + stdin.count('U') + stdin.count('D') % 2 == 0 else 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_easily_playable(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = [int(x) for x in stdin.strip().split(' ')]\n    return str(min(A * B * C * D * E, A * D + B * C * E, A * C + B * D * E, A * E + C * D * E, A * D * E))"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = int(lines[1])\n    b = int(lines[2])\n    c = int(lines[3])\n    d = int(lines[4])\n    e = int(lines[5])\n    return str(int((n - 1) * a + n * d + (n - 1) * e + a * b + b * c + c * d + d * e))\n"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A, B, C, D, E = map(int, stdin.readline().strip().split())\n    print(N * A * (N - 1) * (N - 2) / 2)\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.strip().split(' '))\n    return ''.join(map(str, solve(N, A, B, C, D, E)))\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c, d, e, f = [int(x) for x in stdin.split(\" \")]\n    \n    res = 0\n    for i in range(2, n):\n        res += a * i + b\n    res += n - 1\n    for i in range(2, n):\n        res += c * i + d\n    res += n - 1\n    for i in range(2, n):\n        res += e * i + f\n    res += n - 1\n    \n    return res\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n\"\"\"\n\nimport sys\nfrom typing import List\n\nsys.setrecursionlimit(10 ** 6)\n\nInp = List[int]\n\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A, B, C, D, E = (int(stdin.readline()) for _ in range(5))\n    return str(N*(N+1)//2 - B*E - C*D - D*A - E*A)\n\nprint(solution(stdin.read()))\n\"\"\"\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = (int(x) for x in stdin.split())\n    ans = n\n    for i in range(1, 7):\n        k = ans % (a + b + c + d + e)\n        if k > a and k > b and k > c and k > d and k > e:\n            ans += a + b + c + d + e\n        else:\n            ans += a + b + c + d + e - k\n    return str(ans)"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The problem can be solved with dynamic programming.\n    Every single state is either a wait state, a busy state, or a done state.\n    The wait state is defined by the constraint that there is not enough time to transfer.\n    The busy state is defined by the constraint that it is not possible to pass in another time.\n    The done state is defined by the constraint that there is no one in the city to transfer.\n    \"\"\"\n    N, A, B, C, D, E = [int(n) for n in stdin.split(' ')]\n    people = [A, B, C, D, E]\n    res = [1] * len(people)\n    for _ in range(N - 1):\n        res = [res[0] + people[1] if people[0] > 0 else res[1],\n               res[2] + people[3] if people[2] > 0 else res[3],\n               res[4] + people[5] if people[4] > 0 else res[5]]\n        people = [0, people[1] + people[2], people[3] + people[4], 0, 0]\n    print(max(res))\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    result = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i!= j:\n                if n % 10 == i or n % 10 == j:\n                    result += 1\n    return str(result)"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    return str(9**n - 8**n + 1)"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N = int(stdin.readline().strip())\n    print(N * (N - 1) * (N - 2) // 6 % (10 ** 9 + 7))\n"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(9 * (9 ** (n - 1)) + (9 - 9 * (9 - 1)))"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        A = list(map(int, stdin.readline().split()))\n        for i in range(10):\n            if A.count(i) == 0:\n                print(i)\n                break\n        else:\n            print(9)\n    return \"\""
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split(\"\\n\")[0]\n    print(2**int(n) - 2)"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str((9 * 10 ** (N - 1)) * 9)\n"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_p10(stdin))\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def isPrime(n: int) -> bool:\n        if n <= 3:\n            return n > 1\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    a = int(stdin.splitlines()[0])\n    c = 1\n    while True:\n        if isPrime(c):\n            if c >= a:\n                return str(c)\n        c += 1"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    def isPrime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**(1/2)), 2):\n            if n % i == 0:\n                return False\n        return True\n\n    cnt = 0\n    i = 3\n    while True:\n        if isPrime(i):\n            cnt += 1\n            if cnt == N:\n                return str(i)\n        i += 1"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    primes = [False, False] + [True] * (x - 1)\n    for i in range(2, x + 1):\n        if primes[i]:\n            for j in range(i * 2, x + 1, i):\n                primes[j] = False\n    return primes.index(True) + 2\n\nassert(solution(\"20\")) == 23\nassert(solution(\"2\")) == 3\nassert(solution(\"23\")) == 29\nassert(solution(\"10\")) == 13\nassert(solution(\"3\")) == 5\nassert(solution(\"34\")) == 37\nassert(solution(\"27\")) == 29\nassert(solution(\"29\")) == 31\nassert(solution(\"100\")) == 97\nassert(solution(\"1000\")) == 1007\nassert(solution(\"10000\")) == 10071\nassert(solution(\"999999\")) == 999997\nassert(solution(\"10000000\")) == 10000003\nassert(solution(\"100000000\")) == 1000000005\nassert(solution(\"1000000001\")) == 1000000005\nassert(solution(\"1000000000\")) == 10000000007\nassert(solution(\"10000000000\")) == 10000000009\nassert(solution(\"100000000000\")) == 100000000099\nassert(solution(\"1000000000000\")) == 100000000199\nassert(solution(\"1000000000000000000\")) == 1000000000000000000001\nassert(solution(\"10000000000000000000\")) == 1000000000000000000003\nassert(solution(\"1000000000000000000000\")) == 1000000000000000000005\n"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n    while True:\n        if isPrime(x):\n            return str(x)\n        x += 1\n\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num < 2:\n        return \"\"\n    primes = list(range(2, num + 1))\n    for i in primes:\n        if i!= primes[0]:\n            if i > primes[-1]:\n                return str(primes[0])\n            j = 0\n            while primes[j] * i <= primes[-1]:\n                primes[j] = primes[j] * i\n                j += 1\n    return str(primes[0])"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    \n    if num < 2:\n        return str(num)\n    \n    last_min = 1\n    for i in range(2, num):\n        if last_min == 1:\n            last_min = i\n        if i % last_min == 0:\n            last_min = 1\n    \n    return str(last_min)"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum prime number greater than or equal to X.\n\n    Args:\n        stdin (str): Input given from Standard Input\n\n    Returns:\n        str: Minimum prime number greater than or equal to X\n    \"\"\"\n    return str(min(x for x in range(1, int(stdin)) if isPrime(x)))\n\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 2:\n        return \"1\"\n    primes = [2, 3, 5, 7]\n    for i in range(2, x):\n        if i % primes[0]!= 0 and i % primes[1]!= 0 and i % primes[2]!= 0 and i % primes[3]!= 0:\n            primes.append(i)\n    return str(primes[-1])\n"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 2:\n        return \"2\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"3\"\n    if x == 4:\n        return \"5\"\n    if x == 5:\n        return \"5\"\n    return str(x)\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = [line.strip() for line in stdin.split('\\n')]\n    n = int(lines[0])\n    sequence = [int(i) for i in lines[1].split(' ')]\n    \n    return str(len(sequence) - 2)"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split(' ')))\n    #print(v)\n    if len(v) % 2!= 0:\n        return -1\n    v_1 = v[::2]\n    v_2 = v[1::2]\n    d = {}\n    for i in range(len(v_1)):\n        if v_1[i] in d.keys():\n            d[v_1[i]] += 1\n        else:\n            d[v_1[i]] = 1\n        if v_2[i] in d.keys():\n            d[v_2[i]] += 1\n        else:\n            d[v_2[i]] = 1\n    if len(d.keys()) == 2:\n        return 0\n    return min([abs(v[i] - v[i+2]) for i in range(len(v)-2)])\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split()))\n    v1 = v[::2]\n    v2 = v[1::2]\n    if len(v1) > len(v2):\n        v2 = v2 + [0] * (len(v1) - len(v2))\n    elif len(v1) < len(v2):\n        v1 = v1 + [0] * (len(v2) - len(v1))\n    count = 0\n    for i in range(len(v1)):\n        if v1[i]!= v2[i]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    v = [int(x) for x in stdin.readline().strip().split()]\n    v = sorted(v)\n    i = 0\n    count = 0\n    while i < n - 1:\n        if v[i]!= v[i + 1]:\n            count += 1\n        i += 2\n    print(count)\n\nsolution(input())\n"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3\\n3 1 3 2')\n    1\n    '''\n    n = int(stdin.strip())\n    v = list(map(int, stdin.strip().split()))\n    elements = {x: 1 for x in v[:n - 1]}\n    for i in range(n):\n        if elements.get(v[i]) is not None:\n            elements[v[i]] += 1\n        else:\n            elements[v[i]] = 1\n    return min(len(v) // 2, len(elements))"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n\n    if not 2 <= n <= 10**5:\n        raise ValueError\n\n    if not n % 2 == 0:\n        raise ValueError\n\n    count = 0\n    for i in range(0, n-2):\n        if arr[i]!= arr[i+2]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    unique = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                unique += 1\n    return str(n - unique)\n"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = [int(i) for i in stdin.split()]\n\n    if n % 2!= 0:\n        return 0\n\n    else:\n        elements_to_replace = int(n / 2)\n        # print(elements_to_replace)\n        # print(v)\n\n        for i in range(elements_to_replace):\n            if v[i] == v[i + 2]:\n                v[i] = v[i + 1]\n                v[i + 1] = v[i + 3]\n                v[i + 2] = v[i + 4]\n                v[i + 3] = v[i]\n                v[i + 4] = v[i + 2]\n        print(v)\n        return v"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    v = [int(stdin.readline().strip()) for _ in range(n)]\n    v.sort()\n    result = 0\n    for i in range(0, n, 2):\n        if i > 0 and v[i] == v[i - 2]:\n            continue\n        if i < n - 2 and v[i] == v[i + 2]:\n            continue\n        result += 1\n    return str(result)\n"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split()))\n    v.sort()\n    res = n\n    i = 0\n    j = 1\n    while j < n:\n        if v[i] == v[j]:\n            j += 1\n            continue\n        else:\n            res -= 1\n            v[i+1] = v[j]\n            j += 1\n            i += 2\n    print(res)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(n) for n in stdin.split()]\n    return str(minimum_mp(numbers[0], numbers[1], numbers[2], numbers[3]))\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(n) for n in stdin.split(' ')]\n    l = [int(n) for n in stdin.split(' ')]\n\n    def CMP(l):\n        for i in range(len(l) - 2):\n            l[i] += l[i + 1]\n        return sum(l)\n\n    def EXT(l):\n        return l + [l[-1] + 1]\n\n    def SHR(l):\n        return l[:-1]\n\n    def COM(l):\n        return [l[0] + l[1]] + l[2:]\n\n    best = 9999\n    for start in range(3, N):\n        for i in range(start, start + 3):\n            l_ = list(l)\n            l_[i] = CMP(l_[:i])\n            l_[i] += l_[i + 1]\n            l_[i] -= l_[i - 1]\n            l_[i] -= A\n            if i == start + 1:\n                l_[i] -= B\n            if i == start + 2:\n                l_[i] -= C\n            if l_[i] < best:\n                best = l_[i]\n                best_ = list(l_)\n    return str(best)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = [int(i) for i in stdin.split()]\n    bamboos = [int(i) for i in stdin.split()]\n    bamboos.sort()\n    min_mps = INF\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            new_mps = 0\n            new_bamboos = bamboos[:]\n            new_bamboos[i] += 1\n            new_bamboos[j] += 1\n            new_bamboos.sort()\n            new_mps = 10 * (a + b + c - new_bamboos[0] - new_bamboos[1])\n            if new_mps < min_mps:\n                min_mps = new_mps\n    return str(min_mps)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = [int(line) for line in stdin.split()]\n    return max(lines)\n\nassert(solution(input()) == max(solution(input()) for _ in range(int(input()))))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(n) for n in stdin.split()]\n    l = [int(n) for n in stdin.split()]\n    b = [(a, b) for a, b in zip(l[:-1], l[1:])]\n    l.append(A)\n    l.sort()\n    print(b)\n    return\n\nprint(solution(input()))\n"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    N, A, B, C = map(int, stdin.split(\" \"))\n    l = [int(x) for x in stdin.split(\" \")]\n\n    # Preprocess\n    for i in range(1, N):\n        l[i] += l[i-1]\n\n    # Find the number of MP required for target A, B, C\n    for i in range(N):\n        l[i] -= A\n        result += max(0, l[i])\n        l[i] += A\n\n    for i in range(N-2):\n        l[i+2] -= B\n        result += max(0, l[i+2])\n        l[i+2] += B\n\n    l[-1] -= C\n    result += max(0, l[-1])\n\n    return str(result)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, a, b, c = [int(x) for x in lines[0].split(\" \")]\n    lengths = [int(x) for x in lines[1].split(\" \")]\n    magic_mp = 0\n    current_length = 0\n    for length in lengths:\n        if current_length < length:\n            current_length += 1\n        else:\n            magic_mp += 2\n            current_length -= 1\n    return str(magic_mp)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = tuple(map(int, stdin.split()))\n    ls = tuple(map(int, stdin.split()))\n    ls = ls[:n]\n\n    max_c = max(a, b, c)\n    min_c = min(a, b, c)\n    tot_c = max_c + min_c\n    tot_c_min = 3 * max_c - 1\n    magic = tot_c_min - max_c\n\n    if magic <= 0:\n        return 0\n\n    magic_used = magic\n\n    while magic > 0:\n        magic_used += magic\n        magic -= 1\n\n    return magic_used"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    S = stdin.readline().strip()\n    print(''.join(sorted(S, key=lambda s: ord(s) + N)))"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    res = \"\"\n\n    for c in s:\n        c = ord(c)\n        if c < 65:\n            res += chr(c + 26)\n        else:\n            res += chr(c - 26)\n\n    return res"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:]\n    for i in range(1, n + 1):\n        s = s[-1] + s[:-1]\n    return s\n\nassert(solution(input()) == solution(input()))\nprint(solution(input()))\n"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length = stdin.strip()\n    length = int(length)\n    s = stdin.strip()\n    out = ''\n    for i in range(0, len(s)):\n        tmp = s[i:] + s[:i]\n        out += tmp\n    return out"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(stdin)\n    i = 0\n    while i < len(l):\n        n = n % 26\n        if l[i] == 'Z':\n            l[i] = 'A'\n        else:\n            l[i] = chr(ord(l[i]) + n)\n        n += 1\n        i += 1\n    return ''.join(l)"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    number = int(stdin.readline().strip())\n    alphabet = stdin.readline().strip()\n    for i in range(len(alphabet)):\n        if i + number >= len(alphabet):\n            result += alphabet[i]\n            break\n        result += alphabet[i + number]\n    print(result)\n"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    shift = int(stdin)\n    characters = list(stdin.strip())\n    return \"\".join(chr(ord(\"A\") + (ord(x) - ord(\"A\") - shift) % 26) for x in characters)"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin.strip()\n    result = string[::-1]\n    for i in range(1, n + 1):\n        char = string[i - 1]\n        result = result[:i - 1] + char + result[i:]\n    return result"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    result = \"\"\n    for i in range(0, len(S)):\n        result += chr((ord(S[i]) + N - 65) % 26 + 65)\n    print(result)"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [None] * n\n    while True:\n        line = stdin.readline().strip()\n        if not line:\n            break\n        a[:] = map(int, line.split())\n        \n        line = stdin.readline().strip()\n        if not line:\n            break\n        b = list(map(int, line.split()))\n        \n        j = 0\n        for i in range(1, len(a) + 1):\n            if a[i - 1] in b:\n                while j < len(b) and b[j] % a[i - 1]!= 0:\n                    j += 1\n                a[i - 1] = b[j]\n        \n        print(*a)\n    return ''"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from math import log10\n    n = int(stdin.readline())\n    b = [int(c) for c in stdin.readline().split()]\n    b_l = len(b)\n    count = [0] * (b_l + 1)\n    for i in range(2, b_l + 1):\n        prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            count[i] = 1\n        else:\n            p_count = 0\n            for j in range(2, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    p_count += 1\n            if p_count > 0:\n                count[i] = p_count + 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = b[(i - 1) % b_l]\n    a = [0] * n\n    for i in range(n):\n        for j in range(count[i]):\n            a[i] = b[(i - 1) % b_l]\n            b[(i - 1) % b_l] += 1\n    return''.join([str(c) for c in a])\n    \nassert(solution(\"\"\"\n3\n3 5 2 3 2 4\n\"\"\") == \"3 4 2\")\nassert(solution(\"\"\"\n1\n2750131 199999\n\"\"\") == \"199999\")\nassert(solution(\"\"\"\n1\n3 6\n\"\"\") == \"6\")\nassert(solution(\"\"\"\n1\n1000000000 10006144 23262663\n\"\"\") == \"1000000000 1006144 23362663\")"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    c = [2] * n\n    for i in range(n):\n        c[i] = a[i]\n        while a[i] % c[i] == 0:\n            c[i] *= 2\n    def factor(n):\n        if n == 1:\n            return c\n        if n % 2 == 0:\n            return factor(n // 2)\n        i = 0\n        while 2 ** i <= n:\n            if n % (2 ** i) == 0:\n                return factor(n // (2 ** i)) + factor(n // (2 ** i))\n            i += 1\n    return \" \".join(str(x) for x in factor(b[0]))\n"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # pass\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n\n    a, b = b, a\n    n = len(b)\n\n    for i in range(n):\n        a_i = a[i]\n        if is_prime(a_i):\n            b.append(a_i)\n        else:\n            b.append(get_divisor_greatest(a_i))\n\n    return''.join([str(x) for x in b])\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [int(num) for num in stdin.strip().split(\" \")]\n    primes = get_primes(b)\n    print(\" \".join([str(p) for p in primes]))\n    return \"\""
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split(\" \")))\n    p = []\n    for i in range(2, int(max(b) ** 0.5) + 1):\n        if b[i] == i:\n            p.append(i)\n            while i * i <= max(b):\n                if b[i * i] == i * i:\n                    p.append(i * i)\n                i += 1\n    p.sort()\n    for i in p:\n        b.append(i)\n    for _ in range(n):\n        b.append(b.pop(0))\n    return \" \".join(map(str, b))\n\nassert(solution(stdin) == stdin)\n"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_next_prime(number: int) -> int:\n        if number % 2 == 0:\n            return 2\n        for i in range(3, number + 1, 2):\n            if number % i == 0:\n                return i\n\n    line = stdin.readline().strip().split()\n    n = int(line[0])\n    numbers = line[1:]\n    a = [int(number) for number in numbers]\n\n    index = [0] * len(a)\n    result = [0] * len(a)\n    i = 1\n    while i <= n:\n        p = get_next_prime(a[index[i - 1]])\n        while p and p > a[index[i - 1]]:\n            index[i] += 1\n            if index[i] == len(a):\n                index[i] = 0\n            p = get_next_prime(a[index[i - 1]])\n\n        result[index[i]] = p\n        i += 1\n\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [int(x) for x in stdin.split()]\n    \n    def is_prime(x):\n        if x < 2:\n            return False\n        return all(x % i!= 0 for i in range(2, x))\n    \n    primes = [2]\n    for x in range(3, 100000000, 2):\n        if is_prime(x):\n            primes.append(x)\n    \n    primes = sorted(primes)\n    \n    ret = []\n    for i in range(n):\n        x = b[i]\n        p = 0\n        while primes[p] <= x:\n            if x % primes[p] == 0:\n                ret.append(primes[p])\n                x //= primes[p]\n            else:\n                p += 1\n        ret.append(x)\n    return \" \".join(str(x) for x in ret)"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    a = [int(x) for x in stdin.readline().split()]\n    a = a[:n]\n    while len(a) < n * 2:\n        a += primes[:len(primes) // 2]\n        primes = primes[len(primes) // 2:]\n    shuffle(a)\n    print(*a)\n    return ''"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split(' '))\n    students = [int(stdin.strip()) for stdin in stdin.strip().split(' ')]\n    results = {0: 1, 1: 2}\n    all_skills = set(students)\n    while True:\n        for i in range(k, len(students)):\n            student_skill = students[i]\n            if student_skill in all_skills:\n                all_skills.remove(student_skill)\n                results[results[i]] = student_skill\n        if len(all_skills) == 0:\n            break\n        all_skills = sorted(all_skills, reverse=True)\n        for i in range(k - 1):\n            results[results[i]] = all_skills[i]\n    return ''.join(map(str, [results[i] for i in range(1, len(students) + 1)]))\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Converts an input string to a string of 1s and 2s (join the team)\n    \"\"\"\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    # sort students by skills\n    skills.sort()\n    # build left and right array\n    l, r = [skills[0]], [skills[-1]]\n    for i in range(1, n):\n        if skills[i] > l[0]:\n            l.append(skills[i])\n        else:\n            l.insert(0, skills[i])\n    for i in range(n-2, -1, -1):\n        if skills[i] > r[0]:\n            r.append(skills[i])\n        else:\n            r.insert(0, skills[i])\n    # turn into string\n    res = \"\"\n    for i in range(k):\n        res += str(1 if i < len(l) else 2)\n    for i in range(k, n):\n        res += str(1 if i < len(r) else 2)\n    return res"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    if len(line) < 2:\n        raise Exception('Too few lines')\n    n, k = [int(i) for i in line[0].split(' ')]\n    if k > n:\n        raise Exception('k > n')\n    a = [int(i) for i in line[1].split(' ')]\n    return ''.join(str(1 if i < k else 2) for i in range(n))"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(num) for num in stdin.split()]\n    n, k = stdin[0], stdin[1]\n    stdin = stdin[2:]\n    stdin = sorted(stdin)\n    n -= 1\n    a = stdin[:n]\n    a = [a[i] for i in range(n, 0, -1)]\n    b = stdin[n + 1:]\n    b = [b[i] for i in range(n, 0, -1)]\n    while True:\n        print(a, b)\n        n = len(a)\n        n -= 1\n        a = a[:n]\n        a = [a[i] for i in range(n, 0, -1)]\n        b = b[:n]\n        b = [b[i] for i in range(n, 0, -1)]\n        if len(a) == 0:\n            break\n    a = a[-1]\n    b = b[-1]\n    if a > b:\n        return '11' * n + '1' + '2' * n\n    else:\n        return '22' * n + '2' + '1' * n"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = []\n    while a:\n        k -= 1\n        i = 0\n        for i in range(n):\n            if a[i] == max(a[:i] + a[i + 1:]):\n                break\n        res.append(str(1 if i % 2 else 2))\n        a = a[i + 1:] + a[:i]\n    return \"\".join(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    m = len(a)\n    t = []\n    for i in range(m):\n        if a[i] == max(a):\n            t.append(i)\n    if k == 0:\n        if len(t) == 1:\n            return ''.join([str(1) for _ in range(n)])\n        else:\n            return ''.join([str(2) for _ in range(n)])\n    if len(t) < k:\n        return ''.join([str(1) for _ in range(n)])\n    else:\n        return ''.join([str(2) for _ in range(n)])\n    "
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(int(x) for x in stdin.split())\n    a = tuple(int(x) for x in stdin.split())\n    a = sorted(a)\n    a = [a[0]] + a[:k] + a[n - k:] + a[n - k + 1:]\n    team = 1\n    result = []\n    for i in range(n):\n        result.append(team)\n        if i > k - 1:\n            team = 2\n        else:\n            team = 1\n    result = ''.join(str(x) for x in result)\n    print(result)"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = list(map(int, stdin.split()))\n    students.sort()\n    if k > n / 2:\n        return ''.join(map(str, [1] * n))\n\n    stack = []\n    for i in range(n):\n        if students[i] not in stack:\n            stack.append(students[i])\n            if len(stack) > k:\n                stack.pop()\n        if len(stack) > k:\n            return ''.join(map(str, [2] * n))\n\n    return ''.join(map(str, [1] * n))\n\n\nassert(solution('2 2\\n1 2 3 4\\n') == '22111')\nassert(solution('5 1\\n2 1 3 5 4\\n') == '1121122')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '112112222')\nassert(solution('5 2\\n2 4 5 3 1\\n') == '11112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '112121212')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n') == '21112')\nassert(solution('7 1\\n7 2 1 3 5 4 6\\n') == '11212122')\nassert(solution('5 1\\n2 4 5 3 1\\n"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n == 1:\n        return \"22222\"\n    a = [int(x) for x in stdin.split()]\n    team1 = [0] * n\n    team2 = [0] * n\n    remaining_skill = set(range(1, n + 1))\n    for i in range(n):\n        max_skill = max(a)\n        max_skill_index = a.index(max_skill)\n        team1[i] = max_skill_index + 1\n        remaining_skill.remove(max_skill_index)\n        a[max_skill_index] = 0\n    for i in range(n):\n        max_skill = max(a)\n        max_skill_index = a.index(max_skill)\n        team2[i] = max_skill_index + 1\n        remaining_skill.remove(max_skill_index)\n        a[max_skill_index] = 0\n    result = \"\"\n    for i in range(n):\n        if team1[i] == 1:\n            result += \"1\"\n        else:\n            result += \"2\"\n    return result"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def build_teams(n, k, skills):\n        max_skill = max(skills)\n        teams = [[] for _ in range(max_skill + 1)]\n        for skill in skills:\n            teams[skill].append(skill)\n\n        teams = [team for team in teams if team]\n\n        return teams\n\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n\n    teams = build_teams(n, k, skills)\n\n    return ''.join(map(str, teams))\n\n\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(solution_naive(a))\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                continue\n            if a[i] == a[j]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    a.sort()\n    n -= 1\n    if n == 0:\n        return str(1)\n    \n    ret = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and a[j] == a[j-1]:\n            j += 1\n        \n        if j - i > 1:\n            ret += j - i - 1\n        i = j\n    \n    return str(ret)"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(stdin.readline()) for _ in range(n)]\n    count = 0\n    for i in range(n):\n        if i == 0:\n            if a[i] == a[i + 1]:\n                count += 1\n        elif i == n - 1:\n            if a[i] == a[i - 1]:\n                count += 1\n        else:\n            if a[i] == a[i - 1]:\n                count += 1\n            if a[i] == a[i + 1]:\n                count += 1\n    print(count % 998244353)\n\nsolution('''5\n1 2 1 2 3\n''')\n"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = stdin.readline().strip().split()\n    res = 0\n    i = 0\n    while i < len(a):\n        k = i\n        while i + 1 < len(a) and int(a[i]) == int(a[i + 1]):\n            i += 1\n        if i - k + 1 == i + 1:\n            res += 1\n        i += 1\n    print(res)\n    return \"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    mono_count = 0\n\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            mono_count += 1\n    mono_count += 1 if a[0] == a[n - 1] else 0\n    mono_count += 1 if a[n - 1] == a[0] else 0\n\n    return str(mono_count)\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(((a.count(a[i - 1]) * a.count(a[i])) % 1000000007) % 10007)\n\nassert solution('1\\n1') == '1'\nassert solution('2\\n1') == '2'\nassert solution('3\\n1') == '4'\nassert solution('4\\n1') == '8'\nassert solution('5\\n1') == '16'\nassert solution('6\\n1') == '32'\nassert solution('7\\n1') == '64'\nassert solution('8\\n1') == '128'\nassert solution('9\\n1') == '256'\nassert solution('10\\n1') == '512'\nassert solution('11\\n1') == '1024'\nassert solution('12\\n1') == '2048'\nassert solution('13\\n1') == '4096'\nassert solution('14\\n1') == '8192'\nassert solution('15\\n1') == '16384'\nassert solution('16\\n1') == '32768'\nassert solution('17\\n1') == '65536'\nassert solution('18\\n1') == '131072'\nassert solution('19\\n1') == '262144'\nassert solution('20\\n1') == '524288'\nassert solution('21\\n1') == '1048576'\nassert solution('22\\n1') == '2097152'\nassert solution('23\\n1') == '4194304'\nassert solution('24\\n1') == '8388608'\nassert solution('25\\n1') == '16777216'\nassert solution('26\\n1') == '33554432'\nassert solution('27\\n1') == '67108864'\nassert solution('28\\n1') == '134217728'\nassert solution('29\\n1') == '268435456'\nassert solution('30\\n1') == '536870912'\nassert solution('31\\n1') == '1073741824'\nassert solution('32\\n1') == '2147483648'\nassert solution('33\\n1') == '4294967294'\nassert solution('34\\n1') == '8589934592'\nassert solution('35\\n1') == '17179869184'\nassert solution('36\\n1') == '34359738368'\nassert solution('37\\n1') == '68719476734'\nassert solution('38\\n1') == '1397778764'\nassert solution('39\\n1') == '281474976710'\nassert solution('40\\n1') == '720575940379'\nassert solution('41\\n1') == '14073748835'\nassert solution('42\\n1') == '28823037615'\nassert solution('43\\n1') == '879609302299'\nassert solution('44\\n1') == '175921860444'\nassert solution('45\\n1') == '351843720888'\nassert solution('46\\n1') == '221264746081'\nassert solution('47\\n1') == '788177666282'\nassert solution('48\\n1') == '17179869184'\nassert solution('49\\n1') == '351843720888'\nassert solution('50\\n1') == '879609302299'\nassert solution('51\\n1') == '175921860444'\nassert solution('52\\n1') == '221264746081'\nassert solution('53\\n1') == '788177666282'\nassert solution('54\\n1') == '17179869184'\nassert solution('55\\n1') == '351843720888'\nassert solution('56\\n1') == '879609302299'\nassert solution('57\\n1') == '221264746081'\nassert solution('58\\n1') == '788177666282'\nassert solution('59\\n1') == '17179869184'\nassert solution('60\\n1') == '351843720888'\nassert solution('61\\n1') == '879609302299'\nassert solution('62\\n1') == '221264746081'\nassert solution('63\\n1') == '788177666282'\nassert solution('64\\n1') == '17179869184'\nassert solution('65\\n1') == '351843720888'\nassert solution('66\\n1') == '879609302299'\nassert solution('67\\n1') == '221264746081'\nassert solution('68\\n1') == '788177666282'\nassert solution('69\\n1') == '17179869184'\nassert solution('70\\n1') == '351843720888'\nassert solution('71\\n1') == '879609302299'\nassert solution('72\\n1') == '221264746081'\nassert solution('73\\n1') == '788177666282'\nassert solution('74\\n1') == '17179869184'\nassert solution('75\\n1') == '351843720888'\nassert solution('76\\n1') == '879609302299'\nassert solution('77\\n1') == '221264746081'\nassert solution('78\\n1') == '788177666282'\nassert solution('79\\n1') == '17179869184'\nassert solution('80\\n1') == '351843720888'\nassert solution('81\\n1') == '879609302299'\nassert solution('82\\n1') == '221264746081'\nassert solution('83\\n1') == '788177666282'\nassert solution('84\\n1') == '17179869184'\nassert solution('85\\n1') == '351843720888'\nassert solution('86\\n1') == '879609302299'\nassert solution('87\\n1') == '221264746081'\nassert solution('88\\n1') == '788177666282'\nassert solution('89\\n1') == '17179869184'\nassert solution('90\\n1') == '351843720888'\nassert solution('91\\n1') == '879609302299'\nassert solution('92\\n1') == '221264746081'\nassert solution('93\\n1') == '788177666282'\nassert solution('94\\n1"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split(' ')]\n    count = 0\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            count += 1\n    return str(count %998244353)"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(x) for x in stdin.readline().strip().split()]\n    res = 0\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                res += 1\n    return str(res % MOD)"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    numbers = list(map(int, stdin.readline().strip().split(' ')))\n    return str(solution_naive(n, numbers))\n\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = [int(x) for x in stdin.split()]\n\n    good_seq = []\n    for el in seq:\n        flag = False\n        for i in range(2, el+1):\n            if el % i == 0 and not isPowerOfTwo(i):\n                flag = True\n                break\n        if not flag:\n            good_seq.append(el)\n\n    return '\\n'.join(map(str, good_seq))\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().split()))\n\nprevious = A[:]\n\ni = 1\nwhile i < N:\n    current = previous[:]\n    for j in range(N):\n        if j!= i:\n            if 2 ** (j - i) > previous[j] + previous[j - i]:\n                current[j] += 2 ** (j - i)\n    if current == previous:\n        break\n    previous = current\n    i += 1\n\nprint(N - i)\n"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return '0'\n    elif n == 2:\n        return '1'\n    else:\n        a = stdin.split()\n        a = [int(x) for x in a]\n        # s = [a[0]]\n        i = 1\n        while i < n:\n            if a[i] & a[i-1] == 0:\n                a[i] -= 1\n            else:\n                a[i] |= a[i-1]\n                a[i-1] = 0\n            i += 1\n        # print(s,a)\n        return str(len(a)-a.count(0))\n\nT = int(input())\nfor _ in range(T):\n    print(solution(input()))\n"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    a = list(map(int, stdin.split()))\n\n    min_len = n\n    for i in range(n):\n        left = a[i:]\n        left_len = len(left)\n        for j in range(1, left_len):\n            left[j] += left[j-1]\n            if left[j] == 2 ** left[0]:\n                left_len = j\n                break\n        if left_len < min_len:\n            min_len = left_len\n    return min_len\n\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    d = [1 for x in range(n)]\n    for i in range(1, n):\n        for j in range(i, 0, -1):\n            if a[j] > a[j - 1]:\n                d[j] += d[j - 1]\n            if a[j] == a[j - 1] and a[j - 1] == 2:\n                d[j] += d[j - 1]\n    if 2**d[0] < n:\n        return str(int(d[0]))\n    else:\n        return str(int(0))\n\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(len(stdin.strip().split()))"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n\"\"\"\n\nn = int(input())\ns = list(map(int,input().split()))\n\nk = 0\nfor i in range(n):\n    if 2 ** k not in s:\n        k += 1\n        if 2 ** k in s:\n            k += 1\n        else:\n            break\nprint(k)\n"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('0')"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    res = 0\n    for i in range(1, len(s)):\n        if s[i] == '1':\n            res += 1\n    return res"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = stdin\n    if N == 1:\n        return '0'\n    if N == 2:\n        return '1'\n\n    cubes = []\n    i = 0\n    while i < N:\n        cubes.append(int(s[i]))\n        i += 1\n\n    cubes = cubes[::-1]\n    N = len(cubes)\n\n    i = 0\n    while i < N - 1:\n        if cubes[i] == 0 and cubes[i + 1] == 0:\n            cubes[i] = 1\n            cubes[i + 1] = 1\n            i += 2\n        elif cubes[i] == 1 and cubes[i + 1] == 0:\n            cubes[i] = 0\n            cubes[i + 1] = 1\n            i += 2\n        else:\n            i += 1\n\n    return ''.join(map(str, cubes))"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = len(stdin)\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    s = stdin\n    memo = {(0, 0): 1, (1, 1): 2}\n    max_val = 0\n    for i in range(l):\n        for j in range(i, l):\n            new_val = solve(i, j, memo, s)\n            max_val = max(new_val, max_val)\n    return str(max_val)\n\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_recursive(stdin))\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip()\n    n = int(inputs)\n    arr = []\n    c = 0\n    while c < n:\n        arr.append(list(inputs[c]))\n        c += 1\n    for x in range(len(arr)):\n        for y in range(len(arr)):\n            if y+1 < len(arr) and arr[x][y] == '0' and arr[x][y+1] == '1':\n                if arr[x+1][y] == '0' and arr[x+1][y+1] == '1':\n                    arr[x][y], arr[x][y+1] = '0', '0'\n                    arr[x+1][y], arr[x+1][y+1] = '1', '1'\n    return ''.join(''.join(x) for x in arr)\n\nprint(solution(input()))"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(int(c) for c in stdin))"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution())\n"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    cards = [int(x) for x in stdin.split()]\n    cards.sort()\n    max_valid = 0\n\n    for i in range(0, n):\n        left = i\n        right = n - 1 - i\n        if (left - cards[left]) + (cards[right] - right) <= m:\n            max_valid = max(max_valid, (right - left + 1))\n\n    return str(max_valid)\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.strip().split()\n    n = int(n)\n    m = int(m)\n    L = [int(stdin.strip().split()[i]) for i in range(0, m)]\n    R = [int(stdin.strip().split()[i]) for i in range(m, 2*m)]\n    M = [0 for i in range(n)]\n    for i in range(0, m):\n        M[L[i]-1] += 1\n        M[R[i]-1] -= 1\n    \n    print(sum(M) - max(M))"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(' ')]\n    Ls = [int(x) for x in stdin.split(' ')]\n    Rs = [int(x) for x in stdin.split(' ')]\n    Ls.sort()\n    Rs.sort()\n    for i in range(N - M + 1):\n        if Ls[i] == Rs[i]:\n            continue\n        for j in range(i + 1, N - M + 1):\n            if Ls[i] == Rs[j] or Ls[j] == Rs[i]:\n                continue\n            if Ls[i] + 1 == Ls[j] and Rs[i] - 1 == Rs[j]:\n                continue\n            if Ls[i] + 2 == Ls[j] and Rs[i] - 2 == Rs[j]:\n                continue\n            if Ls[i] + 3 == Ls[j] and Rs[i] - 3 == Rs[j]:\n                continue\n            if Ls[i] + 4 == Ls[j] and Rs[i] - 4 == Rs[j]:\n                continue\n            if Ls[i] + 5 == Ls[j] and Rs[i] - 5 == Rs[j]:\n                continue\n            return str(Ls[i]) +'' + str(Rs[i])\n    return 'N'"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    valid_ids = set()\n    for _ in range(m):\n        left, right = list(map(int, stdin.split()))\n        valid_ids.add(left)\n        valid_ids.add(right)\n\n    return str(len(valid_ids))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def print_solution():\n        print(len(solution_set))\n\n    N, M = map(int, stdin.strip().split(' '))\n    gates = [tuple(map(int, stdin.strip().split(' '))) for _ in range(M)]\n\n    solution_set = set()\n    for i in range(2, N+1):\n        for gate in gates:\n            if i not in gate:\n                break\n        else:\n            solution_set.add(i)\n\n    print_solution()\n    return ''\n\nprint(solution(''))\n"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    gates: dict[int, set[int]] = {}\n    n, m = map(int, stdin.strip().split(\" \"))\n\n    for i in range(m):\n        L, R = map(int, stdin.strip().split(\" \"))\n        gates[L] = gates.get(L, set()) | set([L, R])\n        gates[R] = gates.get(R, set()) | set([L, R])\n\n    answer: int = 0\n    for i in range(1, n + 1):\n        if i not in gates:\n            answer += 1\n\n    return str(answer)"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    gates = stdin.strip().split(' ')\n    N = int(gates[0])\n    M = int(gates[1])\n    cards = [int(gates[i]) for i in range(2, 2 + M)]\n    cards.sort()\n    count = 0\n    for card in cards:\n        for i in range(1, card):\n            if cards[i] <= card:\n                count += 1\n                break\n    return str(count)"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution 1\n    \"\"\"\n    n, m = tuple(int(x) for x in stdin.split())\n    ids = [set() for _ in range(n)]\n    for _ in range(m):\n        l, r = tuple(int(x) for x in stdin.split())\n        ids[l - 1].add(r - 1)\n        ids[r - 1].add(l - 1)\n    \n    count = 0\n    for id in ids:\n        if not id:\n            count += 1\n    return str(count)\n\n\"\"\"\nsolution2\n\"\"\"\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(s) for s in stdin.strip().split()]\n    m = int(stdin)\n    print(int(m == l + r))\n    return \"\""
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = list(map(int, stdin.split()))\n    min_ops = 0\n    for l in range(N):\n        r = l + 1\n        while r < N and h[r] <= h[l]:\n            r += 1\n        if r >= N:\n            continue\n        min_ops += r - l - 1\n    return str(min_ops)"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    H = list(map(int, stdin.readline().split()))\n    \n    H_cumsum = [0] + list(accumulate(H))\n    result = 0\n    for i in range(N):\n        l, r = map(int, stdin.readline().split())\n        l, r = l - 1, r - 1\n        max_h = max(H[l:r + 1])\n        h_diff = max_h - H[i]\n        \n        # Case 1: h_i + h_diff < h_j\n        #       H[l:r + 1] can be maintained\n        if h_diff < 0:\n            result += H_cumsum[i] + abs(h_diff)\n        else:\n            result += H_cumsum[i] + abs(h_diff) - 1\n    return result"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    heights = [0] + heights + [0]\n    min_operations = 0\n    for l, r in zip(heights[:-1], heights[1:]):\n        if r - l > 1:\n            min_operations += r - l - 1\n    return str(min_operations)"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = [int(x) for x in stdin.strip().split()]\n    m = 0\n    for i in range(n):\n        m = max(m, max(h[:i + 1]) - min(h[i + 1:]))\n    return str(m)\n"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    h = [int(x) for x in stdin.strip().split()]\n\n    sum_diff = 0\n\n    for i in range(1, N):\n        l = i\n        r = i + 1\n        if h[l] > h[r]:\n            sum_diff += (h[l] - h[r]) + 1\n\n    return str(sum_diff)"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    # write your code in Python 3.6\n    N = int(stdin.readline())\n    h = list(map(int, stdin.readline().split(' ')))\n    left, right = 1, N\n    while left < right:\n        result += 1\n        mid = (left + right) // 2\n        if max(h[0:mid]) <= max(h[mid:]):\n            left = mid\n        else:\n            right = mid\n    return str(result)"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = [int(x) for x in stdin.split(' ')]\n\n    def flood_fill(i: int, l: int, r: int) -> int:\n        if l > r:\n            return 0\n        if l == r:\n            return h[i]\n\n        m = (l + r) // 2\n        h[i] = min(flood_fill(i + 1, l, m), flood_fill(i + 1, m + 1, r)) + 1\n        return h[i]\n\n    return flood_fill(0, 0, N - 1)"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split(' ')))\n    result = 0\n    for i in range(1, n + 1):\n        l = i\n        r = i + 1\n        max_height = max(arr[l - 1:r])\n        min_height = min(arr[l - 1:r])\n        if max_height - min_height > 1:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split(\" \")))\n    min_watering_operations = 0\n    for i in range(1, N):\n        l, r = map(int, stdin.readline().strip().split(\" \"))\n        temp = h[i]\n        while l <= i <= r:\n            temp = temp + 1\n            h[i] = temp\n            l = i + 1\n        min_watering_operations += r - l + 1\n    return str(min_watering_operations)\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = len(a)\n    if n == m:\n        m = max(a)\n        if m > w:\n            return 0\n        return combinations_count(n, w)\n    else:\n        return 0\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.split('\\n')\n    n, w = int(t[0].split()[0]), int(t[0].split()[1])\n    a = [int(x) for x in t[1].split()]\n    count = 0\n    d = [0 for i in range(len(a))]\n    for i in range(1, len(a)):\n        if a[i] > 0:\n            d[i] = 1\n        else:\n            d[i] = d[i-1] + a[i]\n        if d[i] > w:\n            count = 0\n            break\n        else:\n            count += d[i]\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n_author_ = 'jake'\n_project_ = 'leetcode'\nclass Solution:\n    def compute(self, A):\n        m, n = len(A), len(A[0])\n        a = [0] * (n + 1)\n        for i in range(m):\n            a = [0] + a[:]\n            for j in range(n):\n                a[j + 1] += A[i][j]\n        return a\n"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    w, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    memo = [0] * (w + 1)\n    memo[0] = 1\n    for i in a:\n        memo[i] = memo[i - 1] + memo[i]\n    return memo[w]\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number, capacity = [int(x) for x in stdin.split()]\n    sequence = [int(x) for x in stdin.split()]\n\n    return bus_solution(number, capacity, sequence)\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    \n    return \"0\"\n\nsolution(\"4 10\")\n\nsolution(\"2 4 1 2\")\n"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    dp = [[0 for _ in range(w + 1)] for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(1, w + 1):\n            if a[i] > j:\n                dp[i + 1][j] = dp[i][j]\n            else:\n                dp[i + 1][j] = dp[i][j] + dp[i][j - a[i]]\n    return str(dp[n][w])"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    cur = 0\n    ans = 1\n    for x in a:\n        cur += x\n        ans *= (cur - x)\n        if ans == 0:\n            break\n    if ans > 0:\n        return str(ans)\n    else:\n        return '0'\n\n\"\"\""
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.splitlines()[1].split()\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    b = [a[i]*3 if i%2 else a[i]/3 for i in range(len(a))]\n    return''.join(str(b[i]) for i in range(len(b)))"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(stdin.readline()) for _ in range(n)]\n    print(*sorted(nums, key=lambda x: x / 3))"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(x) for x in stdin.split()]\n    return''.join(map(str, stdin[::2]))\n\n\"\"\"\n\n\n\nimport sys\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\n>>> solution('2')\n'1'\n\n>>> solution('3')\n'1'\n\n>>> solution('4')\n'1'\n\n>>> solution('4')\n'1'\n\n>>> solution('6')\n'9 3 6 12 4 8'\n\n>>> solution('9')\n'9 3 6 12 4 8'\n\n>>> solution('42')\n'3 6 12 1 4 8'\n\n>>> solution('28')\n'2 6 7 4 8'\n\n>>> solution('28')\n'2 6 7 4 8'\n\n>>> solution('84')\n'2 4 6 7 8'\n\n>>> solution('126')\n'6 9 12 3 1 4 8'\n\n>>> solution('12')\n'12 1'\n\n>>> solution('84')\n'2 4 6 7 8'\n\n>>> solution('28')\n'2 6 7 4 8'\n\n>>> solution('28')\n'2 6 7 4 8'\n\n>>> solution('12')\n'12 1'\n\n>>> solution('42')\n'3 6 12 1 4 8'\n\n>>> solution('128')\n'1 4 8'\n\n>>> solution('42')\n'3 6 12 1 4 8'\n\n>>> solution('256')\n'1 2 4 8'\n\n>>> solution('128')\n'1 4 8'\n\n>>> solution('256')\n'1 2 4 8'\n\n>>> solution('12')\n'12 1'\n\n>>> solution('42')\n'3 6 12 1 4 8'\n\n>>> solution('128')\n'1 4 8'\n\n>>> solution('256')\n'1 2 4 8'\n\n>>> solution('512')\n'1 2 4 8'\n\n>>> solution('1024')\n'1 2 4 8'\n\n>>> solution('2048')\n'1 2 4 8'\n\n>>> solution('4096')\n'1 2 4 8'\n\n>>> solution('8192')\n'1 2 4 8'\n\n>>> solution('16384')\n'1 2 4 8'\n\n>>> solution('32768')\n'1 2 4 8'\n\n>>> solution('65536')\n'1 2 4 8'\n\n>>> solution('131072')\n'1 2 4 8'\n\n>>> solution('26214400')\n'1 2 4 8'\n\n>>> solution('524288')\n'1 2 4 8'\n\n>>> solution('1048576')\n'1 2 4 8'\n\n>>> solution('2097151')\n'1 2 4 8'\n\n>>> solution('419430400')\n'1 2 4 8'\n\n>>> solution('8388607')\n'1 2 4 8'\n\n>>> solution('16777215')\n'1 2 4 8'\n\n>>> solution('33554432')\n'1 2 4 8'\n\n>>> solution('67108864')\n'1 2 4 8'\n\n>>> solution('134217728')\n'1 2 4 8'\n\n>>> solution('268435456')\n'1 2 4 8'\n\n>>> solution('536870910')\n'1 2 4 8'\n\n>>> solution('1073741824')\n'1 2 4 8'\n\n>>> solution('2147483647')\n'1 2 4 8'\n\n>>> solution('4294967296')\n'1 2 4 8'\n\n>>> solution('8589934592')\n'1 2 4 8'\n\n>>> solution('17179869183')\n'1 2 4 8'\n\n>>> solution('34359738368')\n'1 2 4 8'\n\n>>> solution('68719476735')\n'1 2 4 8'\n\n>>> solution('137438953472')\n'1 2 4 8'\n\n>>> solution('274877906944')\n'1 2 4 8'\n\n>>> solution('4915673888888')\n'1 2 4 8'\n\n>>> solution('1572874657028')\n'1 2 4 8'\n\n>>> solution('4706117681456')\n'1 2 4 8'\n\n>>> solution('9223372036854775808')\n'1 2 4 8'\n\n\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [int(stdin.readline().strip()) for _ in range(n)]\n    m = s[0]\n    for i in range(1,n):\n        if m == 0:\n            break\n        m = m + s[i]\n        if m % 3 == 0:\n            m = m / 3\n        else:\n            m = m * 2\n        s[i] = m\n    for i in s:\n        print(i, end = \"\")\n    print()\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(*(sorted(map(int, stdin.split()))))"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n\n    nums_2 = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            nums_2[i // 2] = nums[i]\n        else:\n            nums_2[i // 2] = nums[i] * 3\n\n    return''.join(map(str, nums_2))\n\nassert(solution('''\n4\n4 8 6 3 12 9\n''') == '9 3 6 12 4 8')\nassert(solution('''\n6\n4 8 6 3 12 9\n''') == '9 3 6 12 4 8')\nassert(solution('''\n4\n42 28 84 126\n''') == '126 42 84 28')\nassert(solution('''\n2\n1000000000000000000 3000000000000000000\n''') == '3000000000000000000 1000000000000000000')\n\n\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nprint(solution(stdin))\n\"\"\"\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    p = l[0]\n    s = l[1]\n    for i in range(n):\n        x = l[i]\n        while x % 3 == 0:\n            x //= 3\n            p *= 3\n        while x % 2 == 0:\n            x //= 2\n            s *= 2\n        p += x\n        s += x\n    return str(p) +'' + str(s)"
    }
]