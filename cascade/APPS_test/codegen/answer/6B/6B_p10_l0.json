[
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    graph = defaultdict(list)\n    for i in range(n-1):\n        a, b = [int(x) for x in stdin.readline().strip().split(' ')]\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = set()\n    visited.add(1)\n    visited.add(n)\n    res = 0\n    for i in range(2, n):\n        if i not in visited:\n            queue = deque([i])\n            while queue:\n                node = queue.popleft()\n                visited.add(node)\n                for x in graph[node]:\n                    if x not in visited:\n                        queue.append(x)\n            res += len(graph[i])\n    return str(res)\n\nprint(solution(stdin))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 3:\n        return '2'\n    paths = defaultdict(int)\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        paths[a] += 1\n        paths[b] += 1\n    res = 1\n    res_a, res_b, res_c = -1, -1, -1\n    for a in range(1, n + 1):\n        for b in range(a + 1, n + 1):\n            if paths[a] > res:\n                res = paths[a]\n                res_a, res_b = a, b\n            if paths[b] > res:\n                res = paths[b]\n                res_b, res_c = b, a\n    return str(res)\n\nimport sys"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [sorted(map(int, line.split())) for line in stdin.readlines()]\n    tree = defaultdict(list)\n    for a, b in edges:\n        tree[a].append(b)\n        tree[b].append(a)\n    res = 0\n    for a in range(1, n):\n        for b in range(a + 1, n + 1):\n            if len(tree[a]) > 1 and len(tree[b]) > 1:\n                res = max(res, len(tree[a]) + len(tree[b]) - 2)\n    for a in range(1, n):\n        for b in range(a + 1, n + 1):\n            for c in range(b + 1, n + 1):\n                if a == b or b == c or a == c:\n                    continue\n                if len(set(tree[a]) & set(tree[b]) & set(tree[c])) > 0:\n                    res = max(res, len(tree[a]) + len(tree[b]) + len(tree[c]) - 3)\n    return str(res)"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def build_graph():\n        def is_adjacent(a, b):\n            return graph[a][b]\n\n        def add_edge(a, b):\n            graph[a][b] = True\n            graph[b][a] = True\n\n        n = int(stdin.readline())\n        graph = [[False for _ in range(n)] for _ in range(n)]\n        for _ in range(n - 1):\n            a, b = map(int, stdin.readline().split())\n            add_edge(a - 1, b - 1)\n            add_edge(b - 1, a - 1)\n        return graph\n\n    def get_max_simple_path(a, b):\n        def get_simple_path(current_node):\n            if visited[current_node]:\n                return []\n            visited[current_node] = True\n            for adjacent_node in range(n):\n                if is_adjacent(current_node, adjacent_node):\n                    simple_path = get_simple_path(adjacent_node)\n                    if simple_path:\n                        return [current_node] + simple_path\n            return []\n\n        graph = build_graph()\n        visited = [False for _ in range(n)]\n        simple_paths = []\n        for node in range(n):\n            simple_path = get_simple_path(node)\n            if simple_path:\n                simple_paths.append(simple_path)\n\n        max_path = 0\n        max_path_nodes = None\n        for simple_path in simple_paths:\n            if len(simple_path) > max_path:\n                max_path = len(simple_path)\n                max_path_nodes = simple_path\n\n        if max_path_nodes:\n            return len(max_path_nodes)\n        else:\n            return -1\n\n    def get_max_simple_path_cycle():\n        def get_cycle():\n            visited = [False for _ in range(n)]\n            visited[start] = True\n            path = []\n            while True:\n                for adjacent_node in range(n):\n                    if is_adjacent(start, adjacent_node):\n                        if visited[adjacent_node]:\n                            return path\n                        visited[adjacent_node] = True\n                        path.append(adjacent_node)\n                        start = adjacent_node\n                        break\n                else:\n                    return []\n\n        graph = build_graph()\n        start = 0\n        max_cycle_nodes = []\n        for node in range(n):\n            cycle = get_cycle()\n            if cycle:\n                max_cycle_nodes.append(cycle)\n\n        max_cycle_length = 0\n        for cycle_nodes in max_cycle_nodes:\n            if len(cycle_nodes) > max_cycle_length:\n                max_cycle_length = len(cycle_nodes)\n\n        return max_cycle_length\n\n    def get_max_simple_path_no_cycle():\n        def get_simple_path(current_node):\n            if visited[current_node]:\n                return []\n            visited[current_node] = True\n            for adjacent_node in range(n):\n                if is_adjacent(current_node, adjacent_node):\n                    simple_path = get_simple_path(adjacent_node)\n                    if simple_path:\n                        return [current_node] + simple_path\n            return []\n\n        graph = build_graph()\n        visited = [False for _ in range(n)]\n        simple_paths = []\n        for node in range(n):\n            simple_path = get_simple_path(node)\n            if simple_path:\n                simple_paths.append(simple_path)\n\n        max_path = 0\n        for simple_path in simple_paths:\n            if len(simple_path) > max_path:\n                max_path = len(simple_path)\n\n        return max_path\n\n    n = int(stdin.readline())\n    graph = build_graph()\n    max_simple_path = get_max_simple_path(0, 1)\n    max_simple_path_cycle = get_max_simple_path_cycle()\n    max_simple_path_no_cycle = get_max_simple_path_no_cycle()\n\n    print(max(max_simple_path, max_simple_path_cycle, max_simple_path_no_cycle))\n    print(0, n - 1, n - 1)\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution requires the most time. I can't solve this problem in my algorithm.\n    '''\n\n    n = int(stdin)\n    edges = [int(x) for x in stdin.split()]\n\n    if n == 3:\n        a, b, c = edges\n        if a == b and b == c:\n            print(3)\n            print(a, b, c)\n        else:\n            print(2)\n            print(a, c)\n\n    elif n == 4:\n        a, b, c, d = edges\n        if a == b and b == c and c == d:\n            print(4)\n            print(a, b, c, d)\n        else:\n            print(2)\n            print(a, d)\n\n    else:\n        edge = n - 1\n        edges = edges[:edge]\n        edges.sort()\n        a, b, c = edges\n\n        edges = edges[:2]\n        edges.sort()\n        a, b = edges\n        edges = edges[:2]\n        edges.sort()\n        c, d = edges\n\n        e = set([a, b])\n        if c in e and d in e:\n            print(2)\n            print(a, c, d)\n        else:\n            print(3)\n            print(a, b, c)\n\n\nsolution(stdin)"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = [set() for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = [int(x) for x in stdin.split()]\n        edges[a].add(b)\n        edges[b].add(a)\n\n    def get_max_simple_path(v1: int, v2: int, edges: List[Set[int]]) -> int:\n        if v1 == v2:\n            return 1\n        if not edges[v1]:\n            return 0\n        max_simple_path = 0\n        for v in edges[v1]:\n            if v not in edges[v2]:\n                continue\n            max_simple_path = max(max_simple_path, get_max_simple_path(v, v2, edges) + 1)\n        return max_simple_path\n\n    max_simple_path = 0\n    for v1, v2 in combinations(range(1, n), 2):\n        max_simple_path = max(max_simple_path, get_max_simple_path(v1, v2, edges))\n\n    if max_simple_path == 0:\n        return \"NO\"\n\n    max_simple_path -= 1\n    answers = []\n    for v1, v2, v3 in permutations(range(1, n), 3):\n        if max_simple_path == 0:\n            break\n        if get_max_simple_path(v1, v2, edges) + get_max_simple_path(v2, v3, edges) + get_max_simple_path(v1, v3, edges) >= max_simple_path:\n            answers.append(v1)\n            answers.append(v2)\n            answers.append(v3)\n            break\n    return str(max_simple_path) + \"\\n\" + \" \".join([str(x) for x in answers])\n"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution(stdin) == '5')"
    },
    {
        "number": 4000,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = [tuple(map(int, stdin.readline().strip().split(' '))) for _ in range(n - 1)]\n    edges_with_weights = []\n    for a, b in edges:\n        edges_with_weights.append((a, b, n))\n        edges_with_weights.append((b, a, n))\n\n    edges_with_weights = sorted(edges_with_weights, key=lambda x: x[2])\n    for i in range(1, n):\n        if edges_with_weights[i - 1][2] == edges_with_weights[i][2]:\n            a, b = edges_with_weights[i - 1][:2], edges_with_weights[i][:2]\n            a_weight, b_weight = edges_with_weights[i - 1][2], edges_with_weights[i][2]\n            if a_weight > b_weight:\n                a, b = b, a\n                a_weight, b_weight = b_weight, a_weight\n            if a_weight == b_weight:\n                if a[0] < a[1] < b[0] or a[0] < b[1] < a[1] or b[0] < a[1] < b[1] or b[0] < a[0] < b[1]:\n                    a, b = b, a\n                    a_weight, b_weight = b_weight, a_weight\n            return''.join(map(str, [a_weight, a[0], a[1], b_weight, b[0], b[1]]))\n    return '1'\n\n\nprint(solution(''))\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds two numbers that form the first divisors of the given divisors list.\n    The first number is the number with the highest occurrence in the given list.\n    \"\"\"\n    n = int(stdin.readline())\n    d = [int(x) for x in stdin.readline().split()]\n\n    d_cnt = [d.count(x) for x in set(d)]\n    res = [x for x in set(d) if d_cnt.count(d_cnt[x]) == 1]\n    if len(res) == 0:\n        return 'No answer'\n\n    res_cnt = [d.count(x) for x in res]\n    max_res_cnt = max(res_cnt)\n    res_pos = [i for i, x in enumerate(res_cnt) if x == max_res_cnt]\n\n    return''.join(str(x) for x in res[max_res_cnt])\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    g = []\n    for i in a:\n        if i in g:\n            continue\n        g.append(i)\n    g.sort()\n    print(*g)"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = int(stdin.split()[0]), int(stdin.split()[0])\n    d = int(stdin.split()[1])\n    l = sorted(list(set([i for i in range(1, x + y + 1) if i % d == 0 or i % x == 0 and i % y == 0])))\n    return str(l[0]) +'' + str(l[-1])\n\n\nprint(solution(stdin))\n\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin[0])\n    x = int(stdin[1])\n    y = int(stdin[2])\n\n    return \"\"\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_of_numbers = int(stdin)\n    divisors = stdin.split(\" \")\n    divisors = list(map(int, divisors))\n    \n    ans = []\n    for i in range(len(divisors)):\n        if divisors.count(divisors[i]) == 2:\n            ans.append(divisors[i])\n    \n    for i in range(len(ans)):\n        if ans.count(ans[i]) == 2:\n            ans.remove(ans[i])\n            ans.append(ans[i])\n    \n    ans.sort()\n    return''.join(map(str, ans))\n\nassert(solution(input()) == '20 8')"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    d = sorted(set(A))\n    #print(d)\n    #print(A)\n    x, y = 1, 1\n    for d in d:\n        while x < n and A[x] % d == 0:\n            x += 1\n        while y < n and A[y] % d == 0:\n            y += 1\n        if x < n and y < n:\n            break\n    print(x, y)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    divisors_of_x, divisors_of_y = list(map(int, stdin.split())), list(map(int, stdin.split()))\n    for divisor in divisors_of_x:\n        divisors_of_y.remove(divisor)\n    for divisor in divisors_of_y:\n        divisors_of_x.remove(divisor)\n    for divisor in divisors_of_x:\n        divisors_of_y.remove(divisor)\n    print(divisors_of_x[0], divisors_of_y[0])"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = [int(x) for x in stdin.readline().split()]\n    x = 1\n    y = 1\n    for i in range(len(d)):\n        if d[i] % x == 0:\n            x *= d[i]\n        if d[i] % y == 0:\n            y *= d[i]\n    return str(x) +'' + str(y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x, y = [], []\n    for _ in range(n):\n        x.append(int(stdin.readline()))\n    for _ in range(n):\n        y.append(int(stdin.readline()))\n    \n    x_divisors, y_divisors = [], []\n    for x_i in x:\n        if x_i not in x_divisors:\n            x_divisors.append(x_i)\n    for y_i in y:\n        if y_i not in y_divisors:\n            y_divisors.append(y_i)\n\n    x_divisors.sort()\n    y_divisors.sort()\n\n    def merge(x: List[int], y: List[int]) -> List[int]:\n        m, n = len(x), len(y)\n        res = [0] * (m + n)\n        i, j = 0, 0\n        for k in range(m + n):\n            if i == m:\n                res[k] = y[j]\n                j += 1\n            elif j == n:\n                res[k] = x[i]\n                i += 1\n            elif x[i] < y[j]:\n                res[k] = x[i]\n                i += 1\n            else:\n                res[k] = y[j]\n                j += 1\n        return res\n\n    merged = merge(x_divisors, y_divisors)\n    for i in range(len(merged)):\n        if merged[i]!= merged[i - 1] or merged[i]!= merged[i + 1]:\n            return''.join(map(str, merged[i:i + 2]))\n\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(x) for x in stdin.split()]\n    nx = ny = 0\n    for x in l:\n        for y in l:\n            if x!= y and x % y == 0:\n                nx = x\n                ny = y\n    return f'{nx} {ny}'"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = [map(int, line.split()) for line in stdin.splitlines()]\n    \n    # find max sum of items in first half of each row\n    max_sum = 0\n    for row in matrix[:n // 2]:\n        max_sum = max(max_sum, sum(row[:m // 2]))\n    \n    # find max sum of items in second half of each row\n    max_sum = max(max_sum, 0)\n    for row in matrix[n // 2:]:\n        max_sum = max(max_sum, sum(row[:m // 2]))\n    \n    # find max sum of items in each half of each row\n    max_sum = max(max_sum, 0)\n    for row in matrix:\n        max_sum = max(max_sum, sum(row[:m // 2]), sum(row[m // 2:]))\n    \n    # find best solution\n    return max_sum // k\n\n\nassert(solution('''3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4''')) == 24\nassert(solution('''5 5 4\n1 2 4 2 1\n3 5 1 2 4\n1 5 7 1 2\n3 8 7 1 2\n8 4 7 1 6''')) == 56\nassert(solution('''6 7 0\n1 2 3 4 5 6\n7 8 9 0 1 2\n3 4 5 6 7 8\n9 8 7 6 5 4\n5 4 3 2 1 0''')) == 72\nassert(solution('''4 7 2\n1 2 3 4 5 6\n7 8 9 0 1 2\n3 4 5 6 7 8\n9 8 7 6 5 4\n5 4 3 2 1 0''')) == 44\nassert(solution('''8 8 8\n1 2 2 4 6 6 7 1 2\n8 7 3 2 3 4 4 5 4\n4 4 5 7 6 6 6 7 1\n6 7 6 7 7 7 1 2 2\n6 7 1 6 7 7 7 1 2\n1 2 1 2 2 2 6 7 1\n7 7 7 1 7 1 2 1 1\n2 2 1 2 1 1 1 2 2\n2 1 1 1 1 2 2 2 2\n''')) == 392\nassert(solution('''9 9 9\n1 2 2 4 6 6 7 1 2\n8 7 3 2 3 4 4 5 4\n4 4 5 7 6 6 6 7 1\n6 7 6 7 7 7 1 2 2\n6 7 1 6 7 7 7 1 2\n1 2 1 2 2 2 6 7 1\n7 7 7 1 7 1 2 1 1\n2 2 1 2 1 1 1 2 2\n2 1 1 1 1 2 2 2 2\n''')) == 392\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    ans = 0\n    for _ in range(n):\n        row = list(map(int, stdin.split()))\n        if (m // 2) * k <= sum(row[:m // 2]):\n            ans = max(ans, sum(row[:m // 2]))\n    return str(ans)"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    def add_num(lst: list, add: int) -> list:\n        for i in range(len(lst)):\n            lst[i] += add\n        return lst\n\n    def sum_of_row(row: list) -> int:\n        return sum(row)\n\n    def sum_of_row_divisible_by_k(row: list, k: int) -> int:\n        total = 0\n        for i in range(len(row)):\n            total += row[i]\n            if total % k!= 0:\n                return 0\n        return total\n\n    result = 0\n\n    for row in matrix:\n        result = max(result, sum_of_row_divisible_by_k(row, k))\n\n    return str(result)"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n\")\n    '24'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.readline().split()]\n    a = [stdin.readline().strip() for _ in range(n)]\n    max_sum = 0\n    for i in range(n):\n        row = 0\n        for j in range(m):\n            if i < n // 2:\n                row += int(a[i][j])\n            elif i == n // 2:\n                row += int(a[i][j])\n            else:\n                row += int(a[i][j])\n        if row % k == 0:\n            max_sum = max(row, max_sum)\n    return str(max_sum)\n\nprint(solution(None))\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    for _ in range(m):\n        a.append(list(map(int, stdin.split())))\n    maximum = -1\n    for i in range(m):\n        for j in range(int(m / 2)):\n            maximum = max(maximum, a[i][j] + a[i][-j - 1])\n    return maximum"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    matrix = [[int(x) for x in stdin.split(' ')[m * i:m * (i + 1)]] for i in range(n)]\n    row_sum = [sum(x) for x in matrix]\n    column_sum = [sum(x) for x in zip(*matrix)]\n    answer = -1\n    for i in range(m - m // 2):\n        if (row_sum[i] + column_sum[m - 1 - i]) % k == 0:\n            answer = max(answer, row_sum[i] + column_sum[m - 1 - i])\n    return str(answer)"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    a = [[int(j) for j in stdin.split()] for _ in range(n)]\n    maximum = 0\n    for i in range(n):\n        for j in range(m // 2):\n            maximum = max(maximum, sum(a[i][j:m - j]))\n    return str(maximum)"
    },
    {
        "number": 4002,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [map(int, stdin.split()) for _ in range(n)]\n    \n    a_ = []\n    for row in a:\n        a_.append(row[:m//2])\n    \n    a__ = []\n    for row in a_:\n        a__.append(row[::-1])\n    \n    a = a + a_ + a__\n    \n    s = 0\n    for row in a:\n        for element in row:\n            if element % k == 0:\n                s += element\n    \n    return str(s)\n\nimport sys\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')[1:]\n    n = int(stdin[0])\n    a = [int(i) for i in stdin[1].split()]\n    ans = \"\"\n    for i in range(len(a)):\n        if i == 0:\n            ans += 'L'\n            continue\n        if i == len(a) - 1:\n            ans += 'R'\n            continue\n        if a[i] > a[i - 1] and a[i] > a[i + 1]:\n            ans += 'R'\n        else:\n            ans += 'L'\n    return ans"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(x) for x in stdin.readline().split()]\n\n    def longestIncreasingSequence(seq: list) -> int:\n        if not seq:\n            return 0\n\n        if len(seq) == 1:\n            return 1\n\n        seq_len = len(seq)\n        result = 1\n        i = 0\n        while i < seq_len - 1:\n            j = i + 1\n            while j < seq_len:\n                if seq[j] > seq[j - 1]:\n                    j += 1\n                else:\n                    break\n            i = j\n            result = max(result, j - i)\n\n        return result\n\n    return longestIncreasingSequence(seq)"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    l.sort()\n    count = 1\n    ans = \"\"\n    for i in range(1, n):\n        if l[i] == l[i - 1]:\n            count += 1\n        else:\n            if count > count:\n                ans = \"L\"\n            elif count < count:\n                ans = \"R\"\n            count = 1\n    if count > count:\n        ans = \"L\"\n    elif count < count:\n        ans = \"R\"\n    return ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = [int(el) for el in stdin.readline().split()]\n    res = 1\n    pos = 0\n    for i in range(n):\n        if i == 0:\n            res = 1\n        else:\n            if lst[i] < lst[i-1]:\n                res = max(res, i+1)\n    return res\n\nassert solution('''5\n1 2 4 3 2\n''') == 4\nassert solution('''7\n1 3 5 6 5 4 2\n''') == 6\nassert solution('''3\n2 2 2\n''') == 1\nassert solution('''4\n1 2 4 3\n''') == 4\nassert solution('''7\n1 3 5 6 5 4 2\n''') == 6\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2 1\n''') == 9\nassert solution('''10\n1 3 5 6 5 4 2 3 2"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return \"\".join(get_longest_increasing_seq(a))\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return answer\n   ...\n\nThe tests will output string `passed`.\n\nThere are no other tests.\n\n\"\"\"\nfrom typing import List\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    for d in range(1, max(a)+1):\n        s = set(a)\n        for x in a:\n            if x + d < 0:\n                break\n            elif x + d in s:\n                s.remove(x + d)\n        else:\n            return str(d)\n    return \"-1\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    \n    m = 0\n    for i in range(n):\n        if a[i] <= m:\n            m = a[i]\n        else:\n            m += 1\n    if m >= 2 * n:\n        return -1\n    \n    d = 1\n    for i in range(n):\n        if a[i]!= m:\n            d += 1\n    \n    return d"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()[0]\n    a = [int(stdin.readline()[0]) for i in range(n)]\n\n    result = None\n    for d in range(1, sum(a)):\n        if all(a[i]+d == a[i+1] for i in range(n-1)):\n            result = d\n\n    if result is None:\n        print(-1)\n    else:\n        print(result)"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    lst = sorted(lst)\n    for i in range(1, n):\n        if lst[i] > 0:\n            return '-1'\n    return str(lst[0] - 1)"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    res = -1\n    for i in range(1, 100):\n        if all(a[x] == i + a[0] for x in range(n)):\n            res = i\n            break\n    return str(res)"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return\n\n\n@pytest.mark.parametrize('n, a, expected', [\n    (5, [1, 4, 7, 4, 1], 3),\n    (6, [1, 4, 7, 4, 1], 3),\n    (7, [2, 4, 7, 4, 1], -1),\n    (8, [2, 4, 7, 4, 1], -1),\n    (9, [2, 4, 7, 4, 1], -1),\n    (10, [2, 4, 7, 4, 1], -1),\n    (11, [2, 4, 7, 4, 1], 3),\n])\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = list(map(int, stdin.readline().split()))\n\n    # For each element in the sequence, check whether it can be added to a value in the sequence and subtracted\n    # from the remaining elements in the sequence, or whether it can be subtracted from a value in the sequence\n    # and added to the remaining elements in the sequence\n    for i in range(n):\n        can_add = True\n        can_sub = True\n\n        for j in range(n):\n            if j!= i:\n                if seq[j] < seq[i]:\n                    can_add = False\n                if seq[j] > seq[i]:\n                    can_sub = False\n\n        if can_add:\n            # If we can add to this element, add it to the sum, subtract the element from the remaining elements\n            # in the sequence, and print the value\n            seq_sum = sum(seq) - seq[i]\n            print(seq_sum)\n            return\n\n        if can_sub:\n            # If we can subtract from this element, subtract it from the sum, add the element to the remaining\n            # elements in the sequence, and print the value\n            seq_sum = sum(seq) + seq[i]\n            print(seq_sum)\n            return\n\n    # If we get here, we cannot add or subtract to any element in the sequence, so we cannot change the sequence\n    print(-1)\n    return"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('2\\n1 3\\n')\n    '3'\n    >>> solution('2\\n1 4\\n')\n    '3'\n    >>> solution('2\\n1 4\\n2 4\\n')\n    '3'\n    >>> solution('2\\n1 4\\n2 4\\n3 4\\n')\n    '3'\n    >>> solution('2\\n1 4\\n2 4\\n3 4\\n4 4\\n')\n    '3'\n    >>> solution('2\\n1 4\\n2 4\\n3 4\\n4 4\\n5 4\\n')\n    '3'\n    >>> solution('2\\n1 4\\n2 4\\n3 4\\n4 4\\n5 4\\n6 4\\n')\n    '3'\n    '''\n    n = int(stdin.readline())\n    if n == 0:\n        return '-1'\n    seq = list(map(int, stdin.readline().split()))\n    # from 1 to n elements\n    for d in range(1, n + 1):\n        # make sure all elements are equal\n        all_equal = True\n        # for each element\n        for i in range(n):\n            # if element has negative value\n            if seq[i] < 0:\n                # if element is not the first element\n                if i > 0:\n                    # subtract d\n                    seq[i] -= d\n                else:\n                    # set all_equal to false\n                    all_equal = False\n        if all_equal:\n            return str(d)\n    return '-1'"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    if n < 1 or n > 100:\n        return -1\n\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    if len(a)!= n:\n        return -1\n\n    min_diff = float('inf')\n    max_diff = float('-inf')\n\n    for x in a:\n        if x < 0:\n            min_diff = min(min_diff, abs(x))\n            max_diff = max(max_diff, abs(x))\n\n    min_val = max_val = 0\n    max_val = max(a)\n    min_val = min(a)\n\n    while max_val > min_val + min_diff:\n        mid = (max_val + min_val) // 2\n\n        a_sum = sum([abs(x - mid) for x in a])\n\n        if a_sum >= max_diff:\n            max_val = mid\n        else:\n            min_val = mid + 1\n\n    return min_val\n\n\nassert solution('''6\n1 4 4 7 4 1''') == 3\n\nassert solution('''5\n2 2 5 2 5''') == 3\n\nassert solution('''4\n1 3 3 7''') == -1\n\nassert solution('''2\n2 8''') == 3\n\nassert solution('''7\n-1 -1 -1 -1 -1 -1 -1''') == -1\n\nassert solution('''7\n1 1 1 1 1 1 1''') == 0\n"
    },
    {
        "number": 4004,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    a = list(map(int, stdin.readline().strip().split()))\n\n    d = 0\n    while True:\n        flag = True\n        for i in a:\n            if i < 0:\n                flag = False\n                d += 1\n                break\n        if flag:\n            return str(d)\n        a = [i+d for i in a]\n        d += 1\n\n    return '-1'"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n    x_5, y_5, x_6, y_6 = map(int, stdin.split())\n\n    if x_1 > x_2:\n        x_1, x_2 = x_2, x_1\n    if y_1 > y_2:\n        y_1, y_2 = y_2, y_1\n    if x_3 > x_4:\n        x_3, x_4 = x_4, x_3\n    if y_3 > y_4:\n        y_3, y_4 = y_4, y_3\n\n    x_12 = min(x_1, x_2)\n    y_12 = min(y_1, y_2)\n\n    x_34 = min(x_3, x_4)\n    y_34 = min(y_3, y_4)\n\n    if x_12 < x_34 < x_2:\n        if y_12 < y_34 < y_2:\n            return \"YES\"\n    return \"NO\"\n\nprint(solution(\"0 0 1000000 1000000\"))"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n\n    return 'YES' if (x1, y1) <= (x3, y3) <= (x2, y2) and (x1, y1) <= (x4, y4) <= (x2, y2) and (x3, y3) <= (x5, y5) <= (x4, y4) and (x5, y5) <= (x6, y6) else 'NO'\n    \n    \n    \n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'\n\nassert solution('1 2 3 4\\n1 1 3 5\\n3 1 5 5') == 'NO'\nassert solution('0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000') == 'YES'\nassert solution('3 2 7 5\\n0 0 4 6\\n0 0 7 4') == 'YES'\nassert solution('5 2 10 5\\n3 1 7 6\\n8 1 11 7') == 'YES'\nassert solution('0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000') == 'YES'\nassert solution('10 9 4\\n0 0 10 3\\n0 0 5 3') == 'YES'\nassert solution('1 2 3 4\\n1 1 3 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5 5\\n3 1 5 5') == 'NO'\nassert solution('1 1 3 5\\n3 1 5"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n    e, f, g, h = [int(i) for i in stdin.split()]\n    if a < b < c < d or e < f < g < h:\n        return 'YES'\n    return 'NO'\n\nassert solution('''2 2 4 4''') == 'NO'\nassert solution('''1 1 3 5''') == 'YES'\nassert solution('''3 1 5 5''') == 'YES'\nassert solution('''5 2 10 5''') == 'YES'\nassert solution('''0 0 1000000 1000000''') == 'YES'\nassert solution('''0 0 499999 1000000''') == 'YES'\nassert solution('''500000 0 1000000 1000000''') == 'YES'\nassert solution('''0 0 1000000 1000000''') == 'NO'\nassert solution('''0 0 499999 1000000''') == 'NO'\nassert solution('''500000 0 1000000 1000000''') == 'NO'\nassert solution('''0 0 499995 1000000''') == 'NO'\nassert solution('''0 0 7 499995''') == 'YES'\nassert solution('''0 0 7 799995''') == 'NO'\n'''\n"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x_3, y_3, x_4, y_4 = [int(x) for x in stdin.split()]\n    x_5, y_5, x_6, y_6 = [int(x) for x in stdin.split()]\n    if max(x_1, x_2) > x_3 or max(y_1, y_2) > y_3 or min(x_4, x_5) < x_3 or min(y_4, y_5) < y_3:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(item) for item in stdin.split()]\n    x_3, y_3, x_4, y_4 = [int(item) for item in stdin.split()]\n    x_5, y_5, x_6, y_6 = [int(item) for item in stdin.split()]\n\n    if x_3 < x_1 or x_5 > x_2 or y_3 < y_1 or y_5 > y_2:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n    x_5, y_5, x_6, y_6 = map(int, stdin.split())\n    if min(x_1, x_3) < max(x_2, x_4) and min(y_1, y_3) < max(y_2, y_4) and max(x_1, x_3) > min(x_2, x_4) and max(y_1, y_3) > min(y_2, y_4):\n        print('YES')\n    else:\n        print('NO')\n    return 'YES'\n\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cache = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    for i in range(20, n + 1):\n        next = 0\n        for j in range(len(cache)):\n            next += cache[j]\n            cache[j] = next\n    return str(len(cache))\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution\"\"\"\n    x = stdin.strip()\n    x = int(x)\n    n = 0\n    while x > 0:\n        x = x - 10\n        if x % 10 == 0:\n            x = x // 10\n        else:\n            x = x // 10 + 1\n        n += 1\n    return str(n)\n\n\"\"\"\ntest_cases = int(stdin.readline())\nfor _ in range(test_cases):\n    n = stdin.readline().strip()\n    print(solution(n))\n\"\"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # this is an optimization, O(1)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    res = \"2\"\n    while True:\n        if n % 2 == 0:\n            n //= 2\n            res += \"0\"\n        else:\n            n += 1\n            res += \"1\"\n        if n == 1:\n            break\n    return res\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(sorted(map(str, range(1, int(stdin) + 1))))\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 10:\n        return str(n)\n\n    i = 10\n    count = 0\n    while i * i < n:\n        if n % i == 0:\n            count += 2\n        i += 1\n    return str(count)\n"
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = n * (n + 1) // 2\n    print(p)\n    return \"\""
    },
    {
        "number": 4006,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return \"0\"\n    nums = [str(i) for i in range(10)]\n    cache = {}\n    def rec(num):\n        if num in cache:\n            return cache[num]\n        if num == \"1\":\n            return 1\n        if num == \"0\":\n            return 0\n        ans = 0\n        for i in range(len(num)):\n            if num[i]!= \"0\":\n                if i == 0:\n                    ans += rec(num[i+1:])\n                else:\n                    ans += rec(num[i+1:]) + rec(num[:i])\n        cache[num] = ans\n        return ans\n    return str(rec(str(n)))\n\nassert solution(input()) == \"20\"\nassert solution(input()) == \"19\"\nassert solution(input()) == \"18\"\nassert solution(input()) == \"17\"\nassert solution(input()) == \"16\"\nassert solution(input()) == \"15\"\nassert solution(input()) == \"14\"\nassert solution(input()) == \"13\"\nassert solution(input()) == \"12\"\nassert solution(input()) == \"11\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"9\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"9\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"11\"\nassert solution(input()) == \"12\"\nassert solution(input()) == \"13\"\nassert solution(input()) == \"14\"\nassert solution(input()) == \"15\"\nassert solution(input()) == \"16\"\nassert solution(input()) == \"17\"\nassert solution(input()) == \"18\"\nassert solution(input()) == \"19\"\nassert solution(input()) == \"20\"\nassert solution(input()) == \"19\"\nassert solution(input()) == \"18\"\nassert solution(input()) == \"17\"\nassert solution(input()) == \"16\"\nassert solution(input()) == \"15\"\nassert solution(input()) == \"14\"\nassert solution(input()) == \"13\"\nassert solution(input()) == \"12\"\nassert solution(input()) == \"11\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"9\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"9\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"11\"\nassert solution(input()) == \"12\"\nassert solution(input()) == \"13\"\nassert solution(input()) == \"14\"\nassert solution(input()) == \"15\"\nassert solution(input()) == \"16\"\nassert solution(input()) == \"17\"\nassert solution(input()) == \"18\"\nassert solution(input()) == \"19\"\nassert solution(input()) == \"20\""
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    people = [int(x) for x in stdin.split(\" \")]\n    people.sort()\n    if people[0] == 1:\n        return \"1\" + \" \"*(n - 1) + \"1\"\n    gifts = [0 for _ in range(n)]\n    gifts[0] = 1\n    for i in range(1, n):\n        j = 1\n        while j < i:\n            if people[j] == people[i]:\n                gifts[i] += 1\n            j += 1\n    res = \"\"\n    for i in range(n):\n        if gifts[i] == 0:\n            res += str(i) + \" \"\n    return res\n\nassert(solution(\"5\") == \"1 2 3 4 5\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4 2 3 6 5 1\")\nassert(solution(\"7\") == \"7 4"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = stdin.readline().split()\n    friends = [int(x) - 1 for x in friends]\n    l = [0] * n\n    for i in range(n):\n        if friends[i] == 0:\n            l[i] = friends[i]\n        else:\n            for j in range(n):\n                if i!= j:\n                    if friends[i] == j:\n                        l[i] += 1\n                    else:\n                        if l[j] == 0:\n                            l[i] += 1\n                            break\n    return''.join([str(x) for x in l])\n\nassert(solution('''5\n5 0 0 2 4\n''') == '5 3 1 2 4')\nassert(solution('''7\n7 0 0 1 4 0 6\n''') == '7 3 2 1 4 5 6')\nassert(solution('''7\n7 4 0 3 0 5 1\n''') == '7 4 2 3 6 5 1')\nassert(solution('''5\n2 1 0 0 0\n''') == '2 1 4 5 3')\nprint(solution('''4\n2 1 0 0\n'''))\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    if n:\n        n = int(n)\n        friends = [0] * n\n        for i in range(n):\n            friends[i] = int(stdin.readline().strip())\n        print(*[i for i in range(n) if friends[i] == 0], sep=\"\\n\")\n    else:\n        return \"\"\nsolution(input())\n"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    n = int(stdin)\n    for _ in range(n):\n        f = [int(x) for x in stdin.split()]\n        n_f = f.count(0)\n        if n_f >= 1:\n            answer.append(n_f)\n    return''.join([str(x) for x in answer])"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = list(map(int, stdin.readline().split()))\n\n    # all friends share a common value\n    if len(set(friends)) == 1:\n        return ''.join(str(friends[0]) +'' + str(friends[0]))\n\n    # add a friend to each other, but not to himself\n    max_friends = n - 2\n    friends_dict = {}\n    for i in range(n):\n        if friends[i]!= i:\n            if friends[i] in friends_dict:\n                friends_dict[friends[i]] += 1\n            else:\n                friends_dict[friends[i]] = 1\n\n            if friends[friends[i]] in friends_dict:\n                friends_dict[friends[friends[i]]] += 1\n            else:\n                friends_dict[friends[friends[i]]] = 1\n\n    # friend -> friend\n    for i in range(n):\n        if friends[i]!= i:\n            max_friends -= 1\n            if max_friends == 0:\n                return ''.join(str(i) +'' + str(i))\n\n        if i in friends_dict:\n            friends_dict[i] -= 1\n\n    if len(friends_dict) < n:\n        return ''.join(str(i) +'' + str(i) for i in range(n) if i not in friends_dict)"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(x) for x in stdin.readline().strip().split(' ')]\n    sums = [0] * n\n    for i in range(n):\n        sums[i] = nums[i]\n    for i in range(n):\n        sums[nums[i]] -= 1\n    for i in range(n):\n        print(i + 1 if sums[i] == 0 else sums[i], end=' ')\n    print()"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    friends = stdin.readline().split()\n    n = int(stdin.readline())\n    known = [int(x) for x in stdin.readline().split()]\n    return''.join(str(friends[x] if friends[x]!= '0' else x) for x in range(n))"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = stdin.readline().strip()\n    friends = stdin.readline().strip().split()\n    # Get solution\n    return stdin.readline().strip()\n\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    data = list(map(int, stdin.readline().split()))\n    return''.join(map(str, solution_alt(n, data)))\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_colors, length_of_array = [int(x) for x in stdin.split()]\n\n    array = [int(x) for x in stdin.split()]\n\n    if number_of_colors > length_of_array:\n        print(\"NO\")\n        return\n\n    colors = set()\n    for i in range(1, number_of_colors + 1):\n        colors.add(i)\n\n    for i in range(1, number_of_colors + 1):\n        if i in colors:\n            colors.remove(i)\n        elif len(colors) < i:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(\" \".join(str(x) for x in array))"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    if k < 1 or n < 1:\n        return \"NO\"\n    a.sort()\n    counter = 1\n    previous = a[0]\n    while counter < k:\n        if a[counter]!= previous:\n            previous = a[counter]\n            counter += 1\n        else:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n'''\n"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int, stdin.readline().split())\n    if n<1 or k<1:\n        return 'NO'\n    a=list(map(int, stdin.readline().split()))\n    if n<k:\n        return 'NO'\n    if n==k:\n        return 'YES'\n    colors=set()\n    for i in range(k):\n        colors.add(i)\n    for x in a:\n        if x in colors:\n            colors.remove(x)\n        elif len(colors)<k:\n            colors.add(x)\n        else:\n            return 'NO'\n    return 'YES'+' '.join(map(str, colors))\n\n\"\"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    if k > n:\n        return \"NO\"\n    if k == 1:\n        return \"YES\"\n    for i in range(1, k):\n        if set(arr) < set(range(1, k + 1)):\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    n, k = [int(x) for x in stdin.split()]\n    numbers = [int(x) for x in stdin.split()]\n    if k > n:\n        print(\"NO\")\n        return\n    s = \" \".join(map(str, numbers))\n    c = Counter(s)\n    if k > len(c):\n        print(\"NO\")\n        return\n    for i in c:\n        if c[i] > n:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    print(c)"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    for i in range(k):\n        a = list(set(a))\n        if len(a) < k:\n            print('NO')\n            return 'NO'\n        else:\n            print('YES')\n            a = sorted(a)\n            print(*a)\n            return 'YES'"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4008,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    ans = \"NO\"\n    for i in range(k):\n        if a.count(i) > 0:\n            ans = \"YES\"\n            break\n    return ans\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(s) for s in stdin.split()]\n    digits = list(map(int, stdin))\n    for i in range(n):\n        if digits[i] == 1:\n            digits[i] = 0\n        else:\n            digits[i] = 1\n    return str(x - 1)\nprint(solution(input()))\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split(' '))\n    d = stdin[0]\n    n = int(d * (10 ** x))\n    ans = 0\n    while n % (10 ** y):\n        ans += 1\n        n += 1\n    return str(ans)"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    return \"{:d}\".format(n + y - 10 ** x % (10 ** y))\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length, x, y = map(int, stdin.split())\n    number = list(map(int, stdin))\n\n    if y > length - x:\n        return '0'\n\n    mod = 10 ** x\n\n    ones = 0\n    total = 0\n    for i in range(length - 1, -1, -1):\n        total += ones\n        if number[i] == 1:\n            total += 1\n            ones = 0\n        else:\n            ones += 1\n\n        if total >= mod:\n            return str(i - length + x)\n    return str(length - 1)"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    digits = [int(x) for x in stdin]\n    x_in_number = str(digits[:x])\n    y_in_number = str(digits[x:x + y])\n    digits_to_change = [i for i, d in enumerate(digits) if d == 1]\n    min_operations = n - len(x_in_number) - len(y_in_number)\n    remainder = int(digits_to_change[-1])\n    for i in range(len(digits_to_change) - 1, -1, -1):\n        if remainder == 0:\n            break\n        if remainder == 10:\n            remainder = 0\n        if digits[digits_to_change[i]] == 1:\n            remainder = 1\n        digits[digits_to_change[i]] = remainder\n        remainder *= 10\n    return str(min_operations)\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(3)"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0]) * 10 ** int(stdin[1]) % (10 ** int(stdin[2])))"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n    n, x, y = map(int, stdin.split())\n    n = len(str(n))\n    m = n // gcd(x, y)\n    return m\n\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 3)\n\"\"\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        if n < 3:\n            print(\"NO\")\n        elif n == 3:\n            if a[0] == a[2] and a[1] == a[1]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            p = [0] * (n + 1)\n            p[3] = 1\n            for i in range(4, n + 1):\n                p[i] = p[i - 3] + p[i - 2]\n            if p[n] == 0:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n        print()\n    return \"\""
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(a: list) -> bool:\n        return a[:] == a[::-1]\n\n    T = int(stdin.readline())\n    for _ in range(T):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        print('YES' if is_palindrome(a) else 'NO')"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n\n    for _ in range(T):\n        n = int(stdin.readline().strip())\n        A = [int(x) for x in stdin.readline().strip().split()]\n        for i in range(n - 2):\n            if A[i] == A[i + 1] == A[i + 2]:\n                print('YES')\n                break\n        else:\n            print('NO')"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n\n        odd = 0\n        for i in range(1, n + 1):\n            if a[i - 1] % 2 == 1:\n                odd += 1\n\n        if n >= 3 and odd < 2:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        if any(a[i:] == a[i:][::-1] for i in range(n)):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        a = [int(x) for x in stdin.readline().strip().split(' ')]\n        print('YES' if is_palindrome(a, n) else 'NO')\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        n = int(stdin)\n        a = stdin.split()\n        numbers = [int(i) for i in a]\n        if sum(numbers) < 5000:\n            if is_palindrome(numbers):\n                print('YES')\n            else:\n                print('NO')\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO\\n')\n\nassert(solution('''3\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n''') == 'NO\\nNO\\nYES\\nYES\\nNO"
    },
    {
        "number": 4010,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    a = stdin.readline().strip().split()\n    t = stdin.readline()\n    for _ in range(int(t)):\n        n = int(stdin.readline())\n        a = stdin.readline().strip().split()\n        if is_subsequence_of_palindrome(a, n):\n            print('YES')\n        else:\n            print('NO')\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = int(stdin.readline().strip())\n    f = [int(c) for c in stdin.readline().strip()]\n\n    max_num = 0\n    while a!= 0:\n        max_num = max(max_num, a)\n        a = a * 10 + (a // 10) % 10\n        index = f[a % 10]\n        a //= 10\n        a *= 10\n        a += index\n\n    return str(max_num)"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = [int(stdin.readline().strip()) for _ in range(9)]\n    return max(a[i] * f[i - 1] for i in range(1, n + 1))\n\nassert(solution('''4\n1337\n1 2 5 4 6 6 3 1 9''') == '1557')\nassert(solution('''5\n11111\n9 8 7 6 5 4 3 2 1''') == '99999')\nassert(solution('''2\n33\n1 1 1 1 1 1 1 1 1''') == '33')"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = int(stdin.readline().strip())\n    f = tuple(map(int, stdin.readline().strip().split()))\n    return str(max_number_of_replacement(a, f))\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip()\n    f = [int(x) for x in stdin.readline().strip().split()]\n    m = max(a)\n    ans = 0\n    for i in range(1, m+1):\n        ans += f[i] * i\n    return str(ans)"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip()))\n    f = list(map(int, stdin.readline().strip().split()))\n    result = \"\"\n    a.sort()\n    for i in range(n):\n        a[i] = f[a[i]-1]\n    result = str(int(\"\".join(map(str, a))))\n    return result\n\nprint(solution(\"\"))\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = [int(stdin.readline()) for _ in range(9)]\n    result = a\n    for _ in range(n - 1):\n        new_result = []\n        for i, x in enumerate(result):\n            new_result.append(str(f[int(x) - 1]))\n        result = ''.join(new_result)\n    return result"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin[:n]\n    f = [int(stdin[i]) for i in range(n, n * 2)]\n    m = n * 9\n    table = [list(range(10)) for _ in range(10)]\n    for i in range(n):\n        if table[f[i]][a[i]]!= a[i]:\n            for j in range(10):\n                if table[f[i]][j]!= a[i]:\n                    table[f[i]][j] = a[i]\n                    break\n        else:\n            table[f[i]][a[i]] = a[i]\n    a = ''\n    for i in range(10):\n        a += ''.join(map(str, table[i]))\n    return a\n"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.strip()\n    f = list(map(int, stdin.strip().split()))\n    \n    def fmap(n):\n        return f[n - 1]\n    \n    m = len(a)\n    best = 0\n    for i in range(m):\n        prev = a[i]\n        cur = a[:i] + fmap(int(a[i])) + a[i + 1:]\n        if cur > best:\n            best = cur\n            \n    return str(best)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = tuple(int(c) for c in stdin.readline().strip())\n\n    n = len(a)\n    s = 0\n    for i in range(n):\n        d = a[i]\n        if d == '9' and f[i]!= 9:\n            s += 1\n        elif d!= '9' and f[i] == 9:\n            s += 1\n\n    return str(s)"
    },
    {
        "number": 4011,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = stdin[1:n + 1]\n    f = [int(x) for x in stdin[n + 1:]]\n    if n == 1:\n        return str(f[0])\n    if n == 2:\n        return str(f[0] * f[1])\n    f = [str(x) for x in f]\n    s = a[:len(a) - n]\n    while n:\n        for i in range(len(f)):\n            if a[n - 1] == str(i + 1):\n                a = a[:n - 1] + f[i] + a[n:]\n                n -= 1\n                break\n        if not n:\n            break\n    return a\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return '\\n'.join(map(str, solution_dp(n)))\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    out = []\n    for _ in range(n):\n        a, b, c = [int(x) for x in stdin.readline().strip().split(\" \")]\n        \n        res = [a, b, c]\n        while not all(x % res[0] == 0 and x % res[1] == 0 and x % res[2] == 0 for x in res):\n            for x in res:\n                if x % res[0] == 0:\n                    res[0] = res[0] * 2\n                    break\n                if x % res[1] == 0:\n                    res[1] = res[1] * 2\n                    break\n                if x % res[2] == 0:\n                    res[2] = res[2] * 2\n                    break\n        out.append(res)\n    return \"\\n\".join(str(x) for x in out)"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        a, b, c = [int(x) for x in stdin.readline().strip().split()]\n        if b % a == 0 and c % b == 0:\n            print(a, b)\n        else:\n            print('-1')"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numberOfTestCases = int(stdin.readline().strip())\n    for _ in range(numberOfTestCases):\n        a, b, c = [int(v) for v in stdin.readline().strip().split()]\n        if b % a == 0 and c % b == 0:\n            print(\"1 1 %d %d %d\" % (a, b, c))\n        else:\n            print(\"%d %d %d\" % (a + b - 1, a, a + b - 1))\nsolution(stdin)\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    res = []\n    for i in range(T):\n        a, b, c = [int(x) for x in stdin.readline().split()]\n        x, y = max(a, b, c), min(a, b, c)\n        if y % x == 0:\n            res.append(x)\n        elif x % y == 0:\n            res.append(y)\n        else:\n            for x in range(1, y // x + 1):\n                if (y % x == 0):\n                    res.append(x)\n                    break\n            if (x == y // x):\n                res.append(y)\n    return \" \".join(str(x) for x in res)\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.readlines()\n    for case in cases:\n        a, b, c = tuple(int(c) for c in case.split())\n        cnt = 0\n        while b > 0:\n            if b % a == 0:\n                cnt += b\n                break\n            b += 1\n            cnt += 1\n        while c > 0:\n            if c % b == 0:\n                cnt += c\n                break\n            c -= 1\n            cnt += 1\n        print(cnt)\n\nsolution(input())"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        a,b,c = [int(x) for x in stdin.split()]\n        if a < b and b % a == 0:\n            if c % b == 0:\n                print(str(b) + \" \" + str(a) + \" \" + str(c))\n        if a > b and b % a == 0:\n            if c % a == 0:\n                print(str(a) + \" \" + str(b) + \" \" + str(c))\n        if a < b and b % a!= 0:\n            if c % a == 0:\n                print(str(a) + \" \" + str(b) + \" \" + str(c))\n        if a > b and b % a!= 0:\n            if c % b == 0:\n                print(str(a) + \" \" + str(b) + \" \" + str(c))\n"
    },
    {
        "number": 4012,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = {}\n    for i in range(n):\n        a, b, c = (int(x) for x in stdin.readline().strip().split())\n        d[(a, b)] = d.get((a, b), []) + [c]\n    ret = []\n    for (a, b), cs in d.items():\n        cs = sorted(cs)\n        if b % a == 0:\n            c = b // a\n            ret.append(a)\n            ret.append(b)\n            ret.append(c)\n            break\n    else:\n        ret = [-1] * 3\n    return \"\\n\".join(map(str, ret))"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = stdin.readline().strip().split()\n    a = list(map(int, a))\n    a.sort()\n    i = 0\n    while a[i] == a[i+1]:\n        i += 1\n    return str(a[i])\n\nassert(solution('''4\n1 3 3 7''')) == '2'\nassert(solution('''2\n1 100000''')) == '0'\nassert(solution('''6\n1 3 3 7 5 8''')) == '2'\n\n'''\n    n = int(stdin.readline().strip())\n    a = map(int, stdin.readline().strip().split())\n    m = max(a)\n    a.remove(max(a))\n    return str(max(a) - min(a))\n'''\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def my_max(a):\n        m = a[0]\n        for i in a:\n            if i > m:\n                m = i\n        return m\n\n    def my_min(a):\n        m = a[0]\n        for i in a:\n            if i < m:\n                m = i\n        return m\n\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    m = my_max(a)\n    for i in a:\n        if i!= my_max(a):\n            m = min(m, i)\n    print(m-1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().strip().split()]\n    b = [0] * (n - 1)\n    for i in range(0, n - 1):\n        b[i] = max(a[i], a[i + 1]) - min(a[i], a[i + 1])\n    return str(min(b))"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    return str(a[n - 2] - a[n - 1])\n\nimport sys\n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[:stdin.index('\\n')]\n    n = int(n)\n    a = stdin[stdin.index('\\n') + 1:]\n    a = [int(i) for i in a.split(' ')]\n    a.sort()\n    return str(a[n - 2] - a[n - 1])\n    \n"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = [int(i) for i in stdin.readline().split()]\n    return str(max(a) - min(a))\n\nassert(solution('''4\n1 3 3 7\n''') == '2')\nassert(solution('''2\n1 100000\n''') == '0')\nassert(solution('''3\n1 3 3\n''') == '2')\nassert(solution('''8\n1 3 3 4 4 5 6 7 8\n''') == '0')\nassert(solution('''16\n
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.splitlines()\n    N = int(_[0])\n    arr = [int(x) for x in _[1].split()]\n    mins = [x for x in arr]\n    mins.sort()\n    mins.reverse()\n    return str(max(arr) - min(arr))"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n\n\nassert (solution(input()) == '0' or solution(input()) == '1')\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    a.sort()\n    return str(max(a[i] - min(a) for i in range(n-1)) - 1)"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days, exams = [int(n) for n in stdin.split()]\n    days = range(1, days + 1)\n    exams = list(range(1, exams + 1))\n    n = len(days)\n    m = len(exams)\n\n    days.sort()\n    exams.sort()\n    ans = [0] * (m + 1)\n\n    for i in range(n):\n        if i > 0:\n            for j in range(i):\n                if days[j] < days[i] <= days[j] + exams[j]:\n                    ans[j] += 1\n                elif days[i] - exams[j] < days[j] <= days[i] + exams[j]:\n                    ans[j] += 1\n\n    print(ans)"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    days, num_of_exams = [int(i) for i in stdin.split()]\n    exams = [int(i) for i in stdin.split()]\n    exams = sorted(exams)\n    \n    answer = [-1] * (num_of_exams + 1)\n    for i in range(num_of_exams):\n        answer[i + 1] = exams[i]\n    answer[0] = 0\n    \n    for i in range(1, days + 1):\n        for j in range(i, days + 1):\n            if answer[i] == -1:\n                continue\n            if i == j:\n                answer[i] = 0\n                continue\n            if i > j:\n                continue\n            if answer[i]!= 0:\n                answer[j] = answer[i]\n                break\n    \n    return''.join(str(i) for i in answer)\n\nassert solution('5 2') == '1 2 3 0 3'\nassert solution('3 2') == '-1'\nassert solution('10 3') == '2 2 2 1 1 0 4 3 4 4'\nassert solution('1 1') == '0'\nassert solution('7 1') == '2'\nassert solution('1 1') == '0'\nassert solution
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split()]\n\n    # Create the schedule.\n    preparation = [0] * (n + 1)\n    exams = [0] * m\n\n    # Map each exam to the number of days.\n    for i in range(m):\n        exams[i] = [int(s) for s in stdin.readline().split()]\n        preparation[exams[i][0]] = i + 1\n\n    # Find a schedule.\n    for i in range(n):\n        for j in range(m):\n            preparation[i + 1] = max(preparation[i + 1], preparation[i] + exams[j][2])\n\n    # Output the result.\n    if preparation[n] == m:\n        return ''.join(map(str, preparation[1:]))\n    else:\n        return '-1'\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\nstdin = \"\"\"-5 -2\n1 3 1\n1 5 1\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_optimized(stdin))\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    preparation = [int(x) for x in stdin.split()]\n    day, preparation_day = 1, 1\n\n    while day <= n:\n        # preparation\n        if preparation_day <= n:\n            preparation_day += preparation[preparation_day - 1]\n        # day\n        if day <= n:\n            for i in range(m):\n                if day == preparation_day + i + 1:\n                    print(i + 1, end=\" \")\n                    break\n        day += 1\n        preparation_day += 1\n\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe given test cases contain undescored lines, so stdin has to be split by \\n. The first line of the test case contains two integers n and m - the number of days and the number of exams.\n\nThe next $m$ lines each contain three integers s_i, d_i, c_i - the day, when questions for the $i$-th exam will be given, the day of the $i$-th exam, number of days Petya needs to prepare for the $i$-th exam.\n\nYou must return a string with all the answers, separated by newline character.\n\nIf there are multiple solutions, return any of them.\n\n-----Examples-----\nInput\n5 2\n1 3 1\n1 5 1\n\nOutput\n1 2 3 0 3 \n\nInput\n3 2\n1 3 1\n1 2 1\n\nOutput\n-1\n\nInput\n10 3\n4 7 2\n1 10 3\n8 9 1\n\nOutput\n2 2 2 1 1 0 4 3 4 4 \n\"\"\"\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n\n    n, m = map(int, stdin[0].split())\n    exams = [map(int, stdin[i + 1].split()) for i in range(m)]\n\n    # for i, e in enumerate(exams):\n    #     print(i, e)\n\n    def time_to_pass(e, d):\n        d = sorted(d)\n        a = len(d)\n        a = 0\n        for i in range(a):\n            if e > d[i]:\n                a += 1\n        return a\n\n    max_time = 0\n    for i in range(1, n + 1):\n        time = 0\n        passed = 0\n        for e in exams:\n            time_to_pass_i = time_to_pass(e[1], e[0:2])\n            time += time_to_pass_i\n            passed += time_to_pass_i\n        if max_time < time + passed:\n            max_time = time + passed\n    return str(max_time)"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = []\n    for i in range(m):\n        s.append(map(int, stdin.split()))\n    s = sorted(s, key=lambda x: x[0])\n    def is_valid(s: list) -> bool:\n        d = 0\n        for i in range(m):\n            d += s[i][1]\n            if d > s[i][0]:\n                return False\n            if d - s[i][1] < i:\n                return False\n        return True\n    s = sorted(s, key=lambda x: x[1])\n    for i in range(m):\n        s[i][0] -= 1\n        s[i][1] -= 1\n    if is_valid(s):\n        for i in range(m):\n            print(i+1, s[i][0], s[i][1])\n        return \"\"\n    else:\n        return \"-1\"\n\nassert(solution('''5 2\n1 3 1\n1 5 1''') == '2 2 2 1 1 0 4 3 4 4')\nassert(solution('''3 2\n1 3 1\n1 2 1''') == '-1')\nassert(solution('''10 3\n4 7 2\n1 10 3\n8 9 1''') == '2 2 2 1 1 0 4 3 4 4')\nassert(solution('''2 3\n1 2 1\n1 1 1''') == '-1')\nassert(solution('''5 4\n1 3 1\n1 2 1\n2 3 1\n3 2 1\n2 1 1''') == '2 2 1 1 0 4 3 4 4')\nassert(solution('''7 3\n1 2 1\n2 1 1\n3 2 1\n3 2 1\n4 3 1\n1 1 1\n3 2 1''') == '-1')\nassert(solution('''7 3\n1 2 1\n2 1 1\n3 2 1\n3 2 1\n4 3 1\n1 1 1\n3 2 1''') == '-1')\nassert(solution('''8 5\n1 4 1\n2 4 1\n2 4 1\n2 4 1\n3 5 1\n4 5 1\n1 4 1\n2 4 1''') == '2 2 0 1 1 4 3 4 4 4')\nassert(solution('''5 5\n1 4 1\n2 4 1\n2 4 1\n2 4 1\n3 5 1\n4 5 1\n1 4 1\n2 4 1''') == '2 2 0 1 1 4 3 4 4')\nassert(solution('''4 4\n1 4 1\n2 4 1\n2 4 1\n2 4 1''') == '-1')\nassert(solution('''5 4\n1 4 1\n2 4 1\n2 4 1\n2 4 1\n3 4 1\n4 4 1\n1 4 1\n2 4 1''') == '-1')\nassert(solution('''7 3\n1 2 1\n2 1 1\n3 2 1\n4 3 1\n1 1 1\n3 2 1\n1 2 1''') == '-1')\nassert(solution('''7 3\n1 2 1\n2 1 1\n3 2 1\n4 3 1\n1 1 1\n3 2 1\n1 2 1''') == '-1')\nassert(solution('''8 5\n1 4 1\n2 4 1\n2 4 1\n2 4 1\n3 5 1\n4 5 1\n1 4 1\n2 4 1''') == '2 2 0 1 1 4 3 4 4 4 4')\nassert(solution('''5 5\n1 4 1\n2 4 1\n2 4 1\n2 4 1\n3 5 1\n4 5 1\n1 4 1\n2 4 1''') == '2 2 0 1 1 4 3 4 4 4')\nassert(solution('''5 4\n1 4 1\n2 4 1\n2 4 1\n2 4 1\n3 4 1\n4 4 1\n1 4 1\n2 4 1''') == '2 2 0 1 1 4 3 4 4')\nassert(solution('''5 4\n1 4 1\n2 4 1\n2 4 1\n2 4 1\n3 4 1\n4 4 1\n1 4 1\n2 4 1''') == '2 2 0 1 1 4 3 4 4')\nassert(solution('''5 5\n1 4 1\n2 4 1\n2 4 1\n2 4 1\n3 5 1\n4 5 1\n1 4 1\n2 4 1''') == '2 2 0 1 1 4 3 4 4')\nassert(solution('''7 3\n1 2 1\n2 1 1\n3 2 1\n4 3 1\n1 1 1\n3 2 1\n1"
    },
    {
        "number": 4014,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    exams = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n    exams.sort(key=lambda x: x[0])\n    ans = []\n    for i in range(n):\n        day = i + 1\n        passed = 0\n        for exam in exams:\n            if exam[0] <= day <= exam[1]:\n                passed += 1\n        ans.append(passed)\n    return''.join(str(x) for x in ans)\n    \n    \n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, m = [int(stdin.split()[0]), int(stdin.split()[1])]\n    if n == m:\n        return \"0\"\n    elif n > m:\n        return \"-1\"\n    else:\n        res = 1\n        while n!= m:\n            if n % 2 == 0 and n // 2 >= 1:\n                n //= 2\n            elif n % 3 == 0 and n // 3 >= 1:\n                n //= 3\n            res += 1\n        return str(res)\n\nn = input()\nprint(solution(n))\n\n\n\n##  HackerRank ##\n\n##  Starter ##"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # return '0'\n    pass"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    if n == m:\n        return str(0)\n    elif n > m:\n        return str(-1)\n    elif n % m == 0:\n        return str(n // m)\n    elif m % n == 0:\n        return str(m // n)\n    elif n % 10 == 0:\n        return str(m * 3 - n * 2)\n    elif m % 10 == 0:\n        return str(n * 3 - m * 2)\n    elif n % 2 == 0:\n        return str(m * 3 - n * 2)\n    elif m % 2 == 0:\n        return str(n * 3 - m * 2)\n    else:\n        return str(m * 3 - n * 2)\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    if m < n:\n        print(0)\n        return\n    ans = [0]\n    def dfs(n, m, steps):\n        if n == m:\n            ans[0] = steps + 1\n            return\n        if n > m:\n            return\n        dfs(n * 2, m, steps + 1)\n        dfs(n * 3, m, steps + 1)\n    dfs(n, m, 0)\n    print(ans[0])\n\nimport sys\n\nsys.setrecursionlimit(100000)\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"120 51840\")\n    7\n    \"\"\"\n    from math import log10\n    n, m = list(map(int, stdin.split()))\n    if n == m:\n        return \"0\"\n    if n == 1:\n        return str(int(log10(m)))\n    if m == 1:\n        return str(int(log10(n) / 3))\n    if m % 3 == 0:\n        return str(int(log10(n) / 3))\n    return \"-1\"\n    \n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == m:\n        return '0'\n    elif n < m:\n        return '-1'\n    else:\n        moves = 0\n        while m!= n:\n            moves += 1\n            if m % 2 == 0:\n                m /= 2\n            else:\n                m *= 3\n                m -= 1\n        return str(moves)"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n == m:\n        return '0'\n    steps = 0\n    while n!= m:\n        if n % 3 == 0:\n            n //= 3\n            steps += 1\n        elif n % 2 == 0:\n            n //= 2\n            steps += 1\n        elif n > m:\n            return '-1'\n        else:\n            return '-1'\n    return str(steps)\n\nn, m = [int(x) for x in input().split()]\nprint(solution(input()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    steps = 0\n    if n > m:\n        return -1\n    if n == m:\n        return steps\n    if n == 0:\n        return steps\n    if n == 1:\n        return steps + 1\n    if n == 2:\n        return steps + 2\n    if n == 3:\n        return steps + 2\n    if n == 4:\n        return steps + 3\n    if n == 5:\n        return steps + 4\n    if n == 6:\n        return steps + 5\n    if n == 7:\n        return steps + 6\n    if n == 8:\n        return steps + 6\n    if n == 9:\n        return steps + 7\n    if n == 10:\n        return steps + 7\n\n\n-----Alternate Solutions-----\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    result = 0\n    while n!= m:\n        if n % 3 == 0:\n            n //= 3\n        elif n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n        result += 1\n    return str(result)"
    },
    {
        "number": 4015,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n:\n        return str(0)\n    if m == 2:\n        return str(n * 2)\n    if m == 3:\n        return str(n * 3)\n    if m == 4:\n        return str(n * 4)\n    if m == 5:\n        return str(n * 5)\n    if m == 6:\n        return str(n * 6)\n    if m == 7:\n        return str(n * 7)\n    return str(-1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    text = stdin.strip()\n    substrings = set()\n    for start in range(len(text) - n + 1):\n        substrings.add(text[start:start + n])\n    substrings = list(substrings)\n    substrings.sort()\n    return \"\".join(substrings[:k])"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n    return ''.join(t[i] for i in range(n) if t[i:].count(t[i]) == k)\n\nassert(solution('aba') == 'ababababa')\nassert(solution('cat') == 'catcat')\nassert(solution('a') == 'a')\nassert(solution('bbb') == 'bbbbbbb')\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    ans = ''.join(s[i:i + n] for i in range(len(s) - n + 1))\n    for i in range(len(ans) - k + 1):\n        if s[i:i + n] == s[i:i + n][::-1]:\n            print(ans[i:i + n])\n            return"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    s = stdin.strip()\n    return s[0] + s[1:].join(s[n - 1] * k)\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin.strip()\n    result = \"\"\n    for i in range(n):\n        result += t[i] * k\n        result += t[n - i - 1] * k\n    return result\n\nassert \"ababababa\" == solution(input())\nassert \"catcat\" == solution(input())\nassert \"catcatcatcatcat\" == solution(input())\nassert \"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatn\n\nassert \"ababababa\" == solution(input())\nassert \"catcat\" == solution(input())\nassert \"catcatcatcatcatcat\" == solution(input())\nassert \"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat\nassert \"catcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcatcat[l:r] = t[l:r] == t[l:r] == t[r:] == t[l+1:r+1]\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n\n    for i in range(n, n + k - 1):\n        if t[i:i + n] * (n // len(t)) == t:\n            return t[:i] + t[i:i + n] * (n // len(t))\n\n    return \"\"\n\n\nassert solution(\"aba\") == \"ababababa\"\nassert solution(\"cat\") == \"catcat\"\nassert solution(\"catc\") == \"\"\nassert solution(\"aabbccc\") == \"\"\nassert solution(\"catcatcat\") == \"\"\nassert solution(\"aaaaaa\") == \"\"\nassert solution(\"a\") == \"\"\nassert solution(\"abc\") == \"\"\nassert solution(\"aab\") == \"\"\n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = int(lines[0].split()[0]), int(lines[0].split()[1])\n    t = lines[1]\n    result = find_substrings(n, k, t)\n    return result\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    for i in range(len(s) - k + 1):\n        sub = s[i : i + k]\n        if len(set(sub)) == k and sub == sub[::-1]:\n            return sub\n    return ''\n    \n"
    },
    {
        "number": 4016,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution\n\n    \"\"\"\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    k_substrings = set()\n    result = []\n    for i in range(len(s) - n + 1):\n        k_substring = s[i: i + n]\n        if k_substring not in k_substrings:\n            k_substrings.add(k_substring)\n            result.append(k_substring)\n            if len(result) == k:\n                break\n    return \"\".join(result)"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = 0\n    s = sum(a)\n    for i in range(n):\n        if s - a[i] > s // 2:\n            res += 1\n            s -= a[i]\n    return str(res) if res > 0 else '0'"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(len([i for i, j in enumerate(a) if j - sum(a[:i]) == sum(a[i+1:])])) +'' +''.join(map(str, [i for i in range(len(a)) if i not in [j-sum(a[:i]) for j in a[i+1:]]]))\n\nprint(solution('5\\n2 5 1 2 2'))\nprint(solution('4\\n8 3 5 2'))\nprint(solution('5\\n2 1 2 4 3'))\nprint(solution('5\\n1 1 1 1 1'))\nprint(solution('5\\n1 1 1 1 1'))\nprint(solution('5\\n1 1 1 1 1'))\nprint(solution('5\\n1 1 1 1 1'))\nprint(solution('5\\n1 1 1 1 1'))\n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    s = sum(a)\n    m = len(a)\n\n    if m == 2:\n        if a[0] == s:\n            print(0)\n            return\n\n    good_indices = []\n    for i in range(m):\n        a[i] = s - a[i]\n        if a[i] == 0:\n            if a[i] == a[i - 1]:\n                continue\n            else:\n                good_indices.append(i)\n\n    print(len(good_indices))\n    for i in good_indices:\n        print(i + 1, end=' ')\n    print()"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    r = []\n    for i in range(1, n):\n        if a[i] - sum(a[:i]) == sum(a[i+1:]):\n            r.append(i+1)\n    return str(len(r)) + '\\n' +''.join(map(str, r)) if r else str(0)"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    count = 0\n    res = []\n    for i, x in enumerate(a):\n        if x + sum(a[:i]) > sum(a[i+1:]):\n            count += 1\n            res.append(i+1)\n    if count > 0:\n        return str(count) +'' +''.join(str(x) for x in res)\n    else:\n        return str(0)\nprint(solution(input()))"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    good = [True] * n\n\n    for i in range(n):\n        if good[i]:\n            for j in range(i + 1, n):\n                if good[j] and a[i] + a[j] == a[j]:\n                    good[j] = False\n\n    if not good[-1]:\n        return str(0)\n\n    result = [str(i + 1) for i, good in enumerate(good) if good]\n    return \"\\n\".join(result)"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    good_indices = []\n    for i in range(n):\n        good_indices.append([i, sum(a[:i] + a[i+1:])])\n        \n    for good_index in good_indices:\n        if good_index[1] == a[good_index[0]]:\n            return good_index[0] + 1\n    \n    return 0\n\nprint(solution(stdin))"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = list(map(int, stdin.readline().strip().split()))\n    if len(a) < 2:\n        print(0)\n        print(0)\n        return\n    s = sum(a)\n    print(s)\n    print(*a)\n\nprint(solution(input()))\n    \n    \n"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    indices = []\n    for i in range(len(arr)):\n        arr[i] -= arr[i - 1] if i > 0 else 0\n        if arr[i] == 0:\n            indices.append(i)\n    if not indices:\n        print(0)\n        return\n    print(len(indices))\n    for i in indices:\n        print(i, end=' ')\n    return"
    },
    {
        "number": 4017,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.split('\\n')[0]\n    _ = list(map(int, stdin.split('\\n')[1].split()))\n    _ = set(_)\n    _ = list(_)\n    n = len(_)\n    k = 0\n    for j in range(n):\n        if _[j] in _[j+1:]:\n            _.pop(j)\n            k += 1\n    return str(k) + '\\n' +''.join(str(i) for i in _)"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    s = stdin.strip()\n\n    if k > len(s):\n        return -1\n\n    f = [[0 for _ in range(n + 1)] for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            if i == 1:\n                f[i][j] = 1\n            elif s[j - 1] == s[j]:\n                f[i][j] = f[i - 1][j - 1]\n            else:\n                f[i][j] = min(f[i][j - 1], f[i - 1][j - 1], f[i - 1][j]) + 1\n\n    return f[k][n]\n\nassert solution(\n    '4 5\\nasdf'\n) == 4\nassert solution(\n    '5 6\\naaaaa'\n) == 15\nassert solution(\n    '10 100\\najihiushda'\n) == 233\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return next(x for x in range(2, 21) if (x * (x - 1)) > len(stdin) * (len(stdin) + 1) // 2) if len(stdin) * (len(stdin) + 1) // 2 % x == 0 else -1\n\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n == 0 or k == 0:\n        return '-1'\n    s = stdin.rstrip()\n    s = set(s)\n    if len(s) > k:\n        return '-1'\n    l = len(s)\n    m = len(s) * (n - l)\n    return str(m)"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # replace this with your solution\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin.strip()\n    if k > len(s):\n        return -1\n    if k == 0:\n        return 0\n    cost = 0\n    for i in range(0, len(s) - k + 1):\n        cost += len(s) - i\n    return cost\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n\n    if n < k:\n        return '-1'\n    elif k == n:\n        return '0'\n    else:\n        for i in range(1, n):\n            t = s[:i]\n            curr_cost = s[i:].count('a') + s[i:].count('j')\n            s_cost = (n - i) * curr_cost\n            for x in range(len(t) - 1):\n                for y in range(x + 1, len(t)):\n                    if t[x] == t[y]:\n                        s_cost += 1\n            if s_cost == k:\n                return str(s_cost)\n        return '-1'\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n\n    if n < k:\n        return -1\n\n    if n == k:\n        return 0\n\n    dp = [float('inf')] * (k+1)\n    dp[0] = 0\n\n    for i in range(1, n+1):\n        for j in range(k, 0, -1):\n            if i - j < 0:\n                break\n\n            if dp[j] + abs(i - j) < dp[j - 1]:\n                dp[j] = dp[j - 1] + abs(i - j)\n\n    return dp[k]\n\nassert(solution('4 5') == 4)\nassert(solution('5 6') == 15)\nassert(solution('10 100') == 233)\nassert(solution('5 7') == -1)\nassert(solution('1 11') == -1)\nassert(solution('4 1') == 0)\nassert(solution('5 5') == 0)\nassert(solution('1 100') == -1)\nassert(solution('1 10') == -1)\nassert(solution('5 8') == -1)\nassert(solution('1 1') == 0)\nassert(solution('5 9') == -1)\nassert(solution('5 10') == -1)\nassert(solution('4 9') == -1)\nassert(solution('4 10') == -1)\nassert(solution('6 3') == -1)\nassert(solution('1 100') == -1)\nassert(solution('4 10') == -1)\nassert(solution('7 3') == -1)\nassert(solution('7 4') == -1)\nassert(solution('4 7') == -1)\nassert(solution('6 7') == -1)\nassert(solution('6 7') == -1)\nassert(solution('7 6') == -1)\nassert(solution('1 100') == -1)\nassert(solution('1 10') == -1)\nassert(solution('1 1') == 0)\nassert(solution('1 11') == 1)\nassert(solution('1 3') == -1)\nassert(solution('1 2') == 0)\nassert(solution('3 1') == -1)\nassert(solution('3 2') == 0)\nassert(solution('3 3') == 1)\nassert(solution('2 1') == -1)\nassert(solution('2 3') == -1)\nassert(solution('2 2') == 0)\nassert(solution('5 5') == 0)\nassert(solution('5 6') == 15)\nassert(solution('10 100') == 233)\nassert(solution('5 7') == -1)\nassert(solution('1 10') == -1)\nassert(solution('1 11') == 1)\nassert(solution('1 3') == -1)\nassert(solution('1 2') == 0)\nassert(solution('3 1') == -1)\nassert(solution('3 2') == 0)\nassert(solution('3 3') == 1)\nassert(solution('2 1') == -1)\nassert(solution('2 3') == -1)\nassert(solution('2 2') == 0)\nassert(solution('5 5') == 0)\nassert(solution('5 6') == 15)\nassert(solution('10 100') == 233)\nassert(solution('5 7') == -1)\nassert(solution('1 10') == -1)\nassert(solution('1 11') == 1)\nassert(solution('1 3') == -1)\nassert(solution('1 2') == 0)\nassert(solution('3 1') == -1)\nassert(solution('3 2') == 0)\nassert(solution('3 3') == 1)\nassert(solution('2 1') == -1)\nassert(solution('2 3') == -1)\nassert(solution('2 2') == 0)\nassert(solution('5 5') == 0)\nassert(solution('5 6') == 15)\nassert(solution('10 100') == 233)\nassert(solution('5 7') == -1)\nassert(solution('1 10') == -1)\nassert(solution('1 11') == 1)\nassert(solution('1 3') == -1)\nassert(solution('1 2') == 0)\nassert(solution('3 1') == -1)\nassert(solution('3 2') == 0)\nassert(solution('3 3') == 1)\nassert(solution('2 1') == -1)\nassert(solution('2 3') == -1)\nassert(solution('2 2') == 0)\nassert(solution('5 5') == 0)\nassert(solution('5 6') == 15)\nassert(solution('10 100') == 233)\nassert(solution('5 7') == -1)\nassert(solution('1 10') == -1)\nassert(solution('1 11') == 1)\nassert(solution('1 3') == -1)\nassert(solution('1 2') == 0)\nassert(solution('3 1') == -1)\nassert(solution('3 2') == 0)\nassert(solution('3 3') == 1)\nassert(solution('2 1') == -1)\nassert(solution('2 3') == -1)\nassert(solution('2 2') == 0)\nassert(solution('5 5') == 0)\nassert(solution('5 6') == 15)\nassert(solution('10 100') == 233)\nassert(solution('5 7') == -1)\nassert(solution('1 10') == -1)\nassert(solution('1 11') == 1)\nassert(solution('1 3') == -1)\nassert(solution('1 2') == 0)\nassert(solution('3 1') == -1)\nassert(solution('3 2') == 0)\nassert(solution('3 3') == 1)\nassert(solution('2 1') == -1)\nassert(solution('2 3') == -1)\nassert(solution('2 2') == 0)\nassert(solution('5 5') == 0)\nassert(solution('"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIn the second example we can generate $S$ = { \"a\", \"ja\", \"hij\", \"hi\", \"jia\" }. The cost of the first element in $S$ is $0$ and the cost of the others is $1$. So the total cost of $S$ is $5$.\n\nIn the third example we can't generate a set with size $7$ from the string $s$ because there is no possible subsequence of the string with length $7$.\n\nIn the fourth example we can generate $S$ = { \"aa\", \"ja\", \"hij\", \"hi\", \"jia\", \"h\" }. The cost of the first element in $S$ is $0$ and the cost of the others is $1$. So the total cost of $S$ is $6$.\n\n\"\"\"\n\nn, k = [int(i) for i in input().split()]\ns = input()\n\ncnt = 0\nfor i in range(n - k + 1):\n    cnt += i * (n - k + 1) + n - k"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    assert 1 <= k <= 10 ** 12\n\n    s = stdin.strip()\n\n    cost = 0\n\n    if len(s) < k:\n        return str(cost)\n\n    cost += (k - len(s)) * len(s)\n\n    for i in range(1, k):\n        s_new = s[1:] + s[0]\n\n        assert len(s_new) >= k\n\n        cost += (len(s_new) - len(s)) * len(s)\n\n        s = s_new\n\n    if len(s) == k:\n        cost += len(s)\n\n    return str(cost)\n\nassert solution(stdin) == stdout\n"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassertEqual(solution('''4 5'''), '4')\nassertEqual(solution('''5 6'''), '15')\nassertEqual(solution('''5 7'''), '-1')\nassertEqual(solution('''10 100'''), '233')\nassertEqual(solution('''aaaaa'''), '15')\nassertEqual(solution('''asdf'''), '4')\nassertEqual(solution('''jihiushda'''), '15')\n\n\n\nimport sys\nsys.setrecursionlimit(10000)\nimport sys\nsys.setrecursionlimit(1000000)\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k > n:\n        return -1\n    s = stdin.split()[1]\n    cost = 0\n    for i in range(k):\n        subseq = set()\n        for j in range(n - i):\n            subseq.add(s[j:j + i + 1])\n        cost += len(s) - len(subseq)\n    return cost"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    if d > n - 1:\n        return \"NO\"\n    if m == 0:\n        return \"NO\"\n    if m == n - 1:\n        if d == n - 1:\n            return \"YES\"\n        return \"NO\"\n    e = 0\n    while e < m:\n        e += 1\n        v1, v2 = edges[e]\n        if d == n - 1:\n            return \"YES\"\n        if d == 0:\n            return \"NO\"\n        if v1 == v2:\n            continue\n        if d == 1:\n            return \"NO\"\n        if d % 2 == 1:\n            if d == n - 1:\n                if v1!= 1:\n                    return \"NO\"\n            else:\n                if v1!= d:\n                    return \"NO\"\n            d = d // 2\n        else:\n            if d == n - 1:\n                if v2!= 1:\n                    return \"NO\"\n            else:\n                if v2!= d:\n                    return \"NO\"\n            d = d // 2\n    return \"YES\"\n\nassert(solution('''4 5 1''') == 'YES')\nassert(solution('''4 5 2''') == 'NO')\nassert(solution('''4 4 3''') == 'YES')\nassert(solution('''4 5 3''') == 'NO')\nassert(solution('''4 4 2''') == 'YES')\nassert(solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4''') == 'YES')\nassert(solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n''') == 'YES')\nassert(solution('''4 4 1\n1 2\n1 4\n2 3\n3 4\n''') == 'NO')\nassert(solution('''4 4 1\n1 2\n1 3\n1 4\n2 3\n3 4\n1 3\n''') == 'NO')\nassert(solution('''4 4 1\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n''') == 'NO')\nassert(solution('''4 4 1\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n2 4\n''') == 'NO')\nassert(solution('''4 4 1\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n2 4\n1 2\n''') == 'YES')\nassert(solution('''4 4 3\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n2 4\n1 2\n''') == 'NO')\nassert(solution('''4 4 3\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n2 4\n1 2\n1 4\n1 3\n1 2\n''') == 'NO')\nassert(solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n2 4\n1 2\n1 4\n1 3\n1 2\n''') == 'YES')\nassert(solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n2 4\n1 2\n1 4\n1 3\n1 2\n''') == 'YES')\nassert(solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n2 4\n1 2\n1 4\n1 3\n1 2\n1 4\n''') == 'YES')\nassert(solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n2 4\n1 2\n1 4\n1 3\n1 2\n1 4\n''') == 'NO')\nassert(solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n2 4\n1 2\n1 4\n1 3\n1 2\n1 4\n1 3\n1 2\n1 4\n1 3\n''') == 'NO')\nassert(solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n2 4\n1 2\n1 4\n1 3\n1 2\n1 4\n1 3\n1 2\n1 4\n1 3\n1 2\n1 4\n''') == 'NO')\nassert(solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n2 4\n1 2\n1 4\n1 3\n1 2\n1 4\n1 3\n1 2\n1 4\n1 3\n1 2\n1 4\n''') == 'NO')\nassert(solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n2 4\n1 2\n1 4\n1 3\n1 2\n1 4\n1 3\n1 2\n1 4\n1 3\n1 2\n1 4\n1 3\n''') == 'NO')\nassert(solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n2 4\n1 2\n1 4\n1 3\n1 2\n1 4\n1 3\n1 2\n1 4\n1 3\n1 2\n1 4\n1 3\n''') == 'NO')\nassert(solution('''4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n1 4\n1 3\n2 4\n1 2\n1 4\n1 3\n1 2\n1 4\n1"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split(' ')]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = [int(x) - 1 for x in stdin.split(' ')]\n        graph[v].append(u)\n        graph[u].append(v)\n    if check_degree(graph, d):\n        return 'YES'\n    return 'NO'\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    g = {i: [] for i in range(1, n+1)}\n    for i in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        g[a].append(b)\n        g[b].append(a)\n    first = [1]\n\n    def dfs(u, degree):\n        if degree == d:\n            return True\n        for v in g[u]:\n            if v not in first:\n                first.append(v)\n                if dfs(v, degree+1):\n                    return True\n                first.pop()\n        return False\n\n    for i in range(n):\n        if i+1 not in first:\n            if dfs(i+1, 1):\n                break\n    else:\n        return 'NO'\n    for i in range(1, n+1):\n        if i not in first:\n            print(i, end=' ')\n    return 'YES'\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = tuple(map(int, stdin.split()))\n    edges = []\n    for _ in range(m):\n        u, v = tuple(map(int, stdin.split()))\n        edges.append((u, v))\n    return 'NO' if degree(edges, d) is None else 'YES'\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n__author__ = \"marten\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m, d = [int(i) for i in stdin[0].split()]\n    edges = set([])\n    for i in range(1, m + 1):\n        v1, v2 = [int(j) for j in stdin[i].split()]\n        edges.add((v1, v2))\n        edges.add((v2, v1))\n    res = []\n    def helper(v: int, depth: int) -> None:\n        nonlocal res\n        if depth == n - 1:\n            if v == 1:\n                res.append(list(edges))\n            return\n        for u in edges:\n            if u[0]!= v:\n                edges.add((u[1], u[0]))\n                helper(u[1], depth + 1)\n                edges.remove((u[1], u[0]))\n    helper(1, 0)\n    res = list(map(list, res))\n    for i in res:\n        i.sort()\n    return \"NO\" if not res else \"YES\\n\" + \"\\n\".join([\" \".join(map(str, i)) for i in res])\n\n\nassert (solution(\"1 2\\n1 3\\n1 4\\n2 3\\n3 4\") == \"YES\\n1 2\\n1 3\\n1 4\\n2 3\\n3 4\")\nassert (solution(\"4 5 3\\n1 2\\n1 4\\n2 3\\n3 4\\n4 1\") == \"NO\")\nassert (solution(\"1 2\\n1 3\\n1 4\\n2 3\\n3 4\\n4 1\") == \"NO\")\n"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Read input\n    n, m, d = map(int, stdin.split())\n    \n    # Build graph\n    edges = []\n    for i in range(m):\n        v1, v2 = [int(x) for x in stdin.split()]\n        edges.append((v1, v2))\n    \n    # Find a spanning tree\n    visited = [False for _ in range(n)]\n    for vertex in range(n):\n        if not visited[vertex]:\n            if degree(vertex, edges) == d:\n                return print_spanning_tree(vertex, edges, visited)\n    \n    # No spanning tree found\n    return print('NO')\n    \ndef"
    },
    {
        "number": 4019,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\nassert(solution(sys.stdin.read()) == sys.stdin.readline().strip())\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(' '))\n    h2, m2 = map(int, stdin.split(' '))\n    h3, m3 = (h1 + h2) // 2, (m1 + m2) // 2\n    return f'{h3:02d}:{m3:02d}'\n\nassert(solution(\"10:00\") == \"10:30\")\nassert(solution(\"11:00\") == \"11:30\")\nassert(solution(\"10:59\") == \"11:00\")\nassert(solution(\"20:45\") == \"21:00\")\nassert(solution(\"00:01\") == \"00:00\")\nassert(solution(\"24:01\") == \"00:00\")\nassert(solution(\"00:01\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"11:59\") == \"11:59\")\nassert(solution(\"23:59\") == \"00:00\")\nassert(solution(\"10:59\") == \"11:59\")\nassert(solution(\"21:59\") == \"00:00\")\nassert(solution(\"00:01\") == \"00:00\")\nassert(solution(\"24:01\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution.\"\"\"\n    start_h, start_m = list(map(int, stdin.split(' ')))\n    end_h, end_m = list(map(int, stdin.split(' ')))\n    return '{0:02d}:{1:02d}'.format((start_h + end_h) / 2, (start_m + end_m) / 2)\n\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(\":\")\n    h2, m2 = stdin.split(\":\")\n    h3 = (int(h1) + int(h2)) // 2\n    h3 = str(h3)\n    m3 = (int(m1) + int(m2)) // 2\n    m3 = str(m3)\n    return h3 + \":\" + m3\n\nassert(solution(\"10:00\") == \"10:30\")\nassert(solution(\"11:00\") == \"11:30\")\nassert(solution(\"11:10\") == \"11:11\")\nassert(solution(\"01:02\") == \"02:02\")\nassert(solution(\"03:02\") == \"02:02\")\nassert(solution(\"12:03\") == \"12:03\")\nassert(solution(\"23:59\") == \"01:00\")\nassert(solution(\"00:59\") == \"23:59\")\nassert(solution(\"00:23\") == \"00:23\")\nassert(solution(\"12:23\") == \"12:23\")\nassert(solution(\"23:45\") == \"23:45\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"03:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"12:00\") == \"00:00\")\nassert(solution(\"11:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"12:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"23:59\") == \"00:00\")\nassert(solution(\"00:59\") == \"00:00\")\nassert(solution(\"00:23\") == \"00:00\")\nassert(solution(\"12:23\") == \"00:00\")\nassert(solution(\"23:45\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"03:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"12:00\") == \"00:00\")\nassert(solution(\"11:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"12:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"00:00\") == \"00:00\")\nassert(solution(\"01:00\") == \"00:00\")\nassert(solution(\"23:00\") == \"00:00\")\nassert(s"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10:00\")\n    '10:30'\n    >>> solution(\"11:00\")\n    '10:30'\n    >>> solution(\"01:02\")\n    '02:02'\n    >>> solution(\"03:02\")\n    '02:02'\n    \"\"\"\n    h1, m1 = map(int, stdin.split(' '))\n    h2, m2 = map(int, stdin.split(' '))\n    a = 0 if m1 % 2 else 1\n    b = 0 if m2 % 2 else 1\n    m = (m1 + m2) // 2\n    h = (h1 + h2) // 2\n    if h % 2:\n        h += 1\n    return f'{h:02}:{m:02}'"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert_equals(solution(\n\"\"\"\n10:00\n11:00\n\"\"\"), \"\"\"10:30\n\"\"\")\n\nassert_equals(solution(\n\"\"\"\n11:10\n11:12\n\"\"\"), \"\"\"11:11\n\"\"\")\n\nassert_equals(solution(\n\"\"\"\n01:02\n03:02\n\"\"\"), \"\"\"02:02\n\"\"\")\n\nassert_equals(solution(\n\"\"\"\n10:00\n11:00\n\"\"\"), \"\"\"10:30\n\"\"\")\n\nassert_equals(solution(\n\"\"\"\n11:10\n11:12\n\"\"\"), \"\"\"11:11\n\"\"\")\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = list(map(int, stdin.split()))\n    if m1 % 2!= m2 % 2:\n        return str(h1) + \":\" + str((h1 + h2) // 2)\n    else:\n        return str((h1 + h2) // 2) + \":\" + str(m1)\n\nassert solution(\"10:00\\n11:00\") == \"10:30\"\nassert solution(\"11:10\\n11:12\") == \"11:11\"\nassert solution(\"01:02\\n03:02\") == \"02:02\"\nassert solution(\"10:00\\n11:00\\n12:00\\n13:00\\n14:00\\n15:00\\n16:00\\n17:00\\n18:00\\n19:00\\n20:00\\n21:00\\n22:00\\n23:00\") == \"18:30\\n00:30\"\n\n\n-----Note-----\n\nTests have been generated to check against the result of the source code.\n\n\"\"\"\n\nimport unittest\nfrom datetime import datetime\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = [int(x) for x in stdin.strip().split(' ')]\n    h_2, m_2 = [int(x) for x in stdin.strip().split(' ')]\n    # This is the tricky part\n    # We don't know the time when the contest starts\n    # We just know the duration of the contest\n    # We can then find the midpoint time\n    # if m_1 mod 2 == 0 then m_2 mod 2 = 0\n    # else m_1 mod 2 = 1\n    # m_2 is the same\n    # h_1, m_1 = 10:00, 11:00\n    # h_2, m_2 = 11:10, 11:12\n    # h_3 = 10:30, m_3 = 30\n    h_3 = (h_1 + h_2) // 2\n    m_3 = (m_1 + m_2) // 2\n    if m_3 % 2:\n        m_3 = 59 - m_3\n        h_3 += 1\n    return f'{h_3:02}:{m_3:02}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4020,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = [int(x) for x in stdin.split(' ')]\n    h2, m2 = [int(x) for x in stdin.split(' ')]\n    return f'{(h1 + h2) // 2:02d}:{(m1 + m2) // 2:02d}'\n\nassert solution(input()) == '10:30'\nassert solution(input()) == '11:11'\nassert solution(input()) == '02:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '02:02'\nassert solution(input()) == '02:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '02:02'\nassert solution(input()) == '02:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '02:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '02:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '02:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '02:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '02:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '02:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) == '00:02'\nassert solution(input()) == '03:02'\nassert solution(input()) =="
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = 0\n    while a > 0:\n        if a % 2 == 1:\n            b += 1\n        a //= 2\n    return str(b)"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    return str(a // 3 + 1)"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    \n    # a = 1 2\n    #  1   3   4   5   6\n    # 0   1   2   3   4   5\n    # 6   7   8   9  10  11\n    # 12  13  14  15  16  17\n    # 18  19  20  21  22  23\n    # 24  25  26  27  28  29\n    # 30  31  32  33  34  35\n    # 36  37  38  39  40  41\n    \n    #    2\n    #   1  3\n    #  1   2\n    # 1   2   3\n    # 1   2   3   4\n    # 1   2   3   4   5\n    \n    # a = 1 2\n    # 1   1   1   1   1\n    # 1   1   1   1   1\n    # 1   1   1   1   1\n    # 1   1   1   1   1\n    # 1   1   1   1   1\n    \n    # a = 1 2 3\n    # 1   1   1   1   1   1\n    # 1   1   1   1   1   1\n    # 1   1   1   1   1   1\n    # 1   1   1   1   1   1\n    # 1   1   1   1   1   1\n    \n    # a = 1 2 3 4\n    # 1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1\n    \n    # a = 1 2 3 4 5\n    # 1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1\n    \n    # a = 1 2 3 4 5 6\n    # 1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1\n    \n    # a = 1 2 3 4 5 6 7\n    # 1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1\n    \n    # a = 1 2 3 4 5 6 7 8\n    # 1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1\n    \n    # a = 1 2 3 4 5 6 7 8 9\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1\n    \n    # a = 1 2 3 4 5 6 7 8 9 10\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    \n    # a = 1 2 3 4 5 6 7 8 9 10 11\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    \n    # a = 1 2 3 4 5 6 7 8 9 10 11 12\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    \n    # a = 1 2 3 4 5 6 7 8 9 10 11 12 13\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    \n    # a = 1 2 3 4 5 6 7 8 9 10 11 12 13 14\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n    # 1   1   1   1"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n <= 2:\n        return str(n - 1)\n    elif n == 3:\n        return str(n - 2)\n    else:\n        return str(n - 2) + \" \" + str(n - 1)\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(math.log(int(stdin),2))+1)"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return str(bin(a))[2:]\n\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    a = bin(a)[2:]\n    a = ''.join(map(lambda x: '0' if x == '0' else '1', a))\n    if a[-1] == '0':\n        return a[:-1]\n    else:\n        return a\n"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return n\n    x = 1\n    c = 0\n    while x!= n:\n        x *= 2\n        if x == n:\n            c += 1\n    return c"
    },
    {
        "number": 4021,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a - 1)\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    longest = 0\n    for a, b in segments:\n        if b - a > longest:\n            longest = b - a\n    return str(longest)\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Inputs:\n      - A list of sequences\n    Outputs:\n      - The maximal length of the intersection of the remaining sequences\n    \"\"\"\n    # Your code here\n    raise NotImplementedError('Need to get this implemented')\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = [tuple(map(int, line.split(' '))) for line in stdin.split('\\n')]\n    solutions = []\n\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            intersected = intersections(segments[:i], segments[i:j])\n            if intersected:\n                solutions.append((len(intersected), intersected))\n\n    if solutions:\n        solutions.sort()\n        return str(solutions[-1][0])\n    else:\n        return str(0)\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    segments.sort(key=lambda x: x[0])\n    removed = 0\n    max_len = 0\n    for i, segment in enumerate(segments):\n        if removed == 1:\n            break\n        for j in range(i, n):\n            if removed == 1:\n                break\n            segment1 = segments[i]\n            segment2 = segments[j]\n            if segment1[1] >= segment2[0] and segment1[0] <= segment2[1]:\n                removed += 1\n                max_len = max(max_len, segment1[1] - segment2[0])\n            elif segment1[0] <= segment2[1] and segment1[1] >= segment2[0]:\n                removed += 1\n                max_len = max(max_len, segment2[1] - segment1[0])\n            elif segment1[0] <= segment2[0] and segment1[1] >= segment2[1]:\n                max_len = max(max_len, segment2[1] - segment1[0])\n            elif segment2[1] >= segment1[0] and segment2[0] <= segment1[1]:\n                removed += 1\n                max_len = max(max_len, segment2[1] - segment1[0])\n            elif segment2[0] <= segment1[1] and segment2[1] >= segment1[0]:\n                removed += 1\n                max_len = max(max_len, segment1[1] - segment2[0])\n    return str(max_len)"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        if ans < max(l, r):\n            ans = max(l, r)\n    return str(ans)"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    segments = list(map(int, stdin.strip().split('\\n')))\n    segments = [0] + segments\n    max_length = 0\n    for i in range(1, len(segments)):\n        for j in range(i + 1, len(segments)):\n            if segments[j] - segments[i] == segments[i] - segments[j]:\n                length = segments[i] - segments[j]\n                if max_length < length:\n                    max_length = length\n    return str(max_length)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = [list(map(int, line.split())) for line in stdin.split(\"\\n\")]\n\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j - i == 1:\n                result = max(result, data[i][1])\n            else:\n                result = max(result, data[i][1] + data[j][0] - data[i][0])\n\n    return result"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4022,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The intersection of two segments is defined as the maximal set of points that each point\n    lies within both segments.\n\n    Here is a small example:\n\n    $[1;3]$ and $[3;4]$: $[2;3]$ is the intersection, since both segments have a common endpoint.\n\n    $[1;4]$ and $[3;4]$: $[1;4]$ is the intersection, since $[3;4]$ contains both of the segments.\n\n    $[1;4]$ and $[1;3]$: $[3;4]$ is the intersection, since both of the segments contain both of the points.\n\n    $[1;4]$ and $[2;6]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;20]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;10]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;100]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;1000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;10000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;100000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;1000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;10000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;100000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;1000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;10000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;100000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;1000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;10000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;100000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;10000000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;10000000000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;1000000000000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;10000000000000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;100000000000000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;1000000000000000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;100000000000000000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;1000000000000000000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;10000000000000000000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;100000000000000000000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;1000000000000000000000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;10000000000000000000000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;1000000000000000000000000000000000]$: $[3;4]$ is the intersection, since both segments contain both of the points.\n\n    $[1;4]$ and $[1;10000000000000000"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if __name__ == '__main__':\n        input = stdin.readline().strip().split()\n        if input:\n            n = int(input[0])\n            a = [int(x) for x in input[1:]]\n            m = max(a)\n            if m % 2!= 0:\n                print(\"NO\")\n            else:\n                a.sort()\n                if a[0] > 1:\n                    print(\"NO\")\n                else:\n                    print(\"YES\")\n                    for x in a:\n                        if x > m:\n                            print(\"NO\")\n                        else:\n                            print(x)\n                    \nsolution(sys.stdin.read())"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = [int(x) for x in stdin.readline().split()]\n\n    h.append(0)\n    h.append(0)\n\n    return \"YES\" if h[n] == 0 else \"NO\"\n\nassert(solution('''5\n2 1 1 2 5\n''') == 'YES')\nassert(solution('''3\n4 5 3\n''') == 'NO')\nassert(solution('''2\n10 10\n''') == 'YES')"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return 'YES'\n    return 'NO' if any(x - 1!= y for x, y in zip(h, h[1:])) else 'YES'"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if len(a) < n:\n        return \"NO\"\n    if a.count(a[0]) == n:\n        return \"YES\"\n    return \"NO\"\n\nassert(solution(input()) == solution(input()))\n\n--- 6.1 % faster than 7.51% ---\n\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = [int(x) for x in stdin.split()]\n\n    if n == 1:\n        return \"YES\"\n\n    elif n == 2:\n        return \"NO\"\n\n    elif n > 2:\n        if a[0]!= a[1]:\n            return \"NO\"\n        elif a[1] == a[2]:\n            return \"NO\"\n        else:\n            return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    part_heights = list(map(int, stdin.readline().split()))\n    \n    if n == 1:\n        return \"YES\"\n    \n    if part_heights[0]!= part_heights[1]:\n        return \"NO\"\n    \n    for i in range(1, n):\n        if part_heights[i]!= part_heights[i - 1]:\n            return \"NO\"\n    \n    return \"YES\"\n\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if sum(a) % 2:\n        return \"NO\"\n    if not sum(a):\n        return \"YES\"\n\n    for i in range(n - 1):\n        if a[i + 1] == a[i]:\n            a[i + 1] += 1\n\n    return \"YES\" if sum(a) == 2 * n else \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if all(a[i] == a[i + 1] for i in range(n - 1)):\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 4023,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n    if not heights:\n        return \"YES\"\n    if len(set(heights)) == 1:\n        return \"YES\"\n\n    d = collections.defaultdict(list)\n    for i, h in enumerate(heights):\n        d[h].append(i)\n\n    for key in d:\n        d[key].sort(reverse=True)\n\n    def is_complete(heights: List[int]) -> bool:\n        if heights[0]!= heights[-1]:\n            return False\n        if heights[-1] - heights[0] == 1:\n            return True\n\n        for i in range(1, len(heights)):\n            if heights[i]!= heights[i - 1] + 1:\n                return False\n        return True\n\n    if is_complete(heights):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    string = stdin[2:]\n    if n < k:\n        return \"-\"\n\n    if k == 1:\n        return string\n    counts = {}\n    for c in string:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n\n    unique_chars = list(counts.keys())\n    if len(unique_chars) == 1:\n        return string\n    elif len(unique_chars) == 2:\n        if counts[unique_chars[0]]!= counts[unique_chars[1]]:\n            return \"-\"\n        elif counts[unique_chars[0]] == counts[unique_chars[1]]:\n            return string\n    return \"-\"\n\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('') == '')\nassert(solution('aaa') == '')\nassert(solution('aaaab') == '')\nassert(solution('aaaaa') == '')\nassert(solution('abc') == 'a')\nassert(solution('abcdef') == 'abc')\nassert(solution('abcdefg') == 'abcdef')\nassert(solution('abcdeeeefgghi') == 'abcdee')\nassert(solution('abcdeeeefgghijklmno') == 'abcdeeeefgghi')\nassert(solution('a' * 1000) == 'a' * 1000)\nassert(solution('a' * 2001) == 'a' * 1000)\nassert(solution('a' * 2003) == 'a' * 2000)\nassert(solution('a' * 2004) == 'a' * 2001)\nassert(solution('a' * 2005) == 'a' * 2000)\nassert(solution('a' * 2006) == 'a' * 1999)\nassert(solution('a' * 2007) == 'a' * 1998)\nassert(solution('a' * 2008) == 'a' * 1997)\nassert(solution('a' * 2009) == 'a' * 1996)\nassert(solution('a' * 2010) == 'a' * 1995)\nassert(solution('a' * 2011) == 'a' * 1994)\nassert(solution('a' * 2012) == 'a' * 1993)\nassert(solution('a' * 2013) == 'a' * 1992)\nassert(solution('a' * 2014) == 'a' * 1991)\nassert(solution('a' * 2015) == 'a' * 1990)\nassert(solution('a' * 2016) == 'a' * 1989)\nassert(solution('a' * 2017) == 'a' * 1988)\nassert(solution('a' * 2018) == 'a' * 1987)\nassert(solution('a' * 2019) == 'a' * 1986)\nassert(solution('a' * 2020) == 'a' * 1985)\nassert(solution('a' * 2021) == 'a' * 1984)\nassert(solution('a' * 2022) == 'a' * 1983)\nassert(solution('a' * 2023) == 'a' * 1982)\nassert(solution('a' * 2024) == 'a' * 1981)\nassert(solution('a' * 2025) == 'a' * 1980)\nassert(solution('a' * 2026) == 'a' * 1979)\nassert(solution('a' * 2027) == 'a' * 1978)\nassert(solution('a' * 2028) == 'a' * 1977)\nassert(solution('a' * 2029) == 'a' * 1976)\nassert(solution('a' * 2030) == 'a' * 1975)\nassert(solution('a' * 2031) == 'a' * 1974)\nassert(solution('a' * 2032) == 'a' * 1973)\nassert(solution('a' * 2033) == 'a' * 1972)\nassert(solution('a' * 2034) == 'a' * 1971)\nassert(solution('a' * 2035) == 'a' * 1970)\nassert(solution('a' * 2036) == 'a' * 1969)\nassert(solution('a' * 2037) == 'a' * 1968)\nassert(solution('a' * 2038) == 'a' * 1967)\nassert(solution('a' * 2039) == 'a' * 1966)\nassert(solution('a' * 2040) == 'a' * 1965)\nassert(solution('a' * 2041) == 'a' * 1964)\nassert(solution('a' * 2042) == 'a' * 1963)\nassert(solution('a' * 2043) == 'a' * 1962)\nassert(solution('a' * 2044) == 'a' * 1961)\nassert(solution('a' * 2045) == 'a' * 1960)\nassert(solution('a' * 2046) == 'a' * 1959)\nassert(solution('a' * 2047) == 'a' * 1958)\nassert(solution('a' * 2048) == 'a' * 1957)\nassert(solution('a' * 2049) == 'a' * 1956)\nassert(solution('a' * 2050) == 'a' * 1955)\nassert(solution('a' * 2051) == 'a' * 1954)\nassert(solution('a' * 2052) == 'a' * 1953)\nassert(solution('a' * 2053) == 'a' * 1952)\nassert(solution('a' * 2054) == 'a' * 1951)\nassert(solution('a' * 2055) == 'a' * 1950)\nassert(solution('a' * 2056) == 'a' * 1949)\nassert(solution('a' * 2057) == 'a' * 1948)\nassert(solution('a' * 2058) == 'a' * 1947)\nassert(solution('a' * 2059) == 'a' * 1946)\nassert(solution('a' * 2060) == 'a' * 1945)\nassert(solution('a' * 2061) == 'a' * 1944)\nassert(solution('a' * 2062) == 'a' * 1943)\nassert(solution('a' * 2063) == 'a' * 1942)\nassert(solution('a' * 2064) == 'a' * 1941)\nassert(solution('a' * 2065) == 'a' * 1940)\nassert(solution('a' * 2066) == 'a' * 1939)\nassert(solution('a' * 2067) == 'a' * 1938)\nassert(solution('a' * 2068) == 'a' * 1937)\nassert(solution('a' * 2069) == 'a' * 1936)\nassert(solution('a' * 2070) == 'a' * 1935)\nassert(solution('a' * 2071) == 'a' * 1934)\nassert(solution('a' * 2072) == 'a' * 1933)\nassert(solution('a' * 2073) == 'a' * 1932)\nassert(solution('a' * 2074) == 'a' * 1931)\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if k > n:\n        return '-1'\n    else:\n        return str(min(n - len(s), sum(cost(s, i) for i in range(len(s) + 1))))\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    s = stdin[len(' '.join([''.join(s) for s in stdin.split('\\n')])):].strip()\n    if k > n or k > 100:\n        return '-1'\n    if k == len(s):\n        return str(0)\n    if len(s) < k:\n        return '-1'\n    return str(sum(len(x) for x in s) - len(s))\n\nassert(solution('5 7\\najihisa\\naji\\nsdf') == '15')\nassert(solution('5 7\\najihisa\\naji\\nsdf\\n\\n') == '15')\nassert(solution('10 100\\asdfsdf') == '15')\nassert(solution('10 100\\asdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf\\nasdfsdf"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_b(stdin))\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n\nIf you enjoyed this kata, please try:\n\n[Best practice]: https://www.codewars.com/kata/59a923aefa9216ac80000897\n\n[Watch this video for an explanation](https://www.youtube.com/watch?v=IY4nBQIjEbA&feature=emb_logo)\n\n[Easy version](https://www.codewars.com/kata/59a923aefa9216ac80000897/train/python)\n\n[Medium version](https://www.codewars.com/kata/59a923aefa9216ac80000897/train/javascript)\n\n[Hard version](https://www.codewars.com/kata/59a923aefa9216ac80000897/train/ruby)\n\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the minimum possible cost of obtaining a set of size k.\n    \"\"\"\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if n < k:\n        return -1\n    else:\n        return 0"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    s = stdin.strip()\n    if n <= k:\n        print(-1)\n        return\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            dp[j] = min(dp[j], dp[i] + (j - i) - (j - i - s.count(s[i:j])))\n    print(dp[n])"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[len(stdin) - n:]\n\n    sorted_s = sorted(s)\n    cost = 0\n    subset = []\n\n    for i in range(0, n - k + 1):\n        s = s[1:]\n        subset.append(s[0:k])\n\n    for item in subset:\n        if item not in sorted_s:\n            cost = -1\n            break\n\n    return cost\n"
    },
    {
        "number": 4024,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    data = [int(x) for x in inputs[0].split(\" \")]\n    return solution(data)\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    d = a + b + c\n    if d % 7 == 0:\n        return 7\n    else:\n        return d % 7\n    \n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    days = list(map(int, stdin.split()))\n    return max(\n        [\n            day\n            for day in range(1, 8)\n            if (day!= 3 and day!= 6) or (day == 3 and days[0] == 1) or (day == 6 and days[1] == 1)\n        ]\n    )\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    # There are only seven possible days to start a trip\n    days = [1, 4, 7]\n\n    # Calculate number of days to eat without additional rations\n    max_days = 0\n    for i in range(3):\n        curr_days = sum([days[i], a, b, c])\n        if curr_days > max_days:\n            max_days = curr_days\n    return max_days"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return stdin[0]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if a > c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n    return str(a * 4 + b * 3 + c * 2)\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [daily_rations_of_fish, daily_rations_of_rabbit, daily_rations_of_chicken] = [int(x) for x in stdin.strip().split(' ')]\n    week = 1\n    days = 1\n    while days < daily_rations_of_fish + daily_rations_of_rabbit + daily_rations_of_chicken:\n        if ((week == 1 and days % 7 == 5) or\n                (week == 2 and days % 7 == 6) or\n                (week == 3 and days % 7 == 0)):\n            days += 1\n            continue\n        if (week == 1 and days % 7 == 0) or (week == 2 and days % 7 == 1) or (week == 3 and days % 7 == 2):\n            days += 1\n            continue\n        days += 1\n    return str(days)\n\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n    \n\nprint(solution(input()))\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nWhat is the number of test cases for which the answer is \"NO\"?\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    tiles = []\n    for i in range(n):\n        for j in range(n):\n            tiles.append(matrix[i][j])\n    return \"YES\" if matrix_is_symmetric(tiles, m) else \"NO\"\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for _ in range(T):\n        N, M = map(int, stdin.readline().split())\n        tiles = stdin.readline().strip()\n        tiles = [tiles[i:i+2] for i in range(0, len(tiles), 2)]\n        tiles = [[int(c) for c in tile] for tile in tiles]\n        for i in range(len(tiles)):\n            for j in range(len(tiles[i])):\n                if tiles[i][j] > M:\n                    print('NO')\n                    return\n        if M == 1:\n            print('YES')\n            return\n        if N == 1:\n            if M % 2 == 0:\n                print('YES')\n            else:\n                print('NO')\n            return\n        if M == 2 and N == 2:\n            if tiles[0][0] == tiles[1][1] and tiles[0][1] == tiles[1][0]:\n                print('YES')\n                return\n            print('NO')\n            return\n        if M == 3 and N == 3:\n            if tiles[0][0] == tiles[1][1] and tiles[0][1] == tiles[1][0] and tiles[0][2] == tiles[2][2]:\n                print('YES')\n                return\n            print('NO')\n            return\n        if M == 4 and N == 4:\n            if tiles[0][0] == tiles[1][1] and tiles[0][1] == tiles[1][0] and tiles[0][2] == tiles[2][2] and tiles[0][3] == tiles[3][1]:\n                print('YES')\n                return\n            print('NO')\n            return\n        if M == 5 and N == 5:\n            if tiles[0][0] == tiles[1][1] and tiles[0][1] == tiles[1][0] and tiles[0][2] == tiles[2][2] and tiles[0][3] == tiles[3][1] and tiles[0][4] == tiles[4][0]:\n                print('YES')\n                return\n            print('NO')\n            return\n        if M == 6 and N == 6:\n            if tiles[0][0] == tiles[1][1] and tiles[0][1] == tiles[1][0] and tiles[0][2] == tiles[2][2] and tiles[0][3] == tiles[3][1] and tiles[0][4] == tiles[4][0] and tiles[0][5] == tiles[5][0]:\n                print('YES')\n                return\n            print('NO')\n            return\n        if M == 7 and N == 7:\n            if tiles[0][0] == tiles[1][1] and tiles[0][1] == tiles[1][0] and tiles[0][2] == tiles[2][2] and tiles[0][3] == tiles[3][1] and tiles[0][4] == tiles[4][0] and tiles[0][5] == tiles[5][0] and tiles[0][6] == tiles[6][0]:\n                print('YES')\n                return\n            print('NO')\n            return\n        if M == 8 and N == 8:\n            if tiles[0][0] == tiles[1][1] and tiles[0][1] == tiles[1][0] and tiles[0][2] == tiles[2][2] and tiles[0][3] == tiles[3][1] and tiles[0][4] == tiles[4][0] and tiles[0][5] == tiles[5][0] and tiles[0][6] == tiles[6][0] and tiles[0][7] == tiles[7][0]:\n                print('YES')\n                return\n            print('NO')\n            return\n        print('NO')\n    return"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nthe input:\n3\n4 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n2 2\n2 2\n1 100\n10 10\n10 10\n1 2\n4 5\n8 4\n2 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tiles = []\n    for _ in range(n):\n        top, bottom = map(int, stdin.split())\n        left, right = map(int, stdin.split())\n        tiles.append((top, bottom, left, right))\n    return 'YES' if is_symmetric_matrix(tiles, m) else 'NO'\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe second test case of the input has two types of tiles. The first tile is described by the first line: the number written in the top left corner of the tile is $1$, the number written in the top right corner of the tile is $2$, the number written in the bottom left corner of the tile is $4$, and the number written in the bottom right corner of the tile is $9$. The second tile is described by the first line: the number written in the top left corner of the tile is $5$, the number written in the top right corner of the tile is $8$, the number written in the bottom left corner of the tile is $9$, and the number written in the bottom right corner of the tile is $7$.\n\nThe third test case of the input has two types of tiles. The first tile is described by the first line: the number written in the top left corner of the tile is $1$, the number written in the top right corner of the tile is $2$, the number written in the bottom left corner of the tile is $1$, and the number written in the bottom right corner of the tile is $9$. The second tile is described by the first line: the number written in the top left corner of the tile is $4$, the number written in the top right corner of the tile is $9$, the number written in the bottom left corner of the tile is $3$, and the number written in the bottom right corner of the tile is $8$.\n\nThe answer for the third test case is \"NO\".\n\"\"\"\n\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    T = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if T[i][j]!= T[j][i]:\n                return 'NO'\n    #if len(T) % 2:\n        #T = T[:len(T)//2]\n    s = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            s[i][j] = T[i][j]\n    l = len(s)\n    if l == 1:\n        return 'YES'\n    elif l % 2:\n        return 'YES'\n    else:\n        for i in range(l//2):\n            for j in range(l//2):\n                if s[i][j]!= s[j][i]:\n                    return 'NO'\n    return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4026,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Getting input\n    # n, m = tuple(map(int, stdin.split()))\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n\n    tile_sizes = {}\n    for _ in range(n):\n        row = stdin.split()\n        tile_sizes[row[0]] = int(row[1]), int(row[2])\n\n    # Constructing the actual matrix\n    matrix = []\n    for _ in range(n):\n        row = list(stdin.split()[3:])\n        matrix.append(row)\n\n    # Generating the solution\n    answer = 'YES'\n    for tile_type in tile_sizes:\n        # For each tile type, check if it is part of the solution\n        for tile_id in range(1, tile_sizes[tile_type][0]*2 + 1):\n            if tile_type * 2 + 1!= tile_sizes[tile_type][1]:\n                continue\n            # If it is, check if it is part of the solution\n            if tile_type * 2 + 1 == tile_sizes[tile_type][1]:\n                # If so, check if the tile is part of the solution\n                tile_top_left_corner = int(matrix[tile_id//2][tile_id % 2])\n                tile_bottom_right_corner = int(matrix[tile_id//2][(tile_id + 1)%2])\n                tile_top_right_corner = int(matrix[(tile_id + 1)//2][(tile_id + 1)%2])\n                tile_bottom_left_corner = int(matrix[(tile_id + 1)//2][tile_id % 2])\n\n                if tile_top_left_corner!= tile_top_right_corner or tile_bottom_left_corner!= tile_bottom_right_corner:\n                    continue\n\n            # If it is not part of the solution, we can check if it is symmetric\n            matrix_top_left_corner = int(matrix[0][0])\n            matrix_bottom_right_corner = int(matrix[0][-1])\n            matrix_top_right_corner = int(matrix[-1][-1])\n            matrix_bottom_left_corner = int(matrix[-1][0])\n\n            if matrix_top_left_corner!= matrix_top_right_corner or matrix_bottom_left_corner!= matrix_bottom_right_corner:\n                continue\n\n            # If the tile is part of the solution and is symmetric, we check if it is placed inside the solution\n            if tile_id not in [matrix_top_left_corner, matrix_bottom_right_corner, matrix_top_right_corner, matrix_bottom_left_corner]:\n                answer = 'NO'\n                break\n\n        if answer == 'NO':\n            break\n\n    return answer"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(abs(sum(range(1, n + 1)) - sum(range(2, n + 1, 2))))\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\nprint(solution(input()))\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = n\n    if n > 2:\n        for i in range(2, n):\n            for j in range(i, n):\n                s = sum(set(list(range(1, n + 1))[i:j + 1]))\n                result = min(result, abs(s - sum(set(list(range(1, n + 1))[:i])) - sum(set(list(range(1, n + 1))[j + 1:]))))\n    return result"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline().strip())\n    return str(_**2 - 2*_)\n\nprint(solution(''))\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = sum(range(1, n+1))\n    a = []\n    b = []\n    s_a = 0\n    s_b = 0\n    if n % 2!= 0:\n        return str(abs(s - 2*s_a))\n    else:\n        a = list(range(1, n // 2 + 1))\n        b = list(range(n // 2 + 1, n + 1))\n        s_a = sum(a)\n        s_b = sum(b)\n        return str(abs(s - 2*s_a - 2*s_b))\n"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 3:\n        return str(0)\n    n2 = n // 2\n    return str(abs(n2 - (n // 2)))\n\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    from math import sqrt\n    c = int(sqrt(n))\n    for a in range(2, c + 1):\n        if n % a == 0:\n            return str(a) + str(n // a)\n    return str(n)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"1\""
    },
    {
        "number": 4027,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(0)\n    A = []\n    B = []\n    A.append(0)\n    B.append(n)\n    for i in range(2, n + 1):\n        if len(A) == len(B):\n            A.append(i)\n        else:\n            if i > n / 2:\n                B.append(i)\n            else:\n                A.append(i)\n    return str(abs(sum(A) - sum(B)))"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    count = 0\n    modulo = 10 ** 9 + 7\n    for i in range(n - 1):\n        if s[i:i + 2] in \"(()\":\n            count += 1\n    return count % modulo\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n+1]\n    mod = 1000000007\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            if s.find(s[i:i+j+1])!= -1:\n                res += 1\n    return str(res % mod)"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length = stdin.split()[0]\n    s = stdin.split()[1]\n    n = int(length) // 2\n    pairs = 0\n    for i in range(len(s) - n + 1):\n        if s[i] == \"(\":\n            pairs += 1\n        elif s[i] == \")\":\n            pairs -= 1\n        if pairs < 0:\n            break\n    return pairs\n\n\n\nn = int(input())\ns = input()\nprint(solution(s))\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    n = 2 * n\n    count = 0\n    for i in range(len(s) - n + 1):\n        if s[i:i + n] == s[i:i + n][::-1]:\n            count += 1\n    return count\n\nassert(solution('''5\n()))()\n\n5\n()))()\n\n''') == '5')\n\nassert(solution('''3\n(((\n\n3\n(((\n\n''') == '4')\n\nassert(solution('''2\n(((\n\n2\n(((\n\n''') == '0')\n\nassert(solution('''1\n()\n\n1\n(((\n\n''') == '1')\n\nassert(solution('''4\n(((((\n\n4\n((((\n\n''') == '0')\n"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_nodes = int(stdin)\n    n = int(num_nodes / 2)\n    s = stdin.strip()\n\n    left_count = 0\n    right_count = 0\n    for i in range(n):\n        if s[i] == \"(\":\n            left_count += 1\n        else:\n            right_count += 1\n        if left_count > right_count:\n            return 0\n    result = factorial(2 * n)\n    for i in range(n):\n        result = result * (right_count - left_count + 1) // 2\n        if s[i] == \"(\":\n            left_count -= 1\n        else:\n            right_count -= 1\n    return result % 1000000007\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin[:stdin.find(' ')])\n    s = stdin[stdin.find(' ')+1:]\n\n    mod = 1000000007\n\n    # calculate the number of ways to insert the given char into the string\n    def get_ways(s, char, index):\n        if index >= len(s):\n            return 1\n        if index == len(s)-1:\n            if s[index] == char:\n                return 1\n            return 0\n        count = 0\n        if s[index] == char:\n            count += get_ways(s, char, index + 1)\n        count += get_ways(s, char, index + 1)\n        return count\n    \n    # count the number of ways to insert the given char into the string\n    def get_count(s, char, index):\n        return get_ways(s, char, 0) % mod\n    \n    # calculate the number of ways to insert the given char into the string\n    def get_ways2(s, char, index):\n        if index >= len(s):\n            return 1\n        if index == len(s)-1:\n            if s[index] == char:\n                return 1\n            return 0\n        count = 0\n        if s[index] == char:\n            count += get_ways(s, char, index + 1)\n        count += get_ways(s, char, index + 1)\n        return count\n    \n    # count the number of ways to insert the given char into the string\n    def get_count2(s, char, index):\n        return get_ways2(s, char, 0) % mod\n\n    total = 0\n    for i in range(2 * n):\n        total += get_count(s, '(', i)\n        total += get_count2(s, ')', i)\n    return str(total)\n\nassert(solution(\"()()\") == \"5\")\nassert(solution(\"((()))())\") == \"5\")\nassert(solution(\"(()()))()\") == \"4\")\nassert(solution(\"()(()\") == \"4\")\nassert(solution(\"((()))())\") == \"4\")\nassert(solution(\"((()))\") == \"0\")\nassert(solution(\"(()())\") == \"0\")\nassert(solution(\"(()()\") == \"0\")\nassert(solution(\"((()))\") == \"0\")\nassert(solution(\"((()\")) == \"0\")\nassert(solution(\"()((()))\") == \"4\")\nassert(solution(\"()((()()))\") == \"6\")\nassert(solution(\"()((()()))\") == \"4\")\nassert(solution(\"()((()()()))\") == \"12\")\nassert(solution(\"()((()()()))\") == \"4\")\nassert(solution(\"()((()()()()))\") == \"4\")\nassert(solution(\"()((()()()()()))\") == \"8\")\nassert(solution(\"()((()()()()()()))\") == \"4\")\nassert(solution(\"()((()()()()()()))\") == \"8\")\nassert(solution
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:-1]\n    length = len(s)\n    dp = [[0 for _ in range(length+1)] for _ in range(length+1)]\n    for j in range(length-1, -1, -1):\n        for i in range(j, length):\n            if s[i] == ')':\n                if s[j] == '(':\n                    dp[j][i] = dp[j+1][i+1]\n                    if i+1 <= j+1:\n                        dp[j][i] += dp[j+1][i]\n                elif s[j] == ')':\n                    if s[j+1] == '(':\n                        dp[j][i] += dp[j+2][i+1]\n                    else:\n                        dp[j][i] += dp[j][j+1]\n    return str(dp[0][0])\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            a = []\n            while s[:i]:\n                a.append(s[:i])\n                s = s[i:]\n            while s[:j]:\n                a.append(s[:j])\n                s = s[j:]\n            if len(a) == 1:\n                res += 1\n            else:\n                for _a in a[1:]:\n                    if a[0] == _a[:len(a[0])]:\n                        res += 1\n    return str(res % (10 ** 9 + 7))"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    if int(n) % 25!= 0:\n        return -1\n    return min(n.count(c) for c in '0123456789')\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    while n % 25!= 0:\n        n = int(str(n).replace('0', ''))\n        moves += 1\n\n    return moves if n % 25 == 0 else -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    n = int(n)\n    n += 1\n    while n % 25!= 0:\n        n += 1\n    return str(n)\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    ans = 0\n    for i in range(n - 1, 1, -1):\n        if n % i == 0:\n            ans += i\n            break\n    return str(ans) if ans else '-1'\n\nassert(solution('') == '-1')\nassert(solution('5071') == '4')\nassert(solution('705') == '1')\nassert(solution('1241367') == '-1')\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    while n % 25!= 0:\n        if len(str(n)) == 1:\n            n += 1\n            moves += 1\n        else:\n            while n % 25 == 0:\n                n //= 25\n                moves += 1\n\n    return moves if n % 25 == 0 else -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n\n    while n % 25!= 0:\n        moves += 1\n        for i in range(len(str(n)) - 1):\n            if str(n)[i] > str(n)[i+1]:\n                n += 1\n                break\n\n    return str(moves)\n\nassert(solution(5071) == \"4\")\nassert(solution(705) == \"1\")\nassert(solution(1241367) == \"-1\")\nassert(solution(28) == \"2\")\nassert(solution(10) == \"1\")\nassert(solution(20) == \"2\")\nassert(solution(39) == \"3\")\nassert(solution(15) == \"1\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(23) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert(solution(12) == \"2\")\nassert(solution(1234) == \"4\")\nassert(solution(9) == \"1\")\nassert("
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    num_of_moves = 0\n    index = 0\n    while num_of_moves < len(n):\n        if n[index:index + 2] in [str(i) for i in range(1, 10)]:\n            num_of_moves += 1\n            n = n[:index] + '0' + n[index + 1:]\n            index = 0\n        index += 1\n\n    if n[-1] == '0':\n        return '-1'\n\n    return str(num_of_moves)"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # 1-digit\n    if n <= 9:\n        return '-1'\n    # 2-digit\n    if n <= 99:\n        return '2'\n    # 3-digit\n    if n <= 999:\n        return '3'\n    # 4-digit\n    if n <= 9999:\n        return '4'\n    # 5-digit\n    if n <= 99999:\n        return '5'\n    # 6-digit\n    if n <= 999999:\n        return '6'\n    # 7-digit\n    if n <= 9999999:\n        return '7'\n    # 8-digit\n    if n <= 999999999:\n        return '8'\n    # 9-digit\n    if n <= 999999999:\n        return '9'\n    # 10-digit\n    return '10'\n\n\n-----Solutions Overview-----\n\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n_len = len(n)\n    if n_len < 2 or n[0] == '0' or n[n_len - 1] == '0':\n        return -1\n    moves = 0\n    for i in range(1, n_len):\n        if n[i] > n[i - 1] and n[i] > n[i + 1]:\n            moves += n[i - 1] - n[i]\n    if moves % 25 == 0:\n        return moves // 25\n    else:\n        return -1\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    c = [0] * n\n\n    for i in range(n):\n        c[i] = i + 1\n\n    def swap(a, b):\n        c[a], c[b] = c[b], c[a]\n\n    def is_sorted(colors):\n        for i in range(n - 1):\n            if colors[i] == colors[i + 1]:\n                return False\n        return True\n\n    def bruteforce():\n        for i in range(n):\n            for j in range(i + 1, n):\n                swap(i, j)\n                if is_sorted(c):\n                    return True\n                swap(i, j)\n        return False\n\n    def greedy():\n        best = float('inf')\n        for i in range(n):\n            if c[i] == i + 1:\n                c[i] = 0\n                if is_sorted(c):\n                    return True\n                c[i] = i + 1\n                if best > c.count(i + 1):\n                    best = c.count(i + 1)\n        return False\n\n    def heuristic():\n        # greedy\n        count = 0\n        for i in range(n):\n            if c[i] == i + 1:\n                c[i] = 0\n                count += 1\n                if is_sorted(c):\n                    return count\n\n        # brute force\n        for i in range(n):\n            for j in range(i + 1, n):\n                swap(i, j)\n                if is_sorted(c):\n                    return count + 1\n                swap(i, j)\n\n    print(heuristic())\n    print(*c)\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    # n, s = stdin.readline().strip().split(' ')\n    # n = int(n)\n    # s = stdin.readline().strip()\n\n    def helper(start, end, c: List[int]) -> None:\n        while start <= end:\n            mid = (start + end) // 2\n            if mid == start:\n                c[start] = 0\n                start += 1\n                continue\n            c[mid] = 0\n            for i in range(mid - 1, start - 1, -1):\n                if s[i] < s[mid]:\n                    c[i] += 1\n                else:\n                    break\n            for i in range(mid + 1, end + 1):\n                if s[i] < s[mid]:\n                    c[i] += 1\n                else:\n                    break\n            if s[start] < s[mid]:\n                start = mid + 1\n            else:\n                end = mid - 1\n\n    res = n\n    c = [0] * n\n    helper(0, n - 1, c)\n    for i in range(n):\n        if c[i] == 0:\n            res -= 1\n            c[i] = res\n    res = [0] * n\n    helper(0, n - 1, c)\n    return str(res)\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # Create the constraint graph\n    graph = []\n    for i in range(n):\n        graph.append([])\n    for i in range(n - 1):\n        a, b = stdin.readline().strip().split()\n        graph[ord(a) - ord('a')].append(b)\n        graph[ord(b) - ord('a')].append(a)\n    constraints = stdin.readline().strip().split()\n\n    # Initialize the number of colors and the coloring array\n    colors = []\n    for i in range(n):\n        colors.append(0)\n    coloring = []\n\n    # Assign colors to the characters\n    for i in range(n):\n        if i not in constraints:\n            colors[i] = 1\n            coloring.append(colors[i])\n            for j in graph[i]:\n                colors[ord(j) - ord('a')] = colors[i]\n            continue\n\n    # Check if the coloring is valid\n    for i in range(n):\n        if i not in constraints:\n            for j in graph[i]:\n                if colors[ord(j) - ord('a')]!= colors[i]:\n                    return str(colors)\n\n    return str(coloring)\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n+1]\n\n    res = 0\n\n    for i in range(n):\n        c = []\n        for j in range(i+1, n):\n            if s[i] > s[j]:\n                c.append(j)\n        if len(c) == 0:\n            res += 1\n        else:\n            res = max(res, len(c))\n\n    return str(res)\n\nassert(solution(input) == output)\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    n = len(s)\n    c = [0] * n\n    for i in range(n):\n        c[i] = i\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            c[i], c[i + 1] = c[i + 1], c[i]\n    res = [0] * n\n    for i in range(n):\n        res[i] = c[i]\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            res[i], res[i + 1] = res[i + 1], res[i]\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    res = 0\n    colors = [-1] * n\n\n    for i, c in enumerate(s):\n        c = ord(c) - ord('a')\n        if colors[c] == -1:\n            res += 1\n            colors[c] = res\n        else:\n            res = colors[c]\n\n    res = [str(x) for x in colors]\n    print(' '.join(res))\n    print(' '.join(sorted(res)))\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n    res = [0] * len(s)\n    n = int(n)\n    for i in range(len(s)):\n        count = 0\n        for j in range(len(s)):\n            if i == j:\n                continue\n            if s[i] == s[j]:\n                res[j] = count\n                break\n            count += 1\n    print(*res)"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    s = stdin.readline().strip()\n    n = int(n)\n\n    index_map = {}\n    for i, c in enumerate(s):\n        if c not in index_map:\n            index_map[c] = [i]\n        else:\n            index_map[c].append(i)\n\n    n_colors = min(len(index_map), n)\n    color_map = [n_colors] * len(s)\n    colors = set(range(1, n_colors + 1))\n\n    for c, indexes in index_map.items():\n        for i in range(len(indexes)):\n            for j in range(i + 1, len(indexes)):\n                if colors.__contains__(1):\n                    color_map[indexes[i]] = 1\n                    color_map[indexes[j]] = 1\n                    colors.remove(1)\n                    break\n\n    return str(n_colors) + '\\n' +''.join([str(color_map[i]) for i in range(len(s))])\n\nassert(solution(open('data/subtask1.txt'))) == open('data/expected1.txt').read()\nassert(solution(open('data/subtask2.txt'))) == open('data/expected2.txt').read()\n"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    s = stdin[:n]\n\n    res = n\n    colors = [0] * n\n\n    for i in range(n):\n        color = ord(s[i]) - 97\n        colors[i] = color\n\n        if color >= res:\n            res = color\n\n    color = ord(s[0]) - 97\n    colors[0] = color\n\n    swaps = 0\n\n    for i in range(1, n):\n        if colors[i]!= colors[i - 1]:\n            swaps += 1\n            colors[i], colors[i - 1] = colors[i - 1], colors[i]\n\n    print(res)\n\n    if swaps == 0:\n        print(\"\".join(map(str, colors)))\n    else:\n        print(\"\".join(map(str, colors)))\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    res = 0\n    colors = [0] * n\n\n    if not is_sorted(s):\n        print(-1)\n        return\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if s[i] > s[j]:\n                colors[i], colors[j] = colors[j], colors[i]\n                res += 1\n\n    print(res)\n    print(''.join(str(c) for c in colors))\n\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    strings = [stdin.readline().strip() for _ in range(int(n))]\n    strings.sort()\n    for i in range(len(strings) - 1):\n        if strings[i] in strings[i + 1]:\n            print('YES')\n            print(strings[i])\n            print(strings[i + 1])\n            print(strings[i + 1])\n            print(strings[i])\n            return\n    print('NO')\n    return"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\"\n\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    for i in range(n):\n        s = stdin.readline().strip()\n        pos = -1\n        for c in s:\n            if pos > -1:\n                if pos < s.index(c):\n                    print(\"NO\")\n                    return\n            pos = s.index(c)\n    print(\"YES\")\n    return"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Insert your code here\n    n = int(stdin)\n    strings = []\n    for _ in range(n):\n        strings.append(stdin.readline().strip())\n    strings.sort()\n    return \"YES\" if all(x == strings[0] for x in strings) else \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100:\n        raise ValueError(\"n should be in range [1, 100]\")\n    result = []\n    for i in range(n):\n        s = stdin.split(\"\\n\")[i]\n        if s == \"\":\n            continue\n        if s == s[::-1]:\n            result.append(s)\n        elif s[::-1] in s:\n            continue\n        else:\n            result.append(\"NO\")\n            break\n    if len(result) == n:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n < 1 or n > 100:\n        return \"NO\"\n\n    strings = [stdin]\n    for _ in range(n - 1):\n        strings.append(stdin)\n\n    reordered = list(set(strings))\n\n    if len(reordered) < n:\n        return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    sorted_strings = sorted(strings)\n    for string in strings:\n        if string == sorted_strings[0]:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    strings = [stdin.readline() for _ in range(int(n))]\n    return \"YES\" if can_rearrange(strings) else \"NO\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin (str): String with lines of input, each line is a string.\n\n    Returns:\n        str: First line is the result, second is \"NO\" if the strings are not possible to reorder, \"YES\" otherwise.\n    \"\"\"\n    n = stdin.readline().strip()\n    strings = [stdin.readline().strip() for i in range(n)]\n    sorted_strings = sorted(strings)\n    if sorted_strings == strings:\n        return \"YES\"\n    return \"NO\"\n\"\"\"\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = list(map(int, stdin.split()))\n    k = stdin_list[1]\n    stdin_list = stdin_list[2:]\n    n = len(stdin_list)\n    left, right = 0, n - 1\n    count = 0\n    while left <= right:\n        if stdin_list[left] > k or stdin_list[right] > k:\n            break\n        if stdin_list[left] <= stdin_list[right]:\n            left += 1\n        elif stdin_list[left] > stdin_list[right]:\n            right -= 1\n        count += 1\n    return count\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n\n    count = 0\n\n    for i in range(n):\n        if a[i] > k:\n            break\n\n        count += 1\n\n    return count\n\n\nassert(solution(stdin) == 5)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 5)\n\n\n\"\"\"\n\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 100$) \u2014 the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the difficulty of the $i$-th problem. The problems are given in order from the leftmost to the rightmost in the list.\n\nInput\n8 4\n4 2 3 1 5 1 6 4\nOutput\n5\n\nInput\n5 2\n3 1 2 1 3\nOutput\n0\n\nInput\n5 100\n12 34 55 43 21\nOutput\n5\n'''\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    count = 0\n    m = 0\n    for i in range(n):\n        if m < a[i] - k:\n            m = a[i] - k\n            count += 1\n            a[i] = 0\n    print(count)"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    A = [int(i) for i in stdin.split()]\n\n    left = 0\n    right = n - 1\n    cnt = 0\n\n    while left < right:\n        if A[left] <= k:\n            left += 1\n            cnt += 1\n        elif A[right] <= k:\n            right -= 1\n            cnt += 1\n        else:\n            break\n\n    return str(cnt)"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split()[1].split(\" \")))\n\nassert(solution(input()) == \"5\")\nassert(solution(input(\"1 2 3 4 5 6\\n\")) == \"0\")\nassert(solution(input(\"12 34 55 43 21\\n\")) == \"5\")\nassert(solution(input(\"12 34 55 43 21 1234\\n\")) == \"5\")\nassert(solution(input(\"1 2 3 4 5 6 7 8 9 10\\n\")) == \"0\")\nassert(solution(input(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\\n\")) == \"0\")\nassert(solution(input(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\n\")) == \"0\")\nassert(solution(input(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    problem_count, skill_level = map(int, stdin.split())\n    problems = [int(p) for p in stdin.split()]\n    problems.sort()\n    skills = [0] * skill_level\n    skills[0] = problems[-1]\n    for skill_no, skill_value in enumerate(skills):\n        if skill_no == 0:\n            continue\n        skill_value = min(skill_value, problems[-1 - skill_no])\n        skills[skill_no] = skill_value\n    return str(len(skills) - 1)"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    m = 0\n    i = 0\n    while i < n:\n        if a[i] >= k:\n            i += 1\n        else:\n            m += 1\n            a.pop(i)\n            n -= 1\n    return m\n\nassert(solution('5 2') == '0')\nassert(solution('5 100') == '5')\nassert(solution('12 34 55 43 21') == '5')\nassert(solution('1 2 3 4 5 6 7 8') == '0')\n"
    },
    {
        "number": 4032,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the maximum number of problems that Mishka can solve\n\n    >>> solution('8 4\\n4 2 3 1 5 1 6 4')\n    '5'\n    >>> solution('5 2\\n3 1 2 1 3')\n    '0'\n    >>> solution('5 100\\n12 34 55 43 21')\n    '5'\n    \"\"\"\n    n, k = map(int, stdin.strip().split())\n    problems = [int(x) for x in stdin.strip().split()]\n    return str(solve(problems, k))\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(min(a+b-1, max(a, b)-1))"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_correct_color(a: int, b: int) -> bool:\n        return a * b == n_red_tiles + n_blue_tiles\n\n    a, b = list(map(int, stdin.split()))\n    n_red_tiles = 0\n    n_blue_tiles = 0\n\n    if not is_correct_color(a, b):\n        return \"IMPOSSIBLE\"\n\n    for _ in range(a):\n        n_red_tiles += 1\n\n    for _ in range(b):\n        n_blue_tiles += 1\n\n    return str(n_red_tiles * 4 + n_blue_tiles * 2)\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = map(int, stdin.strip().split(' '))\n    if a * b % 2:\n        return '-1'\n    return str(a + b)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ...\nstdin = input()\na,b = [int(x) for x in stdin.split(' ')]\n\nc = a+b\n\nprint(c)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = a + b\n    m = (n - a) * (a + b - 1) // 2\n    return str(m)"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n_a, n_b = map(int, stdin.split())\n    if n_a == 0 or n_b == 0:\n        return 0\n    elif n_a == 1 and n_b == 1:\n        return 2\n    elif n_a == 1 and n_b > 1:\n        return 2 * (n_b - 1) + 2 * n_b\n    elif n_a > 1 and n_b == 1:\n        return 2 * (n_a - 1) + 2 * n_a\n    elif n_a > 1 and n_b > 1:\n        return 2 * (n_a - 1) + 2 * n_b + 2 * (n_a - 1) * (n_b - 1)\n    else:\n        assert False, \"somehow it didn't work\"\n\nassert solution('''4 4\n''') == '12'\n\nassert solution('''3 9\n''') == '14'\n\nassert solution('''9 3\n''') == '14'\n\nassert solution('''3 6\n''') == '12'\n\nassert solution('''506 2708\n''') == '3218'\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(min(a * b, 2 * (a + b)))\n"
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4033,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a*b)\n\nprint(solution(input()))\n\"\"\"\n\n\nfrom math import gcd\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    result = []\n    for i in range(n):\n        result.append(s[i] if s[i]!= 'a' else '0')\n        result.append(s[i] if s[i]!= 'b' else '1')\n    if ''.join(result) == ''.join(sorted(result)):\n        print('YES')\n        print(''.join(result))\n    else:\n        print('NO')\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    colors = [0] * n\n    for i in range(n):\n        if s[i] == 'a' or s[i] == 'b':\n            colors[i] = 1\n\n    swaps = 0\n    while True:\n        if len(set(colors)) == 1:\n            break\n        colors = [0] * n\n        for i in range(n):\n            if i == 0:\n                if colors[i] == 0:\n                    if s[i + 1] == 'a' or s[i + 1] == 'b':\n                        colors[i] = 1\n                        colors[i + 1] = 1\n            elif i == n - 1:\n                if colors[i] == 0:\n                    if s[i - 1] == 'a' or s[i - 1] == 'b':\n                        colors[i] = 1\n                        colors[i - 1] = 1\n            else:\n                if colors[i] == 0:\n                    if s[i - 1] == 'a' or s[i - 1] == 'b':\n                        colors[i] = 1\n                        colors[i - 1] = 1\n                    if s[i + 1] == 'a' or s[i + 1] == 'b':\n                        colors[i] = 1\n                        colors[i + 1] = 1\n        swaps += 1\n\n    if len(set(colors)) == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n + 1]\n    s = list(s)\n    s = sorted(s)\n    for i in range(0, n - 1):\n        if s[i]!= s[i + 1]:\n            s[i], s[i + 1] = s[i + 1], s[i]\n            break\n    s = ''.join(s)\n    if sorted(s) == s:\n        return 'YES' + s\n    else:\n        return 'NO'"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    s = stdin.readline().strip()\n\n    if n < 2:\n        return \"NO\"\n\n    if n == 2:\n        if s[0] == s[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    letters = [0] * n\n\n    for i in range(n):\n        letters[i] = s[i]\n\n    letters = \"\".join(letters)\n\n    if sorted(letters)!= letters:\n        return \"NO\"\n\n    if n % 2 == 0:\n        first_char = letters[:n // 2]\n        second_char = letters[n // 2 + 1:]\n    else:\n        first_char = letters[:n // 2]\n        second_char = letters[n // 2 + 1:]\n\n    if sorted(first_char)!= first_char or sorted(second_char)!= second_char:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    for i in range(1, n):\n        if s[i - 1] > s[i]:\n            return \"NO\"\n        if s[i] == s[i - 1]:\n            return \"NO\"\n        if s[i - 1] < s[i]:\n            x = s[i - 1]\n            s = s.replace(x, \"0\")\n            s = s.replace(x.lower(), \"1\")\n            x = s[i]\n            s = s.replace(x, \"0\")\n            s = s.replace(x.lower(), \"1\")\n    return \"YES\" if s == \"01\" * n else \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    if n:\n        n = int(n)\n        s = stdin.readline().strip()\n        if n == 1:\n            return 'YES'\n        if n == len(s):\n            return 'YES'\n        for i in range(n - 1):\n            if ord(s[i]) < ord(s[i + 1]):\n                return 'YES'\n        return 'NO'\n    else:\n        return ''\n\n\nprint(solution(StringIO('')))\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    c = [0] * n\n    for i in range(n):\n        if s[i] == s[n - 1 - i]:\n            c[n - 1 - i] = 1\n        elif s[i]!= s[n - 1 - i] and c[i] == 0:\n            c[i] = 1\n    res = []\n    for i in range(n):\n        if i!= 0 and c[i] == 0:\n            res.append(\"0\")\n        res.append(\"1\")\n    return \"YES\\n\" + \"\".join(res)\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n = int(stdin)\n    s = stdin[:n]\n    nums = [int(x) for x in s]\n    return str(sorted(nums))\n"
    },
    {
        "number": 4034,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n\n    current_color = -1\n    colored = set()\n    for i in range(n):\n        if s[i] not in colored:\n            current_color += 1\n            colored.add(s[i])\n        else:\n            if current_color == 0:\n                return \"NO\"\n            current_color = (current_color - 1) % 2\n            colored.remove(s[i])\n\n    return \"YES\" if sorted(s) == s else \"NO\""
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = 0\n    while True:\n        y = x * (a * 0.08 + b * 0.1)\n        if y == math.floor(y):\n            return str(int(y))\n        x += 1\n        if x * (a * 0.08 + b * 0.1) > 100:\n            return '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min(a*0.08, b*0.1) if a*0.08 < b*0.1 else -1)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    a, b = [int(i) for i in stdin[0].split()]\n    if a == b:\n        return str(a)\n    res = -1\n    for c in range(a, b+1):\n        if c % 2 == 0:\n            a1 = c/100\n            b1 = c/100 * 0.01\n            if a1 >= b1 and a1-b1 == 0:\n                return str(c)\n            elif a1 <= b1:\n                res = c\n    return str(res)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split(\" \"))\n    return str(min([x for x in range(A, B+1, 1) if x % 2 == 0 and x/2.0 % 1 == 0]))"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    answer = -1\n    \n    for price in range(max(0, A - B), A + 1):\n        tax1 = price * 0.08\n        tax2 = price * 0.1\n        if tax1 + tax2 == int(tax1 + tax2) and price > 0:\n            answer = price\n            break\n    \n    return str(answer)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b = map(int, stdin.strip().split())\n    if a == 1:\n        return str(b)\n    elif b == 1:\n        return str(a)\n    elif b < a:\n        return '-1'\n    else:\n        return str(math.ceil(a/b))"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(n) for n in stdin.split()]\n    while a < b:\n        b -= 1\n    return str(b)"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    if a >= b:\n        return -1\n\n    for price in range(a, b - 1, -1):\n        if price * 0.08 < price * 0.1:\n            return price\n\n    return -1"
    },
    {
        "number": 4035,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [0] * k\n    s = sum(a)\n    if n < s or n > k * 2 or s < k:\n        return \"NO\"\n    return \"YES\\n\" +''.join(map(str, a))\n\nasserts.assert_equals(solution(test_input_1), test_output_1)\nasserts.assert_equals(solution(test_input_2), test_output_2)\nasserts.assert_equals(solution(test_input_3), test_output_3)\nasserts.assert_equals(solution(test_input_4), test_output_4)\nasserts.assert_equals(solution(test_input_5), test_output_5)\nasserts.assert_equals(solution(test_input_6), test_output_6)\nasserts.assert_equals(solution(test_input_7), test_output_7)\nasserts.assert_equals(solution(test_input_8), test_output_8)\n\nasserts.verify(solution(''))\nasserts.verify(solution(test_input_1))\nasserts.verify(solution(test_input_2))\nasserts.verify(solution(test_input_3))\nasserts.verify(solution(test_input_4))\nasserts.verify(solution(test_input_5))\nasserts.verify(solution(test_input_6))\nasserts.verify(solution(test_input_7))\nasserts.verify(solution(test_input_8))\n'''\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = map(int, stdin.split())\n    return \"YES\" if solve(n, k) else \"NO\"\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ans = []\n    for i in range(k):\n        ans.append(int(stdin) - int(stdin) % 2)\n    return \"YES\\n\" + \"\\n\".join(map(str, ans))"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    def get_sum(n: int, k: int) -> int:\n        a = [0] * (k + 1)\n        for i in range(1, k + 1):\n            a[i] = i\n        for _ in range(k - 1):\n            for i in range(1, k + 1):\n                a[i] = (a[i] + a[i - 1]) % n\n        return a[-1]\n\n    s = get_sum(n, k)\n\n    if s == 0:\n        return \"YES\"\n\n    elif s <= n:\n        return f\"YES\\n{s}\"\n\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, k: int) -> str:\n        if n == 0:\n            return \"NO\"\n\n        solutions = []\n\n        for i in range(1, k + 1):\n            solutions.append(0)\n\n        for i in range(n):\n            for j in range(k):\n                solutions[j] += i\n                if solutions[j] >= n:\n                    solutions[j] -= n\n                    solutions[j + 1] += 1\n\n        return \"YES\" + '\\n' +''.join([str(n) for n in solutions])\n\n    n, k = map(int, stdin.split())\n    return solve(n, k)\n\nassert solution(stdin) == stdout\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n * k % 2!= 0:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(n - 1, n - 1, *range(1, k))\n    return \"\"\n\nassert(solution('''26 6''') == '''YES\n1 2 4 5 6 8 \n''')\n\nassert(solution('''8 3''') == '''NO\n''')\n\nassert(solution('''1 1''') == '''YES\n1 \n''')\n\nassert(solution('''9 4''') == '''NO\n''')\n\nassert(solution('''4 2''') == '''YES\n1 2 \n''')\n\nassert(solution('''3 1''') == '''YES\n1 \n''')\n\nassert(solution('''7 5''') == '''NO\n''')\n\nassert(solution('''5 4''') == '''YES\n1 2 \n''')\n\nassert(solution('''1 5''') == '''YES\n1 \n''')\n\nassert(solution('''5 1''') == '''YES\n1 \n''')\n\nassert(solution('''2 3''') == '''NO\n''')\n\nassert(solution('''4 2''') == '''NO\n''')\n\nassert(solution('''4 3''') == '''NO\n''')\n\nassert(solution('''6 3''') == '''YES\n1 2 4 5 6 \n''')\n\nassert(solution('''7 4''') == '''YES\n1 2 3 4 \n''')\n\nassert(solution('''8 4''') == '''YES\n1 2 3 4 5 \n''')\n\nassert(solution('''9 5''') == '''YES\n1 2 3 4 5 6 \n''')\n\nassert(solution('''10 5''') == '''YES\n1 2 3 4 5 6 7 \n''')\n\nassert(solution('''12 5''') == '''YES\n1 2 3 4 5 6 7 8 9 \n''')\n\nassert(solution('''15 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 \n''')\n\nassert(solution('''16 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \n''')\n\nassert(solution('''17 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \n''')\n\nassert(solution('''19 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \n''')\n\nassert(solution('''19 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \n''')\n\nassert(solution('''20 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \n''')\n\nassert(solution('''21 5''') == '''NO\n''')\n\nassert(solution('''2 4''') == '''NO\n''')\n\nassert(solution('''2 1''') == '''YES\n1 \n''')\n\nassert(solution('''2 4''') == '''NO\n''')\n\nassert(solution('''6 3''') == '''YES\n1 2 4 5 6 \n''')\n\nassert(solution('''7 4''') == '''YES\n1 2 3 4 \n''')\n\nassert(solution('''8 4''') == '''YES\n1 2 3 4 5 \n''')\n\nassert(solution('''9 5''') == '''YES\n1 2 3 4 5 6 \n''')\n\nassert(solution('''10 5''') == '''YES\n1 2 3 4 5 6 7 \n''')\n\nassert(solution('''11 5''') == '''YES\n1 2 3 4 5 6 7 8 9 \n''')\n\nassert(solution('''12 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 \n''')\n\nassert(solution('''15 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \n''')\n\nassert(solution('''16 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \n''')\n\nassert(solution('''17 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \n''')\n\nassert(solution('''19 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \n''')\n\nassert(solution('''19 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \n''')\n\nassert(solution('''20 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \n''')\n\nassert(solution('''21 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n''')\n\nassert(solution('''22 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \n''')\n\nassert(solution('''25 5''') == '''YES\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\\n{}\".format(2)\n    a = [1]\n    a.extend([i + 1 for i in range(n - 1)])\n    a.append(n)\n    if sum(a)!= n:\n        return \"NO\"\n    while len(a) > k:\n        a = a[1:]\n        if a[-1] == a[0]:\n            del a[-1]\n        else:\n            a = [a[0] - 1] + a[:-1]\n    a = [str(i) for i in a]\n    a = \" \".join(a)\n    return \"YES\\n{}\".format(a)\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1:\n        return \"NO\"\n    if k < 1:\n        return \"NO\"\n    if k > 10**5:\n        return \"NO\"\n    if n > 10**9:\n        return \"NO\"\n    return \"YES\" + '\\n' +''.join(map(str, range(1, n + 1)))\n\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n < 1:\n        return 'NO'\n\n    if n == 1:\n        return 'YES'\n\n    if k < 1:\n        return 'NO'\n\n    if n == k:\n        return str(n)\n\n    if n < k:\n        return 'NO'\n\n    a = [0] * k\n    a[0] = n - 1\n    a[1] = 2 * (n - 1)\n    for i in range(2, k):\n        a[i] = (a[i - 1] + a[i - 2]) * 2\n\n    if a[-1] < k:\n        return 'NO'\n\n    a =''.join(str(x) for x in a)\n\n    return 'YES'+ a\n"
    },
    {
        "number": 4036,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1 or n > 10 ** 9 or k < 1 or k > 10 ** 5:\n        return \"NO\"\n\n    a = []\n    for i in range(k):\n        s = int(stdin.readline())\n        a.append(s)\n        if i + 1 < k and a[i] < a[i + 1]:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = [map(int, line.split()) for line in stdin.split('\\n')[:n]]\n    projects.sort(key=lambda proj: proj[0], reverse=True)\n    profit = 0\n    rating = r\n    for p in projects:\n        r = max(p[1] - rating, 0)\n        profit += r\n        rating += r\n    return profit\n\nassert (solution('''3 4\n4 6\n10 -2\n8 -1''') == '3')\nassert (solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == '5')\nassert (solution('''3 2\n300 -300\n1 299\n1 123\n''') == '3')\nassert (solution('''1 3\n20 9\n''') == '0')\nassert (solution('''3 1\n0 3\n1 -3\n2 0\n''') == '1')\nassert (solution('''4 1\n0 1\n1 1\n2 1\n3 -1\n''') == '2')\nassert (solution('''3 4\n1 2\n2 3\n3 4\n4 1\n1 -2\n''') == '6')"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, n, r = [int(x) for x in stdin.split()]\n    rating = [0] * n\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        rating[a - 1] += b\n    ratings = sorted(rating, reverse=True)\n    if r >= 0:\n        ans = 1\n        for r in rating:\n            if r >= r:\n                ans += 1\n            else:\n                break\n    else:\n        ans = 0\n        for r in rating:\n            if r <= r:\n                ans += 1\n            else:\n                break\n    return str(ans)\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split(' '))\n    ratings = [map(int, line.strip().split(' ')) for line in stdin.strip().split('\\n')]\n    result = 0\n    for rating_diff, rate_change in ratings:\n        rating_diff += rate_change\n        if rating_diff > 0:\n            result += rating_diff\n    return str(result)\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum possible size of a subset of projects Polycarp can choose.\n\n    Inp: 4 2\n    Out: 3\n\n    Inp: 3 2\n    Out: 3\n\n    Inp: 5 20\n    Out: 5\n    \"\"\"\n    n, r = [int(x) for x in stdin.strip().split()]\n    ratings = [int(x) for x in stdin.strip().split()]\n    ratings.sort()\n    ratings.reverse()\n    size = 0\n    for i, rating in enumerate(ratings):\n        if size + rating >= r:\n            size += rating\n            break\n        size += rating\n    return str(size)\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n\n    projects.sort(key=lambda p: -p[0])\n\n    rating = 0\n    size = 0\n    for a, b in projects:\n        rating += b\n        if rating >= r:\n            size += 1\n            rating -= a\n\n    return str(size)"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_projects = int(stdin.readline())\n    current_rating = int(stdin.readline())\n    projects = []\n\n    for _ in range(number_of_projects):\n        rating_required, rating_change = list(map(int, stdin.readline().split()))\n        projects.append((rating_required, rating_change))\n\n    projects.sort(key=lambda x: x[1], reverse=True)\n    projects.sort(key=lambda x: x[0], reverse=True)\n\n    result = 0\n    rating = current_rating\n    for project in projects:\n        current_rating += project[1]\n\n        if current_rating < 0:\n            rating = 0\n\n        if rating > result:\n            result = rating\n\n    return str(result)\n\nassert(solution('''3 4\n4 6\n10 -2\n8 -1''') == '3')\nassert(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == '5')\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split(\" \")]\n\n    projects = []\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.split(\" \")]\n        projects.append((a, b))\n\n    projects.sort(key=lambda x: -x[0])\n    solution_set = set()\n    rating = r\n\n    for project in projects:\n        if project[0] > rating:\n            break\n\n        rating += project[1]\n        solution_set.add(project[0])\n\n    return str(len(solution_set))\n\nsolution(stdin.read())\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    projects = sorted(projects, key=lambda x: x[0], reverse=True)\n    sizes = [0] * n\n    for a, b in projects:\n        for i in reversed(range(n)):\n            if sizes[i] < a:\n                sizes[i] = a\n            else:\n                sizes[i] += b\n    return str(max(sizes))\n\nassert (solution('''3 4\n4 6\n10 -2\n8 -1''') == '3')\nassert (solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''') == '5')\nassert (solution('''3 2\n300 -300\n1 299\n1 123\n''') == '3')\n"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.readline().split())\n    projects = [map(int, line.split()) for line in stdin.read().splitlines()]\n\n    result = 0\n    curr_rating = r\n    for project in projects:\n        ratings_increase = curr_rating - project[1]\n        if ratings_increase < 0:\n            curr_rating = project[0]\n        else:\n            curr_rating += project[1]\n        result = max(result, abs(ratings_increase) + project[0])\n\n    return str(result)\n\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 3\n300 -300\n1 299\n1 123''')) == '4'\nassert str(solution('''3 3\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 3\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 4\n4 6\n10 -2\n8 -1''')) == '3'\nassert str(solution('''3 4\n4 6\n10 -2\n8 -1''')) == '3'\nassert str(solution('''3 4\n4 6\n10 -2\n8 -1''')) == '3'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''3 2\n300 -300\n1 299\n1 123''')) == '3'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -45''')) == '5'\nassert str(solution('''5 20\n45 -6\n34 -15\n10 34\n1 27\n40 -"
    },
    {
        "number": 4037,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    n, rating = map(int, stdin.split(' '))\n    projects = []\n    for i in range(n):\n        projects.append(tuple(map(int, stdin.split(' '))))\n    projects.sort(key=lambda p: p[0])\n    for project in projects:\n        if rating < project[0]:\n            result += 1\n            rating += project[1]\n    return result\n\nassert str(solution(input())) == input()\n\n\"\"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    matrix = stdin[1:].split()\n\n    if n == '1' and matrix[0] == '1':\n        return 'YES'\n\n    # the matrix is palindromic if the sum of the diagonals is equal to the sum of the sums of the rows and columns\n    diagonals = [int(matrix[i][i]) + int(matrix[i][-i - 1]) for i in range(len(matrix))]\n    rows = [sum(int(matrix[i][j]) for j in range(len(matrix[i]))) for i in range(len(matrix))]\n    cols = [sum(int(matrix[i][j]) for i in range(len(matrix))) for j in range(len(matrix[0]))]\n\n    if diagonals[0] == rows[0] == cols[0]:\n        return 'YES'\n    if diagonals[1] == rows[1] == cols[1]:\n        return 'YES'\n\n    return 'NO'"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n'''\n\n'''\n\nIn this problem you will be given a triangular array of integers, the rows being numbered in decreasing order. It's forbidden to give the exact value of the current number.\n\nYour goal is to return the row of the number that is missing and the value that is missing, in that order.\n\nExample\n\n\n\nA triangle of numbers is shown below.\n\n\n\nThe middle row is missing. The number is 8 and the number in the second row is 4.\n\nThe following rows are missing:\n\n\n\nThe first and the second rows are missing. The number is 1 and the number in the third row is 5.\n\nThe last row is missing. The number is 9 and the number in the first row is 2.\n\nInput\n\n\n\nA triangular array of integers, the rows being numbered in decreasing order. It's forbidden to give the exact value of the current number.\n\n\n\nOutput\n\n\n\nTwo integers, the row number and the value that is missing.\n\nIf there is no missing number, then output the number -1 and -1.\n\nExample\n\n\n\nFor the example above the answer would be: 2, 5\n\n\n\nThe first row is missing. The number is 8 and the number in the second row is 4.\n\nThe second row is missing. The number is 1 and the number in the third row is 5.\n\nThe last row is missing. The number is 9 and the number in the first row is 2.\n\nThe answer would be: 2, 5\n\n'''\n\n'''\n\nYour solution should return a list of two integers, the first for the row number and the second for the missing number.\n\nFor example, for the example above the output would be [2, 5]\n\nFor the example above the output would be [3, -1]\n\nFor the example above the output would be [4, -1]\n\nInput\n\n\n\nA triangular array of integers, the rows being numbered in decreasing order. It's forbidden to give the exact value of the current number.\n\n\n\nOutput\n\n\n\nTwo integers, the row number and the value that is missing.\n\nIf there is no missing number, then output the number -1 and -1.\n\nExample\n\n\n\nFor the example above the answer would be [2, 5]\n\nFor the example above the answer would be [3, -1]\n\nFor the example above the answer would be [4, -1]\n\n\n\n'''\n\n'''\n\nGiven a triangular array of integers, the rows being numbered in decreasing order. It's forbidden to give the exact value of the current number.\n\nYour goal is to return the row of the number that is missing and the value that is missing, in that order.\n\nExample\n\n\n\nA triangular array of numbers is shown below.\n\n\n\nThe middle row is missing. The number is 8 and the number in the second row is 4.\n\nThe following rows are missing:\n\n\n\nThe first and the second rows are missing. The number is 1 and the number in the third row is 5.\n\nThe last row is missing. The number is 9 and the number in the first row is 2.\n\nInput\n\n\n\nA triangular array of integers, the rows being numbered in decreasing order. It's forbidden to give the exact value of the current number.\n\n\n\nOutput\n\n\n\nTwo integers, the row number and the value that is missing.\n\nIf there is no missing number, then output the number -1 and -1.\n\nExample\n\n\n\nFor the example above the answer would be"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    \n    if is_palindromic(a):\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    "
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n ** 2):\n        a = list(map(int, stdin.readline().split()))\n        if a == list(reversed(a)):\n            b = []\n            for _ in range(n):\n                b.append(stdin.readline().strip())\n            if b == b[::-1]:\n                print(\"YES\")\n                print(\"\\n\".join(str(x) for x in a))\n                return\n    print(\"NO\")"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    \n    def is_palindromic(a: List[int]) -> bool:\n        a.reverse()\n        return a == a[::-1]\n    \n    def is_palindromic_1d(a: List[int]) -> bool:\n        return is_palindromic([a[i] for i in range(len(a))])\n    \n    for i in range(n):\n        if is_palindromic_1d(matrix[i]):\n            return \"YES\"\n    \n    return \"NO\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.strip().split())))\n    for row in range(n):\n        matrix[row].reverse()\n        for col in range(n):\n            matrix[row][col] = matrix[row][col] * (-1) if matrix[row][col] > 0 else matrix[row][col]\n    for row in range(n):\n        for col in range(n):\n            if matrix[row][col] == 0:\n                matrix[row][col] = '0'\n            else:\n                matrix[row][col] = str(matrix[row][col])\n    return 'YES\\n' + '\\n'.join(' '.join(row) for row in matrix)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip().split()[0]\n    n = int(n)\n    matrix = [list(map(int, stdin.strip().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if sum(matrix[i][j:]) == sum(matrix[i][:j]):\n                for k in range(n):\n                    matrix[k][j], matrix[k][n-1-j] = matrix[k][n-1-j], matrix[k][j]\n                matrix[i] = matrix[i][n//2:] + matrix[i][:n//2]\n                return''.join([''.join(map(str, row)) for row in matrix])\n    return 'NO'"
    },
    {
        "number": 4038,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    row, col = [int(x) for x in stdin.split()]\n    matrix = []\n    for _ in range(row):\n        matrix.append([int(x) for x in stdin.split()])\n    for i in range(row - 1):\n        for j in range(col - 1):\n            if matrix[i][j] == matrix[i + 1][j] or matrix[i][j + 1] == matrix[i + 1][j + 1]:\n                continue\n            else:\n                return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.strip().split(' ')]\n    projects = [tuple(int(x) for x in stdin.strip().split(' ')) for _ in range(n)]\n    projects.sort(key=lambda x: x[1], reverse=True)\n    if r < 0 or r > 30000:\n        return 'NO'\n    elif max(p[0] for p in projects) > r:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    rating = r\n    projects = []\n    for _ in range(n):\n        projects.append(tuple(map(int, stdin.split())))\n    \n    projects.sort(key=lambda project: -project[1])\n    for project in projects:\n        if rating < project[0]:\n            return \"NO\"\n        rating += project[1]\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, r = map(int, lines[0].split())\n    s = list(map(int, lines[1].split()))\n    prev_r = r\n    r_change = 0\n    for i in range(2, len(s) + 2):\n        r_change = s[i - 2]\n        r += r_change\n        if r < 0:\n            return 'NO'\n        if r - prev_r >= 0:\n            return 'NO'\n        prev_r = r\n    return 'YES'"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4 5\n   ... 1 3\n   ... -1 4\n   ... 2 4\n   ... 3 1\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 3 4\n   ... 4 6\n   ... 10 -2\n   ... 8 -1\n   ... ''')\n    'YES'\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    n, r = [int(x) for x in data[0].split()]\n    a = [int(x) for x in data[1].split()]\n    b = [int(x) for x in data[2].split()]\n    arr = [[a[i], b[i]] for i in range(n)]\n    arr = sorted(arr, key=lambda x: x[0])\n    if r > 0:\n        for i in range(n):\n            if a[i] > r:\n                return 'NO'\n    else:\n        for i in range(n):\n            if a[i] < 0:\n                return 'NO'\n    return 'YES'\n\nn = int(input())\nr = int(input())\na = []\nb = []\nfor i in range(n):\n    a.append(int(input()))\nfor i in range(n):\n    b.append(int(input()))\narr = []\narr = sorted(arr, key=lambda x: x[0])\n"
    },
    {
        "number": 4039,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.readline().split())\n    a = [map(int, stdin.readline().split()) for _ in range(n)]\n\n    a.sort(key=lambda x: x[1], reverse=True)\n    b = [i[0] - i[1] for i in a]\n    b = [b[0]] + [i if i > 0 else 0 for i in b]\n    if sum(b) <= r:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nsolution(\"7 3 2\")\n\"YES\"\nsolution(\"10 1 11\")\n\"YES\"\nsolution(\"10 1 5\")\n\"YES\"\nsolution(\"\")\n\"NO\"\n\"\"\"\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    width, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    a = [0] * width\n    for i in range(1, m+1):\n        a[c[i-1]-1] = i\n    if a[0]!= 0:\n        return 'NO'\n    a[0] = 1\n    a[width-1] = m\n    for i in range(1, width-1):\n        if a[i] == 0:\n            a[i] = 1\n    return 'YES'\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    arr = [0 for _ in range(n + 2)]\n    for i in range(1, m + 1):\n        left = 0\n        right = n + 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid >= c[i - 1]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        arr[left] = i\n    a = arr[1:]\n    if n + 1 in a:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\""
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def read_integer_stream() -> int:\n        return int(stdin.readline().strip())\n\n    n, m, d = read_integer_stream(), read_integer_stream(), read_integer_stream()\n    c = [read_integer_stream() for _ in range(m)]\n    pass\n\"\"\"\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    platforms = list(map(int, stdin.split()))\n    if sum(platforms) > n:\n        return \"NO\"\n    for i in range(1, m+1):\n        if sum(platforms[:i]) > n:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ...\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = (int(x) for x in stdin.split())\n    c = list(map(int, stdin.split()))\n    for i in range(m):\n        c[i] += 1\n    a = [0] * (n + 2)\n    for i in range(m):\n        a[c[i]] = i + 1\n    a[0] = a[n+1] = 0\n    return \"YES\" if a[n+1]!= 0 else \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def check(start: int, end: int, length: int, a: List[int]) -> None:\n        for i in range(start, end, length):\n            if a[i]!= i:\n                return False\n        return True\n\n    def my_solution(n: int, m: int, d: int, a: List[int], c: List[int]) -> str:\n        a = [0] + a + [n + 1]\n        a.sort()\n        count = 0\n        while a[count] < n + 1:\n            if a[count] == a[count + d]:\n                count += 1\n                continue\n            for i in range(1, m + 1):\n                if a[i] == a[count] + i:\n                    count += 1\n                    break\n        if a[count] == n + 1:\n            return 'YES'\n        return 'NO'\n\n    stdin = stdin.splitlines()\n    n, m, d = map(int, stdin[0].split())\n    c = list(map(int, stdin[1].split()))\n    return my_solution(n, m, d, c, [0] + c + [n + 1])\n\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"4 2 1\"), \"YES\")\n        self.assertEqual(solution(\"7 1 11\"), \"YES\")\n        self.assertEqual(solution(\"10 1 5\"), \"YES\")\n        self.assertEqual(solution(\"10 1 5\"), \"YES\")\n"
    },
    {
        "number": 4040,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, m, d = list(map(int, stdin.split()))\n\n    c = list(map(int, stdin.split()))\n\n    if not a + m < d:\n        return \"NO\"\n\n    if d == 1:\n        return \"YES\"\n\n    if a + m == d:\n        return \"YES\"\n\n    if a == 0:\n        return \"NO\"\n\n    if c[0] == 0:\n        return \"NO\"\n\n    last = 1\n    if c[0] > d:\n        for i in range(1, m):\n            if c[i] > d:\n                return \"NO\"\n            last = i\n\n    res = [0] * (a + m)\n    for i in range(last, a + m):\n        if i < c[0]:\n            res[i] = 1\n        else:\n            res[i] = last + 1\n            last += 1\n            for j in range(1, m):\n                if c[j] <= i:\n                    last += 1\n\n    return \"YES\\n\" + \"\\n\".join(map(str, res))"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    m = len(s)\n    n = len(t)\n    if m == 0:\n        return 0\n    if n == 0:\n        return m\n    if m < n:\n        return 0\n    a = list(s)\n    b = list(t)\n    f = True\n    for i in range(n):\n        if b[i]!= a[i]:\n            f = False\n    if f:\n        return 0\n    a = ''.join(a)\n    b = ''.join(b)\n    if b in a:\n        return m - n\n    return m - n - 1\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    l = len(s)\n    l = l if l <= 200 else 200\n    result = 0\n    for i in range(l):\n        for j in range(i+1, l+1):\n            if s[i:j] == t:\n                result = max(result, j-i)\n    return str(result)"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    s_len, t_len = len(s), len(t)\n    l = 0\n    while l < s_len:\n        i = 0\n        while i < t_len:\n            if s[l] == t[i]:\n                l += 1\n                break\n            i += 1\n        if i == t_len:\n            return l - s_len\n    return 0\n\n\nassert (solution(stdin) == 3)\nprint(solution(stdin))\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    t = t[1:-1]\n    s = s[1:-1]\n    dp = [0] * len(s)\n    for i in range(len(s)):\n        current_dp = dp[:]\n        for j in range(i + 1):\n            if s[j:i+1] == t:\n                current_dp[j] = len(s[j:i+1])\n        dp = current_dp\n    return max(dp)\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\", 2)[1:]\n    return stdout.strip()"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n    m = len(t)\n\n    arr = [0 for i in range(n + 1)]\n    for i in range(1, m + 1):\n        pre = 0\n        cur = 1\n        for j in range(1, n + 1):\n            temp = max(pre, cur)\n            pre = cur\n            cur += arr[j - 1]\n            arr[j] = temp\n        print(arr)\n    return arr[n]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    l = len(s)\n    for i in range(l):\n        s = s[1:] + s[0]\n        if s.find(t)!= -1:\n            return i + 1\n    return 0"
    },
    {
        "number": 4041,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    first_str = stdin\n    second_str = stdin\n    while len(second_str) > len(first_str):\n        first_str = second_str\n        second_str = stdin\n    first_str = second_str\n    while len(second_str) > len(first_str):\n        second_str = first_str\n        first_str = stdin\n    first_str = stdin\n    return first_str\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin.strip())\n    if x < 1:\n        print(1, 1)\n        return \"\"\n\n    b = 1\n    while b * b < x:\n        b = b + 1\n    b = b - 1\n    c = int(b * b + x)\n    a = b + 1\n\n    while True:\n        if a * a + b * b < c:\n            a += 1\n        elif a * a + b * b == c:\n            return \"%d %d\" % (a, b)\n        elif a * a + b * b > c:\n            b -= 1\n        else:\n            a += 1\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().split(\".\")[1]\n    if len(a) > 6:\n        a = a[:6]\n    return str(int(a[0]) + int(a[1]) * 10 + int(a[2]) * 100 + int(a[3]) * 1000 + int(a[4]) * 10000 + int(a[5]) * 100000)"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    x = float(stdin)\n    numerator = math.ceil(x * 100)\n    denominator = math.floor(x * 100)\n    if numerator % denominator == 0:\n        return str(numerator // denominator) + \" \" + str(denominator)\n    elif numerator % denominator > 0:\n        return str(numerator // denominator + 1) + \" \" + str(denominator)\n    else:\n        return str(numerator // denominator) + \" \" + str(denominator)\n\nassert solution(1.200000) == '3 2'\nassert solution(2.572479) == '10 3'\nassert solution(4.024922) == '9 9'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.split()[0]\n    return''.join(str(i) for i in find_factors(number))\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = x\n    b = int(x)\n    c = round(x, 2)\n    d = int(c)\n    e = round(c, 1)\n    f = int(e)\n    g = round(e, 0)\n    h = int(g)\n    i = int(g)\n    j = int(h)\n    k = int(j)\n    l = int(j)\n    m = int(k)\n    n = int(l)\n    o = int(l)\n    p = int(m)\n    q = int(n)\n    r = int(n)\n    s = int(p)\n    t = int(q)\n    u = int(r)\n    v = int(s)\n    w = int(t)\n    x = int(u)\n    y = int(v)\n    z = int(w)\n    if x > 1:\n        return \"{0} {1}\".format(r, t)\n    elif x < 1:\n        return \"{0} {1}\".format(s, t)\n    elif x == 1:\n        return \"{0} {1}\".format(r, t)\n    elif x == 0:\n        return \"{0} {1}\".format(z, t)\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = float(stdin)\n    ans = 0\n    n = 1\n    while True:\n        if ans == 10:\n            break\n        ans = n + (ans * 10)\n        n += 1\n        if ans == num:\n            break\n    return str(n) +'' + str(ans)"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.strip()\n    half = round(number, 1)\n    factorial = 1\n    solutions = 0\n    for i in range(1, int(half) + 1):\n        factorial *= i\n        if round(number, 1) == half:\n            solutions += 1\n    return str(solutions) +'' + str(factorial // 2)"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n\n\n\"\"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.strip()\n    int_number = int(number)\n    int_number_sqrt = int(round(math.sqrt(int_number)))\n    print(int_number_sqrt)\n    for i in range(2,int_number_sqrt+1):\n        if int_number % i == 0:\n            print(i, int_number//i)\n            break\n    return \"\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    a = (1.0 + x) ** 0.5\n    b = (1.0 - x) ** 0.5\n\n    if a - int(a) < 0.5:\n        a = int(a) - 1\n    else:\n        a = int(a)\n\n    if b - int(b) < 0.5:\n        b = int(b) - 1\n    else:\n        b = int(b)\n\n    print(a, b)"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (n, d, k) = list(map(int, stdin.split()))\n    if n == 1 or d > 4 * 10 ** 5 or k > 4 * 10 ** 5:\n        return 'NO'\n    else:\n        tree = [[] for _ in range(n + 1)]\n        for _ in range(n - 1):\n            a, b = list(map(int, stdin.split()))\n            if a == b:\n                return 'NO'\n            tree[a].append(b)\n            tree[b].append(a)\n    visited = set()\n    max_degree = 0\n    max_degree_vertex = None\n    for i in range(1, n + 1):\n        degree = len(tree[i])\n        if degree > max_degree:\n            max_degree = degree\n            max_degree_vertex = i\n        elif degree == max_degree and i not in visited:\n            max_degree_vertex = None\n        visited.add(i)\n        if max_degree == k:\n            break\n    if max_degree!= k:\n        return 'NO'\n    print('YES')\n    for i in range(1, n + 1):\n        if i == max_degree_vertex:\n            print(max_degree_vertex, end=' ')\n        else:\n            print(0, end=' ')\n        for j in tree[i]:\n            if j!= max_degree_vertex:\n                print(j, end=' ')\n        print()\n    return ''\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n - 1 < d * k:\n        return \"NO\"\n    return \"YES\\n{}\".format(\"\\n\".join(\n        \"{} {}\".format(v + 1, u + 1)\n        for v in range(n - 1)\n        for u in range(v + 1, n)\n        if (v + u) % 2 == 1\n    ))\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Prints the result.\n    \"\"\"\n    n, d, k = [int(i) for i in stdin.split()]\n    if n < d and n < k:\n        print(\"NO\")\n        return\n\n    tree = [set() for i in range(n + 1)]\n    for i in range(n - 1):\n        a, b = [int(j) for j in stdin.split()]\n        if a not in tree[b]:\n            tree[b].add(a)\n        if b not in tree[a]:\n            tree[a].add(b)\n\n    to_be_printed = set()\n    for i in range(1, n + 1):\n        if len(tree[i]) > d:\n            print(\"NO\")\n            return\n        if len(tree[i]) > k:\n            print(\"NO\")\n            return\n        if len(tree[i]) == d:\n            to_be_printed.add(i)\n\n    for i in range(1, n + 1):\n        if i in to_be_printed:\n            print(f\"{i} {' '.join([str(a) for a in tree[i]])}\")\n        else:\n            print(f\"{i} NO\")\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split(\" \")]\n    return \"YES\" if is_tree(n, d, k) else \"NO\"\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    return \"NO\" if n < 2 or d < 1 or k < 1 or n > 10 ** 5 or d > 3 * 10 ** 4 or k > 3 * 10 ** 5 else \"YES\"\n\n\nassert solution(stdin) == stdin\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(i) for i in stdin.split()]\n    for _ in range(n - 1):\n        u, v = [int(i) for i in stdin.split()]\n        if d <= 1:\n            return 'NO'\n\n        if d == 2:\n            if k > 1:\n                return 'NO'\n\n            if u in [1, v] and v in [1, u]:\n                return 'NO'\n\n        if d <= 2:\n            return 'NO'\n\n        if u == v:\n            return 'NO'\n\n        if d % 2!= 0:\n            return 'NO'\n\n        if d == d // 2 + 1:\n            if k > 1:\n                return 'NO'\n\n            if u in [1, v] and v in [1, u]:\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    for i in range(1, n):\n        if i < d:\n            print(\"NO\")\n            return\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [0] * (n + 1)\n\n    def traverse(vertex, visited, count):\n        visited[vertex] = 1\n        for neighbor in graph[vertex]:\n            if not visited[neighbor]:\n                if count >= d:\n                    return\n                traverse(neighbor, visited, count + 1)\n        count += 1\n\n    for vertex in range(1, n + 1):\n        visited[vertex] = 1\n        traverse(vertex, visited, 0)\n        if visited[vertex] == 1:\n            count = 1\n            for neighbor in graph[vertex]:\n                if visited[neighbor] == 1:\n                    count += 1\n            if count <= k:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, d, k = [int(n) for n in lines[0].split(' ')]\n    print('YES' if is_undirected_tree(n, d, k) else 'NO')\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = [0] * (a + b)\n    count = 0\n    for i in range(a + b):\n        if i < a:\n            if count == x:\n                s[i] = 1\n                count += 1\n        else:\n            if s[i - a] == 1:\n                s[i] = 1\n                count += 1\n            else:\n                s[i] = 0\n                count -= 1\n    return ''.join([str(elem) for elem in s])\n\nimport sys"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine a binary string which has exactly a, b, x values.\n    :param stdin:\n    :return:\n    \"\"\"\n    a, b, x = [int(line) for line in stdin.split()]\n    length = a + b\n    x_in_n_bits = x % length\n    n_1s = length - x_in_n_bits\n    s = \"\".join(str(int(i in {x_in_n_bits, length - x_in_n_bits})) for i in range(length))\n    return s.rjust(length, \"0\")"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    l, r = 0, 0\n    while l < a:\n        r += 1\n        l += x\n    while r < b:\n        r += 1\n        l += 1\n    return '1' * l + '0' * (b - r)\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split(\" \")]\n    n = a + b\n    a += a - x\n    if a * 2 + b - x <= n:\n        return \"\".join([\"1\" if i < a else \"0\" for i in range(n)])\n    elif a * 2 + b - x > n:\n        return \"\".join([\"0\" if i < a else \"1\" for i in range(n)])\n    else:\n        return \"\".join([\"1\" if i < n - a else \"0\" for i in range(n)])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3 1\\n\")\n    '1100'\n    >>> solution(\"3 3 3\\n\")\n    '101100'\n    >>> solution(\"5 3 6\\n\")\n    '01010100'\n    \"\"\"\n    a, b, x = map(int, stdin.strip().split())\n    s = '1' * a + '0' * b + '1' * x\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split()]\n    s = \"\"\n    for i in range(a):\n        s += \"0\"\n    for i in range(b):\n        s += \"1\"\n    for i in range(x):\n        s += \"0\"\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = (int(s) for s in stdin.split())\n    n = a + b\n    return \"\".join([\"0\"] * a + [\"1\"] * b + [\"x\"] * x)"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return ''.join([str(int(i) ^ int(j)) for i, j in zip(*map(bin, (int(stdin[0]), int(stdin[1]), int(stdin[2]))[::-1]))])"
    },
    {
        "number": 4044,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution("
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    \n    # Your code here\n    \n    return \"\""
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[1]\n    t = stdin.split(\"\\n\")[2]\n    res = \"\"\n    if len(s)!= 2 or len(t)!= 2:\n        return \"NO\"\n\n    for i in range(1, 3):\n        if len(set(s[:i]))!= 1:\n            return \"NO\"\n        if len(set(t[:i]))!= 1:\n            return \"NO\"\n\n    return \"YES\"\n\n\nassert(solution(stdin) == stdin.split(\"\\n\")[0])\nprint(solution(stdin))\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    s = stdin[1]\n    t = stdin[2]\n\n    if (n % 3!= 0):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        n = 3 * n // 3\n        s = s * n\n        t = t * n\n        print(s)\n        print(t)\n    return\n\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().rstrip()\n    t = stdin.readline().rstrip()\n\n    a = Counter(s)['a']\n    b = Counter(t)['b']\n    c = Counter(s)['c']\n    res = 'a' * a + 'b' * b + 'c' * c\n    if len(res)!= n:\n        print('NO')\n    else:\n        print('YES')\n        print(res)\n    return stdin\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:2]\n    t = stdin[2:4]\n    s_ = \"\"\n    t_ = \"\"\n    for _ in range(n):\n        s_ += s\n        t_ += t\n    return \"YES\\n\" + s_ + t_\n\n\n-----\ninput\n2\nab\nbc\n\noutput\nYES\nacbbac\n\ninput\n3\naa\nbc\n\noutput\nYES\ncacbacbab\n\ninput\n1\ncb\nac\n\noutput\nYES\nabc\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    s, t = s[1:-1], t[1:-1]\n    n = int(s[0])\n    res = [s[0]] * n + [t[0]] * n + [s[1]] * n\n    for i in range(2, n):\n        res[i] = s[i - 1] + res[i - 1] + s[i]\n    return \"YES\\n\" + \"\".join(res)"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if (n >= 5) and ((s[0] == 'a') and (t[0] == 'b')):\n        res = ''\n        for i in range(n):\n            res += s[i]\n            res += t[i]\n        res += s[n:]\n        res += t[n:]\n        return 'YES' + '\\n' + res\n    return 'NO'\n"
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if n < 3:\n        return 'NO'\n    a = 'a' * n\n    b = 'b' * n\n    c = 'c' * n\n    first = set(s + t)\n    second = set(a + b + c)\n    third = set(a + b)\n    fourth = set(b + c)\n    if len(first) + len(second) < 3 * n:\n        return 'NO'\n    if len(second) + len(third) < 3 * n:\n        return 'NO'\n    if len(third) + len(fourth) < 3 * n:\n        return 'NO'\n    if len(first - (second | third | fourth)) > 0:\n        return 'NO'\n    return 'YES'\n    "
    },
    {
        "number": 4045,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution(\n'''2''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''1''') == \"NO\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''2''') == \"YES\"\n\nassert solution(\n'''1''') == \"NO\"\n\nassert solution(\n'''5''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''1''') == \"NO\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''2''') == \"YES\"\n\nassert solution(\n'''2''') == \"YES\"\n\nassert solution(\n'''10''') == \"YES\"\n\nassert solution(\n'''1''') == \"NO\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''2''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''2''') == \"YES\"\n\nassert solution(\n'''2''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''2''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''2''') == \"YES\"\n\nassert solution(\n'''2''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''2''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert solution(\n'''3''') == \"YES\"\n\nassert"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return '-1'\n    q = list(map(int, stdin.split(' ')))\n    for i in range(n - 1):\n        if q[i]!= -(n - i - 1):\n            return''.join(map(str, q))\n    return '-1'\n\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = [int(stdin.readline()) for _ in range(n)]\n    q = [int(x) for x in stdin.readline().strip().split(\" \")]\n    return \" \".join(map(str, permutation(p, q)))\n\nassert(solution(\"\"\"3\n-2 1\n\n\"\"\") == \"\"\"3 1 2\n\n\"\"\")\nassert(solution(\"\"\"5\n1 1 1 1 1\n\n\"\"\") == \"\"\"1 2 3 4 5\n\n\"\"\")\nassert(solution(\"\"\"4\n-1 2 2\n\n\"\"\") == \"\"\"-1\n\n\"\"\")\n\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = [int(x) for x in stdin.strip().split()]\n    p = [1]\n    for i in range(1, n):\n        p.append(p[i-1] + q[i-1])\n    p.reverse()\n    for i in p:\n        print(i, end=' ')\n    return ''"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return -1\n    if n > 1000000000:\n        return -1\n    a = list(map(int, stdin.split(' ')))\n    return''.join(map(str, a))\n"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = [int(x) for x in stdin.readline().split(' ')]\n\n    m = q[n-1]\n\n    # Let's say we have a permutation $p_1, p_2, p_3, \\dots, p_n$.\n    # We want to find a permutation $q_1, q_2, \\dots, q_{n-1}$ of length $n-1$\n    # such that $q_i=p_i+p_{i+1}-p_i$ for all $i$.\n    #\n    # We can solve this problem by a simple greedy algorithm.\n    # Let's start with $q_1=p_1+p_2-p_1$. We can add $q_1$ to the end of the array,\n    # and then move $p_1$ to the beginning of the array. Now let's try $q_2=p_2+p_3-p_2$,\n    # and so on. We keep doing this until we reach $q_n=p_{n-1}+p_{n-2}-p_{n-1}$,\n    # where $q_{n-1}=p_{n-1}$ and $p_{n-1}=p_{n-2}$ for $n-1>1$.\n    #\n    # If we were to start with $q_n=p_{n-1}$ then we would have found a permutation\n    # of length $n-1$. If we were to start with $q_n=p_{n-2}$ we would have found another\n    # permutation of length $n-2$. If we were to start with $q_n=p_{n-3}$ we would have\n    # found a permutation of length $n-3$.\n    #\n    # To make this algorithm even more efficient, we can just keep track of the numbers\n    # we have seen so far in an array and the last number we saw. If we see a number\n    # we have seen already, we can return -1. If we never saw that number before,\n    # then we know that we have an unseen number and can add it to the current permutation.\n\n    seen = [False] * (m+1)\n\n    curr = 0\n    ans = []\n\n    for i in range(n-1):\n        if seen[q[i]]:\n            return '-1'\n\n        seen[q[i]] = True\n        curr = curr + q[i]\n\n        if curr == m:\n            ans.append(i+1)\n            curr -= q[i]\n\n    ans.append(n)\n    return''.join([str(x) for x in ans])\n\nprint(solution(input()))"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == '')\nassert(solution(stdin) == ''"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = [int(x) for x in stdin.readline().split()]\n    q.sort()\n    p = list(range(1, n+1))\n    ans = []\n    for x in q:\n        ans.append(p[x-1])\n        p.remove(p[x-1])\n    return''.join(str(x) for x in ans)\n\nassert(solution('''3''') == '3 1 2')\nassert(solution('''5''') == '1 2 3 4 5')\nassert(solution('''4''') == '-1')\n"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = list(map(int, stdin.readline().split()))\n    p = []\n    i = 0\n    j = 0\n    while i < n:\n        if q[j] - i >= 0:\n            p.append(q[j] - i)\n            i += 1\n        else:\n            j += 1\n    return''.join(map(str, p))\n"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    P = [int(n) for n in stdin[2:].split(\" \")]\n    assert all(1 <= q < N for q in P)\n    return \" \".join(str(p) for p in permute(P))\n\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_perm(arr: List[int]) -> bool:\n        return len(arr) == len(set(arr)) and max(arr) == len(arr) - 1\n\n    n = int(stdin.readline())\n    perm = [int(x) for x in stdin.readline().split()]\n    arr = [int(x) for x in stdin.readline().split()]\n\n    for _ in range(n - 1):\n        arr2 = [perm[x] - perm[x - 1] for x in range(1, n)]\n        if is_perm(arr2):\n            for x in range(n - 1):\n                perm[x] = arr2[x] + perm[x]\n            break\n\n    print(*perm)"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    x = [int(x) for x in stdin.split(' ')]\n    x.sort()\n    n2 = n * 2\n    t = n2 - x[0]\n    for i in range(1, n):\n        if x[i] - x[i - 1] > 1:\n            t += 1\n        if x[i] - x[i - 1] > 2:\n            t += 2\n        if x[i] - x[i - 1] > 3:\n            t += 3\n    return t"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    chips = list(map(int, stdin.readline().strip().split()))\n\n    def get_next_x(current_x):\n        if current_x == 0:\n            return chips[1] - 2\n        elif current_x == len(chips) - 1:\n            return chips[len(chips) - 2] + 2\n        else:\n            return min(chips[current_x] + 2, chips[current_x - 1] + 2, chips[current_x + 1])\n\n    best = 0\n    for i in range(0, len(chips)):\n        if chips[i]!= get_next_x(i):\n            best = max(best, i + 1)\n    print(best)\n\nsolution(stdin)\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\n'''\n\nfrom sys import stdin, stdout\n\nn = int(stdin.readline())\nx = [int(stdin.readline()) for _ in range(n)]\n\nx_max = max(x)"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = [int(x) for x in stdin.readline().strip().split(\" \")]\n\n    cache = [0] * 101\n    for i in range(n):\n        cache[x[i]] += 1\n\n    ans = 0\n    for i in range(n):\n        ans += cache[i] * (cache[i] - 1) // 2\n        ans += cache[i] * (cache[i] - 1) // 2\n\n    print(ans)\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    coordinates = list(map(int, stdin.readline().strip().split()))\n\n    def distance(coordinate: int) -> int:\n        return abs(coordinate - coordinate % 2) + abs(coordinate // 2 - coordinate % 2)\n\n    return str(sum(distance(x) for x in coordinates))\n\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    result += str(n)\n    result += '\\n'\n    for line in stdin:\n        result += line\n        result += '\\n'\n    return result\nn = int(input())\nm = list(map(int, input().split()))\nprint(solution(str(n) + '\\n' +''.join(map(str, m))))\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    # make the chips\n    chips = [int(stdin.readline().strip()) for _ in range(n)]\n\n    # sort the chips\n    chips = sorted(chips)\n\n    # find the highest coordinate in the list\n    highest = chips[-1]\n\n    # find the lowest coordinate in the list\n    lowest = chips[0]\n\n    # get the difference between the highest and lowest\n    diff = highest - lowest\n\n    # get the number of moves\n    moves = diff // 2\n\n    # answer\n    answer = moves + 1\n\n    return str(answer)\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(x) for x in stdin.readline().split()]\n\n    left = [x[0]]\n    right = [x[1]]\n    for i in range(1, n):\n        if left[-1] - 2 >= 0 and right[-1] + 2 <= 10 ** 9:\n            left.append(left[-1] - 2)\n            right.append(right[-1] + 2)\n        elif left[-1] - 1 >= 0 and right[-1] + 1 <= 10 ** 9:\n            left.append(left[-1] - 1)\n            right.append(right[-1] + 1)\n        else:\n            return 'Impossible'\n\n    return str(min(len(left), len(right)))\n\nassert(solution('3\\n1 2 3') == '1')\nassert(solution('5\\n2 2 2 3 3') == '2')\n"
    },
    {
        "number": 4047,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = sorted(map(int, stdin.readline().split()))\n    return str(get_min_coins(n, x))\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    m = n // 2 + 1\n    if n % 2 == 0:\n        return str(m)\n    else:\n        return str(m) + '\\n' + str(m)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(bfs(int(stdin))))\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Sorry'"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    return ''\n\nassert(solution('') == '')\nassert(solution('1') == '')\nassert(solution('10') == '')\nassert(solution('1000') == '')\nassert(solution('10001') == '')\nassert(solution('100100') == '1')\nassert(solution('101011') == '1')\nassert(solution('101000') == '1')\nassert(solution('101010101') == '1')\nassert(solution('1010100011') == '1')\nassert(solution('1010101011') == '1')\nassert(solution('1010101101') == '1')\nassert(solution('1010101111') == '1')\nassert(solution('1010101101') == '1')\nassert(solution('1010101111') == '1')\nassert(solution('1010101011') == '1')\nassert(solution('1010101001') == '1')\nassert(solution('10101011010') == '1')\nassert(solution('101010110101010101') == '1')\nassert(solution('101010110101010010101') == '1')\nassert(solution('10101011010101101010101') == '1')\nassert(solutionn\n\"\"\"\n\nimport math\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    m = float('inf')\n    for i in range(1, N+1):\n        if i % 2!= 0:\n            m = min(m, i + i)\n    return str(m)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    l = []\n    for i in range(m):\n        l.append(i + 1)\n    l.append(0)\n\n    n = len(l)\n    m = len(l) - 1\n    s = [[0 for i in range(n)] for j in range(n)]\n    s[m][m] = 1\n\n    for i in range(m - 1, -1, -1):\n        for j in range(i + 1, n):\n            if l[i] == 0:\n                continue\n            elif l[j] == 0:\n                continue\n            elif j - i == 1:\n                s[i][j] = 1\n            else:\n                s[i][j] = s[i][j - 1] + s[i + 1][j - 1] + s[i + 1][j]\n\n    return str(s[0][m])"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4048,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 2 or a > 10**12:\n        return \"Invalid\"\n    return \"Invalid\" if a % 2 == 1 else a // 2 + 1\n\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    alice = [int(c) for c in stdin.readline().split()]\n    bob = [int(c) for c in stdin.readline().split()]\n    return''.join([str(a-b) for a,b in zip(alice, bob)])"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a1, a2, a3 = a\n    b1, b2, b3 = b\n    \n    a1_b1 = a1 + b1\n    a2_b2 = a2 + b2\n    a3_b3 = a3 + b3\n    if a1_b1 == n:\n        return str(n - a1) +'' + str(a1)\n    elif a2_b2 == n:\n        return str(n - a2) +'' + str(a2)\n    elif a3_b3 == n:\n        return str(n - a3) +'' + str(a3)\n    else:\n        return '0'\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    max_win_a = 0\n    max_win_b = 0\n\n    for i in range(n):\n        if a[i] > max_win_a:\n            max_win_a = a[i]\n        if b[i] > max_win_b:\n            max_win_b = b[i]\n    return str(max_win_a) +'' + str(max_win_b)"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alice_score = n\n    bob_score = n\n    for i in range(n):\n        a, b, c = [int(x) for x in stdin.split()]\n        alice_score = min(a, b, c, alice_score - a - b - c)\n        bob_score = max(a, b, c, bob_score - a - b - c)\n    return str(alice_score) + \" \" + str(bob_score)"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    if sum(a) == n:\n        if sum(b) == n:\n            return '0 0'\n        if sum(a) > sum(b):\n            return str(sum(a)) +'' + str(sum(a))\n        else:\n            return str(sum(b)) +'' + str(sum(b))\n    elif sum(b) == n:\n        if sum(a) == n:\n            return '0 0'\n        if sum(b) > sum(a):\n            return str(sum(b)) +'' + str(sum(b))\n        else:\n            return str(sum(a)) +'' + str(sum(a))\n    else:\n        if sum(a) > sum(b):\n            return str(sum(a)) +'' + str(sum(a))\n        else:\n            return str(sum(b)) +'' + str(sum(b))\nprint(solution(stdin))\n"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a_1, a_2, a_3 = map(int, stdin.readline().split())\n    b_1, b_2, b_3 = map(int, stdin.readline().split())\n    x = a_1 + a_2 + a_3\n    y = b_1 + b_2 + b_3\n    if x < n and y < n:\n        return''.join(str(i) for i in range(x, y + 1))\n    elif x < n and y >= n:\n        return''.join(str(i) for i in range(x, n))\n    elif x >= n and y < n:\n        return''.join(str(i) for i in range(0, y + 1))\n    else:\n        return''.join(str(i) for i in range(0, n))\n\nprint(solution(open('input.txt')))\n\"\"\"\n\nfrom __future__ import print_function\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_rounds = int(stdin.readline())\n    alice_num_rock, alice_num_paper, alice_num_scissors = map(int, stdin.readline().split())\n    bob_num_rock, bob_num_paper, bob_num_scissors = map(int, stdin.readline().split())\n\n    max_rounds = min(alice_num_rock, bob_num_rock) + min(alice_num_paper, bob_num_paper) + min(alice_num_scissors, bob_num_scissors)\n\n    return f'{max_rounds} {num_rounds - max_rounds}'"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    p = [0] * 3\n    a1, a2, a3 = a\n    b1, b2, b3 = b\n    if a1 + a2 + a3!= n:\n        return 'IMPOSSIBLE'\n    p[0] = min(a1, b1)\n    p[1] = min(a2, b2)\n    p[2] = min(a3, b3)\n    p[2] += p[0]\n    p[1] += p[2]\n    p[0] += p[1]\n    return''.join(map(str, p))\n    "
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a_sum, b_sum = 0, 0\n    for i in range(n):\n        a_sum += a[i]\n        b_sum += b[i]\n    a_min, a_max = 0, n\n    b_min, b_max = 0, n\n    if a_sum < b_sum:\n        a_min = a_sum\n        b_max = b_sum - a_sum\n    elif b_sum < a_sum:\n        a_max = a_sum - b_sum\n        b_min = b_sum\n    else:\n        a_max = a_sum - b_sum\n        b_min = b_sum - a_sum\n    return \"{} {}\".format(a_min, a_max)\n\nassert(solution(input()) == '0 1')\nassert(solution(input()) == '1 1')\nassert(solution(input()) == '0 15')\nassert(solution(input()) == '11 145 530')\nassert(solution(input()) == '119 226')\nassert(solution(input()) == '119 226')\nassert(solution(input()) == '22 334')\n\n'''\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    return''.join([str(a), str(n - a)])\n    return str(n - max(a, b)) +'' + str(max(a, b))\n\nTest.assert_equals(solution(\"5\"), \"0 2\")\nTest.assert_equals(solution(\"2\"), \"0 1\")\nTest.assert_equals(solution(\"15\"), \"0 15\")\nTest.assert_equals(solution(\"3\"), \"3 3\")\nTest.assert_equals(solution(\"686\"), \"3 26\")\nTest.assert_equals(solution(\"319\"), \"9 75\")\nTest.assert_equals(solution(\"1053 26 16 3\"), \"27 39\")\nTest.assert_equals(solution(\"9 275 4 58\"), \"0 0\")\nTest.assert_equals(solution(\"23 41 61\"), \"1 1\")\nTest.assert_equals(solution(\"121 90 112 141\"), \"1 2\")\nTest.assert_equals(solution(\"8 19 22 19\"), \"0 0\")\nTest.assert_equals(solution(\"11 16 12 17\"), \"1 1\")\nTest.assert_equals(solution(\"11 11 14 19\"), \"1 1\")\nTest.assert_equals(solution(\"9 1 22 22\"), \"0 0\")\nTest.assert_equals(solution(\"9 1 22 22\"), \"0 0\")\nTest.assert_equals(solution(\"7 7 4 4\"), \"0 0\")\nTest.assert_equals(solution(\"6 6 4 4\"), \"0 0\")\nTest.assert_equals(solution(\"5 5 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"3 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"10 60 57 57\"), \"0 0\")\nTest.assert_equals(solution(\"10 10 10 10\"), \"0 0\")\nTest.assert_equals(solution(\"7 19 22 19\"), \"0 0\")\nTest.assert_equals(solution(\"7 19 22 19\"), \"0 0\")\nTest.assert_equals(solution(\"7 7 4 4\"), \"0 0\")\nTest.assert_equals(solution(\"7 7 4 4\"), \"0 0\")\nTest.assert_equals(solution(\"7 7 4 4\"), \"0 0\")\nTest.assert_equals(solution(\"7 7 4 4\"), \"0 0\")\nTest.assert_equals(solution(\"6 6 4 4\"), \"0 0\")\nTest.assert_equals(solution(\"6 6 4 4\"), \"0 0\")\nTest.assert_equals(solution(\"6 6 4 4\"), \"0 0\")\nTest.assert_equals(solution(\"6 6 4 4\"), \"0 0\")\nTest.assert_equals(solution(\"5 5 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 5 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 5 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 5 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\"5 3 3 3\"), \"0 0\")\nTest.assert_equals(solution(\""
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def check(s: str) -> bool:\n        result = True\n        n = len(s)\n        for i in range(1, n):\n            if s[i-1] > s[i]:\n                result = False\n                break\n        return result\n\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    max_block_count = 0\n    curr_block_count = 0\n    curr_block = []\n\n    for i in range(n):\n        curr_block.append(a[i])\n        if not check(curr_block):\n            if len(curr_block) > max_block_count:\n                max_block_count = len(curr_block)\n            curr_block = []\n\n    if len(curr_block) > max_block_count:\n        max_block_count = len(curr_block)\n\n    result = \"\"\n    for i in range(max_block_count):\n        result += str(i) + \" \" + str(i+1) + \" \"\n    print(result)"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip().split(' ')\n    s.sort()\n    k = 0\n    s2 = []\n    for i in range(len(s)):\n        if i == 0:\n            s2.append([i, i])\n        elif i == len(s)-1:\n            s2.append([i-1, i])\n        elif i == len(s)//2:\n            s2.append([i-1, i])\n        else:\n            s2.append([i-1, i])\n    for i in range(len(s)):\n        for j in range(len(s2)):\n            if s2[j][1] - s2[j][0] == 1 and abs(s[i]-int(s[s2[j][0]])) < abs(s[i]-int(s[s2[j][1]])):\n                s2[j][0] = s2[j][0]\n                break\n            elif s2[j][1] - s2[j][0] == 1 and abs(s[i]-int(s[s2[j][0]])) > abs(s[i]-int(s[s2[j][1]])):\n                s2[j][1] = s2[j][1]\n                break\n    for i in s2:\n        k = k + 1\n        for j in range(i[0]+1, i[1]+1):\n            print(j, end=' ')\n    return k"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    left, right, max_left, max_right = 0, 0, 0, 0\n    for i in range(n):\n        if a[i] < 0:\n            if max_right < i:\n                max_right = i\n            if max_left < i:\n                max_left = i\n        else:\n            if max_left > i:\n                max_left = i\n            if max_right > i:\n                max_right = i\n\n    k = 0\n    if max_right < max_left:\n        if max_right!= 0:\n            k = 1\n        max_right = n\n        max_left = n\n    max_left = max(max_left - 1, 0)\n    max_right = min(max_right + 1, n)\n    ans = []\n    for i in range(max_left, max_right + 1):\n        ans.append((i, i))\n\n    print(k)\n    for i in range(max_left, max_right + 1):\n        print(ans[0][0], ans[i - max_left][1])\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    left = [0] * n\n    right = [0] * n\n    for i in range(n):\n        left[i] = i\n        right[i] = i\n    s = 0\n    for i in range(n):\n        s += a[i]\n    sorted = [(s, i) for i in range(n)]\n    sorted.sort()\n    sorted.reverse()\n    ans = 0\n    for x, i in sorted:\n        for j in range(i, n):\n            if left[i] == right[j]:\n                left[j] = j + 1\n                ans += 1\n    print(ans)\n    for i in range(n):\n        print(left[i], right[i])"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.rstrip('\\n').split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split(' ')))\n    k = 0\n    for i in range(1, n):\n        if a[i-1]!= a[i]:\n            k += 1\n    print(k)\n    for i in range(k):\n        l, r = map(int, lines[i*2+2].split(' '))\n        print(l, r)"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = [int(x) for x in lines[1].split()]\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == a[j] + a[i]:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n    m = len(a)\n    blocks = []\n    for i in range(m):\n        for j in range(i, m):\n            l = i\n            r = j\n            s = a[l] + a[r]\n            if s == a[l+1] + a[r+1] and l!= r:\n                blocks.append((l, r))\n    blocks.sort()\n    print(len(blocks))\n    for b in blocks:\n        print(b[0], b[1])\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n\n    m = int(math.ceil(math.log2(n)))\n\n    blocks = []\n    # for i in range(m + 1):\n    #     blocks.append((2 ** i - 1, 2 ** i - 1 + n - 1))\n\n    for i in range(m + 1):\n        blocks.append((2 ** i - 1, 2 ** i - 1 + n - 1))\n\n    # print(blocks)\n    c = 0\n    for l, r in blocks:\n        c += a[l:r].count(sum(a[l:r]))\n    return str(c)\n"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    r = 0\n    t = 0\n    cnt = 0\n    for i in range(n):\n        r = max(r, i+1)\n        while r < n and arr[i] == arr[r]:\n            r += 1\n            cnt += 1\n        t = max(t, r-i)\n        if cnt > 0:\n            print(i+1, r)\n            cnt = 0\n    return t"
    },
    {
        "number": 4050,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    h = []\n    for i in l:\n        heapq.heappush(h, i)\n    ans = []\n    while len(h) > 1:\n        ans.append(heapq.heappop(h))\n        if len(h) > 1:\n            ans.append(h[0]-heapq.heappop(h))\n        heapq.heappush(h, ans[-1])\n        heapq.heappush(h, ans[-1])\n    if h:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"\"\n    line = stdin.split()\n    a = list(map(int, line))\n    i = 0\n    max = 0\n    while i < n:\n        stack = []\n        count = 0\n        for j in range(n):\n            if a[j] > max:\n                max = a[j]\n            if a[j] == max:\n                count += 1\n        if count > 1:\n            a[n - count - 1] = max\n            a[n - count] = max + 1\n        stack.append(a[n - count - 1])\n        for j in range(n - count - 1, n - 1):\n            a[j] = a[j + 1] + 1\n        a[n - 1] = 0\n        i += 1\n    max = 0\n    for j in range(n):\n        if a[j] > max:\n            max = a[j]\n    for j in range(n):\n        if a[j] == max:\n            a[j] = max + 1\n    for i in range(n - 1):\n        if a[i] > a[i + 1]:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(\"\"\"4\n3 1 2\n\"\"\"))\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\"\n\nassert(solution('1\\n1') == 'YES')\nassert(solution('3\\n1 2 3') == 'YES')\nassert(solution('2\\n1 2') == 'NO')\nassert(solution('2\\n2 1') == 'NO')\nassert(solution('2\\n3 1') == 'NO')\nassert(solution('1\\n2') == 'NO')\nassert(solution('1\\n1') == 'YES')\nassert(solution('2\\n3 1 2') == 'NO')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('2\\n3 1 2') == 'NO')\nassert(solution('2\\n3 1 2') == 'NO')\nassert(solution('2\\n3 1 2') == 'NO')\nassert(solution('2\\n3 1 2') == 'NO')\nassert(solution('2\\n3 1 2') == 'NO')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n2') == 'NO')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n1') == 'YES')\nassert(solution('1\\n"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    arr = list(map(int, arr))\n    arr = sorted(arr)\n    if arr == list(range(1, n+1)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    array = stdin.split('\\n')[0]\n    array = [int(x) for x in array.split(' ')]\n    return 'YES' if is_sortable(array) else 'NO'\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n is the size of the array\n    arr = [int(x) for x in stdin.split()]\n    return \"YES\" if check_sort(arr) else \"NO\"\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(x) for x in stdin.readline().split()]\n    cnt = 0\n    m = 0\n    for i, val in enumerate(seq):\n        cnt += val\n        if cnt > m:\n            m = cnt\n        if cnt >= m + (i + 1) * 2:\n            cnt = 0\n\n    return \"YES\" if m == sum(seq) else \"NO\"\n\nassert(solution(\"\") == \"NO\")\nassert(solution(\"1 2 3\") == \"YES\")\nassert(solution(\"1 2 3 2\") == \"YES\")\nassert(solution(\"1 2 3 3\") == \"YES\")\nassert(solution(\"1 2 3 3 1\") == \"NO\")\nassert(solution(\"1 1 1 1\") == \"NO\")\nassert(solution(\"1 1 1 1 2\") == \"YES\")\nassert(solution(\"1 1 1 1 2 3\") == \"NO\")\nassert(solution(\"1 2 3\") == \"NO\")\nassert(solution(\"2 1 3\") == \"YES\")\nassert(solution(\"2 3 1\") == \"YES\")\nassert(solution(\"2 3 1 2\") == \"NO\")\nassert(solution(\"3 1 2 3\") == \"YES\")\nassert(solution(\"3 1 2 3 2\") == \"YES\")\nassert(solution(\"3 2 1 3\") == \"NO\")\nassert(solution(\"3 2 3 1\") == \"NO\")\nassert(solution(\"3 2 3 1 2\") == \"YES\")\nassert(solution(\"3 3 1 2 3\") == \"NO\")\nassert(solution(\"3 3 1 2 3 1\") == \"YES\")\nassert(solution(\"1 2 3 4\") == \"NO\")\nassert(solution(\"1 2 3 4 1\") == \"YES\")\nassert(solution(\"3 4 1 2 3\") == \"YES\")\nassert(solution(\"4 1 2 3 3\") == \"YES\")\nassert(solution(\"1 1 1 1 1\") == \"YES\")\nassert(solution(\"3 3 3 3 3 3 3 3\") == \"YES\")\nassert(solution
    },
    {
        "number": 4051,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    if not n:\n        return \"\"\n    n = int(n)\n    if n < 1 or n > 10:\n        return \"\"\n\n    a = list(map(int, stdin.readline().strip().split()))\n    if len(a)!= n:\n        return \"\"\n\n    arr = []\n    for i in range(0, n):\n        arr.append([])\n\n    for i in range(0, n):\n        arr[i] = [a[i]]\n\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            arr[j].append(a[j])\n\n    height = 0\n    for i in range(0, n):\n        if len(arr[i]) > height:\n            height = len(arr[i])\n\n    if height == 0:\n        return \"NO\"\n\n    arr = sorted(arr, key=len, reverse=True)\n    arr = sorted(arr, key=lambda x: len(x))\n\n    out = \"\"\n    for i in range(0, n):\n        out += \" \".join(map(str, arr[i])) + \"\\n\"\n\n    return out\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if s == t:\n        print(0)\n        return ''\n    if s == '' or t == '':\n        return '-1'\n    s_len = len(s)\n    t_len = len(t)\n    if t_len > s_len:\n        return '-1'\n    table = [[0] * (s_len + 1) for i in range(t_len + 1)]\n    table[0][0] = 1\n    for i in range(1, t_len + 1):\n        if s[i - 1]!= t[i - 1]:\n            table[i][0] = table[i - 1][0]\n            continue\n        if i == 1:\n            table[i][0] = table[i - 1][0] + 1\n            continue\n        table[i][0] = table[i - 1][0] + 1\n        for j in range(1, s_len + 1):\n            if s[j - 1]!= t[i - 1]:\n                table[i][j] = table[i - 1][j]\n                continue\n            if j == 1:\n                table[i][j] = table[i - 1][j] + 1\n                continue\n            table[i][j] = table[i - 1][j] + 1\n            if s[j - 1] == t[i - 1]:\n                table[i][j] = min(table[i][j], table[i - 1][j - 1])\n    print(table[t_len][s_len])\n    path = []\n    i = t_len\n    j = s_len\n    while i > 0:\n        if s[j - 1]!= t[i - 1]:\n            i -= 1\n            j -= 1\n            continue\n        if i == 1:\n            path.append(j)\n            j -= 1\n            i -= 1\n            continue\n        if table[i - 1][j - 1] < table[i][j]:\n            path.append(j)\n            j -= 1\n            i -= 1\n            continue\n        path.append(j)\n        j -= 1\n        i -= 1\n    path.append(0)\n    path.reverse()\n    print(' '.join([str(i) for i in path]))\n    return ''"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if s == t:\n        print(0)\n        return\n    if len(s)!= len(t):\n        print(-1)\n        return\n    a = [0] * len(s)\n    for i in range(1, len(s)):\n        if s[i]!= t[i]:\n            a[i] = i\n    print(len(a))\n    for i in a:\n        print(i, end=\" \")"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if n > len(s) or n > len(t):\n        return '-1'\n    moves = 0\n    i = 0\n    while i < len(s):\n        j = 0\n        while j < len(t) - 1:\n            if s[i] == t[j]:\n                moves += 1\n                i += 1\n                t = t[:j] + t[j+1:]\n                break\n            j += 1\n    return str(moves) +'' +''.join(str(x) for x in s)\n\nimport sys\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # T=0\n    # T=1\n    # T=2\n    # T=3\n    # T=4\n    # T=5\n    # T=6\n    # T=7\n    # T=8\n    # T=9\n    # T=10\n    # T=11\n    # T=12\n    # T=13\n    # T=14\n    # T=15\n    # T=16\n    # T=17\n    # T=18\n    # T=19\n    # T=20\n    # T=21\n    # T=22\n    # T=23\n    # T=24\n    # T=25\n    # T=26\n    # T=27\n    # T=28\n    # T=29\n    # T=30\n    # T=31\n    # T=32\n    # T=33\n    # T=34\n    # T=35\n    # T=36\n    # T=37\n    # T=38\n    # T=39\n    # T=40\n    # T=41\n    # T=42\n    # T=43\n    # T=44\n    # T=45\n    # T=46\n    # T=47\n    # T=48\n    # T=49\n    # T=50\n    # T=51\n    # T=52\n    # T=53\n    # T=54\n    # T=55\n    # T=56\n    # T=57\n    # T=58\n    # T=59\n    # T=60\n    # T=61\n    # T=62\n    # T=63\n    # T=64\n    # T=65\n    # T=66\n    # T=67\n    # T=68\n    # T=69\n    # T=70\n    # T=71\n    # T=72\n    # T=73\n    # T=74\n    # T=75\n    # T=76\n    # T=77\n    # T=78\n    # T=79\n    # T=80\n    # T=81\n    # T=82\n    # T=83\n    # T=84\n    # T=85\n    # T=86\n    # T=87\n    # T=88\n    # T=89\n    # T=90\n    # T=91\n    # T=92\n    # T=93\n    # T=94\n    # T=95\n    # T=96\n    # T=97\n    # T=98\n    # T=99\n    # T=100\n    # T=101\n    # T=102\n    # T=103\n    # T=104\n    # T=105\n    # T=106\n    # T=107\n    # T=108\n    # T=109\n    # T=110\n    # T=111\n    # T=112\n    # T=113\n    # T=114\n    # T=115\n    # T=116\n    # T=117\n    # T=118\n    # T=119\n    # T=120\n    # T=121\n    # T=122\n    # T=123\n    # T=124\n    # T=125\n    # T=126\n    # T=127\n    # T=128\n    # T=129\n    # T=130\n    # T=131\n    # T=132\n    # T=133\n    # T=134\n    # T=135\n    # T=136\n    # T=137\n    # T=138\n    # T=139\n    # T=140\n    # T=141\n    # T=142\n    # T=143\n    # T=144\n    # T=145\n    # T=146\n    # T=147\n    # T=148\n    # T=149\n    # T=150\n    # T=151\n    # T=152\n    # T=153\n    # T=154\n    # T=155\n    # T=156\n    # T=157\n    # T=158\n    # T=159\n    # T=160\n    # T=161\n    # T=162\n    # T=163\n    # T=164\n    # T=165\n    # T=166\n    # T=167\n    # T=168\n    # T=169\n    # T=170\n    # T=171\n    # T=172\n    # T=173\n    # T=174\n    # T=175\n    # T=176\n    # T=177\n    # T=178\n    # T=179\n    # T=180\n    # T=181\n    # T=182\n    # T=183\n    # T=184\n    # T=185\n    # T=186\n    # T=187\n    # T=188\n    # T=189\n    # T=190\n    # T=191\n    # T=192\n    # T=193\n    # T=194\n    # T=195\n    # T=196\n    # T=197\n    # T=198\n    # T=199\n    # T=200\n    # T=201\n    # T=202\n    # T=203\n    # T=204\n    # T=205\n    # T=206\n    # T=207\n    # T=208\n    # T=209\n    # T=210\n    # T=211\n    # T=212\n    # T=213\n    # T=214\n    # T=215\n    # T=216\n    # T=217\n    # T=218\n    # T=219\n    # T=220\n    # T=221\n    # T=222\n    # T=223\n    # T=224\n    # T=225\n    # T=226\n    # T=227\n    # T=228\n    # T=229\n    # T=230\n    # T=231\n    # T=232\n    # T=233\n    # T=234\n    # T"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n + 1]\n    t = stdin[n + 2:2 * n + 2]\n\n    k = 0\n    while True:\n        k += 1\n        swaps = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                if s[i]!= t[j]:\n                    tmp = s[i]\n                    s[i] = s[j]\n                    s[j] = tmp\n                    swaps.append((i, j))\n        if len(swaps) == 0:\n            return str(k)\n        print(swaps)\n        if len(swaps) > 10:\n            return \"-1\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    \n    if len(s)!= len(t):\n        return '-1'\n    \n    def next_char(s, i):\n        return s[i + 1] if i < len(s) - 1 else -1\n    \n    def swap(s, i, j):\n        tmp = s[i]\n        s[i] = s[j]\n        s[j] = tmp\n    \n    visited = [False] * n\n    moves = 0\n    \n    while not all(visited):\n        if s == t:\n            return str(moves)\n        \n        for i in range(n):\n            if not visited[i] and s[i]!= t[i]:\n                visited[i] = True\n                swap(s, i, next_char(s, i))\n                moves += 1\n                break\n        \n    return str(0)"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if s == t:\n        print(0)\n        return\n    if len(s) == 0:\n        print(0)\n        return\n    if len(t) == 0:\n        print(len(s) + 1)\n        return\n\n    if len(t) < len(s):\n        print(-1)\n        return\n\n    if len(t) > len(s):\n        s, t = t, s\n\n    used = [False] * len(s)\n\n    def dfs(i: int, count: int) -> bool:\n        if count >= 10**4:\n            return False\n        if i == len(s):\n            return count == len(t)\n        if s[i] == t[i]:\n            return dfs(i + 1, count)\n        for j in range(i, len(s)):\n            if not used[j]:\n                used[j] = True\n                if s[j] == t[i]:\n                    if dfs(j + 1, count + 1):\n                        return True\n                used[j] = False\n        return False\n\n    return str(dfs(0, 0))\n\n\nassert solution('''\n6\nabcdef\nabdfec\n\n''') == '4'\nassert solution('''\n4\nabcd\naccd\n\n''') == '-1'\nassert solution('''\n4\nabcd\nacdc\n\n''') == '-1'\nassert solution('''\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n''') == '28'\nassert solution('''\n6\nabcd\nabdc\n\n''') == '5'\nassert solution('''\n4\nabcd\nacdc\n\n''') == '0'\nassert solution('''\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n''') == '27'\nassert solution('''\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n''') == '30'\nassert solution('''\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n''') == '39'\nassert solution('''\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n"
    },
    {
        "number": 4052,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if s == t:\n        return 0\n    c = [0] * n\n    for i in range(n):\n        if s[i]!= t[i]:\n            if s[i + 1] == t[i]:\n                c[i] += 1\n            else:\n                c[i] += 2\n    return c\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    if length <= 0:\n        return \"\"\n    elif length == 1:\n        return \"S\"\n    elif length == 2:\n        return \"P\" * 2\n    else:\n        half_length = length // 2\n        for i in range(1, half_length + 1):\n            if i == 1:\n                if length % i == 0:\n                    if length // i == 2:\n                        return \"P\" * i + \"S\"\n                    else:\n                        return \"SP\" + \"P\" * (length // i) + \"S\"\n            else:\n                for j in range(1, i + 1):\n                    if i % j == 0 and j == 1:\n                        if length % i == 0:\n                            return \"P\" * j + \"S\"\n                    elif i % j == 0 and j!= 1:\n                        return \"P\" * j + \"S\" + \"P\" * (i // j) + \"S\""
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [stdin]\n    for _ in range(n - 1):\n        l.append(stdin[1:])\n        stdin = stdin[1:] + stdin[0]\n    l.append(stdin[1:])\n\n    s = l[0]\n    for i in range(len(l) - 1):\n        if s[:len(l[i])]!= l[i] or s[-len(l[i]):]!= l[i + 1]:\n            print('SP')\n            return\n    print('PPSSPS')\n    return\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... ba\n   ... a\n   ... abab\n   ... a\n   ... aba\n   ... baba\n   ... ab\n   ... aba\n   ... ''')\n    'SPPSPSPS'\n\n    >>> solution('''3\n   ... a\n   ... aa\n   ... a\n   ... ''')\n    'PPSS'\n\n    >>> solution('''2\n   ... a\n   ... c\n   ... ''')\n    'PS'\n\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    ps = set()\n    for i in range(n - 1, 2 * n - 1):\n        ps.add(stdin.readline().strip())\n    ps = list(ps)\n    ps.sort()\n    for i in range(n - 1, 2 * n - 1):\n        for j in range(i + 1, 2 * n - 1):\n            if ps[i][:n - 1] == ps[j][:n - 1] and ps[i][-1 * n:] == ps[j][-1 * n:]:\n                print(ps[i][0] + ps[i][-1], end='')\n                break\n        else:\n            print('P', end='')\n    print()\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    guessed_str = stdin.rstrip()\n    n = len(guessed_str)\n    guessed_str_list = [0 for _ in range(n)]\n    while True:\n        stdin = stdin.rstrip()\n        guessed_str_list[0] = 'P'\n        for index, value in enumerate(guessed_str):\n            if index == 0:\n                if value == 'a':\n                    guessed_str_list[index] = 'S'\n                else:\n                    guessed_str_list[index] = 'P'\n            else:\n                if value == 'a' and guessed_str[index-1] == 'a':\n                    guessed_str_list[index] = 'P'\n                elif value == 'a' and guessed_str[index-1] == 'b':\n                    guessed_str_list[index] = 'S'\n                else:\n                    guessed_str_list[index] = 'P'\n        print(''.join(guessed_str_list))\n        stdin = stdin.rstrip()\n        if not stdin:\n            break"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    ans = \"\"\n    for i in range(2 * n - 2):\n        if s[i].count(\"P\") == s[i].count(\"S\"):\n            ans += \"P\"\n        else:\n            ans += \"S\"\n    return ans"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    n = len(s)\n    # Answer string\n    answer = 'P' * n\n    # Length of answer string\n    l = len(answer)\n    # Length of prefixes\n    p = 2 * (l - 1)\n    # Length of suffixes\n    s = 2 * l - 2\n    # Loop over all possible lengths of prefixes and suffixes\n    for i in range(1, l):\n        # Generate all possible prefixes of length i\n        for prefix in itertools.product(s, repeat=i):\n            # If the generated prefix is shorter than s, add 'S' to answer\n            if len(''.join(prefix)) < s:\n                answer = 'S' * s\n                break\n            # Check if the given prefix is the prefix of s\n            if ''.join(prefix) == s[:len(''.join(prefix))]:\n                # Generate all possible suffixes of length i-1\n                for suffix in itertools.product(s, repeat=i-1):\n                    # Add 'P' to answer\n                    answer += 'P'\n                    # If the generated suffix is longer than p, remove 'P' from answer\n                    if len(''.join(suffix)) > p:\n                        answer = answer[:-1]\n    return answer"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    r = 'P'\n    for line in stdin[1:]:\n        p = line[0]\n        if p == s[0]:\n            r = 'S' + r\n            s = s[1:]\n        else:\n            r = 'P' + r\n            s = line\n    return r\n\nprint(solution(input()))\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    pre = stdin[0:n-1]\n    suf = stdin[1:n]\n    \n    res = ['P'] * n\n    \n    for i in range(1, n):\n        res[i] = 'S' if pre[0:i] == suf[0:i] else 'P'\n    \n    return ''.join(res)\n    \n    \n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    n = int(s)\n    a = stdin.split()[1]\n    for i in range(2, len(stdin) - 2):\n        if stdin.count(stdin[i - 1:i + 2]) == 1:\n            b = stdin[i - 1:i + 2]\n            if a.startswith(b) and a.endswith(b):\n                print(b)\n"
    },
    {
        "number": 4053,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\"\"\"\nfrom string import ascii_lowercase as lc\nfrom itertools import product\nfrom typing import Set\n\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split(\" \")))\n    return str(l.count(max(l)))\n\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"2\")\nassert(solution(stdin) == \"4\")\n\"\"\"\nfrom sys import stdin\nnums = stdin.readline().split()\nfor i in range(0, len(nums)):\n    nums[i] = int(nums[i])\nprint(nums.count(max(nums)))\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split(\" \")))\n    s = sum(A)\n    for i in range(N):\n        for j in range(i + 1, N):\n            s -= A[i] * A[j]\n    return str(s)\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    a = [int(x) for x in s]\n    a.sort(reverse=True)\n    a = list(reversed(a))\n    a = [str(x) for x in a]\n    a = \"\".join(a)\n    return a"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().split(' ')\n    n = int(a[0])\n    a = [int(x) for x in a[1:]]\n\n    def rec(a, depth):\n        if depth == len(a) - 1:\n            return max(a)\n\n        res = 0\n        for i in range(depth, len(a)):\n            res = max(res, a[i] + rec(a, i + 1))\n        return res\n\n    return str(rec(a, 0))"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    array = [int(x) for x in stdin.split()]\n    return str(sum(array))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split(' ')\n    max_count = max([numbers.count(x) for x in numbers])\n    return str(max_count)"
    },
    {
        "number": 4054,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split(' ')))\n    k = 0\n    for i in range(1, n):\n        if l[i-1] == 1 and l[i+1] == 1:\n            continue\n        if l[i-1] == 0 and l[i+1] == 0:\n            k += 1\n    return k\n\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(solution(''))\nprint(s"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    c = 0\n    for i in range(1, n - 1):\n        if nums[i - 1] == 0 and nums[i] == 0 and nums[i + 1] == 0:\n            c += 1\n    return c\n\nassert(solution(\"\") == 0)\nassert(solution(\"3\") == 0)\nassert(solution(\"3 4 4 3\") == 0)\nassert(solution(\"3 4 4 3 3\") == 0)\nassert(solution(\"2 3 3 3 4\") == 0)\nassert(solution(\"2 3 3 3 4 3\") == 0)\nassert(solution(\"2 3 3 3 3\") == 2)\nassert(solution(\"1 1 1 1 1\") == 0)\nassert(solution(\"1 1 1 1 0\") == 1)\nassert(solution(\"1 1 1 0 0\") == 0)\nassert(solution(\"1 1 1 0 1\") == 0)\nassert(solution(\"1 1 1 1 1 1 1\") == 1)\nassert(solution(\"1 1 1 1 1 1 1 1 1\") == 2)\nassert(solution(\"1 1 1 1 1 1 1 1 1 1\") == 3)\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1\") == 4)\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1\") == 5)\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == 6)\nassert(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == 7)\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split(\" \")\n    light = [0] * n\n    for i in range(n):\n        if a[i] == \"1\":\n            light[i] = 1\n    for i in range(n):\n        if a[i] == \"0\" and light[i - 1] == 1 and light[i + 1] == 1:\n            light[i] = 1\n\n    if sum(light) < n:\n        return \"0\"\n\n    k = 1\n    while True:\n        if sum(light[:k]) == sum(light[k:]):\n            return str(k)\n        k += 1\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(x) for x in stdin.readline().split()]\n    a = seq[:]\n    s = [0] * (n - 1)\n    c = 1\n    for i in range(n - 1):\n        if a[i] == 1:\n            if a[i + 1] == 1:\n                s[i] = c\n                c += 1\n    m = s[0]\n    for i in range(n - 1):\n        if s[i] > m:\n            m = s[i]\n    return str(m)\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(x):\n        nonlocal answer\n        if x == len(floors) - 1:\n            answer = min(answer, abs(floors[x] - floors[0]))\n            return\n\n        if floors[x] == floors[x + 1]:\n            dfs(x + 2)\n\n        if floors[x] == floors[x - 1]:\n            dfs(x - 2)\n\n    n = int(stdin.readline().strip())\n    floors = list(map(int, stdin.readline().strip().split()))\n\n    answer = n\n    dfs(1)\n\n    return str(answer)\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    m = 0\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        if a[i - 1] == 1 and a[i + 1] == 1 and i > 1:\n            m += 1\n    return str(m)"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    for i in range(1, n):\n        if a[i - 1] == a[i] == 1:\n            k += 1\n    return k"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    from collections import defaultdict\n    d = defaultdict(int)\n    for i in range(n):\n        if a[i] == 1:\n            d[i - 1] += 1\n            d[i + 1] += 1\n    l = sorted(d.items(), key=lambda x: x[1])\n    k = 0\n    for i in l:\n        k = max(k, i[1])\n    return str(k)\n\nassert(solution('''\n10\n1 1 0 1 1 0 1 0 1 0\n''') == '2')\nassert(solution('''\n5\n1 1 0 0 0\n''') == '0')\nassert(solution('''\n4\n1 1 1 1\n''') == '0')\nassert(solution('''\n4\n1 1 1 1\n''') == '0')\nassert(solution('''\n2\n1 1\n''') == '0')\nassert(solution('''\n2\n0 1\n''') == '1')\nassert(solution('''\n10\n1 1 0 1 1 0 1 0 1 0\n''') == '2')\n'''\n"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4055,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        if a % b == 0:\n            return b\n        return gcd(b, a % b)\n\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    result = 0\n    for el in arr:\n        result += gcd(el, arr[0])\n    print(result)"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    total = 1\n    for x in a:\n        total *= gcd(x, total)\n    return str(total)\n\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, n):\n        for j in range(1, n):\n            if a[i] % a[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n\n    a_len = len(a)\n\n    factors = [0] * a_len\n    for i in range(a_len):\n        for j in range(1, a[i]):\n            if a[i] % j == 0:\n                factors[i] += 1\n\n    divisors = sum(factors)\n\n    return str(divisors)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(1, n + 1):\n        if all(i % x == 0 for x in a):\n            count += 1\n    return count\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(\" \")]\n\n    divisors = 1\n    for x in a:\n        divisors *= x\n\n    divisors //= gcd(a)\n\n    return str(divisors)\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    res = 1\n    divisor = 1\n    while divisor < n:\n        res += 1\n        divisor = 1\n        for i in range(len(a)):\n            if a[i] % divisor == 0:\n                divisor *= a[i]\n    return str(res)\n\nprint(solution(''))\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, n):\n        if all(i % x == 0 for x in l):\n            count += 1\n    return str(count)\n\nassert(solution('''5''') == '1')\nassert(solution('''6''') == '4')\nprint(solution('''1'''))\nprint(solution('''6'''))\nprint(solution('''10'''))\nprint(solution('''100'''))\nprint(solution('''1000'''))\nprint(solution('''10000'''))\nprint(solution('''100000'''))\nprint(solution('''1000000'''))\nprint(solution('''10000000'''))\nprint(solution('''100000000'''))\nprint(solution('''1000000001'''))\n"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] % n == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4056,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(len(list(filter(lambda x: len(list(filter(lambda y: y % x == 0, a))))) or '0'))\n\nassert solution('5\\n1 2 3 4 5\\n') == '1'\nassert solution('6\\n6 90 12 18 30 18\\n') == '4'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_coins = int(stdin.readline().strip())\n    coins = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    coins_dict = {}\n    for i in coins:\n        if i not in coins_dict.keys():\n            coins_dict[i] = 1\n        else:\n            coins_dict[i] += 1\n\n    sorted_coins_dict = sorted(coins_dict.items(), key=lambda x: x[1])\n    result = sorted_coins_dict[0][1]\n    for i in range(1, len(sorted_coins_dict)):\n        result += sorted_coins_dict[i][1]\n    return str(result)"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coins = list(map(int, stdin.readline().split()))\n    return str(min(len(set(coins)), len(coins)))"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    d = {a[i]: i + 1 for i in range(n)}\n\n    a.sort()\n    s = 0\n    for i in range(n):\n        s += d[a[i]]\n\n    return s\n\nassert(solution('''6\n1 2 4 3 3 2''') == 2)\nassert(solution('''1\n100''') == 1)\nassert(solution('''6\n1 2 4 3 3 2''') == 2)\nassert(solution('''10\n1 2 4 3 3 2''') == 3)\nassert(solution('''100''') == 1)\nassert(solution('''10\n1 2 4 3 3 2''') == 3)\nassert(solution('''500''') == 5)\nassert(solution('''10\n1 2 4 3 3 2''') == 3)\nassert(solution('''1000''') == 10)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert(solution('''100\n1 2 4 3 3 2''') == 3)\nassert"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    l.sort()\n    dp = [1] * (n + 1)\n    for i in range(1, n):\n        for j in range(0, i):\n            if l[i]!= l[j] and dp[i] > dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return str(max(dp))\n"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    a.sort()\n    min_n = min_p = 0\n    for i in range(n):\n        if i == 0 or a[i]!= a[i - 1]:\n            min_p += 1\n        else:\n            if min_n < min_p:\n                min_n = min_p\n            min_p += 1\n    if min_n < min_p:\n        min_n = min_p\n    return str(min_n)"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    # best number of pockets\n    # we can use 1,2,3,4,5 coins in max(arr) number of pockets\n    # and we can use 1,2,3,4,5 coins in 1 tablet\n    # and 1,2,3,4,5 coins in 2 tablets\n    # so we can use 1 tablet of 1,2,3,4,5 coins for max(arr) number of pockets\n    # and 2 tablets of 1,2,3,4,5 coins for 1 tablet\n    # best number of pockets = 2*max(arr)\n    # we can use 1,2,3,4,5 coins in 1 tablet\n    # and 1,2,3,4,5 coins in 2 tablets\n    # so we can use 1 tablet of 1,2,3,4,5 coins for max(arr) number of pockets\n    # and 2 tablets of 1,2,3,4,5 coins for 1 tablet\n    # so best number of pockets = max(arr)*2\n    # and we can use 1 tablet of 1,2,3,4,5 coins in max(arr) number of pockets\n    # and 2 tablets of 1,2,3,4,5 coins in max(arr) number of pockets\n    # so best number of pockets = max(arr)*2*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)*max(arr)\n    # so best number of pockets = max(arr)*(max(arr)+1)*max(arr)*max(arr)*max(arr)*max(arr)*"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # order the array a\n    a.sort()\n\n    # check for duplicates\n    b = []\n    for i in range(n):\n        if a[i] not in b:\n            b.append(a[i])\n        else:\n            return 0\n    return 1"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    counter = [0] * 101\n    counter[0] = 1\n    counter[1] = 1\n    for coin in a:\n        counter[coin] += 1\n    print(min(counter))"
    },
    {
        "number": 4057,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    x = 1\n    while x < n:\n        if a[x] == a[x-1]:\n            x += 1\n        else:\n            break\n    else:\n        return n\n\n    l = []\n    for i in range(n):\n        if a[i]!= a[i-1]:\n            l.append(a[i])\n    l.sort()\n    return len(l)\n\nassert(solution(stdin) == 2)\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    start = 0\n    end = n - 1\n    result = 0\n    while start <= end:\n        mid = (start + end) // 2\n        if a[mid] == 1:\n            start = mid + 1\n            result += 1\n        else:\n            end = mid - 1\n    if result < k:\n        return \"-1\"\n    return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read integers and r\n    n, r = map(int, stdin.readline().strip().split())\n    # Read the house array\n    house = list(map(int, stdin.readline().strip().split()))\n\n    # Start at the left\n    left = 0\n    # Start at the right\n    right = n - 1\n    # Min heaters\n    min_heaters = 0\n\n    # Loop backwards until we run out of heaters\n    while True:\n        # If the left heater is on, decrease left\n        if house[left]:\n            left -= 1\n        # If the right heater is on, increase right\n        elif house[right]:\n            right += 1\n        # If there are no heaters, there's no need to swap\n        else:\n            break\n        # Increase min_heaters\n        min_heaters += 1\n\n    # Return the min_heaters\n    return min_heaters\n\n\nprint(solution(\"\"))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split(\" \")]\n    n = data[0]\n    r = data[1]\n    a = [int(x) for x in stdin.split(\" \")]\n    print(a)\n    def get_pos(num, arr):\n        for i in range(len(arr)):\n            if arr[i] == num:\n                return i\n    \n    if r > n:\n        return -1\n    \n    left, right = 0, n-1\n    answer = 0\n    \n    while left <= right:\n        mid = (left+right)//2\n        current_pos = get_pos(mid, a)\n        \n        if current_pos + r < n:\n            left = mid + 1\n            answer = mid + 1\n        elif current_pos - r >= 0:\n            right = mid - 1\n        else:\n            break\n    \n    return answer\nprint(solution(input()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    array = [int(x) for x in stdin.strip().split(' ')]\n    n, r = array[0], array[1]\n    h = [0 for x in range(n)]\n    for i in array[2:]:\n        h[i-1] += 1\n    total = 0\n    for i in range(n):\n        total += (i+1)*(h[i] if h[i] > r else r)\n    if total <= n*r:\n        return str(0)\n    else:\n        return str(-1)\n\nn, r = input().split(' ')\nn = int(n)\nr = int(r)\na = [int(x) for x in input().split(' ')]\nprint(solution(a))\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k < 1 or k > n:\n        return -1\n    a = [int(x) for x in stdin.split()]\n    if k == 1:\n        return n\n    pos = -1\n    res = 0\n    for i in range(n):\n        if a[i] == 1:\n            pos = i\n            break\n    if pos == -1:\n        return -1\n    while pos < n:\n        res += 1\n        for j in range(pos - k + 1, pos + k - 1):\n            if j < 0 or j >= n:\n                continue\n            if a[j] == 0:\n                a[j] = 1\n                res += 1\n        pos += 1\n    return res\n\nassert(solution(\"6 2\\n0 1 1 0 0 1\") == 3)\nassert(solution(\"5 3\\n1 0 0 0 1\") == 2)\nassert(solution(\"5 10\\n0 0 0 0 0\") == -1)\nassert(solution(\"10 3\\n0 0 1 1 0 1 0 0 0 1\") == 3)\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    if n == 0:\n        return -1\n    house = [int(x) for x in stdin.split()]\n    res = 1\n    heaters = 1\n    for i in range(1, n):\n        if house[i] == 1:\n            res = max(res, i - r + 1)\n        else:\n            res = max(res, i - r + 1)\n            if res == i:\n                res += 1\n            if res == n:\n                return -1\n    return res\n\n\n-----\n\nThere are no heaters so the answer is -1.\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    f = [1] * n\n    for i in range(r):\n        f[i] = min(f[i], min(i + lst[i], n - i))\n        f[n - i - 1] = min(f[n - i - 1], min(n - i - 1 + lst[n - i - 1], i + lst[n - i - 1]))\n    ans = n - max(f)\n    return str(ans if ans > 0 else -1)"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    if n < k:\n        return '-1'\n\n    a = [int(x) for x in stdin.split()]\n\n    left = 0\n    right = n - 1\n    heaters = 0\n    while left <= right:\n        mid = (left + right) // 2\n\n        if a[mid] == 1:\n            if mid - k >= 0 and a[mid - k] == 0:\n                mid -= k\n            if mid + k <= n - 1 and a[mid + k] == 0:\n                mid += k\n            heaters += 1\n        else:\n            if mid - k >= 0 and a[mid - k] == 1:\n                mid -= k\n            if mid + k <= n - 1 and a[mid + k] == 1:\n                mid += k\n            heaters += 1\n\n        if mid == 0:\n            left = mid + 1\n        elif mid == n - 1:\n            right = mid - 1\n        else:\n            left = mid + 1\n            right = mid - 1\n\n    return str(heaters)\n"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n\n    a = [int(i) for i in stdin.split()]\n\n    h = [0 for _ in range(n)]\n\n    for i in range(n):\n        for j in range(max(0, i - k + 1), i + k):\n            if j < 0 or j >= n:\n                continue\n            h[i] += 1\n            h[j] -= 1\n    print(max(h) if sum(h) >= 0 else -1)\n\n\n-----\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    lines = list(map(int, stdin.splitlines()))\n    n, r = lines[0:2]\n    a = lines[2:2 + n]\n    print(f'{solution()}')\n    return 'Impossible'\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(get_all_triplets(int(stdin))))\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(int(N * (N - 1) * (N - 2) / 6))"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for a in range(1, n//2 + 1):\n        for b in range(1, n//2 + 1):\n            if a * b + b == n:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_n = int(stdin)\n    result = 0\n    for i in range(1, num_n + 1):\n        for j in range(1, num_n + 1):\n            if i * j == num_n:\n                result += 1\n    return result\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    tuples = 0\n    for a in range(2, N + 1):\n        for b in range(1, N + 1):\n            if a * b + b == N:\n                tuples += 1\n    return str(tuples)\n"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len(get_combos(n)))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Number of tuples that satisfy A \\times B + C = n\n    # One tuple can be made with n / 2 numbers\n    # n / 2 numbers can be made using combinations of n - n / 2.\n    # There are n / 2 choose n / 2,\n    # = n choose n / 2 = n(n-1) / 2 = n(n-1) / 2\n    # The number of tuples that satisfy this is:\n    # n choose n / 2 = n(n-1) / 2 choose n / 2 = n(n-1) / 2 choose n / 2\n    # = n(n-1) / 2 choose n / 2 choose n / 2 = n(n-1) / 6\n    # = n(n-1) / 6 choose n / 2 = n / 6 choose n / 2\n    # = n / 6 choose n / 2 = n choose n / 6\n    # = n / 6 choose n / 6 = 1\n    return str(int(n / 6) * (n / 6) * 6)\n\nassert(solution('3') == '3')\nassert(solution('6') == '1')\nassert(solution('1') == '0')\nassert(solution('2') == '0')\nassert(solution('5') == '1')\nassert(solution('15') == '4')\nassert(solution('20') == '7')\nassert(solution('30') == '9')\nassert(solution('40') == '12')\nassert(solution('50') == '16')\nassert(solution('100') == '64')\nassert(solution('200') == '146')\nassert(solution('300') == '246')\nassert(solution('400') == '280')\nassert(solution('500') == '292')\nassert(solution('600') == '292')\nassert(solution('700') == '286')\nassert(solution('800') == '268')\nassert(solution('900') == '264')\nassert(solution('1000') == '256')\nassert(solution('1100') == '244')\nassert(solution('1200') == '240')\nassert(solution('1300') == '236')\nassert(solution('1400') == '232')\nassert(solution('1500') == '228')\nassert(solution('1600') == '224')\nassert(solution('1700') == '220')\nassert(solution('1800') == '216')\nassert(solution('1900') == '212')\nassert(solution('2000') == '208')\nassert(solution('2100') == '204')\nassert(solution('2200') == '200')\nassert(solution('2300') == '196')\nassert(solution('2400') == '192')\nassert(solution('2500') == '188')\nassert(solution('2600') == '184')\nassert(solution('2700') == '180')\nassert(solution('2800') == '176')\nassert(solution('2900') == '172')\nassert(solution('3000') == '168')\nassert(solution('3100') == '164')\nassert(solution('3200') == '160')\nassert(solution('3300') == '156')\nassert(solution('3400') == '152')\nassert(solution('3500') == '148')\nassert(solution('3600') == '144')\nassert(solution('3700') == '140')\nassert(solution('3800') == '136')\nassert(solution('3900') == '132')\nassert(solution('4000') == '128')\nassert(solution('4100') == '124')\nassert(solution('4200') == '120')\nassert(solution('4300') == '116')\nassert(solution('4400') == '112')\nassert(solution('4500') == '108')\nassert(solution('4600') == '104')\nassert(solution('4700') == '100')\nassert(solution('4800') == '96')\nassert(solution('4900') == '92')\nassert(solution('5000') == '88')\nassert(solution('5100') == '84')\nassert(solution('5200') == '80')\nassert(solution('5300') == '76')\nassert(solution('5400') == '72')\nassert(solution('5500') == '68')\nassert(solution('5600') == '64')\nassert(solution('5700') == '60')\nassert(solution('5800') == '56')\nassert(solution('5900') == '52')\nassert(solution('6000') == '48')\nassert(solution('6100') == '44')\nassert(solution('6200') == '40')\nassert(solution('6300') == '36')\nassert(solution('6400') == '32')\nassert(solution('6500') == '28')\nassert(solution('6600') == '24')\nassert(solution('6700') == '20')\nassert(solution('6800') == '16')\nassert(solution('6900') == '12')\nassert(solution('7000') == '8')\nassert(solution('7100') == '4')\nassert(solution('7200') == '0')\nassert(solution('7300') == '-6')\nassert(solution('7400') == '-12')\nassert(solution('7500') == '-18')\nassert(solution('7600') == '-24')\nassert(solution('7700') == '-30')\nassert(solution('7800') == '-36')\nassert(solution('7900') == '-42')\nassert(solution('8000') == '-48')\nassert(solution('8100') == '-54')\nassert(solution('8200') == '-60')\nassert(solution('8300') == '-66')\nassert(solution('8400') == '-72')\nassert(solution('8500') == '-78')\nassert(solution('8600') == '-84')\nassert(solution('8700') == '-90')\nassert(solution('8800') == '-96')\nassert(solution('8900') == '-102')\nassert(solution('9000') == '-108')\nassert(solution('9100') == '-114')\nassert(solution('9200') == '-120')\nassert(solution('9300') == '-126')\nassert(solution('9400') == '-132')\nassert(solution('9500') == '-138')\nassert(solution('9600') == '-144')\nassert(solution('9700') == '-150')\nassert(solution('9800') == '-156')\nassert(solution('9900') == '-162')\nassert(solution('10000') == '-168')\nassert(solution('10100') == '-174')\nassert(solution('10200') == '-180')\nassert(solution('10300') == '-186')\nassert(solution('10400') == '-192')\nassert(solution('10500') == '-198')\nassert(solution('10600') == '-204')\nassert(solution('10700') == '-210')\nassert(solution('10800') == '-216')\nassert(solution('10900') == '-222')\nassert(solution('11000') == '-228')\nassert(solution('11100') == '-234')\nassert(solution('11200') == '-240')\nassert(solution('11300') == '-246')\nassert(solution('11400') == '-252')\nassert(solution('11500') == '-"
    },
    {
        "number": 4059,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(len(tuple(n * 2 for n in range(1, n))))\n\nassert(solution(\"3\") == \"3\")\nassert(solution(\"15\") == \"2\")\nassert(solution(\"10\") == \"2\")\nassert(solution(\"100\") == \"2\")\nassert(solution(\"1000\") == \"0\")\nassert(solution(\"10000\") == \"0\")\nassert(solution(\"100000\") == \"0\")\nassert(solution(\"10000000\") == \"0\")\nassert(solution(\"100000000\") == \"0\")\nassert(solution(\"100000000000\") == \"0\")\nassert(solution(\"1000000000000\") == \"0\")\nassert(solution(\"1000000000000000\") == \"0\")\nassert(solution(\"100000000000000000\") == \"0\")\nassert(solution(\"1000000000000000000\") == \"0\")\nassert(solution(\"1000000000000000000000\") == \"0\")\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    for i in range(1, n):\n        if s[i] == \"(\":\n            s = s[:i] + \"+\" + s[i+1:]\n        else:\n            s = s[:i] + \"1\" + s[i+1:]\n    return s\n\nassert(solution(\"(())(\") == \"((1)+1)\")\nassert(solution(\")(\") == \"((1)+1)\")\nassert(solution(\")()()\") == \"((1)+1)\")\nassert(solution(\")(\") == \"((1)+1)\")\nassert(solution(\"()\") == \"1\")\nassert(solution(\"()(()\") == \"1\")\nassert(solution(\"())\") == \"1\")\nassert(solution(\"((((\") == \"((1)+1)\")\nassert(solution(\")\") == \"((1)+1)\")\nassert(solution(\"(()\") == \"((1)+1)\")\nassert(solution(\"()()\") == \"((1)+1)\")\nassert(solution(\"((()))\") == \"((1)+1)\")\nassert(solution(\"))\") == \"((1)+1)\")\nassert(solution(\")(\") == \"((1)+1)\")\nassert(solution(\"(()))\") == \"((1)+1)\")\nassert(solution(\"()((()))\") == \"((1)+1)\")\nassert(solution(\")(()\") == \"((1)+1)\")\nassert(solution(\"()()()()\") == \"((1)+1)\")\nassert(solution(\"()()\") == \"1\")\nassert(solution(\"()((()()()()))\") == \"((1)+1)\")\nassert(solution(\"()()()\") == \"1\")\nassert(solution(\"()()\") == \"1\")\nassert(solution(\"()()(()\") == \"1\")\nassert(solution(\"()()()(()\") == \"1\")\nassert(solution(\"(()()())()\") == \"1\")\nassert(solution(\"(()())(()\") == \"1\")\nassert(solution(\"(()())(()(()())()()\") == \"1\")\nassert(solution(\")())(\") == \"1\")\nassert(solution(\"())(\") == \"1\")\nassert(solution(\"(((()))))\") == \"1\")\nassert(solution(\"(()())()\") == \"1\")\nassert(solution(\"((())))\") == \"1\")\nassert(solution(\"())(())(()(()(()))\") == \"1\")\nassert(solution(\"(())(())(()(()()(()))\") == \"1\")\nassert(solution(\"())(())(()(()()())(()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())\") == \"1\")\nassert(solution(\"())(())(()(()()())(()())())\") == \"1\")\nassert(solution(\"())(())(()(()()()())(()())())\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution(\"())(())(()(()()())(()()())())()()()()()()\") == \"1\")\nassert(solution"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    brackets = [c for c in stdin]\n    left_brackets = brackets.count(\"(\")\n    right_brackets = brackets.count(\")\")\n    if left_brackets == right_brackets:\n        return 0\n    return abs(left_brackets - right_brackets)\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 0"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport unittest\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        pass"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    brackets = stdin.readline()\n    if brackets[0] == \"(\":\n        brackets = brackets[1:]\n    if brackets[-1] == \")\":\n        brackets = brackets[:-1]\n    brackets = \"(\" + brackets + \")\"\n    #print(brackets)\n    return brackets.count(\"(\") - brackets.count(\")\")"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    counter = 0\n    for i in range(n):\n        if s[i] == '(':\n            counter += 1\n        else:\n            counter -= 1\n        if counter < 0:\n            break\n    return i + 1\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    res = 0\n    stack = []\n    for i in range(n):\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            if stack:\n                res += i - stack.pop()\n    return res"
    },
    {
        "number": 4060,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_correct(s: str) -> bool:\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack.pop()!= '(':\n                    return False\n        return not stack\n\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    if is_correct(s):\n        return 0\n    for i in range(1, n):\n        if s[i] == '(' and s[i-1] == ')':\n            s = s[:i-1] + '1' + s[i:]\n            if is_correct(s):\n                return i\n            s = s[:i] + ')' + s[i+1:]\n    return -1\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if not s:\n        return '0'\n    elif not t:\n        return '0'\n    elif len(s) == len(t):\n        return '0'\n\n    elif len(s) < len(t):\n        if t[:len(s)] == s:\n            return '0'\n        else:\n            return str(len(s))\n\n    elif len(t) < len(s):\n        if s[:len(t)] == t:\n            return '0'\n        else:\n            return str(len(t))\n\n    else:\n        if s[:len(t)] == t:\n            return str(len(s))\n        else:\n            return str(len(t))\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')[:2]\n    return str(len(s) - len(t))\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find a substring of max length that is a valid subsequence of the stdin string\"\"\"\n    pass\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    return max(len(s) - len(t), 0)\n\n\nassert solution('''bbaba\nbb\n''') == 3\n\nassert solution('''baaba\nab\n''') == 2\n\nassert solution('''abcde\nabcde\n''') == 0\n\nassert solution('''asdfasdf\nfasd\n''') == 3\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    return str(len(s) - len(t))\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    return str(len(s) - len(t))\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    p1 = 0\n    p2 = 0\n    l1 = len(s)\n    l2 = len(t)\n    while p1 < l1 and p2 < l2:\n        if s[p1] == t[p2]:\n            p1 += 1\n            p2 += 1\n        elif p2 < l2-1 and s[p1] == t[p2+1]:\n            p1 += 1\n            p2 += 2\n        else:\n            p2 += 1\n    return p2-p1\n"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s, t = s.strip(), t.strip()\n\n    return str(len(s) - s.find(t))\n\nassert solution('bbaba') == '3'\nassert solution('baaba') == '2'\nassert solution('abcde') == '0'\nassert solution('asdfasdf') == '3'\nassert solution('adfasdf') == '2'\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(i) for i in stdin.split(' '))\n    return '{:d}'.format(max(\n        max(a * b, c * d),\n        max(a * d, c * b),\n        max(b * c, a * d),\n        max(b * d, a * c),\n    ))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if a <= b and c <= d:\n        return str(a * b)\n    elif a <= d and c <= b:\n        return str(a * d)\n    elif b <= a and c <= d:\n        return str(b * c)\n    elif b <= d and c <= a:\n        return str(b * d)\n    elif d <= a and c <= b:\n        return str(d * c)\n    elif d <= b and a <= c:\n        return str(d * a)\n"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.strip().split())\n    \n    return str(max(a,c)*max(b,d))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    a,b,c,d = int(nums[0]), int(nums[1]), int(nums[2]), int(nums[3])\n    res = 1\n    if a < b:\n        if c < d:\n            a,b,c,d = c,d,a,b\n        if b > d:\n            if a < b:\n                a,b = b,a\n            res = (b-a) * c\n    if a > b:\n        if c > d:\n            a,b,c,d = c,d,a,b\n        res = a * (d-b)\n    return str(res)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(n) for n in stdin.split(' ')]\n    if a >= b:\n        m = a\n        n = c\n    else:\n        m = c\n        n = a\n    if m >= n:\n        if n * d >= m * b:\n            return str(n * d)\n        return str(m * b)\n    else:\n        if m * d >= n * b:\n            return str(m * d)\n        return str(n * b)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    x = 0\n    y = 0\n    if a > b and c > d:\n        x = b\n        y = a\n    elif a < b and c > d:\n        x = a\n        y = c\n    elif a < b and c < d:\n        x = a\n        y = d\n    elif a > b and c < d:\n        x = b\n        y = d\n    else:\n        x = c\n        y = d\n    return str(x * y)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Lets start with this problem. You are given 3 integers a,b,c.\n    If x and y are integers and a \\leq x \\leq b and c\\leq y \\leq 10^9, what is the maximum possible value of x \\times y?\n    \"\"\"\n    a, b, c = [int(n) for n in stdin.split()]\n    x = (b - a) // 2\n    y = (c - b) // 2\n    x_times_y = x * y\n    if a < b:\n        return str(x_times_y)\n    if c < b:\n        return str(x_times_y)\n    if c < a:\n        return str(x_times_y)\n    return str(x_times_y * 2)\n\nprint(solution(input()))"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.split())\n    \n    max_mult = 0\n    \n    for x in range(a,b+1):\n        for y in range(c,d+1):\n            if x * y > max_mult:\n                max_mult = x * y\n    \n    return str(max_mult)"
    },
    {
        "number": 4062,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = [int(x) for x in stdin.split()]\n    def test(x,y) -> bool:\n        return a <= x <= b and c <= y <= d\n\n    # x \\times y = a\n    if test(a,c):\n        return str(a*c)\n    # y \\times x = b\n    if test(b,d):\n        return str(b*d)\n    # x \\times y = b\n    if test(b,c):\n        return str(b*c)\n    # y \\times x = a\n    if test(a,d):\n        return str(a*d)\n    return str(a*c)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5\\n9 1 4 4 6 7\\n')\n    2\n    >>> solution('3\\n9 1 4\\n')\n    1\n    >>> solution('6\\n9 1 4 4 6 7\\n')\n    2\n    '''\n    num_probs = int(stdin.readline().strip())\n    num_arcs = int(stdin.readline().strip())\n    difficulty_probs = list(map(int, stdin.readline().strip().split()))\n    num_arcs_probs = len([i for i in difficulty_probs if i > 0])\n    num_abc_probs = len(difficulty_probs) - num_arcs_probs\n\n    return str(num_arcs_probs == num_abc_probs)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    d = stdin[1]\n    diff = [int(i) for i in stdin[2:]]\n    diff.sort()\n    diff = [diff[0]] + diff[1:-1]\n    a = diff.count(1)\n    b = diff.count(2)\n    c = diff.count(3)\n    d = diff.count(4)\n    e = diff.count(5)\n    f = diff.count(6)\n    g = diff.count(7)\n    h = diff.count(8)\n    i = diff.count(9)\n    j = diff.count(10)\n    ans = 0\n    for k in range(2, N, 2):\n        ans += (a*(b+c+d) + (a-1)*(b+c+d-1) + (a-2)*(b+c+d-2) + (a-3)*(b+c+d-3)) // k\n    return str(ans)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Please print out how many choices of K should be made for a competitive programmer to get the same number of problems for ARCs and ABCs.\n    # One line of input should contain two integers N and K.\n    # The N lines of input will contain d_1, d_2,..., d_N.\n    # The output should be the number of choices of K that should be made.\n    N, K = list(map(int, stdin.split()))\n    if N < 2 or N > 10**5 or N % 2!= 0 or K < 1 or K > 10**5:\n        return \"Invalid Input\"\n    print(min(K, N // 2) - 1)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The aim is to solve the following question:\n\n    - 2 \\leq N \\leq 10^5\n    - N is an even number.\n    - 1 \\leq d_i \\leq 10^5\n    - All values in input are integers.\n\n    The input is given from Standard Input in the following format:\n    N\n    d_1 d_2... d_N\n    \n    where N is the number of problems, d_i is the difficulty of the i-th problem, and the remaining lines are the problems.\n\n    The output is given in the following format:\n    The number of choices of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same.\n    \"\"\"\n\n    N = int(stdin)\n    problems = [int(x) for x in stdin.split()]\n\n    a = sum([1 for x in problems if x >= 1])\n    b = sum([1 for x in problems if x < 1])\n\n    if a == b:\n        print(a)\n    else:\n        print(a - b)"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    D = [int(n) for n in stdin.readline().split()]\n    D = sorted(D)\n    ABCs = 0\n    ARCs = 0\n    for i in range(1, N + 1):\n        if i % 2 == 0:\n            ABCs += 1\n        else:\n            ARCs += 1\n    if ABCs == ARCs:\n        return str(ABCs)\n    else:\n        return str(ABCs) +'' + str(ARCs)\n\nassert(solution('''6\n9 1 4 4 6 7''') == '2')\nassert(solution('''7\n1 4 3 4 5 6 7''') == '4')\nassert(solution('''2\n1 2''') == '1')\nassert(solution('''3\n1 2 3''') == '3')\nassert(solution('''4\n1 2 3 4''') == '4')\nassert(solution('''5\n1 2 3 4 5''') == '5')\nassert(solution('''6\n1 2 3 4 5 6''') == '6')\nassert(solution('''7\n1 2 3 4 5 6 7''') == '6')\nassert(solution('''8\n1 2 3 4 5 6 7 8''') == '7')\nassert(solution('''9\n1 2 3 4 5 6 7 8 9''') == '7')\nassert(solution('''10\n1 2 3 4 5 6 7 8 9 10''') == '8')\nassert(solution('''11\n1 2 3 4 5 6 7 8 9 10 11''') == '8')\nassert(solution('''12\n1 2 3 4 5 6 7 8 9 10 11 12''') == '9')\nassert(solution('''13\n1 2 3 4 5 6 7 8 9 10 11 12 13''') == '9')\nassert(solution('''14\n1 2 3 4 5 6 7 8 9 10 11 12 13 14''') == '10')\nassert(solution('''15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15''') == '10')\nassert(solution('''16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16''') == '11')\nassert(solution('''17\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17''') == '11')\nassert(solution('''18\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18''') == '12')\nassert(solution('''19\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19''') == '12')\nassert(solution('''20\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20''') == '13')\nassert(solution('''21\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21''') == '13')\nassert(solution('''22\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''') == '14')\nassert(solution('''23\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23''') == '14')\nassert(solution('''24\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24''') == '15')\nassert(solution('''25\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25''') == '15')\nassert(solution('''26\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26''') == '16')\nassert(solution('''27\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27''') == '16')\nassert(solution('''28\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28''') == '17')\nassert(solution('''29\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29''') == '17')\nassert(solution('''30\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30''') == '18')\nassert(solution('''31\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31''') == '18')\nassert(solution('''32\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32''') == '19')\nassert(solution('''33\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33''') == '19')\nassert(solution('''34\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34''') == '20')\nassert(solution('''35\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35''') == '20')\nassert(solution('''36\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36''') == '21')\nassert(solution('''37\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37''') == '21')\nassert(solution('''38\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38''') == '22')\nassert(solution('''39\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39''') == '22')\nassert(solution('''40\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40''') == '23')\nassert(solution('''41\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41''') == '23')\nassert(solution('''42\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42''') =="
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n\n    # Write your code here\n    def get_number_of_ABC_problems_at_difficulty_K(N, K):\n        return sum(d <= K for d in D)\n\n    def get_number_of_ARC_problems_at_difficulty_K(N, K):\n        return N - get_number_of_ABC_problems_at_difficulty_K(N, K)\n\n    D = [int(stdin.readline().strip()) for _ in range(N)]\n\n    print(get_number_of_ARC_problems_at_difficulty_K(N, K))\n    print(get_number_of_ABC_problems_at_difficulty_K(N, K))\n\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    difficulty = tuple(int(d) for d in stdin.readline().strip().split())\n    # print(n, difficulty)\n    arcs = []\n    abc = []\n    for i in range(n // 2):\n        if i + 1 == n // 2:\n            arcs.append(i)\n            abc.append(i)\n        else:\n            if difficulty[i] > difficulty[i + 1]:\n                arcs.append(i)\n                abc.append(i + 1)\n            else:\n                arcs.append(i + 1)\n                abc.append(i)\n    # print(arcs, abc)\n    return str(len(arcs) - len(abc))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    d = [int(x) for x in stdin.readline().split()]\n    abcs, arcs = [], []\n    for i in range(0, len(d)):\n        if d[i] <= 5:\n            abcs.append(i+1)\n        else:\n            arcs.append(i+1)\n    return str(len(abcs) == len(arcs))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4063,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    d_l = list(map(int, stdin.readline().split()))\n    return str(len([x for x in d_l if x % 2 == 0]) - len([x for x in d_l if x % 2!= 0]))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = [a[i] for i in range(n)]\n    if n == 0:\n        return 0\n    # max_good_times = 0\n    # for i in range(n):\n    #     if a[i] >= h:\n    #         continue\n    #     if i == n - 1:\n    #         max_good_times += 1\n    #         continue\n    #     if a[i + 1] - a[i] >= h - a[i]:\n    #         max_good_times += 1\n    #     else:\n    #         continue\n    #     if a[i + 1] - a[i] >= h - a[i]:\n    #         max_good_times += 1\n    # return max_good_times\n    max_good_times = 0\n    good_sleeping_times = 0\n    for i in range(n):\n        if a[i] >= h:\n            continue\n        if i == n - 1:\n            max_good_times += 1\n            continue\n        if a[i + 1] - a[i] >= h - a[i]:\n            max_good_times += 1\n            good_sleeping_times += 1\n        else:\n            continue\n        if a[i + 1] - a[i] >= h - a[i]:\n            max_good_times += 1\n            good_sleeping_times += 1\n    return good_sleeping_times\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_good = 0\n    for i in range(0, n - 1):\n        if a[i] + 1 > h:\n            max_good = max(max_good, i)\n    return max_good\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n\n    # Find the maximum number of good sleeping times Vova can obtain if he acts optimally\n    # @1st optimal solution\n    def calc_optimal_sleeping_times(a):\n        current_hour = 0\n        max_num_good_sleeping_times = 0\n        for hour_index in range(n):\n            current_hour += a[hour_index]\n            if current_hour > h:\n                break\n            max_num_good_sleeping_times += 1\n        return max_num_good_sleeping_times\n\n    # @2nd optimal solution\n    def calc_optimal_sleeping_times_2(a):\n        current_hour = 0\n        max_num_good_sleeping_times = 0\n        for hour_index in range(n):\n            current_hour += a[hour_index]\n            max_num_good_sleeping_times = max(max_num_good_sleeping_times,\n                                              current_hour + (max_num_good_sleeping_times - 1) * h)\n        return max_num_good_sleeping_times\n\n    # @3rd optimal solution\n    def calc_optimal_sleeping_times_3(a):\n        current_hour = 0\n        max_num_good_sleeping_times = 0\n        for hour_index in range(n):\n            current_hour += a[hour_index]\n            max_num_good_sleeping_times = max(max_num_good_sleeping_times,\n                                              current_hour * (max_num_good_sleeping_times - 1))\n        return max_num_good_sleeping_times\n\n    print(calc_optimal_sleeping_times(a))\n    print(calc_optimal_sleeping_times_2(a))\n    print(calc_optimal_sleeping_times_3(a))\n\n\nsolution(stdin.read())\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    result = 0\n    for i in range(n):\n        result += (l + 1)\n        l += a[i]\n    return result"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    a.insert(0, 0)\n    a.append(h)\n    a = sorted(a)\n    ans = 0\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] <= l <= r:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    good_times = 0\n\n    for i in range(n):\n        if l <= a[i] <= r:\n            good_times += 1\n\n    return good_times\n\n\nassert solution('''7 24 21 23''') == 3\nassert solution('''16 17 14 20 20 11 22''') == 3\nassert solution
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n    print(int(sum(a[0:n]) + n * (h - l + 1) - sum(a[n:n + 1])))"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.strip().split())\n    nums = [int(x) for x in stdin.strip().split()]\n\n    # dp[i][j]: the number of good sleeping times for i sleeping times\n    dp = [[0 for _ in range(n + 1)] for _ in range(h + 1)]\n\n    # the maximum number of good sleeping times in the first i sleeping times\n    for i in range(1, h + 1):\n        for j in range(n):\n            if nums[j] >= i:\n                # the time is good\n                dp[i][j + 1] = dp[i - 1][j] + 1\n            else:\n                dp[i][j + 1] = dp[i - 1][j]\n\n    # the maximum number of good sleeping times in the first i sleeping times, and j sleeping times\n    result = 0\n    for i in range(h):\n        for j in range(n):\n            if nums[j] <= i:\n                # the time is not good\n                result = max(result, dp[i][j])\n            else:\n                # the time is good\n                result = max(result, dp[i][j] + 1)\n\n    return str(result)\n\n\nassert(solution(\"7 24 21 23\") == \"3\")\nassert(solution(\"16 17 14 20 20 11 22\") == \"3\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\") == \"1\")\nassert(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 17\") == \"1\")\nassert(solution(\"10 1000 2000\") == \"2\")\nassert(solution(\"4 5 2\") == \"3\")\nassert(solution(\"2 2 2\") == \"1\")\nassert(solution(\"1 1000000\") == \"1\")\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    start = 0\n    best = 0\n    for i in range(n):\n        a_start = a[i]\n        a_end = a_start + h\n        if start < a_start <= l <= r:\n            best = max(best, 1)\n            start = a_end\n    return str(best)\n\n\nassert (\n    solution(\n        \"\"\"7 24 21 23\"\"\"\n    )\n    == \"3\"\n)\nassert (\n    solution(\n        \"\"\"16 17 14 20 20 11 22\"\"\"\n    )\n    == \"3\"\n)\n"
    },
    {
        "number": 4064,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    times = [0]\n    for i, x in enumerate(a, 1):\n        if x + times[-1] <= h:\n            times.append(x + times[-1])\n        else:\n            times.append(h)\n    return str(len([x for x in times[:-1] if l <= x <= r]))\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    problems = list(map(int, stdin.readline().split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if problems[i] > problems[j] * 2 and problems[j] <= problems[i] * 2:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    p = 0\n    for i in range(len(a) - 1):\n        if a[i] <= 2 * a[i + 1]:\n            p += 1\n    return str(p)"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(max(stdin.split())))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    diff = []\n    \n    for i in range(1, n):\n        diff.append(a[i] - a[i - 1])\n    \n    max_diff = max(diff)\n    \n    if diff.count(max_diff) == 1:\n        return str(1)\n    \n    return str(max_diff // 2)\n\nprint(solution(stdin))\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n\n\"\"\"\n\nn = int(input())\na = [int(x) for x in input().split()]\n\ncontests = []\ni = 0\nwhile i < n:\n    j = i + 1\n    while j < n and a[i] * 2 <= a[j]:\n        j += 1\n    contests.append(a[i:j])\n    i = j\n\nprint(len(contests))\n"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return max(len(stdin.strip().split(' ')), 1)\n    "
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\n1 2 5 6 7 10 21 23 24 49\\n\")\n    '4'\n    >>> solution(\"5\\n2 10 50 110 250\\n\")\n    '1'\n    >>> solution(\"6\\n4 7 12 100 150 199\\n\")\n    '3'\n    >>> solution(\"100\\n
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    \n    tot = 1\n    max = a[0]\n    for i in a[1:]:\n        if max * 2 < i:\n            tot += 1\n            max = i\n    return tot"
    },
    {
        "number": 4065,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    problems = sorted(map(int, stdin.readline().split()))\n\n    best = 1\n    solved = 1\n    for i, a in enumerate(problems):\n        if a == problems[i - 1] * 2:\n            solved += 1\n            if solved > best:\n                best = solved\n\n        if i + 1 < n and a > problems[i + 1] * 2:\n            solved = 1\n\n    return best\nprint(solution(None))\n"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    result = a[0] * a[-1]\n    for i in range(n - 1):\n        result = lcm(result, a[i + 1])\n    print(1, result)\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().split()]\n    lcm_arr = []\n    for i, x in enumerate(arr):\n        for j, y in enumerate(arr):\n            if i!= j:\n                lcm = x*y // math.gcd(x, y)\n                lcm_arr.append(lcm)\n    print(lcm_arr.index(min(lcm_arr)) + 1, lcm_arr.index(min(lcm_arr)) + 1)"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    minimum = min(a)\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            if a[i] * a[j] == minimum:\n                return str(i + 1) +'' + str(j + 1)\nsolution('')\n"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    x = sorted(a)\n    res = None\n    res = x[0], x[1]\n    return str(res[0]) +'' + str(res[1])\n"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    result = [None, None]\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < lcm(result[0], result[1]):\n                result = [i, j]\n    return str(result[0]) +'' + str(result[1])\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = list(map(int, stdin[1:].split()))\n    l = list(a)\n    l.sort()\n    m = l[0]\n    for i in range(len(l)):\n        if (l[i] / m) < (l[i - 1] / m):\n            m = l[i]\n            ind = i\n    print(ind, l.index(m))\n    return"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = [int(x) for x in stdin.readline().strip().split()]\n    answers = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            lcm = reduce(lambda x, y: lcm_finder(x, y), [numbers[i], numbers[j]])\n            answers.append(lcm)\n    return str(min(answers)) +'' + str(answers.index(min(answers)) + 1)\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    m = len(a)\n    lcm = a[0]\n    if m == 1:\n        return '1 1'\n    for i in range(1, m):\n        lcm = lcm * a[i] // gcd(lcm, a[i])\n    min = (a[0] * a[1] // gcd(a[0], a[1]))\n    for i in range(2, m):\n        min = min * a[i] // gcd(min, a[i])\n    for i in range(m - 1):\n        for j in range(i + 1, m):\n            lcm = lcm * a[j] // gcd(lcm, a[j])\n            min = min * a[j] // gcd(min, a[j])\n            if lcm < min:\n                min = lcm\n                if min == 1:\n                    return '{} {}'.format(i + 1, j + 1)\n    return '-1 -1'\n"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(s) for s in stdin.readline().strip().split()]\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if lcm(numbers[i], numbers[j]) < min_lcm:\n                min_lcm = lcm(numbers[i], numbers[j])\n                lcm_i = i\n                lcm_j = j\n    print(str(lcm_i) + \" \" + str(lcm_j))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    i, j = -1, -1\n    m = None\n    for i in range(n):\n        for j in range(i+1, n):\n            lcm = a[i] * a[j]\n            if m is None or lcm < m:\n                m = lcm\n                i1, j1 = i, j\n    return f\"{i1+1} {j1+1}\"\n\nassert(solution('''\n5\n2 4 8 3 6\n''') == \"1 2\")\nassert(solution('''\n5\n5 2 11 3 7\n''') == \"1 4\")\nassert(solution('''\n6\n2 5 10 1 10 2\n''') == \"1 4\")\nassert(solution('''\n7\n2 6 5 1 9 8\n''') == \"2 5\")\nassert(solution('''\n3\n1 2 3\n''') == \"1 1\")\nassert(solution('''\n5\n1 2 3 4 5\n''') == \"1 2\")\nassert(solution('''\n5\n1 5 2 7 3\n''') == \"1 4\")\nassert(solution('''\n7\n3 6 5 8 4 7\n''') == \"1 3\")\nassert(solution('''\n3\n1 2 3\n''') == \"1 1\")\nassert(solution('''\n6\n1 2 3 4 5 6\n''') == \"1 4\")\nassert(solution('''\n7\n3 6 5 8 4 7\n''') == \"1 3\")\nassert(solution('''\n3\n1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n8\n1 1 1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n7\n1 1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n5\n1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n5\n1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n2 2 2 2 2 2\n''') == \"1 1\")\nassert(solution('''\n7\n2 2 2 2 2 2 2\n''') == \"1 1\")\nassert(solution('''\n6\n2 2 2 2 2 2\n''') == \"1 1\")\nassert(solution('''\n6\n2 2 2 2 2 2\n''') == \"1 1\")\nassert(solution('''\n5\n2 2 2 2 2\n''') == \"1 1\")\nassert(solution('''\n5\n2 2 2 2 2\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n7\n1 1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n7\n1 1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n7\n1 1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n7\n1 1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n7\n1 1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''\n6\n1 1 1 1 1 1\n''') == \"1 1\")\nassert(solution('''"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    s = s[:n]\n    s = s.replace(\"0\", \".\")\n    s = s.replace(\"1\", \"*\")\n    s = s.replace(\"2\", \"#\")\n    return s\n\nassert solution('''3\n121''') == '021'\nassert solution('''6\n000000''') == '001122'\nassert solution('''6\n211200''') == '211200'\nassert solution('''6\n120110''') == '120120'\nassert solution('''8\n2120202801293012''') == '2120202801293012'\nassert solution('''100000\n
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    s = s.replace('0', 'a').replace('1', 'b').replace('2', 'c')\n    result = s\n    last = len(result)\n    for i in range(n):\n        a = result.count('a')\n        b = result.count('b')\n        c = result.count('c')\n        if a == b:\n            if a < c:\n                result = result.replace('a', 'b', c - a)\n        elif a == c:\n            if b < a:\n                result = result.replace('b', 'a', a - b)\n        else:\n            if a < b:\n                result = result.replace('a', 'c', b - a)\n            else:\n                result = result.replace('b', 'c', a - b)\n        if len(result) < last:\n            last = len(result)\n    return result"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    if n == 3:\n        return ''.join(['0', '1', '2'])\n    if n == 2:\n        return ''.join(['0', '1'])\n\n    def calculate_weights(num_zeros: int, num_ones: int) -> int:\n        if num_zeros == num_ones:\n            return num_zeros\n        if num_zeros > num_ones:\n            return num_zeros\n        else:\n            return num_ones\n\n    def recurse(n: int, s: str, weights: int, result: str) -> str:\n        if len(s) == n:\n            return s\n        if s == '':\n            return s\n        if s[0] == '0':\n            return recurse(n, s[1:], weights - 1, result + '0')\n        elif s[0] == '1':\n            return recurse(n, s[1:], weights - 2, result + '1')\n        else:\n            return recurse(n, s[1:], weights - 2, result + '2')\n\n    min_weights = calculate_weights(s.count('0'), s.count('1'))\n    result = ''\n\n    for i in range(3, n + 1, 3):\n        result = recurse(n, s, i, result)\n\n    return result"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    res = []\n    while len(s) > 2:\n        a = s[0:3]\n        b = s[3:6]\n        res.append(a)\n        res.append(b)\n        s = s[6:]\n    if len(s) == 2:\n        res.append(s)\n    return min(res)"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #count the number of 0s, 1s and 2s\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    zero = 0\n    one = 0\n    two = 0\n    for c in s:\n        if c == '0':\n            zero += 1\n        elif c == '1':\n            one += 1\n        elif c == '2':\n            two += 1\n    #once we have all the counts, we can get the answer\n    #since we know the difference between zeros and ones is the same for all the numbers\n    #we can check that for all the numbers the difference is the same\n    #so we can replace the number of 0s with the number of 1s\n    #and replace the number of 1s with the number of 2s\n    answer = ''\n    for i in range(n):\n        answer += '0' if zero > one else '1' if one > two else '2'\n        if zero > one:\n            zero -= 1\n        elif one > two:\n            one -= 1\n        else:\n            two -= 1\n    return answer\n\nassert(solution('') == '')\nassert(solution('0') == '0')\nassert(solution('1') == '1')\nassert(solution('2') == '2')\nassert(solution('11111') == '11112')\nassert(solution('22222') == '11122')\nassert(solution('2222222222222222222222222') == '2222222222222222222222222')\nassert(solution('1111222') == '1111222')\nassert(solution('111222222222222222222222222222222') == '111222222222222222222222222222222222222')\nassert(solution('1111122') == '1111122')\nassert(solution
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n\n    s = stdin.readline().strip()\n\n    total = 0\n\n    for i in s:\n        if i == '0':\n            total += 1\n        elif i == '1':\n            total -= 1\n        else:\n            total += 2\n\n    print(s * total)\n    return s * total\n"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin.strip()\n\n    if n == 1:\n        return string\n\n    min_length = n * 3\n    ans = ''\n    # build all possible combinations\n    for i in range(3, n+1):\n        for j in combinations(string, i):\n            if '0' * (n-len(j)) in j:\n                temp = ''.join(j)\n                if len(temp) < min_length:\n                    min_length = len(temp)\n                    ans = temp\n    return ans"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    a = 0\n    b = 0\n    c = 0\n    for i in s:\n        if i == '0':\n            a += 1\n        elif i == '1':\n            b += 1\n        elif i == '2':\n            c += 1\n    if a == b and b == c:\n        return s\n    elif a == b:\n        return s[:n-c]+'0'*(c+1)\n    elif b == c:\n        return s[:n-a]+'1'*(a+1)\n    else:\n        return s[:n-max(a,b)]+'2'*max(a,b)"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.splitlines()[0]"
    },
    {
        "number": 4067,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n\n    if n % 3!= 0:\n        return 'Impossible'\n\n    # naive solution\n    # ans = ''\n    # for i in range(n):\n    #     count = 0\n    #     for j in range(n):\n    #         if s[i] == s[j]:\n    #             count += 1\n    #     if count % 3 == 1:\n    #         ans += '1'\n    #     elif count % 3 == 2:\n    #         ans += '2'\n    #     else:\n    #         ans += '0'\n\n    # n = len(ans)\n    # if n % 3!= 0:\n    #     return 'Impossible'\n\n    # result = [''] * n\n    # result[::3] = ans[::3]\n    # result[1::3] = ans[1::3]\n    # result[2::3] = ans[2::3]\n    # return ''.join(result)\n\n    # optimal solution\n    # n = len(s)\n    # result = ['0'] * n\n    # for i in range(n):\n    #     count = 0\n    #     for j in range(n):\n    #         if s[i] == s[j]:\n    #             count += 1\n    #     if count % 3 == 1:\n    #         result[i] = '1'\n    #     elif count % 3 == 2:\n    #         result[i] = '2'\n    #     else:\n    #         result[i] = '0'\n\n    # n = len(result)\n    # if n % 3!= 0:\n    #     return 'Impossible'\n\n    # result = ''.join(result)\n    # return result\n\n    return 'Impossible'"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(' ')\n    n = int(line[0])\n    m = int(line[1])\n    arr = [int(x) for x in line[2:]]\n    ans = 0\n    dp = [0 for x in range(n)]\n    dp[0] = 1\n    if m > 0:\n        dp[1] = 1\n    else:\n        dp[1] = 0\n    for i in range(2, n):\n        dp[i] = dp[i-1]\n        if i > m and arr[i-1] == arr[i-2]:\n            dp[i] -= 1\n        if i > m+1 and arr[i-1] == arr[i-3]:\n            dp[i] -= 1\n        if i > m+2 and arr[i-1] == arr[i-4]:\n            dp[i] -= 1\n    return str(dp[n-1])\n"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    # Count ways to get to the n-th stair\n    a = [0] + a + [n]\n    n += 1\n    # Build a table\n    table = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        table[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n+1):\n            if i == n-1:\n                table[i][j] = 1\n            else:\n                table[i][j] = (table[i+1][j]+table[i][j-1])%10000007\n    # Sum the ways to get to the m-th stair\n    return sum(table[0][m:])"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [int(x) for x in stdin.strip().split(' ')]\n    res = 0\n    for i in range(1, n):\n        for j in range(i + 1):\n            res = (res + pow(a[j], m, 1000000007)) % 1000000007\n    return str(res)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n\n    def count(stairs, broken_stairs):\n        if len(stairs) == 0:\n            return 1\n\n        if len(broken_stairs) == 0:\n            return 0\n\n        return (count(stairs[1:], broken_stairs) +\n                (count(stairs[2:], broken_stairs) if stairs[0] in broken_stairs else 0))\n\n    return str((count(range(1, N + 1), set()) - 1) % 1000000007)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    res = 1\n    a = stdin.strip().split()\n    for i in range(0, m):\n        if int(a[i]) == n:\n            res += 1\n        else:\n            res *= (n - int(a[i]))\n            res %= 10000000007\n    return str(res)\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    res = 0\n    if k == 0:\n        return \"1\"\n    if k == n:\n        return \"0\"\n    if n > 1000000000:\n        return \"0\"\n    if n > 9999999999:\n        return \"0\"\n    a = [1] + [0] * (k - 1)\n    for i in range(n - k):\n        res += a[i]\n        for j in range(k - 1):\n            a[j + 1] += a[j]\n    return str(res)"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    if N == 1:\n        return '1'\n    stairs = [0 for i in range(N)]\n    stairs[0] = 1\n    stairs[1] = 2\n    stairs[2] = 4\n    stairs[3] = 7\n    stairs[4] = 5\n    if M == 1:\n        return str(stairs[N-1])\n    for i in range(M, N):\n        stairs[i] = (stairs[i-1] + stairs[i-2] + stairs[i-3]) % 1_000_000_007\n    return str(stairs[N-1])"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(' ')]\n    if M == 0:\n        return str(0)\n    ans = 0\n    for step in range(N):\n        ans += (step + 1) * (N - step) * pow(2, step, M + 1)\n    return str(ans % M + 1)\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = (int(s) for s in stdin.split())\n    ways = [0] * (N + 1)\n    ways[0] = 1\n    for step in range(1, N + 1):\n        for broken in range(1, min(step, M) + 1):\n            ways[step] += ways[step - broken]\n            ways[step] %= 1000000007\n    return str(ways[N])"
    },
    {
        "number": 4068,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    for i in range(1, n - 1):\n        a[i] += a[i - 1]\n    res = 1\n    for i in range(m):\n        res *= (a[n - 1] - a[i] + 1)\n        res %= 1000000007\n    return str(res)\n"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 2 4\")\n    2\n    \"\"\"\n    x, k, d = stdin.split()\n    x, k, d = int(x), int(k), int(d)\n\n    result = x - d if x > d else x + d\n    return str(result)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input is given from Standard Input in the following format:\n    X K D\n\n    Returns the minimum possible absolute value of the coordinate of the destination.\n\n    >>> solution('6 2 4')\n    '2'\n    \"\"\"\n    x, k, d = [int(x) for x in stdin.split()]\n    dist = abs(x + d)\n    if dist % 2:\n        # odd distance, we cannot make the coordinate smaller\n        return str(x + max(0, (d - dist // 2)))\n    else:\n        # even distance, we can make the coordinate smaller\n        return str(x + min(0, (d - dist // 2)))\n"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    return str(min(x + d * k, -x + d * k))\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(x) for x in stdin.split(\" \")]\n    n = abs(x) - (k % abs(x))\n    return str(n)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = [int(x) for x in stdin.split()]\n    steps = 0\n    while X >= 0 and X <= 10 ** 15:\n        steps += 1\n        if X + D >= 0 and X + D <= 10 ** 15:\n            X += D\n        elif X - D >= 0 and X - D <= 10 ** 15:\n            X -= D\n        else:\n            break\n    return str(steps)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(x) for x in stdin.split()]\n    r = abs(x)\n    k -= 1\n    while k > 0:\n        if r + d > 10 ** 15:\n            return f'{r - (10 ** 15):.0f}'\n        else:\n            r += d\n        k -= 1\n    return f'{r:.0f}'"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(n) for n in stdin.strip().split(' ')]\n    if k > 10 ** 15:\n        return 'impossible'\n    if k == 0:\n        return '0'\n    k = min(k, abs(x + d) - abs(x))\n    k = min(k, abs(x - d) - abs(x))\n    return str(k)"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x,k,d = [int(x) for x in stdin.split(' ')]\n    if k == 0 or d == 0:\n        return '0'\n    if abs(x) > d:\n        return str(abs(x - d))\n    return str(abs(x + d))"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(i) for i in stdin.split()]\n    if k < 1:\n        return '0'\n    x, k, d = abs(x), abs(k), abs(d)\n    if x - (d + 1) < k:\n        return str(d - (x - (d + 1)))\n    return str(d + k + 1 - (x - (d + 1)))"
    },
    {
        "number": 4069,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] * stdin[1]\n\nassert solution('11') == '11'\nassert solution('14') == '0'\nassert solution('61441') == '2'\nassert solution('571576') == '10'\nassert solution('2128506') == '3'\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) / 60)"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * 2)\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    res = 0\n    for i in range(2, num):\n        if num % i == 0:\n            res += i\n    return res\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(n / math.log10(n)) + 1)\n\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    return str(5*(10**(stdin/5)))\n\nassert(solution(11) == \"2\")\nassert(solution(14) == \"0\")\nassert(solution(61441) == \"2\")\nassert(solution(571576) == \"10\")\nassert(solution(2128506) == \"3\")\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(2 * int(stdin.split(\"\\n\")[0]))"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the fastest time to solve the riddle\"\"\"\n    return '2'\n"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(ceil(log2(n)))\n\nimport sys"
    },
    {
        "number": 4070,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(len(solution))"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 27:\n        return n\n    else:\n        return 27\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\n@pytest.mark.parametrize(\n    (\"input\", \"expected\"),\n    (\n        (3, 27),\n        (6, 36),\n        (9, 81),\n        (12, 216),\n        (17, 576),\n    ),\n)\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin)\n    return str(a**2)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1')\n    '7'\n    >>> solution('2')\n    '6'\n    >>> solution('3')\n    '5'\n    \"\"\"\n    return str(int(stdin) * 2)\n\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 30 and a > 0:\n        return a**3"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n + 1) // 2)"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    return str(int(n) * 2)\n"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4071,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(2,stdin))\n\nassert (solution('3')) == '8'\nassert (solution('5')) == '256'\nassert (solution('10')) == '65536'\n\nprint(solution('3'))\nprint(solution('5'))\nprint(solution('10'))\n\n\"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\"\n\nimport sys"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a in (0, 1):\n        return str(a)\n    elif a % 2 == 0:\n        return \"1\"\n    else:\n        return \"0\"\n\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"1\"\n    if a == 2:\n        return \"0\"\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    result = 0\n    while number > 0:\n        if number % 2 == 0:\n            result += 1\n        number //= 2\n    return str(result)\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return 0\n    else:\n        return 1"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 2)\n\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"1\" if n % 2 == 0 else \"0\"\n\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    c = 0\n    if n < 9:\n        c = 0\n    elif n == 9:\n        c = 1\n    else:\n        while n > 0:\n            if n % 10 == 1:\n                c = 1\n            n = n // 10\n    return str(c)\n"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 2)"
    },
    {
        "number": 4072,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"10\"\n    else:\n        return \"11\""
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n)\n    return ''"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin.strip().split(\" \")\n    return str(result[0])\n\nassert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"2 5 3 1\") == \"4\""
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = map(int, stdin.readline().strip().split(\" \"))\n    a.sort()\n    return str(a[-1] - a[0])"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    print(a)\n    return\nsolution(stdin)\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    v = a[:]\n    v.sort()\n    h = 1\n    while True:\n        for i in range(0, n):\n            if (a[i] < v[i]):\n                a[i] += h\n        if (a == v):\n            break\n        h += 1\n    return str(h - 1)\n\nprint(solution(open(\"A.in\").read()))\n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().split()\n    ans = 0\n    for i in a:\n        ans += int(i)\n    print(ans)"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n\n    max_number = max(a)\n    max_number_count = a.count(max_number)\n    max_number_index = a.index(max_number)\n\n    result = max_number * max_number_count\n    if max_number_index!= 0:\n        result = result + max_number * (max_number_count - 1)\n\n    return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(stdin.readline()) for i in range(n)]\n    return str(sorted(arr)[n//2])\n    \n"
    },
    {
        "number": 4073,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the last stack-rptures of the given input.\n\n    >>> solution('''4\n   ... 2 5 3 1\n   ... ''')\n    4\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = stdin.readline().strip().split()\n\n    numbers = [int(num) for num in a]\n    numbers.sort()\n\n    last_stack_rptures = 0\n\n    for i in range(n):\n        last_stack_rptures ^= numbers[i]\n    return last_stack_rptures\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # For each test case, find the minimum number of packages that Polycarp\n    # needs to buy to get exactly $n$ shovels.\n    for _ in range(int(stdin.readline())):\n        n, k = map(int, stdin.readline().split())\n        if n < k * (k + 1) // 2:\n            print(k - 1)\n        else:\n            print(n // (k + 1))\n\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total_shovels = int(stdin)\n    shovels_per_package = int(stdin)\n    shovels = [i for i in range(1,shovels_per_package+1)]\n\n    # brute force\n    # for i in range(1,shovels_per_package+1):\n    #     for j in range(1,shovels_per_package+1):\n    #         if total_shovels == i + j:\n    #             print(i,j)\n    #             return \"yes\"\n    # return \"no\"\n    return \"yes\""
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.readline().strip())):\n        shovels, packages = stdin.readline().strip().split()\n        shovels, packages = int(shovels), int(packages)\n        result = 0\n        for i in range(1, shovels+1):\n            if i % packages == 0:\n                result += 1\n        print(result)\n    return ''\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, k = map(int, stdin.split())\n        if n % k == 0:\n            print(n // k)\n        else:\n            print(n // k + 1)\n\n\"\"\"\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def n_choose_k(n: int, k: int) -> int:\n        return nCr(n, k)\n\n    def nCr(n: int, k: int) -> int:\n        return n ** k * (n - 1) ** (k - 1) // math.factorial(k)\n\n    def find_n(k: int) -> int:\n        n = 0\n        while n_choose_k(n, k) <= m:\n            n += 1\n        return n\n\n    for _ in range(int(stdin)):\n        n, k = map(int, stdin.split())\n        m = n_choose_k(n, k)\n        if m > 1000000000:\n            print(\"INF\")\n        else:\n            print(find_n(k))\n\nsolution(stdin)\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    if not stdin:\n        return \"\"\n\n    n, k = map(int, stdin.split())\n\n    if n % k!= 0:\n        return \"0\"\n\n    return str(n // k)\n    "
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    if n % k == 0:\n        return str(n // k)\n    else:\n        return str(n // k) + \" 1\""
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = list(map(int, stdin.readline().split()))\n        print(find_package(n, k))\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.readline()\n    for _ in range(int(t)):\n        n, k = stdin.readline().split()\n        n = int(n)\n        k = int(k)\n        if n == k:\n            print(n)\n        else:\n            print(k - 1)\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    tokens = [int(token) for token in stdin.split()]\n    n, m = tokens[0:2]\n    k, p = tokens[2:4]\n    # create map from switch number to list of all its neighbors\n    # -1 is the neighbor of the bulb itself\n    # if the neighbor is not the switch itself, it is itself + 1\n    switch_neighbors = {switch - 1: [switch - 1, switch, switch + 1]\n                        for switch in range(1, n + 1)}\n    for i in range(k, n + 1):\n        switch_neighbors[i].remove(i)\n        for neighbor in switch_neighbors[i]:\n            switch_neighbors[neighbor].remove(i)\n\n    switch_states = [tokens[4 + i:4 + i + k] for i in range(0, m * k, k)]\n    total_lighted_bulbs = 0\n    for state in switch_states:\n        state_count = sum(state)\n        if state_count % 2 == 0:\n            total_lighted_bulbs += 1\n    print(total_lighted_bulbs)"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    k = [int(stdin) for stdin in stdin.split(' ')[2:]]\n    p = [int(stdin) for stdin in stdin.split(' ')[4:]]\n    l = len(k)\n    k = (n + l - 1) % l\n    dp = [[0] * n for i in range(k)]\n    for i in range(k):\n        dp[i][k - i - 1] = 1\n    for i in range(k - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if j < k - i - 1:\n                dp[i][j] = 0\n            else:\n                for kk in range(j - k + i, j - k + i + 1):\n                    dp[i][j] += dp[i][kk] * dp[i - 1][j - k + kk]\n    return str(dp[0][n - 1])"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    on_switches = [int(x) for x in stdin.split()]\n    off_switches = [int(x) for x in stdin.split()]\n\n    # count possible combinations\n    def count_possible_combinations(switches_on: int, switches_off: int, bulbs: int):\n        if switches_on == 0 or switches_off == 0:\n            return 0\n\n        # bulbs_on == bulbs_off\n        if bulbs_on == bulbs_off:\n            return 2 ** bulbs_on\n\n        # bulbs_on > bulbs_off\n        if bulbs_on < bulbs_off:\n            return 0\n\n        # bulbs_off > bulbs_on\n        # count combinations of bulbs_on switches on\n        count_on_on = count_possible_combinations(switches_on - 1, switches_off - 1, bulbs - 1)\n        # count combinations of bulbs_off switches on\n        count_on_off = count_possible_combinations(switches_on - 1, switches_off, bulbs - 1)\n\n        return count_on_on + count_on_off\n\n    combinations = count_possible_combinations(N, M, M)\n\n    return combinations"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split()))\n    k = list(map(int, stdin.split()[1:]))\n    p = tuple(map(int, stdin.split()[-1].split(' ')))\n\n    solutions = 0\n\n    for i in range(0, 2 ** len(k)):\n        switches = bin(i)[2:].zfill(len(k))\n        on = sum(k[i] for i in range(len(k)) if switches[i] == '1')\n        if on == p[0] % 2:\n            for j in range(0, len(k)):\n                if switches[j] == '0':\n                    continue\n                if switches[j] == '1':\n                    solutions += 1\n\n    return solutions"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    k = stdin.count('1')\n    l = stdin.split('\\n')\n    l.remove('')\n    l = [list(map(int, x.split())) for x in l]\n    c = 0\n    for i in l:\n        c += i.count(k)\n    return str(c)"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    switch_states = [list(map(int, stdin.split())) for _ in range(N)]\n    bulb_states = [list(map(int, stdin.split())) for _ in range(M)]\n\n    switch_bulb_states = [bulb_states[idx] + [switch_states[idx][idx]]\n                          for idx in range(M)]\n    on_states = [sum(switch_states[idx]) % 2 for idx in range(N)]\n    off_states = [len(switch_states[idx]) % 2 for idx in range(N)]\n\n    count = 0\n    for switch_states in switch_bulb_states:\n        for idx in range(M):\n            if on_states[idx] == 1:\n                if sum(switch_states[:idx + 1]) % 2 == 1:\n                    count += 1\n                    break\n            elif off_states[idx] == 1:\n                if sum(switch_states[idx:]) % 2 == 1:\n                    count += 1\n                    break\n    return count\n\nassert(solution('''2 2\n2 1 2\n1 2''') == '1')\nassert(solution('''2 2\n2 1 2\n1 2''') == '1')\nassert(solution('''2 2\n2 1 2\n1 2''') == '1')\nassert(solution('''2 3\n2 1 2 3\n1 2\n2 1 2''') == '1')\nassert(solution('''2 3\n2 1 2 3\n1 2\n1 1 1''') == '0')\nassert(solution('''3 3\n3 1 3\n3 1 3\n2 1 2\n1 1 1\n2 1 2\n1 1 1''') == '0')\nassert(solution('''5 3\n3 1 3 5 2\n3 1 3\n2 1 2\n1 1 1\n2 1 2\n1 1 1''') == '4')\nassert(solution('''5 3\n3 1 3 5 2\n3 1 3\n2 1 2\n1 1 1\n2 1 2\n1 1 1''') == '4')\nassert(solution('''5 3\n3 1 3 5 2\n3 1 3\n2 1 2\n1 1 1\n2 1 2\n1 1 1''') == '4')\nassert(solution('''3 2\n2 1 2\n2 1 2\n1 1 1''') == '0')\nassert(solution('''3 2\n2 1 2\n2 1 2\n1 1 1''') == '0')\nassert(solution('''5 4\n1 1 1 1 1\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n''') == '0')\n'''\nassert(solution('''5 3\n2 1 2 3 1\n1 2\n1 2\n2 1 2\n2 1 2\n1 1 1\n2 1 2\n1 1 1\n''') == '2')\n'''\nassert(solution('''5 4\n1 1 1 1 1\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n''') == '0')\nassert(solution('''5 5\n1 1 1 1 1\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n''') == '0')\nassert(solution('''5 4\n1 1 1 1 1\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n''') == '4')\nassert(solution('''5 4\n1 1 1 1 1\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n''') == '4')\nassert(solution('''5 4\n1 1 1 1 1\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n''') == '4')\nassert(solution('''5 5\n1 1 1 1 1 1\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n''') == '0')\nassert(solution('''5 5\n1 1 1 1 1 1\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n''') == '4')\nassert(solution('''5 5\n1 1 1 1 1 1\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n''') == '4')\nassert(solution('''5 6\n1 1 1 1 1 1 1\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n2 1 2\n''') == '0')\nassert(s"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n'''\n"
    },
    {
        "number": 4075,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    (N, M) = list(map(int, stdin.split()))\n    (k1, k2,..., kM) = list(map(int, stdin.split()))\n    (p1, p2,..., pm) = list(map(int, stdin.split()))\n\n    # partition the bulbs into 'on' and 'off'\n    on = []\n    off = []\n    for i in range(1, N + 1):\n        if p1 % 2 == (k1 % 2 + 1):\n            on.append(i)\n        else:\n            off.append(i)\n\n    # calculate the number of possible combinations\n    def combination(n, m):\n        if m == 0:\n            return 1\n        elif n < m:\n            return 0\n        else:\n            return combination(n - 1, m) + combination(n - 1, m - 1)\n\n    # print the number of possible combinations\n    print(combination(N, M))\n\"\"\"\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(1 / (2 * 3.141592653589793) * 2 * (3.141592653589793)**2 *\n               (3.141592653589793 / 180) * (3.141592653589793)**2 *\n               (1 / 180) * (1 / 60) * (1 / 120))\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [int(i) for i in stdin.split()]\n    hour_hand = input_list[0]\n    minute_hand = input_list[1]\n    hour_hand_rotation_time = input_list[2]\n    minute_hand_rotation_time = input_list[3]\n\n    hour_hand_rotation_time_in_seconds = hour_hand_rotation_time * 3600\n    minute_hand_rotation_time_in_seconds = minute_hand_rotation_time * 60\n\n    distance_between_hands_in_seconds = hour_hand_rotation_time_in_seconds + minute_hand_rotation_time_in_seconds\n\n    hand_pairs_to_unit_conversion = distance_between_hands_in_seconds / 2\n\n    return '{:.9f}'.format(hand_pairs_to_unit_conversion)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    F = (2 * H + M) / 12\n    L = F * B / 2\n    return str(round(L, 9))"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a,b,h,m = map(int, stdin.split())\n    for i in range(10):\n        if abs(a-b) > h:\n            a -= 1\n        else:\n            b += 1\n    for i in range(60):\n        if abs(m-i) > 59:\n            m -= 1\n        else:\n            i += 1\n    return \"{:.12f}\".format(abs(a-b) + abs(m-i))"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    \n    # The distance between the ends of the hands in units of centimeters\n    dist = (A + B) / 2 * (360 / 12)\n    \n    # The time taken to rotate the minute hand\n    mins = (12 * H) + M\n    \n    # The time taken to rotate the hour hand\n    hrs = (mins / 60) * 360\n    \n    # The final answer\n    answer = dist + mins + hrs\n    \n    return f'{answer:.6f}'"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split(' '))\n    H_seconds = 0\n    M_seconds = 0\n    H_m_seconds = H * 3600\n    M_m_seconds = M * 60\n    H_m_seconds += H_m_seconds / 2\n    M_m_seconds += M_m_seconds / 2\n    m_distance = A * M_m_seconds + B * H_m_seconds\n    h_distance = A * H_seconds + B * H_m_seconds\n    return f'{h_distance:.9f}'\n\nprint(solution(stdin.rstrip()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(x) for x in stdin.split()]\n    H %= 12\n    M %= 60\n    return \"%.0f\" % (A * 60 * H + B * M)\n\"\"\"\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write a program that takes an input of two positive integers H and M, followed by the coordinates of the two points on the hour and minute hands at the end of a 12-hour clock, and outputs the distance in centimeters between the unfixed endpoints of the two hands, rounded to nine decimal places.\n    \"\"\"\n    A, B, H, M = map(int, stdin.split(' '))\n    return str(round(A * H + B * M, 9))\n\nimport sys\n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    numerator = (((1.0 * H) + (1.0 * M)) % 12) * 60 + A\n    denominator = (A + (1.0 * H))\n    return \"{:.11f}\".format(numerator / denominator)\n"
    },
    {
        "number": 4076,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a,b,h,m = map(int, stdin.split())\n    c,d = -a/2,-b/2\n    return abs(c*60 + d - (h*60 + m)*2)"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split(' '))\n\n    s = list(map(int, stdin.strip().split(' ')))\n\n    left = 0\n    right = n - 1\n    count = 0\n    while left <= right:\n        if s[left] + s[right] == m:\n            count += 1\n            right -= 1\n        elif s[left] + s[right] < m:\n            left += 1\n        else:\n            right -= 1\n    return count\n\nassert(solution('1 2 3 1 2 3 1 2 3 1 2 3 1 2 3') == 8)\nassert(solution('1 4 5 60 4') == 8)\nassert(solution('3 1') == 6)\nassert(solution('15 2') == 97)\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    res = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[i] <= m <= a[j]:\n                res += 1\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    left, right, counter = 0, n - 1, 0\n    while left < right:\n        mid = left + (right - left) // 2\n        if A[mid] == m:\n            counter += (right - mid)\n            left = mid + 1\n        elif A[mid] < m:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return str(counter)\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n    # try:\n    #     inputs = [int(line) for line in stdin.split('\\n')]\n    # except ValueError:\n    #     raise ValueError(\"Input is not an integer\")\n    #\n    # n, m = inputs\n    # a = [int(line) for line in stdin.split('\\n')]\n    #\n    # table = sorted(a)\n    #\n    # c = 0\n    #\n    # for i in range(n):\n    #     if i+1 < n:\n    #         if table[i+1] == table[i] + 1:\n    #             c += 1\n    #     if i+1 < n and i+2 < n:\n    #         if table[i+1] == table[i] + 2:\n    #             c += 1\n    # return str(c)\n    n, m = list(map(int, stdin.split('\\n')[0].split(' ')))\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    m = int(m)\n\n    table = sorted(a)\n    c = 0\n\n    for i in range(n):\n        if i + 1 < n:\n            if table[i + 1] == table[i] + 1:\n                c += 1\n        if i + 1 < n and i + 2 < n:\n            if table[i + 1] == table[i] + 2:\n                c += 1\n    return str(c)\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(1, len(a) - 1):\n        for j in range(i + 1, len(a)):\n            if a[i] < a[j] < a[i - 1] or a[i] > a[j] > a[i - 1]:\n                count += 1\n\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    n = len(a)\n    a.sort()\n\n    counter = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % 2 == m:\n                counter += 1\n\n    return str(counter)"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    nums = [int(x) for x in stdin.split()]\n    return str(m * 2 - solution_b(n, nums))\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin: stdin[0].split(' ') = [stdin[0]]\n    for i in range(len(stdin[0].split(' '))):\n        stdin[0].split(' ')[i] = int(stdin[0].split(' ')[i])\n    stdin[1] = int(stdin[1])\n    '''\n    stdin = stdin[0].split(' ')\n    for i in range(len(stdin)):\n        stdin[i] = int(stdin[i])\n\n    n = stdin[0]\n    m = stdin[1]\n\n    sorted_a = sorted(stdin[2:])\n    print(sorted_a)\n    #print(sorted_a[n//2])\n\n    count = 0\n    for i in range(len(sorted_a)-1):\n        if sorted_a[i] == m:\n            count += 1\n    #print(count)\n\n    return count"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4077,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n\nimport sys\nsys.stdin = open('input.txt')\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = [map(int, stdin.split()) for _ in range(m)]\n    b = [0] * n\n    for s in l:\n        l, r = s\n        b[l - 1:r] = [-x for x in b[l - 1:r]]\n    print(max(b) - min(b))\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    segments.sort()\n    b = [0]*n\n    for l, r in segments:\n        for i in range(l, r):\n            b[i] += 1\n            b[i] -= 1\n    return str(max(map(lambda x: x[0]-x[1], zip(b, b[1:]))) if b else 0)\nprint(solution(input()))\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, m = stdin.split()\n    a = [int(a_i) for a_i in a.split()]\n    m = int(m)\n    segments = []\n    for _ in range(m):\n        l, r = stdin.split()\n        l = int(l)\n        r = int(r)\n        segments.append((l, r))\n    print(max(a[l:r] for l, r in segments) - min(a[l:r] for l, r in segments))\n    return \"Y\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a hard problem. There are no examples to solve.\n    https://en.wikipedia.org/wiki/Maximum_subarray_problem\n    \"\"\"\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    seg = [list(map(int, stdin.split())) for _ in range(m)]\n    d = []\n\n    def f(a, t):\n        for s in seg:\n            l, r = s[0]\n            if t[l - 1] < a[l - 1] and t[r - 1] > a[r - 1]:\n                return f(a, t[:l - 1] + [max(a[l - 1], a[r - 1])] + t[r:])\n        return t\n\n    for i in range(n):\n        d.append(f(arr, [arr[i]]))\n    return str(max(d) - min(d))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    res = []\n\n    for _ in range(m):\n        l, r = list(map(int, stdin.split()))\n        res.append(max(a[l - 1:r]) - min(a[l - 1:r]))\n\n    return \"\\n\".join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(x) for x in stdin.strip().split()]\n    n, m = [int(x) for x in stdin.strip().split()]\n    segments = []\n    for _ in range(m):\n        l, r = [int(x) for x in stdin.strip().split()]\n        segments.append((l, r))\n    res = 0\n    return str(res)\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.splitlines()[1].split()\n    n = int(arr[0])\n    m = int(arr[1])\n    a = []\n    for i in range(n):\n        a.append(int(arr[i + 2]))\n    segments = []\n    for i in range(m):\n        segments.append([int(arr[i * 2 + 2]), int(arr[i * 2 + 3])])\n    r = []\n    for i in range(m):\n        r.append([int(arr[i * 2 + 2]), int(arr[i * 2 + 3])])\n    r.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(n):\n        if (a[i] - min(a[r[0][0]:r[0][1]])) > ans:\n            ans = (a[i] - min(a[r[0][0]:r[0][1]]))\n    print(ans)\n    print(len(r))\n    for i in range(len(r)):\n        print(*r[i], sep=\" \")\n"
    },
    {
        "number": 4078,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def all_segments_intersect(segments, point) -> bool:\n        for s in segments:\n            if s[0] <= point <= s[1]:\n                return True\n        return False\n\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    segments = sorted(segments)\n\n    intersections = 0\n\n    current_min = float('inf')\n    current_max = float('-inf')\n\n    for i in range(n):\n        if intersections == 0:\n            if all_segments_intersect(segments, i):\n                intersections += 1\n                current_min = min(current_min, a[i])\n                current_max = max(current_max, a[i])\n\n            if intersections == m:\n                return str(abs(current_max - current_min))\n\n        else:\n            if not all_segments_intersect(segments, i):\n                intersections -= 1\n                current_min = min(current_min, a[i])\n                current_max = max(current_max, a[i])\n\n            if intersections == m:\n                return str(abs(current_max - current_min))\n\n    return '0'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline().strip())\n    for _ in range(count):\n        l = stdin.readline().strip()\n        prev = l[0]\n        count = 1\n        for c in l[1:]:\n            if c == prev:\n                count += 1\n            else:\n                if count >= 2:\n                    print(\"Yes\")\n                else:\n                    print(\"No\")\n                prev = c\n                count = 1\n        if count >= 2:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\""
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    strings = stdin[1:]\n    for string in strings:\n        isDiverse = False\n        string = string.lower()\n        for i in range(1, len(string)):\n            if string[i] == string[i-1]:\n                isDiverse = True\n                break\n        if isDiverse:\n            print('Yes')\n        else:\n            print('No')\n    return ''\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\""
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        string = stdin.readline().strip()\n        is_diverse = True\n        for i in range(1, len(string)):\n            if string[i - 1] == string[i]:\n                is_diverse = False\n        print(\"Yes\" if is_diverse else \"No\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    \n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for i in range(n)]\n    result = []\n    for string in strings:\n        if len(set(string))!= len(string):\n            result.append(\"No\")\n        else:\n            result.append(\"Yes\")\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    diverse = [set(stdin.lower()) for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(diverse[i] & diverse[j]) == len(diverse[i]):\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    return \"\""
    },
    {
        "number": 4079,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution('''5 4\n2 -2 3 1 2\n1 3\n4 5\n2 5\n1 3\n''') == '6')\n\nassert(solution('''5 4\n2 -2 3 1 4\n3 5\n3 4\n2 4\n2 5\n''') == '7')\n\nassert(solution('''1 0\n1000000\n''') == '0')\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = tuple(map(int, stdin.split()))\n    a = tuple(map(int, stdin.split()))\n    segments = tuple(map(lambda s: tuple(map(lambda i: int(i) - 1, s.split())), stdin.strip().split('\\n')[1:]))\n    solution(n, m, a, segments)\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n\n    d = -float('inf')\n    ans = 0\n\n    for _ in range(m):\n        l, r = [int(i) for i in stdin.split()]\n\n        res = [i for i in a[l - 1:r]]\n\n        d = max(d, max(res) - min(res))\n        ans += 1\n\n    return str(d)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    subset = [[int(x) for x in stdin.split()] for _ in range(m)]\n    # subset = [int(x) for x in stdin.split()]\n    b = [0] * n\n    for i, (l, r) in enumerate(subset):\n        b[l - 1] -= 1\n        b[r] += 1\n    return str(max(b) - min(b))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    segments = [map(int, stdin.split(' ')) for _ in range(m)]\n    a_res = a[:]\n    for segment in segments:\n        a_res[segment[0]-1:segment[1]] = [x - 1 for x in a_res[segment[0]-1:segment[1]]]\n    return str(max(a_res) - min(a_res))\n\nimport sys"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        segments.append([l, r])\n    best = float('-inf')\n    best_answer = None\n    for i in range(1, n + 1):\n        a[i] -= 1\n        for j in range(m):\n            if segments[j][0] <= i and segments[j][1] >= i:\n                a[i] = max(a[i], a[segments[j][0]] - 1)\n                a[i] = min(a[i], a[segments[j][1]] + 1)\n        answer = max(best, a[i]) - min(best, a[i])\n        if answer > best:\n            best = answer\n            best_answer = i\n    return str(best)\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    subsets = []\n    for _ in range(m):\n        l, r = map(int, stdin.readline().split())\n        subsets.append((l, r))\n    d = 0\n    for i in range(n):\n        if a[i] > 0:\n            break\n        for l, r in subsets:\n            if l <= i < r:\n                a[i] -= 1\n                d = max(d, a[i])\n                break\n    return str(d)\n\nimport sys\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split(\" \")]\n    a = [int(s) for s in stdin.split(\" \")]\n    subsets = []\n    for _ in range(m):\n        l, r = [int(s) for s in stdin.split(\" \")]\n        subsets.append([l, r])\n    \n    # START YOUR CODE HERE\n    b = [0]*n\n    for l, r in subsets:\n        for i in range(l-1, r):\n            b[i] -= 1\n    max_b = max(b) - min(b)\n    return str(max_b)"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = [list(map(int, stdin.split())) for _ in range(m)]\n\n    result = 0\n    for i in range(m):\n        for j in range(i + 1, m):\n            l1, r1 = segments[i]\n            l2, r2 = segments[j]\n            if l1 <= r2 and r1 >= l2:\n                a[l1:r1 + 1] = [x - 1 for x in a[l1:r1 + 1]]\n                a[l2:r2 + 1] = [x + 1 for x in a[l2:r2 + 1]]\n                result = max(result, max(a) - min(a))\n    return str(result)\n\n\nsolution('5 4')\nsolution('4 4')\nsolution('1 0')\nsolution('5 0')\nsolution('1000000')\n\n'''\n"
    },
    {
        "number": 4080,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    s = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        s.append((l, r))\n    s.sort(key = lambda x: x[1])\n    b = [0 for _ in range(n)]\n    for i in range(n):\n        l, r = s[i]\n        if l > i:\n            b[i] = -1\n            continue\n        for j in range(i, r):\n            b[j] = max(b[j], b[i] + a[j])\n    return str(b[-1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n-----Solutions-----\n\"\"\"\nfrom typing import List\n\nfrom common.tools import check_solution_custom_assert\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: your code here\n    pass\n\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n\n    if len(arr) == 1:\n        return str(1)\n\n    curr = arr[0]\n    max_len = 1\n    for i in range(1, len(arr)):\n        if arr[i] > curr:\n            if i - max_len > max_len:\n                max_len = i - max_len\n            curr = arr[i]\n        elif arr[i] < curr:\n            max_len = 1\n            curr = arr[i]\n\n    return str(max_len + 1)\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIn the second example the longest increasing sequence with 1 element is the only element in the input.\n\nIn the third example the longest increasing sequence with 3 elements is the sequence 1, 2, 3.\n\nIn the fourth example the longest increasing sequence with 4 elements is the sequence 1, 2, 3, 4.\n\nIn the fifth example the longest increasing sequence with 7 elements is the sequence 1, 2, 3, 4, 5, 6, 7.\n\nIn the sixth example the longest increasing sequence with 8 elements is the sequence 1, 2, 3, 4, 5, 6, 7, 8.\n\n\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The task can be described as follows:\n\n    You are given a sequence $a$ consisting of $n$ integers. All these integers are distinct, each value from $1$ to $n$ appears in the sequence exactly once.\n    You are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).\n    Note that the sequence is not necessarily increasing.\n    For example, in the sequence $[2, 1, 5, 4, 3]$ the answer is $4$ (you take $2$ and the sequence becomes $[1, 5, 4, 3]$, then you take the rightmost element $3$ and the sequence becomes $[1, 5, 4]$, then you take $4$ and the sequence becomes $[1, 5]$ and then you take $5$ and the sequence becomes $[1]$, the obtained increasing sequence is $[2, 3, 4, 5]$).\n\n    You are given a sequence $a$ consisting of $n$ integers. All these integers are distinct, each value from $1$ to $n$ appears in the sequence exactly once.\n    You are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).\n    Note that the sequence is not necessarily increasing.\n    For example, in the sequence $[2, 1, 5, 4, 3]$ the answer is $4$ (you take $2$ and the sequence becomes $[1, 5, 4, 3]$, then you take the rightmost element $3$ and the sequence becomes $[1, 5, 4]$, then you take $4$ and the sequence becomes $[1, 5]$ and then you take $5$ and the sequence becomes $[1]$, the obtained increasing sequence is $[2, 3, 4, 5]$.\n\n    You are given a sequence $a$ consisting of $n$ integers. All these integers are distinct, each value from $1$ to $n$ appears in the sequence exactly once.\n    You are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).\n    Note that the sequence is not necessarily increasing.\n    For example, in the sequence $[2, 1, 5, 4, 3]$ the answer is $4$ (you take $2$ and the sequence becomes $[1, 5, 4, 3]$, then you take the rightmost element $3$ and the sequence becomes $[1, 5, 4]$, then you take $4$ and the sequence becomes $[1, 5]$ and then you take $5$ and the sequence becomes $[1]$, the obtained increasing sequence is $[2, 3, 4, 5]$.\n\n    You are given a sequence $a$ consisting of $n$ integers. All these integers are distinct, each value from $1$ to $n$ appears in the sequence exactly once.\n    You are making a sequence of moves. During each move you must take either the leftmost element of the sequence or the rightmost element of the sequence, write it down and remove it from the sequence. Your task is to write down a strictly increasing sequence, and among all such sequences you should take the longest (the length of the sequence is the number of elements in it).\n    Note that the sequence is not necessarily increasing.\n    For example, in the sequence $[2, 1, 5, 4, 3]$ the answer is $4$ (you take $2$ and the sequence becomes $[1, 5, 4, 3]$, then you take the rightmost element $3$ and the sequence becomes $[1, 5, 4]$, then you take $4$ and the sequence becomes $[1, 5]$ and then you take $5$ and the sequence becomes $[1]$, the obtained increasing sequence is $[2, 3, 4, 5]$.\n\n    Input/Output\n    [input] integer n\n    The sequence $a$ consisting of $n$ integers. All these integers are distinct, each value from $1$ to $n$ appears in the sequence exactly once.\n    The sequence $a$ is given on a single line.\n    [output] integer k\n    The maximum number of elements in a strictly increasing sequence you can obtain.\n    [output] string s\n    The longest sequence that you can obtain by moving left or right by the sequence $a$.\n    \"\"\"\n    n = stdin.readline().strip()\n    a = list(map(int, stdin.readline().split()))\n    increasing = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] < a[i]:\n                increasing[i] = max(increasing[i], increasing[j] + 1)\n    print(max(increasing))\n    ans = ''\n    for i in increasing:\n        if i > 1:\n            ans += 'R'\n        else:\n            ans += 'L'\n    print(ans)\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    n = int(stdin_list[0])\n    a = [int(x) for x in stdin_list[1:]]\n    k = 0\n    while k < n - 1:\n        left = 0\n        right = k + 1\n        while right < n and a[left] < a[right]:\n            left = right\n            right = left + 1\n        if right == n:\n            k += 1\n            continue\n        else:\n            if left == k:\n                k += 1\n                continue\n            elif left > k:\n                a[k], a[left] = a[left], a[k]\n                if k < n - 1:\n                    k += 1\n                    continue\n                else:\n                    break\n            else:\n                a[left], a[right] = a[right], a[left]\n                k = left\n    for i in range(n):\n        print(a[i], end=' ')\n    return\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 1 5 4 3\n   ... 1 3 5 4 3''')\n    '4'\n    >>> solution('''7\n   ... 1 3 5 6 7 4 2\n   ... 1 3 5 6 7 4 2''')\n    'LRLRLLL'\n    >>> solution('''3\n   ... 1 2 3\n   ... 1 2 3''')\n    'LLL'\n    >>> solution('''4\n   ... 1 2 4 3\n   ... 1 2 4 3''')\n    'LLRL'\n    >>> solution('''7\n   ... 1 3 5 6 7 4 2\n   ... 1 3 5 6 7 4 2''')\n    'LRLRLLL'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    m = len(a)\n    i, j, r, s = 0, 0, 0, [0] * m\n\n    while j < m:\n        if i < m - 1:\n            if a[i] > a[j]:\n                r = max(r, j - i)\n                s[j] = 'L'\n                j += 1\n            else:\n                i += 1\n        elif j < m - 1:\n            r = max(r, j - i)\n            s[j] = 'R'\n            j += 1\n        else:\n            break\n\n    return str(r)\n"
    },
    {
        "number": 4081,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    nums = list(map(int, lines[1].split()))\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i] > nums[j]:\n                cur_len = j - i\n                if cur_len > max_len:\n                    max_len = cur_len\n    return str(max_len)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    a = stdin.strip()\n    a = [int(i) for i in a.split()]\n    r = len(a) - 1\n    l = 0\n    m = 0\n    while l < r:\n        if a[l] < a[l + 1]:\n            l += 1\n        elif a[l] > a[l + 1]:\n            r -= 1\n        else:\n            l += 1\n        if m < l - r + 1:\n            m = l - r + 1\n    return str(m)\n\n\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    best = 0\n    for i in range(n):\n        if a[i] > a[best]:\n            best = i\n    return str(best - n + 1)"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = list(map(int, stdin.readline().split()))\n\n    l, r = 0, 0\n    m = 0\n    while r < n:\n        while r < n and seq[r] < seq[l]:\n            r += 1\n        m = max(m, r - l)\n\n        while r < n and seq[l] <= seq[r]:\n            l += 1\n        m = max(m, r - l + 1)\n\n    return str(m)"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    sub_a = [a[0]]\n    for x in a[1:]:\n        if x > sub_a[-1]:\n            sub_a.append(x)\n        else:\n            sub_a.append(sub_a[-1])\n    return str(len(sub_a) - 1)\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    left = 0\n    right = 0\n    best = 0\n    while right < n:\n        best = max(best, right - left + 1)\n        if a[right] < a[left]:\n            right += 1\n        else:\n            left += 1\n    return str(best)\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    stack = []\n    i, j = 0, 0\n    ans = 0\n    while i < len(a):\n        if len(stack) == 0 or a[i] >= a[stack[-1]]:\n            stack.append(i)\n            i += 1\n        else:\n            j = stack.pop()\n            if len(stack) == 0:\n                ans = max(ans, i-j)\n            else:\n                ans = max(ans, i-stack[-1])\n    while len(stack) > 0:\n        j = stack.pop()\n        if len(stack) == 0:\n            ans = max(ans, i-j)\n        else:\n            ans = max(ans, i-stack[-1])\n    return str(ans)\n\n\n\nsolution(\"5\")\n"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution(\"\") # \"\"\nsolution(\"1 2 5 3 4\") # \"4\"\nsolution(\"2 4 5 3 4\") # \"2\"\nsolution(\"2 2 2 2 2 2 2\") # \"3\"\nsolution(\"6 5 4 3 2 4 3\") # \"2\"\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(\" \")]\n\n    # srt(arr)\n    # x=a[0]\n    # y=a[1]\n    # if x<=y:\n    #     return 2\n    # l=2\n    # r=n-1\n    # while l<=r:\n    #     mid=(l+r)//2\n    #     if arr[mid]<=arr[mid-1] and arr[mid]<=arr[mid+1]:\n    #         l=mid+1\n    #     elif arr[mid]>arr[mid-1] and arr[mid]>arr[mid+1]:\n    #         r=mid-1\n    #     elif arr[mid]<arr[mid-1] and arr[mid]>arr[mid+1]:\n    #         return mid+1\n    #     else:\n    #         return mid\n\n    def strictly_increasing(a):\n        if len(a) <= 1:\n            return True\n        else:\n            x = a[0]\n            y = a[1]\n            if x <= y:\n                return False\n            l = 2\n            r = len(a) - 1\n            while l <= r:\n                mid = (l + r) // 2\n                if a[mid] <= a[mid - 1] and a[mid] <= a[mid + 1]:\n                    l = mid + 1\n                elif a[mid] > a[mid - 1] and a[mid] > a[mid + 1]:\n                    r = mid - 1\n                elif a[mid] < a[mid - 1] and a[mid] > a[mid + 1]:\n                    return False\n            return True\n\n    x = 1\n    y = n - 1\n    while x <= y:\n        mid = (x + y) // 2\n        if strictly_increasing(arr[:mid + 1]):\n            x = mid + 1\n        elif strictly_increasing(arr[mid:]):\n            y = mid - 1\n    return y + 1\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    result = 0\n\n    for i in range(n):\n        if a[i] % 2:\n            a[i] = math.floor(a[i] / 2) + 1\n            result += a[i] - 1\n\n    return str(result)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n    l = []\n    for i in range(n):\n        while a[i] > 0:\n            a[i] -= 2\n            l.append(a[i])\n    l.sort()\n    print(l[k - 1])\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n            count += 1\n    if count >= k:\n        return str(0)\n    return str(len(a) - count)"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0] * (k + 1)\n    dp[0] = 0\n    for i in range(k + 1):\n        if i == 0:\n            dp[i] = 0\n            continue\n        if i == 1:\n            dp[i] = abs(a[0] - a[1])\n            continue\n        dp[i] = abs(a[i - 1] - a[i])\n    for i in range(2, n):\n        for j in range(k + 1):\n            if j == 0:\n                dp[j] = 0\n                continue\n            if j == 1:\n                dp[j] = min(dp[j], abs(a[i - 1] - a[i]), abs(a[i - 1] - a[i - 2]))\n                continue\n            dp[j] = min(dp[j], min(abs(a[i - 1] - a[i]), abs(a[i - 2] - a[i - 1]), abs(a[i - 2] - a[i - 3])))\n    return str(dp[k])\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    print(min_operations(a, n, k))\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n\n    a = [int(x) for x in stdin.split()]\n\n    def is_possible(a: List[int], k: int) -> bool:\n        return sum(a) >= k * 2\n\n    nums = sorted(a)\n    res = 0\n\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            if nums[i] == 0:\n                continue\n\n            res += nums[i] // 2\n\n    if is_possible(a, k):\n        res += k\n\n    return str(res)\n\n\nassert (solution(stdin)) == \"0\"\nassert (solution(\"1 2 2 4 5\")) == \"1\"\nassert (solution(\"1 2 3 3 3\")) == \"2\"\nassert (solution(\"1 2 3 3 3\")) == \"0\"\nassert (solution(\"5 3\")) == \"1\"\nassert (solution(\"5 3\")) == \"0\"\nassert (solution(\"5 3\")) == \"0\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    l = len(arr)\n    # print(n, k, l, arr)\n\n    # 1. \u041f\u043e\u0434\u0433\u043e\u0442\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432\n    # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u043a\u043e\u043b-\u0432\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0434\u0435\u043b\u0435\u043d\u0438\u044f\n    for i in range(len(arr)):\n        arr[i] += 1\n    # print(arr)\n\n    # 2. \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435\n    count = 0\n    for i in range(l):\n        count += arr.count(arr[i])\n\n    # 3. \u0415\u0441\u043b\u0438 \u043a\u043e\u043b-\u0432\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0433\u043e\n    if count >= k:\n        return 0\n\n    # 4. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0439 \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0443\n    div = 0\n    for i in range(1, l+1):\n        for j in range(i, l+1, i):\n            div += 1\n\n    # 5. \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0446\u0438\u043a\u043b\u043e\u0432 \u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435\n    # \u0443\u043c\u043d\u043e\u0436\u0430\u0435\u043c \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043d\u0430 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0443\n    cycles = int((k-count) / div)\n\n    # 6. \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439\n    op = cycles * 2 * div\n\n    return op\n\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys\nfrom math import floor"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(min_operations(a, k))\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    l = len(a)\n    res = 1\n    for i in range(1, l):\n        res += (a[i-1] // 2)\n    if l % 2 == 1:\n        res += (a[-1] // 2)\n    return str(res)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[1])\n    B = int(stdin[2])\n    count = 0\n    for _ in range(1000000):\n        count += A\n        count += B\n    return str(count)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Compute the number of blue balls that will be there among the first N balls in the row of balls.\n    '''\n    n, a, b = tuple(map(int, stdin.split()))\n    # compute bbbrrrrb\n    bbbrrrrb = b * b * b * b\n    # number of blue balls is bbbrrrrb - (a + b)\n    return str(bbbrrrrb - (a + b))\n"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    blue, red = [int(x) for x in stdin.split(' ')]\n    return str(blue)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    return str(int(a) - int(b))"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    red_balls = 0\n    blue_balls = N\n    for _ in range(1, N):\n        if red_balls == A:\n            blue_balls -= 1\n        else:\n            red_balls += 1\n        blue_balls += 1\n    return str(blue_balls)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_balls, a, b = [int(n) for n in stdin.strip().split(\" \")]\n    ball_combinations = get_ball_combinations(num_balls, a, b)\n    return str(len(ball_combinations))\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = (int(x) for x in stdin.split())\n    return str(N * A // B)"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.split()]\n    print(int(min(N - A, B) / 2))"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n < a:\n        return str(a - n)\n    elif n < b:\n        return str(b - n)\n    else:\n        return \"0\"\n\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    N, A, B = map(int, stdin.split())\n    for _ in range(N):\n        if count % 4 == 0:\n            count = 0\n            count += A + B\n        else:\n            count += 1\n    return str(count // 4)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split(' ')))\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        d = list(map(int, stdin.readline().strip().split(' ')))\n        if n < len(d):\n            print(-1)\n            continue\n        m = d[0]\n        if l[0]!= 1:\n            m = max(m, l[0])\n        for i in range(1, len(l)):\n            m = max(m, l[i])\n            if d[i] < m:\n                m = d[i]\n        print(m)"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(d) for d in stdin.readline().split()]\n    if len(divisors) == 1:\n        return str(divisors[0])\n    divisors.sort()\n    for i in range(1, n):\n        if i not in divisors:\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        divisors = [int(x) for x in stdin.readline().strip().split()]\n        print(-1) if get_min_divisor(n, divisors) is None else print(get_min_divisor(n, divisors))\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    n = int(stdin.readline())\n    d = [int(d) for d in stdin.readline().split()]\n    d.sort()\n    ans = d[0]\n    if d.count(ans) == len(d) - 1:\n        return '-1'\n    for i in range(1, len(d)):\n        if d[i]!= ans:\n            ans += d[i]\n    return str(ans)\n\nassert(solution('''2\n8\n8 2 12 6 4 24 16 3''') == '48')\nassert(solution('''2\n7\n4 1 9 3 5 8 6 2''') == '7')\nassert(solution('''2\n6\n4 1 2 6 9 4 8 3''') == '2')\nassert(solution('''2\n5\n4 1 2 3 4 5''') == '3')\nassert(solution('''2\n5\n4 1 2 4 5''') == '3')\nassert(solution('''2\n5\n1 1 1 1 1''') == '-1')\nassert(solution('''2\n5\n1 2 1 1 1''') == '3')\nassert(solution('''2\n5\n1 2 2 2 2''') == '4')\nassert(solution('''2\n5\n1 2 2 2 1''') == '-1')\nassert(solution('''2\n5\n1 2 3 4 5''') == '4')\nassert(solution('''2\n5\n1 2 3 4 1''') == '-1')\nassert(solution('''2\n5\n1 2 3 3 3''') == '-1')\nassert(solution('''2\n5\n1 2 3 3 2''') == '4')\nassert(solution('''2\n5\n1 2 3 3 2 1''') == '-1')\nassert(solution('''2\n10\n1 2 2 2 2 2 3 3 3 3 4 4 4 4 5 5 5 5 5''') == '5')\nassert(solution('''2\n100\n
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n == 1:\n        return stdin.readline().strip()\n    a = set(map(int, stdin.readline().strip().split()))\n    d = map(int, stdin.readline().strip().split())\n    m = set(a)\n    c = set()\n    for i in d:\n        if i not in m:\n            c.add(i)\n        else:\n            m.remove(i)\n    if not m:\n        return \"-1\"\n    return min(m)\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return -1\n    ans = 0\n    for i in range(2, n):\n        if n % i == 0:\n            ans = i\n    return ans\n\nn = int(input())\ndivisors = [int(x) for x in input().split()]\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        d = stdin.readline().strip().split()\n        d = [int(i) for i in d]\n        d = sorted(d)\n        s = 0\n        n = len(d)\n        for i in range(n):\n            if d[i] < s:\n                if i > 0:\n                    s += d[i-1]\n            else:\n                s += d[i]\n        print(s)\n"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    divisors = [int(d) for d in stdin.readline().split()]\n\n    numbers = [set(divisors)]\n    for i in range(1, n):\n        for j in range(1, i+1):\n            if j * j > i:\n                break\n            if i % j == 0:\n                divisors = divisors[:j-1] + [i // j] + divisors[j-1:]\n                numbers.append(set(divisors))\n\n    for i in range(n):\n        divisors = numbers[i]\n        if len(divisors)!= len(set(divisors)):\n            return -1\n        if len(divisors) == len(set(divisors)) - 1:\n            return i+1"
    },
    {
        "number": 4085,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    while t > 0:\n        n = int(stdin)\n        while n > 0:\n            divs = list(map(int, stdin.split()))\n            ans = -1\n            for i in range(1, divs[0]):\n                if divs[i] == 1:\n                    ans = i\n                    break\n                if divs[i] % divs[0]!= 0:\n                    continue\n                else:\n                    while divs[i] % divs[0] == 0:\n                        divs[i] = divs[i] // divs[0]\n            print(ans)\n            t -= 1"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(el) for el in stdin.readline().strip().split()]\n    unique_arr = []\n    for el in arr:\n        if el not in unique_arr:\n            unique_arr.append(el)\n    return str(len(unique_arr)) + '\\n' +''.join([str(el) for el in unique_arr])\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = map(int, stdin.readline().split())\n    a = sorted(a)\n    count = 1\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            count += 1\n    print(count)\n    print(*a[-count:])\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    a = list(map(int, lines[0].split()))\n    print(len(list(filter(lambda x: a.count(x) > 1, a))))\n    print(*sorted(list(filter(lambda x: a.count(x) > 1, a))), sep=\" \")\n    return \"\"\n\nprint(solution(\"\"\"4\n1 5 5 1 6 1\n\"\"\".strip()))\n\nprint(solution(\"\"\"5\n2 4 2 4 4\n\"\"\".strip()))\n\nprint(solution(\"\"\"5\n6 6 6 6 6 6\n\"\"\".strip()))\n\nprint(solution(\"\"\"7\n8 1 8 1 8 1 8\n\"\"\".strip()))\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\n\"\"\"\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    array = list(map(int, stdin.split(' ')))\n\n    for i in array:\n        if array.count(i) > 1:\n            array.remove(i)\n\n    return str(len(array)) + '\\n' +''.join(map(str, array))"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    a = sorted(list(set(arr)))\n    if n <= 1:\n        return str(0)\n    else:\n        print(len(a))\n        return \" \".join(str(a[i]) for i in range(len(a) - 1, -1, -1))"
    },
    {
        "number": 4086,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort(reverse=True)\n    i = 0\n    result = 0\n    while i < len(a) - 1:\n        if a[i] == a[i+1]:\n            del a[i]\n            i -= 1\n        i += 1\n    return f'{len(a)}'\n\nprint(solution(None))\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(next_interesting_number(n))\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_interesting(a: int) -> bool:\n        if len(str(a)) % 4 == 0:\n            return True\n        return False\n    a = int(stdin.readline().strip())\n    res = 0\n    for n in range(a, pow(10, 11)):\n        if is_interesting(n):\n            res = n\n            break\n    return str(res)"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\nassert (solution('''432''')) == '''435'''\nassert (solution('''99''')) == '''103'''\nassert (solution('''237''')) == '''237'''\nassert (solution('''42''')) == '''44'''\nassert (solution('''432''')) == '''435'''\nprint(solution('''872'''))\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return 1\n    n = 1\n    while a < n:\n        n = n + 1\n        if a % 4 == 0:\n            n = n * 3\n    if a % 4 == 0:\n        n = n * 3\n    return n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_a = stdin.strip()\n    a = int(input_a)\n    result = a\n    while True:\n        result += 1\n        if sum(map(int, str(result))) % 4 == 0:\n            break\n    return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = [int(digit) for digit in str(n)]\n    n_sum = sum(digits)\n    if n_sum % 4 == 0:\n        return n\n    # If the sum of the digits is divisible by 4, then the sum of the digits\n    # is divisible by 4 by 4, therefore we can add 4 to n_sum to find the\n    # solution. If the sum of the digits is not divisible by 4, then there is\n    # no solution.\n    elif n_sum % 4!= 0:\n        return n + 4\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(next_interesting_number(a))\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    ans = 0\n    while True:\n        if sum(int(x) for x in str(a)) % 4 == 0:\n            ans = a\n            break\n        else:\n            a += 1\n\n    return str(ans)\n"
    },
    {
        "number": 4087,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    n = int(n)\n    if n % 4 == 0:\n        return str(n + 1)\n    else:\n        return str(n - 1)\n    pass"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline())\n    for case in range(1, num_cases + 1):\n        s = stdin.readline().strip()\n        b = stdin.readline().strip().split()\n        b = [int(i) for i in b]\n        b.sort()\n        m = len(b)\n        res = ''\n        for i in range(m):\n            if s[i]!= s[m-1]:\n                res += s[i]\n                for j in range(i+1, m):\n                    if s[j] > s[i]:\n                        res += s[j]\n                        break\n        print(f'Case #{case}: {res}')\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = [line.rstrip('\\n') for line in stdin.split('\\n')]\n    num_cases = int(lines[0])\n    test_cases = [lines[i + 1:i + 3] for i in range(num_cases)]\n    for test_case in test_cases:\n        s, m = test_case[0], int(test_case[1])\n        b = list(map(int, test_case[2:]))\n        d = {}\n        for i, c in enumerate(s):\n            if c not in d:\n                d[c] = i\n        b = sorted(b)\n        t = ''\n        for i in range(len(s)):\n            if i not in d:\n                t += s[i]\n            else:\n                t += str(b[d[i] - i])\n        print(t)\n        \nsolution(stdin)\n\n'''\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.readline().strip()\n    m = int(stdin.readline())\n    b = list(map(int, stdin.readline().strip().split()))\n    answer = []\n    for i in range(len(s)):\n        if b[0] == 0:\n            answer.append(s[:i] + s[i + 1:])\n            break\n        if i == len(s) - 1:\n            break\n        for j in range(i + 1, len(s)):\n            if j < len(s) and s[j] > s[i] and (b[j - i] - b[i]) == 1:\n                answer.append(s[:i] + s[j + 1:])\n                break\n    return \"\".join(answer)\n"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nn = int(stdin.readline().strip())\n\nfor _ in range(n):\n    s, m, b = [int(x) for x in stdin.readline().strip().split()]\n    b = [sum(abs(i - x) for i, x in enumerate(b[:m], 1)) for b in stdin.readlines()]\n    print(''.join(s[:b[0]] + sorted(s[b[0]:])[::-1]))"
    },
    {
        "number": 4088,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    n = int(stdin.split('\\n')[1])\n    b = list(map(int, stdin.split('\\n')[2].split(' ')))\n    return ''"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_range = 1000000000000001\n    num_as_char = list(string.ascii_lowercase)\n    first_names = list(string.ascii_lowercase)\n    second_names = [f\"{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    third_names = [f\"{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    four_names = [f\"{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    five_names = [f\"{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    six_names = [f\"{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    seven_names = [f\"{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    eight_names = [f\"{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    nine_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    ten_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    eleven_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    twelve_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    thirteen_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    fourteen_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    fifteen_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    sixteen_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    seventeen_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    eighteen_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    nineteen_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    twenty_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    twenty_one_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    twenty_two_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    twenty_three_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    twenty_four_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    twenty_five_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    twenty_six_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    twenty_seven_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in string.ascii_lowercase]\n    twenty_eight_names = [f\"{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{first}{last}\" for last in string.ascii_lowercase for first in"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    dog = stdin.strip()\n    return \"a\" if int(dog) % 26 == 0 else chr(ord('a') + int(dog) % 26 - 1)"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while i <= n:\n        if i % 26 == 0:\n            i += 1\n            continue\n        s = chr(ord('a') + (i % 26)) + chr(ord('a') + (i % 26))\n        print(s)\n        i += 1\n"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dogs = [chr(ord('a') + (i - 1) % 26) + chr(ord('a') + (i - 1) // 26) for i in range(n, n + 26 * 26)]\n    return dogs[n - 1]"
    },
    {
        "number": 4089,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return chr(ord('a') + (n - 1) % 26)"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nfrom typing import List, Tuple\n\nMAX_LEN = 10 ** 5\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the shortest text after at most one abbreviation.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    words = [stdin.readline().strip() for _ in range(n)]\n\n    min_len = 0\n\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            if j - i == len(words[i]) - len(words[j]) and all(\n                words[i][k] == words[j][k] for k in range(len(words[i]))\n            ):\n                min_len = max(min_len, len(words[i]) + len(words[j]) + 2)\n\n    return min_len\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.strip().split(' ')\n    if n == 1:\n        return len(words[0])\n    first_words = [words[0]]\n    for i in range(1, n):\n        if words[i].startswith(words[i - 1][-1]) and words[i - 1][-1].isupper():\n            first_words[-1] = words[i]\n        else:\n            first_words.append(words[i])\n    total_length = len(words[0])\n    for word in first_words:\n        total_length += len(word) - 1\n    return total_length\n\nprint(solution(input()))\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(n)]\n    words.sort(key=len)\n    words_set = set()\n    for i in range(n):\n        if words[i] not in words_set:\n            words_set.add(words[i])\n            for j in range(i + 1, n):\n                if len(words[i]) == len(words[j]):\n                    if words[i]!= words[j] and words[i].startswith(words[j][0].upper()) and words[j].startswith(words[i][0].upper()):\n                        words[i] = words[i][0].upper() + words[i][1:]\n                        words[j] = words[j][0].upper() + words[j][1:]\n                        break\n    return''.join(words)\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n\nprint(solution(input()))\n"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def abbreviation(l, r):\n        l -= 1\n        r += 1\n        if l < 0:\n            return False\n        if r > len(words):\n            return False\n        if words[l]!= words[r]:\n            return False\n        if l == r - 1:\n            return True\n        if l + 1 == r:\n            return abbreviation(l + 1, r)\n        if words[l] == words[r] and words[l + 1] == words[r - 1]:\n            return abbreviation(l + 1, r - 1)\n        return False\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    print(abbreviation(0, n - 1))\n    return ''"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes a string consisting of words separated by a space character.\n    Returns the string obtained after applying an abbreviation.\n    '''\n    return abbreviation(stdin.split())\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = [stdin[i:i + n] for i in range(0, len(stdin), n)]\n    w = [w.split(' ') for w in words]\n    words = [''.join(w[i]) for i in range(len(w))]\n    print(words)\n    return str(len(max(words, key=len)))"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    A = [0] + A\n    \n    S = [0 for i in range(K+1)]\n    for i in range(1, K+1):\n        for j in range(1, N+1):\n            if i - A[j] >= 0:\n                S[i] = max(S[i], S[i-A[j]] + A[j])\n    return str(S[K])\n\nassert(solution(stdin) == '4000')\n\n\"\"\"\n\nN, K = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\nA.sort()\nA = [0] + A\n\nS = [0 for i in range(K+1)]\nfor i in range(1, K+1):\n    for j in range(1, N+1):\n        if i - A[j] >= 0:\n            S[i] = max(S[i], S[i-A[j]] + A[j])\n\nprint(S[K])\n\nres = [0 for i in range(K)]\nfor i in range(K):\n    for j in range(i, K):\n        if A[i] + A[j] > A[j + 1]:\n            res[j] = 1\n\nres = [str(x) for x in res]\nprint(' '.join(res))\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    n_problems = sum(a)\n    if n_problems % k!= 0:\n        return \"\"\n    n_days = n_problems // k\n    arr = [0] * n\n    arr[0] = a[0]\n    for i in range(1, n):\n        arr[i] = max(arr[i - 1], a[i])\n    res = 0\n    for i in range(n_days):\n        for j in range(k):\n            res += arr[i * k + j]\n    return str(res)\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n\n    max_profit = 0\n    curr_day = 0\n    days = []\n    while curr_day < n and len(days) < k:\n        days.append(a.index(max(a)))\n        max_profit += max(a)\n        a.remove(max(a))\n        curr_day += 1\n\n    return str(max_profit)\n\nprint(solution(input()))"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_problems, num_days = [int(x) for x in stdin.split()]\n    difficulties = [int(x) for x in stdin.split()]\n\n    # num_days, num_problems = [int(x) for x in stdin.split()]\n    # difficulties = [int(x) for x in stdin.split()]\n\n    solutions = [[0] * num_days for _ in range(num_problems)]\n    max_profit = 0\n    for i in range(1, num_problems):\n        diff_so_far = 0\n        for j in range(num_days):\n            diff_so_far = max(diff_so_far, solutions[i - 1][j] + difficulties[i])\n            solutions[i][j] = diff_so_far\n\n        max_profit = max(max_profit, diff_so_far)\n    return str(max_profit)\n\n\nassert(solution('8 3') == '20')\nassert(solution('5 1') == '1')\nassert(solution('4 2') == '4000')\nassert(solution('1 2000 2000 2') == '4000')\nassert(solution('2 3') == '2')\nassert(solution('2 4') == '2')\nassert(solution('2 1') == '1')\nassert(solution('2 2') == '1')\nassert(solution('2 3') == '1')\nassert(solution('2 4') == '1')\nassert(solution('2 5') == '1')\nassert(solution('3 1') == '1')\nassert(solution('5 1') == '1')\nassert(solution('1 1 1 1 1') == '1')\nassert(solution('1 1 1 1 1 1') == '1')\nassert(solution('1 1 1 1 1 1 1 1 1') == '1')\nassert(solution
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n\n    answer = []\n    for _ in range(k):\n        answer.append(0)\n\n    for i in range(n - k + 1):\n        dp = [0] * (k + 1)\n        for j in range(i, i + k):\n            dp[j % k] = max(dp[j % k], dp[(j - i) % k] + a[j])\n        answer[i % k] = max(dp)\n\n    return str(max(answer))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    ans = 0\n    k_th = k - 1\n    p_list = []\n    while k_th >= 0:\n        if k_th == 0:\n            ans += sum(a[:k])\n            k_th -= 1\n            continue\n        for i in range(n):\n            if i == 0:\n                p_list.append(a[i])\n            else:\n                if p_list[i-1] < a[i]:\n                    p_list.append(a[i])\n                    break\n        ans += sum(p_list)\n        p_list = []\n        k_th -= 1\n    return str(ans)"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    def dfs(days, profits, dp):\n        if days == k:\n            return profits\n        for i in range(1, n + 1):\n            if dp[days][i] is not None:\n                continue\n            if days == 0:\n                dp[days][i] = dfs(0, profits + [i], dp)\n            else:\n                dp[days][i] = max(dfs(days + 1, profits + [i], dp), dfs(days, profits + [i], dp))\n\n        return dp[days][i]\n\n    return''.join(str(x) for x in dfs(0, [], [[None for _ in range(n + 1)] for _ in range(k)]))\n\nassert(solution(input()) == '3 2 3')\nassert(solution(input()) == '5')\nassert(solution(input()) == '1 2')\nassert(solution(input()) == '4000')\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n > k:\n        return \"2 2\"\n    a = [int(x) for x in stdin.split()]\n    a.sort(reverse=True)\n    p = a[0]\n    l = 0\n    r = k\n    for i in range(1, n):\n        if p == a[i]:\n            p += a[i]\n        else:\n            l = i\n            r = i\n            break\n    if l == r:\n        return \"1 {}\".format(l + 1)\n    if p == a[-1]:\n        return \"2 {}\".format(l + 1)\n    while True:\n        if a[l] + a[r] < p:\n            r -= 1\n        elif a[l] + a[r] > p:\n            l += 1\n        else:\n            break\n    return \"2 {}\".format(l + 1)\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4091,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    profit = 0\n    for i in range(k):\n        profit = profit + max(a)\n        a.remove(max(a))\n    return profit\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution:\n    @param stdin: str\n    @return: str\n    \"\"\"\n    # @start-editable@\n\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(\" \")]\n\n    count = 0\n    s = sum(a)\n    if s == 0:\n        return count\n    else:\n        for i in range(len(a)):\n            if i == 0:\n                count += abs(a[i])\n            else:\n                if a[i] > 0:\n                    count += abs(a[i] - a[i - 1])\n                else:\n                    count += abs(a[i] + a[i - 1])\n\n    if count == 0:\n        return 0\n    else:\n        return count - 1\n\n    # @end-editable@"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # _ = int(stdin.readline())\n    # arr = sorted(list(map(int, stdin.readline().split())))\n    #\n    # diff = [arr[i] - arr[i-1] for i in range(1, len(arr))]\n    # res = diff.count(0)\n    #\n    # return str(res)\n    _ = int(stdin.readline())\n    arr = sorted(map(int, stdin.readline().split()))\n\n    min_count = 0\n    min_idx = len(arr) - 1\n    for i in range(len(arr) - 1):\n        if arr[i] + arr[i + 1] == 0:\n            min_count += 1\n            min_idx = i\n    return str(min_count + 1)"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    s = sum(a)\n    if s == 0:\n        return str(0)\n    if s % 2!= 0:\n        return str(1)\n\n    right_end = s // 2\n\n    right_end_set = set()\n    right_end_seen = set()\n\n    for i in range(n - 1, -1, -1):\n        right_end_set.add(right_end)\n        right_end_seen.add(right_end)\n        right_end = right_end - a[i]\n        if right_end == 0:\n            right_end = right_end_set.pop()\n        elif right_end < 0:\n            right_end = -1 - right_end\n\n    return str(max(right_end_seen) + 1)"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_of_elements = int(stdin.readline())\n    elements = stdin.readline().split()\n    elements = [int(el) for el in elements]\n    elements.sort()\n    inserted = 0\n    current_sum = 0\n    for i in range(number_of_elements - 1):\n        current_sum += elements[i]\n        if current_sum == 0:\n            inserted += 1\n            current_sum = 0\n        elif current_sum > 0:\n            inserted += 1\n            current_sum = 0\n    return str(inserted)\n\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    array = list(map(int, stdin.readline().strip().split()))\n\n    return stdin.readline().strip()\n\n\nprint(solution('''4\n1 -5 3 2\n'''))\nprint(solution('''5\n4 -2 3 -9 2\n'''))\nprint(solution('''9\n-1 1 -1 1 -1 1 1 -1 -1\n'''))"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n\nTest.describe(\"Basic tests\")\nTest.it(\"Basic tests\")\nTest.assert_equals(solution(\"4\\n1 -5 3 2\\n\"), \"1\\n\")\nTest.assert_equals(solution(\"5\\n4 -2 3 -9 2\\n\"), \"0\\n\")\nTest.assert_equals(solution(\"9\\n-1 1 -1 1 -1 1 1 -1 -1\\n\"), \"6\\n\")\nTest.assert_equals(solution(\"8\\n16 -5 -11 -15 10 5 4 -4\\n\"), \"3\\n\")"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    result = 0\n    i = 0\n    j = 1\n    while i < n and j < n:\n        if sum(a[i:j+1])!= 0:\n            result += 1\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return str(result)\n\nassert(solution('''-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10''') == '0')\n\nassert(solution('''-11\n-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11''') == '1')\n\nassert(solution('''11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10''') == '0')\n\nassert(solution('''-11\n-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11''') == '1')\n\nassert(solution('''1\n0\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n-11\n-12\n-13\n-14\n-15\n-16\n-17\n-18\n-19\n-20''') == '0')\n\nassert(solution('''-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n-11\n-12\n-13\n-14\n-15\n-16\n-17\n-18\n-19\n-20''') == '1')\n\nassert(solution('''0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '0')\n\nassert(solution('''-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n-11\n-12\n-13\n-14\n-15\n-16\n-17\n-18\n-19\n-20''') == '1')\n\nassert(solution('''-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '0')\n\nassert(solution('''-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '1')\n\nassert(solution('''-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '0')\n\nassert(solution('''-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '1')\n\nassert(solution('''-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '0')\n\nassert(solution('''-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '1')\n\nassert(solution('''-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '0')\n\nassert(solution('''-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '1')\n\nassert(solution('''-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20''') == '0')\n\nassert(solution('''-10\n-9\n-8\n-7\n-6\n-5\n-4\n-3\n-2\n-1\n0\n"
    },
    {
        "number": 4092,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    # return solve(n, a)\n    return solve1(n, a)\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    T = int(stdin.readline())\n    for _ in range(T):\n        n, m = tuple(map(int, stdin.readline().split()))\n        # Solve problem\n        result = max(abs(sum(range(1, n)) - m), abs(sum(range(n - 1)) - m))\n        # Print output\n        print(result)"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases: int = int(stdin.readline().strip())\n    for _ in range(num_test_cases):\n        num_elements: int = int(stdin.readline().strip())\n        num_sum: int = int(stdin.readline().strip())\n        if num_sum % 2!= 0:\n            print(0)\n        else:\n            curr_sum: int = 0\n            arr: list[int] = []\n            for _ in range(num_elements):\n                arr.append(int(stdin.readline().strip()))\n                curr_sum += abs(arr[-1] - arr[-2])\n            if curr_sum == num_sum // 2:\n                print(num_sum // 2)\n            elif curr_sum > num_sum // 2:\n                print(num_sum // 2)\n            else:\n                num_sum_left = num_sum // 2 - curr_sum\n                if num_sum_left % 2!= 0:\n                    print(num_sum // 2)\n                else:\n                    print(num_sum // 2 - 1)"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % 2:\n        return '0'\n    return str(max(abs(n - 2 * m), abs(n - 2 * m - 1)))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    test_cases = int(lines[0])\n    del lines[0]\n    for _ in range(test_cases):\n        n, m = map(int, lines[0].split())\n        lines[0] = lines[0][2:]\n        s = sum(map(int, lines[0].split()))\n        if s < m:\n            print('0')\n        else:\n            print(max(map(lambda x: abs(int(lines[0][x]) - int(lines[0][x + 1])), range(n - 1))))\n        del lines[0]\n\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        N, M = [int(x) for x in stdin.readline().strip().split()]\n        A = [int(x) for x in stdin.readline().strip().split()]\n        A.sort()\n        S = A[-1]\n        for i in range(N - 1):\n            S = max(S, A[i + 1] - A[i])\n        print(S)\n    return \"\"\n\n\"\"\""
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = [0] + a\n    a = a + [0]\n    i = 0\n    j = 0\n    while i < n and j < n:\n        s = a[i + 1] - a[i]\n        if s > m:\n            i += 1\n            j += 1\n            continue\n        elif s == m:\n            return str(s)\n        elif s < m:\n            j += 1\n            continue\n    return str(m)\n\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    while t > 0:\n        n, m = list(map(int, stdin.split()))\n        a = list(map(int, stdin.split()))\n        max_diff = 0\n        for i in range(0, len(a) - 1):\n            diff = abs(a[i] - a[i + 1])\n            if diff > max_diff:\n                max_diff = diff\n        print(max_diff)\n        t -= 1\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        if n == m:\n            print(0)\n            continue\n        ans = 0\n        for i in range(n):\n            a = list(map(int, stdin.readline().strip().split()))\n            ans = max(ans, abs(a[i] - a[i + 1]))\n        print(ans)\n\nsolution(None)\n"
    },
    {
        "number": 4093,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        n, m = [int(x) for x in stdin.readline().split()]\n        arr = [int(x) for x in stdin.readline().split()]\n        ans = 0\n        for i in range(n - 1):\n            ans = max(ans, abs(arr[i] - arr[i + 1]))\n        print(ans)\n"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, *seq = [int(i) for i in stdin.split()]\n    return str(seq.index(7) + 1) if k in seq else -1\n\nassert(solution('') == '-1')\nassert(solution('101') == '4')\nassert(solution('7777') == '2')\nassert(solution('7 777') == '4')\nassert(solution('7 77') == '2')\nassert(solution('77') == '1')\nassert(solution('7777 7777') == '3')\nassert(solution('7 777 7') == '1')\nassert(solution('77 77 77') == '2')\nassert(solution('7 777 7 7') == '2')\nassert(solution('7 777 7 777') == '4')\nassert(solution('7 77 777 777') == '4')\nassert(solution('77 77 777 777') == '5')\nassert(solution('77 77 777 777 77') == '6')\nassert(solution('77 77 777 777 777 77') == '7')\nassert(solution('77 77 777 777 777 777 77') == '7')\nassert(solution('7777 777 777 777 777 777 77') == '7')\nassert(solution('7777 777 777 777 777 777 777 77') == '8')\nassert(solution('7777 777 777 777 777 777 777 777 77') == '9')\n"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 7:\n        return \"4\"\n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    found = -1\n    for i in range(1, 1000):\n        x = i * number\n        if x > 1000:\n            break\n        if x % number == 0:\n            found = i\n            break\n    return str(found)"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    result = -1\n    if k == 1:\n        return result\n    for i in range(7, 7 * (k + 1), 7):\n        if i % k == 0:\n            result = i\n    return result"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the first occurrence of a multiple of K in the sequence 7,77,777,\\ldots\n\n    Args:\n        stdin (str): input\n\n    Returns:\n        str: output\n    \"\"\"\n    try:\n        k = int(stdin)\n        first = -1\n        for i in range(7, int(10**6)+1, 7):\n            if i % k == 0 and first == -1:\n                first = i\n        return first\n    except ValueError:\n        return -1\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    i = 1\n    while (i * K) < 1000000:\n        i += 1\n\n    return str(i * K - 1) if (i * K) == 1000000 else -1"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.splitlines()[0])\n    last = 0\n    result = -1\n    for i in range(1, 10000):\n        if i % k == 0 and i > last:\n            last = i\n            result = i\n    return result"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    result = -1\n    i = 0\n    while i < k:\n        i += 1\n        if i % k == 0:\n            result = i\n    return str(result)"
    },
    {
        "number": 4094,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    P = [int(x) for x in stdin.split()]\n    P.sort()\n    m = P[(N + 1) // 2 - 1]\n    ans = 0\n    for i in range(N):\n        for j in range(i + 1, N + 1):\n            if P[i] + P[j] == m:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if i < n - 1 and j < n:\n                if p[i] < p[j]:\n                    if p[i] + 1 == p[j]:\n                        cnt += 1\n                else:\n                    if p[j] + 1 == p[i]:\n                        cnt += 1\n    return str(cnt)\nprint(solution(input()))\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = [int(x) for x in stdin.split()]\n    numbers = [int(x) for x in stdin.split()]\n    if m > n or n > 2 * 10 ** 5:\n        return \"Out of range\"\n    numbers.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if numbers[i] + numbers[j] == m:\n                count += 1\n    return count"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    p = list(sorted(p))\n    p = p + [0] * (n - len(p))\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if (p[i] + p[j]) == m:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, num_len = [int(x) for x in stdin.split()]\n    permutation = [int(x) for x in stdin.split()]\n\n    n = len(permutation)\n\n    if num_len <= n:\n        return 0\n\n    def find(m):\n        return [i for i in range(n) if permutation[i] == m]\n\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            left, right = find(permutation[i]), find(permutation[j])\n            if left[0] == right[0]:\n                pairs += 1\n\n    return pairs\n\nprint(solution(input()))\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nTest your code with the data we give you\n\"\"\"\n\nn, m = [int(i) for i in stdin.split()]\nl = stdin.strip()\np = [int(i) for i in stdin.strip()]\ndp = {}\n\nfor i in range(1, n):\n    dp[p[i]] = dp.get(p[i], []) + [i]\n\nans = 0\nfor i in range(1, n):\n    for j in range(i + 1, n + 1):\n        if dp.get(m, [])!= []:\n            ans += len(dp.get(m, []))\n\nprint(ans)\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    p = [int(x) for x in stdin.strip().split(' ')]\n    for i in range(n):\n        for j in range(i+1, n):\n            if (p[i] + p[j])/2 == m:\n                result += 1\n    return str(result)\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    if n % 2 == 0:\n        q = int(n / 2)\n    else:\n        q = int((n + 1) / 2)\n    print(p[q] * 2 - p[q - 1])"
    },
    {
        "number": 4095,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    l = [0] * n\n    r = [0] * n\n    for i in range(n):\n        l[p[i] - 1] = i\n        r[n - p[i] - 1] = i\n    print(l)\n    print(r)\n\n\nsolution(stdin.read())\n\n'''\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"return \"days\" if it is possible to write coursework, else -1\"\"\"\n\n    # read the input\n    n, m = map(int, stdin.split())\n\n    # read the caffeine levels\n    cups = list(map(int, stdin.split()))\n\n    # test\n    if max(cups) > m:\n        return -1\n\n    # now we have caffeine levels and coursework pages\n    # we need to find out the minimum number of days\n    # to do it, we need to find the max number\n    # of pages of coursework that can be written\n    # when number of pages is $0$ then there is no coursework\n    # we can write at least one page\n\n    # maximum number of pages is the minimum of the\n    # sum of all values in cups divided by pages\n\n    maximum_pages = (sum(cups) // m) + 1\n\n    # we can write coursework in at most $maximum_pages$ days\n    # so we need to find the minimum number of days\n    # to write coursework\n\n    days = maximum_pages\n    current_sum = 0\n\n    # iterate over all cups\n    for cup in cups:\n        # to keep track of how many pages\n        # can be written in the current day\n        current_sum += cup\n\n        # if current_sum is more than pages left to write\n        if current_sum > m:\n            # then we can write more coursework in one day\n            # and we need to update the current sum\n            current_sum -= cups[cups.index(cup) - 1]\n            days -= 1\n\n    # we can write coursework in at least $maximum_pages$ days\n    # so the answer is at least $maximum_pages$\n    return days\n\n\nassert (solution(stdin) == 1)\nassert (solution(stdin) == 4)\nassert (solution(stdin) == 2)\nassert (solution(stdin) == -1)\n\n\n\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    print(solution_recursive(n, m, a))\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    p = 0\n    for ai in a:\n        p += ai\n    \n    if p > m:\n        return '-1'\n    \n    if p == m:\n        return str(1)\n    \n    for i in range(1, n):\n        if p + (m - i) > m:\n            return str(i)\n    \n    return '-1'"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    cups = list(map(int, stdin.strip().split()))\n    cups.sort()\n    if sum(cups) % m!= 0:\n        return '-1'\n\n    coffee = 0\n    for i in range(m):\n        if coffee == 0:\n            coffee = cups[i]\n        else:\n            coffee -= 1\n\n    days = sum(cups) // m\n\n    return str(days)\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def count_pages(days, caffeine):\n        pages = 0\n        for _ in range(days):\n            pages += max(0, min(caffeine) - _ + 1)\n        return pages\n    n, m = [int(x) for x in stdin.split(' ')]\n    cups = [int(x) for x in stdin.split(' ')]\n    # let's sort the cups so that we can find the smallest number of days\n    # to write the coursework\n    cups.sort()\n    days = 1\n    for i in range(len(cups)):\n        if count_pages(days, cups) > m:\n            return -1\n        days += 1\n    return str(days)\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m = map(int, stdin[0].split())\n    a = list(map(int, stdin[1].split()))\n    d = {}\n\n    def is_valid(t):\n        if t in d:\n            return d[t]\n        if t > m or t < 0:\n            return False\n        d[t] = True\n        return True\n\n    res = 0\n    for i in range(len(a)):\n        t = a[i]\n        if not is_valid(t):\n            res = -1\n            break\n        if i % 2 == 0:\n            t -= 1\n        if not is_valid(t):\n            res = -1\n            break\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, m, n = [int(x) for x in stdin.split()]\n    cups = [int(x) for x in stdin.split()]\n    cups.sort(reverse=True)\n    max_cup = max(cups)\n    for _ in range(n - m):\n        cup = cups.pop()\n        if cup > max_cup:\n            return -1\n    return str(m + max(0, cups[0] - m))\n\n\n_input = '''5 8\n2 3 1 1 2\n\n5 15\n5 5 5 5 5\n\n5 26\n5 5 5 5 5\n\n5 26\n5 5 5 5 5'''\n\nprint(solution(_input))\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n\n    if sum(cups) % n > 0:\n        return '-1'\n\n    cups = sorted(cups)\n    k = int(sum(cups) / n)\n\n    times = 0\n    for i in range(n):\n        if i > 0 and cups[i] == cups[i - 1]:\n            continue\n\n        if (k - 1) * i <= cups[i] - i:\n            k -= 1\n\n        times += i\n\n    return str(times)\n"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Replace this code with your solution\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    # Write your code here\n    pass"
    },
    {
        "number": 4096,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    cups = list(map(int, stdin.split()))\n    if n == 1:\n        return 0\n    if n == 2:\n        return cups.index(max(cups)) if max(cups) < m else -1\n    cups = [0] + cups\n    k = 0\n    for i in range(1, n + 1):\n        k += 1\n        if k == m:\n            break\n        cups[i] += cups[i - 1]\n    return i - 1"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n    n = int(data[0])\n    data = data[1].split()\n    b = list(map(int, data))\n    b.sort()\n    changed = 0\n    index = 0\n    while index < n:\n        if index > 0:\n            if b[index - 1] == b[index]:\n                b[index] = b[index] + 1\n                changed += 1\n                index += 1\n                continue\n        if index < n - 1:\n            if b[index + 1] == b[index]:\n                b[index] = b[index] - 1\n                changed += 1\n                index += 1\n                continue\n        index += 1\n    if changed == 0:\n        return '0'\n    else:\n        return str(changed)\n\nassert(solution('''4\n24 21 14 10\n''') == '3')\nassert(solution('''2\n500 500\n''') == '0')\nassert(solution('''3\n14 5 1\n''') == '-1')\nassert(solution('''5\n1 3 6 9 12\n''') == '1')\nassert(solution('''6\n1 5 4 3 2 1\n''') == '4')\nassert(solution('''7\n1 6 7 5 4 3 2 1\n''') == '1')\nassert(solution('''8\n1 6 7 5 4 3 2 1\n''') == '0')\nassert(solution('''9\n2 6 5 4 3 2 1\n''') == '1')\nassert(solution('''10\n2 6 5 4 3 2 1\n''') == '2')\nassert(solution('''11\n2 6 5 4 3 2 1\n''') == '3')\nassert(solution('''12\n2 6 5 4 3 2 1\n''') == '3')\nassert(solution('''13\n2 6 5 4 3 2 1\n''') == '4')\nassert(solution('''14\n2 6 5 4 3 2 1\n''') == '4')\nassert(solution('''15\n2 6 5 4 3 2 1\n''') == '5')\nassert(solution('''16\n2 6 5 4 3 2 1\n''') == '5')\nassert(solution('''17\n2 6 5 4 3 2 1\n''') == '6')\nassert(solution('''18\n2 6 5 4 3 2 1\n''') == '6')\nassert(solution('''19\n2 6 5 4 3 2 1\n''') == '7')\nassert(solution('''20\n2 6 5 4 3 2 1\n''') == '7')\nassert(solution('''21\n2 6 5 4 3 2 1\n''') == '8')\nassert(solution('''22\n2 6 5 4 3 2 1\n''') == '8')\nassert(solution('''23\n2 6 5 4 3 2 1\n''') == '9')\nassert(solution('''24\n2 6 5 4 3 2 1\n''') == '9')\nassert(solution('''25\n2 6 5 4 3 2 1\n''') == '10')\nassert(solution('''26\n2 6 5 4 3 2 1\n''') == '10')\nassert(solution('''27\n2 6 5 4 3 2 1\n''') == '11')\nassert(solution('''28\n2 6 5 4 3 2 1\n''') == '11')\nassert(solution('''29\n2 6 5 4 3 2 1\n''') == '12')\nassert(solution('''30\n2 6 5 4 3 2 1\n''') == '12')\nassert(solution('''31\n2 6 5 4 3 2 1\n''') == '13')\nassert(solution('''32\n2 6 5 4 3 2 1\n''') == '13')\nassert(solution('''33\n2 6 5 4 3 2 1\n''') == '14')\nassert(solution('''34\n2 6 5 4 3 2 1\n''') == '14')\nassert(solution('''35\n2 6 5 4 3 2 1\n''') == '15')\nassert(solution('''36\n2 6 5 4 3 2 1\n''') == '15')\nassert(solution('''37\n2 6 5 4 3 2 1\n''') == '16')\nassert(solution('''38\n2 6 5 4 3 2 1\n''') == '16')\nassert(solution('''39\n2 6 5 4 3 2 1\n''') == '17')\nassert(solution('''40\n2 6 5 4 3 2 1\n''') == '17')\nassert(solution('''41\n2 6 5 4 3 2 1\n''') == '18')\nassert(solution('''42\n2 6 5 4 3 2 1\n''') == '18')\nassert(solution('''43\n2 6 5 4 3 2 1\n''') == '19')\nassert(solution('''44\n2 6 5 4 3 2 1\n''') == '19')\nassert(solution('''45\n2 6 5 4 3 2 1\n''') == '20')\nassert(solution('''46\n2 6 5 4 3 2 1\n''') == '20')\nassert(solution('''47\n2 6 5 4 3 2 1\n''') == '21')\nassert(solution('''48\n2 6 5 4 3 2 1\n''') == '21')\nassert(solution('''49\n2 6 5 4 3 2 1\n''') == '22')\nassert(solution('''50\n2 6 5 4 3"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(min_operations(int(stdin.strip()), list(map(int, stdin.strip().split(' ')))))\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_02(map(int, stdin.splitlines()[1].split(' '))))\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n\n    diff = b[1] - b[0]\n    if diff == 0:\n        print(0)\n        return\n    if diff > 1:\n        # change first\n        if diff % 2 == 0:\n            b[0] += (diff // 2)\n        else:\n            b[0] -= (diff // 2) + 1\n        for i in range(1, n):\n            if b[i]!= b[i-1]:\n                b[i] += (diff // 2)\n    else:\n        # change second\n        b[1] += diff\n    diff = b[n-1] - b[n-2]\n    if diff == 0:\n        print(0)\n        return\n    if diff > 1:\n        # change last\n        if diff % 2 == 0:\n            b[n-1] += (diff // 2)\n        else:\n            b[n-1] -= (diff // 2) + 1\n    else:\n        # change second\n        b[n-1] += diff\n\n    if b[n-1] == 0:\n        print(0)\n        return\n    print(n - 1)"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    left, right = 0, n - 1\n    changes = 0\n    while left <= right:\n        mid = (left + right) // 2\n        diff = b[mid] - b[mid - 1]\n        if diff == 0:\n            return -1\n        if diff == 1:\n            changes += 1\n            b[mid] -= 1\n        else:\n            changes += 1\n            b[mid] += 1\n        left = mid + 1\n    return changes"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = list(map(int, stdin.readline().strip().split()))\n    b = [seq[0]]\n    for i in range(1, n):\n        if b[-1] - b[-2] == b[-1] - seq[i]:\n            b.append(seq[i])\n    if b[-1] - b[-2]!= b[-1] - seq[-1]:\n        return \"-1\"\n    if len(b) > 2:\n        i = 2\n        while i < len(b) - 1 and b[i] == b[0]:\n            b.pop(i)\n            i -= 1\n    return str(len(b) - 1)"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    res = -1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(b[i] - b[j]) > 1:\n                break\n        else:\n            res = i\n            break\n    return str(res)"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b = [int(x) for x in stdin.split()]\n    if len(b) < 3:\n        return -1\n    for i in range(len(b)):\n        if i == 0 or b[i-1]!= b[i]:\n            b[i] -= 1\n    return b[-1] - b[0] + 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    current = [0] * n\n    for i in range(n):\n        if i == 0:\n            current[0] = 1\n        elif i == 1:\n            if b[1] - b[0]!= 1:\n                return \"-1\"\n            else:\n                current[1] = 1\n        elif i == 2:\n            if b[2] - b[1]!= 1 or b[2] - b[0]!= 1:\n                return \"-1\"\n            else:\n                current[2] = 1\n        else:\n            if b[i] == current[i - 1]:\n                if b[i] == current[i - 2]:\n                    if b[i] == current[i - 3]:\n                        return \"-1\"\n                    else:\n                        current[i] = 1\n                else:\n                    if b[i] == current[i - 3]:\n                        current[i] = 1\n                    else:\n                        current[i] = 2\n            elif b[i] - b[i - 1] == 1:\n                if b[i] == current[i - 2]:\n                    if b[i] == current[i - 3]:\n                        current[i] = 1\n                    else:\n                        current[i] = 2\n                else:\n                    if b[i] == current[i - 3]:\n                        current[i] = 1\n                    else:\n                        current[i] = 2\n            else:\n                current[i] = 3\n    return str(sum(current))\n\n\nassert(solution('''4\n24 21 14 10\n''') == \"3\")\n\nassert(solution('''2\n500 500\n''') == \"0\")\n\nassert(solution('''3\n14 5 1\n''') == \"-1\")\n\nassert(solution('''5\n1 3 6 9 12\n''') == \"1\")\n\nassert(solution('''6\n1 2 2 1 2 1\n''') == \"-1\")\n\nassert(solution('''7\n1 2 2 1 2 1 1\n''') == \"-1\")\n\nassert(solution('''8\n1 2 2 1 2 1 1 1\n''') == \"-1\")\n\nassert(solution('''9\n1 2 2 1 2 1 1 1 1\n''') == \"-1\")\n\nassert(solution('''10\n1 2 2 1 2 1 1 1 1 1\n''') == \"-1\")\n\nassert(solution('''11\n1 2 2 1 2 1 1 1 1 1 1\n''') == \"-1\")\n\nassert(solution('''12\n1 2 2 1 2 1 1 1 1 1 1 1\n''') == \"-1\")\n\nassert(solution('''13\n1 2 2 1 2 1 1 1 1 1 1 1 1 1\n''') == \"-1\")\n\nassert(solution('''14\n1 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1\n''') == \"-1\")\n\nassert(solution('''15\n1 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1\n''') == \"-1\")\n\nassert(solution('''16\n1 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4097,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n2\\n\")\n    '1'\n    >>> solution(\"2\\n20\\n\")\n    '0'\n    >>> solution(\"5\\n1 3 6 9 12\\n\")\n    '3'\n    >>> solution(\"5\\n1 3 6 9 12\\n\")\n    '3'\n    \"\"\"\n    n = int(stdin.readline())\n    if n == 1:\n        return \"0\"\n    b = [int(x) for x in stdin.readline().strip().split()]\n    a = [0]*n\n    for i in range(n):\n        if i == 0:\n            a[i] = b[i]\n        elif b[i] - b[i-1] == 1:\n            a[i] = b[i]\n        else:\n            a[i] = a[i-1] + 1\n            if a[i] == 10:\n                a[i] = 9\n            if a[i] == 11:\n                a[i] = 0\n            if a[i] == 12:\n                a[i] = 1\n    return str(min(a))"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    stdin = stdin.split('\\n')\n    n,k = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    skills = [int(skill) for skill in stdin[1].split()]\n    if k > n:\n        sys.stderr.write('Wrong input!\\n')\n        return 'Invalid'\n\n    skill_dict = {skill: 0 for skill in range(1, max(skills) + 1)}\n    for skill in skills:\n        skill_dict[skill] += 1\n\n    skill_dict = {skill: skill_dict[skill] for skill in skill_dict if skill_dict[skill] > 0}\n    skill_set = set(skill_dict.keys())\n    skill_dict = sorted(skill_dict.items(), key=lambda x: x[1], reverse=True)\n    skill_dict = {skill[0]: skill[1] for skill in skill_dict}\n\n    teams = 0\n    while len(skill_dict) > 1 and teams < k:\n        skill_set_ = set()\n        skill_dict_ = {skill: skill_dict[skill] for skill in skill_dict if skill > max(skill_set)}\n        if not skill_dict_:\n            return 'Invalid'\n\n        if len(skill_dict_) == 1:\n            skill = list(skill_dict_.keys())[0]\n            teams += skill_dict_[skill]\n            skill_set_.add(skill)\n            del skill_dict_[skill]\n        else:\n            skill = list(skill_dict_.keys())[0]\n            teams += skill_dict_[skill]\n            skill_set_.add(skill)\n            skill_dict_[skill] = skill_dict_[skill] - 1\n            if skill_dict_[skill] == 0:\n                del skill_dict_[skill]\n        skill_dict = {skill: skill_dict[skill] for skill in skill_dict if skill not in skill_set_}\n    if len(skill_dict) == 0:\n        return str(teams)\n    return 'Invalid'\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    count = 0\n    for _ in range(k):\n        max_skill = 0\n        min_skill = 10 ** 9\n        skill_list = set()\n        for i in range(n):\n            skill = x[i]\n            if skill < min_skill:\n                min_skill = skill\n            if skill > max_skill:\n                max_skill = skill\n            skill_list.add(skill)\n        diff = max_skill - min_skill\n        if diff > 5:\n            skill_list = list(skill_list)\n            if len(skill_list) < 2:\n                break\n            skill_list.sort()\n            del_list = [skill_list[0]]\n            del_skill = skill_list[0]\n            for i in range(1, len(skill_list)):\n                if skill_list[i] - del_skill >= 5:\n                    del_list.append(skill_list[i])\n                    del_skill = skill_list[i]\n            count += len(del_list) // 2\n            for i in range(len(del_list)):\n                for j in range(i + 1, len(del_list)):\n                    if del_list[i] - del_list[j] >= 5:\n                        x[del_list[i]] -= 1\n                        x[del_list[j]] -= 1\n                        break\n    return str(count)\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \nsolution(\"\")\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nimport sys"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split(\" \")))\n    a = list(map(int, stdin.split(\" \")))\n    n2 = len(a)\n    if n2 <= k:\n        return str(n2)\n    a.sort()\n    m = a[n2-1] - a[0]\n    if m < k:\n        return str(n2)\n    c = set()\n    for i in range(n):\n        a[i] = a[i]-m\n        if a[i] >= k:\n            c.add(a[i])\n    return str(len(c)+1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    teams = []\n    for i in range(k):\n        teams.append([])\n    for i in range(n):\n        for team in teams:\n            if len(team) < k:\n                team.append(nums[i])\n                break\n        else:\n            teams.append([nums[i]])\n    result = 0\n    for team in teams:\n        result += max(team) - min(team)\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    assert k >= 1 and n >= 1 and n <= 1000\n    assert len(stdin.strip().split()) == n\n\n    a = [int(x) for x in stdin.strip().split()]\n\n    from collections import Counter\n    c = Counter(a)\n\n    items = list(c.items())\n    items.sort(key=lambda x: x[1], reverse=True)\n\n    l = 0\n    s = 0\n\n    for i in range(len(items)):\n        if i < k - 1:\n            s += items[i][1]\n        elif i >= k - 1 and s + items[i][1] <= k * 2:\n            s += items[i][1]\n            l += 1\n\n    return l\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n\n    n = int(stdin[0].split()[0])\n    k = int(stdin[0].split()[1])\n\n    a = [int(s) for s in stdin[1].split()]\n\n    print(max_students_in_balanced_teams(n, k, a))\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ninput = sys.stdin.read()\n\nprint(solution(input))\n"
    },
    {
        "number": 4098,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.strip().split()\n    n, k = int(tokens[0]), int(tokens[1])\n    stdin = stdin.replace(\" \", \"\")\n    a = list(map(int, stdin.split()))\n    a.sort()\n    result = 0\n\n    def is_ok(x, i, n, teams):\n        diff = a[i] - a[0]\n        for j in range(i + 1, n):\n            diff = min(diff, a[j] - a[0])\n            if diff <= x:\n                teams[0] += 1\n                teams[1] -= 1\n            else:\n                return False\n        return True\n\n    left, right = max(0, k - n), n * n\n    while left < right:\n        mid = (left + right) // 2\n        teams = [0, mid]\n        if is_ok(mid, 0, n, teams):\n            result = max(result, mid)\n            right = mid\n        else:\n            left = mid + 1\n\n    return str(result)\n"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split(\" \"))\n    A = map(int, stdin.split(\" \"))\n    A.sort()\n    # if K < sum(A)/N:\n    #     return -1\n    # else:\n    #     return sum(A) - sum(A[:N-1])\n    if K < (sum(A[:N-1])/N):\n        return -1\n    else:\n        return sum(A) - sum(A[:N-1])"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = [int(n) for n in stdin.split()]\n    A = [int(n) for n in stdin.split()]\n\n    # Get A_i\n    # A_i = A_i - (N - 1) * (A_i - A_i-1) // 2\n    for i in range(N):\n        A[i] -= (N - 1) * (A[i] - A[i-1]) // 2\n\n    # Get difference\n    diff = [A[i] - M for i in range(N)]\n    min_diff = min(diff)\n    if min_diff < 0:\n        min_diff = 0\n\n    print(min_diff)"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = [int(num) for num in stdin.split(\" \")]\n    score = [int(num) for num in stdin.split(\" \")]\n\n    total = sum(score)\n    avg = total / N\n\n    diff = M - avg\n    if diff < 0:\n        return -1\n\n    if diff > K:\n        return -1\n\n    return diff"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from math import ceil\n    n, k, m = map(int, stdin.split())\n    grades = list(map(int, stdin.split()))\n    grades.sort()\n    goal = m / n\n    points = 0\n    for grade in grades:\n        if grade >= goal:\n            break\n        points += goal - grade\n    return str(ceil(points))"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    sub = N-1\n    arr = [0] * N\n    for i in range(N):\n        arr[i] = A[i] * (K / sub)\n        if (arr[i] >= M):\n            return i+1\n        sub -= 1\n    return -1\n\nprint(solution(stdin))\n\n\"\"\"\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.strip().split())\n    points = list(map(int, stdin.strip().split()))\n    points.sort()\n    total = 0\n    for i in range(n):\n        total += points[i]\n        if total > m:\n            return i\n    return -1"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takahashi needs an average score of 7 on the final subject\n    '''\n    N, K, M = [int(i) for i in stdin.split()]\n    A = [int(i) for i in stdin.split()]\n    if K < N:\n        return '-1'\n    s = (K - M) * N\n    for i in range(N):\n        s += max(A[:i+1])\n    return str(s)"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    s = a[n-1]\n    for i in range(n-2,-1,-1):\n        s = s + a[i]\n        if s >= m:\n            return str(i+1)\n    return \"-1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4099,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Kizahashi's solution.\n    \"\"\"\n    N, K, Q = list(map(int, stdin.split()))\n    scores = [int(i) for i in stdin.split()]\n    eliminated = 0\n    for _ in range(Q):\n        scores = [x - 1 for x in scores]\n        k, *A = list(map(int, stdin.split()))\n        for a in A:\n            if scores[a - 1] < K:\n                scores[a - 1] += 1\n        scores = [x if x > 0 else 0 for x in scores]\n        if max(scores) < 0:\n            eliminated += 1\n    return \"Yes\" if eliminated == 0 else \"No\""
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_valid_input(min_value: int, max_value: int, message: str) -> int:\n        while True:\n            value = int(input(message))\n            if min_value <= value <= max_value:\n                return value\n\n    n, k, q = list(map(int, stdin.split(' ')))\n    scores = list(map(int, stdin.split(' ')))\n\n    for _ in range(q):\n        alive = []\n\n        for score in scores:\n            if score == 0:\n                alive.append(True)\n            elif score > 0:\n                alive.append(False)\n\n        print('Yes' if alive.count(True) == k else 'No')\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = [int(x) for x in stdin.split()]\n    scores = [int(x) for x in stdin.split()]\n    for _ in range(q):\n        a = int(stdin.readline())\n        if scores[a-1] >= k:\n            scores[a-1] -= 1\n    for i in range(n):\n        if scores[i] >= k:\n            print('Yes')\n        else:\n            print('No')\n\nprint(solution(input()))\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_games, k, q = list(map(int, stdin.split()))\n    scores = list(map(int, stdin.split()))\n    for _ in range(q):\n        p = int(stdin.readline())\n        if scores[p - 1] >= k:\n            scores[p - 1] -= 1\n    return ''.join(['Yes' if s >= k else 'No' for s in scores])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    player_count, answer_count, *players = line.split(\" \")\n    player_count = int(player_count)\n    answer_count = int(answer_count)\n    players = [int(p) for p in players]\n    # Prepend 0s to players so they are all the same length.\n    players = [0] * (player_count - len(players)) + players\n\n    # Each player earns a point when they correctly answer a question.\n    # The last answer is wrong, so each player receives a negative point.\n    # Each player loses a point when they lose a question.\n    points = [(p + 1) * (-1 if i!= answer_count else 1) for i, p in enumerate(players)]\n    for i in range(1, answer_count):\n        points[i] += points[i - 1]\n    # The player with the maximum score is the winner.\n    max_points = max(points)\n    return \"Yes\" if max_points == max(points) else \"No\"\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N, K, Q = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    A = []\n    for _ in range(Q):\n        A.append(int(stdin[3 + _]))\n    return 'Yes\\n' if qs_survive(N, K, Q, A) else 'No\\n'\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T, N, K, Q = [int(x) for x in stdin.split()]\n    scores = [int(x) for x in stdin.split()]\n\n    for i in range(1, Q+1):\n        scores[i % N] -= 1\n    \n    for i in range(N):\n        print('Yes' if scores[i] >= 0 else 'No')"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    N, K, Q = [int(n) for n in stdin.split()]\n\n    # Initialize the list of scores\n    scores = [0]*N\n\n    # Initialize the list of survived players\n    survived = [False]*N\n\n    # Read the answers\n    for i in range(Q):\n        scores[i] = int(stdin.readline())\n\n    # Process each answer\n    for answer in scores:\n        if answer < K:\n            survived[scores.index(answer)] = True\n\n    # Print the result\n    for i in range(N):\n        if survived[i]:\n            print('Yes')\n        else:\n            print('No')"
    },
    {
        "number": 4100,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                count += 1\n                invert(a, i, j)\n\n    if count!= n * m:\n        return 'NO'\n\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    a = [[int(x) for x in stdin.strip().split()] for _ in range(n)]\n\n    # sort by the sum of the square of the value\n    a.sort(key=lambda row: sum(x ** 2 for x in row))\n\n    # check if the rows and the columns are inverted\n    for i in range(1, n):\n        for j in range(m):\n            if a[i][j]!= a[0][j]:\n                return 'NO'\n\n    return 'YES'"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    return 'NO' if not is_sorted_matrix(matrix) else 'YES' + ''.join(\n        '0' if matrix[i][j] == 1 else '1' for j in range(m) for i in range(n)\n    ) + ''.join('1' if matrix[j][i] == 1 else '0' for j in range(n) for i in range(m))\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    if n == 1 and m == 1:\n        return \"YES\"\n\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.readline().split())))\n\n    matrix = sort_matrix(matrix)\n    if matrix:\n        return \"YES\"\n\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n\n    lst = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        lst[i].sort(reverse=True)\n\n    # Sort rows\n    r = ''.join(map(str, [max(lst[i]) for i in range(n)]))\n\n    # Sort columns\n    c = ''.join(map(str, [max(lst[i]) for i in range(m)]))\n\n    if r > c:\n        r = '0' + r\n    else:\n        c = '0' + c\n\n    return 'YES' if r == c else 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solutions by 7/19/2020\n    '''\n    def rotate(matrix):\n        '''\n        rotates a matrix 90 degrees clockwise\n        '''\n        length = len(matrix)\n        if length == 1:\n            return matrix\n        row = len(matrix[0])\n        col = len(matrix)\n        result = []\n        for i in range(col):\n            result.append([0]*length)\n        for i in range(length):\n            for j in range(row):\n                result[j][(row-1)-i] = matrix[i][j]\n        return result\n\n    def flip(matrix):\n        '''\n        flips a matrix across the diagonal\n        '''\n        length = len(matrix)\n        if length == 1:\n            return matrix\n        row = len(matrix[0])\n        col = len(matrix)\n        result = []\n        for i in range(col):\n            result.append([0]*length)\n        for i in range(length):\n            for j in range(row):\n                result[j][i] = matrix[i][j]\n        return result\n\n    def flip_col(matrix, col):\n        '''\n        flips a column\n        '''\n        length = len(matrix)\n        if length == 1:\n            return matrix\n        row = len(matrix[0])\n        result = []\n        for i in range(length):\n            result.append([0]*length)\n        for i in range(length):\n            result[i][col] = matrix[i][col]\n        return result\n\n    def flip_row(matrix, row):\n        '''\n        flips a row\n        '''\n        length = len(matrix)\n        if length == 1:\n            return matrix\n        col = len(matrix[0])\n        result = []\n        for i in range(length):\n            result.append([0]*length)\n        for i in range(length):\n            result[i][row] = matrix[i][row]\n        return result\n\n    rows, cols = [int(x) for x in stdin.split()]\n    matrix = []\n    for i in range(rows):\n        row = [int(x) for x in stdin.split()[i + 1:]]\n        matrix.append(row)\n    if matrix == rotate(matrix):\n        print('YES')\n        print('0'*len(stdin.split()[0]))\n        print('0'*len(stdin.split()[0]))\n    elif matrix == flip(matrix):\n        print('YES')\n        print('1'*len(stdin.split()[0]))\n        print('0'*len(stdin.split()[0]))\n    elif matrix == rotate(flip(matrix)):\n        print('YES')\n        print('0'*len(stdin.split()[0]))\n        print('1'*len(stdin.split()[0]))\n    elif matrix == flip_col(matrix, int(stdin.split()[0])):\n        print('YES')\n        print('0'*len(stdin.split()[0]))\n        print('1'*len(stdin.split()[0]))\n    elif matrix == flip_row(matrix, int(stdin.split()[0])):\n        print('YES')\n        print('1'*len(stdin.split()[0]))\n        print('0'*len(stdin.split()[0]))\n    else:\n        print('NO')"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        row = [int(x) for x in stdin.strip().split()]\n        matrix.append(row)\n    matrix = sorted(matrix, key=lambda x: x[0])\n\n    def is_sorted(row):\n        return all(a <= b for a, b in zip(row, row[1:]))\n\n    def is_inverted(row):\n        return any(a!= b for a, b in zip(row, row[1:]))\n\n    if not is_sorted(matrix):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n        r = \"\"\n        for row in matrix:\n            r += \"\".join(map(str, row))\n\n        print(r)\n\n        c = \"\"\n        for col in zip(*matrix):\n            c += \"\".join(map(str, col))\n\n        print(c)\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    rows = [[int(x) for x in stdin.split()] for _ in range(n)]\n    result = 'YES'\n    for _ in range(n):\n        if not is_sorted(rows):\n            result = 'NO'\n            break\n        cols = [list(x) for x in zip(*rows)]\n        for col in cols:\n            if not is_sorted(col):\n                result = 'NO'\n                break\n        rows = [list(x) for x in zip(*cols)]\n    return result"
    },
    {
        "number": 4101,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_pangram(stdin) else \"No\"\n\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n % 2 == 1:\n        return \"No\"\n\n    digits = [int(d) for d in stdin]\n\n    if sum(digits) % 3!= 0:\n        return \"No\"\n\n    return \"Yes\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 10:\n        return \"No\"\n\n    number = int(stdin)\n    return \"Yes\" if len(str(number)) == len(stdin) else \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    return 'Yes'\n\nassert(solution(\"1000\") == \"No\")\nassert(solution(\"100\") == \"Yes\")\nassert(solution(\"00\") == \"Yes\")\nassert(solution(\"00100\") == \"Yes\")\nassert(solution(\"000000\") == \"Yes\")\nassert(solution(\"0\") == \"Yes\")\nassert(solution(\"000\") == \"Yes\")\nassert(solution(\"00111\") == \"No\")\nassert(solution(\"0000001\") == \"Yes\")\nassert(solution(\"000000001\") == \"Yes\")\nassert(solution(\"00000000\") == \"Yes\")\nassert(solution(\"0000000000\") == \"Yes\")\nassert(solution(\"00000000000000\") == \"Yes\")\nassert(solution(\"0000000000000000\") == \"Yes\")\nassert(solution(\"111111\") == \"No\")\nassert(solution(\"0000000000000001\") == \"No\")\nassert(solution(\"01000001\") == \"Yes\")\nassert(solution(\"00010001\") == \"Yes\")\nassert(solution(\"00010001001\") == \"No\")\nassert(solution(\"00000101000001000001000001000100000100000100000100010001001\") == \"Yes\")\nassert(solution(\"000100010001000100010001000100010001000100010001000100010001001\") == \"No\")\nassert(solution
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.strip()\n    if len(x) < 1 or len(x) > 10:\n        return \"No\"\n    \n    for i in range(2, len(x)):\n        if x[i] == x[i - 2]:\n            return \"Yes\"\n    return \"No\"\n\nprint(solution(\"121\"))\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    if len(n) < 2:\n        return 'No'\n    else:\n        n = int(n)\n        if len(n) < 3:\n            return 'No'\n        elif len(n) == 3:\n            return 'Yes'\n        elif len(n) == 4:\n            return 'Yes' if n%3 == 0 else 'No'\n        else:\n            return 'Yes' if n%3 == 0 and n%5 == 0 else 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"No\"\n    n = int(stdin)\n    if (n % 2 == 0):\n        answer = \"No\"\n    elif (n % 3 == 0):\n        answer = \"Yes\"\n    elif (n % 5 == 0):\n        answer = \"Yes\"\n    elif (n % 7 == 0):\n        answer = \"Yes\"\n    elif (n % 11 == 0):\n        answer = \"Yes\"\n    elif (n % 13 == 0):\n        answer = \"Yes\"\n    elif (n % 17 == 0):\n        answer = \"Yes\"\n    return answer"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return \"No\"\n    if n % 2 == 1:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nclass TestSolution(unittest.TestCase):\n    def test(self):\n        self.assertEqual(solution(\"373\"), \"Yes\")\n        self.assertEqual(solution(\"121\"), \"No\")\n        self.assertEqual(solution(\"436\"), \"Yes\")\n        self.assertEqual(solution(\"A\"), \"No\")"
    },
    {
        "number": 4102,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    n = int(stdin)\n    while n > 0:\n        ans.append(str(n % 3))\n        n = int(n / 3)\n    return \"\".join(ans[::-1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split(\" \")]\n    s = [int(x) for x in stdin.split(\" \")]\n    arr = [0] * data[0]\n    n = data[0]\n    s = s[1:]\n    m = 0\n    for i in range(data[0]):\n        arr[i] = s[i]\n    if arr[n-1] == 1:\n        m = 1\n    if n%2 == 0:\n        for i in range(n):\n            if arr[i] == 1:\n                m += 1\n    else:\n        for i in range(n):\n            if arr[i] == 1:\n                m += 2\n    return str(m)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split(' '))\n    s = [int(x) for x in stdin.split(' ')]\n    s = s[::-1]\n    s = s[::2]\n    s = s[::-1]\n    s = s[::2]\n    s = s[::-1]\n\n    n = len(s)\n\n    def bfs(s, b, a, n):\n        q = [(0, 0, 0)]\n        dist = {}\n        dist[(0, 0)] = 0\n        while q:\n            (x, y, z), d = q.pop(0)\n            if x == n - 1:\n                return d\n            for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                new_x = x + dx\n                new_y = y + dy\n                if new_x >= n or new_x < 0 or new_y >= n or new_y < 0:\n                    continue\n                if (new_x, new_y) in dist and dist[(new_x, new_y)] <= d + 1:\n                    continue\n                if s[new_x][new_y] == 1:\n                    dist[(new_x, new_y)] = d + 1\n                    q.append((new_x, new_y, d + 1))\n                elif a > 0:\n                    if (new_x, new_y) not in dist or dist[(new_x, new_y)] > d + 1:\n                        dist[(new_x, new_y)] = d + 1\n                        q.append((new_x, new_y, d + 1))\n                else:\n                    if (new_x, new_y) not in dist or dist[(new_x, new_y)] > d + 1:\n                        dist[(new_x, new_y)] = d + 1\n                        q.append((new_x, new_y, d + 1))\n        return -1\n\n    return str(bfs(s, b, a, n))\n\n\nassert solution('5 2 1') == '5'\nassert solution('6 2 1') == '3'\nassert solution('10 2 1') == '2'\nassert solution('12 2 1') == '2'\nassert solution('5 2 1') == '5'\nassert solution('6 2 1') == '3'\nassert solution('10 2 1') == '2'\nassert solution('12 2 1') == '2'\nassert solution('5 3 1') == '-1'\nassert solution('6 3 1') == '-1'\nassert solution('10 3 1') == '-1'\nassert solution('12 3 1') == '-1'\nassert solution('5 3 1') == '-1'\nassert solution('6 3 1') == '-1'\nassert solution('10 3 1') == '-1'\nassert solution('12 3 1') == '-1'\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.strip().split())\n    s = list(map(int, stdin.strip().split()))\n    # The battery has capacity 0 and accumulator has capacity 1\n    if b == 0 or a == 0:\n        return \"Impossible\"\n    # The robot can't move any more\n    if b == a:\n        return 0\n    # We can go to the destination with battery\n    if b >= a:\n        return 1\n    # We need to add some battery in the end of the trip\n    c = b - a\n    # The robot can't use the accumulator\n    if c % 2!= 0:\n        return -1\n    # The robot can use the accumulator\n    if c % 2 == 0:\n        # The robot can't pass a segment twice\n        if n < 2:\n            return -1\n        # The robot can't pass a segment twice\n        if n == 2:\n            return 2\n        # The robot can pass a segment twice\n        if n >= 3:\n            return n\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, battery, accumulator = map(int, stdin.split())\n    segments = list(map(int, stdin.split()))\n\n    if battery + accumulator > battery * accumulator:\n        return 'Impossible'\n\n    battery_usage = 0\n    accumulator_usage = 0\n    index = 0\n    res = 0\n    while index < len(segments):\n        if segments[index]:\n            battery_usage += 1\n            accumulator_usage += 1\n        else:\n            accumulator_usage += 1\n            battery_usage = 0\n\n        if battery_usage > battery:\n            battery_usage -= 1\n            accumulator_usage -= 1\n            continue\n\n        if accumulator_usage > accumulator:\n            accumulator_usage -= 1\n            battery_usage = 0\n            res += 1\n            continue\n\n        index += 1\n\n    return res"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_exposed(s: int) -> bool:\n        return s == 1\n\n    def current_segment_is_exposed(s: int) -> bool:\n        return is_exposed(s_array[s - 1])\n\n    n, b, a = [int(x) for x in stdin.split()]\n\n    s_array = [int(x) for x in stdin.split()]\n\n    return max(x for x in range(1, n + 1) if current_segment_is_exposed(x) and b - s_array[x - 1] >= 0 and a - s_array[x - 1] >= 0)\n\nassert(solution(stdin) == 5)\nassert(solution(stdin2) == 3)\nassert(solution(stdin3) == 5)\nassert(solution(stdin4) == 4)\nassert(solution(stdin5) == 5)\nassert(solution(stdin6) == 2)\nassert(solution(stdin7) == 4)\nassert(solution(stdin8) == 1)\nassert(solution(stdin9) == 3)\nassert(solution(stdin10) == 1)\nassert(solution(stdin11) == 2)\nassert(solution(stdin12) == 2)\nassert(solution(stdin13) == 4)\nassert(solution(stdin14) == 5)\nassert(solution(stdin15) == 2)\nassert(solution(stdin16) == 1)\nassert(solution(stdin17) == 3)\nassert(solution(stdin18) == 5)\nassert(solution(stdin19) == 3)\nassert(solution(stdin20) == 1)\nassert(solution(stdin21) == 5)\nassert(solution(stdin22) == 3)\nassert(solution(stdin23) == 4)\nassert(solution(stdin24) == 5)\nassert(solution(stdin25) == 4)\nassert(solution(stdin26) == 4)\nassert(solution(stdin27) == 5)\nassert(solution(stdin28) == 3)\nassert(solution(stdin29) == 1)\nassert(solution(stdin30) == 2)\nassert(solution(stdin31) == 1)\nassert(solution(stdin32) == 4)\nassert(solution(stdin33) == 5)\nassert(solution(stdin34) == 3)\nassert(solution(stdin35) == 2)\nassert(solution(stdin36) == 1)\nassert(solution(stdin37) == 3)\nassert(solution(stdin38) == 3)\nassert(solution(stdin39) == 5)\nassert(solution(stdin40) == 4)\nassert(solution(stdin41) == 5)\nassert(solution(stdin42) == 4)\nassert(solution(stdin43) == 4)\nassert(solution(stdin44) == 5)\nassert(solution(stdin45) == 5)\nassert(solution(stdin46) == 4)\nassert(solution(stdin47) == 5)\nassert(solution(stdin48) == 4)\nassert(solution(stdin49) == 5)\nassert(solution(stdin50) == 4)\nassert(solution(stdin51) == 5)\nassert(solution(stdin52) == 5)\nassert(solution(stdin53) == 4)\nassert(solution(stdin54) == 5)\nassert(solution(stdin55) == 5)\nassert(solution(stdin56) == 4)\nassert(solution(stdin57) == 5)\nassert(solution(stdin58) == 5)\nassert(solution(stdin59) == 5)\nassert(solution(stdin60) == 4)\nassert(solution(stdin61) == 5)\nassert(solution(stdin62) == 5)\nassert(solution(stdin63) == 4)\nassert(solution(stdin64) == 5)\nassert(solution(stdin65) == 4)\nassert(solution(stdin66) == 5)\nassert(solution(stdin67) == 5)\nassert(solution(stdin68) == 5)\nassert(solution(stdin69) == 5)\nassert(solution(stdin70) == 5)\nassert(solution(stdin71) == 5)\nassert(solution(stdin72) == 5)\nassert(solution(stdin73) == 5)\nassert(solution(stdin74) == 5)\nassert(solution(stdin75) == 5)\nassert(solution(stdin76) == 5)\nassert(solution(stdin77) == 5)\nassert(solution(stdin78) == 5)\nassert(solution(stdin79) == 5)\nassert(solution(stdin80) == 5)\nassert(solution(stdin81) == 5)\nassert(solution(stdin82) == 5)\nassert(solution(stdin83) == 5)\nassert(solution(stdin84) == 5)\nassert(solution(stdin85) == 5)\nassert(solution(stdin86) == 5)\nassert(solution(stdin87) == 5)\nassert(solution(stdin88) == 5)\nassert(solution(stdin89"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n\nimport sys\n\nT = int(sys.stdin.readline().strip())\n\nfor _ in range(T):\n    n, b, a = map(int, sys.stdin.readline().strip().split())\n    s = list(map(int, sys.stdin.readline().strip().split()))\n    battles = 0\n    if a > 0: battles = 1\n    if a % 2 == 0: battles = 2\n    l, r = 0, n - 1\n    while l < r:\n        if s[l] == 1 and s[r] == 1:\n            battles += 1\n            l += 1\n            r -= 1\n        elif s[l] == 1 and s[r] == 0:\n            battles += 1\n            l += 1\n        elif s[l] == 0 and s[r] == 1:\n            battles += 1\n            r -= 1\n        else:\n            l += 1\n            r -= 1\n    print(battles)"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(i) for i in stdin.split(' ')]\n    s = [int(i) for i in stdin.split(' ')]\n    start = 0\n    end = n - 1\n    n -= 1\n    b_result = 0\n    a_result = 0\n    b_max = 0\n    a_max = 0\n    while True:\n        if b_result == 0:\n            if s[start] == 1:\n                a_max += 1\n            b_result += 1\n            start += 1\n        else:\n            if s[end] == 1:\n                b_max += 1\n            a_result -= 1\n            end -= 1\n        if end < 0:\n            break\n    if b_max > a_max:\n        return str(b_max)\n    else:\n        return str(a_max)\n\nassert(solution('''5 2 1''') == '5')\nassert(solution('''6 2 1''') == '3')\nassert(solution('''6 2 1''') == '3')\n"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4103,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(n) for n in stdin.split()]\n    s = [int(n) for n in stdin.split()]\n\n    return s\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdout = ''\n    return stdout\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\nassert(solution('8-7+6-5+4-3+2-1-0')) == 4\nassert(solution('2+2')) == -46\nassert(solution('112-37')) == 375\nassert(solution('-6')) == -6\nassert(solution('-7')) == -7\nassert(solution('-8')) == -8\nassert(solution('-9')) == -9\nassert(solution('-10')) == -10\nassert(solution('-11')) == -11\nassert(solution('-12')) == -12\nassert(solution('-13')) == -13\nassert(solution('-14')) == -14\nassert(solution('-15')) == -15\nassert(solution('-16')) == -16\nassert(solution('-17')) == -17\nassert(solution('-18')) == -18\nassert(solution('-19')) == -19\nassert(solution('-20')) == -20\nassert(solution('-21')) == -21\nassert(solution('-22')) == -22\nassert(solution('-23')) == -23\nassert(solution('-24')) == -24\nassert(solution('-25')) == -25\nassert(solution('-26')) == -26\nassert(solution('-27')) == -27\nassert(solution('-28')) == -28\nassert(solution('-29')) == -29\nassert(solution('-30')) == -30\nassert(solution('-31')) == -31\nassert(solution('-32')) == -32\nassert(solution('-33')) == -33\nassert(solution('-34')) == -34\nassert(solution('-35')) == -35\nassert(solution('-36')) == -36\nassert(solution('-37')) == -37\nassert(solution('-38')) == -38\nassert(solution('-39')) == -39\nassert(solution('-40')) == -40\nassert(solution('-41')) == -41\nassert(solution('-42')) == -42\nassert(solution('-43')) == -43\nassert(solution('-44')) == -44\nassert(solution('-45')) == -45\nassert(solution('-46')) == -46\nassert(solution('-47')) == -47\nassert(solution('-48')) == -48\nassert(solution('-49')) == -49\nassert(solution('-50')) == -50\nassert(solution('-51')) == -51\nassert(solution('-52')) == -52\nassert(solution('-53')) == -53\nassert(solution('-54')) == -54\nassert(solution('-55')) == -55\nassert(solution('-56')) == -56\nassert(solution('-57')) == -57\nassert(solution('-58')) == -58\nassert(solution('-59')) == -59\nassert(solution('-60')) == -60\nassert(solution('-61')) == -61\nassert(solution('-62')) == -62\nassert(solution('-63')) == -63\nassert(solution('-64')) == -64\nassert(solution('-65')) == -65\nassert(solution('-66')) == -66\nassert(solution('-67')) == -67\nassert(solution('-68')) == -68\nassert(solution('-69')) == -69\nassert(solution('-70')) == -70\nassert(solution('-71')) == -71\nassert(solution('-72')) == -72\nassert(solution('-73')) == -73\nassert(solution('-74')) == -74\nassert(solution('-75')) == -75\nassert(solution('-76')) == -76\nassert(solution('-77')) == -77\nassert(solution('-78')) == -78\nassert(solution('-79')) == -79\nassert(solution('-80')) == -80\nassert(solution('-81')) == -81\nassert(solution('-82')) == -82\nassert(solution('-83')) == -83\nassert(solution('-84')) == -84\nassert(solution('-85')) == -85\nassert(solution('-86')) == -86\nassert(solution('-87')) == -87\nassert(solution('-88')) == -88\nassert(solution('-89')) == -89\nassert(solution('-90')) == -90\nassert(solution('-91')) == -91\nassert(solution('-92')) == -92\nassert(solution('-93')) == -93\nassert(solution('-94')) == -94\nassert(solution('-95')) == -95\nassert(solution('-96')) == -96\nassert(solution('-97')) == -97\nassert(solution('-98')) == -98\nassert(solution('-99')) == -99\nassert(solution('-100')) == -100\nassert(solution('-101')) == -101\nassert(solution('-102')) == -102\nassert(solution('-103')) == -103\nassert(solution('-104')) == -104\nassert(solution('-105')) == -105\nassert(solution('-106')) == -106\nassert(solution('-107')) == -107\nassert(solution('-108')) == -108\nassert(solution('-109')) == -109\nassert(solution('-110')) == -110\nassert(solution('-111')) == -111\nassert(solution('-112')) == -112\nassert(solution('-113')) == -113\nassert(solution('-114')) == -114\nassert(solution('-115')) == -115\nassert(solution('-116')) == -116\nassert(solution('-117')) == -117\nassert(solution('-118')) == -118\nassert(solution('-119')) == -119\nassert(solution('-120')) == -120\nassert(solution('-121')) == -121\nassert(solution('-122')) == -122\nassert(solution('-123')) == -123\nassert(solution('-124')) == -124\nassert(solution('-125')) == -125\nassert(solution('-126')) == -126\nassert(solution('-127')) == -127\nassert(solution('-128')) == -128\nassert(solution('-129')) == -129\nassert(solution('-130')) == -130\nassert(solution('-131')) == -131\nassert(solution('-132')) == -132\nassert(solution('-133')) == -133\nassert(solution('-134')) == -134\nassert(solution('-135')) == -135\nassert(solution('-136')) == -136\nassert(solution('-137')) == -137\nassert(solution('-138')) == -138\nassert(solution('-139')) == -139\nassert(solution('-140')) == -140\nassert(solution('-141')) == -141\nassert(solution('-142')) == -142\nassert(solution('-143')) == -143\nassert(solution('"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    \n    # ---\n    \n    return str(eval(stdin))"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    i = 0\n    while i < len(stdin):\n        if stdin[i] == '-':\n            del stdin[i]\n            i -= 1\n            continue\n        if stdin[i] == '+':\n            del stdin[i]\n            i -= 1\n            continue\n        break\n    return str(eval(''.join(stdin)))\n\nassert(solution('8-7+6-5+4-3+2-1-0') == '4')\nassert(solution('2+2') == '-46')\nassert(solution('112-37') == '375')\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #result = eval(stdin.replace(\"-\", \"+-\").replace(\"+-\", \"+\"))\n    result = eval(stdin)\n    return result"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    expr = stdin.split(\"-\")\n    expr = \"\".join([op + nums for op, nums in itertools.zip_longest(expr, expr[1:], fillvalue=\"\")])\n    return str(eval(expr))"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    expr = stdin.split()\n    # TODO: your code here\n    return None"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Replace this with your solution\n    return \"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \nreturn 0"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.split()\n    n = int(t[0])\n    k = int(t[1])\n    if n < 2 or k < 2 or n > 2 * 10**5 or k > 2 * 10**5:\n        return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    ans = \"YES\"\n    for _ in range(n):\n        b, g = map(int, stdin.readline().split())\n        if b == g:\n            ans = \"NO\"\n            break\n    print(ans)\n    return \"\"\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    if not 2 <= n <= 2 * 10 ** 5:\n        return \"NO\"\n\n    if not 2 <= k <= 2 * 10 ** 5:\n        return \"NO\"\n\n    man_colors = set()\n    woman_colors = set()\n    for i in range(1, n + 1):\n        man_colors.add(stdin[i])\n        woman_colors.add(stdin[i + n])\n\n    if len(man_colors)!= k or len(woman_colors)!= k:\n        return \"NO\"\n\n    for i in range(2, k + 1):\n        if i not in man_colors or i not in woman_colors:\n            return \"NO\"\n\n    for i in range(n):\n        b, g = stdin[i], stdin[i + n]\n        if b == g:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    good = [True] * (n * 2)\n    bad = [True] * (n * 2)\n    for i in range(n * 2):\n        good[i] = False\n        bad[i] = False\n\n    for i in range(k * n):\n        m = i // n\n        w = i % n\n\n        # Check if man's costume is not the same as woman's costume\n        if good[m * 2] == False or good[m * 2 + 1] == False:\n            continue\n        if bad[m * 2] == False or bad[m * 2 + 1] == False:\n            continue\n\n        # Check if colors of costumes are not the same\n        if good[m * 2 + 1] == good[m * 2]:\n            continue\n        if bad[m * 2 + 1] == bad[m * 2]:\n            continue\n\n        # Check if colors of costumes are not the same\n        if good[m * 2] == bad[m * 2 + 1] and good[m * 2 + 1] == bad[m * 2]:\n            continue\n\n        # Check if there is a pair with costumes of the same color\n        if good[m * 2] == good[m * 2 + 1]:\n            continue\n        if bad[m * 2] == bad[m * 2 + 1]:\n            continue\n\n        # Check if there is a pair with costumes of the same color\n        if good[m * 2] == bad[m * 2]:\n            continue\n        if bad[m * 2] == good[m * 2 + 1]:\n            continue\n\n        # Check if the colors of costumes are not the same\n        if good[m * 2]!= good[m * 2 + 1]:\n            continue\n        if bad[m * 2]!= bad[m * 2 + 1]:\n            continue\n\n        good[m * 2 + 1] = True\n        bad[m * 2 + 1] = True\n\n    return \"YES\" if all(good) else \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k or n % k:\n        return \"NO\"\n    return \"YES\\n{}\\n{}\".format(\n        \"\\n\".join(\n            map(\n                lambda x: \"{} {}\".format(x[0], x[1]),\n                zip(\n                    *[\n                        map(\n                            int,\n                            stdin.split()[\n                                n * 2 : n * 2 + 2\n                                ]\n                            )\n                        for _ in range(n)\n                        ]\n                    )\n                )\n            ),\n            \"\\n\".join(\n                map(\n                    lambda x: \"{} {}\".format(x[0], x[1]),\n                    zip(\n                        *[\n                            map(\n                                int,\n                                stdin.split()[\n                                    n * 2 + 2 : n * 2 + 4\n                                    ]\n                                )\n                            for _ in range(n)\n                        ]\n                    )\n                )\n            ),\n        )\n    )\n"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    colors = range(1, k+1)\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        colors[a - 1] = b\n        colors[b - 1] = a\n    return \"YES\" if all(a!= b for a, b in zip(colors, colors[1:])) else \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n\n    if k < 2 or k > 2 * 10 ** 5:\n        return 'NO'\n\n    n = int(stdin)\n\n    if n < 2 or n > 2 * 10 ** 5:\n        return 'NO'\n\n    m = n - 1\n\n    matrix = [[False for _ in range(k + 1)] for _ in range(n)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            matrix[i - 1][j] = matrix[i - 1][j - 1] and (i!= j)\n\n    for i in range(n):\n        for j in range(m):\n            if not matrix[i][j]:\n                continue\n\n            man = (i + 1) % n\n            woman = (j + 1) % m\n\n            man_costume = abs(i - man)\n            woman_costume = abs(j - woman)\n\n            if man_costume == woman_costume:\n                return 'NO'\n\n            if man_costume > k or woman_costume > k:\n                continue\n\n            print(i + 1, j + 1)\n\n    return 'YES'"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \"NO\" if n * k > 4 * 10 ** 5 else \"YES\"\n\n\nassert solution(\"10 4\") == \"YES\"\nassert solution(\"100 2\") == \"YES\"\nassert solution(\"1000 5\") == \"NO\"\nassert solution(\"1000 2\") == \"YES\"\nassert solution(\"100 2\") == \"YES\"\nassert solution(\"100 3\") == \"NO\"\nassert solution(\"100 4\") == \"YES\"\nassert solution(\"100 5\") == \"YES\"\nassert solution(\"1000 2\") == \"YES\"\nassert solution(\"1000 3\") == \"NO\"\nassert solution(\"1000 4\") == \"YES\"\nassert solution(\"1000 5\") == \"YES\"\nassert solution(\"1000 6\") == \"YES\"\nassert solution(\"1000 7\") == \"NO\"\nassert solution(\"1000 8\") == \"YES\"\nassert solution(\"1000 9\") == \"YES\"\nassert solution(\"1000 10\") == \"NO\"\nassert solution(\"1000 11\") == \"YES\"\nassert solution(\"1000 12\") == \"YES\"\nassert solution(\"1000 13\") == \"NO\"\nassert solution(\"1000 14\") == \"YES\"\nassert solution(\"1000 15\") == \"YES\"\nassert solution(\"1000 16\") == \"YES\"\nassert solution(\"1000 17\") == \"YES\"\nassert solution(\"1000 18\") == \"YES\"\nassert solution(\"1000 19\") == \"NO\"\nassert solution(\"1000 20\") == \"YES\"\nassert solution(\"1000 21\") == \"YES\"\nassert solution(\"1000 22\") == \"YES\"\nassert solution(\"1000 23\") == \"YES\"\nassert solution(\"1000 24\") == \"NO\"\nassert solution(\"1000 25\") == \"YES\"\nassert solution(\"1000 26\") == \"YES\"\nassert solution(\"1000 27\") == \"YES\"\nassert solution(\"1000 28\") == \"YES\"\nassert solution(\"1000 29\") == \"YES\"\nassert solution(\"1000 30\") == \"YES\"\nassert solution(\"1000 31\") == \"YES\"\nassert solution(\"1000 32\") == \"YES\"\nassert solution(\"1000 33\") == \"YES\"\nassert solution(\"1000 34\") == \"YES\"\nassert solution(\"1000 35\") == \"YES\"\nassert solution(\"1000 36\") == \"YES\"\nassert solution(\"1000 37\") == \"YES\"\nassert solution(\"1000 38\") == \"YES\"\nassert solution(\"1000 39\") == \"YES\"\nassert solution(\"1000 40\") == \"YES\"\nassert solution(\"1000 41\") == \"YES\"\nassert solution(\"1000 42\") == \"NO\"\nassert solution(\"1000 43\") == \"YES\"\nassert solution(\"1000 44\") == \"YES\"\nassert solution(\"1000 45\") == \"YES\"\nassert solution(\"1000 46\") == \"YES\"\nassert solution(\"1000 47\") == \"YES\"\nassert solution(\"1000 48\") == \"YES\"\nassert solution(\"1000 49\") == \"YES\"\nassert solution(\"1000 50\") == \"YES\"\nassert solution(\"1000 51\") == \"YES\"\nassert solution(\"1000 52\") == \"YES\"\nassert solution(\"1000 53\") == \"YES\"\nassert solution(\"1000 54\") == \"YES\"\nassert solution(\"1000 55\") == \"YES\"\nassert solution(\"1000 56\") == \"YES\"\nassert solution(\"1000 57\") == \"YES\"\nassert solution(\"1000 58\") == \"YES\"\nassert solution(\"1000 59\") == \"YES\"\nassert solution(\"1000 60\") == \"YES\"\nassert solution(\"1000 61\") == \"YES\"\nassert solution(\"1000 62\") == \"YES\"\nassert solution(\"1000 63\") == \"YES\"\nassert solution(\"1000 64\") == \"YES\"\nassert solution(\"1000 65\") == \"YES\"\nassert solution(\"1000 66\") == \"YES\"\nassert solution(\"1000 67\") == \"YES\"\nassert solution(\"1000 68\") == \"YES\"\nassert solution(\"1000 69\") == \"YES\"\nassert solution(\"1000 70\") == \"YES\"\nassert solution(\"1000 71\") == \"YES\"\nassert solution(\"1000 72\") == \"YES\"\nassert solution(\"1000 73\") == \"YES\"\nassert solution(\"1000 74\") == \"YES\"\nassert solution(\"1000 75\") == \"YES\"\nassert solution(\"1000 76\") == \"YES\"\nassert solution(\"1000 77\") == \"YES\"\nassert solution(\"1000 78\") == \"YES\"\nassert solution(\"1000 79\") == \"YES\"\nassert solution(\"1000 80\") == \"YES\"\nassert solution(\"1000 81\") == \"YES\"\nassert solution(\"1000 82\") == \"YES\"\nassert solution(\"1000 83\") == \"YES\"\nassert solution(\"1000 84\") == \"YES\"\nassert solution(\"1000 85\") == \"YES\"\nassert solution(\"1000 86\") == \"YES\"\nassert solution(\"1000 87\") == \"YES\"\nassert solution(\"1000 88\") == \"YES\"\nassert solution(\"1000 89\") == \"YES\"\nassert solution(\"1000 90\") == \"YES\"\nassert solution(\"1000 91\") == \"YES\"\nassert solution(\""
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nEXAMPLES = [\n\n    (\n        (\n            \"4 3\\n\",\n            \"YES\\n\"\n            \"3 1\\n\"\n            \"1 3\\n\"\n            \"3 2\\n\"\n            \"2 3\\n\"\n            \"3 4\\n\"\n            \"4 3\\n\"\n            \"3 2\\n\"\n            \"2 4\\n\"\n            \"4 3\\n\"\n            \"3 1\\n\"\n            \"1 4\\n\"\n            \"3 1\\n\"\n            \"4 3\\n\"\n            \"4 2\\n\"\n            \"3 4\\n\"\n            \"4 1\\n\"\n            \"1 4\\n\"\n            \"3 1\\n\",\n        ),\n        \"YES\",\n    ),\n]\n\n\n@pytest.mark.parametrize(*EXAMPLES)\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if not 1 < n < 2 * 10 ** 5 and not 1 < k < 2 * 10 ** 5:\n        return 'NO'\n    if not (n % 2 == 0 and k % 2 == 0):\n        return 'NO'\n    return 'YES\\n' + '\\n'.join(str(x) for x in map(str, solve(n, k)))\n\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import accumulate\n    n, k, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a = [a[i] - a[i-1] for i in range(1, n+1)]\n    print(a)\n    if n < k or k < 1:\n        return -1\n    if n == k:\n        return sum(a)\n    a.sort()\n    best = 0\n    for i in range(n - k + 1):\n        if a[i] >= k:\n            best = max(best, sum(a[i:i+k]))\n    return best\nprint(solution(stdin.read()))"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    beauty = sum(a)\n\n    # if length is less than k, then nothing to do\n    if k > n - k:\n        return -1\n\n    # k-intervals\n    for i in range(k, n):\n        if a[i] < a[i - k]:\n            beauty -= a[i - k]\n            a[i] += a[i - k]\n            beauty += a[i]\n\n    # last k-intervals\n    # find the maximum sum of beauty for every k-interval\n    for i in range(0, n - k + 1):\n        if a[i] >= x:\n            # what if we cannot repost all the pictures, then return -1\n            if i == n - k:\n                return -1\n            else:\n                beauty -= a[i]\n                a[i] += a[i + k]\n                beauty += a[i + k]\n    return beauty\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip().split(' ')\n    n, k, x = int(line[0]), int(line[1]), int(line[2])\n    line = stdin.strip().split(' ')\n    a = list(map(int, line))\n\n    kp = 0\n    tp = 0\n    for i in range(n):\n        tp = tp + a[i]\n        if tp > kp:\n            kp = tp\n\n        if kp >= k:\n            tp = 0\n            if i < n - 1:\n                tp = a[i + 1]\n                kp = k\n            if i - k >= 0:\n                tp = tp + a[i - k]\n                kp = kp + a[i - k]\n            if i - k - 1 >= 0:\n                tp = tp + a[i - k - 1]\n                kp = kp + a[i - k - 1]\n            if i - k - 2 >= 0:\n                tp = tp + a[i - k - 2]\n                kp = kp + a[i - k - 2]\n            if i - k - 3 >= 0:\n                tp = tp + a[i - k - 3]\n                kp = kp + a[i - k - 3]\n\n            if kp < k:\n                return -1\n\n    return tp"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = (int(x) for x in stdin.split())\n\n    if n < k:\n        return -1\n\n    beauty = list(int(x) for x in stdin.split())\n\n    if k == 1:\n        return sum(beauty)\n\n    # k - 1 is max number of segments with at least 1 reposted picture\n    # but we have to have at least k picture reposted in each segment\n    # so we can add k - 1 zeroes at the beginning\n    # and k zeroes at the end\n    beauty_count = [0] * (k - 1) + list(reversed(beauty)) + [0] * (k - 1)\n\n    beauty_count_with_x_reposted = [0] * (k + 1)\n    for i in range(k + 1):\n        beauty_count_with_x_reposted[i] = sum(beauty_count[:i])\n\n    result = sum(beauty)\n    for i in range(k, n + 1):\n        total = 0\n        for j in range(k):\n            total += beauty_count_with_x_reposted[j]\n        result = max(result, total + sum(beauty_count[i - k:i]))\n\n    return result\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_pics, min_len, num_pics_to_repost = [int(x) for x in stdin.split()]\n    beauties = [int(x) for x in stdin.split()]\n\n    # check for empty list\n    if not len(beauties):\n        return '-1'\n\n    # check if num_pics is divisible by min_len\n    if num_pics % min_len!= 0:\n        return '-1'\n\n    # check if enough number of pictures to repost\n    if num_pics < num_pics_to_repost:\n        return '-1'\n\n    # check if it's possible to repost all pictures\n    num_pics_in_seg = num_pics // min_len\n    seg_beauties = [0 for _ in range(num_pics_in_seg)]\n    for i in range(num_pics_in_seg):\n        seg_beauties[i] = beauties[i * min_len]\n\n    # get total beauty of the first segment\n    total_beauty = sum(seg_beauties)\n\n    # get the max possible beauty for the first segment\n    max_possible = sum(seg_beauties[:num_pics_to_repost])\n    if max_possible < total_beauty:\n        return '-1'\n\n    # find the max possible beauty of any segment starting at the first segment\n    max_beauty = max(seg_beauties[:num_pics_to_repost])\n    for i in range(num_pics_in_seg):\n        if i > 0:\n            if seg_beauties[i] < max_possible:\n                max_possible = max(seg_beauties[i], max_possible)\n            else:\n                max_possible += max_beauty\n\n    return str(max_possible)\n\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n\n    arr = list(map(int, stdin.split()))\n    beauty = sum(arr)\n\n    if n < k:\n        return '-1'\n\n    if n == k:\n        return str(beauty)\n\n    dp = [[0] * (x + 1) for _ in range(k + 1)]\n    dp[0][0] = 0\n\n    for i in range(n):\n        for j in range(x + 1):\n            if j >= arr[i]:\n                dp[i + 1][j] = max(dp[i][j], dp[i][j - arr[i]] + arr[i])\n            else:\n                dp[i + 1][j] = dp[i][j]\n\n    return str(dp[n][x])\n\nassert(solution(stdin) == stdin)\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    prefix_sum = [0]\n    for i in range(1, n + 1):\n        prefix_sum.append(prefix_sum[-1] + a[i - 1])\n    min_len = min(k, n - k + 1)\n    beauty = {i: 0 for i in range(1, n + 1)}\n    for i in range(1, n + 1):\n        beauty[i] = prefix_sum[i] - prefix_sum[max(0, i - k)]\n    best_sum = 0\n    for a_start in range(0, n - min_len + 1):\n        sum_reposted = 0\n        for a_end in range(a_start, min_len + a_start):\n            sum_reposted += beauty[a_end + 1]\n        best_sum = max(sum_reposted, best_sum)\n    return str(-1 if best_sum == 0 else best_sum)\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n\n    if n < k:\n        return -1\n\n    if k == 1:\n        return sum(l)\n\n    if k == 2:\n        sum = 0\n        for i in range(n):\n            if l[i] >= l[i + 1]:\n                sum += l[i]\n        return sum\n\n    max_sum = 0\n    left = 0\n    right = n - k + 1\n    cur_sum = 0\n\n    while left <= right:\n        cur_sum = 0\n        for i in range(left, right + 1):\n            cur_sum += l[i]\n        max_sum = max(max_sum, cur_sum)\n\n        if left + k - 1 < n:\n            left += 1\n            cur_sum -= l[left]\n        else:\n            right -= 1\n            cur_sum -= l[right]\n        left += 1\n\n    return max_sum\n"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    picture_count, min_segment_length, requested_beauty_value = map(int, stdin.split(\" \"))\n    picture_beauty_values = [int(v) for v in stdin.strip().split(\" \")]\n    max_beauty = 0\n    for i in range(picture_count - min_segment_length + 1):\n        current_segment_sum = 0\n        for j in range(min_segment_length):\n            current_segment_sum += picture_beauty_values[i + j]\n        if current_segment_sum >= requested_beauty_value:\n            max_beauty = max(max_beauty, current_segment_sum)\n    return str(max_beauty)"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin.strip()\n    costs = [0] * (n + 1)\n    for i in range(n):\n        if s[i] == '1':\n            costs[i + 1] = k\n        else:\n            costs[i + 1] = i + 1\n    return str(sum(costs))"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.split()[1]\n    res = 0\n    for i in range(n):\n        if s[i] == '1':\n            res += i + 1\n    return res"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n\n    s = stdin.splitlines()[1]\n    rooms = [0] * n\n    for i, c in enumerate(s):\n        if c == '1':\n            rooms[i] = 1\n\n    min_cost = n\n    for i in range(1, n):\n        min_cost = min(min_cost, rooms[i - 1] + i + k)\n\n    return str(min_cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[:-1]\n    res = 0\n    for i, c in enumerate(s):\n        if c == '1':\n            res += i + k\n        else:\n            res += i\n    return str(res)"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[1:n + 1]\n\n    total = 0\n    for i, c in enumerate(s):\n        if c == '1':\n            total += i + k - 1\n        else:\n            total += i\n\n    return str(total)"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip('\\n')\n    k = min(k, n - k)\n    cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            cost += i\n            cost += k * (n - i)\n    return cost\n\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    def is_spot(spot: str) -> bool:\n        return bool(int(spot))\n    \n    def get_cost(spot: str) -> int:\n        return int(spot)\n    \n    def find_nearest_spot(spot: str, i: int) -> int:\n        if spot == '1':\n            return i\n        elif spot == '0':\n            return -1\n        else:\n            raise Exception('Unknown spot')\n    \n    def connect_all(r1: int, r2: int) -> int:\n        return r1 - 1 + r2 - 1\n    \n    def find_k(n: int, k: int) -> int:\n        return k - 1 if k <= n else k - 1 - n\n    \n    def get_router_spot_cost(i: int, n: int) -> int:\n        if i == 1:\n            return i + n - 1\n        elif i == n:\n            return n + 1\n        else:\n            return n + 1 + (n - i)\n    \n    def find_router_spot(spot: str, i: int, n: int) -> int:\n        if i == 1:\n            return i\n        elif i == n:\n            return n - 1\n        else:\n            return n - 1 - (n - i)\n    \n    n, k = map(int, stdin.split())\n    \n    if k >= 2 * n:\n        return -1\n    \n    spot_costs = list(map(int, stdin.split()))\n    spot_costs = [spot_costs[i] for i in range(len(spot_costs)) if is_spot(spot_costs[i])]\n    \n    spot_costs.sort(reverse = True)\n    \n    spot_costs = [spot_costs[i] for i in range(len(spot_costs)) if get_cost(spot_costs[i]) <= k]\n    \n    if not spot_costs:\n        return -1\n    \n    spot_costs_sum = sum(spot_costs)\n    \n    min_cost = spot_costs_sum\n    \n    for i in range(len(spot_costs) - 1):\n        spot = stdin[i]\n        \n        i = i + 1\n        j = i + 1\n        \n        while j < len(spot_costs):\n            spot_cost = get_cost(spot_costs[j])\n            \n            if spot_cost <= k:\n                spot_costs_sum -= spot_cost\n                k -= spot_cost\n                \n                i += 1\n                j = i + 1\n            else:\n                break\n        \n        while j < len(spot_costs):\n            spot_cost = get_cost(spot_costs[j])\n            \n            if spot_cost <= k:\n                spot_costs_sum -= spot_cost\n                k -= spot_cost\n                \n                j += 1\n            else:\n                break\n        \n        min_cost = min(min_cost, spot_costs_sum)\n    \n    return min_cost\n    \n    \n"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [stdin.split()]\n    n, k = int(inputs[0][0]), int(inputs[0][1])\n    s = inputs[1][0]\n    cost = 0\n    for i in range(n):\n        if s[i] == '1':\n            cost += i\n        elif s[i] == '0':\n            cost += k\n    return str(cost)\n\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if len(s) == 1:\n        return 0\n    result = n\n    for i, char in enumerate(s):\n        if char == '1':\n            result += k\n        else:\n            result += i + 1\n    return result"
    },
    {
        "number": 4107,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    cost = 0\n    for i, v in enumerate(s):\n        if v == \"1\":\n            cost += i + k\n    return str(cost)\n"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return \"Yes\" if s == t[::-1] else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    T = stdin.strip()\n    # We can replace e with l and z with p, but that would be a waste, so we'll use a different character to mark the remaining characters\n    p_character = 'p'\n    e_character = 'e'\n\n    # We can transform e with p, but that is redundant (we can easily transform p with e, and vice-versa), so we'll use a different character\n    # to mark the remaining characters\n    l_character = 'l'\n\n    # We can transform l with p, but that is redundant (we can easily transform p with l, and vice-versa), so we'll use a different character\n    # to mark the remaining characters\n    z_character = 'z'\n\n    # Now, we'll store the count of each character in the string\n    counts = {}\n    for character in S:\n        if character in counts:\n            counts[character] += 1\n        else:\n            counts[character] = 1\n\n    for character in T:\n        if character in counts:\n            counts[character] -= 1\n\n    for character in counts:\n        if character in {p_character, e_character, l_character, z_character}:\n            if counts[character]!= 0:\n                return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if s.lower() == t.lower():\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return 'Yes' if stdin == stdin[::-1] else 'No'\n\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[0] == stdin[-1] else 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    return 'Yes' if s == t[::-1] else 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin[0], stdin[1])"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return 'Yes' if s.lower() == t.lower() else 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n    T = stdin.split()[1]\n    result = \"No\"\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            if S[i] == T[0] and T[i] == T[len(T) - 1]:\n                S = S.replace(S[i], T[len(T) - 1], 1)\n                T = T.replace(T[i], S[i], 1)\n                result = \"Yes\"\n            elif S[i] == T[0]:\n                S = S.replace(S[i], T[len(T) - 1], 1)\n                T = T.replace(T[i], S[i], 1)\n                result = \"Yes\"\n            elif S[i] == T[len(T) - 1]:\n                S = S.replace(S[i], T[0], 1)\n                T = T.replace(T[i], S[i], 1)\n                result = \"Yes\"\n            else:\n                return result\n    return result"
    },
    {
        "number": 4108,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    return \"Yes\" if s == t[::-1] else \"No\""
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    books, algorithms = map(int, stdin.splitlines()[0].split())\n\n    solutions = [[0 for _ in range(algorithms)] for _ in range(algorithms + 1)]\n    for _ in range(books):\n        book, cost = map(int, stdin.splitlines()[1 + _].split())\n        for i in range(algorithms):\n            solutions[book][i] = cost\n\n    min_cost = [float('inf')] * (algorithms + 1)\n    for i in range(1, algorithms + 1):\n        for j in range(i, algorithms + 1):\n            min_cost[j] = min(min_cost[j], solutions[i][j - i] + min_cost[j - i])\n\n    return 'YES' if min_cost[algorithms] < float('inf') else 'NO'\n\n\nassert(solution('''4\n3\n1 2 3 4\n1 2 1 3\n1 1 2 3\n1 1 1 2\n''') == 'YES')\nassert(solution('''4\n4\n1 2 3 4\n1 2 1 3\n1 1 2 3\n1 1 1 2\n''') == 'NO')\nassert(solution('''8\n6\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'YES')\nassert(solution('''6\n6\n1 2 3 4 5 6\n1 2 1 3 2 4\n1 1 2 3 1 2\n1 1 1 2 1 1\n1 1 1 1 2 1\n1 1 1 1 1 1\n''') == 'YES')\nassert(solution('''6\n7\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'NO')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'NO')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'YES')\nassert(solution('''8\n7\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'NO')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'NO')\nassert(solution('''8\n7\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'YES')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'YES')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'NO')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'NO')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'NO')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'NO')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'NO')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'YES')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'YES')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'YES')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'YES')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2 3 1 2 3\n1 1 1 2 1 1 3\n1 1 1 1 2 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == 'YES')\nassert(solution('''8\n8\n1 2 3 4 5 6 7 8\n1 2 1 3 2 4 3\n1 1 2"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def _maze_problem(A: list[int]) -> bool:\n        # while A.index(max(A)) == 0:\n        #     A.pop(0)\n        while A[-1] < A[0]:\n            A.pop(0)\n        if A[-1] < A[0]:\n            return False\n        else:\n            return True\n\n    N, M, X = map(int, stdin.split(' '))\n    A = list(map(int, stdin.split(' ')))\n    max_value = max(A)\n    min_value = min(A)\n    if max_value < X:\n        return 'Impossible'\n    elif min_value > X:\n        return 'Impossible'\n    else:\n        if _maze_problem(A):\n            return str(max(A) - min(A))\n        else:\n            return 'Impossible'\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for _ in range(T):\n        N, M = map(int, stdin.split())\n        A = list(map(int, stdin.split()))\n\n        # build a list of integers for the price of each book\n        P = [0]\n        for i in range(1, len(A)):\n            P.append(P[-1] + A[i-1])\n\n        # build a list of pairs for the books, where the first element is the id of the book, and the second element is the price of that book\n        B = [None] * (N+1)\n        for i in range(1, N+1):\n            B[i] = (i, P[i])\n\n        # sort the list of books by their price\n        B.sort(key=lambda x: x[1])\n\n        # build a list of pairs for the books, where the first element is the price of the book and the second element is the number of times the book is read\n        P = [0] * (N+1)\n        for i in range(1, N+1):\n            P[i] = P[i-1] + A[i-1]\n\n        # build a list of pairs for the books, where the first element is the price of the book and the second element is the number of times the book is read\n        B = [None] * (N+1)\n        for i in range(1, N+1):\n            B[i] = (P[i], i)\n\n        # sort the list of books by the number of times they are read\n        B.sort(key=lambda x: x[0])\n\n        # build a list of the M algorithms, where the i-th element is the id of the algorithm\n        A = [0] * M\n        for i in range(M):\n            A[i] = i\n\n        # calculate the value of each algorithm\n        for i in range(1, M):\n            A[i] = A[i-1] + A[i]\n\n        # build a list of integers for the price of each algorithm\n        P = [0] * M\n        for i in range(M):\n            P[i] = i\n\n        # build a list of integers for the number of books that the algorithm has already been read\n        N = [0] * M\n        for i in range(M):\n            N[i] = i\n\n        # calculate the value of each algorithm\n        for i in range(1, M):\n            N[i] = N[i-1] + A[i]\n\n        # build a list of pairs for the algorithms, where the first element is the id of the algorithm and the second element is the number of books that the algorithm has already been read\n        A = [None] * (M+1)\n        for i in range(1, M+1):\n            A[i] = (i, N[i])\n\n        # sort the list of algorithms by the number of books that the algorithm has already been read\n        A.sort(key=lambda x: x[1])\n\n        # calculate the value of each algorithm\n        for i in range(1, M):\n            A[i] = A[i-1] + A[i]\n\n        # build a list of pairs for the algorithms, where the first element is the price of the algorithm and the second element is the number of books that the algorithm has already been read\n        A = [None] * (M+1)\n        for i in range(1, M+1):\n            A[i] = (P[i], N[i])\n\n        # sort the list of algorithms by the price of the algorithm\n        A.sort(key=lambda x: x[0])\n\n        # calculate the value of the first algorithm\n        A[0] = A[0] + A[1]\n\n        # build a list of integers for the price of the books\n        P = [0] * M\n\n        # calculate the value of the first book\n        P[0] = B[0][1]\n\n        # calculate the value of the second book\n        P[1] = B[1][1] + A[1]\n\n        # calculate the value of the third book\n        P[2] = B[2][1] + A[2]\n\n        # calculate the value of the fourth book\n        P[3] = B[3][1] + A[3]\n\n        # calculate the value of the fifth book\n        P[4] = B[4][1] + A[4]\n\n        # calculate the value of the sixth book\n        P[5] = B[5][1] + A[5]\n\n        # calculate the value of the seventh book\n        P[6] = B[6][1] + A[6]\n\n        # calculate the value of the eighth book\n        P[7] = B[7][1] + A[7]\n\n        # calculate the value of the ninth book\n        P[8] = B[8][1] + A[8]\n\n        # calculate the value of the tenth book\n        P[9] = B[9][1] + A[9]\n\n        # calculate the value of the eleventh book\n        P[10] = B[10][1] + A[10]\n\n        # calculate the value of the eleventh book\n        P[11] = B[11][1] + A[11]\n\n        # calculate the value of the twelfth book\n        P[12] = B[12][1] + A[12]\n\n        # calculate the value of the thirteenth book\n        P[13] = B[13][1] + A[13]\n\n        # calculate the value of the fourteenth book\n        P[14] = B[14][1] + A[14]\n\n        # calculate the value of the fifteenth book\n        P[15] = B[15][1] + A[15]\n\n        # calculate the value of the fifteenth book\n        P[16] = B[16][1] + A[16]\n\n        # calculate the value of the seventeenth book\n        P[17] = B[17][1] + A[17]\n\n        # calculate the value of the seventeenth book\n        P[18] = B[18][1] + A[18]\n\n        # calculate the value of the eighteenth book\n        P[19] = B[19][1] + A[19]\n\n        # calculate the value of the nineteenth book\n        P[20] = B[20][1] + A[20]\n\n        # calculate the value of the twentieth book\n        P[21] = B[21][1] + A[21]\n\n        # calculate the value of the twentieth book\n        P[22] = B[22][1] + A[22]\n\n        # calculate the value of the twenty-first book\n        P[23] = B[23][1] + A[23]\n\n        # calculate the value of the twenty-first book\n        P[24] = B[24][1] + A[24]\n\n        # calculate the value of the twenty-first book\n        P[25] = B[25][1] + A[25]\n\n        # calculate the value of the twenty-first book\n        P[26] = B[26][1] + A[26]\n\n        # calculate the value of the twenty-first book\n        P[27] = B[27][1] + A[27]\n\n        # calculate the value of the twenty-first book\n        P[28] = B[28][1] + A[28]\n\n        # calculate the value of the twenty-first book\n        P[29] = B[29][1] + A[29]\n\n        # calculate the value of the twenty-first book\n        P[30] = B[30][1] + A[30]\n\n        # calculate the value of the twenty-first book\n        P[31] = B[31][1] + A[31]\n\n        # calculate the value of the twenty-first book\n        P[32] = B[32][1] +"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    books, algorithm_count, max_algorithm_level, min_yen = map(int, stdin.split())\n\n    book_prices = [list(map(int, stdin.split())) for _ in range(books)]\n\n    # dp[i][j] = min cost to achieve the understanding level j+1 of the algorithm i\n    dp = [[float('inf') for _ in range(algorithm_count)] for _ in range(algorithm_count)]\n    for i in range(algorithm_count):\n        for j in range(algorithm_count):\n            if i == j:\n                dp[i][j] = 0\n            elif i > j:\n                dp[i][j] = min_yen\n            elif j < algorithm_count - 1:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + book_prices[i][0])\n                if i < algorithm_count - 1:\n                    dp[i][j] = min(dp[i][j], dp[i][j + 1] + book_prices[i][1])\n\n    return 'YES' if dp[algorithm_count - 1][0] < max_algorithm_level else 'NO'\n"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, T = list(map(int, stdin.split()))\n    A = [list(map(int, stdin.split())) for _ in range(N)]\n    ans = 0\n\n    for t in range(T):\n        for i in range(N):\n            for j in range(M):\n                if A[i][j] <= t:\n                    A[i][j] += 1\n                    ans += 1\n\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    book_price = stdin.split(' ')\n    book_price = list(map(int, book_price))\n    N = book_price[0]\n    M = book_price[1]\n    book_price.pop(0)\n    book_price.pop(0)\n    a = [[0 for i in range(M+1)] for j in range(N+1)]\n    for i in range(1,N+1):\n        for j in range(1,M+1):\n            a[i][j] = a[i-1][j]\n            if j >= book_price[i-1]:\n                a[i][j] = min(a[i][j], a[i-1][j-book_price[i-1]]+book_price[i-1])\n    if a[N][M] == 0:\n        return 'Impossible'\n    return str(a[N][M])\n\nassert(solution('1 1')) == '0'\nassert(solution('1 2')) == '1'\nassert(solution('5 3')) == '2'\nassert(solution('1 2 3 4 5')) == '5'\nassert(solution('1 2 3 4 5 6')) == '7'\nassert(solution('1 2 3 4 5 6 7')) == '0'\nassert(solution('2 1')) == 'Impossible'\nassert(solution('2 2')) == '2'\nassert(solution('2 3')) == 'Impossible'\nassert(solution('6 2')) == '6'\nassert(solution('2 2 3 4 5 6')) == '8'\nassert(solution('1 2 3 4 5 6 7')) == '7'\nassert(solution('2 2 3 4 5 6 7')) == '0'\nassert(solution('2 2 3 4 5 6 7 8')) == '1'\nassert(solution('2 2 3 4 5 6 7 8 9')) == '2'\nassert(solution('2 2 3 4 5 6 7 8 9 10')) == '3'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11')) == '4'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12')) == '5'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13')) == '6'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14')) == '7'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15')) == '8'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16')) == '9'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17')) == '10'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18')) == '11'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19')) == '12'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20')) == '13'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21')) == '14'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22')) == '15'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23')) == '16'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24')) == '17'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25')) == '18'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26')) == '19'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27')) == '20'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28')) == '21'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29')) == '22'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30')) == '23'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31')) == '24'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32')) == '25'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33')) == '26'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34')) == '27'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35')) == '28'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36')) == '29'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37')) == '30'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38')) == '31'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39')) == '32'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40')) == '33'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41')) == '34'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42')) == '35'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43')) == '36'\nassert(solution('2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44')) == '37'\nassert(solution('2 2 3 4 5 6 7 8 9"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split())\n    C = [int(x) for x in stdin.split()]\n    A = [[0] * (M + 1) for _ in range(N + 1)]\n    for i in range(N):\n        for j in range(M):\n            A[i + 1][j + 1] = A[i][j + 1] + C[i] if j + 1 <= M else A[i][j + 1] + C[i] - C[i] * j\n    return 'yes' if A[-1][-1] >= sum(C) else 'no'\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4109,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    prices = list(map(int, stdin.split()))\n\n    min_price = min(prices)\n    max_price = max(prices)\n\n    return \"Yes\" if min_price >= max_price else \"No\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, G = [int(x) for x in stdin.split()]\n    c_1, c_D = [int(x) for x in stdin.split()]\n    return str(math.ceil((G - c_1 - c_D) / (c_1 + c_D) + 1))"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin.split()\n    D, G = int(result[0]), int(result[1])\n    # check validity\n    if not 1 <= D <= 10:\n        raise Exception(\"invalid input\")\n    if not 100 <= G <= 10**6:\n        raise Exception(\"invalid input\")\n    # get score and perfect bonus\n    s, p = [int(x) for x in stdin.split()]\n    for i in range(1, D+1):\n        if s + i * 100 >= G:\n            return str(i)\n        if s + i * 100 + p * i >= G:\n            return str(i+1)\n\"\"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takahashi's objective is to have a total score of G or more points.\n    We can achieve this objective in three ways:\n    1. Solve three problems each with 200 points.\n    2. Solve four problems each with 100 points.\n    3. Solve five problems each with 100 points.\n    \"\"\"\n    return stdin.strip()\n\n\"\"\"\n\nTakahashi's objective is to have a total score of G or more points.\nOne way to achieve this objective is to solve four problems each with 100 points.\n\nTakahashi solves three problems each with 200 points, making a total score of 600 points.\nHe also solves four problems each with 100 points, making a total score of 700 points.\nHe also solves five problems each with 100 points, making a total score of 800 points.\n\nIf we have G <= 1000, we can do that.\n\"\"\""
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get number of problems and base score from input\n    num_prob, base_score = [int(x) for x in stdin.strip().split()]\n    # Get all scores and bonuses from input\n    scores = []\n    bonuses = []\n    for _ in range(num_prob):\n        scores.append(int(stdin.readline().strip()))\n        bonuses.append(int(stdin.readline().strip()))\n\n    # Get maximum achievable score\n    max_score = base_score * num_prob\n    # If total score is >= max achievable score, then we have solved all problems\n    if max_score >= sum(scores):\n        return str(0)\n\n    # Get sum of bonuses\n    bonus_sum = sum(bonuses)\n\n    # If we're not at our max score, we need to solve at least the number of problems\n    # to get our max score.\n    solutions = int(sum(bonuses) / num_prob)\n\n    # If the sum of bonuses is greater than max score, then we can only solve at most the\n    # number of problems to get our max score\n    if bonus_sum > max_score:\n        return str(solutions)\n\n    # Otherwise, we can solve at least the number of problems to get our max score\n    return str(solutions + 1)"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    difficulty_points, total_score = [int(x) for x in stdin.split()]\n    perfect_bonus = 0\n    perfect_bonus_for_a_problem = 100\n    max_perfect_bonus_for_a_problem = 100 * (perfect_bonus_for_a_problem + 1)\n    while perfect_bonus < total_score:\n        perfect_bonus += perfect_bonus_for_a_problem\n        if perfect_bonus > total_score:\n            break\n        perfect_bonus_for_a_problem += 1\n        if perfect_bonus_for_a_problem > max_perfect_bonus_for_a_problem:\n            perfect_bonus_for_a_problem = 100\n    return str(perfect_bonus - total_score)"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, g = map(int, stdin.split())\n    ps, cs = [], []\n    for _ in range(d):\n        p, c = map(int, stdin.split())\n        ps.append(p)\n        cs.append(c)\n\n    if not d or not g:\n        return \"IMPOSSIBLE\"\n\n    base = sum(cs)\n    if base < g:\n        return \"IMPOSSIBLE\"\n\n    scores = []\n    for i in range(1, d + 1):\n        if base >= g:\n            break\n        scores.append(i * ps[i - 1] + cs[i - 1])\n        if scores[-1] >= g:\n            break\n    else:\n        return \"IMPOSSIBLE\"\n\n    perfect = []\n    for i in range(d):\n        if scores[i] >= g:\n            perfect.append(cs[i] + (g - scores[i]) // ps[i])\n\n    return len(perfect) + d - 1"
    },
    {
        "number": 4110,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.strip().split())\n    problems = list(map(int, stdin.strip().split()))\n    bonus = 0\n    for p in problems:\n        bonus += p // 100\n    print(bonus + G // 100)"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = list(map(int, stdin.readline().split()))\n    even = 0\n    odd = 0\n    for i in range(n - 1):\n        if i % 2 == 0:\n            even += lst[i]\n        else:\n            odd += lst[i]\n    if odd == even:\n        return '2'\n    return '1'"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    print(sum(l[i+1::2]) - sum(l[::2]))\n\nsolution('''9''')\n"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    w = list(map(int, stdin.readline().split()))\n\n    res = 0\n    for i in range(1, len(w)):\n        if sum(w[:i]) == sum(w[i:]):\n            res += 1\n\n    return str(res)\n"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    weights = stdin.readline()\n    good = 0\n    i = 0\n    while i < len(weights):\n        if weights.count(weights[i]) % 2 == 0:\n            good += 1\n        i += 1\n    return good"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def count_candies(a, n):\n        if a == 0:\n            return 1\n        elif a == n - 1:\n            return 1\n        else:\n            return 0\n\n    N = int(stdin.readline())\n    candies = [int(x) for x in stdin.readline().split()]\n    candies_set = set(candies)\n    candies_dict = {}\n    for c in candies_set:\n        candies_dict[c] = candies.count(c)\n\n    count = 0\n    for k, v in candies_dict.items():\n        if k % 2 == 0 and v == (N - 1):\n            count += 1\n        if k % 2!= 0 and v == (N - 1):\n            count += 1\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    candies = list(map(int, stdin.readline().strip().split()))\n    good_candies = 0\n    total_weight = 0\n    for i in candies:\n        total_weight += i\n    if n % 2 == 0:\n        for i in candies:\n            total_weight -= i\n            if total_weight == 0:\n                good_candies += 1\n    else:\n        for i in candies:\n            total_weight -= i\n            if total_weight == 0:\n                good_candies += 1\n    return good_candies\n\nassert solution(\"\") == 0\nassert solution(\"1\") == 0\nassert solution(\"2\") == 1\nassert solution(\"5\") == 2\nassert solution(\"5 2 3 4 2 2 3\") == 2\nassert solution(\"5 2 3 4 2 2 3 2 4\") == 2\nassert solution(\"7\") == 3\nassert solution(\"7 4 3 2 3 4 2 3 4 5\") == 3\nassert solution(\"7 5 4 3 2 3 4 2 3 4 5\") == 3\nassert solution(\"9\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10 3 11\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10 3 11 2 12\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10 3 11 2 12 3 13\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10 3 11 2 12 3 13 2 14\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10 3 11 2 12 3 13 2 14 3 15\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10 3 11 2 12 3 13 2 14 3 15 2 16\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10 3 11 2 12 3 13 2 14 3 15 2 16 2 17\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10 3 11 2 12 3 13 2 14 3 15 2 16 2 17 2 18\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10 3 11 2 12 3 13 2 14 3 15 2 16 2 17 2 18 2 19\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10 3 11 2 12 3 13 2 14 3 15 2 16 2 17 2 18 2 19 2 20\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10 3 11 2 12 3 13 2 14 3 15 2 16 2 17 2 18 2 19 2 20 2 21\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10 3 11 2 12 3 13 2 14 3 15 2 16 2 17 2 18 2 19 2 20 2 21 2 22\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10 3 11 2 12 3 13 2 14 3 15 2 16 2 17 2 18 2 19 2 20 2 21 2 22 2 23\") == 3\nassert solution(\"9 2 3 4 2 2 3 2 2 4 2 5 2 6 2 7 2 8 2 9 2 10 3 11 2 12 3 13 2 14 3 15 2 16 2 17 2 18 2 19 2 20 2 21 2 22"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n    weights.sort()\n    even = 0\n    odd = 0\n    for i in range(n):\n        if i % 2 == 0:\n            even += weights[i]\n        else:\n            odd += weights[i]\n    return str(even - odd)\n"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    candy_weights = [int(x) for x in stdin.readline().strip().split()]\n\n    good_candies_indices = []\n\n    for i in range(1, n):\n        if i % 2 == 1:\n            good_candies_indices.append(i)\n\n    good_candies = sum([candy_weights[i] for i in good_candies_indices])\n\n    return str(good_candies)\n"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # print(n, k, x, a)\n    a.sort()\n    # print(a)\n    best_value = 0\n    for i in range(1, n - 1):\n        # print(i, a[i], a[i - 1], a[i + 1])\n        left = i - 1\n        right = i + 1\n        best_value += (a[i] + a[left] + a[right])\n        if best_value >= x:\n            return str(best_value)\n    return \"-1\"\n\n\ndef"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    pre = 0\n    k = min(k, len(a))\n    max_sum = 0\n    for i in range(len(a)):\n        if i >= k:\n            pre = pre - a[i - k]\n        max_sum = max(max_sum, pre + a[i])\n    print(-1 if max_sum < x else max_sum)\n    \n    "
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n    beauty_sum = sum(beauty)\n    if x > n:\n        return '-1'\n\n    if beauty_sum % x!= 0:\n        return '-1'\n\n    if k == 0:\n        return str(beauty_sum)\n\n    beauty_sum_2 = 0\n    segment_beauty = 0\n\n    for i in range(n - k + 1):\n        segment_beauty += beauty[i]\n        if i!= n - k:\n            if segment_beauty >= x:\n                segment_beauty = 0\n                beauty_sum_2 += segment_beauty\n                segment_beauty = 0\n\n    return str(beauty_sum_2)\n\ndef"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2 3''')\n    -1\n    \"\"\"\n    n, k, x = [int(i) for i in stdin.split()]\n    beautys = list(map(int, stdin.split()))\n    beautys.sort(reverse=True)\n\n    def search(beautys, start, k, x):\n        nonlocal res\n        if start > len(beautys):\n            return\n        if k == 0:\n            if sum(beautys[start:start + k]) > res:\n                res = sum(beautys[start:start + k])\n            return\n        if x == 0:\n            search(beautys, start + 1, k - 1, x)\n        else:\n            search(beautys, start + 1, k, x - 1)\n\n    res = 0\n    search(beautys, 0, k, x)\n    return res if res!= 0 else -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(i) for i in stdin.strip().split()]\n    a = [int(i) for i in stdin.strip().split()]\n\n    beauty = 0\n    if n < k:\n        return -1\n    for i in range(n - k + 1):\n        beauty = max(a[i:i + k]) + beauty\n    return beauty if x <= n else -1\n\nassert(solution('''5 2 3''') == '18')\nassert(solution('''6 1 5''') == '-1')\nassert(solution('''4 3 1''') == '100')"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort(reverse=True)\n    for i in range(k, n + 1, k):\n        a[i - 1] += a[i - k]\n    return str(max(a[:x]))"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    answer = 0\n\n    if x > k * n:\n        return -1\n\n    if n == k:\n        return sum(a)\n\n    if n < k:\n        return -1\n\n    if k > x:\n        return -1\n\n    if k < 1:\n        return -1\n\n    if n == 1:\n        if a[0] > x:\n            return -1\n        return a[0]\n\n    dp = [[0] * n for _ in range(k + 1)]\n    dp[0][0] = a[0]\n    for i in range(1, n):\n        dp[0][i] = max(a[i], dp[0][i - 1] + a[i])\n    dp[1][0] = a[0]\n    for i in range(1, k):\n        dp[i][0] = max(a[0], dp[i - 1][0] + a[0])\n\n    for i in range(1, k + 1):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j - 1] + a[j], dp[i][j - 1] + a[j])\n\n    answer = dp[k][n - 1]\n    return answer\n"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    beauty_sum = sum(arr)\n    diff_sum = beauty_sum - (k * x)\n    beauty_sum_arr = [0] * n\n    for i in range(n):\n        beauty_sum_arr[i] = arr[i]\n    if (diff_sum < 0):\n        return (-1)\n    else:\n        beauty_sum_arr[0] = beauty_sum - diff_sum\n    for i in range(1, n):\n        if i % x == 0:\n            beauty_sum_arr[i] = arr[i - 1]\n    beauty_sum_arr[n - 1] = arr[n - 1]\n    print(beauty_sum_arr)\n    return sum(beauty_sum_arr)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4112,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty_list = list(map(int, stdin.split()))\n    beauty_list.sort()\n    beauty_list.reverse()\n    beauty_sum = 0\n    n = n - k\n    if n < 0:\n        return -1\n    else:\n        for i in range(k):\n            if beauty_list[i] > n:\n                return -1\n            else:\n                beauty_sum += n\n                n -= 1\n        return beauty_sum\n\nprint(solution(input()))\n"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    doughnutPrice = 7\n    cakePrice = 4\n    totalPrice = 0\n    if totalPrice == N:\n        return \"Yes\"\n    elif N < 0:\n        return \"No\"\n    elif N > 0:\n        totalPrice = N\n        doughnutCounter = 0\n        cakeCounter = 0\n        while totalPrice!= 0 and totalPrice > 0:\n            if totalPrice - cakePrice >= 0:\n                totalPrice = totalPrice - cakePrice\n                cakeCounter += 1\n            else:\n                if totalPrice < 0:\n                    break\n                totalPrice = totalPrice - doughnutPrice\n                doughnutCounter += 1\n        if totalPrice < 0:\n            return \"No\"\n        if totalPrice == 0:\n            if cakeCounter >= 2 and doughnutCounter >= 2:\n                return \"Yes\"\n            else:\n                return \"No\"\n        return \"Yes\""
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    doughnut_price = 7\n    cake_price = 4\n    total = 0\n    doughnut_count = 0\n    cake_count = 0\n\n    doughnut_count += int(stdin[0])\n    total += (doughnut_count * doughnut_price)\n    cake_count += int(stdin[1])\n    total += (cake_count * cake_price)\n    if total > int(stdin[2]):\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"\"\n\n    N = int(stdin)\n\n    if N % 3 == 0:\n        return \"Yes\"\n    if N == 0:\n        return \"No\"\n\n    return \"No\"\n\n\nassert solution(\"\") == \"\"\nassert solution(\"0\") == \"No\"\nassert solution(\"123\") == \"No\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"20\") == \"Yes\"\nassert solution(\"1000000000000\") == \"Yes\"\nassert solution(\"2\") == \"No\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"7\") == \"Yes\"\nassert solution(\"8\") == \"Yes\"\nassert solution(\"9\") == \"Yes\"\nassert solution(\"10\") == \"No\"\nassert solution(\"11\") == \"No\"\nassert solution(\"12\") == \"No\"\nassert solution(\"13\") == \"No\"\nassert solution(\"14\") == \"No\"\nassert solution(\"15\") == \"No\"\nassert solution(\"16\") == \"No\"\nassert solution(\"17\") == \"No\"\nassert solution(\"18\") == \"No\"\nassert solution(\"19\") == \"No\"\nassert solution(\"20\") == \"Yes\"\nassert solution(\"21\") == \"Yes\"\nassert solution(\"22\") == \"Yes\"\nassert solution(\"23\") == \"Yes\"\nassert solution(\"24\") == \"Yes\"\nassert solution(\"25\") == \"Yes\"\nassert solution(\"26\") == \"Yes\"\nassert solution(\"27\") == \"Yes\"\nassert solution(\"28\") == \"Yes\"\nassert solution(\"29\") == \"Yes\"\nassert solution(\"30\") == \"Yes\"\nassert solution(\"31\") == \"Yes\"\nassert solution(\"32\") == \"Yes\"\nassert solution(\"33\") == \"Yes\"\nassert solution(\"34\") == \"Yes\"\nassert solution(\"35\") == \"Yes\"\nassert solution(\"36\") == \"Yes\"\nassert solution(\"37\") == \"Yes\"\nassert solution(\"38\") == \"Yes\"\nassert solution(\"39\") == \"Yes\"\nassert solution(\"40\") == \"Yes\"\nassert solution(\"41\") == \"Yes\"\nassert solution(\"42\") == \"Yes\"\nassert solution(\"43\") == \"Yes\"\nassert solution(\"44\") == \"Yes\"\nassert solution(\"45\") == \"Yes\"\nassert solution(\"46\") == \"Yes\"\nassert solution(\"47\") == \"Yes\"\nassert solution(\"48\") == \"Yes\"\nassert solution(\"49\") == \"Yes\"\nassert solution(\"50\") == \"No\"\nassert solution(\"51\") == \"No\"\nassert solution(\"52\") == \"No\"\nassert solution(\"53\") == \"No\"\nassert solution(\"54\") == \"No\"\nassert solution(\"55\") == \"No\"\nassert solution(\"56\") == \"No\"\nassert solution(\"57\") == \"No\"\nassert solution(\"58\") == \"No\"\nassert solution(\"59\") == \"No\"\nassert solution(\"60\") == \"No\"\nassert solution(\"61\") == \"No\"\nassert solution(\"62\") == \"No\"\nassert solution(\"63\") == \"No\"\nassert solution(\"64\") == \"No\"\nassert solution(\"65\") == \"No\"\nassert solution(\"66\") == \"No\"\nassert solution(\"67\") == \"No\"\nassert solution(\"68\") == \"No\"\nassert solution(\"69\") == \"No\"\nassert solution(\"70\") == \"No\"\nassert solution(\"71\") == \"No\"\nassert solution(\"72\") == \"No\"\nassert solution(\"73\") == \"No\"\nassert solution(\"74\") == \"No\"\nassert solution(\"75\") == \"No\"\nassert solution(\"76\") == \"No\"\nassert solution(\"77\") == \"No\"\nassert solution(\"78\") == \"No\"\nassert solution(\"79\") == \"No\"\nassert solution(\"80\") == \"No\"\nassert solution(\"81\") == \"No\"\nassert solution(\"82\") == \"No\"\nassert solution(\"83\") == \"No\"\nassert solution(\"84\") == \"No\"\nassert solution(\"85\") == \"No\"\nassert solution(\"86\") == \"No\"\nassert solution(\"87\") == \"No\"\nassert solution(\"88\") == \"No\"\nassert solution(\"89\") == \"No\"\nassert solution(\"90\") == \"No\"\nassert solution(\"91\") == \"No\"\nassert solution(\"92\") == \"No\"\nassert solution(\"93\") == \"No\"\nassert solution(\"94\") == \"No\"\nassert solution(\"95\") == \"No\"\nassert solution(\"96\") == \"No\"\nassert solution(\"97\") == \"No\"\nassert solution(\"98\") == \"No\"\nassert solution(\"99\") == \"No\"\nassert solution(\"100\") == \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2!= 0:\n        return \"No\"\n    return \"Yes\" if n // 2 < n / 2 else \"No\"\n\nassert(solution(stdin_value) == stdout_value)\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    'Yes'\n    \"\"\"\n    n = int(stdin)\n    doughnut = 7\n    cake = 4\n    while n >= 0:\n        n -= cake + doughnut\n        doughnut -= 2\n        cake -= 2\n        if n < 0:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"11\")\n    'Yes'\n    >>> solution(\"2\")\n    'No'\n    >>> solution(\"1\")\n    'No'\n    >>> solution(\"1\")\n    'No'\n    >>> solution(\"3\")\n    'No'\n    \"\"\"\n    n = int(stdin.strip())\n    if n < 1 or n > 100:\n        return \"No\"\n\n    first = n % 4\n    second = n % 7\n    third = n // 4\n    fourth = n // 7\n\n    # Can we buy four cakes and four doughnuts?\n    if first == 0 and second == 0 and third == 0 and fourth == 0:\n        return \"Yes\"\n    elif first == 0 and second == 0:\n        return \"No\"\n    elif first == 0:\n        return \"No\"\n    elif second == 0:\n        return \"No\"\n    elif third == 0:\n        return \"No\"\n    elif fourth == 0:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    num_cakes = int(stdin.readline())\n    cakes = int(stdin.readline())\n    doughnuts = int(stdin.readline())\n    if num_cakes < 1:\n        raise ValueError(\"Can't have negative cakes\")\n    if cakes < 1:\n        raise ValueError(\"Can't have negative cakes\")\n    if doughnuts < 1:\n        raise ValueError(\"Can't have negative doughnuts\")\n    if num_cakes == 0:\n        return \"No\"\n    if cakes >= num_cakes and doughnuts >= num_cakes:\n        return \"Yes\"\n    if cakes >= num_cakes:\n        return \"Yes\"\n    if doughnuts >= num_cakes:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cakes = 7\n    doughnuts = 4\n    if N % cakes == 0:\n        doughnuts = 0\n    if N % doughnuts == 0:\n        cakes = 0\n    return 'Yes' if cakes and doughnuts else 'No'\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = 2\n    while n <= N:\n        n += 2\n    return \"Yes\" if n > N else \"No\""
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n\nassert(solution('''\n4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\n''')) == '2 2 6'\n'''\n\n'''"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_distance(x, y, h):\n        #h = -1 => find the max height\n        if h < 0:\n            return max(\n                abs(x - center_x) + abs(y - center_y)\n                for center_x, center_y, _ in centers\n            )\n        else:\n            return min(\n                abs(x - center_x) + abs(y - center_y)\n                for center_x, center_y, _ in centers\n                if h == abs(center_x - x) + abs(center_y - y)\n            )\n\n    N = int(stdin.readline())\n    centers = [tuple(map(int, stdin.readline().split())) for _ in range(N)]\n    center_x, center_y = centers[0]\n    for x, y, h in centers[1:]:\n        center_x = max(center_x, x)\n        center_y = max(center_y, y)\n        if h > abs(center_x - x) + abs(center_y - y):\n            h = abs(center_x - x) + abs(center_y - y)\n    print(center_x, center_y, h)"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N <= 0:\n        raise ValueError(\"N must be positive\")\n    if N > 100:\n        raise ValueError(\"N must be 100 or less\")\n\n    ret = \"\"\n    for _ in range(N):\n        x, y, h = map(int, stdin.split())\n        if x < 0 or y < 0 or h < 0:\n            raise ValueError(\"coordinates and height must be positive\")\n\n        ret += f\"{x - min(x, y) - max(x, y)}\\t{y - min(x, y) - max(x, y)}\\t{max(h - abs(x - x) - abs(y - y), 0)}\\n\"\n\n    return ret"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # Get N coordinates and heights\n    point_nums = []\n    for _ in range(N):\n        line = stdin.readline().strip()\n        point = line.split(\" \")\n        point_nums.append((int(point[0]), int(point[1]), int(point[2])))\n\n    point_nums.sort(key=lambda point: point[2])\n    point_nums.sort(key=lambda point: point[1])\n    point_nums.sort(key=lambda point: point[0])\n\n    # There is at least two different points\n    for i in range(len(point_nums) - 1):\n        if point_nums[i][0]!= point_nums[i+1][0] and point_nums[i][1]!= point_nums[i+1][1]:\n            C_X = point_nums[i][0]\n            C_Y = point_nums[i][1]\n            H = point_nums[i][2]\n            break\n    \n    print(C_X, C_Y, H)"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    coordinates = []\n    for _ in range(N):\n        x, y, h = map(int, stdin.readline().strip().split())\n        coordinates.append((x, y, h))\n    coordinates = sorted(coordinates, key=lambda c: c[2])\n    C_X, C_Y, H = coordinates[0]\n    for i in range(1, N):\n        if abs(coordinates[i][0] - C_X) == abs(coordinates[i][1] - C_Y):\n            H = max(H, coordinates[i][2])\n        else:\n            C_X, C_Y, H = coordinates[i]\n    return '{} {} {}'.format(C_X, C_Y, H)\n\nassert(solution('''4\n2 3 5\n2 1 5\n1 2 5\n3 2 5\n''')) == '2 2 6'\nassert(solution('''5\n1 2 5\n2 1 5\n1 3 5\n2 4 5\n3 4 5\n''')) == '3 4 5'\nassert(solution('''8\n0 0 0\n0 1 0\n0 2 0\n0 3 0\n0 4 0\n0 5 0\n0 6 0\n0 7 0\n''')) == '1 2 3'\nassert(solution('''3\n1 2 1\n1 3 1\n1 4 1\n''')) == '1 1 2'\nassert(solution('''1\n1 1 1\n1 1 1\n1 1 1\n''')) == '1 1 1'\nassert(solution('''7\n2 3 4\n2 2 2\n2 3 2\n2 1 2\n1 2 3\n1 2 2\n1 2 2\n''')) == '1 1 2'\nassert(solution('''2\n1 1 1\n1 1 1\n''')) == '1 1 1'\nassert(solution('''9\n2 1 1\n1 2 1\n2 1 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n''')) == '1 1 1'\nassert(solution('''10\n0 0 0\n0 1 0\n0 2 0\n0 3 0\n0 4 0\n0 5 0\n0 6 0\n0 7 0\n0 8 0\n0 9 0\n0 10 0\n''')) == '2 3 4'\nassert(solution('''11\n0 0 0\n0 1 0\n0 2 0\n0 3 0\n0 4 0\n0 5 0\n0 6 0\n0 7 0\n0 8 0\n0 9 0\n0 10 0\n0 11 0\n''')) == '3 4 5'\nassert(solution('''12\n0 0 0\n0 1 0\n0 2 0\n0 3 0\n0 4 0\n0 5 0\n0 6 0\n0 7 0\n0 8 0\n0 9 0\n0 10 0\n0 11 0\n0 12 0\n''')) == '4 5 6'\nassert(solution('''13\n0 0 0\n0 1 0\n0 2 0\n0 3 0\n0 4 0\n0 5 0\n0 6 0\n0 7 0\n0 8 0\n0 9 0\n0 10 0\n0 11 0\n0 12 0\n0 13 0\n''')) == '5 6 7'\nassert(solution('''14\n0 0 0\n0 1 0\n0 2 0\n0 3 0\n0 4 0\n0 5 0\n0 6 0\n0 7 0\n0 8 0\n0 9 0\n0 10 0\n0 11 0\n0 12 0\n0 13 0\n0 14 0\n''')) == '6 7 8'\nassert(solution('''15\n0 0 0\n0 1 0\n0 2 0\n0 3 0\n0 4 0\n0 5 0\n0 6 0\n0 7 0\n0 8 0\n0 9 0\n0 10 0\n0 11 0\n0 12 0\n0 13 0\n0 14 0\n0 15 0\n''')) == '7 8 9'\nassert(solution('''16\n0 0 0\n0 1 0\n0 2 0\n0 3 0\n0 4 0\n0 5 0\n0 6 0\n0 7 0\n0 8 0\n0 9 0\n0 10 0\n0 11 0\n0 12 0\n0 13 0\n0 14 0\n0 15 0\n0 16 0\n''')) == '8 9 10'\nassert(solution('''17\n0 0 0\n0 1 0\n0 2 0\n0 3 0\n0 4 0\n0 5 0\n0 6 0\n0 7 0\n0 8 0\n0 9 0\n0 10 0\n0 11 0\n0 12 0\n0 13 0\n0 14 0\n0 15 0\n0 16 0\n0 17 0\n''')) == '9 10 11'\nassert(solution('''18\n0 0 0\n0 1 0\n0 2 0\n0 3 0\n0 4 0\n0 5 0\n0 6 0\n0 7 0\n0 8 0\n0 9 0\n0 10 0\n0 11 0\n0 12 0\n0 13 0\n0 14 0\n0 15 0\n0 16 0\n0 17 0\n0 18 0\n''')) == '10 11 12'\nassert(solution('''19\n0 0 0\n0 1 0\n0 2 0\n0 3 0\n0 4 0\n0 5 0\n0 6 0\n0 7 0\n0 8 0\n0 9 0\n0 10 0\n0 11 0\n0 12 0\n0 13 0\n0 14 0\n0 15 0\n0 16 0\n0 17 0\n0 18 0\n0 19 0\n''')) == '11 12 13'\nassert(solution('''20\n0 0 0\n0 1 0\n0 2 0\n0 3 0\n0 4 0\n0 5 0\n0 6 0\n0 7 0\n0 8 0\n0 9 0\n0 10 0\n0 11 0\n0 12 0\n0 13 0\n0 14 0\n0 15 0\n0 16 0\n0 17 0\n0 18 0\n0 19 0\n0 20 0\n''')) == '12 13 14'\nassert(solution('''21\n0 0 0\n0 1 0\n0 2 0\n0 3 0\n0 4 0\n0 5 0\n0 6 0\n0 7 0\n0 8 0\n0 9 0\n0 10 0\n0 11 0\n0 12 0\n0 13 0\n0 14 0\n0 15 0\n0 16 0\n0 17 0\n0 18 0\n0 19 0\n0 20 0\n0 21 0\n''')) == '13 14 15'\nassert(solution('''22\n0 0 0\n0 1"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    \n    coordinates = [0, 0, 0]\n    for line in stdin[1:]:\n        coordinates = list(map(int, line.split()))\n        \n    H = coordinates[2]\n    \n    C_X = (coordinates[0] + coordinates[1] + coordinates[2]) / 3\n    C_Y = (coordinates[1] + coordinates[2]) / 2\n    \n    return '{} {} {}'.format(int(C_X), int(C_Y), int(H))\n\nprint(solution(str(input())))"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4114,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    coordinates, heights = [], []\n    n = stdin.count(\"\\n\")\n    for i in range(n):\n        coordinates.append(list(map(int, stdin.splitlines()[i].split(\" \"))))\n        heights.append(int(stdin.splitlines()[i + 1]))\n    center = (min(coordinates, key=lambda t: t[1])[0], min(coordinates, key=lambda t: t[1])[1])\n    heights = [x - abs(center[0] - i[0]) - abs(center[1] - i[1]) for i, x in zip(coordinates, heights)]\n    print(\" \".join(map(str, center + [max(heights)])))"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    palindrome = stdin.strip()\n    if len(palindrome) <= 1:\n        return 0\n    while not is_palindrome(palindrome):\n        palindrome = change_char(palindrome)\n    return len(palindrome)\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    if string == string[::-1]:\n        return 0\n\n    hugs = 0\n    for i in range(len(string)):\n        if string[i:] == string[i:][::-1]:\n            hugs += 1\n            string = string[:i] + 'o' + string[i+1:]\n    return hugs"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str()"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    hugs = 0\n\n    while length > 0:\n        if stdin == stdin[::-1]:\n            hugs += 1\n            length -= 1\n        else:\n            stdin = stdin[1:] + stdin[0]\n            length -= 1\n\n    return hugs\n\nprint(solution(input()))\n"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    hugs = 0\n    string = stdin.strip()\n    for i in range(len(string)):\n        if string[i]!= string[-i-1]:\n            hugs += 1\n    return hugs"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"\", \"\", 1)\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    ans = (n * (n + 1)) // 2\n    return str(ans)\n"
    },
    {
        "number": 4115,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int,stdin.split())\n    return 'Yes' if a * b <= 100 and a * b >= 10 else 'No'"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    p = 0\n    while p < 9:\n        q = 0\n        while q < 9:\n            if p * q == N:\n                return \"Yes\"\n            q += 1\n        p += 1\n    return \"No\"\n\nassert(solution('''2\n''') == \"Yes\")\n\nassert(solution('''10\n''') == \"No\")\n\nassert(solution('''6\n''') == \"Yes\")\n\nassert(solution('''3\n''') == \"No\")\n\nassert(solution('''6\n''') == \"No\")\n\nassert(solution('''11\n''') == \"No\")\n\nassert(solution('''4\n''') == \"No\")\n\nassert(solution('''9\n''') == \"No\")\n\nassert(solution('''100\n''') == \"No\")\n\nassert(solution('''105\n''') == \"Yes\")\n\nassert(solution('''6\n''') == \"No\")\n\nassert(solution('''1\n''') == \"Yes\")\n\nassert(solution('''101\n''') == \"No\")\n\nassert(solution('''9\n''') == \"No\")\n\nassert(solution('''2\n''') == \"No\")\n\nassert(solution('''6\n''') == \"No\")\n\nassert(solution('''3\n''') == \"No\")\n\nassert(solution('''9\n''') == \"No\")\n\nassert(solution('''7\n''') == \"Yes\")\n\nassert(solution('''7\n''') == \"Yes\")\n\nassert(solution('''10\n''') == \"No\")\n\nassert(solution('''100\n''') == \"No\")\n\nassert(solution('''101\n''') == \"No\")\n\nassert(solution('''2\n''') == \"No\")\n\nassert(solution('''6\n''') == \"No\")\n\nassert(solution('''4\n''') == \"No\")\n\nassert(solution('''1\n''') == \"Yes\")\n\nassert(solution('''8\n''') == \"No\")\n\nassert(solution('''10\n''') == \"No\")\n\nassert(solution('''17\n''') == \"No\")\n\nassert(solution('''30\n''') == \"No\")\n\nassert(solution('''24\n''') == \"No\")\n\nassert(solution('''11\n''') == \"No\")\n\nassert(solution('''22\n''') == \"No\")\n\nassert(solution('''37\n''') == \"Yes\")\n\nassert(solution('''14\n''') == \"No\")\n\nassert(solution('''16\n''') == \"No\")\n\nassert(solution('''12\n''') == \"No\")\n\nassert(solution('''5\n''') == \"No\")\n\nassert(solution('''9\n''') == \"No\")\n\nassert(solution('''4\n''') == \"No\")\n\nassert(solution('''3\n''') == \"No\")\n\nassert(solution('''1\n''') == \"Yes\")\n\nassert(solution('''2\n''') == \"No\")\n\nassert(solution('''8\n''') == \"No\")\n\nassert(solution('''7\n''') == \"No\")\n\nassert(solution('''2\n''') == \"No\")\n\nassert(solution('''6\n''') == \"No\")\n\nassert(solution('''10\n''') == \"No\")\n\nassert(solution('''7\n''') == \"No\")\n\nassert(solution('''1\n''') == \"Yes\")\n\nassert(solution('''3\n''') == \"No\")\n\nassert(solution('''7\n''') == \"No\")\n\nassert(solution('''4\n''') == \"No\")\n\nassert(solution('''5\n''') == \"No\")\n\nassert(solution('''9\n''') == \"No\")\n\nassert(solution('''6\n''') == \"No\")\n\nassert(solution('''1\n''') == \"Yes\")\n\nassert(solution('''6\n''') == \"No\")\n\nassert(solution('''5\n''') == \"No\")\n\nassert(solution('''7\n''') == \"No\")\n\nassert(solution('''7\n''') == \"No\")\n\nassert(solution('''10\n''') == \"No\")\n\nassert(solution('''8\n''') == \"No\")\n\nassert(solution('''1\n''') == \"Yes\")\n\nassert(solution('''1\n''') == \"Yes\")\n\nassert(solution('''6\n''') == \"No\")\n\nassert(solution('''2\n''') == \"No\")\n\nassert(solution('''5\n''') == \"No\")\n\nassert(solution('''7\n''') == \"No\")\n\nassert(solution('''9\n''') == \"No\")\n\nassert(solution('''3\n''') == \"No\")\n\nassert(solution('''4\n''') == \"No\")\n\nassert(solution('''6\n''') == \"No\")\n\nassert(solution('''10\n''') == \"No\")\n\nassert(solution('''9\n''') == \"No\")\n\nassert(solution('''8\n''') == \"No\")\n\nassert(solution('''2\n''') == \"No\")\n\nassert(solution('''1\n''') == \"Yes\")\n\nassert(solution('''10\n''') == \"No\")\n\nassert(solution('''7\n''') == \"No\")\n\nassert(solution('''3\n''') == \"No\")\n\nassert(solution('''4\n''') == \"No\")\n\nassert(solution('''5\n''') == \"No\")\n\nassert(solution('''9\n''') == \"No\")\n\nassert(solution('''6\n''') == \"No\")\n\nassert(solution('''1\n''') == \"Yes\")\n\nassert(solution('''6\n''') == \"No\")\n\nassert(solution('''5\n''') == \"No\")\n\nassert(solution('''7\n''') == \"No\")\n\nassert(solution('''7\n''') == \"No\")\n\nassert(solution('''10\n''') == \"No\")\n\nassert(solution('''8\n''') == \"No\")\n\nassert(solution('''3\n''') == \"No\")\n\nassert(solution('''4\n''') == \"No\")\n\nassert(solution('''6\n''') == \"No\")\n\nassert(solution('''2\n''') == \"No\")\n\nassert(solution('''10\n''') == \"No\")\n\nassert(solution('''9\n''') == \"No\")\n\nassert(solution('''8\n''') == \"No\")\n\nassert(solution('''7\n''') == \"No\")\n\nassert(solution('''1\n''') == \"Yes\")\n\nassert(solution('''6\n''') == \"No\")\n\nassert(solution('''5\n''') == \"No\")\n\nassert(solution('''7\n''') == \"No\")\n\nassert(solution('''7\n''')"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write a solution to the above problem.\n    Input format:\n    Integer N\n    Output format:\n    Yes / No\n    Constraints:\n    1 <= N <= 100\n    '''\n    N = int(stdin.strip())\n    if N < 1 or N > 100:\n        return 'Error'\n    num = ''\n    for i in range(1, 10):\n        num += str(i) * i\n    if str(N) in num:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    product = 1\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == n:\n                print(\"Yes\")\n                exit()\n    print(\"No\")"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == n:\n                return \"Yes\"\n    return \"No\"\n\nassert (solution(input()) == output())\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 9:\n        return \"No\"\n    elif n < 1:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100:\n        return \"No\"\n    for i in range(1, 10):\n        if n % i!= 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    for i in range(1, 10):\n        if a % i!= 0:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4116,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if (N >= 1) and (N <= 9) * (N >= 1) and (N <= 9):\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 4 9 7 5\")\n    '5'\n    \"\"\"\n    n = list(map(int, stdin.split()))\n    sticks = []\n\n    for i in range(1, n[0] + 1):\n        sticks.append(int(stdin.split()[i]))\n\n    sticks.sort()\n\n    solution = 0\n\n    for i in range(len(sticks)):\n        for j in range(i + 1, len(sticks)):\n            for k in range(j + 1, len(sticks)):\n                if sticks[i] + sticks[j] > sticks[k] and sticks[i] + sticks[k] > sticks[j] and sticks[j] + sticks[k] > sticks[i]:\n                    solution += 1\n    return str(solution)"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    L = list(map(int, stdin.readline().strip().split(\" \")))\n    L.sort()\n    def f(i: int, j: int, k: int) -> int:\n        if i >= j or j >= k or i >= k:\n            return 0\n        if i == j and j == k:\n            return 1\n        return f(i + 1, j, k) + f(i, j + 1, k) + f(i, j, k + 1)\n    return str(f(0, 1, N))\n\nassert(solution(stdin) == stdin)\n"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    sticks = [int(stick) for stick in stdin.split(' ')]\n    sticks.sort()\n    sticks.reverse()\n    N = len(sticks)\n    # array to store the number of ways to make a triangle with sticks of lengths L_i\n    num_ways = [1] * (N + 1)\n    for i in range(2, N + 1):\n        for j in range(i - 1, 0, -1):\n            if sticks[i - 1] + sticks[j - 1] > sticks[i]:\n                num_ways[i] += num_ways[j]\n    return str(num_ways[N])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    sticks = stdin.strip().split(' ')\n    sticks = [int(stick) for stick in sticks]\n    sticks.sort()\n    sticks = sticks[::-1]\n    print(sticks)\n    sticks_sorted = sticks[:]\n    sticks_sorted.sort()\n    result = []\n    for i in range(0, len(sticks_sorted)):\n        if sticks_sorted[i] > sticks_sorted[0] + sticks_sorted[1]:\n            break\n        for j in range(i + 1, len(sticks_sorted)):\n            if sticks_sorted[j] > sticks_sorted[0] + sticks_sorted[1]:\n                break\n            for k in range(j + 1, len(sticks_sorted)):\n                if sticks_sorted[k] > sticks_sorted[0] + sticks_sorted[1]:\n                    break\n                if sticks_sorted[k] > sticks_sorted[i] + sticks_sorted[j]:\n                    continue\n                if sticks_sorted[i] + sticks_sorted[j] + sticks_sorted[k] == sticks_sorted[0] + sticks_sorted[1] + sticks_sorted[2]:\n                    result.append([sticks_sorted[i], sticks_sorted[j], sticks_sorted[k]])\n    return str(len(result))"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    return \"\".join(map(str, get_triples(l)))\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    sticks = [int(x) for x in stdin.strip().split(' ')]\n    sticks.sort()\n\n    result = 0\n\n    for i in range(0, len(sticks) - 2):\n        j = i + 1\n        k = len(sticks) - 1\n\n        while j < k:\n            if sticks[i] + sticks[j] > sticks[k]:\n                result += k - j\n                k -= 1\n            else:\n                j += 1\n\n    return str(result)"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    lst = [int(x) for x in stdin.split()]\n    lst.sort()\n\n    ans = 0\n\n    for i in range(1, n):\n        for j in range(1, n):\n            k = n - i - j\n            if k > 0 and lst[j] + lst[i] > lst[k]:\n                ans += 1\n\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    sticks = [int(num) for num in stdin.split()[1:]]\n\n    N_Sides = [sticks[i] for i in range(N)]\n    N_Sides.sort()\n    N_Sides.reverse()\n\n    triples = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if N_Sides[i] + N_Sides[j] > N_Sides[k] and N_Sides[i] + N_Sides[k] > N_Sides[j] and N_Sides[j] + N_Sides[k] > N_Sides[i]:\n                    triples += 1\n    return str(triples)"
    },
    {
        "number": 4117,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    sticks = [int(x) for x in lines[1].split(' ')]\n    sticks = sorted(sticks)\n    triples = []\n\n    # TODO: Solve the problem\n    for i in range(0, len(sticks) - 2):\n        for j in range(i + 1, len(sticks) - 1):\n            for k in range(j + 1, len(sticks)):\n                triple = [sticks[i], sticks[j], sticks[k]]\n                triples.append(triple)\n    #print(triples)\n    # For each triangle check that the three lengths are unique, and check that there exists a triangle\n    # with the lengths of the triangles that is possible\n    return"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a * b > 9:\n        print(-1)\n    else:\n        print(a * b)"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a * b < 10:\n        return '-1'\n    return str(a * b)"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, _, A, B = stdin.strip().split(' ')\n    return str(int(A) * int(B)) if int(A) * int(B) >= 1 and int(A) * int(B) <= 9 else '-1'"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(\" \"))\n    return \"-\" if a * b < 10 else str(a * b)"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1 or A == 2 or A == 3 or A == 4 or A == 5 or A == 6 or A == 7 or A == 8 or A == 9:\n        if B == 1 or B == 2 or B == 3 or B == 4 or B == 5 or B == 6 or B == 7 or B == 8 or B == 9:\n            return str(A * B)\n        else:\n            return \"-\"\n    else:\n        return \"-\""
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return '-1' if m > 9 * n else str(m * n)\n\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(\" \")]\n    return (\"-1\" if (a * b < 10) else str(a * b))"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(\" \"))\n    return str(a * b) if (a * b) % 2 == 0 else \"-\""
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.strip().split(' ')\n    return str(int(A) * int(B))"
    },
    {
        "number": 4118,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a * b) if a * b > 0 else '-1'"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(1, n):\n        if x[i - 1] > x[i]:\n            x[i], x[i - 1] = x[i - 1], x[i]\n            count += 1\n    return str(count)"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(\" \")]\n    x = [int(x) for x in stdin.strip().split(\" \")]\n\n    def visited_coordinates(n: int, coordinates: List[int]) -> List[int]:\n        result = []\n        for i in range(1, n + 1):\n            if i in coordinates:\n                result.append(i)\n        return result\n\n    def fill(n: int, coordinates: List[int]) -> bool:\n        if len(coordinates) == n:\n            return True\n\n        x = coordinates[-1]\n        for i in range(1, n + 1):\n            if i!= x:\n                if i not in coordinates:\n                    coordinates.append(i)\n                    if fill(n, coordinates):\n                        return True\n                    coordinates.pop()\n        return False\n\n    moves = 0\n    for i in range(1, n):\n        if fill(n, [i, x[i - 1]]):\n            moves += 1\n    return moves\n\nassert 5 == solution(\n    \"\"\"2 5\n10 12 1 2 14\"\"\"\n)\nassert 0 == solution(\n    \"\"\"2 1\n1 2\"\"\"\n)\nassert 1 == solution(\n    \"\"\"1 1\n1 1\"\"\"\n)\nassert 2 == solution(\n    \"\"\"1 1\n1 1\"\"\"\n)\nassert 2 == solution(\n    \"\"\"1 1\n1 1\"\"\"\n)\nassert 2 == solution(\n    \"\"\"1 1\n1 1\"\"\"\n)\nassert 3 == solution(\n    \"\"\"1 1\n1 1\"\"\"\n)\nassert 3 == solution(\n    \"\"\"1 1\n1 1\n1 1\"\"\"\n)\nassert 2 == solution(\n    \"\"\"1 1\n1 1\"\"\"\n)\nassert 0 == solution(\n    \"\"\"1 1\n1 1\"\"\"\n)\n"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    n, m = inputs[0], inputs[1]\n    positions = list(map(int, stdin.split()))\n    positions.sort()\n    positions.append(n + 1)\n    positions.insert(0, 0)\n    possible_moves = []\n    i = 1\n    while i < len(positions):\n        move_range = positions[i] - positions[i - 1] - 1\n        possible_moves.append(move_range)\n        i += 1\n    return str(min(possible_moves))"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(i) for i in stdin.split()]\n    pieces = [int(i) for i in stdin.split()]\n    visited = set()\n    num_moves = 0\n    for piece in pieces:\n        if piece in visited:\n            continue\n        x = piece\n        while x not in visited:\n            visited.add(x)\n            x += 1\n            num_moves += 1\n            if x > n:\n                x = 1\n        x -= 1\n        while x not in visited:\n            visited.add(x)\n            x -= 1\n            num_moves += 1\n            if x < 1:\n                x = n\n    return str(num_moves)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    m = int(stdin.split()[1])\n    n = int(stdin.split()[0])\n    x = sorted(int(x) for x in stdin.split()[2:])\n\n    l = len(x)\n    moves = 0\n    if l > 1:\n        if x[0]!= 1:\n            moves += 1\n            x[0] += 1\n        if x[l-1]!= n:\n            moves += 1\n            x[l-1] -= 1\n    for i in range(1, l - 1):\n        if x[i]!= x[i+1] + 1:\n            moves += 1\n            x[i] += 1\n        if x[i]!= x[i-1] - 1:\n            moves += 1\n            x[i] -= 1\n    return str(moves)"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the minimum number of moves to reach the target number.\n    :param stdin: The standard input, as a string.\n    :return: The minimum number of moves as a string.\n    \"\"\"\n    N, M = [int(x) for x in stdin.split(' ')]\n    Xs = [int(x) for x in stdin.split(' ')]\n    result = 0\n    for i in range(N):\n        if Xs[i] + 1 not in Xs:\n            result += 1\n        if Xs[i] - 1 not in Xs:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    n, m = map(int, stdin.split(' '))\n    X = list(map(int, stdin.split(' ')))\n    count = 0\n    visited = set()\n    for i in range(m):\n        visited.add(X[i])\n    for i in range(m):\n        if X[i] not in visited:\n            count += 1\n            for j in range(n):\n                if X[i] == j+1:\n                    X[i] = j\n                    visited.add(j)\n                elif X[i] == j-1:\n                    X[i] = j\n                    visited.add(j)\n    return str(count)"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    x_coordinates = [int(x) for x in stdin.split()]\n    print(solution_helper(x_coordinates, 0, 0))\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4119,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.strip().split()]\n    Xs = [int(x) for x in stdin.strip().split()]\n\n    # Instead of the Xs, we can instead use a number line\n    # as in the chess board diagram. We will use two number lines\n    # for each coordinate.\n    left, right = {}, {}\n    for i in range(1, N + 1):\n        left[i] = max(1, i - Xs[i - 1])\n        right[i] = min(N, i + Xs[i - 1])\n\n    # The first step is to check which pieces can be moved.\n    # We will iterate over all coordinates X_1, X_2,..., X_M.\n    # We first check whether a piece can be moved to a lower coordinate.\n    # Then, we check whether a piece can be moved to a higher coordinate.\n    # Note that a piece can be moved to a higher coordinate if the piece\n    # has a lower coordinate or to a lower coordinate if it has a higher\n    # coordinate. We can simply make a dictionary of the form\n    # {coordinate: [piece1, piece2,..., pieceN]}\n    # where pieceX is a tuple of the form (X,Y).\n    moves = {}\n    for i in range(1, N + 1):\n        if left[i] not in moves:\n            moves[left[i]] = []\n        moves[left[i]].append((i, left[i]))\n        if right[i] not in moves:\n            moves[right[i]] = []\n        moves[right[i]].append((i, right[i]))\n\n    # Now we will populate the moves dictionary with all possible moves.\n    # Each move is of the form (piece, coordinate)\n    # and we will keep a list of all the moves to achieve\n    # the objective.\n    for i in range(1, N + 1):\n        if i not in moves:\n            moves[i] = []\n        moves[i].append((i, i + 1))\n        moves[i].append((i, i - 1))\n\n    # Now that we have the moves, we will try to achieve the objective\n    # with these moves. To achieve the objective, we will use a dp\n    # algorithm to explore all possible states.\n    # Each state is a list of coordinates.\n    # We will iterate over all the possible moves to achieve the objective.\n    # Each move is of the form (piece, coordinate).\n    # To achieve the objective, we will add the move to the solution list\n    # as a tuple of the form (piece, coordinate, move), where the move is\n    # of the form (coordinate, coordinate)\n    solution = []\n    for move in moves[1]:\n        solution.append(move)\n    for i in range(2, N + 1):\n        for move in moves[i]:\n            for prev_move in solution:\n                solution.append((move, prev_move[1], prev_move, move))\n\n    # Now we have all the moves to achieve the objective.\n    # For each move, we want to know how many moves it takes to achieve\n    # the objective.\n    # We will use a helper function, move_cost(move), to calculate\n    # the cost of moving from one coordinate to another.\n    def move_cost(move: tuple) -> int:\n        # The cost of moving from coordinate x1 to coordinate x2\n        # is the difference between the coordinates of the two coordinates.\n        # To achieve this, we will need to move the piece from x1 to x2\n        # and then move the piece from x2 to x1.\n        return abs(move[0] - move[1])\n\n    # We will now iterate over each move and calculate the cost of moving\n    # from one coordinate to another.\n    # We will store the cost of moving from one coordinate to another\n    # in a list. We will then use this list to calculate the cost of\n    # moving from all the coordinates in the solution.\n    costs = []\n    for move in solution:\n        costs.append(move_cost(move))\n\n    # We will use the sum() function to calculate the cost of moving\n    # from all the coordinates in the solution.\n    return sum(costs)\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    roads = [list(map(int, stdin.split())) for _ in range(m)]\n    min_distance = n\n    all_min_distances = [n]\n    all_ways = [[0]*k for _ in range(m)]\n    # TODO: don't know how to set up a 2-dimensional array\n    pass\n    return min_distance"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = None\n\n    # Write your code here.\n    return answer"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, k) = list(map(int, stdin.split(' ')))\n    roads = list(map(lambda x: list(map(int, x.split(' '))), stdin.split('\\n')[:m]))\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n\n    def helper(roads):\n        for i in range(1, len(roads)):\n            for j in range(i, len(roads)):\n                if roads[i][0] == roads[j][1]:\n                    roads[i][0], roads[j][1] = roads[j][1], roads[i][0]\n        return roads\n\n    def count_roads(roads):\n        roads = helper(roads)\n        roads = set(map(tuple, roads))\n        roads = sorted(roads)\n        roads = list(map(list, roads))\n        for i in range(1, len(roads)):\n            if roads[i-1][0] == roads[i][0]:\n                roads[i][1] += roads[i-1][1]\n                roads[i][0] += 1\n        return roads\n\n    def check(roads):\n        roads = count_roads(roads)\n        roads = sorted(roads, key=lambda x: x[0])\n        roads = sorted(roads, key=lambda x: x[1])\n        for i in range(1, len(roads)):\n            if roads[i-1][0] == roads[i][0]:\n                roads[i][0] += 1\n        if roads[-1][1] == m and roads[0][0] == 1:\n            return True\n        return False\n\n    def is_unique(roads):\n        roads = count_roads(roads)\n        roads = sorted(roads, key=lambda x: x[0])\n        roads = sorted(roads, key=lambda x: x[1])\n        for i in range(1, len(roads)):\n            if roads[i-1][0] == roads[i][0]:\n                roads[i][0] += 1\n        return roads\n\n    roads = count_roads(roads)\n    roads = sorted(roads, key=lambda x: x[0])\n    roads = sorted(roads, key=lambda x: x[1])\n    for i in range(k):\n        roads = is_unique(roads)\n    roads = is_unique(roads)\n    if check(roads):\n        return ''.join(map(lambda x: '1' if x[1] > 0 else '0', roads))\n    return ''.join(map(lambda x: '0' if x[1] > 0 else '1', roads))\n    pass"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.read().splitlines()\n    n, m, k = [int(i) for i in input_data[0].split()]\n    roads = [[int(i) for i in l.split()] for l in input_data[1:m+1]]\n    # print(roads)\n    roads.sort(key=lambda x: x[0])\n    print(roads)\n    assert len(roads) <= 2 * (10 ** 5)\n    assert n - 1 <= 2 * (10 ** 5)\n    assert 1 <= m <= 2 * (10 ** 5)\n    assert 1 <= k <= 2 * (10 ** 5)\n    # print(n, m, k)\n    # print(roads)\n    return '\\n'.join(str(solution2(roads, n, k)) for _ in range(k))\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution('''4 4 3\n1 2\n2 3\n1 4\n4 3\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n\n''') == '1'\n\nassert solution('''4 5 3\n1 2\n1 3\n1 4\n1 5\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n2 3\n1 4\n2 4\n2 5\n1 3\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n2 4\n2 5\n1 3\n\n''') == '1'\n\nassert solution('''5 6 2\n1 2\n2 3\n1 4\n1 5\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n2 4\n2 5\n1 3\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n2 4\n2 5\n1 3\n\n''') == '1'\n\nassert solution('''5 6 2\n1 2\n2 3\n1 4\n1 5\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n2 4\n2 5\n1 3\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n2 4\n2 5\n1 3\n\n''') == '1'\n\nassert solution('''5 6 2\n1 2\n2 3\n1 4\n1 5\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n2 3\n1 4\n1 5\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n2 4\n2 5\n1 3\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n1 5\n1 6\n\n''') == '1'\n\nassert solution('''5 6 2\n1 2\n2 3\n1 4\n1 5\n1 6\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n\n''') == '1'\n\nassert solution('''5 6 2\n1 2\n2 3\n1 4\n1 5\n1 6\n1 7\n1 8\n\n''') == '1'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n\n''') == '1'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n\n''') == '1'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n\n''') == '1'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n\n''') == '1'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n\n''') == '2'\n\nassert solution('''5 6 2\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    city_to_index = {city: index for index, city in enumerate(range(1, n + 1), 1)}\n\n    def calculate_distance_sum(roads: List[Tuple[int, int]]) -> int:\n        def get_distance_sum(roads: List[Tuple[int, int]]) -> int:\n            distance_sum = 0\n            for a, b in roads:\n                distance_sum += abs(a - b)\n            return distance_sum\n\n        return get_distance_sum(roads) + get_distance_sum(roads[::-1])\n\n    min_distance_sum = calculate_distance_sum(roads)\n    min_roads = None\n    for _ in range(k):\n        roads = [tuple(sorted(random.sample(range(1, n), 2)))] + roads\n\n        distance_sum = calculate_distance_sum(roads)\n        if distance_sum < min_distance_sum:\n            min_distance_sum = distance_sum\n            min_roads = roads\n\n    return ''.join('1' if road in min_roads else '0' for road in range(1, m + 1))\n"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n\n    roads = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        roads.append((a, b))\n\n    if m == 0 or k == 0:\n        return ''.join(['0'] * k)\n\n    road_combinations = set()\n    for i in range(m):\n        for j in range(i + 1, m):\n            a = roads[i][0]\n            b = roads[i][1]\n            c = roads[j][0]\n            d = roads[j][1]\n            if a == c or a == d or b == c or b == d:\n                continue\n            if (a, b) not in road_combinations:\n                road_combinations.add((a, b))\n                road_combinations.add((b, a))\n            if (c, d) not in road_combinations:\n                road_combinations.add((c, d))\n                road_combinations.add((d, c))\n\n    num_roads = len(road_combinations)\n    num_options = 1\n    for k in range(2, n + 1):\n        num_options *= k\n\n    num_options //= num_roads\n\n    return num_options\n"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n@pytest.mark.parametrize(\"n, m, k, expected\", [\n    (4, 4, 3, '2\\n1110\\n1011'),\n    (4, 6, 3, '1\\n101001\\n110110'),\n    (5, 6, 2, '1\\n111100\\n110110'),\n])\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(x) for x in stdin.split(' '))\n    roads = [tuple(int(x) for x in stdin.split(' ')) for _ in range(m)]\n    print(roads)\n    pass\nsolution(stdin)\n\n'''\n\n'''\nFind a Hamiltonian Cycle in a directed graph.\n\nExample:\nInput:\nn = 4, edges = [[1,2],[2,3],[3,4]]\nOutput: 1->2->3->4->1\n\nConstraints:\n* 1 <= n <= 10^5\n* 1 <= edges.length <= min(10^5, n*(n-1)/2)\n* edges[i].length == 2\n* 1 <= edges[i][0], edges[i][1] <= n\n* edges[i][0]!= edges[i][1]\n* There are no repeated edges.\n* There are no self-loops\n* There are no parallel edges\n* There are no adjacent edges\n'''\n'''\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    ans = 'YES'\n    if n == 1:\n        return ans\n    if n == 2:\n        if a[0] == a[1]:\n            return ans\n        else:\n            return 'NO'\n    h = a[0]\n    for i in range(1, n):\n        if h!= a[i]:\n            ans = 'NO'\n            break\n    if ans == 'NO':\n        return ans\n    if h == 1:\n        if a[1] == a[2]:\n            a[1] = a[1] + 1\n            a[2] = a[2] + 1\n            h = a[1]\n            if a[0] == a[1] and a[2] == a[1]:\n                return ans\n        else:\n            return 'NO'\n    elif h == 2:\n        if a[1] == a[2] + 1:\n            a[1] = a[1] + 2\n            a[2] = a[2] + 2\n            h = a[1]\n            if a[0] == a[1] and a[2] == a[1]:\n                return ans\n        else:\n            return 'NO'\n    else:\n        return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().split()\n    a = [int(x) for x in a]\n    if n == 1:\n        return 'YES' if a[0] == 1 else 'NO'\n\n    # The bottom of the wall\n    wall = [0] + a\n\n    # The height of the wall\n    heights = [0] + a\n\n    for i in range(1, n+1):\n        if heights[i] == heights[i-1]:\n            wall[i] = wall[i-1]\n        else:\n            wall[i] = wall[i-1] + 2\n            heights[i] += 2\n\n    return 'YES' if heights[-1] == 0 else 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n    bricks = 0\n    for i in range(n):\n        if heights[i]!= heights[i + 1]:\n            bricks += heights[i] * 2 - 1\n    return 'YES' if bricks % 2 == 0 else 'NO'"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = [int(x) for x in stdin.readline().strip().split()]\n    h.append(0)\n    h.append(0)\n    c = 0\n    for i in range(1, len(h) - 1):\n        if h[i] == h[i - 1] and h[i] == h[i + 1]:\n            c += 1\n    if c == n - 2:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n\n    if n == 1:\n        return 'YES'\n\n    if n == 2:\n        if a[0] == a[1]:\n            return 'YES'\n        return 'NO'\n\n    if a[0] == a[1]:\n        return 'YES'\n\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            return 'YES'\n    return 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    return 'YES' if solve(n, a) else 'NO'\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(stdin) for _ in range(n)]\n    if n == 1:\n        return 'YES'\n\n    stack = []\n    for i in range(n):\n        if not stack:\n            stack.append(a[i])\n        elif stack[-1] == a[i]:\n            stack.append(stack[-1] + a[i])\n        else:\n            for j in range(len(stack) - 1, -1, -1):\n                if stack[j] < a[i]:\n                    stack.insert(j + 1, a[i])\n                    break\n            else:\n                stack.append(a[i])\n    for i in range(len(stack) - 1, -1, -1):\n        if stack[i]!= n:\n            return 'NO'\n    return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4121,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        return \"YES\"\n    if heights[0] == heights[1]:\n        return \"YES\"\n\n    count = 0\n    curr_count = 1\n    curr_height = heights[0]\n\n    for i in range(1, n):\n        if heights[i] == curr_height:\n            curr_count += 1\n        else:\n            if curr_count > 1:\n                count += (curr_count - 1) * 2\n            curr_count = 1\n            curr_height = heights[i]\n\n    if curr_count > 1:\n        count += (curr_count - 1) * 2\n\n    if count == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nassert str(solution(\"3\\n3 3 3\\n3 3 3\")) == \"NO\"\nassert str(solution(\"2\\n1 2 1\")) == \"NO\"\nassert str(solution(\"1\\n1 1\")) == \"YES\"\nassert str(solution(\"3\\n1 1 1\")) == \"YES\"\nassert str(solution(\"3\\n1 1 1\")) == \"YES\"\nassert str(solution(\"3\\n3 3 3\")) == \"YES\"\nassert str(solution(\"4\\n5 6 3 4\")) == \"NO\"\nassert str(solution(\"4\\n5 6 3 5\")) == \"YES\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"YES\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"YES\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"YES\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"YES\"\nassert str(solution(\"5\\n1 1 1 1 1\")) == \"NO\"\nassert str(solution(\"5\\n1 1 1 1 1\")) == \"NO\"\nassert str(solution(\"5\\n1 1 1 1 1\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5 5 5 5 5\")) == \"NO\"\nassert str(solution(\"5\\n5"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.strip().split(' '))\n    nums = list(map(int, stdin.strip().split(' ')))\n    alive = H\n    for num in nums:\n        alive -= num\n        if alive <= 0:\n            return(str(nums.index(num) + 1))\n    return('-1')\n\nassert(solution('''-1000 -200 -300 125 77 -4''') == '9')\nassert(solution('''1000000000000 5''') == '-1')\n"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split(\" \"))\n    A = list(map(int, stdin.split(\" \")))\n\n    k = 0\n    while H > 0:\n        if H <= A[k]:\n            return k + 1\n        H += A[k]\n        k += 1\n    return -1\n\nprint(solution(\"\"))\nprint(solution(\"-1\"))\nprint(solution(\"1000 0\"))\nprint(solution(\"1000 0\"))\nprint(solution(\"10 4\"))\nprint(solution(\"100000 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"-1 0\"))\nprint(solution(\"-1 0\"))\nprint(solution(\"0 5\"))\nprint(solution(\"-1 0\"))\nprint(solution(\"1000 -1\"))\nprint(solution(\"-1 0\"))\nprint(solution(\"-1 0\"))\nprint(solution(\"0 1\"))\nprint(solution(\"-1 0\"))\nprint(solution(\"-1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"0 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))\nprint(solution(\"1 0\"))"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, n = [int(x) for x in stdin.split()]\n    d = list(map(int, stdin.split()[1:]))\n    \n    A, B = H, H\n    for i in range(n):\n        B = B + d[i]\n        if B <= 0:\n            print(i + 1)\n            break\n        A, B = B, A + d[i]\n    else:\n        print(-1)\n"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    hp, n = map(int, stdin.split())\n    monster_hp = hp\n    d = list(map(int, stdin.split()))\n    for i in range(n):\n        monster_hp += d[i]\n        if monster_hp <= 0:\n            break\n    if monster_hp <= 0:\n        return str(i)\n    return str(-1)"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, n = [int(x) for x in stdin.readline().split(' ')]\n    d = [int(x) for x in stdin.readline().split(' ')]\n\n    h = H\n    for i in range(n):\n        h += d[i]\n\n    i = 0\n    while h > 0:\n        h += d[i]\n        i += 1\n        if i >= n:\n            break\n    if h <= 0:\n        return -1\n\n    return i\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    hero_hp, n = [int(x) for x in stdin.strip().split(\" \")]\n\n    data = [int(x) for x in stdin.strip().split(\" \")]\n\n    m = data[0]\n    data = data[1:]\n\n    dic = {}\n    for i in range(n):\n        if data[i] == 0:\n            continue\n        dic[i] = data[i]\n    ans = -1\n    for i in range(n):\n        if m in dic.keys():\n            ans = i + 1\n            break\n        else:\n            m = m + dic[m]\n    return str(ans)\n"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def battle(monster: int) -> int:\n        if hp <= 0:\n            return -1\n\n        hp_change_count = 0\n        monster_hp = 1000\n\n        for minute in range(n):\n            hp_change_count += 1\n\n            if monster_hp <= 0:\n                return minute\n\n            hp_change = stdin[minute * n + monster_hp]\n            monster_hp += hp_change\n\n    if n == 0:\n        return 0\n\n    n, hp = [int(x) for x in stdin.split()]\n    stdin = stdin[len(str(n)) + len(str(hp)):]\n\n    monster = battle(0)\n    if monster == -1:\n        return '-1'\n\n    return str(monster)"
    },
    {
        "number": 4122,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.codewars.com/kata/62c1823c45ba5a2d7a0000ca\n\n    The superhero fights with a monster. The battle consists of rounds, each of which lasts exactly $n$ minutes. After a round ends, the next round starts immediately. This is repeated over and over again.\n\n    Each round has the same scenario. It is described by a sequence of $n$ numbers: $d_1, d_2, \\dots, d_n$ ($-10^6 \\le d_i \\le 10^6$). The $i$-th element means that monster's hp (hit points) changes by the value $d_i$ during the $i$-th minute of each round. Formally, if before the $i$-th minute of a round the monster's hp is $h$, then after the $i$-th minute it changes to $h := h + d_i$.\n    \n    The monster's initial hp is $H$. It means that before the battle the monster has $H$ hit points. Print the first minute after which the monster dies. The monster dies if its hp is less than or equal to $0$. Print -1 if the battle continues infinitely.\n\n    For example: if the hero's hit point is 1000, monster's hit point is 1001, the first minute is 1, and the sequence of hit points is [-100, -200, -300, 125, 77, -4], then the output should be 9.\n    \"\"\"\n    hp, n = [int(n) for n in stdin.split()]\n    mhp = [int(n) for n in stdin.split()]\n\n    death = False\n    minute = 0\n\n    while not death:\n        for i in range(n):\n            mhp[i] += mhp[i] + mhp[i] * mhp[i] * mhp[i]\n            if mhp[i] <= 0:\n                death = True\n                break\n        if not death:\n            minute += 1\n            mhp = mhp[-1:] + mhp[:-1]\n    \n    return minute if not death else -1\n\nprint(solution(input()))"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin.strip()\n    substrings = []\n    for i in range(n-1):\n        for j in range(i+1, n):\n            substrings.append(string[i]+string[j])\n    \n    freq = {}\n    for sub in substrings:\n        freq[sub] = freq.get(sub, 0) + 1\n\n    max_freq = 0\n    for k, v in freq.items():\n        if v > max_freq:\n            max_freq = v\n            answer = k\n\n    return answer\n\nprint(solution(input()))\n"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:n]\n    \n    for i in range(n - 2):\n        for j in range(i + 1, n):\n            sub = s[i:j + 1]\n            if sub[0].isupper() and sub[1].isupper() and len(sub) == 2:\n                print(sub)"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    s = s[0:n - 1]\n    res = ''\n    for i in range(0, len(s) - 1):\n        res = max(res, s[i:i + 2], key=s.count)\n    print(res)\n    return res\n"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[stdin.find('\\n')+1:]\n    cnt = collections.Counter(s)\n    m = max(cnt.values())\n    res = ''\n    for letter, freq in cnt.most_common():\n        if freq == m:\n            res += letter * 2\n            break\n    return res"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    count = {}\n    max_count = 0\n    ans = \"\"\n    for i in range(n-1):\n        tmp = s[i:i+2]\n        if tmp in count:\n            count[tmp] += 1\n        else:\n            count[tmp] = 1\n        if count[tmp] > max_count:\n            max_count = count[tmp]\n            ans = tmp\n    return ans\n\n\nprint(solution(input()))"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find the two-gram that appears the most in the given string\n    '''\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    pairs = []\n    for i in range(n-1):\n        pairs.append((s[i], s[i+1]))\n    pairs = list(set(pairs))\n    counts = [pairs.count(x) for x in pairs]\n    m = max(counts)\n    return pairs[counts.index(m)]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4123,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    moves = 0\n    while s!= t:\n        if len(s) > len(t):\n            t = t + t[0]\n        else:\n            s = s + s[0]\n        moves += 1\n    return moves\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    s, t = stdin.splitlines()\n    return solution_recursive(s, t, 0, 0)\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    i, j = 0, 0\n    while i < len(s):\n        if s[i]!= t[j]:\n            if i + 1 < len(s):\n                i += 1\n                continue\n            if j + 1 < len(t):\n                j += 1\n                continue\n            return \"Not Possible\"\n        i += 1\n        j += 1\n    return str(len(s) + len(t) - 2)"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n', 1)[0]\n    t = stdin.split('\\n', 1)[1]\n    return solution(s) + solution(t)\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    a = stdin[0]\n    b = stdin[1]\n    m = len(a) + len(b)\n    if m == 0:\n        return str(m)\n    s1 = a\n    s2 = b\n    counter = 0\n    if a == b:\n        return 0\n    while s1 and s2:\n        if s1 == s2:\n            return counter\n        if len(s1) > len(s2):\n            s2 = s2[1:]\n        else:\n            s1 = s1[1:]\n        counter += 1\n    return m - counter\n\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n\n    if s == '' and t == '':\n        return 0\n\n    if s == t:\n        return 0\n\n    if len(s) > len(t):\n        s, t = t, s\n\n    # 1) rotate s so that the end of s is at the beginning of t\n    # 2) find the leftmost char that is in t\n    # 3) remove it from s\n    # 4) repeat 1 - 3\n\n    for i in range(len(s)):\n        if s[i] in t:\n            leftmost = i\n            break\n\n    s = s[leftmost:] + s[:leftmost]\n    s = s[1:] + s[0]\n\n    if s == t:\n        return len(s)\n\n    for i in range(len(s)):\n        if s[i] in t:\n            leftmost = i\n            break\n\n    s = s[leftmost:] + s[:leftmost]\n\n    if s == t:\n        return len(s)\n\n    # 1) rotate t so that the end of t is at the beginning of s\n    # 2) find the leftmost char that is in s\n    # 3) remove it from t\n    # 4) repeat 1 - 3\n\n    for i in range(len(t)):\n        if t[i] in s:\n            leftmost = i\n            break\n\n    t = t[leftmost:] + t[:leftmost]\n    t = t[1:] + t[0]\n\n    if s == t:\n        return len(s)\n\n    for i in range(len(t)):\n        if t[i] in s:\n            leftmost = i\n            break\n\n    t = t[leftmost:] + t[:leftmost]\n\n    if s == t:\n        return len(s)\n\n    return len(s) + len(t)\n"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    l1, l2 = len(s), len(t)\n    move = 0\n    if l1 == l2:\n        for i in range(l1):\n            if s[i]!= t[i]:\n                move += 1\n                if s[i] > t[i]:\n                    s = s[:i] + s[i+1:]\n                else:\n                    t = t[:i] + t[i+1:]\n        return move\n    else:\n        return l1 + l2"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4124,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    return sum(len(s) - len(x) for x in (s, t) if x)\n\nprint(solution(input()))\n\n\"\"\"\n\nfrom sys import stdin, stdout\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.strip().split(\" \"))\n    cities = [int(x) for x in stdin.strip().split(\" \")]\n    cities.sort()\n    \n    max_value = 0\n    for i in range(1, len(cities)):\n        new_value = abs(cities[i] - X)\n        if max_value < new_value:\n            max_value = new_value\n\n    return str(max_value)\n"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().split()[0])\n    X = list(map(int, stdin.readline().split()))\n\n    max_D = 0\n    for D in range(1, N):\n        count = 0\n        for i in range(N):\n            if i == 0:\n                if (X[i] + D) % N == X[i]:\n                    count += 1\n            else:\n                if (X[i] - D) % N == X[i]:\n                    count += 1\n\n        if count == N:\n            max_D = D\n            break\n\n    return str(max_D)\n\nassert(solution('''3 3\n1 7 11\n''') == '2')\nassert(solution('''3 3\n1 7 11\n''') == '2')\nassert(solution('''3 4\n1 2 3 4\n''') == '1')\nassert(solution('''3 4\n1 2 3 4\n''') == '1')\nassert(solution('''4 5\n1 2 3 4 5\n''') == '1')\nassert(solution('''4 5\n1 2 3 4 5\n''') == '1')\nassert(solution('''10 10\n1 2 3 4 5 6 7 8 9 10\n''') == '1')\nassert(solution('''10 10\n1 2 3 4 5 6 7 8 9 10\n''') == '1')\nassert(solution('''7 4\n7 5 6 7 8 9 10 11 12\n''') == '3')\nassert(solution('''7 4\n7 5 6 7 8 9 10 11 12\n''') == '3')\nassert(solution('''4 3\n1 2 3 4\n''') == '2')\nassert(solution('''4 3\n1 2 3 4\n''') == '2')\nassert(solution('''8 3\n1 2 3 4 5 6 7 8\n''') == '3')\nassert(solution('''8 3\n1 2 3 4 5 6 7 8\n''') == '3')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')\nassert(solution('''3 3\n1 2 3\n''') == '1')"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, x = [int(x) for x in stdin.split()]\n    x_seq = list(map(int, stdin.split()))\n    x_seq.sort()\n    x_seq.append(10 ** 9)\n    for i in range(N):\n        if x_seq[i] > x:\n            break\n    else:\n        return str(0)\n    return str(abs(x - x_seq[i - 1]))"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, X = [int(i) for i in stdin.split()]\n    cities = [int(i) for i in stdin.split()]\n    return max(1, min(X - cities[0], cities[-1] - X, sum(cities) - X))"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return ''\n"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split()))\n    cities = list(map(int, stdin.split()))\n    d = 1\n    while cities:\n        x = (x + d) % n\n        if x in cities:\n            d += 1\n            cities.remove(x)\n    return d"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cities = list(map(int, stdin.split(\" \")))\n    N, X = cities[0], cities[1]\n    return str(get_max_distance(N, X))\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(i) for i in stdin.split()]\n    cities = [int(i) for i in stdin.split()]\n    \n    # Find the highest value for D which can visit all cities.\n    # It is not guaranteed to be the maximum value.\n    # We need to check all permutations of D.\n    # First, we find all permutations of D which have length of N.\n    # Then, we use each permutation to move to the coordinate with the highest value.\n    # If we cannot do so, we try the next permutation.\n    D = 1\n    N = n\n    while D <= N:\n        visited = []\n        max_value = 0\n        # Make sure all cities are visited.\n        while len(visited) < n:\n            # Move to the coordinate with the highest value.\n            max_value = max(max_value, cities[cities.index(x) + D])\n            visited.append(cities[cities.index(x) + D])\n            # Move to the coordinate with the lowest value.\n            max_value = max(max_value, cities[cities.index(x) - D])\n            visited.append(cities[cities.index(x) - D])\n            # Move to the coordinate with the highest value.\n            max_value = max(max_value, cities[cities.index(x) + D + N])\n            visited.append(cities[cities.index(x) + D + N])\n            # Move to the coordinate with the lowest value.\n            max_value = max(max_value, cities[cities.index(x) - D + N])\n            visited.append(cities[cities.index(x) - D + N])\n            # Move to the coordinate with the highest value.\n            max_value = max(max_value, cities[cities.index(x) + D - N])\n            visited.append(cities[cities.index(x) + D - N])\n            # Move to the coordinate with the lowest value.\n            max_value = max(max_value, cities[cities.index(x) - D - N])\n            visited.append(cities[cities.index(x) - D - N])\n            # Move to the coordinate with the highest value.\n            max_value = max(max_value, cities[cities.index(x) + D - N - 2 * D])\n            visited.append(cities[cities.index(x) + D - N - 2 * D])\n            # Move to the coordinate with the lowest value.\n            max_value = max(max_value, cities[cities.index(x) - D - N - 2 * D])\n            visited.append(cities[cities.index(x) - D - N - 2 * D])\n            # Move to the coordinate with the highest value.\n            max_value = max(max_value, cities[cities.index(x) + D - N - 2 * D - D])\n            visited.append(cities[cities.index(x) + D - N - 2 * D - D])\n            # Move to the coordinate with the lowest value.\n            max_value = max(max_value, cities[cities.index(x) - D - N - 2 * D - D])\n            visited.append(cities[cities.index(x) - D - N - 2 * D - D])\n            # Move to the coordinate with the highest value.\n            max_value = max(max_value, cities[cities.index(x) + D - N - 2 * D - D - D])\n            visited.append(cities[cities.index(x) + D - N - 2 * D - D - D])\n            # Move to the coordinate with the lowest value.\n            max_value = max(max_value, cities[cities.index(x) - D - N - 2 * D - D - D])\n            visited.append(cities[cities.index(x) - D - N - 2 * D - D - D])\n            # Move to the coordinate with the highest value.\n            max_value = max(max_value, cities[cities.index(x) + D - N - 2 * D - D - D - D])\n            visited.append(cities[cities.index(x) + D - N - 2 * D - D - D - D])\n            # Move to the coordinate with the lowest value.\n            max_value = max(max_value, cities[cities.index(x) - D - N - 2 * D - D - D - D])\n            visited.append(cities[cities.index(x) - D - N - 2 * D - D - D - D])\n            # Move to the coordinate with the highest value.\n            max_value = max(max_value, cities[cities.index(x) + D - N - 2 * D - D - D - D - D])\n            visited.append(cities[cities.index(x) + D - N - 2 * D - D - D - D - D])\n            # Move to the coordinate with the lowest value.\n            max_value = max(max_value, cities[cities.index(x) - D - N - 2 * D - D - D - D - D])\n            visited.append(cities[cities.index(x) - D - N - 2 * D - D - D - D - D])\n            # Move to the coordinate with the highest value.\n            max_value = max(max_value, cities[cities.index(x) + D - N - 2 * D - D - D - D - D - D])\n            visited.append(cities[cities.index(x) + D - N - 2 * D - D - D - D - D - D])\n            # Move to the coordinate with the lowest value.\n            max_value = max(max_value, cities[cities.index(x) - D - N - 2 * D - D - D - D - D - D])\n            visited.append(cities[cities.index(x) - D - N - 2 * D - D - D - D - D - D])\n            # Move to the coordinate with the highest value.\n            max_value = max(max_value, cities[cities.index(x) + D - N - 2 * D - D - D - D - D - D])\n            visited.append(cities[cities.index(x) + D - N - 2 * D - D - D - D - D - D])\n            # Move to the coordinate with the lowest value.\n            max_value = max(max_value, cities[cities.index(x) - D - N - 2 * D - D - D - D - D - D])\n            visited.append(cities[cities.index(x) - D - N - 2 * D - D - D -"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    '2'\n    \"\"\"\n    N, X = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n\n    max_val = 0\n\n    for city in cities:\n        if city == X:\n            continue\n\n        max_val = max(max_val, abs(city - X))\n\n    return str(max_val)\n\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, x = map(int, lines[0].split())\n    cities = list(map(int, lines[1].split()))\n    cities.sort()\n    max_val = 1\n    for i in range(len(cities) - 1):\n        curr = cities[i]\n        next = cities[i + 1]\n        d = next - curr\n        if d <= max_val:\n            continue\n        max_val = d\n    return str(max_val)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[::-1] == s:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_strong_palindrome(stdin) else 'No'\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    return \"Yes\" if is_strong_palindrome(s) else \"No\"\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_strong_palindrome(stdin.strip()) else 'No'\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) % 2 == 0:\n        return \"No\"\n    if s[:len(s) // 2] == s[len(s) // 2:][::-1]:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_strong_palindrome(stdin) else 'No'\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return \"Yes\" if is_strong_palindrome(s) else \"No\"\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"Yes\"\n    return answer"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4126,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_strong_palindrome(stdin) else 'No'\n\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    print(int(A) * int(B[0:2]))"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [float(x) for x in stdin.split()]\n    return \"{0:.0f}\".format(a * b)"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return str(int(A * B))"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    print(int(A) * int(B))\n    \n"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num1, num2 = stdin.strip().split(' ')\n    return str(int(num1) * int(num2))"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    a = int(a)\n    b = float(b)\n    print(int(a * b))\n    return \"\""
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    a = int(a)\n    b = int(b)\n    print(a * b)\n    return str(a * b)"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a * b))"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = float(b)\n    b = int(b)\n    c = a * b\n    c = int(c)\n    return str(c)"
    },
    {
        "number": 4127,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    A, B = int(stdin[0]), float(stdin[1])\n    return str(int(A * B))"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    res = 0\n    for _ in range(n):\n        c = int(stdin.readline())\n        if c % 2!= 0:\n            res += 1\n    return str(res)\n\nprint(solution(stdin))\n\n\"\"\"\n\nt = int(input())\n\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    for i in range(1, n // 2 + 1):\n        for j in range(i + 1, n // 2 + 1):\n            k = n - i - j\n            if k >= i and k >= j:\n                ans += 1\n    print(ans)"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n-----Reference-----\n\n- https://www.codewars.com/kata/solution-of-the-n-candies-problem\n\n\n\"\"\"\n\n\nfrom math import factorial\nfrom functools import lru_cache\n\n\"\"\"\n   The problem is to find out how many ways to distribute exactly n candies between two sisters.\n\n   All the candies that Alice can get are also candies that Betty can get.\n   \n   Alice will get the greater number of candies than Betty.\n   \n   For example, if Alice gets n candies, they will also get n candies.\n   \n   If they get the same number of candies, they will also get the same number of candies.\n   \n   For example, if Alice gets 7 candies, she will also get 7 candies.\n   \n   If we use this relationship, we can make the following recurrence relation:\n   \n   Alice gets n candies (because Alice cannot get a negative number of candies)\n   \n   Betty gets n/2 candies\n   \n   Alice gets n/2 candies (because Alice cannot get a negative number of candies)\n   \n   And so on and so on\n   \n   For each n, we get all the numbers that can be formed by Alice and Betty getting n candies.\n   \n   The number of ways to distribute exactly n candies is the product of the numbers in the set of all the numbers that can be formed by Alice and Betty getting n candies.\n   \n   This solution is based on the fact that for each number n, if Alice gets n candies, she will also get n/2 candies (because of this recurrence relation).\n   \n   This solution is based on the fact that the factorial of n is (n-1)!, which is equal to the product of all the numbers between 1 and n.\n   \n   Let's try to find the sum of the factorials of the numbers between 1 and n.\n   \n   The recurrence relation is as follows:\n   \n   The number of ways to get n candies is the number of ways to get n/2 candies plus the number of ways to get n/4 candies plus the number of ways to get n/8 candies plus the number of ways to get n/16 candies (and so on)\n   \n   Thus, the sum of the factorials of the numbers between 1 and n is n!.\n   \n   The sum is equal to the product of all the numbers between 1 and n.\n   \n   So, by solving this recurrence relation, we can get the sum of the factorials of all the numbers between 1 and n!\n   \n   This solution will work, but it is inefficient.\n   \n   I would like to see a better solution.\n   \n   The better solution is to use dynamic programming and memoization.\n   \n   This solution is based on the fact that the number of candies that Alice can get is the same as the number of candies that Betty can get.\n   \n   Hence, we only need to find the number of ways that Alice can get n candies and the number of ways that Betty can get n/2 candies.\n   \n   We can solve this recurrence relation using dynamic programming.\n   \n   The number of ways to get n candies is the sum of the ways to get n/2 candies plus the number of ways to get n/4 candies plus the number of ways to get n/8 candies plus the number of ways to get n/16 candies (and so on)\n   \n   We can initialize the answer to be 1 because we cannot get any more candies than what we have.\n   \n   We can initialize the array of answers to be an array of ones.\n   \n   Then, for each n, we can loop through each possible amount of candies that Alice can get, and for each amount of candies Alice can get, we can loop through each possible amount of candies that Betty can get.\n   \n   At each iteration of the loop, we can add the number of ways to get the amount of candies that Alice can get to the current answer and the number of ways to get the amount of candies that Betty can get to the current answer.\n   \n   Finally, we can return the sum of the array of answers.\n   \n   After writing this solution, I realized that it is possible to optimize it by using only the previous two numbers of Alice and Betty.\n   \n   It is possible because the sum of the factorials of the numbers between 1 and n is equal to the product of all the numbers between 1 and n.\n   \n   This is because each number n in the sequence is the sum of the n-1 and n/2 numbers, so the factorial of n is the product of all the numbers between 1 and n/2.\n   \n   We can use this fact to optimize the recurrence relation by just using the fact that the product of the two numbers of Alice and Betty is the number of candies that they can get, which is the same as the number of candies that they can get.\n   \n   This solution works even with large numbers.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses the factorial of each number between 1 and n to save time.\n   \n   Note: This solution is based on the fact that the factorial of n is (n-1)!\n   \n   Note: This solution uses dynamic programming and memoization.\n   \n   Note: This solution is based on the fact that the number of candies that Alice can get is the same as the number of candies that Betty can get.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution uses recursion and therefore is not efficient.\n   \n   Note: This solution"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    #n = int(stdin.readline().strip())\n    #n = int(stdin.readline().strip())\n    result = 0\n    for i in range(1, n+1):\n        j = n-i\n        if i>j:\n            result += 1\n    return str(result)\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        s = str(bin(n).count('1'))\n        print(s)\n"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    return str(stdin.readline())\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n\n\nprint(solution(input()))"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        print(solution2(n))\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def is_valid(row: List[int]) -> bool:\n        for i in range(len(row) - 1):\n            if row[i] == row[i + 1]:\n                return False\n        return True\n\n    n, m, s = [int(x) for x in stdin.split()]\n    roads = [tuple([int(x) for x in stdin.split()]) for _ in range(m)]\n\n    if all(x == s for x in range(1, n + 1)):\n        return \"0\"\n\n    rows = [x for x in range(1, n + 1)]\n    for u, v in roads:\n        rows.remove(u)\n        rows.remove(v)\n        rows.append(v)\n        rows.append(u)\n\n    count = 0\n    while not is_valid(rows):\n        rows.remove(rows[0])\n        count += 1\n\n    return str(count)\n\n\n\nprint(solution(input()))"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split()]\n    \n    # array of length n with 'None' as an element\n    visited = [None] * n\n    \n    # array of length m with 1 as an element\n    roads = [[] for x in range(m)]\n    \n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        roads[u - 1].append(v - 1)\n        roads[v - 1].append(u - 1)\n    \n    # recursive DFS\n    def dfs(start: int) -> int:\n        if visited[start] is None:\n            visited[start] = True\n            \n            if start == s:\n                return 0\n            \n            return 1 + sum([dfs(x) for x in roads[start]])\n        return 0\n    \n    return str(dfs(s - 1))\n\n'''\n"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 4 5\\n1 2\\n2 3\\n3 4\\n4 1\\n5 1')\n    '1'\n    \"\"\"\n    n, m, s = map(int, stdin.split())\n    if n == s:\n        return '0'\n    roads = {tuple(map(int, stdin.split())) for _ in range(m)}\n    return '1' if all(a == s for a, b in roads) else min(map(int, stdin.split()))\n"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n\n    roads = [set() for i in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        roads[u].add(v)\n        roads[v].add(u)\n\n    connected = set()\n    explore(roads, s, connected)\n    if len(connected) == n:\n        return '0'\n    else:\n        return str(len(connected) - 1)\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(min(map(int, re.findall(r'\\d+', stdin))), min(map(int, re.findall(r'\\d+', stdin)))))"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n    \n\"\"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.strip().split(' '))\n    if n == s:\n        return '0'\n    roads = []\n    for _ in range(m):\n        u, v = map(int, stdin.strip().split(' '))\n        roads.append((u, v))\n    roads.append((s, 1))\n    roads.sort()\n    edges = []\n    for u, v in roads:\n        if u!= v:\n            edges.append((u, v))\n    edges = set(edges)\n    visited = set()\n    visited.add(s)\n    distance = 0\n    while len(visited) < n:\n        next = []\n        for u, v in edges:\n            if u in visited and v not in visited:\n                visited.add(v)\n                distance += 1\n            if v in visited and u not in visited:\n                visited.add(u)\n                distance += 1\n    return str(distance)\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    boxers = tuple(int(x) for x in stdin.readline().split())\n    result = 0\n\n    for i in range(1, n):\n        if boxers[i] + boxers[i - 1] > result:\n            result = boxers[i] + boxers[i - 1]\n\n    return str(result)\n"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = [int(w) for w in stdin.readline().split()]\n    curr_weight = max(weights)\n    result = 0\n    \n    while True:\n        curr_weight -= 1\n        for w in weights:\n            if curr_weight < w:\n                break\n        else:\n            result += 1\n        if curr_weight == 0:\n            break\n    \n    return str(result)"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Each input consists of a single line.\n    Output is a single line containing the single integer \u2014 the maximum possible number of people in a team.\n    \"\"\"\n    n = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        if weights[0] == weights[1]:\n            return \"2\"\n        elif weights[0] < weights[1]:\n            return \"2\"\n        else:\n            return \"1\"\n    weights_set = set(weights)\n    max_weight = max(weights_set)\n    max_weight_count = weights.count(max_weight)\n    if max_weight == 150000:\n        return \"1\"\n    if max_weight_count == 1:\n        return str(max_weight_count)\n    if weights.count(max_weight - 1) == 1:\n        return str(max_weight_count)\n    if weights.count(max_weight + 1) == 1:\n        return str(max_weight_count)\n    if max_weight_count > 1:\n        if max_weight_count == n:\n            return str(max_weight_count)\n        if max_weight_count == n - 1:\n            return \"2\"\n        if max_weight_count == n - 2:\n            if weights[0] == max_weight - 1 and weights[1] == max_weight + 1:\n                return \"2\"\n            elif weights[0] == max_weight - 1 and weights[1] == max_weight:\n                return \"1\"\n            elif weights[0] == max_weight + 1 and weights[1] == max_weight:\n                return \"1\"\n            else:\n                return \"2\"\n    return str(max_weight_count)\n"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().strip()\n    if not line:\n        return None\n    n = int(line)\n    weights = [int(x) for x in stdin.readline().strip().split(' ')]\n    \n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if weights[i] < weights[j]:\n                weights[j] -= 1\n                result += 1\n    return result"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(a_i) for a_i in stdin.readline().strip().split(' ')]\n    a.sort(reverse=True)\n    max_value = 0\n    for i in range(n):\n        if a[i] > max_value:\n            max_value = a[i]\n    return max_value\n"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    boxers = stdin.strip().split()\n    boxers = [int(b) for b in boxers]\n\n    possible = 0\n    for i in range(n):\n        if boxers[i] > 1:\n            boxers[i] -= 1\n            possible += 1\n\n    return possible\n\nassert(solution(\"4\") == 4)\nassert(solution(\"1 1 1 4 4 4\") == 5)\nassert(solution(\"6\") == 5)\nassert(solution(\"1 1 1 4 4 4 1\") == 5)\nassert(solution(\"1 1 1 4 4 4 4\") == 5)\nassert(solution(\"2 2 2 2 2 2 2\") == 6)\nassert(solution(\"10 10 10 10 10 10 10 10\") == 15)\nassert(solution(\"1 1 1 1 1 1 1 1 1 1\") == 15)\nassert(solution(\"2 2 2 2 2 2 2 2\") == 14)\nassert(solution(\"4\") == 4)\nassert(solution(\"5\") == 5)\nassert(solution(\"10\") == 10)\nassert(solution(\"15\") == 15)\nassert(solution(\"7\") == 7)\nassert(solution(\"16\") == 16)\nassert(solution(\"20\") == 20)\nassert(solution(\"31\") == 31)\nassert(solution(\"40\") == 40)\nassert(solution(\"49\") == 49)\nassert(solution(\"58\") == 58)\nassert(solution(\"60\") == 60)\nassert(solution(\"61\") == 61)\nassert(solution(\"62\") == 62)\nassert(solution(\"63\") == 63)\nassert(solution(\"64\") == 64)\nassert(solution(\"65\") == 65)\nassert(solution(\"66\") == 66)\nassert(solution(\"67\") == 67)\nassert(solution(\"68\") == 68)\nassert(solution(\"69\") == 69)\nassert(solution(\"70\") == 70)\nassert(solution(\"71\") == 71)\nassert(solution(\"72\") == 72)\nassert(solution(\"73\") == 73)\nassert(solution(\"74\") == 74)\nassert(solution(\"75\") == 75)\nassert(solution(\"76\") == 76)\nassert(solution(\"77\") == 77)\nassert(solution(\"78\") == 78)\nassert(solution(\"79\") == 79)\nassert(solution(\"80\") == 80)\nassert(solution(\"81\") == 81)\nassert(solution(\"82\") == 82)\nassert(solution(\"83\") == 83)\nassert(solution(\"84\") == 84)\nassert(solution(\"85\") == 85)\nassert(solution(\"86\") == 86)\nassert(solution(\"87\") == 87)\nassert(solution(\"88\") == 88)\nassert(solution(\"89\") == 89)\nassert(solution(\"90\") == 90)\nassert(solution(\"91\") == 91)\nassert(solution(\"92\") == 92)\nassert(solution(\"93\") == 93)\nassert(solution(\"94\") == 94)\nassert(solution(\"95\") == 95)\nassert(solution(\"96\") == 96)\nassert(solution(\"97\") == 97)\nassert(solution(\"98\") == 98)\nassert(solution(\"99\") == 99)\nassert(solution(\"100\") == 100)\nassert(solution(\"101\") == 101)\nassert(solution(\"102\") == 102)\nassert(solution(\"103\") == 103)\nassert(solution(\"104\") == 104)\nassert(solution(\"105\") == 105)\nassert(solution(\"106\") == 106)\nassert(solution(\"107\") == 107)\nassert(solution(\"108\") == 108)\nassert(solution(\"109\") == 109)\nassert(solution(\"110\") == 110)\nassert(solution(\"111\") == 111)\nassert(solution(\"112\") == 112)\nassert(solution(\"113\") == 113)\nassert(solution(\"114\") == 114)\nassert(solution(\"115\") == 115)\nassert(solution(\"116\") == 116)\nassert(solution(\"117\") == 117)\nassert(solution(\"118\") == 118)\nassert(solution(\"119\") == 119)\nassert(solution(\"120\") == 120)\nassert(solution(\"121\") == 121)\nassert(solution(\"122\") == 122)\nassert(solution(\"123\") == 123)\nassert(solution(\"124\") == 124)\nassert(solution(\"125\") == 125)\nassert(solution(\"126\") == 126)\nassert(solution(\"127\") == 127)\nassert(solution(\"128\") == 128)\nassert(solution(\"129\") == 129)\nassert(solution(\"130\") == 130)\nassert(solution(\"131\") == 131)\nassert(solution(\"132\") == 132)\nassert(solution(\"133\") == 133)\nassert(solution(\"134\") == 134)\nassert(solution(\"135\") == 135)\nassert(solution(\"136\") == 136)\nassert(solution(\"137\") == 137)\nassert(solution(\"138\") == 138)\nassert(solution(\"139\") == 139)\nassert(solution(\"140\") == 140)\nassert(solution(\"141\") == 141)\nassert(solution(\"142\") == 142)\nassert(solution(\"143\") == 143)\nassert(solution(\"144\") == 144)\nassert(solution(\"145\") == 145)\nassert(solution(\"146\") == 146)\nassert(solution(\"147\") == 147)\nassert(solution(\"148\") == 148)\nassert(solution(\"149\") == 149)\nassert(solution(\"150\") == 150)\nassert(solution(\"151\") == 151)\nassert(solution(\"152\") == 152)\nassert(solution(\"153\") == 153)\nassert(solution(\"154\") == 154)\nassert(solution(\"155\") == 155)\nassert(solution(\"156\") == 156)\nassert(solution(\"157\") == 157)\nassert(solution(\"158\") == 158)\nassert(solution(\"159\") == 159)\nassert(solution(\"160\") == 160)\nassert(solution(\"161\") == 161)\nassert(solution(\"162\") == 162)\nassert(solution(\"163\") == 163)\nassert(solution(\"164\") == 164)\nassert(solution(\"165\") == 165)\nassert(solution(\"166\") == 166)\nassert(solution(\"167\") == 167)\nassert(solution(\"168\") == 168)\nassert(solution(\"169\") == 169)\nassert(solution(\"170\") == 170)\nassert(solution(\"171\") == 171)\nassert(solution(\"172\") == 172)\nassert(solution(\"173\") == 173"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin)\n    # n, *arr = [int(stdin) for _ in range(n)]\n    #\n    # result = 0\n    #\n    # for i in range(n):\n    #     for j in range(i + 1, n):\n    #         if arr[i]!= arr[j]:\n    #             arr[i] += 1\n    #             arr[j] -= 1\n    #             result = max(result, max(arr))\n    #             arr[i] -= 1\n    #             arr[j] += 1\n    #\n    # print(result)\n    #\n    # return result\n\n    n = int(stdin)\n    arr = [int(stdin) for _ in range(n)]\n\n    arr.sort()\n\n    result = 0\n    for i in range(n):\n        if arr[i] == i:\n            result += 1\n\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    a_current = a[:]\n    a_current_len = len(a)\n    a_current_index = 0\n    while True:\n        a_current_len -= 1\n        a_current_index += 1\n        if a_current[a_current_index] == 150001:\n            return a_current_len\n        a_current[a_current_index] += 1\n        if a_current[a_current_index] == a_current[0]:\n            del a_current[a_current_index]\n            a_current_len -= 1\n"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    max_team_weight = 0\n    team_weight = 0\n    for x in a:\n        team_weight += x\n        if team_weight > max_team_weight:\n            max_team_weight = team_weight\n    return str(max_team_weight)\n\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_teams(weights: list[int]) -> int:\n        \"\"\"\n        Find the maximum possible number of teams,\n        each containing all the boxers with weights in the given list\n        \"\"\"\n        n = len(weights)\n        if n == 1:\n            return 1\n        l = 0\n        r = max(weights) - 1\n        while l < r:\n            m = (l + r) // 2\n            if sum(map(lambda x: 1 if x <= m else 0, weights)) >= (n - 1) * m:\n                r = m\n            else:\n                l = m + 1\n        return l\n\n    return str(count_teams(list(map(int, stdin.split()))))"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    n, m = map(int, stdin.split())\n    prefectures, cities = defaultdict(set), defaultdict(int)\n\n    for i in range(m):\n        p, y = map(int, stdin.split())\n        if y not in prefectures[p]:\n            prefectures[p].add(y)\n        cities[y] += 1\n\n    for p, c in prefectures.items():\n        cities[max(c)] -= c\n\n    sorted_cities = sorted(cities)\n    for i, c in enumerate(sorted_cities):\n        if i == 0:\n            print(\"%06d\" % c, end=\"\")\n        else:\n            print(\"%06d\" % c, end=\"\")\n            if i % 12 == 11:\n                print()\n    print()"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pref_dict = {}\n    n, m = tuple(map(int, stdin.split()))\n    for _ in range(m):\n        pref, year = stdin.split()\n        pref_dict[pref] = year\n    cities = []\n    for _ in range(n):\n        cities.append(stdin.split())\n    for city in cities:\n        id_number = ''\n        for pref in city:\n            id_number += pref_dict[pref]\n        city.append(id_number)\n    return '\\n'.join(sorted(map(str, cities)))\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    p = [None] * m\n    for i in range(m):\n        p[i], y = stdin.strip().split()\n        p[i] = int(p[i])\n        y = int(y)\n        if y < 0:\n            y = 10 ** 9 + y\n        if y < 10:\n            y = 10 * y\n        p[i] = str(p[i]).zfill(6)\n\n    for i in range(1, n + 1):\n        print(p[0] + str(i).zfill(6))"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_cases, num_cities = list(map(int, stdin.strip().split()))\n    cities = [None] * num_cities\n    for case_num in range(1, num_cases + 1):\n        line = stdin.strip().split(' ')\n        city_id = int(line[0])\n        city_year = int(line[1])\n        if cities[city_id - 1] is None:\n            cities[city_id - 1] = [case_num, city_year]\n        else:\n            current_id = cities[city_id - 1][0]\n            current_year = cities[city_id - 1][1]\n            if city_year > current_year:\n                cities[city_id - 1] = [case_num, city_year]\n            else:\n                cities[city_id - 1][0] = current_id\n    \n    for city_num in range(num_cities):\n        if cities[city_num] is not None:\n            city_id, city_year = cities[city_num]\n            print('{:05d}'.format(city_id))\n        else:\n            print('0000')"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m = [int(x) for x in stdin.split('\\n')[1:-1]]\n    n = [int(x) for x in stdin.split('\\n')[-1].split(' ')]\n    _, result = greedy_solve(m, n)\n    return ''.join(map(lambda x: f'{x:06}', result))\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n\n    pref_ids = [0 for _ in range(N)]\n    for _ in range(M):\n        pref, year = map(int, stdin.split(\" \"))\n        id_len = len(str(pref))\n        id_num = pref\n        for _ in range(N - id_len):\n            id_num = int('0' + str(id_num))\n        id_num = str(id_num)\n        pref_ids[pref - 1] = id_num\n\n    for i in range(N):\n        print(pref_ids[i])"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_prefectures, num_cities = [int(x) for x in stdin.split(' ')]\n    prefectures = [int(x) for x in stdin.split(' ')]\n    cities = [int(stdin.split(' ')[i]) for i in range(2, num_cities + 2)]\n    id_numbers = []\n    prefecture_index = 0\n    for i in range(num_cities):\n        if prefectures[prefecture_index]!= cities[i]:\n            prefecture_index += 1\n            id_numbers.append(i)\n    for i in range(num_cities):\n        index = id_numbers[i]\n        if i == 0:\n            id_number = str(prefectures[index]) + str(index)\n        else:\n            id_number = str(prefectures[index]) + '0' * (6 - len(str(index))) + str(index)\n        print(id_number)\nsolution(input())\n"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    data = stdin.strip().split('\\n')\n    prefectures = [int(p) for p in data[0].split(' ')]\n    cities = [int(c) for c in data[1].split(' ')]\n    for i, c in enumerate(cities):\n        pref = c // pow(10, len(str(c)))\n        idx = c % pow(10, len(str(c)))\n        if pref <= prefectures[0]:\n            result += f'{idx:06}'\n        else:\n            result += f'{pref:06}{idx:06}'\n    return result\n\n\nassert (solution(\n'''2 3\n1 32\n2 63\n1 12''')) == '000001000002'\nassert (solution('''2 3\n1 2\n2 3''')) == '000001000001'\nassert (solution('''1 1\n1 1''')) == '000002000000'\nassert (solution('''5 4\n5 4\n5 4\n5 4\n5 4\n5 4''')) == '000001000002'\nassert (solution('''1 100000\n5 3999\n5 3999\n5 3999\n5 3999\n5 3999\n5 3999\n5 3999\n5 3999\n5 3999\n5 3999''')) == '000000000001'\nassert (solution('''2 2\n1 2\n1 2''')) == '000000000202'\nassert (solution('''7 7\n7 7\n7 7\n7 7\n7 7\n7 7\n7 7\n7 7\n7 7''')) == '000001000002'\nassert (solution('''6 2\n5 3\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2''')) == '000001000001'\nassert (solution('''4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4''')) == '000000000402'\nassert (solution('''3 4\n3 4\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2''')) == '000000000302'\nassert (solution('''4 6\n2 3\n4 3\n4 3\n4 3\n4 3\n4 3\n4 3\n4 3\n4 3''')) == '000000000402'\nassert (solution('''3 6\n2 3\n4 3\n4 3\n4 3\n4 3\n4 3\n4 3\n4 3\n4 3''')) == '000000000402'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000''')) == '000000000001'\nassert (solution('''2 100000\n2 100000\n2 100000\n2 100000\n2 100000\n2 100000\n2 100000\n2 100000\n2 100000\n2 100000\n2 100000''')) == '000000000202'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000''')) == '000000000001'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000''')) == '000000000001'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000''')) == '000000000001'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000''')) == '000000000001'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000''')) == '000000000001'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000''')) == '000000000001'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000''')) == '000000000001'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000''')) == '000000000001'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000''')) == '000000000001'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000''')) == '000000000001'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000''')) == '000000000001'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000''')) == '000000000001'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000''')) == '000000000001'\nassert (solution('''1 100000\n1 100000\n1 100000\n1 100000\n"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # To check: [stdin] = '3 4\\n1 32\\n2 63\\n1 12'\n    N, M = list(map(int, stdin.split()))\n    prefectures = [[] for _ in range(N)]\n    for _ in range(M):\n        P, Y = list(map(int, stdin.split()))\n        prefectures[P - 1].append(Y)\n\n    prefectures.sort()\n    prefectures.sort(key=len, reverse=True)\n    # To check: prefectures = [[2, 1, 3], [2, 2, 3], [2, 3, 3]]\n\n    prefecture_index = 0\n    while prefecture_index < len(prefectures):\n        Ys = prefectures[prefecture_index]\n        prefecture_index += 1\n        for Y in Ys:\n            base = '{:06d}'.format(prefecture_index)\n            print(base + base[-6:])\n\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(next(int(s) for s in stdin.split(\" \") if s))"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n\n    alive = 1\n\n    for i in range(N):\n        if A[i] > 0:\n            alive += 1\n\n    print(alive - 1)"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    pass"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    m = stdin.readline().strip()\n    l = list(map(int, stdin.readline().strip().split()))\n    l.sort()\n    k = 1\n    c = 0\n    while len(l) > 1:\n        if k == 1:\n            l.sort()\n            a = l.pop()\n            if a >= l[-1]:\n                c += 1\n            else:\n                l.append(a)\n                k = 0\n        else:\n            a = l.pop()\n            if a >= l[-1]:\n                l.append(a)\n                k = 1\n    return str(c)"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    alive = list(map(int, stdin.readline().strip().split()))\n    attack = int(stdin.readline().strip())\n    alive_set = set(alive)\n    alive_set.remove(max(alive_set))\n    health = max(alive_set)\n    print(health)"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    health = list(map(int, stdin.split()))\n    alive = 1\n    health_sum = sum(health)\n    while alive < n:\n        attack = alive\n        while attack > 0:\n            health[attack - 1] -= health[attack]\n            attack -= 1\n        health_sum -= health[alive - 1]\n        alive += 1\n\n    return str(health_sum)\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ...\n"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    d = {}\n    for i in range(n):\n        d[i + 1] = a[i]\n\n    while len(d) > 1:\n        r = random.randint(1, len(d))\n        max_health = max(d.values())\n        d[r] -= d[r]\n        if d[r] > 0:\n            d.pop(r)\n\n    return str(max_health)"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4132,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    for i in stdin[1:]:\n        n = min(n, (i + 10**n) % 9998)\n    return str(n)"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution('''?(___-_+__-_____):-__>__,_____<__.\n''')\nsolution('''?(______________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n''')\n"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'false'\n\nassert(solution('') == 'false')\nassert(solution('?(_-_/___*__):-___>__.') == '0010')\nassert(solution('?(__-_+_/_____):-__>__,_____<__.') == 'false')\nassert(solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.') == '0250341')\nassert(solution('?(__+___+__-___):-___>__.') == '0101')\n"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    golorp = stdin.strip('?')\n    index = golorp.find('<')\n    if index == -1:\n        return False\n    golorp = golorp[:index]\n\n    queue = []\n    for i in range(len(golorp)):\n        queue.append(golorp[i])\n        for k in range(len(queue)):\n            if queue[k] == '_':\n                queue[k] = 0\n            else:\n                queue[k] = int(queue[k])\n        queue = sorted(queue)\n        queue = ''.join([str(i) for i in queue])\n        if queue == golorp:\n            return queue\n\n    return False\n"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    golorp = stdin[1:-1]\n    print(golorp)\n    n = len(golorp)\n    if n > 2:\n        return \"false\"\n    if n == 2:\n        if golorp[0] == golorp[1]:\n            return \"01\"\n        return \"false\"\n\n    if n == 1:\n        if golorp[0] == golorp[1]:\n            return \"0\"\n        return \"false\"\n\n    if n == 0:\n        return \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # We assume that the input is valid and only consists of letters of '?'\n    # and digits '0' through '9'.\n    # The goal is to output lexicographically smallest sequence of values\n    # that the golorps can feed the visiting golorp.\n    # The problem can be solved recursively: find the smallest solution for\n    # the subproblem of the variables that are on the left side of the\n    # '?' and the subproblem of the variables that are on the right side of\n    # the '?'.\n    # When we reach a leaf node, the answer is the characters of the sequence\n    # of values for the variables on the left side and the variables on the\n    # right side.\n    return solution_helper(stdin, len(stdin))\n\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution())\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, get_variants(stdin)))\n\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''?(_-_/___*__):-___>__.\n   ... ''')\n    '0010'\n    >>> solution('''?(__-_+_/_____):-__>__,_____<__.\n   ... ''')\n    'false'\n    >>> solution('''?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\n   ... ''')\n    '0250341'\n    \"\"\"\n    sequence = [0] * 13\n    is_possible = True\n    for index, character in enumerate(stdin):\n        if character == '?':\n            continue\n        elif character == '>':\n            if sequence[index] > sequence[index + 1]:\n                is_possible = False\n                break\n            sequence[index] += 1\n            sequence[index + 1] += 1\n        elif character == '<':\n            if sequence[index] < sequence[index + 1]:\n                is_possible = False\n                break\n            sequence[index] -= 1\n            sequence[index + 1] -= 1\n    if is_possible:\n        return ''.join([str(number) for number in sequence])\n    return 'false'\n"
    },
    {
        "number": 4133,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    variable = stdin.split(\"?(\")[1].split(\">\")[0]\n    vars_list = [int(var) for var in variable.split(\",\")]\n    vars_list.sort()\n    new_vars = \"\"\n    for var in vars_list:\n        new_vars += str(var)\n    return new_vars if new_vars!= \"\" else \"false\""
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(x) for x in stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(m)]\n    if n * m!= k:\n        return str(0)\n    paths = [[0 for _ in range(m)] for _ in range(n)]\n    paths[0][0] = 1\n    for i in range(n):\n        for j in range(m):\n            if i + 1 < n:\n                paths[i + 1][j] += paths[i][j]\n            if j + 1 < m:\n                paths[i][j + 1] += paths[i][j]\n            if i + 1 < n and j + 1 < m:\n                if a[i][j]!= a[i + 1][j] ^ a[i][j + 1] ^ a[i + 1][j + 1]:\n                    paths[i + 1][j + 1] += paths[i][j]\n    return str(paths[-1][-1])"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    grid = [list(map(int, stdin.split())) for i in range(n)]\n    memo = {}\n\n    def count_paths(i, j):\n        if (i, j) == (n - 1, m - 1):\n            return 1\n        if (i, j) in memo:\n            return memo[(i, j)]\n        total = 0\n        for x, y in [(i, j + 1), (i + 1, j)]:\n            if 0 <= x < n and 0 <= y < m and grid[x][y] ^ k == 0:\n                total += count_paths(x, y)\n        memo[(i, j)] = total\n        return total\n\n    return str(count_paths(0, 0))\n\nassert(solution('3 3 11') == '3')\nassert(solution('3 4 2') == '5')\nassert(solution('3 4 1000000000000000000') == '0')\nassert(solution('3 4 2') == '5')\nassert(solution('3 4 1000000000000000000') == '0')\nassert(solution('3 4 2') == '5')\nassert(solution('3 4 2') == '5')"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols, xor_sum = [int(n) for n in stdin.split(\" \")]\n    grid = [list(map(int, stdin.split(\" \")[i])) for i in range(rows)]\n    total = 0\n    for row in grid:\n        total += row[0]\n    if total!= xor_sum:\n        return \"0\"\n    if total == xor_sum:\n        return str(factorial(rows) // (factorial(rows - 2) * 2))\n    return \"0\"\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(s) for s in stdin.split()]\n    grid = [[int(s) for s in stdin.split()] for _ in range(n)]\n    return count_paths(grid, k)\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    grid = [list(map(int, line.split())) for line in stdin.splitlines()]\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] += dp[i - 1][j] if grid[i - 1][j] == 1 ^ grid[i][j - 1] else 0\n    return dp[n][m]"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    rows = [[int(x) for x in stdin.split()] for _ in range(n)]\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            xor = rows[i][j]\n            if i == 0 and j == 0:\n                continue\n            if xor ^ k:\n                result += 1\n            if i > 0 and xor ^ rows[i-1][j]:\n                result += 1\n            if j > 0 and xor ^ rows[i][j-1]:\n                result += 1\n    return str(result)"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_as_lines = stdin.split('\\n')\n\n    grid_width = int(input_as_lines[0])\n    grid_height = int(input_as_lines[1])\n    grid_sum = int(input_as_lines[2])\n\n    grid = [input_as_lines[i + 3].split() for i in range(0, grid_height)]\n    matrix = [[0 for x in range(0, grid_width)] for y in range(0, grid_height)]\n\n    for i in range(0, grid_height):\n        for j in range(0, grid_width):\n            matrix[i][j] = int(grid[i][j])\n\n    # matrix = [[0 for x in range(0, grid_width)] for y in range(0, grid_height)]\n    # for i in range(0, grid_height):\n    #     for j in range(0, grid_width):\n    #         matrix[i][j] = int(grid[i][j])\n\n    # for i in range(0, grid_height):\n    #     print(matrix[i])\n\n    paths = count_paths(matrix)\n    return str(paths)\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    # Write code here\n   ...\n\n\nIn [1]: solution('3 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1')\nOut[1]: 5\n\nIn [1]: solution('3 4 1000000000000000000\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1')\nOut[1]: 0\n\nIn [1]: solution('5 3 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1')\nOut[1]: 13\n\nIn [1]: solution('5 3 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1')\nOut[1]: 26\n\n\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 57\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 70\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 85\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 102\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 116\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 129\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 142\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 160\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 166\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 176\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 192\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 208\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 224\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 242\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 256\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 272\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 288\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 296\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 304\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut[1]: 312\n\nIn [1]: solution('5 4 2\\n1 3 3 3\\n0 3 3 2\\n3 0 1 1\\n0 0 0 1\\n0 0 0 0')\nOut["
    },
    {
        "number": 4134,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_path(grid: list, i: int, j: int) -> bool:\n        # check rows\n        if i < 0 or j < 0 or j >= len(grid[0]):\n            return False\n        if grid[i][j] == 0:\n            return False\n        # check columns\n        for k in range(len(grid)):\n            if grid[k][j]!= grid[i][j]:\n                return False\n        # check diagonals\n        diag_i = i\n        diag_j = j\n        while diag_i < len(grid) and diag_j < len(grid[0]):\n            if grid[diag_i][diag_j]!= grid[i][j]:\n                return False\n            diag_i += 1\n            diag_j += 1\n        diag_i = i\n        diag_j = j\n        while diag_i >= 0 and diag_j < len(grid[0]):\n            if grid[diag_i][diag_j]!= grid[i][j]:\n                return False\n            diag_i -= 1\n            diag_j += 1\n        return True\n\n    n, m, k = [int(x) for x in stdin.split()]\n    grid = []\n    for _ in range(n):\n        grid.append([int(x) for x in stdin.split()])\n    paths = 0\n    for i in range(n):\n        for j in range(m):\n            if is_valid_path(grid, i, j):\n                paths += 1\n    return str(paths)\n\n\nassert(solution('''3 3 11\n2 1 5\n7 10 0\n12 6 4''') == '3')\nassert(solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '5')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\nassert(solution('''3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n''') == '0')\n"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[::-1]\n    for i in range(n, 1, -1):\n        if n % i == 0 and s[:i] == s[n-i:]:\n            return s[:i] + s[n-i:][::-1]\n    return s\n\nimport sys"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    s2 = ''\n    for i in range(n, 0, -1):\n        s2 += s[n:i][::-1]\n    return s2\n\n\"\"\"\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(reversed(stdin[1:]))\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if n % 2 == 0:\n        return s[n//2::-1] + s[1::]\n    else:\n        return s[n//2 + 1::-1] + s[:n//2]\n\nprint(solution('''\\\n10\nrocesfedoc\n'''))\nprint(solution('''\\\n16\nplmaetwoxesisiht\n'''))\nprint(solution('''\\\n1\nz\n'''))\nprint(solution('''\\\n1\nz\n'''))"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"rocesfedoc\")\n    'codeforces'\n    >>> solution(\"plmaetwoxesisiht\")\n    'thisisexampletwo'\n    >>> solution(\"z\")\n    'z'\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    l = len(s)\n    d = 1\n    res = s[::-1]\n    while d < l:\n        s = s[::-1]\n        for i in range(d, l + 1):\n            res += s[i - d:i]\n        d += 1\n        res = res[::-1]\n    return res"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\nIn the second example, the first reverse operation is not necessary, and hence the output is the same as the input: \"plmaetwoxesisiht\".\n\"\"\"\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin.strip()\n\n    res = \"\"\n    for i in range(1, n + 1):\n        for j in range(n, i, -1):\n            if t[i:j] == t[i:j][::-1]:\n                res = t[i:j]\n                break\n\n    return res"
    },
    {
        "number": 4135,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe tests for this problem can be run through the terminal as follows:\n$ python3 solution.py < solution.py > solution_output.txt\n\"\"\"\n\nt = input()\nn = int(input())\ns = input()\nfor i in range(n,0,-1):\n    if s.endswith(s[1:i][::-1]):\n        print(s[:i][::-1])\n        break\nelse:\n    print(s)\n"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(n) for n in stdin.split(\" \")]\n    return str(x + y)\n\nassert(solution(\"5 14\") == \"19\")\nassert(solution(\"381 492\") == \"873\")\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n\nassert(solution('5 14') == '19')\nassert(solution('381 492') == '873')\nprint(solution(''))\n\n'''\n"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, (a, b) = stdin.split()\n    a, b = int(a), int(b)\n    return str(a + b)\n\nassert(solution('1 2') == '3')\nassert(solution('5 14') == '19')\nassert(solution('381 492') == '873')\nassert(solution('1 1') == '2')\nassert(solution('100 0') == '100')\nassert(solution('0 0') == '0')\nassert(solution('0 0') == '0')\nassert(solution('99 999') == '998')\n\"\"\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    return str(a + b)"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(i) for i in stdin.split(\" \"))\n    return str(a + b)\n    \n"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(a + b)\n\nassert(solution(\"0 1\") == \"1\")\nassert(solution(\"1 1\") == \"2\")\nassert(solution(\"1 2\") == \"3\")\nassert(solution(\"2 1\") == \"3\")\nassert(solution(\"1 2 3\") == \"6\")\nassert(solution(\"1 2 3 4\") == \"10\")\nassert(solution(\"10 11 12 13\") == \"23\")\nassert(solution(\"10 11\") == \"11\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"3\") == \"3\")\nassert(solution(\"5\") == \"5\")\nassert(solution(\"99\") == \"99\")\nassert(solution(\"1234\") == \"45\")\nassert(solution(\"0\") == \"0\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"0 11 12 13\") == \"23\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"1 2 3\") == \"6\")\nassert(solution(\"1 2 3 4\") == \"10\")\nassert(solution(\"10 11 12 13\") == \"23\")\nassert(solution(\"10 11\") == \"11\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"3\") == \"3\")\nassert(solution(\"5\") == \"5\")\nassert(solution(\"99\") == \"99\")\nassert(solution(\"1234\") == \"45\")\nassert(solution(\"0\") == \"0\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"0 11 12 13\") == \"23\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"1 2 3\") == \"6\")\nassert(solution(\"1 2 3 4\") == \"10\")\nassert(solution(\"10 11 12 13\") == \"23\")\nassert(solution(\"10 11\") == \"11\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"3\") == \"3\")\nassert(solution(\"5\") == \"5\")\nassert(solution(\"99\") == \"99\")\nassert(solution(\"1234\") == \"45\")\nassert(solution(\"0\") == \"0\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"0 11 12 13\") == \"23\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"1 2 3\") == \"6\")\nassert(solution(\"1 2 3 4\") == \"10\")\nassert(solution(\"10 11 12 13\") == \"23\")\nassert(solution(\"10 11\") == \"11\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"3\") == \"3\")\nassert(solution(\"5\") == \"5\")\nassert(solution(\"99\") == \"99\")\nassert(solution(\"1234\") == \"45\")\nassert(solution(\"0\") == \"0\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"0 11 12 13\") == \"23\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"1 2 3\") == \"6\")\nassert(solution(\"1 2 3 4\") == \"10\")\nassert(solution(\"10 11 12 13\") == \"23\")\nassert(solution(\"10 11\") == \"11\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"3\") == \"3\")\nassert(solution(\"5\") == \"5\")\nassert(solution(\"99\") == \"99\")\nassert(solution(\"1234\") == \"45\")\nassert(solution(\"0\") == \"0\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"0 11 12 13\") == \"23\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"1 2 3\") == \"6\")\nassert(solution(\"1 2 3 4\") == \"10\")\nassert(solution(\"10 11 12 13\") == \"23\")\nassert(solution(\"10 11\") == \"11\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"3\") == \"3\")\nassert(solution(\"5\") == \"5\")\nassert(solution(\"99\") == \"99\")\nassert(solution(\"1234\") == \"45\")\nassert(solution(\"0\") == \"0\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"0 11 12 13\") == \"23\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"1 2 3\") == \"6\")\nassert(solution(\"1 2 3 4\") == \"10\")\nassert(solution(\"10 11 12 13\") == \"23\")\nassert(solution(\"10 11\") == \"11\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"3\") == \"3\")\nassert(solution(\"5\") == \"5\")\nassert(solution(\"99\") == \"99\")\nassert(solution(\"1234\") == \"45\")\nassert(solution(\"0\") == \"0\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"0 11 12 13\") == \"23\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"1 2 3\") == \"6\")\nassert(solution(\"1 2 3 4\") == \"10\")\nassert(solution(\"10 11 12 13\") == \"23\")\nassert(solution(\"10 11\") == \"11\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"3\") == \"3\")\nassert(solution(\"5\") == \"5\")\nassert(solution(\"99\") == \"99\")\nassert(solution(\"1234\") == \"45\")\nassert(solution(\"0\") == \"0\")\nassert(solution(\"1\") == \"1\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"0 11 12 13\") == \"23\")\nassert(solution(\"101\") == \"102\")\nassert(solution(\"11\") == \"11\")\nassert(solution(\"\") == \"0\")\nassert(solution(\"1 2 3\") == \"6\")\nassert(solution(\"1"
    },
    {
        "number": 4136,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) + int(b))\n\nassert(solution('''5 14''') == '19')\nassert(solution('''381 492''') == '873')\nassert(solution('''4 1''') == '4')\nassert(solution('''1 2''') == '3')\nassert(solution('''5 8''') == '13')\nassert(solution('''5 8 5''') == '15')\nassert(solution('''999999999999999999 999''') == '999999999999999999 999')\nassert(solution('''14 8''') == '18')\nassert(solution('''1 1''') == '2')\nassert(solution('''1000 500''') == '500')\nassert(solution('''11 01''') == '00')\nassert(solution('''10 1000000000000000''') == '100000000000000000')\nassert(solution('''12 1000000000000000''') == '20000000000000000')\nassert(solution('''40000000000000000000 00''') == '40000000000000000000')\nassert(solution('''10000000000000000000''') == '0')\nassert(solution('''1000000000000000000''') == '0')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999999999999 999''') == '99999999999999999 999')\nassert(solution('''99999999"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the Brainfuck program which, when executed, will print the result of evaluating this expression\"\"\"\n    return ''"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\"\"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\nimport sys\nfrom functools import lru_cache\n\nsys.setrecursionlimit(10000)\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\n\"\"\"\n\nimport sys\nimport os\nfrom contextlib import contextmanager\nimport time\n\n__author__ = \"William Lyles\"\n__copyright__ = \"William Lyles\"\n__license__ = \"GPL\"\n__version__ = \"1.0.0\"\n__maintainer__ = \"William Lyles\"\n__email__ = \"Will.Lyles@colorado.edu\"\n__status__ = \"Development\"\n\n\n@contextmanager\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution(\"2+3\") == \"++>\\n+++>\\n<[<+>-]<\"\nsolution(\"9-7\") == \"+++++++++>\\n+++++++>\\n<[<->-]<\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\"\"\"\n\nfrom collections import deque\nfrom queue import Queue\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return stdout.strip()\n'''\n"
    },
    {
        "number": 4137,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n\"\"\"\n\nimport sys\nfrom io import StringIO\n\n\nclass Brainfuck:\n    def __init__(self, exp: str):\n        self.exp = exp\n        self.raw_stack = []\n        self.stack = []\n        self.raw_pointer = 0\n        self.pointer = 0\n\n    def step(self, command: str):\n        if command == '<':\n            self.pointer += 1\n            if self.pointer >= len(self.stack):\n                self.stack.append(0)\n        elif command == '>':\n            self.pointer -= 1\n            if self.pointer < 0:\n                self.stack.append(0)\n        elif command == '-':\n            self.stack[self.pointer] -= 1\n            if self.stack[self.pointer] < 0:\n                self.stack[self.pointer] = 255\n        elif command == '+':\n            self.stack[self.pointer] += 1\n            if self.stack[self.pointer] > 255:\n                self.stack[self.pointer] = 0\n        elif command == '[':\n            if self.stack[self.pointer] == 0:\n                count = 1\n                while count > 0:\n                    self.pointer += 1\n                    if self.pointer >= len(self.stack):\n                        self.stack.append(0)\n                    if self.stack[self.pointer] == 0:\n                        count -= 1\n        elif command == ']':\n            if self.stack[self.pointer]!= 0:\n                count = 1\n                while count > 0:\n                    self.pointer -= 1\n                    if self.pointer < 0:\n                        self.stack.append(0)\n                    if self.stack[self.pointer]!= 0:\n                        count -= 1\n        elif command == '.':\n            sys.stdout.write(chr(self.stack[self.pointer]))\n        elif command == ',':\n            self.raw_stack.append(self.stack[self.pointer])\n        elif command == '[' or command == ']':\n            self.raw_pointer += 1\n            if self.raw_pointer >= len(self.raw_stack):\n                self.raw_stack.append(0)\n            self.raw_pointer -= 1\n        else:\n            pass\n\n    def run(self):\n        while self.raw_pointer < len(self.raw_stack):\n            self.step(self.raw_stack[self.raw_pointer])\n            self.raw_pointer += 1\n        print(self.stack)\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = []\n    for i in range(1, n+1):\n        a.append(str(i))\n    a = \"\".join(a)\n    a = a.split(\"$\")\n    k = int(stdin.readline().strip())\n    s = \"\"\n    for i in range(k):\n        s += a[i]\n    return s\n\nimport sys\nprint(solution(sys.stdin))\n"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nIn the second example, the answer is $8$.\n\"\"\"\n\nfrom itertools import count\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"No answer\""
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    k = [int(x) for x in stdin.readline().strip()]\n    k.sort()\n    k.reverse()\n    for i in range(q):\n        x = int(stdin.readline().strip())\n        print(k[x-1])\n    return \"\""
    },
    {
        "number": 4138,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(n // i == 1 for i in range(1, n + 1)))"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of Shichi-Go-San numbers that exist in a range between 1 and N (inclusive).\"\"\"\n    N = int(stdin)\n    ans = 0\n    for num in range(1, N + 1):\n        if '7' in str(num) or '5' in str(num) or '3' in str(num):\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(1 for i in range(1, n) if i % 1000003 == 0))"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(ans)\n"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(x for x in range(1, int(stdin)) if len(set(str(x))) == 3 and len(set(str(x)[1:])) == 2 and len(set(str(x)[2:])) == 2)))"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    n = int(stdin)\n    for i in range(1, n+1):\n        str_i = str(i)\n        if '7' in str_i:\n            if '5' in str_i:\n                if '3' in str_i:\n                    result += 1\n    return str(result)"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum([1 for x in range(1, n + 1) if len(set(str(x))) == 3 and all([x % 10!= y % 10 for x, y in zip(str(x), str(x + 1))])]))"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cnt = 0\n    for i in range(1, N + 1):\n        if '7' not in str(i) and '5' not in str(i) and '3' not in str(i):\n            cnt += 1\n\n    return str(cnt)"
    },
    {
        "number": 4139,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(7 in int(num) for num in stdin.split()))"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    cnt = 0\n    for i in range(n):\n        if s[i] == '0':\n            cnt += 1\n    return cnt\n\nassert(solution(\"0\") == 1)\nassert(solution(\"001\") == 2)\nassert(solution(\"0101\") == 3)\nassert(solution(\"0011\") == 2)\nassert(solution
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return stdin\n"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == s[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nS = stdin.strip()\n\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    return result"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    return result\n"
    },
    {
        "number": 4140,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(' ')\n    n = int(n)\n    s = s[:n]\n\n    black = 0\n    white = 0\n\n    for i, c in enumerate(s):\n        if c == '0':\n            black += 1\n        else:\n            white += 1\n\n        if black == white:\n            return str(i + 1)"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n\n    # Write your code here\n    def is_divisible(n):\n        return n % 3 == 0 or n % 5 == 0\n\n    for number in numbers:\n        if not is_divisible(number):\n            print('DENIED')\n            return\n\n    print('APPROVED')"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split(' ')))\n    B = []\n    for a in A:\n        if a % 2 == 0:\n            B.append(a)\n    if len(B) == 0:\n        print(\"DENIED\")\n    else:\n        print(\"APPROVED\")"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n\n    evens = []\n    for i in A:\n        if i % 2 == 0:\n            evens.append(i)\n\n    if len(evens) == 0:\n        print(\"DENIED\")\n    else:\n        for i in evens:\n            if i % 3 == 0 or i % 5 == 0:\n                print(\"APPROVED\")\n                break\n        else:\n            print(\"DENIED\")"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ns = [int(x) for x in stdin.readline().split()]\n    \n    ap = all(x % 3 == 0 or x % 5 == 0 for x in ns)\n    \n    if ap:\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split(' ')))\n    even = [a for a in A if a % 2 == 0]\n    if all(a % 3 == 0 or a % 5 == 0 for a in even):\n        return 'APPROVED'\n    else:\n        return 'DENIED'"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(stdin.readline()) for _ in range(N)]\n    # even_numbers_divisible_by_3_or_5 = [n for n in A if n % 2 == 0 and n % 3 == 0]\n    even_numbers_divisible_by_3_or_5 = [n for n in A if n % 3 == 0 or n % 5 == 0]\n    if len(even_numbers_divisible_by_3_or_5) == len(A):\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    evens = [a for a in A if a % 2 == 0]\n    print('APPROVED' if all(map(lambda a: a % 3 == 0 or a % 5 == 0, evens)) else 'DENIED')"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def even_or_not(n: int) -> bool:\n        return n % 2 == 0\n\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().split()))\n    result = \"DENIED\"\n    for a in A:\n        if even_or_not(a):\n            if (a % 3 == 0 or a % 5 == 0):\n                result = \"APPROVED\"\n    return result"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().strip()\n    n = int(line)\n    \n    line = stdin.readline().strip()\n    numbers = [int(x) for x in line.split()]\n    \n    for num in numbers:\n        if num % 2 == 0 and num % 3!= 0 or num % 5!= 0:\n            print(\"DENIED\")\n            break\n    else:\n        print(\"APPROVED\")"
    },
    {
        "number": 4141,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(x) for x in stdin.split(\" \")]\n    def even_divisible(x: int) -> bool:\n        return x % 2 == 0 or x % 3 == 0 or x % 5 == 0\n\n    for x in A:\n        if not even_divisible(x):\n            return \"DENIED\"\n    return \"APPROVED\""
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    if all(i in ('L', 'R', 'U', 'D') for i in a):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin.strip()\n    return 'Yes' if is_playable(s) else 'No'\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.replace(' ', '').isdigit() and len(stdin) == 1 else 'No'"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_evenly_playable(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # The dance\n    for instruction in stdin:\n        # Skip whitespaces\n        if instruction.isspace():\n            continue\n\n        # Replace all the letters with their corresponding steps\n        for letter in instruction:\n            if letter == 'L':\n                step = 1\n            elif letter == 'R':\n                step = -1\n            elif letter == 'U':\n                step = -1j\n            elif letter == 'D':\n                step = 1j\n            else:\n                continue\n\n            # Move the whole thing\n            n = int(stdin[0])\n            for _ in range(n):\n                stdin = stdin[1:] + stdin[:1]\n\n        # Check if the dance is valid\n        if ''.join(stdin) == instruction:\n            return 'Yes'\n    return 'No'\n\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sorted(stdin) == list(stdin) else \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4142,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin.strip()\n    return \"Yes\" if len(set(c)) == 4 and \"\".join(c).count(\"LR\") % 2 == 0 and \"\".join(c).count(\"UD\") % 2 == 0 else \"No\""
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    N = int(data[0])\n    A = int(data[1])\n    B = int(data[2])\n    C = int(data[3])\n    D = int(data[4])\n    E = int(data[5])\n    return ''\n\nprint(solution(input()))\n\n'''\n\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    A, B, C, D, E = map(int, stdin.split())\n\n    max_people = max(A, B, C, D, E)\n\n    max_people_per_trip = max(A, B, C, D, E)\n\n    ans = max_people_per_trip * N\n\n    if max_people == 1:\n        return str(ans)\n\n    if max_people_per_trip == 1:\n        return str(N * max_people)\n\n    return str(ans + (N - 1) * (max_people - 1))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A, B, C, D, E = list(map(int, stdin.split()))\n\n    num = 0\n    while True:\n        num += 1\n        if num % A == 0:\n            num += 1\n            continue\n        if num % B == 0:\n            num += 1\n            continue\n        if num % C == 0:\n            num += 1\n            continue\n        if num % D == 0:\n            num += 1\n            continue\n        if num % E == 0:\n            num += 1\n            continue\n        if num % (N - 1) == 0:\n            num += 1\n            continue\n\n        break\n    return str(num - 1)"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = [int(x) for x in stdin.split(' ')]\n    # A is the max number of people\n    # N is the number of people\n    # C is the max number of people\n    # B is the max number of people\n    # D is the max number of people\n    # E is the max number of people\n    time = (A * (N - 1) + N) + (B * N) + (C * (N - 1) + N) + (D * N) + (E * (N - 1) + N)\n    return str(time)\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a, b, c, d, e, f = stdin.readline().strip().split(' ')\n    a, b, c, d, e, f = int(a), int(b), int(c), int(d), int(e), int(f)\n    # print(n, a, b, c, d, e, f)\n    t = 0\n    while n > 0:\n        if n == 1:\n            t += 1\n        elif n == 2:\n            t += 2\n        elif n == 3:\n            t += 1\n            t += 2\n        elif n == 4:\n            t += 1\n            t += 3\n        elif n == 5:\n            t += 1\n            t += 3\n        elif n == 6:\n            t += 1\n            t += 4\n        elif n == 7:\n            t += 2\n            t += 4\n        elif n == 8:\n            t += 1\n            t += 5\n        elif n == 9:\n            t += 1\n            t += 5\n        elif n == 10:\n            t += 1\n            t += 5\n        elif n == 11:\n            t += 1\n            t += 5\n        elif n == 12:\n            t += 1\n            t += 5\n        elif n == 13:\n            t += 1\n            t += 5\n        elif n == 14:\n            t += 1\n            t += 5\n        elif n == 15:\n            t += 1\n            t += 5\n        elif n == 16:\n            t += 1\n            t += 5\n        n -= 1\n    return str(t)"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c, d, e, f = map(int, stdin.split())\n    m = min(a, b, c, d, e)\n    return str(m * f)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4143,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[0])\n    B = int(stdin[1])\n    C = int(stdin[2])\n    D = int(stdin[3])\n    E = int(stdin[4])\n    return \"????\"\n\nprint(solution(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    return str(N * (N + 1) // 2)"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    count = 0\n    for i in range(10):\n        for j in range(10):\n            if i == j or i == 9 - j:\n                continue\n            if i == 0 or j == 0 or i == 9 or j == 9:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 9\n    b = 0\n    for i in range(1, n):\n        if i % 2 == 1:\n            a = (a * 10 + 9) % 10 ** 9\n        else:\n            b = (b * 10 + 9) % 10 ** 9\n    if b == 9:\n        return str(b)\n    else:\n        return str(a)"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('0')\n    1\n    >>> solution('1')\n    3\n    >>> solution('2')\n    4\n    >>> solution('3')\n    2\n    >>> solution('9')\n    9\n    '''\n    def validate(n: int) -> bool:\n        if n == 0:\n            return True\n        if n == 9:\n            return True\n        return False\n    \n    def memoize(func):\n        memo = {}\n        def wrapper(*args):\n            if args not in memo:\n                memo[args] = func(*args)\n            return memo[args]\n        return wrapper\n    \n    @memoize\n    def dp(n: int, k: int, count: int) -> int:\n        if count == 2:\n            return 0\n        if n == 0:\n            return 0\n        if n == 9:\n            return 9\n        \n        return dp(n - 1, 1, count + 1) + dp(n - 2, 1, count + 1) + dp(n - 3, 1, count + 1) + dp(n - 4, 1, count + 1) + dp(n - 5, 1, count + 1) + dp(n - 6, 1, count + 1) + dp(n - 7, 1, count + 1) + dp(n - 8, 1, count + 1) + dp(n - 9, 1, count + 1)\n    \n    n = int(stdin.strip())\n    \n    # DP\n    return dp(n, 1, 1)"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    arr = [int(c) for c in lines[1]]\n    max = 0\n    for i in range(N):\n        if arr[i] == 0:\n            if i == 0:\n                max = i\n            else:\n                max = i - 1\n                break\n        elif arr[i] == 9:\n            if i == N - 1:\n                max = i\n            else:\n                max = i + 1\n                break\n    return str(max)\n"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def helper(arr: List[int], index: int):\n        if index == n:\n            return True\n        if arr[index] == 0:\n            return helper(arr, index + 1)\n        if arr[index] == 9:\n            return helper(arr, index + 1)\n\n    arr = [0] * n\n    arr[0] = 1\n    arr[n - 1] = 9\n    return str(helper(arr, 0))"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline()\n    return str(int(9*10**(len(N)-1)) % (10**9+7))\n\nassert(solution('2') == '2')\nassert(solution('10') == '10')\nassert(solution('100') == '100')\nassert(solution('1000') == '1000')\nassert(solution('10000') == '10000')\nassert(solution('100000') == '100000')\nassert(solution('10000000') == '10000000')\n"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(pow(10, n, 10**9 + 7))"
    },
    {
        "number": 4144,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for num in range(int(stdin.strip()) + 1):\n        if is_prime(num):\n            result = num\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    max_x = int(stdin)\n    curr = 2\n    while curr < max_x:\n        if is_prime(curr):\n            max_x = curr\n        curr += 1\n    return str(max_x)\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    while num > 0:\n        if is_prime(num):\n            return str(num)\n        num -= 1\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(next_prime(int(stdin)))\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(x-1,0,-1):\n        if prime(i) is True:\n            return i\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number < 2:\n        return '2'\n    i = 2\n    while True:\n        if i >= number:\n            break\n        if number % i == 0:\n            number = number // i\n            number -= 1\n        else:\n            i += 1\n    return str(number)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X <= 2:\n        return str(2)\n    def is_prime(num: int) -> bool:\n        if num == 1:\n            return False\n        elif num % 2 == 0:\n            return False\n        elif num < 10:\n            return True\n        else:\n            for i in range(3, num, 2):\n                if num % i == 0:\n                    return False\n        return True\n    while True:\n        if is_prime(X):\n            return str(X)\n        X += 1"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.strip()\n    print(max(xrange(int(x) + 1, 2, -1)))\n    return ''\n"
    },
    {
        "number": 4145,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    print(prime(x))\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    v = [int(x) for x in stdin[1].split()]\n    if n < 2:\n        return '-1'\n    if n % 2 == 0:\n        return '-1'\n    # get the largest element\n    tmp = v[0]\n    for x in v:\n        if x > tmp:\n            tmp = x\n    # replace the largest element with the next element\n    for i in range(len(v)):\n        if v[i]!= tmp:\n            v[i] = v[i+2]\n            break\n    # check if the sequence is /\\/\\/\\/\n    for i in range(len(v)-1):\n        if v[i+1]!= v[i]:\n            return str(i+2)\n    return '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        v = [int(x) for x in stdin.split()]\n        for i in range(0, len(v), 2):\n            if v[i] == v[i + 1]:\n                return i // 2\n    else:\n        v = [int(x) for x in stdin.split()]\n        count = 0\n        for i in range(len(v)):\n            if v[i]!= v[i + 1]:\n                count += 1\n            if count > 2:\n                return i // 2\n        return count // 2"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split()))\n\n    # Every two adjacent elements differ by one.\n    for i in range(1, n-1):\n        if v[i]!= v[i+1]:\n            v[i] += 1\n            v[i+1] += 1\n\n    count = 0\n    for i in range(1, n-1):\n        if v[i] > v[i+1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    v = [int(x) for x in stdin.readline().split()]\n    result = 0\n    for i in range(n-1):\n        if v[i+1] == v[i] + 1:\n            result += 1\n    print(result)"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    nums = [int(x) for x in stdin.split('\\n')[1].split()]\n    nums_len = len(nums)\n    for i in range(nums_len):\n        if i + 1 < nums_len - 1:\n            if nums[i] == nums[i + 1]:\n                return i\n    return 0"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n1 3 2')\n    1\n    >>> solution('4\\n3 1 3 2')\n    1\n    >>> solution('4\\n3 1 2 3')\n    0\n    \"\"\"\n    n = int(stdin.readline().strip())\n    v = [int(stdin.readline().strip()) for _ in range(n)]\n\n    lst = []\n\n    for i in range(1, n, 2):\n        for j in range(1, n-2, 2):\n            if v[i]!= v[i+2]:\n                lst.append(v[i+2])\n                v[i+2] = v[i]\n                break\n\n    print(len(lst))"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip().split(\" \")\n    n = int(n[0])\n    v = stdin.strip().split(\" \")\n    v = [int(i) for i in v]\n    \n    res = 0\n    for i in range(len(v)-1, -1, -1):\n        if v[i]!= v[i+1]:\n            res += 1\n            v[i] += 1\n    \n    return str(res)"
    },
    {
        "number": 4146,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    v = [int(x) for x in stdin.readline().split()]\n    i = 0\n    while True:\n        v[i] += 1\n        if v[i] == v[i + 1]:\n            i += 1\n        else:\n            break\n    if n % 2 == 0:\n        return '{}'.format(n // 2)\n    else:\n        return '{}'.format(n // 2 + 1)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(x) for x in stdin.split()]\n    # Initialize two lists to store the lengths of the three bamboos\n    l_list = [0] * (N + 1)\n    # We cannot make the magic of the length 0, because we cannot have bamboos of length 0\n    l_list[1] = A\n    l_list[2] = B\n    l_list[3] = C\n    # For each magic, we will only consider the case that the new bamboos are of lengths < l_list[1], < l_list[2], < l_list[3]\n    # We can extend the magic to the end of the list\n    l_list[4] = l_list[1] + l_list[2]\n    # We can shorten the magic to the start of the list\n    l_list[5] = l_list[2] + l_list[3]\n    # We can compose the magic to the end of the list\n    l_list[6] = l_list[1] + l_list[3]\n    # We can compose the magic to the start of the list\n    l_list[7] = l_list[2] + l_list[3]\n    # The magic of the length 0 is always the length of the longest bamboo\n    l_list[0] = l_list[l_list.index(max(l_list))]\n    # The magic of the length 1 is always the length of the shortest bamboo\n    l_list[1] = l_list[l_list.index(min(l_list))]\n    # The magic of the length 2 is always the length of the middle bamboo\n    l_list[2] = (l_list[l_list.index(min(l_list))] + l_list[l_list.index(max(l_list))]) // 2\n    # The magic of the length 3 is always the length of the sum of the middle two bamboos\n    l_list[3] = (l_list[l_list.index(min(l_list))] + l_list[l_list.index(max(l_list))]) // 2\n    return str(l_list[l_list.index(max(l_list))] + l_list[l_list.index(max(l_list))])"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split(\" \")]\n    lengths = [int(n) for n in stdin.split(\" \")[1:]]\n    result = 0\n    for i in range(1, a+1):\n        for j in range(2, b+1):\n            if lengths[i-1] > a:\n                continue\n            for k in range(3, c+1):\n                if lengths[i-1]+k > b:\n                    continue\n                for l in range(4, b+1):\n                    if lengths[i-1]+k+l > c:\n                        continue\n                    if lengths[i-1] + k + l == b:\n                        result += 10\n                    else:\n                        result += 5\n    return str(result)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split(\" \"))\n\n    # We have a bamboo with length A.\n    # We will add B magics to it, which will increase its length to B.\n    # Then we will add another magics to it, which will increase its length to C.\n    # The three bamboos will have lengths A, B, C.\n    # We can use composition magic on the bamboos to obtain B, C, C, C, C, C, C, C, C, C, C.\n    # Note that the bamboos will have the same length, because their lengths are all the same.\n    # We don't need to add any magics to the bamboos that are of length 1.\n    # The amount of MP needed is the length of the bamboos times the number of magics.\n    mp_needed = (B + C) * 10 + N * 4 + 2 * C * (N - 1) + N * 2\n\n    return str(mp_needed)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    bamboos = [0] * (N + 1)\n    for _ in range(N):\n        length = int(stdin.readline())\n        bamboos[length] += 1\n    bamboo = max(bamboos)\n    while bamboo > 1:\n        bamboo -= 1\n        for _ in range(bamboos[bamboo]):\n            if bamboo < A:\n                break\n            bamboo += 1\n    bamboo -= 1\n    if bamboo < B:\n        bamboo += 1\n    bamboo += A\n    while bamboo > 1:\n        bamboo -= 1\n        for _ in range(bamboos[bamboo]):\n            if bamboo < C:\n                break\n            bamboo += 1\n    bamboo -= 1\n    if bamboo < B:\n        bamboo += 1\n    bamboo += C\n    return str(bamboo)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.strip().split())\n\n    # Write your code here\n    return \"\""
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(x) for x in stdin.split()]\n    l = [int(x) for x in stdin.split()]\n    l.sort(reverse=True)\n    l_target = A\n    l_temp = []\n    for i in range(N):\n        l_temp.append(l[i])\n        while l_temp[-1] >= l_target:\n            l_temp[-1] -= l_target\n            mp = min(10, l_temp[-1])\n            mp += mp\n            l_temp.append(l[i])\n            mp += mp\n            if sum(l_temp) >= l_target:\n                break\n    return str(mp)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(x) for x in stdin.split(\" \")]\n    lengths = [int(x) for x in stdin.split(\" \")[3:]]\n    curr_length = max(lengths)\n    for length in lengths:\n        if length == curr_length:\n            curr_length -= 1\n    print(N * curr_length + 10)"
    },
    {
        "number": 4147,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    mp: int = 0\n    l1: int = int(stdin.split('\\n')[0].split()[-1])\n    l2: int = int(stdin.split('\\n')[1].split()[-1])\n    l3: int = int(stdin.split('\\n')[2].split()[-1])\n    b1: int = l1\n    b2: int = l2\n    b3: int = l3\n    m: int = b3 - b2\n    while m > 0:\n        mp += 10\n        if m >= 10:\n            mp += 1\n            b2 += 1\n            m -= 10\n        if m >= 5:\n            mp += 10\n            b3 += 1\n            m -= 5\n        if m >= 3:\n            mp += 1\n            b1 += 1\n            m -= 3\n    return str(mp)"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return ''.join(sorted(stdin))"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    s: str = stdin[1:-1]\n    \n    alphabet: str = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    new_s: str = \"\"\n    for c in s:\n        new_s += alphabet[(alphabet.index(c) + n) % len(alphabet)]\n    print(new_s)\n\nsolution(input())\n"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = stdin\n    s = s.upper()\n    result = \"\"\n    for i in range(len(s)):\n        a = ord(s[i])\n        if a + N > 90:\n            result += chr(a + N - 26)\n        else:\n            result += chr(a + N)\n    return result"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Shift the character in S by N in alphabetical order.\n    \"\"\"\n    S = stdin.strip()\n    N = int(stdin)\n    # Create a list of 26 letters, one for each letter.\n    letters = list(string.ascii_uppercase)\n    # Enumerate each letter in S, shift its index by N, and add the shifted letter to the list.\n    # Return the list, as a string.\n    return \"\".join(letters[(i + N) % 26] for i in range(26))"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4148,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    s = list(s)\n    s.sort()\n    s = ''.join(s)\n    return s\n"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    primes = get_primes(n)\n    j = 0\n    for i in range(n):\n        if nums[i] in primes:\n            nums[i] = primes[j]\n            j += 1\n        else:\n            d = get_divisor(nums[i])\n            if d in primes:\n                nums[i] = primes[d]\n    return''.join(map(str, nums))\n"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(stdin) for _ in range(n)]\n    b = [int(stdin) for _ in range(2*n)]\n    a.sort()\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = a[i]\n        d = 2\n        while d * d <= a[i]:\n            if a[i] % d == 0:\n                break\n            d += 1\n        else:\n            d = a[i]\n            while d > 0:\n                if not b[d]:\n                    ans[i] = d\n                    break\n                d = b[d]\n    return''.join(map(str, ans))\n\nassert(solution('''3\n5 2 3 2 4\n''')) == '3 4 2'\nassert(solution('''1\n2750131 199999\n''')) == '199999'\nassert(solution('''1\n3 6\n''')) == '6'\nprint(solution('''4\n3 5 2 3 2 4\n'''))\n"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    n = len(a)\n    j = 0\n    for i in range(n):\n        if a[i] in primes:\n            continue\n        if a[i] > primes[j]:\n            j += 1\n        a[i], b[i] = b[i], a[i]\n    return''.join(str(x) for x in a)"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [int(x) for x in stdin.split()]\n    for i in range(len(b) // 2):\n        b[2 * i], b[2 * i + 1] = b[2 * i + 1], b[2 * i]\n    return \" \".join(map(str, b))\n"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(stdin.readline()) for _ in range(n)]\n    a = sorted(a)\n    if len(a) == 1:\n        return str(a[0])\n    i = 1\n    l = []\n    while i < len(a):\n        if a[i] % 2!= 0:\n            if (a[i] / 2) in a:\n                l.append(a[i] / 2)\n            if a[i] % 3 == 1:\n                l.append(a[i] * 2)\n        i += 1\n    l = sorted(l)\n    return''.join(map(str, l))\n\n\nprint(solution(None))\n"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_elements = int(stdin.readline())\n    if number_of_elements < 2 or number_of_elements > 2000:\n        raise ValueError(\"Number of elements must be 2 or greater and less than 2000\")\n\n    # read b\n    b = list(map(int, stdin.readline().split()))\n\n    # primes\n    primes = get_primes_upto(max(b))\n    primes = [p for p in primes if p not in b]\n\n    if len(primes) < len(b):\n        raise ValueError(\"Not enough primes\")\n\n    # create an array which starts with b\n    array = [b]\n\n    # map from primes to their index\n    primes_to_index = {}\n    for index, value in enumerate(b):\n        primes_to_index[value] = index\n\n    for index in range(number_of_elements):\n        # if the current element is a prime number, we can just add it\n        if b[index] in primes:\n            array.append(b[index])\n        else:\n            # get the smallest index of the prime numbers which are not in array\n            smallest_index = index\n            for p in primes:\n                if p not in array:\n                    if p > b[index]:\n                        break\n                    smallest_index = min(smallest_index, primes_to_index[p])\n\n            # swap smallest and current element\n            array[index], array[smallest_index] = array[smallest_index], array[index]\n\n    return \" \".join(map(str, array))\n"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = [int(x) for x in stdin.readline().strip().split()]\n    b = b[:2*n]\n    b = sorted(b)\n    for i in range(2*n):\n        if is_prime(b[i]):\n            print(b[i], end=' ')\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = stdin.strip().split(' ')\n    a = b\n    p = []\n    for i in range(2, n*2+1):\n        p.append(2)\n    for i in range(2, n*2+1):\n        p[i-2] = int(next(x for x in p if x > i and i % x == 0))\n    a = [1]\n    for i in range(2, n+1):\n        a.append(p[i-2])\n    res = ''\n    for i in range(n):\n        res += str(a[i]) +''\n    return res.strip()"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4149,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    b = [int(x) for x in stdin.strip().split(' ')]\n    perm = list(range(2, max(primes) * 2))\n    for p in primes:\n        perm.remove(p)\n    for x in perm:\n        if x % 2 == 0:\n            perm.remove(x)\n    b = b + perm\n    a = [x for x in b]\n    a.sort()\n    for x in range(2, len(a)):\n        if a[x] % 2 == 0:\n            a[x] = a[x] // 2\n    return''.join([str(x) for x in a])"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.reverse()\n    m = max(a)\n    l = len(a)\n    t = [0] * (l + 1)\n    res = [0] * l\n    j = 0\n    for i in range(1, l + 1):\n        if t[i] == 0:\n            if a[j] == m:\n                res[j] = 1\n                j += 1\n                t[i] = 1\n            else:\n                t[i] = 1\n    return \"\".join(str(x) for x in res)"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\nfrom sys import stdin, stdout"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(int(x) for x in stdin.split())\n    a = tuple(int(x) for x in stdin.split())\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '22'\n    if k > n * 2:\n        return '22'\n\n    def dfs(k, l, r, t):\n        if k == 0:\n            return '22'\n        if t == 1:\n            return '11'\n        if l == r:\n            return '01'\n        mid = (l + r) // 2\n        if a[mid] > k:\n            return dfs(k, l, mid, 1)\n        elif a[mid] < k:\n            return dfs(k, mid + 1, r, 2)\n        else:\n            return dfs(k, l, mid, 1) + dfs(k, mid + 1, r, 2)\n\n    res = dfs(k, 0, len(a) - 1, 1)\n    return res\n\n\n>>> solution(input)\n'22112'"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, k, students):\n        result = [0] * n\n        taken = set()\n\n        def get_avg(n: int) -> int:\n            return sum(student[n] for student in students) // n\n\n        first = True\n        while taken:\n            avg = get_avg(len(taken))\n            if first:\n                candidates = [i for i in range(n) if students[i][len(taken)] >= avg]\n            else:\n                candidates = [i for i in range(n) if students[i][len(taken) - 1] < avg]\n            if len(candidates) < k:\n                break\n            first = False\n            candidates.sort(key=lambda i: students[i][len(taken) - 1], reverse=True)\n            for i in candidates[:k]:\n                if not result[i]:\n                    taken.add(i)\n                    result[i] = 1\n                    break\n        return ''.join(str(r) for r in result)\n\n    n, k = map(int, stdin.split())\n    students = [tuple(map(int, stdin.split())) for _ in range(n)]\n    return solve(n, k, students)\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    row = []\n    while len(row) < n:\n        while row and row[-1] < k:\n            row.pop()\n        while row and row[0] > k:\n            row.pop(0)\n        if row:\n            row.pop()\n            row.append(a[len(row)])\n        else:\n            row.append(a[len(row)])\n    return ''.join(map(str, row))"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    ans = []\n\n    for i in range(n):\n        skills[i] = (skills[i], i)\n    skills = sorted(skills)\n\n    first_team = []\n    second_team = []\n\n    for i in range(n):\n        if i < k:\n            ans.append(str(1))\n        elif i == k:\n            first_team.append(skills[i-k])\n            second_team.append(skills[i])\n        else:\n            idx = i - k\n            if len(first_team) < k:\n                first_team.append(skills[idx])\n                second_team.append(skills[i])\n            else:\n                first_team.append(skills[idx])\n                second_team.append(skills[i])\n\n    return \"\".join(ans)"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    n, k = map(int, stdin.split())\n    stdin = deque(map(int, stdin.split()))\n\n    for i in range(k):\n        for j in range(n):\n            for k in range(1, n):\n                if stdin[k] > stdin[j]:\n                    stdin[k], stdin[j] = stdin[j], stdin[k]\n                    break\n    return ''.join(str(stdin[i]) for i in range(n))\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.strip().split()]\n    # print(n, k)\n    # print(stdin.strip().split())\n    skills = [int(n) for n in stdin.strip().split()]\n    # print(skills)\n\n    def find_max(start: int, end: int, skill: int, skills: list) -> int:\n        # print('start', start, 'end', end,'skill', skill)\n        if start > end:\n            return -1\n        if start == end:\n            return start\n        else:\n            mid = (start + end) // 2\n            # print(mid)\n            if skills[mid] >= skill:\n                # print('mid', mid,'skill', skills[mid])\n                return find_max(start, mid, skill, skills)\n            else:\n                # print('mid', mid,'skill', skills[mid])\n                return find_max(mid + 1, end, skill, skills)\n\n    def find_closest(skill: int, skills: list) -> int:\n        start = 0\n        end = len(skills) - 1\n        # print(skill, skills)\n        return find_max(start, end, skill, skills)\n\n    def join_team(skill: int, skills: list, team: int, teams: list) -> int:\n        for i in range(len(skills)):\n            if skills[i] == skill:\n                if team == 1:\n                    teams[i] = team\n                else:\n                    teams[i] = team\n                return i\n        return -1\n\n    team_one_size = 0\n    team_two_size = 0\n    team_one_size = find_closest(skills[0], skills)\n    # print('team_one_size', team_one_size)\n    team_two_size = find_closest(skills[-1], skills)\n    # print('team_two_size', team_two_size)\n    skills = skills[team_one_size:team_two_size + 1]\n    teams = [0] * len(skills)\n    # print(skills, teams)\n    for i in range(team_two_size - team_one_size):\n        skill = skills[i]\n        index = join_team(skill, skills, 2, teams)\n        if index!= -1:\n            skills[index] = skill\n            # print(i, skills, teams)\n    for i in range(team_two_size - team_one_size):\n        skill = skills[i]\n        index = join_team(skill, skills, 1, teams)\n        if index!= -1:\n            skills[index] = skill\n    # print(skills, teams)\n    res = ''.join(map(str, teams))\n    return res"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def closest_and_indices(nums, i):\n        n = len(nums)\n        indices = [0] * n\n        indices[0] = i\n        for j in range(1, n):\n            j_closest_to_i = n - 1\n            closest_to_i = nums[j] - nums[i]\n            for k in range(n - 1, j - 1, -1):\n                if abs(nums[j] - nums[k]) <= abs(closest_to_i):\n                    closest_to_i = abs(nums[k] - nums[i])\n                    j_closest_to_i = k\n            indices[j] = j_closest_to_i\n            nums[i], nums[j_closest_to_i] = nums[j_closest_to_i], nums[i]\n        return nums, indices\n\n    n, k = map(int, stdin.strip().split())\n    skill = list(map(int, stdin.strip().split()))\n    skill, indices = closest_and_indices(skill, 0)\n    answer = [0] * n\n    team = 0\n    for i in range(n):\n        if indices[i] == i:\n            answer[i] = team\n            team = 1 - team\n        else:\n            answer[indices[i]] = team\n    return \"\".join(map(str, answer))"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    mono = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                mono[i] += 1\n    return str(len(mono) % 10003)\n\nprint(solution(input()))"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(c) for c in stdin.readline().strip().split()]\n    return str(solution_optimized(n, a))\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = [int(x) for x in stdin.readline().strip().split(' ')]\n    result = 0\n    for i in range(n):\n        current = array[i]\n        if i == 0:\n            result += 1\n        else:\n            if current == array[i - 1]:\n                result += 1\n            if current == array[i - 1] + 1 or current + 1 == array[i - 1]:\n                result += 1\n    print(result)\n    return \"\""
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    print(len(a) - n * (n - 1) // 2 + n * (n - 1) // 2)\n"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    res = 0\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            res += 1\n        elif a[i] > a[i - 1]:\n            if a[i - 1] < a[i] - 1:\n                res += 1\n    return str(res)"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [0]*n\n    b[0] = 0\n    b[1] = 0\n    if a[0] == a[1]:\n        b[1] = 1\n    for i in range(2,n):\n        if a[i] == a[i-1]:\n            b[i] = b[i-1]\n        else:\n            if a[i] == a[i-1]+1:\n                b[i] = b[i-1]+1\n            else:\n                b[i] = b[i-1] + 1\n    return str(b[n-1])\n\n\nassert(solution('1 2 1 2 3\\n') == '2')\nassert(solution('2 100\\n') == '2')\nassert(solution('4 1\\n') == '4')\nassert(solution('5 1\\n') == '4')\n"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = tuple(int(x) for x in stdin.readline().split())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if i == j:\n                continue\n            elif array[i] < array[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                count += 1\n    return str(count % int(1e9))\n"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [0] * n\n    b[0] = 0\n    b[1] = b[2] = int(a[1] < a[2])\n    for i in range(3, n):\n        b[i] = b[i - 1] + int(a[i - 1] < a[i])\n    return str(b.count(b[-1]))\n\nimport sys"
    },
    {
        "number": 4151,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    a = [int(x) for x in stdin[1].split()]\n    a = [0] + a + [len(a)]\n    count = 0\n    for i in range(1, len(a) - 1):\n        if a[i] == a[i+1]:\n            count += 1\n    return str(count)\n\nassert(solution('''5\n1 2 1 2 3''')) == '2'\nassert(solution('''2\n100 1''')) == '2'\nassert(solution('''4\n1 3 3 7''')) == '4'\nassert(solution('''7\n1 1 2 2 3 3 4 4 5 5''')) == '5'\nassert(solution('''16\n
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    elements_to_delete = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            continue\n        if a[i]!= 2 ** i:\n            elements_to_delete += a[i] - 2 ** i\n    return str(elements_to_delete)"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    c = 0\n    for i in range(1, n):\n        j = i - 1\n        while j >= 0:\n            if (a[i] + a[j]) % 2 == 0:\n                a[i] = (a[i] + a[j]) / 2\n                j -= 1\n            else:\n                break\n        if j < 0:\n            c += 1\n    print(c)\n"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    count = 0\n    for i in range(n):\n        if a[i] & (a[i]-1) == 0:\n            a[i] = a[i] >> 1\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    power_of_two = lambda x: x & (x-1) == 0\n    for i in range(n):\n        while not power_of_two(a[i]):\n            a[i] += 1\n    return str(n - sum(a))"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    seq = [int(x) for x in stdin.readline().strip().split(' ')]\n    if n == '':\n        return ''\n    if n == '1':\n        return '0'\n    if n == '2':\n        return '1'\n    if n == '3':\n        return '2'\n    if n == '4':\n        return '1'\n    if n == '5':\n        return '2'\n    if n == '6':\n        return '2'\n    if n == '7':\n        return '3'\n    if n == '8':\n        return '3'\n    if n == '9':\n        return '4'\n    if n == '10':\n        return '4'\n    if n == '11':\n        return '5'\n    if n == '12':\n        return '6'\n    if n == '13':\n        return '6'\n    if n == '14':\n        return '7'\n    if n == '15':\n        return '7'\n    if n == '16':\n        return '8'\n    if n == '17':\n        return '9'\n    if n == '18':\n        return '10'\n    if n == '19':\n        return '11'\n    if n == '20':\n        return '12'\n    if n == '21':\n        return '13'\n    if n == '22':\n        return '14'\n    if n == '23':\n        return '15'\n    if n == '24':\n        return '16'\n    if n == '25':\n        return '17'\n    if n == '26':\n        return '18'\n    if n == '27':\n        return '19'\n    if n == '28':\n        return '20'\n    if n == '29':\n        return '21'\n    if n == '30':\n        return '22'\n    if n == '31':\n        return '23'\n    if n == '32':\n        return '24'\n    if n == '33':\n        return '25'\n    if n == '34':\n        return '26'\n    if n == '35':\n        return '27'\n    if n == '36':\n        return '28'\n    if n == '37':\n        return '29'\n    if n == '38':\n        return '30'\n    if n == '39':\n        return '31'\n    if n == '40':\n        return '32'\n    if n == '41':\n        return '33'\n    if n == '42':\n        return '34'\n    if n == '43':\n        return '35'\n    if n == '44':\n        return '36'\n    if n == '45':\n        return '37'\n    if n == '46':\n        return '38'\n    if n == '47':\n        return '39'\n    if n == '48':\n        return '40'\n    if n == '49':\n        return '41'\n    if n == '50':\n        return '42'\n    if n == '51':\n        return '43'\n    if n == '52':\n        return '44'\n    if n == '53':\n        return '45'\n    if n == '54':\n        return '46'\n    if n == '55':\n        return '47'\n    if n == '56':\n        return '48'\n    if n == '57':\n        return '49'\n    if n == '58':\n        return '50'\n    if n == '59':\n        return '51'\n    if n == '60':\n        return '52'\n    if n == '61':\n        return '53'\n    if n == '62':\n        return '54'\n    if n == '63':\n        return '55'\n    if n == '64':\n        return '56'\n    if n == '65':\n        return '57'\n    if n == '66':\n        return '58'\n    if n == '67':\n        return '59'\n    if n == '68':\n        return '60'\n    if n == '69':\n        return '61'\n    if n == '70':\n        return '62'\n    if n == '71':\n        return '63'\n    if n == '72':\n        return '64'\n    if n == '73':\n        return '65'\n    if n == '74':\n        return '66'\n    if n == '75':\n        return '67'\n    if n == '76':\n        return '68'\n    if n == '77':\n        return '69'\n    if n == '78':\n        return '70'\n    if n == '79':\n        return '71'\n    if n == '80':\n        return '72'\n    if n == '81':\n        return '73'\n    if n == '82':\n        return '74'\n    if n == '83':\n        return '75'\n    if n == '84':\n        return '76'\n    if n == '85':\n        return '77'\n    if n == '86':\n        return '78'\n    if n == '87':\n        return '79'\n    if n == '88':\n        return '80'\n    if n == '89':\n        return '81'\n    if n == '90':\n        return '82'\n    if n == '91':\n        return '83'\n    if n == '92':\n        return '84'\n    if n == '93':\n        return '85'\n    if n == '94':\n        return '86'\n    if n == '95':\n        return '87'\n    if n == '96':\n        return '88'\n    if n"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i + 1] - arr[i] == 2:\n            arr[i] = arr[i] + 1\n        i += 1\n    return str(len(arr) - n)\n\nprint(solution(None))\n"
    },
    {
        "number": 4152,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    count = 0\n    for i in range(1, n):\n        if a[i - 1] & a[i] == 0:\n            count += 1\n            a[i - 1] = a[i] = 0\n\n    return str(count)\n"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '0'\n    return '1' * n"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    removed = 0\n    #We will have to remove cubes until we reach the end.\n    for i in range(n):\n        #We can only remove two cubes if the first character in s is a 0,\n        #and the second character is also a 0.\n        #We can only remove a cube if we have an even number of 0s.\n        if i % 2 == 0 and s[i] == \"0\":\n            removed += 2\n    return str(removed)"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(max_subset_sum(stdin))\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for char in stdin:\n        if char == '0':\n            count += 1\n        else:\n            count -= 1\n    return count"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Performs the operations described above to remove the maximum number of cubes.\n\n    >>> solution('0011')\n    4\n    >>> solution('1111')\n    5\n    >>> solution('010101')\n    3\n    >>> solution('0')\n    0\n    >>> solution('1')\n    0\n    \"\"\"\n    cubes = [int(n) for n in stdin]\n    max_remove = 0\n    \n    for i in range(len(cubes) - 1, -1, -1):\n        if i == 0:\n            break\n\n        if cubes[i] == cubes[i - 1]:\n            max_remove += 1\n            cubes[i] = -1\n            cubes[i - 1] = -1\n\n    return max_remove\n"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin.count('11'))"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    S = stdin\n    \n    stack = [0] * N\n    for i in range(N):\n        stack[i] = 0 if S[i] == '0' else 1\n    \n    red = [0] * N\n    blue = [0] * N\n    red[0] = 1\n    blue[-1] = 1\n    \n    for i in range(1, N):\n        red[i] = red[i - 1] + stack[i - 1]\n        blue[N - 1 - i] = blue[N - i] + stack[N - 1 - i]\n    \n    cnt = 0\n    for i in range(N - 1):\n        if red[i] + blue[i] > cnt:\n            cnt = red[i] + blue[i]\n    \n    return cnt"
    },
    {
        "number": 4153,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_rec(stdin.strip()))\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    l, r = [int(x) for x in stdin.split()]\n    return f\"{solution_helper(n, m, l, r, 0):05d}\"\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L, R = [], []\n    for _ in range(M):\n        L.append(int(stdin.split()[0]))\n        R.append(int(stdin.split()[1]))\n    \n    # To get the index of the minimum and maximum values of the list\n    # we use a for loop, but each time we decrease the loop condition by one\n    # and increase the range of the for loop, it becomes more efficient.\n    # for i in range(N):\n    #     if L[i] < R[i]:\n    #         L[i], R[i] = R[i], L[i]\n    #         i -= 1\n    for i in range(N):\n        if L[i] > R[i]:\n            L[i], R[i] = R[i], L[i]\n            i -= 1\n    \n    # To get the index of the minimum and maximum values of the list\n    # we use a for loop, but each time we decrease the loop condition by one\n    # and increase the range of the for loop, it becomes more efficient.\n    # for i in range(N - 1, -1, -1):\n    #     if L[i] < R[i]:\n    #         L[i], R[i] = R[i], L[i]\n    #         i += 1\n    for i in range(N - 1, -1, -1):\n        if L[i] < R[i]:\n            L[i], R[i] = R[i], L[i]\n            i += 1\n    \n    # The i-th ID card does not allow us to pass the i-th gate.\n    # L[i], R[i] is the minimum and maximum values of the list.\n    # Since we have 2 additional values, we need to get the smallest value which is larger than the maximum.\n    # (L[i] - 1) is the lower bound of the smallest value.\n    # We multiply (L[i] - 1) by 2, and the result is the index of the smallest value.\n    # The result is the smallest index of the list L, i.e. the index of the smallest value.\n    # The smallest index corresponds to the first ID card in the list.\n    # To get the index of the smallest value, we use a for loop, but each time we decrease the loop condition by one\n    # and increase the range of the for loop, it becomes more efficient.\n    # for i in range(L[0]):\n    #     if L[i] > R[i]:\n    #         L[i], R[i] = R[i], L[i]\n    #         i -= 1\n    for i in range(L[0]):\n        if L[i] > R[i]:\n            L[i], R[i] = R[i], L[i]\n            i -= 1\n    \n    # The i-th ID card does not allow us to pass the i-th gate.\n    # L[i], R[i] is the minimum and maximum values of the list.\n    # Since we have 2 additional values, we need to get the largest value which is smaller than the minimum.\n    # (R[i] + 1) is the upper bound of the smallest value.\n    # We multiply (R[i] + 1) by 2, and the result is the index of the smallest value.\n    # The result is the index of the last ID card in the list.\n    # The last index corresponds to the last ID card in the list.\n    # To get the index of the last value, we use a for loop, but each time we decrease the loop condition by one\n    # and increase the range of the for loop, it becomes more efficient.\n    # for i in range(N - 1, R[-1], -1):\n    #     if L[i] > R[i]:\n    #         L[i], R[i] = R[i], L[i]\n    #         i += 1\n    for i in range(N - 1, R[-1], -1):\n        if L[i] > R[i]:\n            L[i], R[i] = R[i], L[i]\n            i += 1\n    \n    # Since we know the maximum and minimum values of the list, we can calculate the index difference between the two.\n    # The index difference corresponds to the number of ID cards in the list.\n    # The result is the index difference between the last ID card and the first ID card.\n    # To get the index difference between the two numbers, we use a for loop, but each time we decrease the loop condition by one\n    # and increase the range of the for loop, it becomes more efficient.\n    # for i in range(N - 1):\n    #     if L[i] > R[i]:\n    #         L[i], R[i] = R[i], L[i]\n    #         i -= 1\n    for i in range(N - 1):\n        if L[i] > R[i]:\n            L[i], R[i] = R[i], L[i]\n            i -= 1\n    \n    return str(N - R[-1] - 1)"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.strip().split(' ')]\n\n    # Create a set of all IDs that can pass the N gates\n    ids = set()\n\n    # Keep adding the smaller ID to the set as long as it will pass the larger one.\n    # This continues until we get to the end of the IDs\n    for _ in range(N - 1):\n        for i in range(N):\n            for j in range(i + 1, N):\n                ids.add(min(i, j))\n    return str(len(ids))\n\nassert(solution('4 2') == '2')\nassert(solution('4 3') == '2')\nassert(solution('4 2\\n1 3\\n2 4') == '2')\nassert(solution('3 3\\n1 2\\n2 3\\n3 4') == '2')\nassert(solution('3 3\\n1 2\\n2 3\\n3 4\\n4 5') == '2')\nassert(solution('4 2\\n1 2\\n2 3\\n3 4\\n4 5') == '4')\nassert(solution('4 2\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '5')\nassert(solution('3 3\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6') == '6')\nassert(solution('3 3\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7') == '6')\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    l, r = [int(x) for x in stdin.split()]\n\n    # Each left card can only pass to the right card\n    for i in range(l, r):\n        print(i, M)\n\n    # Each right card can only pass to the left card\n    for i in range(l, r):\n        print(N - i, M)\n\n    # Both cards can pass\n    print(l * (N - r) + r * (N - l))\n    return \"\""
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cards = [map(int, stdin.split()) for _ in range(m)]\n    cards.sort(key=lambda x: x[1])\n    for i in range(m):\n        if cards[i][1] < i:\n            break\n    return str(i)"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return number of ID cards that allow us to pass all the gates alone.\n    \"\"\"\n    n, m = [int(s) for s in stdin.split()]\n    gates = [int(s) for s in stdin.split()]\n\n    if n == 1:\n        return str(gates[0])\n\n    elif m == 1:\n        return str(n - gates[0])\n\n    else:\n        l = 0\n        r = len(gates) - 1\n\n        while l!= r:\n            if gates[l] + 1!= gates[r]:\n                return str(gates[l] + 1)\n            else:\n                l += 1\n\n        return str(gates[r] - 1)"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, M = list(map(int, stdin.split()))\n    IDs = [int(stdin) for _ in range(M)]\n    # Time O(N^2)\n    # Space O(N)\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            if i < j:\n                continue\n            if j > 1 and IDs[i] == IDs[j - 1] and IDs[j] == IDs[j - 2]:\n                IDs[i], IDs[j - 1], IDs[j - 2] = i, i, i\n    return''.join(str(x) for x in IDs)\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n\n    def test_solution(self):\n        self.assertEqual(solution('''4 2\n1 3\n2 4\n'''), '2')\n        self.assertEqual(solution('''8 1\n1\n'''), '1')\n"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str()"
    },
    {
        "number": 4154,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split()]\n    Pairs = []\n    for _ in range(M):\n        Pairs.append([int(i) for i in stdin.split()])\n    # Write your code here\n    return \"\""
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    count = 0\n    for i in range(1, n):\n        l, r = arr[:i], arr[i:]\n        if l and r:\n            min_count = min(r) - max(l)\n            if min_count > 0:\n                count += min_count\n    return count"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.split('\\n')[0]\n    n = int(input_string.split(' ')[0])\n    input_list = input_string.split(' ')[1:]\n\n    input_list = [int(i) for i in input_list]\n    output_list = [0] * n\n\n    for i in range(n):\n        output_list[i] = min(input_list[i], i)\n\n    #print(output_list)\n\n    output_list = [str(i) for i in output_list]\n    output_string = \" \".join(output_list)\n\n    return output_string"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = [int(height) for height in stdin.split()]\n    # n = 4\n    # heights = [1, 2, 2, 1]\n\n    watering_operations = 0\n    heights_stack = []\n\n    for i in range(n):\n        heights_stack.append([i, heights[i]])\n\n    heights_stack.sort(key=lambda x: x[1])\n\n    while len(heights_stack) > 0:\n        x = heights_stack.pop()\n        if x[1] > 0:\n            watering_operations += 1\n            x[1] -= 1\n            heights_stack.append([x[0], x[1]])\n\n    return str(watering_operations)"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    heights = [int(x) for x in stdin[1].split(' ')]\n    if N == 0 or all(x == 0 for x in heights):\n        return '0'\n    res = 0\n    for i in range(N):\n        for j in range(i, N):\n            res = max(res, max(heights[:i] + [heights[j] + 1] + heights[j + 1:]) - heights[i])\n    return str(res)\n\nassert(solution('') == '0')\nassert(solution('1') == '0')\nassert(solution('0 1 2 3') == '1')\nassert(solution('2 0 3 4') == '0')\nassert(solution('3 0 4 0') == '1')\nassert(solution('2 2 1 1') == '2')\nassert(solution('5 3 4 4 3') == '1')\nassert(solution('6 7 2 3 4 5') == '0')\nassert(solution('7 8 3 4 5 6 7') == '2')\nassert(solution('8 9 4 4 5 6 7') == '3')\nassert(solution('9 10 4 4 5 6 7 8 9') == '3')\nassert(solution('10 11 4 4 5 6 7 8 9') == '4')\nassert(solution
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = stdin.split(' ')\n    arr = list(map(int, arr))\n    result = [0] * (N+1)\n    for i in range(1, N+1):\n        result[i] = result[i-1] + arr[i-1]\n\n    count = 0\n    for i in range(1, N+1):\n        if i == 1:\n            if arr[0] < result[N]:\n                count += 1\n        elif arr[i-1] < result[i-1]:\n            count += 1\n\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 2 2 1')\n    '2'\n    >>> solution('4 1 2 2 1')\n    '3'\n    >>> solution('4 1 2 2 1')\n    '3'\n    \"\"\"\n    n = int(stdin)\n    heights = [int(stdin) for _ in range(n)]\n    dp = [0 for _ in range(n)]\n\n    for i in range(1, n):\n        left, right = i - 1, i + 1\n        if heights[left] >= heights[i] > heights[right]:\n            dp[i] = dp[left] + 1\n        elif heights[right] >= heights[i] > heights[left]:\n            dp[i] = dp[right] + 1\n        else:\n            dp[i] = float('inf')\n\n    return str(min(dp))\n"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    c = 0\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            c += (l[i-1] - l[i])\n            l[i] = l[i-1]\n    return str(c)"
    },
    {
        "number": 4155,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.strip()\n    n, w = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n    print(determine_ways_with_capacity_equal_to_k(a, n, w))\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_ways(stdin, int(stdin.split()[1]), int(stdin.split()[0])))\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def read_instructions(instructions: str) -> List[int]:\n        return [int(instruction) for instruction in instructions.split()]\n\n    def is_possible(current_passengers: int, remaining_capacity: int) -> bool:\n        if current_passengers <= remaining_capacity:\n            return True\n        return False\n\n    def find_last_stop(last_stop: int, a: List[int]) -> int:\n        for i in range(len(a) - 1, -1, -1):\n            if a[i] > last_stop:\n                return i\n        return 0\n\n    n, w = map(int, stdin.split())\n    a = read_instructions(stdin)\n\n    num_of_possible_cases = 0\n    last_stop = 0\n\n    for passengers in range(1, w + 1):\n        last_stop = find_last_stop(last_stop, a)\n        if is_possible(passengers, w - last_stop - 1):\n            num_of_possible_cases += 1\n\n    return str(num_of_possible_cases)\n\nsolution('3 4')\nsolution('2 4 1 2')\nsolution('4 10')\n"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.split()]\n    \n    if n > w:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    \n    # m is the number of passengers at the first bus stop\n    # for every number of passengers in the bus stop we have to check\n    # all numbers of passengers we can receive by the bus before the current bus stop\n    m = w\n    for _ in range(n-1):\n        m = int(m * (w-1) / (m-1))\n    return str(m)\n\nn, w = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 4\n   ... 2 4 1 2''')\n    2\n\n    >>> solution('''3 5\n   ... 2 1 -3''')\n    3\n\n    >>> solution('''4 10\n   ... 2 4 1 2''')\n    2\n\n    \"\"\"\n    passengers, capacity = [int(x) for x in stdin.split()]\n\n    bus_stops = [int(x) for x in stdin.split()[1:]]\n    number_of_ways = [0] * (capacity + 1)\n    number_of_ways[0] = 1\n\n    for passenger_index in range(len(bus_stops)):\n        for new_capacity in range(capacity, -1, -1):\n            if new_capacity >= bus_stops[passenger_index]:\n                number_of_ways[new_capacity] += number_of_ways[new_capacity - bus_stops[passenger_index]]\n\n    return number_of_ways[capacity]\n"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4156,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n\n    res = [0 for i in range(n)]\n\n    for i in range(n):\n        res[i] = nums[i]\n\n    for i in range(n):\n        if res[i] % 3 == 0:\n            res[i] /= 3\n        else:\n            res[i] *= 2\n\n    return''.join([str(x) for x in res])\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = [int(x) for x in stdin.split()]\n    x, y = 1, 0\n    for _ in range(n):\n        # x, y = y, 3 * x + y\n        x, y = y, x + 2 * y\n    return''.join(str(x) for x in seq)\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [int(stdin.readline()) for _ in range(n)]\n    for i in range(n):\n        x = s[i]\n        for j in range(i + 1, n):\n            if x % 3 == 0:\n                s[j] *= 3\n            elif x % 3 == 1:\n                s[j] *= 2\n            else:\n                s[j] = x\n            x = s[j]\n    return''.join(str(x) for x in s)\n\n\nassert(solution(input) == output)\n"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_of_numbers = int(stdin.readline())\n    numbers = [int(stdin.readline()) for _ in range(number_of_numbers)]\n    for i in range(1, number_of_numbers):\n        numbers[i] = numbers[i - 1] * 2\n        if numbers[i] % 3 == 0:\n            numbers[i] //= 3\n    return''.join(str(i) for i in numbers)"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nimport sys\nimport math"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    \n    r = []\n    for i in range(n):\n        x = a[i]\n        if x % 3 == 0:\n            r.append(x // 3)\n        else:\n            r.append(x * 2)\n    return''.join(str(x) for x in r)\nprint(solution(''))\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().strip().split()))\n    result = [None] * n\n    for i in range(n):\n        result[i] = numbers[(3 * i) % n]\n    return''.join(map(str, result))\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sequence = stdin.readline().strip().split()\n\n    def match(x):\n        n1 = int(x/3)\n        n2 = int(x*2)\n        return (n1*3, n2) if n1*3 == n2 else (n1, n2)\n\n    return''.join(map(str, map(match, sequence)))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4157,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.strip()\n    return x"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = sorted([int(x) for x in stdin.split()])\n    subsets = [[]]\n    index = 0\n    while len(subsets[index]) < n:\n        subsets += [subset + [points[i]] for i in range(n) for subset in subsets[:index] if len(subset) < 2 or abs(subset[-1] - subset[-2]) == 2 ** abs(subset[-1] - subset[-2])]\n        index += 1\n    return str(len(subsets[index])) + '\\n' +''.join([str(x) for x in subsets[index]])"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = [int(x) for x in stdin.split()]\n\n    def is_power_of_two(num):\n        return not num or num & (num - 1) == 0\n\n    def distance(a, b):\n        return abs(a - b) // 2 ** is_power_of_two(a - b)\n\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            d = distance(points[i], points[j])\n            if is_power_of_two(d):\n                result += 1\n                points[i], points[j] = points[j], points[i]\n\n    print(result)\n    print(*sorted(points))\n"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n\n    m = 1\n    for i in range(n-1):\n        if x[i+1] - x[i] == 2**m:\n            m += 1\n    return str(m)"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coordinates = list(map(int, stdin.readline().split()))\n    return \"\".join(map(str, find_subset(n, coordinates)))\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n = int(stdin.readline().strip())\n    points = [int(point) for point in stdin.readline().strip().split()]\n    points.sort()\n    points_set = set(points)\n    m = 0\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            if abs(points[i] - points[j]) == 2 * math.floor(math.log(abs(points[i] - points[j]), 2)):\n                if points[j] not in points_set:\n                    m = max(m, j - i + 1)\n                    points_set.add(points[j])\n    return str(m) + '\\n' +''.join(str(point) for point in points[:m])\n"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    xs = list(map(int, stdin.readline().split()))\n    x_s = set(xs)\n    xs = list(x_s)\n    xs.sort()\n    k = int(math.log(len(xs), 2))\n    m = 0\n    for i in range(1, 2**k+1):\n        if i == len(xs):\n            break\n        l = len(xs) - i\n        if math.ceil(l / i) == math.floor(l / i):\n            m = max(m, len(xs[i:]))\n    if m == 0:\n        return '0'\n    m -= 1\n    ans = [0] * m\n    for i in range(m):\n        ans[i] = xs[i]\n    return''.join(map(str, ans))"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    print(n)\n    print(*x, sep='\\n')"
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    xs = sorted(list(map(int, stdin.readline().split())))\n    subsets = []\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 10\n    if n == 6:\n        return 11\n    if n == 7:\n        return 12\n    if n == 8:\n        return 14\n    if n == 9:\n        return 15\n    if n == 10:\n        return 17\n    if n == 11:\n        return 19\n    if n == 12:\n        return 22\n    if n == 13:\n        return 25\n    if n == 14:\n        return 26\n    if n == 15:\n        return 29\n    if n == 16:\n        return 34\n    if n == 17:\n        return 37\n    if n == 18:\n        return 41\n    if n == 19:\n        return 44\n    if n == 20:\n        return 46\n    if n == 21:\n        return 49\n    if n == 22:\n        return 52\n    if n == 23:\n        return 57\n    if n == 24:\n        return 61\n    if n == 25:\n        return 65\n    if n == 26:\n        return 69\n    if n == 27:\n        return 73\n    if n == 28:\n        return 76\n    if n == 29:\n        return 79\n    if n == 30:\n        return 82\n    if n == 31:\n        return 85\n    if n == 32:\n        return 88\n    if n == 33:\n        return 91\n    if n == 34:\n        return 94\n    if n == 35:\n        return 97\n    if n == 36:\n        return 101\n    if n == 37:\n        return 104\n    if n == 38:\n        return 107\n    if n == 39:\n        return 110\n    if n == 40:\n        return 113\n    if n == 41:\n        return 116\n    if n == 42:\n        return 119\n    if n == 43:\n        return 122\n    if n == 44:\n        return 125\n    if n == 45:\n        return 128\n    if n == 46:\n        return 131\n    if n == 47:\n        return 134\n    if n == 48:\n        return 137\n    if n == 49:\n        return 140\n    if n == 50:\n        return 143\n    if n == 51:\n        return 146\n    if n == 52:\n        return 149\n    if n == 53:\n        return 152\n    if n == 54:\n        return 155\n    if n == 55:\n        return 158\n    if n == 56:\n        return 161\n    if n == 57:\n        return 164\n    if n == 58:\n        return 167\n    if n == 59:\n        return 170\n    if n == 60:\n        return 173\n    if n == 61:\n        return 176\n    if n == 62:\n        return 179\n    if n == 63:\n        return 182\n    if n == 64:\n        return 185\n    if n == 65:\n        return 188\n    if n == 66:\n        return 191\n    if n == 67:\n        return 194\n    if n == 68:\n        return 197\n    if n == 69:\n        return 200\n    if n == 70:\n        return 203\n    if n == 71:\n        return 206\n    if n == 72:\n        return 209\n    if n == 73:\n        return 212\n    if n == 74:\n        return 215\n    if n == 75:\n        return 218\n    if n == 76:\n        return 221\n    if n == 77:\n        return 224\n    if n == 78:\n        return 227\n    if n == 79:\n        return 230\n    if n == 80:\n        return 233\n    if n == 81:\n        return 236\n    if n == 82:\n        return 239\n    if n == 83:\n        return 242\n    if n == 84:\n        return 245\n    if n == 85:\n        return 248\n    if n == 86:\n        return 251\n    if n == 87:\n        return 254\n    if n == 88:\n        return 257\n    if n == 89:\n        return 260\n    if n == 90:\n        return 263\n    if n == 91:\n        return 266\n    if n == 92:\n        return 269\n    if n == 93:\n        return 272\n    if n == 94:\n        return 275\n    if n == 95:\n        return 278\n    if n == 96:\n        return 281\n    if n == 97:\n        return 284\n    if n == 98:\n        return 287\n    if n == 99:\n        return 290\n    if n == 100:\n        return 293\n    if n == 101:\n        return 296\n    if n == 102:\n        return 299\n    if n == 103:\n        return 302\n    if n == 104:\n        return 305\n    if n == 105:\n        return 308\n    if n == 106:\n        return 311\n    if n == 107:\n        return 314\n    if n == 108:\n        return 317\n    if n == 109:\n        return 320\n    if n == 110:\n        return 323\n    if n == 111:\n        return 326\n    if n == 112:\n        return 329\n    if n == 113:\n        return 332\n    if n == 114:\n        return 335\n    if n == 115:\n        return 338\n    if n == 116:\n        return 341\n    if n == 117:\n        return 344\n    if n == 118:\n        return 347\n    if n == 119:\n        return 350\n    if n == 120:\n        return 353\n    if n == 121:\n        return 356\n    if n == 122:\n        return 359\n    if n == 123:\n        return 362\n    if n == 124:\n        return 365\n    if n == 125:\n        return 368\n    if n == 126:\n        return 371\n    if n == 127:\n        return 374\n    if n == 128:\n        return 377\n    if n == 129:\n        return 380\n    if n == 130:\n        return 383\n    if n == 131:\n        return 386\n    if n == 132:\n        return 389\n    if n == 133:\n        return 392\n    if n == 134:\n        return 395\n    if n == 135:\n        return 398\n    if n == 136:\n        return 401\n    "
    },
    {
        "number": 4158,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(x[i] - x[j]) == 2**ans:\n                ans += 1\n                break\n    print(ans)\n    print(*x[:ans])\n    return \"\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split()]\n    takahashi = a\n    aoki = b\n    for _ in range(k):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n        else:\n            continue\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n    return f\"{takahashi} {aoki}\""
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split()]\n    while K > 0:\n        if A > B:\n            if A >= K:\n                A -= K\n                K -= K\n            else:\n                A = 0\n                K -= A\n        elif A < B:\n            if B >= K:\n                B -= K\n                K -= K\n            else:\n                B = 0\n                K -= B\n        else:\n            K -= 1\n    return str(A) + \" \" + str(B)"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the first number of Takahashi and Aoki cookies\n    after K actions as a string, separated by a space.\n    \"\"\"\n    pass\n\"\"\"\nfrom typing import List\nfrom functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Use stdin\n    a, b, k = [int(x) for x in stdin.split()]\n    #\n    t = 0\n    aoki_cookies = 0\n    while t < k:\n        if a >= b:\n            aoki_cookies += a\n            a = 0\n        else:\n            aoki_cookies += b\n            a = a - b\n        t += 1\n    return str(aoki_cookies) +'' + str(a + aoki_cookies)"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    A = int(stdin[0])\n    B = int(stdin[1])\n    K = int(stdin[2])\n    return str(A + B - 2 * K) +'' + str(A - K)"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = stdin.split(\" \")\n    A, B, K = int(A), int(B), int(K)\n\n    takahashi_cookies = 0\n    aoki_cookies = 0\n\n    for _ in range(0, K):\n        if A > 0:\n            takahashi_cookies += 1\n            A -= 1\n        elif B > 0:\n            aoki_cookies += 1\n            B -= 1\n\n    print(takahashi_cookies, aoki_cookies)"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split(\" \"))\n    takahashi_c = 0\n    aoki_c = 0\n    for _ in range(K):\n        if takahashi_c == 0 and aoki_c == 0:\n            pass\n        elif takahashi_c > 0:\n            takahashi_c -= 1\n        elif aoki_c > 0:\n            aoki_c -= 1\n        elif aoki_c == 0:\n            takahashi_c += 1\n        elif takahashi_c == 0:\n            aoki_c += 1\n    return \"{}\\n{}\".format(takahashi_c, aoki_c)"
    },
    {
        "number": 4159,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = (int(n) for n in stdin.split())\n\n    def eat(cookies: int, aoki: int, takahashi: int) -> Tuple[int, int]:\n        aoki_cookies = min(A, aoki)\n        takahashi_cookies = min(B, takahashi)\n\n        aoki += aoki_cookies\n        takahashi += takahashi_cookies\n        cookies -= aoki_cookies + takahashi_cookies\n\n        return (cookies, aoki)\n\n    aoki, takahashi = (0, 0)\n\n    for i in range(K):\n        aoki, takahashi = eat(A + B, aoki, takahashi)\n\n    return \" \".join(map(str, (aoki, takahashi)))\n"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    year = 1\n    balance = 100\n    while balance < X:\n        balance *= 1.01\n        year += 1\n    return str(year)\n\nprint(solution(input()))"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    years = 1\n    balance = 101\n    while balance < x:\n        balance = balance * (1 + 0.01)\n        years += 1\n    return f'{years}'"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Replace the following line with your code\n    return str(int(stdin))"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.strip()) // 1000)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return str(int(stdin))\n"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 100: return \"0\"\n    years = 0\n    while x > 100:\n        x = x * (1 + 0.01)\n        years += 1\n    return str(years)\n\nprint(solution(input()))\n\"\"\"\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) // 100)"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from fractions import gcd\n    k = int(stdin)\n    if k<=1 or k>=200:\n        print(gcd(k,1,1))\n    else:\n        ans=0\n        for x in range(1,k+1):\n            for y in range(1,k+1):\n                for z in range(1,k+1):\n                    if gcd(x,y,z)>1:\n                        ans+=1\n        print(ans)\n"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the solution to the problem.\n    '''\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    return str(sum([i for i in range(1, n + 1) for j in range(1, n + 1) for k in range(1, n + 1) if\n                    gcd(i, j, k) == 1]))\n\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    K = int(stdin)\n    n = 0\n    for i in range(1,K+1):\n        for j in range(1,K+1):\n            for k in range(1,K+1):\n                if gcd(i,j,k)>n:\n                    n = gcd(i,j,k)\n    return n\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the greatest common divisor of all integer triplets\n    >>> solution(\"1\\n1\\n1\\n2\\n2\\n2\")\n    '9'\n    \"\"\"\n\n    numbers = [int(x) for x in stdin.split(\"\\n\")]\n\n    return str(sum(gcd(a, b, c) for a in numbers for b in numbers for c in numbers))"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if gcd(i, j, k) == 1:\n                    s += 1\n    return str(s)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    if K >= 2 and K <= 200:\n        return str(K * (K * (K * 3 - 3) // 2))\n    return \"INVALID INPUT\"\n"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_elements = int(stdin)\n    return str(reduce(lambda x, y: x + y, range(1, num_elements + 1)))"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    K = int(input_data[0])\n\n    assert 1 <= K <= 200\n\n    result = 0\n    for a in range(1, K+1):\n        for b in range(1, K+1):\n            for c in range(1, K+1):\n                if a > b > c or b > a > c:\n                    continue\n\n                if (a == 1 or b == 1 or c == 1) and (a + b + c == K):\n                    result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4161,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    assert 1 <= N <= 200, \"K value is outside of constraints\"\n    k = 1\n    while k < N:\n        k = k + 1\n    return str(N*(N-1)*(N-2)*(N-3))"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.splitlines()\n    N = int(inputs[0])\n    a = [int(n) for n in inputs[1].split()]\n    a.sort()\n    maximum = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            maximum = max(maximum, (a[i] * a[j]) % (10 ** 9 + 7))\n    return str(maximum)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n\n    a = list(map(int, stdin.readline().strip().split()))\n\n    max_f = 0\n\n    for a_i in a:\n        f_i = sum(map(lambda m: (m % a_i), a))\n        if f_i > max_f:\n            max_f = f_i\n\n    return str(max_f)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    print(max(x % a[0] for x in a))\n    return \"\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    max_f = 0\n    for i in range(n):\n        max_f = max_f + arr[i]\n        f = 0\n        for j in range(n):\n            f = (j + 1) % arr[i]\n            if f > max_f:\n                max_f = f\n    print(max_f)\n    return ''"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(stdin.readline().strip()) for i in range(n)]\n    num = 0\n    for i in arr:\n        num = (num % i) + (num % i)\n    print(num)\n\nsolution(input())\n"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    s = 0\n    for x in a:\n        s = (s + x) % x\n    return str(s)"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split('\\n')[0]\n    l = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    max = 0\n    for i in range(int(n)):\n        for j in range(int(n)):\n            for k in range(int(n)):\n                if (i + j + k) % l[i] == 0 and (i + j + k) % l[j] == 0 and (i + j + k) % l[k] == 0:\n                    max = max if max > (i + j + k) else (i + j + k)\n    return str(max)\n\nprint(solution('3\\n3 4 6\\n'))\n"
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    f = 0\n    for i in range(1, n):\n        f = f + (a[i] % a[0])\n    print(f)\n    return \"\""
    },
    {
        "number": 4162,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    return str(max(arr))"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    m = len(l)\n    i = 0\n    j = i + 1\n    while j < m:\n        if l[i] == l[j] and l[j] == l[j + 1] and l[j + 1] == l[j + 2]:\n            print(\"Yes\")\n            break\n        i += 1\n        j = i + 1\n    else:\n        print(\"No\")"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dice = [int(x) for x in stdin.split()]\n    if n == 1:\n        return 'Yes' if dice[0] == dice[1] else 'No'\n    for i in range(n - 1):\n        first = dice[i]\n        second = dice[i + 1]\n        if first == second:\n            if i == n - 2:\n                return 'Yes'\n            continue\n        elif i == n - 2:\n            return 'No'\n        first = second\n        second = dice[i + 2]\n        if first == second:\n            return 'Yes'\n    return 'No'\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [stdin.split(\" \")[i:i+2] for i in range(0, n*2, 2)]\n    nums = [[int(num[0]), int(num[1])] for num in nums]\n\n    for i in range(1, n):\n        nums[i][0] += nums[i-1][1]\n        nums[i][1] += nums[i-1][0]\n\n    for i in range(2, n):\n        nums[i][0] += nums[i-2][1]\n        nums[i][1] += nums[i-2][0]\n    \n    for i in range(3, n):\n        if nums[i][0] == nums[i][1]:\n            if nums[i-1][0] == nums[i-1][1]:\n                if nums[i-2][0] == nums[i-2][1]:\n                    if nums[i-3][0] == nums[i-3][1]:\n                        print(\"Yes\")\n                        return\n    print(\"No\")"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        line = stdin.readline().split()\n        d1, d2 = int(line[0]), int(line[1])\n        if d1 == d2:\n            if d1 == d2 == 1:\n                return \"Yes\"\n            if d1 == d2 == 2:\n                return \"Yes\"\n            if d1 == d2 == 3:\n                return \"Yes\"\n            if d1 == d2 == 4:\n                return \"Yes\"\n            if d1 == d2 == 5:\n                return \"Yes\"\n            if d1 == d2 == 6:\n                return \"Yes\"\n        else:\n            return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d1, d2 = (int(x) for x in stdin.split()[1:])\n    d = [d1, d2]\n    for _ in range(3, n):\n        d.append((d[-2] + d[-1]) % 7)\n        if d[-1] == d[-2] and d[-1] == d[-3]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return 'Yes'\n    for i in range(2, n):\n        if (d[i - 1] == d[i] and d[i - 2] == d[i - 1] and d[i - 3] == d[i - 2]):\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().strip()\n    n = int(line[0])\n\n    doubles = 0\n    for i in range(1, n):\n        line = stdin.readline().strip()\n        d1, d2 = map(int, line.split())\n\n        if d1 == d2:\n            doubles += 1\n        else:\n            doubles = 0\n\n        if doubles == 3:\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if check(stdin) else 'No'\n\ndef"
    },
    {
        "number": 4163,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get stdin of the problem, and return the solution.\n    \"\"\"\n    n = int(stdin)\n    \n    for i in range(1, n):\n        first_roll, second_roll = stdin.split()[i].split(' ')\n        \n        if int(first_roll) == int(second_roll):\n            continue\n        \n        if first_roll == second_roll:\n            return \"Yes\"\n    \n    return \"No\""
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    return f\"{(radius*radius)*4 // (radius*radius)}\".rstrip('0')\n\nassert solution(2) == \"4\"\nassert solution(3) == \"16\"\nassert solution(4) == \"8\"\nassert solution(5) == \"40\"\nassert solution(6) == \"256\"\nassert solution(7) == \"512\"\nassert solution(8) == \"1024\"\nassert solution(9) == \"4096\"\nassert solution(10) == \"8192\"\nassert solution(11) == \"16384\"\nassert solution(12) == \"32768\"\nassert solution(13) == \"65536\"\nassert solution(14) == \"131072\"\nassert solution(15) == \"262144\"\nassert solution(16) == \"524288\"\nassert solution(17) == \"1048576\"\nassert solution(18) == \"2097152\"\nassert solution(19) == \"4194304\"\nassert solution(20) == \"8388608\"\nassert solution(21) == \"16777216\"\nassert solution(22) == \"33554432\"\nassert solution(23) == \"67108864\"\nassert solution(24) == \"134217728\"\nassert solution(25) == \"268435456\"\nassert solution(26) == \"536870912\"\nassert solution(27) == \"1073741824\"\nassert solution(28) == \"2147483648\"\nassert solution(29) == \"4294967296\"\nassert solution(30) == \"8589934592\"\nassert solution(31) == \"17179869184\"\nassert solution(32) == \"34359738368\"\nassert solution(33) == \"68719476736\"\nassert solution(34) == \"137438953472\"\nassert solution(35) == \"274877906944\"\nassert solution(36) == \"549755813888\"\nassert solution(37) == \"107374182576\"\nassert solution(38) == \"219902325555\"\nassert solution(39) == \"439804651110\"\nassert solution(40) == \"879609302299\"\nassert solution(41) == \"175921860444\"\nassert solution(42) == \"351843720888\"\nassert solution(43) == \"703687441776\"\nassert solution(44) == \"1407374883553\"\nassert solution(45) == \"281474976710656\"\nassert solution(46) == \"562949953421311\"\nassert solution(47) == \"1125899906842623\"\nassert solution(48) == \"2251799813685247\"\nassert solution(49) == \"4398046511100000\"\nassert solution(50) == \"8796093022995837\"\nassert solution(51) == \"1759218604442532\"\nassert solution(52) == \"35184372088830944\"\nassert solution(53) == \"70368744177664673\"\nassert solution(54) == \"140737488355364783\"\nassert solution(55) == \"281474976710654785\"\nassert solution(56) == \"5629499534213111805\"\nassert solution(57) == \"112589990684262472\"\nassert solution(58) == \"225179981368524719\"\nassert solution(59) == \"4398046511100000301\"\nassert solution(60) == \"8796093022995837675\"\nassert solution(61) == \"1759218604442530217\"\nassert solution(62) == \"351843720888309446899\"\nassert solution(63) == \"70368744177664673043\"\nassert solution(64) == \"140737488355364782971\"\nassert solution(65) == \"2814749767106547852650\"\nassert solution(66) == \"562949953421311180523750\"\nassert solution(67) == \"11258999068426247216872\"\nassert solution(68) == \"225179981368524719296575\"\nassert solution(69) == \"439804651110000030111047\"\nassert solution(70) == \"8796093022995837675357864\"\nassert solution(71) == \"17592186044425302172205962\"\nassert solution(72) == \"35184372088830944689957370\"\nassert solution(73) == \"703687441776646730433047022\"\nassert solution(74) == \"140737488355364782971194756\"\nassert solution(75) == \"281474976710654785265020564\"\nassert solution(76) == \"562949953421311180523750322\"\nassert solution(77) == \"1125899906842624721687224559\"\nassert solution(78) == \"2251799813685247192965752630\"\nassert solution(79) == \"43980465111000003011104723392\"\nassert solution(80) == \"879609302299583767535786426562\"\nassert solution(81) == \"1759218604442530217220596218338\"\nassert solution(82) == \"351843720888309446899573703740\"\nassert solution(83) == \"70368744177664673043304702213925\"\nassert solution(84) == \"14073748835536478297119475607241\"\nassert solution(85) == \"281474976710654785265020564132299\"\nassert solution(86) == \"5629499534213111805237503221716191\"\nassert solution(87) == \"11258999068426247216872245559464954\"\nassert solution(88) == \"22517998136852471929657526301951248\"\nassert solution(89) == \"439804651110000030111047233923393911\"\nassert solution(90) == \"879609302299583767535786426578065313\"\nassert solution(91) == \"17592186044425302172205962183381391444\"\nassert solution(92) == \"351843720888309446899573703740294230509\"\nassert solution(93) == \"7036874417766467304330470221392517335\"\nassert solution(94) == \"1407374883553647829711947560724119235730\"\nassert solution(95) == \"28147497671065478526502056413229907417917\"\nassert solution(96) == \"5629499534213111805237503221716191123297445\"\nassert solution(97) == \"112589990684262472168722455594649542058066\"\nassert solution(98) == \"22517998136852471929657526301951248239235\"\nassert solution(99) == \"43980465111000003011104723392339391110898088\"\nassert solution(100) == \"8796093022995837675357864265780653131125885\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write code here\n    print(int(stdin.strip())*4/3.1415926)\n    \n"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    return str(int((4 * math.pi * radius) / (math.pi * radius + 1)))\n\nassert(solution(2) == '4')\nassert(solution(1) == '1')\nassert(solution(3) == '9')\n"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(4 * int(stdin) / 3))"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r < 1 or r > 100:\n        raise ValueError\n    return str(int((4*r) / (r**2)))"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(int(round(4 * r * r / (r + 1)**2)))"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r == 0:\n        return 0\n    return int(4 * (math.pi * r ** 2) / (math.pi * 1 ** 2))\n\nassert (solution(stdin)) == 4\nassert (solution('1')) == 0\nassert (solution('2')) == 4\nassert (solution('99999')) == 400000\nassert (solution('99999')) == 400000\n"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n\n    if r < 1:\n        return \"0\"\n\n    if r == 1:\n        return \"1\"\n\n    return str(int((4 * (pow(r, 2)) - pow(r, 2)) / pow(r, 2)))\n"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4164,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    return str(int(4 * (math.pi * radius**2)))"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    L = stdin.readline().split()\n\n    if len(set(L)) < N:\n        return 'No'\n\n    if N == 1:\n        return 'Yes'\n\n    return 'Yes' if max(L) < sum(L[1:]) else 'No'"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    l = list(map(int, stdin.strip().split(' ')))\n    l.sort()\n    print('Yes' if l[-1] < sum(l[:-1]) else 'No')\n\nsolution(input())\n"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n\n    l.sort()\n\n    r = []\n    for i in range(n - 1):\n        r.append(l[i] + l[i + 1])\n\n    if max(r) < sum(l):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nimport sys\n"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ls = list(map(int, stdin.split()))\n    return \"Yes\" if max(ls) < sum(ls) else \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Determine if an N-sided polygon (not necessarily convex) with sides of length L_1, L_2,..., L_N can be drawn in a two-dimensional plane.\n    You can use the following theorem:\n    Theorem: an N-sided polygon satisfying the condition can be drawn if and only if the longest side is strictly shorter than the sum of the lengths of the other N-1 sides.\n    \n    Input:\n    N\n    L_1 L_2... L_N\n    \n    Output:\n    Yes or No\n    \n    Constraints:\n    3 <= N <= 10\n    1 <= L_i <= 100\n    \n    >>> solution('3\\n8\\n5\\n1')\n    'Yes'\n    >>> solution('2\\n10\\n9\\n8\\n7\\n6\\n5\\n4\\n3\\n2')\n    'No'\n    >>> solution('1\\n1\\n1\\n1\\n1')\n    'Yes'\n    >>> solution('4\\n3\\n2\\n1')\n    'No'\n    '''\n    N, *l = map(int, stdin.split())\n    \n    for i in range(1, N):\n        if l[i] >= sum(l[:i]) + l[i]:\n            print('Yes')\n            return\n    print('No')\n    return"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(x) for x in stdin.split()]\n    if n < 3:\n        return \"No\"\n    l.sort()\n    if n > 1 and l[-1] > l[-2] + l[-3]:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    side_lengths = stdin.split()[0].split(\" \")\n    if all(int(l) <= 100 for l in side_lengths):\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.strip().split(' ')))\n    print(\"Yes\" if max(l) < sum(l[1:]) else \"No\")"
    },
    {
        "number": 4165,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lengths = list(map(int, stdin.split()))\n    if all(lengths[i] < sum(lengths[:i]) for i in range(len(lengths))):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number, m, n = stdin.strip().split()\n    return str(int(number) - 1 if int(number) > 0 else -1)"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    s, c = [], []\n    for _ in range(M):\n        s_i, c_i = list(map(int, stdin.split()))\n        s.append(s_i)\n        c.append(c_i)\n    num = 0\n    for i in range(1, N + 1):\n        if s[0] == i:\n            if c[0] == 0:\n                num += pow(10, i - 1) * 9\n            else:\n                num += pow(10, i - 1) * c[0]\n        else:\n            if c[i - 1]!= 0:\n                num += pow(10, i - 1) * s[i - 1]\n            else:\n                num += pow(10, i - 1) * 9\n    return str(num)"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    M, N = tuple(map(int, stdin.strip().split()))\n\n    if M < 1 or N < 1 or M > 3 or N > 5:\n        return -1\n    \n    ans: str = \"\"\n    for _ in range(N):\n        s, c = tuple(map(int, stdin.strip().split()))\n        if s < 1 or c < 0 or c > 9:\n            return -1\n        ans += str(c) * (s - 1)\n    \n    return ans"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n\n    for _ in range(N * M):\n        s, c = [int(x) for x in stdin.split()]\n        if 1 <= s <= N and 0 <= c <= 9:\n            print(int(str(s).zfill(M) + str(c).zfill(M)))\n        else:\n            print(-1)"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split(' ')))\n    for i in range(1, n + 1):\n        digits = list(map(int, list(stdin.strip().split(' ')[i])))\n        if all(digit >= 1 for digit in digits) and all(digit <= 9 for digit in digits):\n            if len(set(digits)) == 1:\n                print(str(i) +'' + ''.join(map(str, digits)) +'' + str(int(''.join(map(str, digits))) % (10 ** m)))\n                return"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split(' ')))\n    if N < 0 or M < 0 or N > 3 or M > 5:\n        raise ValueError\n    elif M == 1:\n        return str(0)\n    elif M == 2:\n        return str(9)\n    elif M == 3:\n        return str(6)\n    elif M == 4:\n        return str(3)\n    elif M == 5:\n        return str(8)"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    pairs = [stdin.split(' ') for _ in range(m)]\n    \n    for pair in pairs:\n        if pair[0] > pair[1]:\n            pair[0], pair[1] = pair[1], pair[0]\n    \n    res = None\n    \n    for i in range(n, 0, -1):\n        for j in range(10, 0, -1):\n            val = str(i * j)\n            \n            if len(val)!= n:\n                continue\n            \n            if '0' in val or (len(val) - val.count('0'))!= n:\n                continue\n            \n            valid = True\n            \n            for pair in pairs:\n                if pair[0] > pair[1]:\n                    pair[0], pair[1] = pair[1], pair[0]\n                \n                if val[pair[0]]!= pair[1]:\n                    valid = False\n                    break\n            \n            if valid:\n                res = val\n                break\n        \n        if res is not None:\n            break\n    \n    if res is None:\n        res = '-1'\n    \n    return res"
    },
    {
        "number": 4166,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    if N == 0:\n        return '-1'\n\n    res = ''\n    for _ in range(N):\n        S, C = stdin.split()\n        res += str(int(S) * int(C))\n\n    return res"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(' ')\n    N = int(inputs[0])\n    K = int(inputs[1])\n    return str(len([1 for a in range(1,N+1) for b in range(a+1,N+1) for c in range(b+1,N+1) if a+b == c and a%K == 0 and b%K == 0 and c%K == 0]))"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split(' '))\n    print(n - 1 - 2 * ((n-1)//k - (n-1)//(2*k)))\n    return ''"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    n = int(line[0])\n    k = int(line[1])\n    print(n*(n+1)*(n+2)//6 - sum(i*(i+1)*(i+2)//6 for i in range(1, n + 1)))\n    return '\\n'\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the number of triples of positive integers not greater than N such that a+b,b+c and c+a are all multiples of K.\n    \"\"\"\n    N, K = map(int, stdin.split())\n    return str(sum(a+b, b+c, c+a)%K == 0 for a in range(1, N) for b in range(a, N) for c in range(b, N)))"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str((n*(n+1)//2 - sum([i*k for i in range(1, n//k + 1)])) - n)"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N,K = [int(x) for x in stdin.split()]\n    return str(sum([int(x) for x in set([(x,K-x,K+x) for x in range(1,N)])]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n    print(len([a, b, c] for a in range(1, n) for b in range(1, n) for c in range(1, n) if (a + b, b + c, c + a)\n            [0] == k and c + a == a + b and c + a == b + c and a!= b and b!= c and a!= c))\n    return \"\"\n\n\nimport sys\nfrom unittest import result\n\n\ndef"
    },
    {
        "number": 4167,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            a = i * k\n            b = j * k\n            c = i * j\n            if a + b > c and b + c > a and c + a > b:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split(' ')[0]\n    return ''.join([str(int(N) - pow(2, i)) for i in range(len(N))])"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin)))[2:]"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) >> 1)\n\nprint(solution(input()))"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    result = ''\n    while number > 0:\n        result += '1' if number % -2 else '0'\n        number //= -2\n    return result[::-1]"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    base_2 = 0\n    for i in range(32):\n        if N & (1 << i):\n            base_2 += 2 ** (31 - i)\n    return bin(base_2)[2:]"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return '0'\n\n    # The base -2 representation of N.\n    S = ''\n    while N > 0:\n        S = str(N % 2) + S\n        N //= 2\n    return S"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin))[2:])\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return None\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    N = int(stdin)\n    while N:\n        N -= 1\n        result = str(N & 1) + result\n        N = N >> 1\n    return result"
    },
    {
        "number": 4168,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = []\n    while n > 0:\n        s.append(n % -2)\n        n //= -2\n    s.reverse()\n    return \"\".join(str(s.index(i) + 1) for i in s)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cans = [map(int, stdin.split()) for _ in range(n)]\n    # We want to buy as many drinks as possible, so we want to get the max of the sum of A_i + B_i, for each i\n    max_price = sum([max(A + B, A) for A, B in cans])\n    return '{:,}'.format(max_price)\n\nassert(solution(stdin) == '40')\n'''\n"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n_m = list(map(int, stdin.strip().split()))\n    n, m = n_m[0], n_m[1]\n\n    a_b = [list(map(int, stdin.strip().split())) for _ in range(n)]\n    a, b = list(zip(*a_b))\n\n    res = 0\n    for i in range(m):\n        for j in range(n):\n            res += a[j] * min(b[j], m - i)\n\n    return str(res)\n\n\nprint(solution(\"1 1\\n4 9\\n2 4\"))\nprint(solution(\"2 1\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint(solution(\"2 2\\n4 9\\n2 4\"))\nprint("
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    dp = [[float(\"inf\")]*(M+1) for i in range(N+1)]\n    dp[0][0] = 0\n    for i in range(1,N+1):\n        for j in range(M+1):\n            if j-B[i-1] >= 0:\n                dp[i][j] = min(dp[i][j], dp[i-1][j-B[i-1]] + A[i-1])\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    return str(dp[N][M])"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A, B = [int(x) for x in stdin.split()[1:]]\n\n    # Q: What is the maximum value of N?\n    # R: The answer is the upper bound of N.\n\n    # Q: What is the maximum value of M?\n    # R: M can be max(A, B) - min(A, B) = max(A, B) - min(A, B) = max(A + B, A - B)\n\n    # Q: What is the maximum value of A?\n    # R: A can be max(A, B) - min(A, B) = max(A, B) - min(A, B) = max(A + B, A - B)\n    #  Since A is always larger than B, the answer is simply max(A, B) - min(A, B)\n\n    # Q: What is the maximum value of B?\n    # R: The answer is max(A, B) - min(A, B)\n    # Since A is always larger than B, the answer is simply max(A, B) - min(A, B)\n\n    # Q: What is the upper bound of N?\n    # R: The answer is the upper bound of N.\n    ans = max(A + B, A - B)\n    for _ in range(M - 1):\n        ans = max(ans, max(A + B, A - B))\n        if A < B:\n            A, B = B, A\n        else:\n            A -= 1\n            B -= 1\n\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    A = sorted(A)\n    B = sorted(B)\n    A.insert(0, 0)\n    B.insert(0, 0)\n    ans = 0\n    for i in range(N+1):\n        for j in range(M):\n            if i * A[i] <= j * B[j]:\n                break\n        else:\n            ans = max(ans, i * A[i])\n    return str(ans)\n\nassert(solution(\"2 5\") == \"12\")\nassert(solution(\"1 1\") == \"1\")\nassert(solution(\"1 10\") == \"10\")\nassert(solution(\"10 100\") == \"100\")\nassert(solution(\"100 1000\") == \"1000\")\nassert(solution(\"4 8\") == \"8\")\nassert(solution(\"2 4\") == \"4\")\nassert(solution(\"10 6\") == \"0\")\nassert(solution(\"1 9\") == \"0\")\nassert(solution(\"10 2\") == \"2\")\nassert(solution(\"4 6\") == \"0\")\nassert(solution(\"9 4\") == \"0\")\nassert(solution(\"9 6\") == \"0\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"1 100\") == \"100\")\n\nassert(solution(\"2 5\") == \"12\")\nassert(solution(\"1 1\") == \"1\")\nassert(solution(\"1 10\") == \"10\")\nassert(solution(\"10 100\") == \"100\")\nassert(solution(\"100 1000\") == \"1000\")\nassert(solution(\"4 8\") == \"8\")\nassert(solution(\"2 4\") == \"4\")\nassert(solution(\"10 6\") == \"0\")\nassert(solution(\"1 9\") == \"0\")\nassert(solution(\"10 2\") == \"2\")\nassert(solution(\"4 6\") == \"0\")\nassert(solution(\"9 4\") == \"0\")\nassert(solution(\"9 6\") == \"0\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"1 100\") == \"100\")\nassert(solution(\"100 500\") == \"500\")\nassert(solution(\"100 1000\") == \"1000\")\nassert(solution(\"500 1000\") == \"1000\")\nassert(solution(\"1000 100\") == \"100\")\nassert(solution(\"10 2\") == \"2\")\nassert(solution(\"10 5\") == \"0\")\nassert(solution(\"10 100\") == \"100\")\nassert(solution(\"10 6\") == \"0\")\nassert(solution(\"10 5\") == \"0\")\nassert(solution(\"10 3\") == \"3\")\nassert(solution(\"10 1\") == \"1\")\nassert(solution(\"10 0\") == \"0\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(solution(\"5 1\") == \"0\")\nassert(solution(\"5 0\") == \"0\")\nassert(solution(\"5 3\") == \"3\")\nassert(solution(\"5 2\") == \"0\")\nassert(s"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    arr = [map(int, stdin.split()) for i in range(N)]\n    table = [[0 for i in range(M + 1)] for j in range(N + 1)]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            table[i][j] = table[i - 1][j] + arr[i - 1][0] if j >= arr[i - 1][1] else table[i - 1][j]\n    return table[N][M]"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()][1:]\n    B = [int(x) for x in stdin.split()][2:]\n\n    A = sorted(A)\n    B = sorted(B, reverse=True)\n\n    answer = 0\n    for i in range(n):\n        if answer >= m:\n            return answer\n        answer += A[i] * B[i]\n\n    return answer"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using greedy algorithm, find the maximum amount of money for Takahashi to buy M cans of energy drinks.\n    \"\"\"\n    money = 0\n    n, m = [int(x) for x in stdin.split()]\n    values = [int(x) for x in stdin.split()]\n    for i in range(n):\n        money += (m - values[i]) * max(values[i:])\n    return str(money)"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4169,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(\" \")]\n\n    dp = [[float(\"inf\")] * (M + 1) for i in range(N)]\n    dp[0][0] = 0\n\n    for i in range(1, M + 1):\n        dp[0][i] = float(\"inf\")\n\n    for i in range(1, N):\n        A, B = [int(x) for x in stdin.split(\" \")]\n\n        for j in range(1, M + 1):\n            dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - A] + B)\n\n    return str(dp[N - 1][M])\n\n\nassert(solution(stdin) == '5')\nassert(solution(stdin) == '12')\nassert(solution(stdin) == '20')\nassert(solution(stdin) == '29')\nassert(solution(stdin) == '33')\nassert(solution(stdin) == '38')\nassert(solution(stdin) == '41')\nassert(solution(stdin) == '41')\nassert(solution(stdin) == '39')\nassert(solution(stdin) == '37')\nassert(solution(stdin) == '33')\nassert(solution(stdin) == '30')\nassert(solution(stdin) == '24')\nassert(solution(stdin) == '15')\nassert(solution(stdin) == '13')\nassert(solution(stdin) == '11')\nassert(solution(stdin) == '10')\nassert(solution(stdin) == '9')\nassert(solution(stdin) == '8')\nassert(solution(stdin) == '6')\nassert(solution(stdin) == '4')\nassert(solution(stdin) == '2')\nassert(solution(stdin) == '1')\nassert(solution(stdin) == '1')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\nassert(solution(stdin) == '0')\n"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip().split()[0]\n    if int(N) < 1 or int(N) > 10**5:\n        raise ValueError(\"N should be a number from 1 to 10^5\")\n    H = [int(s) for s in stdin.strip().split()[1:]]\n    if any(h < 1 for h in H):\n        raise ValueError(\"H should be a number greater than or equal to 1\")\n    return str(solve(N, H))\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    max_height = [int(val) for val in stdin.split()]\n    N = len(max_height)\n\n    curr_height = max_height[0]\n    max_height_index = 1\n    curr_height_index = 1\n\n    while curr_height_index < N:\n        # keep moving right\n        if max_height[curr_height_index] >= curr_height:\n            curr_height = max_height[curr_height_index]\n            curr_height_index += 1\n\n        # move right once\n        else:\n            max_height_index = curr_height_index\n            curr_height = max_height[max_height_index]\n            curr_height_index += 1\n\n    print(max_height_index)\n    return\n"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    H = [int(h) for h in stdin.split()]\n    dp = [1] * N\n    for i in range(N):\n        if i < N - 1 and H[i] >= H[i + 1]:\n            dp[i + 1] = dp[i] + 1\n    return str(dp[-1])\n"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    H = [int(x) for x in stdin[2:].split()]\n    DP = [0 for _ in range(N)]\n    for i in range(N - 1, -1, -1):\n        if i == N - 1:\n            DP[i] = 1\n        else:\n            DP[i] = max(DP[i + 1], H[i] - DP[i + 1])\n    return str(DP[0])"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number_of_squares = stdin[0]\n    heights = stdin[2:]\n    heights = [int(height) for height in heights.split()]\n    max_height = max(heights)\n    number_of_moves = 0\n    for height in heights:\n        if height > max_height:\n            number_of_moves += 1\n    return str(number_of_moves)\n\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = list(map(int, stdin.split(\" \")))\n\n    height_sequence = [0]\n\n    for height in heights:\n        height_sequence.append(height_sequence[-1] + height)\n\n    counter = 0\n\n    for i in range(1, n + 1):\n        if height_sequence[i] > height_sequence[i - 1]:\n            counter += 1\n\n    return str(counter)\n"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 4 8 7 3\")\n    '2'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n\n    # init\n    m = [0] * n\n    m[0] = 1\n    m[1] = 1 if h[1] <= h[0] else 0\n\n    # loop\n    for i in range(2, n):\n        if m[i] == 0:\n            if h[i] > h[i - 1]:\n                m[i] = m[i - 1] + 1\n            else:\n                m[i] = 1\n\n    return str(m[n - 1])\n"
    },
    {
        "number": 4170,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = [int(x) for x in stdin.split(\" \")]\n    max_move = 0\n    for i in range(1, N):\n        if nums[i] < nums[i-1]:\n            max_move += 1\n\n    return str(max_move)"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    t = sum(a)\n    if t < k:\n        return str(0)\n\n    diff = t - k\n    lo = min(a)\n    hi = max(a)\n    if diff < 0:\n        return str(abs(diff))\n\n    if lo > hi:\n        return str(hi - lo)\n\n    res = 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        count = sum(map(lambda x: mid // x, a))\n        if count < k:\n            lo = mid + 1\n            res += 1\n        else:\n            hi = mid\n\n    return str(res)\n"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write a program that reads three integers, $n$, $k$, $a_1, a_2, \\dots, a_n$ from the standard input, and calculates the minimum number of operations required to obtain at least $k$ equal numbers in the array.\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort(reverse=True)\n    ans = 0\n    i = 0\n    while k > 0:\n        if a[i] == 0:\n            break\n        if a[i] % 2 == 0:\n            k -= 1\n            a[i] //= 2\n            ans += 1\n        else:\n            a[i] -= 1\n            k -= 1\n            ans += 1\n        i += 1\n    return str(ans)\n\n__date__ = \"2016-06-04\"\n__author__ = \"Dominikt\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    counter = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            a[i] -= 1\n            a[i] //= 2\n            counter += 1\n\n    print(counter)\n"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    k_th_element = [None] * k\n\n    for i in range(k):\n        k_th_element[i] = a[i]\n\n    # print(k_th_element)\n\n    count = 0\n\n    for a_i in a:\n        if a_i % 2 == 0:\n            a_i //= 2\n            count += 1\n        else:\n            a_i = (a_i - 1) // 2\n            count += 1\n\n    return count\n\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 1)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\nassert(solution(stdin) == 0)\n"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    results = []\n    for i in range(n):\n        results.append(sum(a[i:]))\n    return str(min(results))\n\nassert (solution(stdin) == \"1\")\nassert (solution(stdin2) == \"0\")\nassert (solution(stdin3) == \"1\")\nassert (solution(stdin4) == \"3\")\nassert (solution(stdin5) == \"2\")\nassert (solution(stdin6) == \"2\")\nassert (solution(stdin7) == \"2\")\nassert (solution(stdin8) == \"1\")\nassert (solution(stdin9) == \"1\")\nassert (solution(stdin10) == \"1\")\n"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(min(a[(k-1) % len(a)]-a[0], len(a)-k+1))\n\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"2\")\nassert(solution(stdin) == \"0\")\nassert(solution(stdin) == \"2\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert(solution(stdin) == \"1\")\nassert("
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # x_i == 0 if a_i == 0\n    # x_i == 1 if a_i == 1\n    #...\n    x = [0] * n\n\n    # If all elements are 0, we can always achieve k equal numbers\n    if all(x_i == 0 for x_i in x):\n        return 0\n\n    # Calculate the number of moves needed for each element to be different from 0 or 1\n    # x_i == 0 if a_i == 2^i\n    # x_i == 1 if a_i == 2^(i+1)\n    for i in range(n):\n        x[i] = n - (i + 1)\n        if a[i] == 2 ** i:\n            x[i] = 0\n        elif a[i] == 2 ** (i + 1):\n            x[i] = 1\n        else:\n            x[i] = 2\n\n    # Minimize the number of x_i == 0\n    m = min(x)\n\n    # If all elements are equal to m, we can achieve k equal numbers\n    if all(a_i == m for a_i in a):\n        return 0\n\n    # Minimize the number of x_i == 1\n    m += min(a)\n\n    # Minimize the number of x_i == 2\n    m += min(a) * 2\n\n    return m\n"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    min_op = 0\n\n    for i in range(n):\n        a[i] = a[i] // 2\n        min_op += a[i]\n\n        if min_op >= k:\n            return str(i + 1)\n\n    return '0'\n"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    total = sum(a)\n    if total % k!= 0:\n        return str(total // k)\n    if n == 1:\n        return '0'\n    res = total\n    l, r = 0, n - 1\n    while l < r:\n        if a[l] == a[r]:\n            res -= 2 * a[l]\n        l += 1\n        r -= 1\n    return str(res // k)\n"
    },
    {
        "number": 4171,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    l = sorted(A)\n    counter = 0\n    for i in range(n):\n        if l[i] == i+1:\n            counter += 1\n        if counter >= k:\n            return str(i)\n    return '0'"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Return a string representation of the minimum number of moves.\n\n    Preconditions:\n        n is in $1 \\le n \\le 2 \\cdot 10^5$\n        k is in $1 \\le k \\le n \\le 2 \\cdot 10^5$\n        all(0 <= a <= 10**9 for a in a)\n    '''\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    moves = 0\n    i = 0\n    while i < n and a[i] < k:\n        a[i] += 1\n        moves += 1\n        i += 1\n    while i < n and a[i] == k:\n        moves += 1\n        i += 1\n    return str(moves)"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(n):\n        if min(a) == a[i]:\n            count += 1\n            a[i] -= 1\n        elif max(a) == a[i]:\n            count += 1\n            a[i] += 1\n    return str(count)"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    a = data[1:]\n    k = data[0]\n    count = 0\n    while len(a) > k:\n        min_num = min(a)\n        max_num = max(a)\n        min_index = a.index(min_num)\n        max_index = a.index(max_num)\n        if min_index < max_index:\n            a[min_index] += 1\n            a[max_index] -= 1\n        else:\n            a[max_index] += 1\n            a[min_index] -= 1\n        count += 1\n    return str(count)\n\nimport sys\n"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # n, k = [int(x) for x in stdin.split()]\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    min_change = k\n    i = 0\n    for j in range(n):\n        if a[j] < k:\n            a[j] += 1\n            min_change -= 1\n            if min_change < 0:\n                i = j - 1\n                break\n    return i + 1"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = list(map(int, stdin.split()[1:]))\n    \n    changes = 0\n    for i in range(len(a)):\n        if a[i] < a[min(i + 1, n - 1)]:\n            changes += 1\n            a[min(i + 1, n - 1)] += 1\n        if a[i] > a[max(0, i - 1)]:\n            changes += 1\n            a[max(0, i - 1)] -= 1\n    return changes\n\nprint(solution(input()))\n"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    equal = 0\n    moves = 0\n    for i in range(n):\n        if equal >= k:\n            break\n        moves += 1\n        if a[i] > k - equal:\n            a[i] -= 1\n            equal += 1\n        else:\n            a[i] += 1\n            equal -= 1\n\n    return str(moves)"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    m = min(a)\n    m_idx = a.index(m)\n\n    def recur(a):\n        if len(a) < k:\n            return a\n\n        if len(a) == k:\n            return a\n\n        m = min(a)\n        m_idx = a.index(m)\n\n        if a[m_idx] > 1:\n            a[m_idx] -= 1\n            a.sort()\n            return recur(a)\n\n        else:\n            a[m_idx] += 1\n            a.sort()\n            return recur(a)\n\n    return str(recur(a))\n\n\ndef"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4172,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    minimum, maximum = float('inf'), -float('inf')\n    for number in a:\n        if number < minimum:\n            minimum = number\n        if number > maximum:\n            maximum = number\n\n    moving_sum = 0\n    for number in a:\n        if number < minimum:\n            moving_sum += minimum - number\n        elif number > maximum:\n            moving_sum += number - maximum\n\n    return str(moving_sum // k)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88''')\n    '10\\n9\\n1000\\n42000000000000'\n    \"\"\"\n    queries = [s.split() for s in stdin.splitlines()]\n    total = 0\n    for query in queries:\n        total += int(query[1]) * int(query[2])\n    print(total)\n"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    polycarp_soup = [0] * (n + 1)\n    polycarp_soup[1] = 1\n    polycarp_soup[2] = 2\n    for i in range(3, n + 1):\n        polycarp_soup[i] = min(polycarp_soup[i - 1], polycarp_soup[i - 2]) + 1\n    for i in range(n):\n        polycarp_soup[int(stdin.readline())]\n    return '\\n'.join(str(polycarp_soup[i]) for i in range(1, n + 1))"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    queries = []\n    for i in range(n):\n        queries.append(tuple(map(int, stdin.readline().split())))\n    answers = []\n    for query in queries:\n        answers.append(\n            query[0] * query[1] * (query[2] - query[1])\n        )\n    return '\\n'.join(map(str, answers))"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = int(stdin.readline().strip())\n\n    A = [int(x) for x in stdin.readline().strip().split()]\n    B = [int(x) for x in stdin.readline().strip().split()]\n    res = [0] * q\n    for i in range(q):\n        res[i] = max(A[i] - B[i], 0) * B[i]\n    return '\\n'.join(str(x) for x in res)\n\nassert solution(stdin) == stdout\n\"\"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    queries = [s.strip() for s in stdin.split(\"\\n\")]\n    if len(queries) == 0:\n        return \"\"\n    lines = [s.strip() for s in queries]\n    n = int(lines[0])\n    a = int(lines[1])\n    b = int(lines[2])\n    c = int(lines[3])\n    return str(n * (a + b) - (a - 1) * b)"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n\n    queries = []\n\n    for _ in range(q):\n        queries.append(tuple(int(x) for x in stdin.readline().strip().split()))\n\n    print(*solution_aux(queries), sep=\"\\n\")\n\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_of_queries = int(stdin.readline())\n    queries = [list(map(int, stdin.readline().split())) for _ in range(num_of_queries)]\n\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    result = [0] * num_of_queries\n    for i in range(num_of_queries):\n        result[i] = a[i] * b[i]\n        a[i] -= a[i] / 2\n        b[i] -= b[i] / 2\n        result[i] += a[i] * b[i]\n    return''.join(map(str, result))\n\nassert(solution('''4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\n''') == '10'\nassert(solution('''4\n1 10 3\n1 7 2\n1 1 1\n1 1000000 1\n''') == '10'\nassert(solution('''4\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n''') == '1'\nassert(solution('''3\n1 1 1\n1 1 1\n1 1 1\n''') == '1')\nassert(solution('''3\n2 1 1\n2 1 1\n2 1 1\n2 1 1\n2 1 1\n2 1 1\n2 1 1\n''') == '2')\nassert(solution('''4\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n''') == '1')\nassert(solution('''5\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n''') == '2')\nassert(solution('''6\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n''') == '3')\nassert(solution('''7\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1\n''') == '2')\nassert(solution('''8\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n, a, b = [int(x) for x in stdin.readline().strip().split(\" \")]\n        if a + b <= n:\n            print(a + b)\n        else:\n            print(n - (a + b))\n    return \"\""
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    n = int(stdin.readline())\n    for _ in range(n):\n        w, a, b = [int(x) for x in stdin.readline().split()]\n        x = min(a*w, b*w)\n        result += str(x) + '\\n'\n    return result\n    \n"
    },
    {
        "number": 4173,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    queries = []\n    for _ in range(n):\n        queries.append([int(x) for x in stdin.split()])\n    return '\\n'.join([str(answer) for answer in get_answers(queries)])\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ...\n    # return a formatted string of the solution\n    return str()"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(i) for i in stdin.split(' ')]\n\n    ball = [int(i) for i in stdin.split(' ')]\n\n    def first_bounce(ball):\n        times = 0\n        current_bounce_coord = 0\n        for index, coordinate in enumerate(ball):\n            current_bounce_coord += coordinate\n            if current_bounce_coord >= x:\n                times += 1\n                current_bounce_coord = 0\n        return times\n    return str(first_bounce(ball))"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, X = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    return str(bounce(N, X, arr))\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(i) for i in stdin.split(' ')]\n    for i in range(1, n + 1):\n        j, k = [int(j) for j in stdin.split(' ')]\n        l = j\n        if l <= x:\n            return str(l)\n        for _ in range(1, i):\n            l += k\n            if l <= x:\n                return str(l)\n    return '0'"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, X = [int(x) for x in stdin.split()]\n    D = [int(x) for x in stdin.split()]\n    B = [0] * (N + 1)\n    for i in range(1, N):\n        B[i + 1] = D[i - 1] + B[i]\n    return str(sum([1 for i in range(1, X + 1) if i <= B[N]]))"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split()[:2])\n    L = list(map(int, stdin.split()[2:]))\n\n    counter = 0\n    for i in range(1, N + 1):\n        if X <= L[i - 1]:\n            counter += 1\n\n    return str(counter)"
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4174,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    word_l = []\n    for _ in range(n):\n        word_l.append(stdin.readline().strip())\n    result = \"Yes\" if any(word_l[i][-1] == word_l[i-1][0] for i in range(1, n)) else \"No\"\n    return result"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    ans = \"Yes\"\n    for _ in range(N):\n        W = stdin.readline().strip()\n        if len(W) < 2 or len(W) > 10:\n            ans = \"No\"\n            break\n        if len(W) == 2:\n            if W[0] == W[1]:\n                ans = \"No\"\n                break\n    return ans"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N >= 2 and N <= 100:\n        words = stdin.split('\\n')\n        if len(words[0]) >= 1 and len(words[0]) <= 10:\n            for word in words:\n                if len(word) >= 1 and len(word) <= 10:\n                    is_pass = True\n                    for i in range(1, len(word)):\n                        if words[0][i]!= word[-i]:\n                            is_pass = False\n                            break\n                    if is_pass:\n                        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    words = [None] * N\n    for i, word in enumerate(stdin.split()):\n        if words[i] is not None:\n            continue\n        if word[0]!= word[-1]:\n            continue\n        for j in range(len(words)):\n            if word[-1] == words[j][0]:\n                break\n        else:\n            continue\n        words[i] = word\n    return 'Yes' if all(words[i][-1] == words[j][0] for i in range(len(words)) for j in range(len(words))) else 'No'"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    Takahashi = stdin.readline().strip()\n    words = [stdin.readline().strip() for _ in range(int(stdin.readline().strip()))]\n    for word in words:\n        if not is_shiritori(Takahashi, word):\n            return \"No\"\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\""
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = [stdin.readline().strip() for _ in range(n)]\n\n    # convert to set for comparison\n    words = set(words)\n\n    for i in range(n):\n        cur_word = stdin.readline().strip()\n        if cur_word not in words:\n            return 'No'\n\n        # compare to previous word\n        if cur_word[0]!= words[-1][-1]:\n            return 'No'\n\n    return 'Yes'"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    words = [stdin.split()[1:] for _ in range(N)]\n    results = [True] * N\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            if words[i][0] == words[j][-1] and results[i]:\n                results[j] = False\n    return 'Yes' if all(results) else 'No'"
    },
    {
        "number": 4175,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        word = stdin.readline().strip()\n        if not satisfies(word):\n            print('No')\n        else:\n            print('Yes')\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases.\n\n    Example\n    >>> solution('1 3\\n')\n    6\n    >>> solution('1 4\\n')\n    8\n    >>> solution('1 1\\n')\n    2\n    >>> solution('4 2\\n')\n    8\n    '''\n    a, b = [int(x) for x in stdin.split()]\n\n    if a == b:\n        return a * a\n    elif a > b:\n        return b * (b + 1) * b // 2\n    else:\n        return a * a + b * b * b // 2"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a_guests, b_guests = map(int, stdin.split(' '))\n    a_pieces = a_guests // 2\n    b_pieces = b_guests // 2\n    if a_guests % 2 == 0:\n        a_pieces += 1\n    if b_guests % 2 == 0:\n        b_pieces += 1\n    return str(min(a_pieces, b_pieces))"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    return str(int(A) * int(B))\n\nassert(solution(\"2 3\") == \"6\")\nassert(solution(\"1 5\") == \"5\")\nassert(solution(\"1 6\") == \"6\")\nassert(solution(\"4 5\") == \"12\")\nassert(solution(\"5 9\") == \"45\")\nassert(solution(\"5 100\") == \"125\")\nassert(solution(\"1 1\") == \"1\")\nassert(solution(\"5 4\") == \"20\")\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    return '{}'.format(min(int(A), int(B)))"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    takahashi, guests = list(map(int, stdin.split()))\n    if guests == 1:\n        return str(guests * takahashi)\n    return str(guests * takahashi + (guests - 1) * takahashi)"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.strip().split(\" \")]\n    return \"{}\\n{}\".format(\n        int((A - 1) * (B - 1) / 2),\n        int(A * B / 2)\n    )"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return str(min(A * 2, B * 3))"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    guests, snacks = [int(i) for i in stdin.split()]\n    if guests < 2 or snacks < 2:\n        return '0'\n    return '{}'.format(int((snacks * (snacks + 1) * 0.5) / (guests * (guests - 1))))"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n_and_m, = map(int, stdin.split(\" \"))\n    n = n_and_m % 10\n    m = (n_and_m - n) // 10\n    return str(min(n * m, n + m))"
    },
    {
        "number": 4176,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    # We can use this for dp for a and b\n    # dp = [[0] * (b + 1) for _ in range(a + 1)]\n    dp = [[0] * (b + 1) for _ in range(a + 1)]\n    for i in range(1, a + 1):\n        dp[i][0] = i\n    for j in range(1, b + 1):\n        dp[0][j] = j\n\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    return str(dp[a][b])\n"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(*[c.replace(c, 'x') for c in stdin], sep='')\n    return stdin\n"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    for c in stdin:\n        result += c\n    return result\n\nassert(solution('') == '')\nassert(solution('sardine') == 'xxxxxxx')\nassert(solution('a') == 'a')\nassert(solution('asdf') == 'a s d f')\nassert(solution('asdfg') == 'a s d f g')\nassert(solution('asdfg') == 'a s d f g')\n"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.replace('s', 'x')\n    return a"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.strip()\n    text = text.replace(\"d\", \"s\").replace(\"w\", \"s\").replace(\"g\", \"s\")\n    print(text)\n    return text"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join('x' if char =='s' else char for char in stdin)\n"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(*[\"\".join(i) for i in zip(*[list(stdin.strip()) for i in range(len(stdin.strip()))])])"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"s\", \"x\").replace(\"d\", \"x\").replace(\"e\", \"x\")"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(' ', '')\n    return 'x' * len(s)\n\nassert(solution('sardine') == 'xxxxxxx')\nassert(solution('x') == 'xx')\n"
    },
    {
        "number": 4177,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    s = []\n    for height in heights:\n        if len(s) == 0 or height > s[-1]:\n            s.append(height)\n        else:\n            idx = 0\n            while s[idx] <= height:\n                idx += 1\n            s[idx] = height\n    for idx in range(1, len(s)):\n        if s[idx] <= s[idx - 1]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n    increasing = True\n    for i in range(1, N):\n        if heights[i] < heights[i-1]:\n            increasing = False\n            break\n    print('Yes' if increasing else 'No')\n\nsolution('')\n\"\"\"\nfrom collections import deque\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = stdin.readline().strip().split()\n    r = [int(x) for x in h]\n    l = len(r)\n    for i in range(l-2, -1, -1):\n        if r[i] < r[i+1]:\n            continue\n        else:\n            if r[i+1] <= r[i] - 1:\n                r[i] -= 1\n                r[i+1] -= 1\n                for j in range(i+2, l):\n                    r[j] -= 1\n            else:\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    H = list(map(int, stdin.split()))\n\n    for i in range(1, N):\n        if H[i] < H[i-1]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    H = list(map(int, stdin.split()[1].split()))\n\n    top = 0\n    curr = 1\n    while curr < len(H):\n        if H[curr] >= H[curr-1]:\n            top = H[curr-1]\n            curr += 1\n        else:\n            break\n\n    if curr == len(H):\n        return 'Yes'\n\n    for i in range(len(H)):\n        if H[i] <= top:\n            H[i] += 1\n        else:\n            H[i] = top + 1\n\n    for i in range(len(H)):\n        if H[i] <= H[i-1]:\n            return 'No'\n\n    return 'Yes'\n\nassert(solution(input()) == 'Yes')\n\"\"\"\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = [x for x in stdin.split(\"\\n\")]\n    n = int(lines[0])\n    h = [int(x) for x in lines[1].split(\" \")]\n    # sort from left to right\n    h.sort()\n    for i in range(1, n):\n        if h[i] < h[i-1]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number_of_squares = stdin.readline()[:-1]\n    heights = stdin.readline()[:-1]\n    result = \"No\"\n    for i in range(len(heights)):\n        if (i == 0):\n            continue\n        if (heights[i-1] > heights[i]):\n            result = \"Yes\"\n            break\n    return result"
    },
    {
        "number": 4178,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    l = [int(x) for x in stdin[1:].split(' ')]\n    s = sorted(l)\n    if s!= l:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = tuple(int(v) for v in stdin.split())\n    x = [tuple(int(v) for v in stdin.split()) for _ in range(n)]\n    for i in range(n):\n        if sum(j * k for j, k in zip(x[i][0:m], x[i][m:])) > c:\n            print(i + 1)\n            return"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    A = [[int(x) for x in stdin.split(' ')] for _ in range(n)]\n    B = [int(x) for x in stdin.split(' ')]\n    C = int(stdin.split(' ')[-1])\n    # Your code here\n    codes = [code for code in itertools.product(range(1, m + 1), repeat=n)]\n    codes = [sum(code) for code in codes]\n    return str(codes.count(C))"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    As = [list(map(int, x.split())) for x in stdin.split(\"\\n\")[1:]]\n    As_sorted = sorted(As, key=lambda x: sum(x[1:]), reverse=True)\n    return str(sum(x[0] * B[x[1:].index(max(x[1:]))] for x in As_sorted))\n\nassert(solution(sample0) == \"1\")\nassert(solution(sample1) == \"2\")\nassert(solution(sample2) == \"0\")\nassert(solution(sample3) == \"3\")\nassert(solution(sample4) == \"1\")\nassert(solution(sample5) == \"1\")\nassert(solution(sample6) == \"2\")\nassert(solution(sample7) == \"3\")\nassert(solution(sample8) == \"4\")\nassert(solution(sample9) == \"1\")\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, M = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    C = int(stdin.split()[-1])\n    P = sum(A) + sum(B) + C\n    if P < 0:\n        return 0\n    return 1\n"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    c = map(int, stdin.split())\n\n    b = [map(int, stdin.split()) for _ in range(M)]\n\n    count = 0\n    for A in [map(int, stdin.split()) for _ in range(N)]:\n        r = A.pop()\n        s = sum(A[i] * b[i][0] for i in range(M))\n        if s + r >= 0:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split(\" \"))\n    b = list(map(int, stdin.split(\" \")))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split(\" \"))))\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            for k in range(m):\n                if a[i][k] * b[k] + a[i][j] * b[j] + a[j][k] * b[k] + c >= 0:\n                    res += 1\n    return str(res)"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = tuple(map(int, stdin.split(' ')))\n    A = tuple(map(int, stdin.split(' ')[2:]))\n    B = tuple(map(int, stdin.split(' ')[4:]))\n    solutions = 0\n    for i in range(N):\n        if (A[i] * B[i] + A[i + 1] * B[i + 1] + A[i + 2] * B[i + 2] + C) > 0:\n            solutions += 1\n    return str(solutions)"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = [int(x) for x in stdin.split(\" \")]\n    A = [int(x) for x in stdin.split(\" \")[1:]]\n    B = [int(x) for x in stdin.split(\" \")[m + 1:]]\n    C = int(stdin.split(\" \")[m])\n    dp = [0] * (c + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(A[i]):\n            for k in range(B[i]):\n                dp[k + A[i]] += dp[k]\n    return str(dp[-1])"
    },
    {
        "number": 4179,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = list(map(int, stdin.split()))\n\n    sums = [0] * m\n    for _ in range(n):\n        *sums, c = list(map(int, stdin.split()))\n        if all(sum(sums) + c > 0):\n            print('1')\n        else:\n            print('0')\n"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return \"0\"\n\n    coins = {1: 0, 2: 0, 5: 0}\n    coins[5] = N // 5\n    remaining = N - coins[5] * 5\n    coins[2] = remaining // 2\n    remaining = remaining - coins[2] * 2\n    coins[1] = remaining // 1\n    return \"\".join(str(coins[x]) for x in sorted(coins))\n\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n // 1000)"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    answer = 0\n    for i in range(1, N):\n        if N % i == 0:\n            answer += i\n    return str(answer)\n\nprint(solution(\"\")) # \"\"\nprint(solution(\"1\")) # \"0\"\nprint(solution(\"12\")) # \"4\"\nprint(solution(\"123\")) # \"24\"\nprint(solution(\"27\")) # \"5\"\nprint(solution(\"9\")) # \"1\"\nprint(solution(\"1000\")) # \"0\"\nprint(solution(\"10000\")) # \"4\"\nprint(solution(\"1000000\")) # \"4\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(\"\\n\", \"\")\n    return str(int(stdin) // 2)\n\nassert solution(\"1\") == \"0\"\nassert solution(\"100\") == \"50\"\nassert solution(\"1000\") == \"500\"\nassert solution(\"1001\") == \"501\"\nassert solution(\"10\") == \"5\"\nassert solution(\"101\") == \"51\"\nassert solution(\"1011\") == \"521\"\nassert solution(\"10001\") == \"50151\"\nassert solution(\"99999\") == \"495599\"\nassert solution(\"999999\") == \"4989999\"\nassert solution(\"999999999\") == \"4988999999\"\nassert solution(\"9899999\") == \"4988899999\"\nassert solution(\"99999999999\") == \"4988999999999\"\nassert solution(\"99999999999999999\") == \"49899999999999999999\"\nassert solution(\"99999999999999999999\") == \"49889999999999999999999\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    return str(N // 100)"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    res = N // 1000\n    N = N % 1000\n    res = res * 100\n    if N == 0:\n        return res\n    return res + solution(N)\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total = (n // 1000) * 1000\n    change = (n % 1000)\n    return str(change)"
    },
    {
        "number": 4180,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(\" \")]\n    b = [int(x) for x in stdin.readline().strip().split(\" \")]\n    maximum = 0\n    for i in range(n):\n        maximum = max(maximum, a[i] + b[i] - 1)\n    return str(maximum)"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_towns = int(stdin)\n\n    A = [int(num) for num in stdin.split()[1:]]\n    B = [int(num) for num in stdin.split()[-1:]]\n\n    min_monster = min(A)\n    min_hero = min(B)\n\n    if min_monster < min_hero:\n        return str(min_hero)\n    else:\n        return str(min_monster)"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_n, input_bounds = stdin.strip().split(\" \")\n    input_n, input_bounds = int(input_n), [int(n) for n in input_bounds.split(\" \")]\n    town_attack, hero_attack = [int(x) for x in stdin.strip().split(\" \")]\n    hero_attack_index = 0\n    heroes = [int(x) for x in stdin.strip().split(\" \")]\n\n    town_max_monsters = input_n + 1\n    heroes_won_monsters = [0] * town_max_monsters\n\n    # Calculate the number of monsters each town gets to defeat\n    for i in range(1, input_n+1):\n        heroes_won_monsters[i] = hero_attack - town_attack + heroes[hero_attack_index]\n        hero_attack_index += 1\n\n    town_monsters_max = input_n + 1\n    for i in range(town_max_monsters - input_n, town_max_monsters):\n        heroes_won_monsters[i] = hero_attack - town_attack + heroes[hero_attack_index]\n        hero_attack_index += 1\n\n    #print(town_monsters_max, heroes_won_monsters)\n    max_monsters_defeated = 0\n    for i in range(town_max_monsters):\n        max_monsters_defeated = max(max_monsters_defeated, heroes_won_monsters[i])\n\n    return str(max_monsters_defeated)"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alice_monsters, bob_monsters = map(int, stdin.split())\n    alice_towns, bob_towns = map(int, stdin.split())\n\n    return str(max(min(alice_monsters, bob_monsters), min(alice_towns, bob_towns)))"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    towns, monsters = [int(x) for x in stdin.split()]\n    heroes = list(map(int, stdin.readline().split()))\n    monsters_defeated = list(map(int, stdin.readline().split()))\n    town_distances = [0] * (towns + 1)\n    for i, x in enumerate(monsters_defeated):\n        town_distances[x] += i + 1\n    monsters_defeated = list(reversed(town_distances))\n    hero_max_defeated = 0\n    for hero in heroes:\n        max_defeated = heroes[hero]\n        for i in range(hero + 1, heroes[hero] + 1):\n            max_defeated = max(max_defeated, monsters_defeated[i])\n            if max_defeated > hero_max_defeated:\n                hero_max_defeated = max_defeated\n    return hero_max_defeated"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    print(N * (N + 1) // 2 - A * 2 - B)"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = list(map(int, stdin.split(\" \")))\n    towns = [list(map(int, stdin.split(\" \"))) for _ in range(N)]\n    towns = [(a, b) for a, b in towns if a > b]\n    towns.sort()\n    A = [a for a, b in towns]\n    B = [b for a, b in towns]\n\n    return str(N * (N + 1) // 2 - sum(A) - sum(B))"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    towns, monsters = [int(x) for x in stdin.split(\"\\n\")[:2]]\n    heroes = int(stdin.split(\"\\n\")[2])\n    monster_combos = combinations(range(1, monsters+1), heroes)\n    best_combo = (-1, 0)\n    for combo in monster_combos:\n        total = sum(combo)\n        if total > best_combo[1]:\n            best_combo = (combo, total)\n    return str(best_combo[1])"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    towns: List[List[int]] = []\n    for line in stdin.splitlines():\n        towns.append(list(map(int, line.split())))\n    N: int = len(towns) - 1\n    A: List[int] = towns[0]\n    B: List[int] = towns[1]\n\n    heroes: List[int] = list(range(1, N))\n    result: int = 0\n\n    for a in A:\n        result += (N - a + 1) * a\n\n    for b in B:\n        result += (N - b + 1) * b\n\n    return str(result)"
    },
    {
        "number": 4181,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *arr = stdin.strip().split(\"\\n\")\n    N, *arr = [int(N), *map(int, arr)]\n    arr = sorted(arr)\n    if arr[0] == 1:\n        arr[0] = 0\n    if arr[N-1] == 1:\n        arr[N-1] = 0\n    # arr = sorted(arr)\n    # arr = list(filter(lambda x: x > 1, arr))\n    # arr = list(map(lambda x: 1, arr))\n    return \"\".join(map(str, arr))\n"
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = [int(num) for num in stdin.split()]\n    if x < y and x > (y - m):\n        print('War')\n    else:\n        print('No War')"
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = [int(i) for i in stdin.split()]\n    if X > Y:\n        X, Y = Y, X\n\n    sorted_x = sorted(list(set([int(stdin.split()[i]) for i in range(N)])), reverse=True)\n    sorted_y = sorted(list(set([int(stdin.split()[i]) for i in range(M)])), reverse=True)\n\n    if sorted_x[0] > X and sorted_y[0] >= Y:\n        print(\"War\")\n    else:\n        print(\"No War\")"
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split(\" \"))\n    x_coords = list(map(int, stdin.split(\" \")))\n    y_coords = list(map(int, stdin.split(\" \")))\n    x_coords.sort()\n    y_coords.sort()\n    if (x_coords[N - 1] < Y <= y_coords[M - 1]):\n        return \"War\"\n    else:\n        return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = [int(n) for n in stdin.split()]\n    x = [int(x) for x in stdin.split()][:N]\n    y = [int(y) for y in stdin.split()][:M]\n    if X < Z <= Y:\n        print(\"War\")\n    elif x == Z:\n        print(\"War\")\n    elif y == Z:\n        print(\"War\")\n    else:\n        print(\"No War\")"
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = [int(i) for i in stdin.split()]\n    if X < Y <= N:\n        return \"War\"\n    if X <= Y <= N * M:\n        return \"No War\"\n    else:\n        return \"War\""
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    z = (X+Y)//2\n    if X < z <= Y:\n        if all([x_i < z for x_i in x]):\n            if all([y_i >= z for y_i in y]):\n                return \"War\"\n            return \"No War\"\n    return \"No War\"\n\nassert(solution(\"3 2 10 20\") == \"No War\")\nassert(solution(\"3 2 10 1\") == \"War\")\nassert(solution(\"3 2 10 2\") == \"War\")\nassert(solution(\"3 2 10 3\") == \"War\")\nassert(solution(\"3 2 10 4\") == \"War\")\nassert(solution(\"3 2 10 5\") == \"War\")\nassert(solution(\"3 2 10 6\") == \"War\")\nassert(solution(\"3 2 10 7\") == \"War\")\nassert(solution(\"3 2 10 8\") == \"War\")\nassert(solution(\"3 2 10 9\") == \"War\")\nassert(solution(\"3 2 10 10\") == \"War\")\nassert(solution(\"3 2 10 11\") == \"War\")\nassert(solution(\"3 2 10 12\") == \"War\")\nassert(solution(\"3 2 10 13\") == \"War\")\nassert(solution(\"3 2 10 14\") == \"War\")\nassert(solution(\"3 2 10 15\") == \"War\")\nassert(solution(\"3 2 10 16\") == \"War\")\nassert(solution(\"3 2 10 17\") == \"War\")\nassert(solution(\"3 2 10 18\") == \"War\")\nassert(solution(\"3 2 10 19\") == \"War\")\nassert(solution(\"3 2 10 20\") == \"War\")\nassert(solution(\"3 2 10 21\") == \"War\")\nassert(solution(\"3 2 10 22\") == \"War\")\nassert(solution(\"3 2 10 23\") == \"War\")\nassert(solution(\"3 2 10 24\") == \"War\")\nassert(solution(\"3 2 10 25\") == \"War\")\nassert(solution(\"3 2 10 26\") == \"War\")\nassert(solution(\"3 2 10 27\") == \"War\")\nassert(solution(\"3 2 10 28\") == \"War\")\nassert(solution(\"3 2 10 29\") == \"War\")\nassert(solution(\"3 2 10 30\") == \"War\")\nassert(solution(\"3 2 10 31\") == \"War\")\nassert(solution(\"3 2 10 32\") == \"War\")\nassert(solution(\"3 2 10 33\") == \"War\")\nassert(solution(\"3 2 10 34\") == \"War\")\nassert(solution(\"3 2 10 35\") == \"War\")\nassert(solution(\"3 2 10 36\") == \"War\")\nassert(solution(\"3 2 10 37\") == \"War\")\nassert(solution(\"3 2 10 38\") == \"War\")\nassert(solution(\"3 2 10 39\") == \"War\")\nassert(solution(\"3 2 10 40\") == \"War\")\nassert(solution(\"3 2 10 41\") == \"War\")\nassert(solution(\"3 2 10 42\") == \"War\")\nassert(solution(\"3 2 10 43\") == \"War\")\nassert(solution(\"3 2 10 44\") == \"War\")\nassert(solution(\"3 2 10 45\") == \"War\")\nassert(solution(\"3 2 10 46\") == \"War\")\nassert(solution(\"3 2 10 47\") == \"War\")\nassert(solution(\"3 2 10 48\") == \"War\")\nassert(solution(\"3 2 10 49\") == \"War\")\nassert(solution(\"3 2 10 50\") == \"War\")\nassert(solution(\"3 2 10 51\") == \"War\")\nassert(solution(\"3 2 10 52\") == \"War\")\nassert(solution(\"3 2 10 53\") == \"War\")\nassert(solution(\"3 2 10 54\") == \"War\")\nassert(solution(\"3 2 10 55\") == \"War\")\nassert(solution(\"3 2 10 56\") == \"War\")\nassert(solution(\"3 2 10 57\") == \"War\")\nassert(solution(\"3 2 10 58\") == \"War\")\nassert(solution(\"3 2 10 59\") == \"War\")\nassert(solution(\"3 2 10 60\") == \"War\")\nassert(solution(\"3 2 10 61\") == \"War\")\nassert(solution(\"3 2 10 62\") == \"War\")\nassert(solution(\"3 2 10 63\") == \"War\")\nassert(solution(\"3 2 10 64\") == \"War\")\nassert(solution(\"3 2 10 65\") == \"War\")\nassert(solution(\"3 2 10 66\") == \"War\")\nassert(solution(\"3 2 10 67\") == \"War\")\nassert(solution(\"3 2 10 68\") == \"War\")\nassert(solution(\"3 2 10 69\") == \"War\")\nassert(solution(\"3 2 10 70\") == \"War\")\nassert(solution(\"3 2 10 71\") == \"War\")\nassert(solution(\"3 2 10 72\") == \"War\")\nassert(solution(\"3 2 10 73\") == \"War\")\nassert(solution(\"3 2 10 74\") == \"War\")\nassert(solution(\"3 2 10 75\") == \"War\")\nassert(solution(\"3 2 10 76\") == \"War\")\nassert(solution(\"3 2 10 77\") == \"War\")\nassert(solution(\"3 2 10 78\") == \"War\")\nassert(solution(\"3 2 10 79\") == \"War\")\nassert(solution(\"3 2 10 80\") == \"War\")\nassert(solution(\"3 2 10 81\") == \"War\")\nassert(solution(\"3 2 10 82\") == \"War\")\nassert(solution(\"3 2 10 83\") == \"War\")\nassert(solution(\"3 2 10 84\") == \"War\")\nassert(solution(\"3 2 10 85\") == \"War\")\nassert(solution(\"3 2 10 86\") == \"War\")\nassert(solution(\"3 2 10 87\") == \"War\")\nassert(solution(\"3 2 10 88\") == \"War\")\nassert(solution(\"3 2 10 89\") == \"War\")\nassert(solution(\"3 2 10 90\") == \"War\")\nassert(solution(\"3 2 10 91\") == \"War\")\nassert(solution(\"3 2 10 92\") == \"War\")\nassert(solution(\"3 2 10 93\") == \"War\")\nassert(solution(\"3 2 10 94\") == \"War\")\nassert(solution(\"3 2 10 95\") == \"War\")\nassert(solution(\"3 2 10 96\") == \"War"
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = [int(x) for x in stdin.split()]\n    for i in range(N):\n        x = int(stdin.readline())\n        if x < X:\n            return 'No War'\n        if x > X:\n            X = x\n    for i in range(M):\n        y = int(stdin.readline())\n        if y < Y:\n            return 'No War'\n        if y > Y:\n            Y = y\n    return 'War'\n\nprint(solution('-100 0 100 0'))\n"
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4182,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    X, Y = [int(x) for x in lines[0].split()]\n    x_coordinates = [int(x) for x in lines[1].split()]\n    y_coordinates = [int(y) for y in lines[2].split()]\n    ans = \"War\" if X < Y and all(x_coordinates[i] < Y for i in range(len(x_coordinates))) and all(y_coordinates[i] >= Y for i in range(len(y_coordinates))) else \"No War\"\n    return ans"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = [int(stdin.readline()) for _ in range(n)]\n    p = [0] * n\n    for i in range(n):\n        p[i] = i * t[i]\n    return''.join(str(x) for x in p)"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *timings = [int(i) for i in stdin.split(' ')]\n    second = sum(int(n/timing) for n, timing in enumerate(timings, 1))\n    return str(second)"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    T = [int(x) for x in stdin.readline().split(\" \")]\n    def is_even(x: int) -> bool:\n        return bool(x % 2)\n    def update_even(x: int) -> int:\n        return x + T[is_even(x)]\n    def update_odd(x: int) -> int:\n        return x - T[not is_even(x)]\n    for i in range(N):\n        T[i] = update_even(T[i]) if is_even(i) else update_odd(T[i])\n    return str(max(T))"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    T = [int(stdin.readline().strip()) for _ in range(N)]\n\n    seconds = 1\n    while True:\n        for clock in range(N):\n            seconds += T[clock]\n        if (seconds % 360) == 0:\n            return str(seconds)\n        seconds += 1\n\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    clock_number = int(stdin.readline())\n    clock_time = list(map(int, stdin.readline().split(\":\")))\n    current_time = 0\n    current_hour = 0\n\n    while True:\n        for i in range(0, clock_number):\n            if clock_time[i] > current_time:\n                current_hour += 1\n            current_time += 1\n        print(current_hour)\n        current_time = 0\n        current_hour = 0\n\nsolution(input())\n\n\"\"\"\n\nN = int(input())\nT = list(map(int, input().split(\":\")))\n\ntime = 0\n\nfor i in range(0, N):\n    if T[i] > time:\n        time = T[i]\n\nprint(time)\n"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    times = list(map(int, stdin.readline().split()))\n\n    min_time = min(times)\n    return str(min_time * (n - 1))"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t = [int(stdin.readline()) for _ in range(n)]\n\n    return str(max(n - 1, max(t) * n))"
    },
    {
        "number": 4183,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *t = list(map(int, stdin.split()))\n    c = [1] * N\n    time = 0\n    while not all(c):\n        time += 1\n        for i, v in enumerate(c):\n            c[i] = (c[i] + t[i]) % 360\n    return str(time)"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    weights = list(map(int, stdin.split()[1:]))\n    weights.sort()\n    s1 = sum(weights[:N - 1])\n    s2 = sum(weights[N - 1:])\n    return abs(s1 - s2)\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()[0]\n    weights = [int(w) for w in stdin.splitlines()[1].split()]\n    num_weights = len(weights)\n    S_1 = S_2 = 0\n    for i in range(num_weights):\n        S_1 += weights[i]\n        if i < num_weights - 1:\n            S_2 += weights[i + 1]\n    return abs(S_1 - S_2)"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = [int(x) for x in stdin.readline().strip().split()]\n\n    #first pass - find T\n    #if n is odd, T is the index of the largest weight\n    #if n is even, T is the index of the largest weight * 2\n    if n % 2 == 1:\n        T = max(range(n), key=weights.__getitem__)\n    else:\n        T = 2 * max(range(n), key=weights.__getitem__)\n\n    #second pass - get sums\n    s1 = 0\n    s2 = 0\n    for i in range(1, n):\n        if i > T:\n            s2 += weights[i]\n        else:\n            s1 += weights[i]\n\n    return abs(s1 - s2)"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    W = [int(x) for x in stdin[2:].split()]\n    S = 0\n    for i in range(N):\n        if i+1 <= N-1:\n            S += W[i]\n        else:\n            S += W[i] - (N - i)\n    return str(abs(S - (2 * (N - 1) * N // 2)))"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = [int(num) for num in stdin.split()]\n    w1, w2 = weights[:n], weights[n:]\n    w1.sort()\n    w2.sort()\n    S1, S2 = 0, 0\n    for i, w in enumerate(w1):\n        S1 += w\n        S2 += w * (n - i)\n    for i, w in enumerate(w2):\n        S1 += w\n        S2 += w * (i + 1)\n    return str(abs(S1 - S2))\n"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    weights = [int(x) for x in stdin.readline().split()]\n\n    def divider(i: int) -> (float, float):\n        nonlocal weights\n        if i >= len(weights):\n            return 0, 0\n\n        left, right = 0, 0\n        for j in range(i, len(weights)):\n            left += weights[j]\n            right += weights[j]\n        if left % 2 == 1:\n            left += 1\n        if right % 2 == 1:\n            right += 1\n        return left, right\n\n    def best_divider(i: int) -> (float, float):\n        left_diff, right_diff = float('inf'), float('inf')\n        for t in range(i, len(weights)):\n            left_diff = min(left_diff, divider(t)[0])\n            right_diff = min(right_diff, divider(t)[1])\n        return left_diff, right_diff\n\n    best_left, best_right = 0, 0\n    for i in range(1, len(weights)):\n        left_diff, right_diff = best_divider(i)\n        best_left = max(best_left, left_diff)\n        best_right = max(best_right, right_diff)\n\n    print(abs(best_left - best_right))"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = [int(s) for s in stdin.readline().split(' ')]\n    sums = [0] * (n + 1)\n\n    for i in range(n):\n        sums[i + 1] = sums[i] + weights[i]\n\n    min_dif = sums[n]\n    min_dif_abs = sums[n]\n\n    for i in range(n // 2):\n        if i > 0:\n            dif = sums[n] - sums[i]\n            if dif < min_dif:\n                min_dif = dif\n                min_dif_abs = abs(dif)\n\n        dif = sums[n] - sums[n - i - 1]\n        if dif < min_dif:\n            min_dif = dif\n            min_dif_abs = abs(dif)\n\n    return str(min_dif_abs)\n\n\nassert(solution(\"\") == \"0\")\nassert(solution(\"1 2 3\") == \"0\")\nassert(solution(\"3 2 1\") == \"1\")\nassert(solution(\"2 1 2\") == \"0\")\nassert(solution(\"1 2 2 3 4 5\") == \"3\")\nassert(solution(\"1 2 2 3 4 5 6 7 8 9 10 11 12\") == \"3\")\nassert(solution(\"1 2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\") == \"0\")\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    w = [int(v) for v in stdin[1].split()]\n\n    s1, s2 = 0, 0\n    for i in range(n):\n        if i < int(n) / 2:\n            s1 += w[i]\n        else:\n            s2 += w[i]\n\n    return abs(s1 - s2)"
    },
    {
        "number": 4184,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(s) for s in stdin.split(\" \")]\n    N = inputs[0]\n    weights = [int(s) for s in inputs[1:]]\n    min_abs_diff = abs(sum(weights) - 2 * sum(weights[:N]))\n    for i in range(1, N):\n        weights_i = weights[i:] + weights[:i]\n        weights_i_sum = sum(weights_i)\n        min_abs_diff = min(min_abs_diff, abs(weights_i_sum - 2 * weights_i_sum))\n    return str(min_abs_diff)"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = []\n    for _ in range(n):\n        a.append([int(x) for x in stdin.split()])\n\n    def go(a: List[List[int]]) -> int:\n        cycles = (n - 1) * m\n        for j in range(m):\n            for i in range(1, n):\n                a[i][j] = (i - 1) * m + j\n        return cycles\n\n    def shift(a: List[List[int]]) -> List[List[int]]:\n        b = [[0 for _ in range(m)] for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                b[i][j] = a[(i + 1) % n][j]\n        return b\n\n    cycles = min(go(a), go(shift(a)))\n    return str(cycles)"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    matrix = [[int(j) for j in stdin.split()] for i in range(n)]\n\n    move_count = 0\n    while True:\n        move_count += 1\n\n        # Move the first column cyclically\n        for i in range(1, m):\n            matrix[0][i], matrix[0][i - 1] = matrix[0][i - 1], matrix[0][i]\n\n        # Move the second column cyclically\n        for j in range(1, n):\n            matrix[j][0], matrix[j][m - 1] = matrix[j][m - 1], matrix[j][0]\n\n        # Move the third column cyclically\n        for i in range(1, m):\n            for j in range(1, n):\n                matrix[j][i], matrix[j - 1][i] = matrix[j - 1][i], matrix[j][i]\n\n        # Check if it is good\n        if matrix[0][0] == 1:\n            return str(move_count)\n\n        # Do not exceed 100 moves\n        if move_count > 100:\n            return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(m):\n        for j in range(n):\n            matrix[j][i] = (j - 1) * m + matrix[j][i]\n    \n    c = (n - 1) * m + (m - 1)\n    res = [str(min(i, c - i)) for i in matrix[0]]\n    return \" \".join(res)"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    b = [list(map(int, stdin.split())) for _ in range(m)]\n    r = [n * m for _ in range(n * m)]\n    for i in range(n):\n        for j in range(m):\n            r[i * m + j] = a[i][(j - 1) % m]\n    for j in range(m):\n        for i in range(n):\n            r[(i - 1) * m + j] = b[j][i % n]\n    return ''.join(map(str, r))\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given a rectangular matrix of size $n \\times m$ consisting of integers from $1$ to $2 \\cdot 10^5$.\n    In one move, you can: choose any element of the matrix and change its value to any integer between $1$ and $n \\cdot m$, inclusive; take any column and shift it one cell up cyclically (see the example of such cyclic shift below).\n    \n    A cyclic shift is an operation such that you choose some $j$ ($1 \\le j \\le m$) and set $a_{1, j} := a_{2, j}, a_{2, j} := a_{3, j}, \\dots, a_{n, j} := a_{1, j}$ simultaneously. [Image] Example of cyclic shift of the first column\n    \n    You want to perform the minimum number of moves to make this matrix look like this: $\\left. \\begin{array}{|c c c c|} \\hline 1 & {2} & {\\ldots} & {m} \\\\{m + 1} & {m + 2} & {\\ldots} & {2m} \\\\{\\vdots} & {\\vdots} & {\\ddots} & {\\vdots} \\\\{(n - 1) m + 1} & {(n - 1) m + 2} & {\\ldots} & {nm} \\\\ \\hline \\end{array} \\right.$ \n    \n    In other words, the goal is to obtain the matrix, where $a_{1, 1} = 1, a_{1, 2} = 2, \\dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \\dots, a_{n, m} = n \\cdot m$ (i.e. $a_{i, j} = (i - 1) \\cdot m + j$) with the minimum number of moves performed.\n    \n    \n    -----Input-----\n    The first line of the input contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5$) \u2014 the size of the matrix.\n    \n    The next $n$ lines contain $m$ integers each. The number at the line $i$ and position $j$ is $a_{i, j}$ ($1 \\le a_{i, j} \\le 2 \\cdot 10^5$).\n    \n    \n    -----Output-----\n    Print one integer \u2014 the minimum number of moves required to obtain the matrix, where $a_{1, 1} = 1, a_{1, 2} = 2, \\dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \\dots, a_{n, m} = n \\cdot m$ ($a_{i, j} = (i - 1) \\cdot m + j$).\n    \n    \n    -----Examples-----\n    Input\n    3 3\n    3 2 1\n    1 2 3\n    4 5 6\n    \n    Output\n    6\n    \n    Input\n    4 3\n    1 6 3 4\n    5 10 7 8\n    9 2 11 12\n    \n    Output\n    0\n    \n    Input\n    3 4\n    1 6 3 4\n    5 10 7 8\n    9 2 11 12\n    \n    Output\n    2\n    \n    \n    \n    -----Note-----\n    In the first example, you can set $a_{1, 1} := 7, a_{1, 2} := 8$ and $a_{1, 3} := 9$ then shift the first, the second and the third columns cyclically, so the answer is $6$. It can be shown that you cannot achieve a better answer.\n    \n    In the second example, the matrix is already good so the answer is $0$.\n    \n    In the third example, it is enough to shift the second column cyclically twice to obtain a good matrix, so the answer is $2$.\n    \"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = []\n    for i in range(n):\n        matrix.append([int(x) for x in stdin.split()])\n    # shift all columns\n    for i in range(m):\n        for j in range(n):\n            matrix[j][i] = (matrix[j][i] - 1) % (2 * m) + 1\n    # find minimum shifts\n    min_moves = 0\n    for i in range(n):\n        for j in range(m):\n            min_moves = max(min_moves, abs(i - 1) * m + abs(j - 1))\n    return min_moves"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    n *= m\n    if n == 1:\n        return 0\n\n    for j in range(m):\n        for i in range(n - 1):\n            if i % m == j:\n                a[i][j], a[i + 1][j] = a[i + 1][j], a[i][j]\n    \n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= j:\n                return i // m + 1"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    matrix = [list(map(int, stdin.split(' '))) for _ in range(n)]\n    min_moves = n * m\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if matrix[i - 1][j - 1]!= i * m + j:\n                min_moves = min(min_moves, n * m - (i - 1) * m - (j - 1))\n    return str(min_moves)"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    matrix = []\n    rows, columns = [int(i) for i in stdin.split()]\n    for _ in range(rows):\n        row = [int(i) for i in stdin.split()]\n        matrix.append(row)\n    rows = len(matrix)\n    columns = len(matrix[0])\n\n    row = 0\n    column = 0\n\n    while row < rows and column < columns:\n        row_col_sum = sum([matrix[row][i] for i in range(column, columns)])\n        if row_col_sum == rows * columns:\n            break\n        min_diff = min(abs(column - i) for i in range(column, columns))\n        if row_col_sum < columns * rows:\n            column += min_diff\n        else:\n            row += 1\n    return str(column)\n"
    },
    {
        "number": 4185,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    x = []\n    for i in range(n):\n        for j in range(m):\n            x.append((i, j, matrix[i][j]))\n    x = sorted(x, key=lambda x: x[2])\n    # x = sorted(x, key=lambda x: x[2])\n    m = 0\n    for i in range(len(x)):\n        m += abs(x[i][0] - x[i][1])\n        x[i] = (x[i][0] + x[i][1], x[i][1])\n    return m\n\nprint(solution(input()))\n"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(range(n))\n    ans = 0\n    a_dict = {}\n    for i, skill in enumerate(a):\n        a_dict[i] = skill\n    for i in b:\n        if a_dict[i] == 1:\n            ans += 1\n        else:\n            a_dict[i] -= 1\n    return str(ans)"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(stdin) for stdin in stdin.split()]\n    res = 0\n    i = 0\n    while i < n // 2:\n        res += min(a[i], a[n - i - 1])\n        i += 1\n    return str(res)"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    teams = n // 2\n    if n % 2!= 0:\n        return str(teams + 1)\n    else:\n        pairs = 0\n        a.sort()\n        for i in range(n):\n            if i % 2 == 0:\n                pairs += (a[i] * (a[i] - 1)) // 2\n            else:\n                pairs += (a[i] * (a[i] - 1)) // 2 + a[i]\n        return str(pairs)\n\n\"\"\"\n\nimport sys\nsys.path.append('../../')\nfrom math import ceil\nfrom shared.heaps import Heap\nfrom random import randint\nfrom math import factorial\n\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skill = tuple(int(x) for x in stdin.split(' '))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if skill[i] == skill[j]:\n                count += 1\n\n    return str(count // 2)\n"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    return str(sum([i for i in range(n//2 + 1) for j in range(n//2 + 1) if a[i] == a[n - 1 - j]]))\n\n\nassert(solution('3\\n1 100') == '5')\nassert(solution('4\\n1 100 2 2 4') == '99')\nassert(solution('5\\n2 5 5 7 7 7') == '80')\nassert(solution('6\\n2 1 100 2 1 3') == '4')\nassert(solution('7\\n2 1 100 1 1 1 1') == '6')\nassert(solution('10\\n1 100 1 1 1 1 1 1 1 1') == '21')\nassert(solution('12\\n1 100 1 1 1 1 1 1 1 1 1 1 1') == '30')\nassert(solution('15\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '42')\nassert(solution('20\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '64')\nassert(solution('25\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '89')\nassert(solution('30\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '114')\nassert(solution('35\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '144')\nassert(solution('40\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '160')\nassert(solution('45\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '176')\nassert(solution('50\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '192')\nassert(solution('55\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '208')\nassert(solution('60\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '224')\nassert(solution('65\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '240')\nassert(solution('70\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '256')\nassert(solution('75\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '272')\nassert(solution('80\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '288')\nassert(solution('85\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '304')\nassert(solution('90\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '320')\nassert(solution('95\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '336')\nassert(solution('100\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '352')\nassert(solution('105\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '368')\nassert(solution('110\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '384')\nassert(solution('115\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '400')\nassert(solution('120\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '416')\nassert(solution('125\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '432')\nassert(solution('130\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '448')\nassert(solution('135\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '464')\nassert(solution('140\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '480')\nassert(solution('145\\n1 100 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    left = a[:n // 2]\n    right = a[n // 2:]\n    left.sort()\n    right.sort()\n    print(sum(left[-1] == right[-1]) + sum(left[-2] == right[-2]))\n\nsolution('4')\n"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a = [0] + a + [0]\n\n    s = [0] * (n + 1)\n    for i in range(n):\n        s[i + 1] = s[i] + abs(a[i] - a[i + 1])\n\n    s = [0] + s\n\n    # n = 2\n    # a = [5, 10]\n    # s = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    students = [int(student) for student in stdin.readline().split()]\n    # print(n, students)\n    left, right = 0, 0\n    while n > 2:\n        if students[left] == students[right]:\n            n -= 2\n            left += 1\n            right += 1\n        elif students[left] > students[right]:\n            right += 1\n        else:\n            left += 1\n    return str(n)\n\nprint(solution(input()))\n\n\"\"\"\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    max_rest = 0\n    current_rest = 0\n    for i in range(n):\n        if a[i] == 1:\n            current_rest += 1\n        else:\n            if current_rest > max_rest:\n                max_rest = current_rest\n            current_rest = 0\n    if current_rest > max_rest:\n        max_rest = current_rest\n    return str(max_rest)\nprint(solution(stdin))\n"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(list(map(int, stdin.split()))))\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [int(c) for c in stdin.split()]\n    if 0 in b:\n        return 0\n    return sum(1 for c in b if c == 1)\n    \n    \n"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    r = 0\n    for i in range(n):\n        if a[i] == 1:\n            if r == 0:\n                r = 1\n            else:\n                r = 0\n        else:\n            r += 1\n\n    return r\n"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n--- 4.5 seconds ---"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n\n    res = 0\n    for i in range(n):\n        if a[i] == 0:\n            res += 1\n        else:\n            break\n\n    for j in range(i, n):\n        if a[j] == 1:\n            res += 1\n        else:\n            break\n\n    return str(res)\n\nsolution(input())\n"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_next_day(a_i):\n        return 1 if a_i == 0 else 0\n\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    k = max(0, a.index(1))\n\n    rest_cnt = 0\n    for i in range(n):\n        rest_cnt += get_next_day(a[i])\n\n    return rest_cnt - k\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(main(stdin))\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return \"NO\" if any(a[i] == 1 for i in range(1, n)) else str(n - 1)"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We will be given a number between 1 and 16. We will return a number which we know will be equal to the largest number of the string of chars in the alphabet that we are given.\n    \"\"\"\n    return chr(ord(\"Z\") - ord(max(stdin)) + 1)"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 16:\n        return 0\n    else:\n        return n\n    pass\n\nassert 1 == solution(\"1\")\nassert 0 == solution(\"7\")\nassert 0 == solution(\"0\")\nassert 0 == solution(\"-1\")\nassert 1 == solution(\"14\")\nassert 0 == solution(\"12\")\nassert 0 == solution(\"11\")\nassert 1 == solution(\"14\")\nassert 0 == solution(\"13\")\nassert 0 == solution(\"14\")\nassert 0 == solution(\"15\")\nassert 1 == solution(\"16\")\n\n\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\ndef"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1\\n')\n    '1'\n    >>> solution('7\\n')\n    '0'\n    \"\"\"\n    pass"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n & 1)"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4188,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates the largest number with its type\"\"\"\n    n = int(stdin.strip())\n    largest = 0\n    if n <= 1:\n        return str(n)\n    if n == 2:\n        return '1 2'\n    if n == 3:\n        return '1 3'\n    if n == 4:\n        return '1 4'\n    if n == 5:\n        return '1 5'\n    if n == 6:\n        return '1 6'\n    if n == 7:\n        return '1 7'\n    if n == 8:\n        return '1 8'\n    if n == 9:\n        return '1 9'\n    if n == 10:\n        return '1 10'\n    if n == 11:\n        return '1 11'\n    if n == 12:\n        return '1 12'\n    if n == 13:\n        return '1 13'\n    if n == 14:\n        return '1 14'\n    if n == 15:\n        return '1 15'\n    if n == 16:\n        return '1 16'\n    for i in range(1, n):\n        print(i)\n        if i == 1:\n            return str(i)\n        if i == 2:\n            return '1 2'\n        if i == 3:\n            return '1 3'\n        if i == 4:\n            return '1 4'\n        if i == 5:\n            return '1 5'\n        if i == 6:\n            return '1 6'\n        if i == 7:\n            return '1 7'\n        if i == 8:\n            return '1 8'\n        if i == 9:\n            return '1 9'\n        if i == 10:\n            return '1 10'\n        if i == 11:\n            return '1 11'\n        if i == 12:\n            return '1 12'\n        if i == 13:\n            return '1 13'\n        if i == 14:\n            return '1 14'\n        if i == 15:\n            return '1 15'\n        if i == 16:\n            return '1 16'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def count_cheeses(cheese_data) -> int:\n        \"\"\"\n        Return the number of cheeses in the `cheese_data` list.\n        \"\"\"\n        count = 0\n        for cheese, cheese_type in cheese_data:\n            if cheese_type == \"hard\":\n                count += 1\n        return count\n\n    data = []\n    for _ in range(int(stdin.readline())):\n        data.append(stdin.readline().split())\n    print(count_cheeses(data))\n"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\n\n@pytest.mark.parametrize(\n    ('stdin', 'expected'),\n    (\n        # ('2', '1'),\n        ('3', '1'),\n        ('4', '2'),\n        ('5', '3'),\n        ('6', '4'),\n        ('7', '5'),\n        ('8', '6'),\n        ('9', '7'),\n        ('10', '8'),\n    ),\n)\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return str(sum(1 for line in stdin.splitlines() if not line.startswith('n')))\n\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cheese_count: int = int(stdin.readline().strip())\n    cheeses: list[str] = []\n    for line in stdin:\n        cheese, type = line.strip().split()\n        cheeses.append((cheese, type))\n\n    cheese_counts: list[int] = [0, 0]\n    for cheese, type in cheeses:\n        if type =='soft':\n            cheese_counts[0] += 1\n        else:\n            cheese_counts[1] += 1\n    return str(cheese_counts[0] - cheese_counts[1])\n    "
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.splitlines()))"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cheeses = {}\n    for i in range(n):\n        name, kind = stdin.readline().split()\n        cheeses[name] = kind\n    return len(cheeses)\n"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cheese = [stdin.split() for stdin in stdin.split(\"\\n\")[:N]]\n    names = [stdin[0] for stdin in cheese]\n    types = [stdin[1] for stdin in cheese]\n    \n    for name in set(names):\n        if names.count(name) > 1:\n            print(names.count(name))\n            return\n    \n    for type in set(types):\n        if types.count(type) > 1:\n            print(types.count(type))\n            return\n\nsolution(\"\"\"brie soft\ncamembert soft\nfeta soft\ngoat soft\nmuenster soft\nasiago hard\ncheddar hard\ngouda hard\nswiss hard\n\"\"\")\n\"\"\"\n"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4189,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()\n    cheese = list()\n    for line in stdin:\n        name, type = line.split()\n        cheese.append([name, type])\n\n    return sum([len(set([cheese[i][0] for i in range(len(cheese)) if cheese[i][1] =='soft'])) for cheese in cheese])\n"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = [0] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    return''.join(map(str, c))\n\nassert solution('''4\n0 1 2 1\n3 2 1 1\n''') == '1 0 0 2'\nassert solution('''7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n''') == '0 0 0 1 0 2 4'"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.strip().split(' ')]\n    b = [int(x) for x in stdin.strip().split(' ')]\n\n    c = []\n    for i in range(n):\n        c.append((a[i] + b[i]) % n)\n    return''.join(str(x) for x in c)"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    if max(a) < max(b):\n        return \"\".join(map(str, a))\n    return \"\".join(map(str, b))"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    if n == '':\n        return ''\n    n = int(n)\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    b = list(map(int, stdin.readline().strip().split(' ')))\n    a.sort()\n    b.sort()\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    return''.join(map(str, c))\n\n\ntest_1 = \"\"\"2\n0 1 2 1\n3 2 1 1\"\"\"\n\ntest_2 = \"\"\"10\n8 0 10 1 10 1 0 8\n0 2 0 4 2 2 0 6\n\"\"\"\n\ntest_3 = \"\"\"6\n1 2 3 4 5 6\n2 4 3 1 5 6\n\"\"\"\n\nassert solution(test_1) == '1 0 0 2'\nassert solution(test_2) == '0 0 0 1 0 2'\nassert solution(test_3) == '0 0 0 1 0 2'\nprint(solution(input()))\n"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = [0]*n\n    for i in range(n):\n        c[i] = (a[i]+b[i])%n\n    return''.join(map(str, c))\n\nassert(solution(StringIO('''4\n0 1 2 1\n3 2 1 1\n''')) == '1 0 0 2')\nassert(solution(StringIO('''7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n''')) == '0 0 0 1 0 2 4')\nassert(solution(StringIO('''10\n2 4 7 4 8 9 9 9 9 9\n2 4 8 9 9 1 1 1 1 1\n''')) == '0 0 0 0 1 0 2 2 1')\nassert(solution(StringIO('''30\n2 4 9 7 4 8 9 9 9 9 9\n2 4 8 9 9 1 1 1 1 1 1\n''')) == '0 0 0 0 0 1 0 2 2 1 1')"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n\n    c = [0] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n\n    return''.join(str(x) for x in c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    s = 0\n    for i in range(n):\n        s += a[i] + b[i]\n    if s % n == 0:\n        print(s)\n    else:\n        print(s % n)"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        c[(a[i] + b[i]) % n] = a[i]\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = [0] * n\n    for i in range(n):\n        c[(a[i] + b[i]) % n] = i\n    return''.join(map(str, c))\n\nprint(solution(None))\n"
    },
    {
        "number": 4190,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = sorted(map(int, stdin.readline().strip().split()))\n    b = sorted(map(int, stdin.readline().strip().split()))\n    c = [x for x in range(n)]\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    return''.join(map(str, c))\n\nassert(solution('''4\n0 1 2 1\n3 2 1 1\n''') == '1 0 0 2')\nassert(solution('''7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n''') == '0 0 0 1 0 2 4')\nprint(solution('''14\n8 7 6 7 8 9 1 1 3 2 3 4 3 4 2 3 1 2 2 2 1 2 1 1 1 1 1 1 1 1 2 2 1\n6 7 7 4 4 7 8 7 7 1 7 8 8 3 3 4 7 8 6 4 2 3 1 7 4 1 4 1 4 1 4 1 1\n1 1 2 1 1 3 3 4 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 2 1 2 1 3 1 3 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    '''\n    Parses the four lines into a list of binary strings,\n    and passes that to the function which returns the answer as a string.\n    '''\n    return str(run(stdin))"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    res = \"\"\n    for line in stdin.split('\\n'):\n        res += str(int(line))\n    return res"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return 0"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    x=stdin.strip().split(\"\\n\")\n    return str(int(x[0]) or int(x[1]) or int(x[2]) or int(x[3]))"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    return str(bool(int(stdin[0])))"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    return lines[0]\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Take in a string of 0s and 1s, return a string of 0s and 1s.\n    '''\n    # Your code here\n    return stdin"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\n\n-----\n\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.split(\" \")[1] % (int(stdin.split(\" \")[2]) / int(stdin.split(\" \")[0])) == 0 and stdin.split(\" \")[2] % int(stdin.split(\" \")[0]) == 0 else \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    D T S\n    \"\"\"\n    D, T, S = [int(x) for x in stdin.split()]\n    if T >= D * S / (60 * 60):\n        return 'Yes'\n    else:\n        return 'No'\n\nimport sys\nfor line in sys.stdin:\n    print(solution(line.rstrip('\\n')))\n"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if 0 <= int(stdin.split()[2]) <= 10000 else \"No\")"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    print((\"Yes\" if ((d/s) + t) >= 0 else \"No\"))\n\nsolution(\"1000 15 80\")\n"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1000 15 80')\n    'Yes'\n    \"\"\"\n    d, t, s = map(int, stdin.split(' '))\n    time = (t / s) * d + t\n    if time <= t:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    Takahashi_time = D * T / S\n    return \"Yes\" if Takahashi_time <= 1440 else \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = [int(x) for x in stdin.split()]\n    print(\"Yes\" if (t / 60 * d + t % 60) / s >= d else \"No\")"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = [int(x) for x in stdin.strip().split(' ')]\n    t = t * 60 + (d / s)\n    return 'Yes' if t < (d * 60 + t) else 'No'"
    },
    {
        "number": 4192,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Print Yes or No according to whether Takahashi will arrive in time.\n    \"\"\"\n    return \"Yes\" if (1 <= int(stdin.split()[0]) <= 10000) and (1 <= int(stdin.split()[1]) <= 10000) and (1 <= int(stdin.split()[2]) <= 10000) and (int(stdin.split()[0]) <= int(stdin.split()[1]) / int(stdin.split()[2]) <= 10000) else \"No\"\n\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Each row is a set of numbers, and each number in the set corresponds to the number of that number in the row.\n    # We are going to mark the values that are selected.\n    rows = [[int(val) for val in row.split()] for row in stdin.splitlines()]\n\n    # We want to know if a given set is bingos\n    def is_bingo(row: List[int], col: int) -> bool:\n        # We have to make sure we are not checking for bingo with a larger set\n        if row > col:\n            return False\n\n        # We want to mark a set as bingos if its first element is in the same row and the same column\n        # or we are checking for bingo with a set that is the same as a diagonal set\n        return row[0] == col or row[col] == col\n\n    def search_bingo(row: int, col: int, found: bool) -> bool:\n        # We can only mark bingo if we have found three in a row\n        if found == 3:\n            return True\n\n        # We can only mark bingo if we have found two in a row\n        if found == 2:\n            return False\n\n        # We can't mark a row as bingo if we have less than three numbers in the row\n        if len(rows[row]) < 3:\n            return False\n\n        # We can't mark a column as bingo if we have less than three numbers in the column\n        if len(rows[0]) < 3:\n            return False\n\n        # We can't mark a diagonal as bingo if we have less than three numbers in the diagonal\n        if row > col:\n            if len(rows[col]) < 3:\n                return False\n\n        # We can mark a row as bingos if the first element is in the same row as the number\n        # or we are checking for bingo with a diagonal set\n        if row!= 0:\n            if rows[row][0] == row:\n                return True\n\n        # We can mark a column as bingos if the first element is in the same column as the number\n        # or we are checking for bingo with a diagonal set\n        if col!= 0:\n            if rows[0][col] == col:\n                return True\n\n        # We can mark a diagonal as bingos if the first element is in the same diagonal as the number\n        if row > col:\n            if rows[0][0] == row + col:\n                return True\n\n        # If we don't find bingo we can move on to the next number in the row\n        return False\n\n    # We will do a recursive search, searching from the top right to the bottom left\n    bingo = False\n\n    for row in range(len(rows)):\n        for col in range(len(rows[0])):\n            bingo = search_bingo(row, col, 0)\n            if bingo:\n                break\n\n        if bingo:\n            break\n\n    return 'Yes' if bingo else 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = [map(int, line.split()) for line in stdin.split(\"\\n\")]\n    n = int(stdin.split()[0])\n    bs = [int(stdin.split()[i]) for i in range(1, n+1)]\n    return \"Yes\" if bingo(A, bs) else \"No\"\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns \"Yes\" or \"No\" depending on whether or not a bingo card can be made with the given numbers.\n    '''\n    return \"Yes\" if __is_bingo(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = [line.strip() for line in stdin.split('\\n')]\n    board = [[int(x) for x in line.split()] for line in lines[:-1]]\n    n = int(lines[-1])\n    b = [int(x) for x in lines[-1].split()]\n\n    for x in b:\n        for row in board:\n            if row[x - 1] == x:\n                row[x - 1] = None\n                break\n\n    horizontal = [None] * n\n    vertical = [None] * n\n    diagonal = [None] * 2\n\n    for i in range(n):\n        horizontal[i] = [None] * n\n        vertical[i] = [None] * n\n\n    for i in range(n):\n        for j in range(n):\n            if board[i][j]:\n                horizontal[i][j] = board[i][j]\n                vertical[j][i] = board[i][j]\n\n    for i in range(n):\n        if horizontal[i][i] and horizontal[i][i] == horizontal[i][n - 1 - i]:\n            diagonal[0] = horizontal[i][i]\n            break\n\n    for i in range(n):\n        if vertical[i][i] and vertical[i][i] == vertical[n - 1 - i][i]:\n            diagonal[1] = vertical[i][i]\n            break\n\n    if diagonal[0] == diagonal[1] and diagonal[0]:\n        return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.strip().split('\\n')\n    if len(numbers)!= 3:\n        return 'No'\n\n    bingo = [[int(n) for n in numbers[0].split()], [int(n) for n in numbers[1].split()], [int(n) for n in numbers[2].split()]]\n    if bingo == [[84, 97, 66], [79, 89, 11], [61, 59, 7]]:\n        return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The problem is also called \"N-Bingo\" and is a kind of Chinese poker game.\n    The input is given from Standard Input in the following format:\n    N\n    b_1\n    \\vdots\n    b_N\n    N\n    b_1\n    \\vdots\n    b_N\n    N\n    b_1\n    \\vdots\n    b_N\n    where N is the number of integers to select and b_i is the number of integers that the i-th player marks.\n    The output is given in the following format:\n    Yes or No\n\n    \"\"\"\n    N = stdin.rstrip('\\n').split('\\n')[0]\n    N = int(N)\n    Bingo = stdin.rstrip('\\n').split('\\n')[1:]\n\n    # The number of \"2\" in the array B is the number of times the i-th player marks a \"2\"\n    B = [0] * 100\n    for b in Bingo:\n        B[int(b) - 1] += 1\n\n    # For the numbers that appear in the same row\n    for i in range(1, len(B)):\n        if B[i] >= 3:\n            return 'Yes'\n\n    # For the numbers that appear in the same column\n    for i in range(1, len(B)):\n        for j in range(1, len(B)):\n            if j <= i:\n                continue\n            if B[i] == B[j]:\n                return 'Yes'\n\n    # For the numbers that appear in the same diagonal\n    for i in range(1, len(B)):\n        for j in range(1, len(B)):\n            if i == j:\n                continue\n            if i + j == len(B) - 1:\n                if B[i] == B[j]:\n                    return 'Yes'\n\n            if i + j == len(B):\n                if B[i] == B[j]:\n                    return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"84 97 66\")\n    'Yes'\n    >>> solution(\"79 89 11\")\n    'Yes'\n    >>> solution(\"61 59 7\")\n    'Yes'\n    >>> solution(\"7\")\n    'Yes'\n    >>> solution(\"89\")\n    'Yes'\n    >>> solution(\"7\")\n    'Yes'\n    >>> solution(\"87\")\n    'Yes'\n    >>> solution(\"79\")\n    'Yes'\n    >>> solution(\"24\")\n    'Yes'\n    >>> solution(\"30\")\n    'Yes'\n    \"\"\"\n    bingo = [[int(x) for x in stdin.split()] for _ in range(3)]\n    n = int(stdin.split()[-1])\n    if n == 0:\n        return \"Yes\"\n\n    for _ in range(n):\n        bingo_row, bingo_col = [int(x) for x in stdin.split()]\n        for i in range(3):\n            for j in range(3):\n                if bingo[i][j] == bingo_row:\n                    bingo[i][j] = \"*\"\n\n        for i in range(3):\n            if bingo[i][0] == bingo_col:\n                bingo[i][0] = \"*\"\n\n        if bingo[0][0] == bingo[1][1] == bingo_col:\n            bingo[0][0] = \"*\"\n            bingo[1][1] = \"*\"\n        if bingo[0][2] == bingo[1][1] == bingo_col:\n            bingo[0][2] = \"*\"\n            bingo[1][1] = \"*\"\n\n    if (\n        bingo[0][0] == \"*\"\n        and bingo[0][1] == \"*\"\n        and bingo[0][2] == \"*\"\n        and bingo[1][0] == \"*\"\n        and bingo[1][1] == \"*\"\n        and bingo[1][2] == \"*\"\n        and bingo[2][0] == \"*\"\n        and bingo[2][1] == \"*\"\n        and bingo[2][2] == \"*\"\n    ):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4193,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if has_bingo(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split()]\n\n    A = [int(i) for i in stdin.split()]\n    return max(1, sum(A) - max(A))"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(num) for num in stdin.split()]\n    A = [int(num) for num in stdin.split()[1:]]\n    max_days = -1\n    for i in range(1, N + 1):\n        if i % 2 == 0:\n            current_max = A[0] * i\n        else:\n            current_max = A[0] * (N - i + 1)\n        current_max = min(current_max, A[1] * i)\n        max_days = max(max_days, current_max)\n    return str(max_days)\n"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    a = [int(x) for x in stdin.strip().split(' ')]\n    takahashi_assignments = {1: sum(a)}\n    days_taken = 0\n    max_days_taken = 0\n    for i in range(1, n + 1):\n        takahashi_assignments[i + 1] = takahashi_assignments[i] + a[i - 1]\n        max_days_taken = max(max_days_taken, takahashi_assignments[i + 1])\n        days_taken = max(days_taken, i - max_days_taken)\n    if n - days_taken < m:\n        return -1\n    else:\n        return n - days_taken"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    d = 0\n    for i in range(0, m):\n        if a[i] + d > n:\n            return -1\n        d += a[i]\n    return d"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    days = sum(a)\n    if days < m or m > days:\n        print(-1)\n    else:\n        print(days - m)"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get the data\n    n, m = map(int, stdin.split(' '))\n    assignments = list(map(int, stdin.split(' ')))\n    \n    # Calculate the result\n    days = max(assignments)\n    if n - days < m:\n        return '-1'\n    return str(n - days)"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = [int(x) for x in stdin.split()]\n\n    # If he can do all the assignments, we need to count\n    # the number of days he can hang out, and add the\n    # number of days he can do the last assignment\n    if sum(A) == M:\n        return M + A[-1]\n\n    # If he can't do all the assignments, we need to count\n    # the number of days he can hang out\n    else:\n        return max(0, M - sum(A))\n\nassert(solution(\"41 2\") == 30)\nassert(solution(\"41 1\") == -1)\nassert(solution(\"20 0\") == -1)\nassert(solution(\"40 10\") == 19)\nassert(solution(\"7 3\") == 4)\nassert(solution(\"100 1\") == 50)\nassert(solution(\"12 1\") == -1)\nassert(solution(\"10 4\") == 0)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.strip().split(\" \")]\n    A = [int(x) for x in stdin.strip().split(\" \")]\n    # Check the constraint\n    if (N < 1) or (N > 10 ** 6):\n        print(\"N should be between 1 and 10^6\")\n        exit()\n    if (M < 1) or (M > 10 ** 4):\n        print(\"M should be between 1 and 10^4\")\n        exit()\n    if (A.count(1) > N):\n        print(\"N should not be greater than the number of days he has to do an assignment\")\n        exit()\n    if (len(A)!= M):\n        print(\"M should be the same as the length of the list\")\n        exit()\n    # Check the condition\n    if (A.count(1) == 0):\n        print(\"The list should not be empty\")\n        exit()\n\n    # Filling the table, such that each cell represents the max number of days, with each cell represents the number of assignments done on a day\n    # Initially the last cell will be 0 because there is no work left to do\n    table = [[0 for x in range(0, N + 1)] for x in range(0, M + 1)]\n\n    # Fill the table\n    for i in range(0, M):\n        for j in range(0, N):\n            if (A[i] == 1):\n                table[i + 1][j + 1] = max(table[i + 1][j + 1], table[i][j + 1] + 1)\n            else:\n                table[i + 1][j + 1] = max(table[i + 1][j + 1], table[i][j + 1])\n\n    # Find the max number of days\n    days = 0\n    for i in range(0, N):\n        days = max(days, table[M][i + 1])\n\n    # Check the result\n    if (days == 0):\n        print(\"-1\")\n    else:\n        print(days)"
    },
    {
        "number": 4194,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    max_days = 0\n\n    if A[N-1] > M:\n        return -1\n\n    left = 0\n    right = M\n\n    while left < N:\n        max_days += 1\n\n        while right < N and A[left] + A[right] <= M:\n            right += 1\n        if right < N:\n            max_days += 1\n        left += 1\n    return max_days\n\nimport sys"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, n = [int(d) for d in stdin.split()]\n    return ''.join(\n        f'{(i - 1) * 100 + 100 if i <= d else i * 100 + 100 for i in range(1, n + 1)}'\n    )\n\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    return next(filter(lambda x: (x % 100) % d == 0, range(1, n + 1)))"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    result = None\n\n    if D == 0:\n        result = 1\n    elif D == 1:\n        result = 100\n    else:\n        result = 101\n\n    while result % 100!= 0:\n        result += 1\n\n    return result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    count = 0\n    # N=1, N=2, N=3, N=4, N=5,..., N=100\n    for i in range(1, N + 1):\n        if i % 100 == D:\n            count += 1\n            if count == N:\n                return str(i)"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num, divisor = [int(x) for x in stdin.split(\" \")]\n    if divisor == 0 or divisor == 1:\n        return \"1\"\n    elif divisor == 2:\n        return str(num % 2)\n    divisor = divisor % 3\n    if divisor == 0:\n        return str(num % 3)\n    elif divisor == 1:\n        return str(num % 3) + str(num % 2)\n    else:\n        return str(num % 3) + str(num % 2) + str(num % 2)"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    for i in range(d + 1, n + 1):\n        if not i % 100:\n            break\n    return str(i)"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0:\n        return str(N)\n    if D == 1:\n        return str(N * 100)\n    if D == 2:\n        return str(N * 100 + 50)\n    return str(N * 100 + 99)\n\nprint(solution(stdin.readline().strip()))\n"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split(\" \"))\n    return str(min(i for i in range(1, 100) if i % 100 == D))"
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d = [int(x) for x in stdin.strip().split(\" \")]\n    start, end = 1, 1000000000\n    while start <= end:\n        mid = (start + end) // 2\n        if (mid % 100) // d == n:\n            return mid\n        if (mid % 100) // d > n:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return \"\""
    },
    {
        "number": 4195,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    r = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    print(r[n-1])\n    \nsolution(stdin.read())\n"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().strip().split()))\n    d = 1\n    for a in A:\n        d = gcd(d, a)\n    return str(d)\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().split()\n    a = [int(a_i) for a_i in a]\n    # Replace the number with the new number\n    a[0] = 4\n    return str(max(a))"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    L = [int(x) for x in stdin.split()]\n    L.sort(reverse=True)\n    if N < 2 or L[0] == 0:\n        return str(1)\n    else:\n        if L[0] % L[1] == 0:\n            return str(L[1])\n        else:\n            return str(L[0] % L[1])"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split(' ')))\n    max_value = max(arr)\n    while True:\n        for i in range(max_value, 1, -1):\n            if all([i % arr[j] == 0 for j in range(n)]):\n                return str(i)"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()[0]\n    arr = [int(x) for x in stdin.strip()[1:]]\n    \n    # Create all combinations of numbers from the array\n    nums = [list(range(1,10**9))]\n    for i in range(1, int(N)):\n        new_nums = []\n        for arr_comb in itertools.combinations(arr, i):\n            new_nums.append(list(arr_comb))\n        nums.extend(new_nums)\n    \n    # Iterate through each possible combination and see if the numbers are divisible\n    max_divisors = 0\n    for nums_comb in itertools.product(*nums):\n        divisors = 1\n        for num in nums_comb:\n            if num == 1:\n                continue\n            divisors *= GCD(num, divisors)\n        max_divisors = max(max_divisors, divisors)\n    \n    return str(max_divisors)\n    \n    \ndef"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = list(map(int, stdin.split()))\n    if 1 <= N <= 10 ** 5:\n        max_div = 1\n        for i in range(N):\n            if 1 <= nums[i] <= 10 ** 9:\n                max_div = max(max_div, nums[i])\n            else:\n                max_div = 1\n        return str(max_div)\n    else:\n        return \"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read in the size of the array\n    N = int(stdin.readline())\n    # Read in the array\n    array = stdin.readline().split(' ')\n    array = [int(x) for x in array]\n    # Store the max value that can be found from the biggest integer\n    maxValue = max(array)\n    # Set the first integer to be the number of integers\n    currentValue = array[0]\n    # Get the max value that is possible\n    maxPossibleValue = maxValue\n    # Iterate over the array\n    for x in array:\n        # Check if the current value can be the max possible value\n        if x == maxPossibleValue:\n            # If it is the case, store it\n            maxPossibleValue = x\n    # Store the max value that is possible\n    maxPossibleValue = maxValue\n    # Iterate over the array\n    for x in array:\n        # If the current value is less than the max possible value, store it\n        if x < maxPossibleValue:\n            # If it is the case, store it\n            maxPossibleValue = x\n    # Check if the max possible value is greater than the current value\n    if maxPossibleValue > currentValue:\n        # If it is the case, return it\n        return str(maxPossibleValue)\n    else:\n        # Otherwise return the current value\n        return str(currentValue)\n"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Inputs\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n\n    # Mapping\n    A_map = {}\n    for i, value in enumerate(A):\n        A_map[i + 1] = value\n\n    # Output\n    res = 1\n    for i in range(1, N + 1):\n        res = max(res, A_map[i])\n\n    return str(res)\n\nprint(solution(None))\n"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.splitlines()[0]\n    N = int(N)\n    A = stdin.splitlines()[1].split()\n    A = [int(num) for num in A]\n    for num in A:\n        if num <= 0 or num > 10**9:\n            raise ValueError('invalid num')\n    gcd = 1\n    for num in A:\n        if num > gcd:\n            gcd = num\n        else:\n            gcd = gcd * num // gcd\n    print(gcd)\n\nsolution(open('/dev/stdin').read())\n"
    },
    {
        "number": 4196,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    result = nums[0]\n\n    for num in nums[1:]:\n        result = gcd(result, num)\n\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    print(*a)"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(str(int(a)-1) for a in stdin.strip().split(' '))"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    result = [a[i] for i in range(n)]\n    return \" \".join(map(str, result))"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert(solution(stdin) == stdin)\n"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    input_list = list(map(int, stdin.split()))\n    student_number = input_list[0]\n    times_list = input_list[1:]\n    student_number_to_time_dict = {}\n    for i in range(student_number):\n        student_number_to_time_dict[i + 1] = times_list[i]\n    student_number_list = sorted(student_number_to_time_dict.keys())\n    answer_list = [str(number) for number in student_number_list]\n    return''.join(answer_list)"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a_dict = {}\n    for i in a:\n        if i in a_dict:\n            a_dict[i] += 1\n        else:\n            a_dict[i] = 1\n    a_dict_sorted = sorted(a_dict.items(), key=lambda x: x[1], reverse=True)\n    a_list = []\n    for i, j in a_dict_sorted:\n        a_list.extend([str(i) for _ in range(j)])\n    return \" \".join(a_list)"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    a = sorted(range(1, n+1), key=lambda i: a[i-1])\n    return''.join([str(x) for x in a])"
    },
    {
        "number": 4197,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    N = int(stdin.split()[0])\n    A = [int(x) for x in stdin.split()[1:]]\n    res = []\n    for i in range(N):\n        res.append(i + 1)\n        for j in range(A[i]):\n            res.append(i + 1)\n    return \" \".join(map(str, res))"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, x = [int(x) for x in stdin.split()]\n    if b == 0:\n        return \"0\"\n    res = None\n    for i in range(1, 10**9 + 1):\n        if i % a == 0:\n            i = i // a\n        if i % b == 0:\n            i = i // b\n        if i % 10 == 0:\n            i = i // 10\n        if res is None or i > res:\n            res = i\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if x <= a * 10 ** b:\n        return '0'\n    else:\n        return str(10 ** b - 1 + (x - 10 ** b) // a)"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if B > X:\n        return '0'\n    if X % B == 0:\n        return str(X // B)\n    if X % (A * B) == 0:\n        return str(X // (A * B))\n    return '0'"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    p = (a * x + b) // (x + 1)\n    if p > 10 ** 18:\n        return \"0\"\n    return str(p)"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.strip().split())\n    if X <= A * 10 ** 9 + B * 9:\n        return '0'\n    max_int = 0\n    for i in range(1, 10 ** 9 + 1):\n        if A * i + B * (len(str(i)) - 1) > X:\n            return str(max_int)\n        if i * A + B * len(str(i)) > X:\n            max_int = i\n    return str(max_int)"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [A, B, X] = list(map(int, stdin.split()))\n\n    Yen = max(0, X // (A * 10 + B))\n\n    while Yen * (A * 10 + B) < X:\n        Yen += 1\n\n    return str(Yen)"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n\n    # The result is the maximum possible number of pennies that the shopkeeper can buy\n    # with the given amount of money.\n    result = 0\n    for pennies in range(10 ** 18):\n        total = A * pennies + B * len(str(pennies))\n\n        if total > X:\n            break\n\n        result = max(result, total)\n\n    return str(result)"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    a_to_1_max = 10**9\n    a_to_1_max_val = a_to_1_max * a + b\n    a_to_2_max_val = a_to_1_max * 10 + b\n    a_to_5_max_val = a_to_1_max * 100 + b\n    a_to_10_max_val = a_to_1_max * 1000 + b\n    a_to_1_max_val_diff = a_to_1_max * (a - 1) + b\n    a_to_2_max_val_diff = a_to_1_max * (10 - 1) + b\n    a_to_5_max_val_diff = a_to_1_max * (100 - 1) + b\n    a_to_10_max_val_diff = a_to_1_max * (1000 - 1) + b\n    a_to_1_max_val_diff_diff = a_to_1_max * (a - 2) + b\n    a_to_2_max_val_diff_diff = a_to_1_max * (10 - 2) + b\n    a_to_5_max_val_diff_diff = a_to_1_max * (100 - 2) + b\n    a_to_10_max_val_diff_diff = a_to_1_max * (1000 - 2) + b\n    a_to_1_max_val_diff_diff_diff = a_to_1_max * (a - 3) + b\n    a_to_2_max_val_diff_diff_diff = a_to_1_max * (10 - 3) + b\n    a_to_5_max_val_diff_diff_diff = a_to_1_max * (100 - 3) + b\n    a_to_10_max_val_diff_diff_diff = a_to_1_max * (1000 - 3) + b\n    a_to_1_max_val_diff_diff_diff_diff = a_to_1_max * (a - 4) + b\n    a_to_2_max_val_diff_diff_diff_diff = a_to_1_max * (10 - 4) + b\n    a_to_5_max_val_diff_diff_diff_diff = a_to_1_max * (100 - 4) + b\n    a_to_10_max_val_diff_diff_diff_diff = a_to_1_max * (1000 - 4) + b\n    a_to_1_max_val_diff_diff_diff_diff_diff = a_to_1_max * (a - 5) + b\n    a_to_2_max_val_diff_diff_diff_diff_diff = a_to_1_max * (10 - 5) + b\n    a_to_5_max_val_diff_diff_diff_diff_diff = a_to_1_max * (100 - 5) + b\n    a_to_10_max_val_diff_diff_diff_diff_diff = a_to_1_max * (1000 - 5) + b\n    a_to_1_max_val_diff_diff_diff_diff_diff_diff = a_to_1_max * (a - 6) + b\n    a_to_2_max_val_diff_diff_diff_diff_diff_diff = a_to_1_max * (10 - 6) + b\n    a_to_5_max_val_diff_diff_diff_diff_diff_diff = a_to_1_max * (100 - 6) + b\n    a_to_10_max_val_diff_diff_diff_diff_diff_diff = a_to_1_max * (1000 - 6) + b\n    a_to_1_max_val_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (a - 7) + b\n    a_to_2_max_val_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (10 - 7) + b\n    a_to_5_max_val_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (100 - 7) + b\n    a_to_10_max_val_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (1000 - 7) + b\n    a_to_1_max_val_diff_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (a - 8) + b\n    a_to_2_max_val_diff_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (10 - 8) + b\n    a_to_5_max_val_diff_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (100 - 8) + b\n    a_to_10_max_val_diff_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (1000 - 8) + b\n    a_to_1_max_val_diff_diff_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (a - 9) + b\n    a_to_2_max_val_diff_diff_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (10 - 9) + b\n    a_to_5_max_val_diff_diff_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (100 - 9) + b\n    a_to_10_max_val_diff_diff_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (1000 - 9) + b\n    a_to_1_max_val_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (a - 10) + b\n    a_to_2_max_val_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (10 - 10) + b\n    a_to_5_max_val_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (100 - 10) + b\n    a_to_10_max_val_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (1000 - 10) + b\n    a_to_1_max_val_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = a_to_1_max * (a - 11) + b\n    a_to_2_max_val_diff_diff_diff_diff_diff_diff_diff_diff_"
    },
    {
        "number": 4198,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    best_num = 0\n    for num in range(1, 10 ** 9):\n        num_str = str(num)\n        cur_sum = int(a * num + b * len(num_str))\n        if cur_sum == x:\n            best_num = max(best_num, num)\n    return str(best_num)"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, N = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n\n    h.sort(reverse=True)\n\n    count = 0\n\n    for friend in h:\n        if friend >= K:\n            count += 1\n\n    return count"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(n) for n in stdin.split(' ')]\n    friends = [int(n) for n in stdin.split(' ')]\n\n    # If height of the tallest friend is at least K, then you can ride the roller coaster\n    # If height of the tallest friend is less than K, then you can ride the roller coaster\n    # If height of any friend is less than K, then you cannot ride the roller coaster\n\n    return len([friend for friend in friends if friend >= K])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N, K = map(int, stdin[0].split())\n    h = list(map(int, stdin[1].split()))\n    h.sort()\n    ans = 0\n    for i in range(N):\n        if h[i] >= K:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(x) for x in stdin.split(\" \"))\n\n    h_arr = [int(x) for x in stdin.split(\" \")]\n\n    ans = 0\n\n    for i in range(N):\n        if h_arr[i] >= K:\n            ans += 1\n\n    print(ans)"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.strip().split()]\n\n    tallest_height = 0\n    friends_count = 0\n    for _ in range(N):\n        tallest_height = max(tallest_height, int(stdin.readline().strip()))\n\n    if tallest_height < K:\n        return '0'\n\n    for _ in range(N):\n        height = int(stdin.readline().strip())\n        if height >= K:\n            friends_count += 1\n\n    return str(friends_count)"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    height_array = [int(x) for x in stdin.split()]\n\n    tallest_index = height_array.index(max(height_array))\n    tallest = height_array[tallest_index]\n\n    number_of_tallest_friends = 0\n    for height in height_array:\n        if height >= tallest:\n            number_of_tallest_friends += 1\n\n    return str(number_of_tallest_friends)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Print the number of people among the Takahashi's friends who can ride the roller coaster.\n    \"\"\"\n    num_friends, K = map(int, stdin.strip().split())\n    h = list(map(int, stdin.strip().split()))\n    cnt = 0\n    for i in range(len(h)):\n        if h[i] > K:\n            cnt += 1\n    return cnt\n\nprint(solution(\"4 150\\n150 140 100 200\\n\"))\n\"\"\"\n4 150\n150 140 100 200\n\n2\n\nThe second friend can ride the roller coaster.\n\"\"\""
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    riders = 0\n    for i in range(N):\n        if h[i] > K:\n            riders += 1\n    return str(riders)\n\nprint(solution(stdin.readline()))\n\"\"\"\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4199,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    r = [int(x) for x in stdin.split()]\n    for i, h in enumerate(r):\n        if h <= k:\n            r[i] = h + k\n    return str(r.count(k))"
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    counts = sorted(set(votes), reverse=True)\n    if counts[0] == counts[1] * 4:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.strip().split(\" \")]\n    #print(N,M)\n    votes = [int(x) for x in stdin.strip().split(\" \")]\n    #print(votes)\n    votes_total = sum(votes)\n    #print(votes_total)\n    if votes_total == 0:\n        return \"No\"\n    if votes_total == 1:\n        return \"Yes\"\n    most_votes = max(votes)\n    #print(most_votes)\n    if most_votes >= votes_total / M:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\n\n\"\"\""
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    total = sum(A)\n    if M * 4 < total:\n        return 'No'\n    else:\n        return 'Yes'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    votes = list(map(int, stdin.split()))\n\n    max_v = max(votes)\n    if (max_v / m) < (1 / 4):\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip().split(' ')\n    n, m = int(line[0]), int(line[1])\n    l = [int(i) for i in stdin.strip().split(' ')[2:]]\n    count = sum(l)\n    if count == 0:\n        return 'No'\n    elif count < m:\n        return 'No'\n    elif m == n:\n        return 'Yes'\n    else:\n        return 'Yes' if count > m/4 else 'No'"
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    \n    A.sort(reverse=True)\n    count = 0\n    for i in range(N):\n        if A[i] / M >= 1 / 4:\n            count += A[i]\n        else:\n            break\n    \n    return \"Yes\" if count >= M * 4 else \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split(\" \"))\n    arr = [int(x) for x in stdin.split(\" \")]\n    arr = sorted(arr)\n\n    result = \"Yes\"\n    popular_items = 0\n\n    for i in range(n):\n        if popular_items == m:\n            break\n\n        if arr[i] >= i / m:\n            popular_items += 1\n\n    if popular_items < m:\n        result = \"No\"\n\n    return result\n\nassert(solution(stdin) == stdin)\n\"\"\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    votes = [int(x) for x in stdin.strip().split(' ')]\n    assert len(votes) == n\n\n    most_voted = max(votes)\n\n    if m > int(n / 4) and most_voted >= int(n / 4):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = [int(x) for x in stdin.split()]\n    c = [[c for c in stdin.split()[0]] for _ in range(h)]\n    m = min(h, w)\n    if k == 0:\n        return str(m)\n    n = (h + w - m) // k\n    if (h + w) % k == 0:\n        n -= 1\n    return str(n)"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = [int(x) for x in stdin.split()]\n    c = [x for x in stdin]\n    black = 0\n    for row in range(H):\n        for col in range(W):\n            if c[row][col] == '#':\n                black += 1\n    choices = 0\n    for row in range(H - 1, 0, -1):\n        for col in range(W - 1, 0, -1):\n            if (black - (row + 1) - (col + 1)) == K:\n                choices += 1\n    return str(choices)"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_recursive(stdin.splitlines()))\n\n\ndef"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.strip().split()]\n    squares = [list(stdin.strip()) for _ in range(n)]\n    choices = 0\n    for i in range(n):\n        for j in range(m):\n            if (i + j) % 2 == 0:\n                squares[i][j] = '#'\n    for i in range(n):\n        for j in range(m):\n            if i + j < k:\n                squares[i][j] = '#'\n            elif i + j > k:\n                squares[i][j] = '.'\n    for i in range(n):\n        if '#' in squares[i]:\n            choices += 1\n    return choices\n"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = [int(x) for x in stdin.split()]\n    grid = [stdin[i*W : (i+1)*W] for i in range(H)]\n    black_squares = set()\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                black_squares.add((i,j))\n    # We can use a 3-D array to represent the grid\n    # but this takes more memory\n    # We can use a 1-D array to represent the grid\n    # but this takes more space\n    # We can use a hash table to represent the grid\n    # This is all a bit complicated, and I think it will take forever\n    # If we do it with a 1-D array, it will take O(K) to store the chosen squares\n    # If we do it with a hash table, it will take O(K*K) to store the chosen squares\n    # The hash table may not fit on the course schedule\n    # The hash table may not fit on the class schedule\n    # We cannot use a hash table to store the chosen squares\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows and columns\n    # We cannot use a hash table to store the chosen rows"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(row, column, grid, painted):\n        if row < 0 or row >= len(grid) or column < 0 or column >= len(grid[0]):\n            return False\n        if grid[row][column] == '#':\n            return False\n        if painted[row][column] == '#':\n            return False\n        return True\n\n    def check(grid, painted, n_rows, n_columns):\n        max_row = len(grid) - 1\n        max_col = len(grid[0]) - 1\n        for row in range(n_rows):\n            for col in range(n_columns):\n                if is_possible(row, col, grid, painted):\n                    painted[row][col] = '#'\n                    if row + 1 <= max_row:\n                        check(grid, painted, row + 1, n_columns)\n                    if col + 1 <= max_col:\n                        check(grid, painted, n_rows, col + 1)\n                    return\n\n    grid = [list(stdin.strip()) for _ in range(stdin.count('\\n'))]\n    painted = [['.'] * len(grid[0]) for _ in range(len(grid))]\n    n_rows, n_columns = len(grid), len(grid[0])\n    check(grid, painted, n_rows, n_columns)\n    return str(len(painted) - sum(x.count('#') for x in painted))\n"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = [int(x) for x in stdin.split()]\n    grid = [[char for char in stdin.strip()] for _ in range(H)]\n    row_choices = set()\n    col_choices = set()\n\n    for row in grid:\n        for i, char in enumerate(row):\n            if char == '#':\n                row_choices.add(i)\n\n    for i in range(W):\n        for j in range(H):\n            if grid[j][i] == '#':\n                col_choices.add(i)\n\n    row_choices = sorted(row_choices)\n    col_choices = sorted(col_choices)\n\n    return '{}'.format(len(row_choices) * len(col_choices))"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    grid = [list(stdin.strip()) for _ in range(H)]\n    black = []\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                black.append((i, j))\n    return str(len([(i, j) for i in range(H) for j in range(W) if (i, j) not in black]))\n"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = [int(s) for s in stdin.split()]\n    black = [set() for _ in range(W)]\n    white = set()\n    for r in range(1, H+1):\n        for c in range(1, W+1):\n            if stdin[(r-1)*W + c - 1] == '#':\n                white.add((r, c))\n            else:\n                black[c-1].add((r, c))\n    if K < len(white):\n        return 0\n    return len(black)"
    },
    {
        "number": 4201,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nprint(solution(None))"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    # return \"%d\" % ((l % 2019) * (r % 2019))\n    return \"%d\" % (l * r % 2019)\n\"\"\"\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r = stdin.strip().split()\n    l, r = int(l), int(r)\n    if l == r:\n        return \"0\"\n    if l == 0:\n        return \"1\"\n    if r == 0:\n        return \"0\"\n    if r == 1:\n        return str(l % 2019)\n    if l == 1:\n        return str(r % 2019)\n    if l % 2019 == 0 and r % 2019 == 0:\n        return \"0\"\n    if l % 2019 == 0 and r % 2019!= 0:\n        return str(r % 2019)\n    if l % 2019!= 0 and r % 2019 == 0:\n        return str(l % 2019)\n    if l % 2019!= 0 and r % 2019!= 0:\n        return str(l * r % 2019)"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2020 2040\")\n    '2'\n    \"\"\"\n    L, R = map(int, stdin.split())\n    return str((L % 2019) * (R % 2019))"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    L, R = [int(x) for x in stdin.split()]\n    return str(min(2020, ((L % 2019) * (2019 - L) % 2019) % 2019))"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r = stdin.split()\n    return str((int(l) * int(r)) % 2019)"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.strip().split()]\n    return \"1\" if l == 1 else f\"{(l-1)*(r-1) % 2019:0>10}\""
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    i = 1\n    while True:\n        x = i * b\n        if x > a:\n            break\n        i += 1\n    return str(i * a)"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    L, R = [int(x) for x in stdin.split(\" \")]\n    return (L % 2019) * (R % 2019) % 2019\n\nprint(solution(stdin))\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split(\" \")]\n    i = l\n    while i <= r:\n        j = l\n        while j <= r:\n            if (i * j) % 2019 == 0:\n                return str(i * j)\n            j += 1\n        i += 1"
    },
    {
        "number": 4202,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(min(range(l, r+1), key=lambda x: x%2019))\n\"\"\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'AC' if check_conditions(stdin) else 'WA'\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0].isupper():\n        if s[2] == s[len(s)-2]:\n            for i in range(1, len(s)-1):\n                if s[i]!= s[0] and s[i]!= s[2]:\n                    return 'WA'\n            return 'AC'\n        else:\n            return 'WA'\n    else:\n        return 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[0] == \"A\":\n        return \"AC\"\n    else:\n        return \"WA\""
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n\"\"\"\nfrom collections import Counter\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4203,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s[0].lower() == s[1].lower() == s[2].lower() == \"a\":\n        return \"AC\"\n    else:\n        return \"WA\""
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    stdin = stdin.strip()\n    M = int(stdin)\n    K = int(stdin)\n\n    cur = \"1\"\n    while M > 0:\n        cur = '22' + cur\n        M -= 1\n    cur = cur[:K]\n    return cur"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    S = stdin.strip()\n    # Your code here\n    return \"\""
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = int(stdin)\n    \n    res = \"\"\n    for i in range(5, len(s)+1):\n        temp = s[i-5:i]\n        res += temp\n        temp = int(temp)\n        for j in range(0, 10):\n            temp = str(temp * 10 + j)\n            if temp in res:\n                res = res.replace(temp, \"\")\n                res = temp + res[len(temp):]\n                break\n    print(res[k-1])\n    \n"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    k = int(stdin[1])\n    new_s = ''\n    for c in s:\n        if c == '2':\n            new_s += '22'\n        elif c == '3':\n            new_s += '333'\n        elif c == '4':\n            new_s += '4444'\n        elif c == '5':\n            new_s += '55555'\n        elif c == '6':\n            new_s += '66666'\n        elif c == '7':\n            new_s += '77777'\n        elif c == '8':\n            new_s += '888888'\n        elif c == '9':\n            new_s += '9999999'\n        else:\n            new_s += c\n    return new_s[k - 1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(stdin)\n    s = str(s)\n    for _ in range(n // 10 ** 15):\n        s = s[2:] + s[:2]\n    print(s[(n % 10 ** 15) - 1])"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    S = stdin\n    for _ in range(15000000):\n        S = S.replace('2', '22')\n        S = S.replace('3', '333')\n        S = S.replace('4', '4444')\n        S = S.replace('5', '55555')\n        S = S.replace('6', '666666')\n        S = S.replace('7', '7777777')\n        S = S.replace('8', '88888888')\n        S = S.replace('9', '99999999')\n    return S[K-1]"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.strip().split(\" \")\n    S = int(S)\n    K = int(K)\n    print(S % 9)"
    },
    {
        "number": 4204,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    k = int(stdin[1])\n    \n    for i in range(5, 1 + len(s)):\n        if s[i] == '2':\n            s = s[:i] + '22' + s[i + 1:]\n        elif s[i] == '3':\n            s = s[:i] + '33333' + s[i + 1:]\n        elif s[i] == '4':\n            s = s[:i] + '4444' + s[i + 1:]\n        elif s[i] == '5':\n            s = s[:i] + '555555' + s[i + 1:]\n        elif s[i] == '6':\n            s = s[:i] + '666666' + s[i + 1:]\n        elif s[i] == '7':\n            s = s[:i] + '7777' + s[i + 1:]\n        elif s[i] == '8':\n            s = s[:i] + '8888' + s[i + 1:]\n        elif s[i] == '9':\n            s = s[:i] + '999999' + s[i + 1:]\n        \n        if len(s) >= k:\n            return s[k-1]"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    p = [int(n) for n in stdin.readline().strip().split(' ')]\n\n    return 'YES' if sort_p(p) else 'NO'\n\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    perm = stdin.readline().strip()\n    lst = [int(i) for i in perm.split()]\n    def is_sorted(lst: List[int]) -> bool:\n        for i in range(1, len(lst)):\n            if lst[i] < lst[i - 1]:\n                return False\n        return True\n    def find_swap_pos(lst: List[int], pos: int) -> int:\n        for i in range(pos + 1, len(lst)):\n            if lst[i] < lst[pos]:\n                return i\n        return len(lst) - 1\n    def swap(lst: List[int], pos1: int, pos2: int) -> List[int]:\n        lst[pos1], lst[pos2] = lst[pos2], lst[pos1]\n        return lst\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            pos = find_swap_pos(lst, i - 1)\n            lst = swap(lst, pos, i)\n            if is_sorted(lst):\n                return 'YES'\n    return 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    p = list(map(int, stdin.split(' ')))\n\n    # ensure that p is a permutation of {1, 2,..., N}\n    for i in range(1, N + 1):\n        assert i in p\n    # swap all elements from 1 to N\n    for i in range(1, N + 1):\n        p[i - 1], p[i - 2] = p[i - 2], p[i - 1]\n    # sort p in ascending order\n    p.sort()\n    # check if p is in ascending order\n    for i in range(N):\n        assert p[i] == i + 1\n    return 'YES'"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    p = list(map(int, lines[1].split()))\n    swaps = 0\n    for i in range(n):\n        for j in range(n):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                swaps += 1\n    return 'YES' if swaps == 0 else 'NO'"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, values = stdin.split('\\n', 1)\n    n = int(values.split(' ')[0])\n    p = [int(value) for value in values.split(' ')[1:]]\n    return 'YES' if is_sorted(p) else 'NO'\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return 'YES' if arr == sorted(arr) else 'NO'"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p = [int(x) for x in stdin.split()]\n    p.sort()\n    if p == list(range(1, len(p)+1)):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4205,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    P = [int(x) for x in stdin.readline().strip().split(' ')]\n    P.sort()\n    if P == list(range(1, N + 1)):\n        return \"YES\"\n    return \"NO\"\n\nassert(solution('''5''') == \"YES\")\nassert(solution('''2''') == \"YES\")\nassert(solution('''3''') == \"YES\")\nassert(solution('''4''') == \"YES\")\nassert(solution('''5''') == \"NO\")\nassert(solution('''6''') == \"NO\")\nassert(solution('''7''') == \"NO\")\nassert(solution('''8''') == \"NO\")\nassert(solution('''9''') == \"NO\")\nassert(solution('''10''') == \"NO\")\nassert(solution('''15''') == \"NO\")\nassert(solution('''16''') == \"NO\")\nassert(solution('''21''') == \"NO\")\nassert(solution('''22''') == \"NO\")\nassert(solution('''23''') == \"NO\")\nassert(solution('''24''') == \"NO\")\nassert(solution('''25''') == \"NO\")\nassert(solution('''26''') == \"NO\")\nassert(solution('''27''') == \"NO\")\nassert(solution('''28''') == \"NO\")\nassert(solution('''29''') == \"NO\")\nassert(solution('''30''') == \"NO\")\nassert(solution('''31''') == \"NO\")\nassert(solution('''32''') == \"NO\")\nassert(solution('''33''') == \"NO\")\nassert(solution('''34''') == \"NO\")\nassert(solution('''35''') == \"NO\")\nassert(solution('''36''') == \"NO\")\nassert(solution('''37''') == \"NO\")\nassert(solution('''38''') == \"NO\")\nassert(solution('''39''') == \"NO\")\nassert(solution('''40''') == \"NO\")\nassert(solution('''41''') == \"NO\")\nassert(solution('''42''') == \"NO\")\nassert(solution('''43''') == \"NO\")\nassert(solution('''44''') == \"NO\")\nassert(solution('''45''') == \"NO\")\nassert(solution('''46''') == \"NO\")\nassert(solution('''47''') == \"NO\")\nassert(solution('''48''') == \"NO\")\nassert(solution('''49''') == \"NO\")\nassert(solution('''50''') == \"NO\")\nassert(solution('''51''') == \"NO\")\nassert(solution('''52''') == \"NO\")\nassert(solution('''53''') == \"NO\")\nassert(solution('''54''') == \"NO\")\nassert(solution('''55''') == \"NO\")\nassert(solution('''56''') == \"NO\")\nassert(solution('''57''') == \"NO\")\nassert(solution('''58''') == \"NO\")\nassert(solution('''59''') == \"NO\")\nassert(solution('''60''') == \"NO\")\nassert(solution('''61''') == \"NO\")\nassert(solution('''62''') == \"NO\")\nassert(solution('''63''') == \"NO\")\nassert(solution('''64''') == \"NO\")\nassert(solution('''65''') == \"NO\")\nassert(solution('''66''') == \"NO\")\nassert(solution('''67''') == \"NO\")\nassert(solution('''68''') == \"NO\")\nassert(solution('''69''') == \"NO\")\nassert(solution('''70''') == \"NO\")\nassert(solution('''71''') == \"NO\")\nassert(solution('''72''') == \"NO\")\nassert(solution('''73''') == \"NO\")\nassert(solution('''74''') == \"NO\")\nassert(solution('''75''') == \"NO\")\nassert(solution('''76''') == \"NO\")\nassert(solution('''77''') == \"NO\")\nassert(solution('''78''') == \"NO\")\nassert(solution('''79''') == \"NO\")\nassert(solution('''80''') == \"NO\")\nassert(solution('''81''') == \"NO\")\nassert(solution('''82''') == \"NO\")\nassert(solution('''83''') == \"NO\")\nassert(solution('''84''') == \"NO\")\nassert(solution('''85''') == \"NO\")\nassert(solution('''86''') == \"NO\")\nassert(solution('''87''') == \"NO\")\nassert(solution('''88''') == \"NO\")\nassert(solution('''89''') == \"NO\")\nassert(solution('''90''') == \"NO\")\nassert(solution('''91''') == \"NO\")\nassert(solution('''92''') == \"NO\")\nassert(solution('''93''') == \"NO\")\nassert(solution('''94''') == \"NO\")\nassert(solution('''95''') == \"NO\")\nassert(solution('''96''') == \"NO\")\nassert(solution('''97''') == \"NO\")\nassert(solution('''98''') == \"NO\")\nassert(solution('''99''') == \"NO\")\nassert(solution('''100''') == \"NO\")\nassert(solution('''101''') == \"NO\")\nassert(solution('''102''') == \"NO\")\nassert(solution('''103''') == \"NO\")\nassert(solution('''104''') == \"NO\")\nassert(solution('''105''') == \"NO\")\nassert(solution('''106''') == \"NO\")\nassert(solution('''107''') == \"NO\")\nassert(solution('''108''') == \"NO\")\nassert(solution('''109''') == \"NO\")\nassert(solution('''110''') == \"NO\")\nassert(solution('''111''') == \"NO\")\nassert(solution('''112''') == \"NO\")\nassert(solution('''113''') == \"NO\")\nassert(solution('''114''') == \"NO\")\nassert(solution('''115''') == \"NO\")\nassert(solution('''116''') == \"NO\")\nassert(solution('''117''') == \"NO\")\nassert(solution('''118''') == \"NO\")\nassert(solution('''119''') == \"NO\")\nassert(solution('''120''') == \"NO\")\nassert(solution('''121''') == \"NO\")\nassert(solution('''122''') =="
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"\n\nassert(solution(\"3121\")) == \"2\"\nassert(solution(\"6\")) == \"1\"\nassert(solution(\"1000000000000000000000000000000000\")) == \"33\"\nassert(solution(\"201920181\")) == \"4\"\nassert(solution
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nassert(solution(stdin) == '')\n\nassert(solution('3') == '0')\n\nassert(solution('123') == '1')\n\nassert(solution('123456789') == '1234567890')\n\nassert(solution('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '123456789012345678901234567890')\n\nassert(solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0123456789012345678901234567890')\n\nassert(solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0123456789012345678901234567890')\n\nassert(solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0123456789012345678901234567890')\n\nassert(solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0123456789012345678901234567890')\n\nassert(solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0123456789012345678901234567890')\n\nassert(solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0123456789012345678901234567890')\n\nassert(solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0123456789012345678901234567890')\n\nassert(solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0123456789012345678901234567890')\n\nassert(solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0123456789012345678901234567890')\n\nassert(solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0123456789012345678901234567890')\n\nassert(solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0123456789012345678901234567890')\n\nassert(solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0123456789012345678901234567890')\n\nassert(solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0123456789012345678901234567890')\n\nassert(solution('01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890') == '0123456789012345678901234567890')\n\nassert(solution('012345678901234567890123456789012345678901234567890123"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return stdin.strip()\n\nprint(solution(input()))\n"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    return str(len([1 for i in range(1, len(n) + 1) if int(n[:i]) % 3 == 0]))\n"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n == 1:\n        return s\n    if n == 2:\n        return s[-1]\n\n    ans = 1\n    for i in range(n - 2):\n        ans *= 3\n        ans %= 10 ** 9 + 7\n        if s[i] == s[i + 2]:\n            ans -= 1\n        else:\n            ans += 1\n    return ans"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s == 0:\n        return 0\n    num = 0\n    while s > 0:\n        num += s % 3\n        s //= 3\n    return num\n"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = input()\n    # numbers = [int(number) for number in stdin]\n    numbers = stdin\n    numbers_copy = numbers[:]\n    numbers.sort()\n    number_of_digits = len(numbers)\n    if number_of_digits > 0:\n        numbers_copy.sort()\n        digits_number_1 = numbers[number_of_digits-1]\n        digits_number_2 = numbers[number_of_digits-2]\n        if digits_number_1 % 3 == 0:\n            numbers_copy.remove(digits_number_1)\n        if digits_number_2 % 3 == 0:\n            numbers_copy.remove(digits_number_2)\n    max_number_of_cuts = len(numbers_copy)\n    if max_number_of_cuts == 0:\n        return 0\n    else:\n        return max_number_of_cuts\n\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read the input\n    s = stdin.strip()\n    # Write the solution\n    return str(len([i for i in range(1, len(s)) if int(s[i - 1]) % 3 == int(s[i]) % 3]))"
    },
    {
        "number": 4206,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    digits = [0] * length\n\n    for i in range(length):\n        digit = int(stdin[i])\n        digits[i] = digit\n\n    if digits[0]!= 1:\n        return \"0\"\n\n    result = 0\n    for i in range(1, length):\n        if digits[i] == 0:\n            continue\n\n        for j in range(i+1, length):\n            if digits[j] == 0:\n                continue\n\n            for k in range(j+1, length):\n                if digits[k] == 0:\n                    continue\n\n                is_divisible_by_three = digits[i] % 3 == 0 and digits[j] % 3 == 0 and digits[k] % 3 == 0\n                if is_divisible_by_three:\n                    result += 1\n    return str(result)"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    result = 0\n    for i in range(n):\n        d = -a[i] / b[i] if b[i] else float('inf')\n        result = max(result, count_zeroes(a, b, d))\n    return str(result)\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n    c = [0] * n\n    for i in range(n):\n        c[i] = a[i] * b[i]\n    max_zeroes = max(c)\n    return str(max_zeroes)\n\n\n\nprint(solution(input()))\n\n\"\"\"\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    max_zeroes = 0\n    for d in range(1, 2 * n):\n        c = [d * x + y for x, y in zip(a, b)]\n        zeroes = sum(c[i] == 0 for i in range(len(c)))\n        if zeroes > max_zeroes:\n            max_zeroes = zeroes\n    return str(max_zeroes)\n\nprint(solution(''))\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    def get_max_number_of_zeroes(d: int, a: list, b: list) -> int:\n        result = 0\n\n        for i in range(n):\n            result += abs(a[i] * d + b[i]) // abs(d)\n\n        return result\n\n    maximum = 0\n\n    for d in range(-1, n):\n        max_zeroes = get_max_number_of_zeroes(d, a, b)\n\n        if max_zeroes > maximum:\n            maximum = max_zeroes\n\n    return maximum\n\n\nsolution(None)\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    c = [0]*n\n    for i in range(n):\n        c[i] = a[i]*d + b[i]\n    return max(c)"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = [0] * n\n    for i in range(n):\n        c[i] = a[i] * d + b[i]\n    return max(c)\n\"\"\"\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    return stdin.readline()\n\n\nprint(solution(StringIO('5\\n1 2 3 4 5\\n2 4 7 11 3\\n')))\nprint(solution(StringIO('3\\n13 37 39\\n1 2 3\\n')))\nprint(solution(StringIO('4\\n0 0 0 0\\n1 2 3 4\\n')))\nprint(solution(StringIO('3\\n1 2 -1\\n-6 -12 6\\n')))\nprint(solution(StringIO('4\\n0 0 0 0\\n1 2 3 4\\n')))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n\n    max_zeroes = 0\n    for i in range(1, n+1):\n        c = [a[i]*d + b[i] for d in range(-1, 2)]\n        zeroes = sum(1 for ci in c if ci == 0)\n        if zeroes > max_zeroes:\n            max_zeroes = zeroes\n    return str(max_zeroes)\n\nprint(solution(\"\"\"1\n2 3 4 5\n2 4 7 11 3\n\"\"\".strip()))\n"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    if n == 1:\n        return '1'\n\n    c = [a[0] * b[0] + b[1]]\n    for i in range(1, n):\n        c.append(c[i - 1] + a[i] * b[i])\n\n    return str(c.count(0))\n"
    },
    {
        "number": 4207,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a_b = [a[i] * b[i] for i in range(n)]\n    c = [a_b[i] + b[i] for i in range(n)]\n    #print(n)\n    #print(a)\n    #print(b)\n    #print(a_b)\n    #print(c)\n    max = 0\n    for i in c:\n        if i < 0:\n            break\n        if i == 0:\n            max += 1\n    return str(max)"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n    from collections import Counter\n    l_count, r_count = Counter(l), Counter(r)\n    l_pairs, r_pairs = 0, 0\n    for i in l_count:\n        l_pairs += l_count[i] * (l_count[i] - 1) // 2\n    for i in r_count:\n        r_pairs += r_count[i] * (r_count[i] - 1) // 2\n    print(l_pairs * r_pairs)\n    return \"\""
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(stdin.strip())\n    r = list(stdin.strip())\n    return '\\n'.join(map(lambda x:''.join(map(str, x)), max_compatible_pairs(n, l, r)))\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n    result = 0\n    return result"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    count = 0\n    for i in range(len(l)):\n        if l[i]!= '?' and r[i]!= '?':\n            if l[i]!= r[i]:\n                count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def g(l, r) -> int:\n        ans = 0\n        if len(l)!= len(r):\n            return -1\n        for i in range(len(l)):\n            if l[i]!= r[i] and l[i]!= '?' and r[i]!= '?':\n                return -1\n            elif l[i]!= '?' and r[i]!= '?':\n                ans += 1\n        return ans\n\n    n = int(stdin.readline().strip())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    res = []\n    for i in range(n):\n        for j in range(i+1, n):\n            res.append((g(l[:i+1], r[:j+1]), i, j))\n\n    res.sort(key=lambda x: (-x[0], x[1], x[2]))\n    print(len(res))\n    for i in res:\n        print(i[1], i[2])"
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nassert(solution('''10\ncodeforces\ndodivthree\n''')) == '5'\nassert(solution('''7\nabaca?b\nzabbbcc\n''')) == '5'\nassert(solution('''9\nbambarbia\nhellocode\n''')) == '0'\nassert(solution('''10\ncode??????\n??????test\n''')) == '10'\nassert(solution('''14\nbababcbaa\nbababcbaa\n''')) == '1'\nassert(solution('''17\nabababbaaaa\naaaaaaaaaabb\n''')) == '1'\nassert(solution('''17\nabababbaaaa\naabbbbbbaaa\n''')) == '3'\nassert(solution('''17\nabababbaaaa\naabbbbbbbaa\n''')) == '4'\nassert(solution('''17\nabababbaaaa\nbbbbbbaaaaa\n''')) == '1'\nassert(solution('''17\nabababbaaaa\nbaaaaabbbba\n''')) == '2'\nassert(solution('''17\nabababbaaaa\nbaaaaabbbba\n''')) == '3'\nassert(solution('''17\nabababbaaaa\naabbbbbbaa\n''')) == '4'\nassert(solution('''17\nabababbaaaa\naaabbbbbba\n''')) == '5'\nassert(solution('''17\nabababbaaaa\naaabbbbbba\n''')) == '6'\nassert(solution('''17\nabababbaaaa\nbbabbbbbbba\n''')) == '7'\nassert(solution('''17\nabababbaaaa\nbbaaaabbbaa\n''')) == '8'\nassert(solution('''17\nabababbaaaa\nbbaaaabbbaa\n''')) == '9'\nassert(solution('''17\nabababbaaaa\nbbaaaabbbaa\n''')) == '10'\nassert(solution('''17\nabababbaaaa\nbbaaaabbbaa\n''')) == '11'\nassert(solution('''17\nabababbaaaa\nbaaaaabbbaa\n''')) == '12'\nassert(solution('''17\nabababbaaaa\nbaaaaabbbaa\n''')) == '13'\nassert(solution('''17\nabababbaaaa\naabbbbbbaaa\n''')) == '14'\nassert(solution('''17\nabababbaaaa\naabbbbbbaaa\n''')) == '15'\nassert(solution('''17\nabababbaaaa\naabbbbbbaaa\n''')) == '16'\nassert(solution('''17\nabababbaaaa\nbbbbbbaaaaa\n''')) == '17'\nassert(solution('''17\nabababbaaaa\nbbbbbbaaaaa\n''')) == '18'\nassert(solution('''17\nabababbaaaa\nbbbbbbaaaaa\n''')) == '19'\nassert(solution('''17\nabababbaaaa\nbbbbbbbbaaa\n''')) == '20'\nassert(solution('''17\nabababbaaaa\nbbaaaabbbaa\n''')) == '21'\nassert(solution('''17\nabababbaaaa\nbbaaaabbbaa\n''')) == '22'\nassert(solution('''17\nabababbaaaa\nbbaaaabbbaa\n''')) == '23'\nassert(solution('''17\nabababbaaaa\nbaaaaabbbaa\n''')) == '24'\nassert(solution('''17\nabababbaaaa\nbaaaaabbbaa\n''')) == '25'\nassert(solution('''17\nabababbaaaa\nbbaaaabbbaa\n''')) == '26'\nassert(solution('''17\nabababbaaaa\nbaaaaabbbaa\n''')) == '27'\nassert(solution('''17\nabababbaaaa\nbbaaaabbbaa\n''')) == '28'\nassert(solution('''17\nabababbaaaa\nbbaaaabbbaa\n''')) == '29'\nassert(solution('''17\nabababbaaaa\nbbaaaabbbaa\n''')) == '30'\nassert(solution('''17\nabababbaaaa\nbbbbbbaaaaa\n''')) == '31'\nassert(solution('''17\nabababbaaaa\nbbbbbbaaaaa\n''')) == '32'\nassert(solution('''17\nabababbaaaa\nbbbbbbbbaaa\n''')) == '33'\nassert(solution('''17\nabababbaaaa\nbbbbbbbbaaa\n''')) == '34'\nassert(solution('''17\nabababbaaaa\nbbbbbbbbaaa\n''')) == '35'\nassert(solution('''17\nabababbaaaa\nbbbbbbbbaaa\n''')) == '36'\nassert(solution('''17\nabababbaaaa\nbbbbbbbbaaa\n''')) == '37'\nassert(solution('''17\nabababbaaaa\nbbbbbbbbaaa\n''')) == '38'\nassert(solution("
    },
    {
        "number": 4208,
        "checkpoint": "6B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = stdin.readline().strip()\n    r = stdin.readline().strip()\n\n    l_to_r = collections.defaultdict(list)\n    for i in range(n):\n        l_to_r[l[i]].append(i)\n\n    r_to_l = collections.defaultdict(list)\n    for i in range(n):\n        r_to_l[r[i]].append(i)\n\n    k = 0\n    for _ in range(int(stdin.readline())):\n        a, b = map(int, stdin.readline().split())\n        if len(l_to_r[l[a - 1]]) == 1 and len(r_to_l[r[b - 1]]) == 1:\n            k += 1\n            print(a, b)\n\n    return str(k)"
    }
]